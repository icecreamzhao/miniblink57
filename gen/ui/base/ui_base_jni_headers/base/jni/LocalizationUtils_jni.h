// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/LocalizationUtils

#ifndef org_chromium_ui_base_LocalizationUtils_JNI
#define org_chromium_ui_base_LocalizationUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLocalizationUtilsClassPath[] = "org/chromium/ui/base/LocalizationUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LocalizationUtils_clazz __attribute__((unused)) = 0;
#define LocalizationUtils_clazz(env) base::android::LazyGetClass(env, kLocalizationUtilsClassPath, &g_LocalizationUtils_clazz)

} // namespace

namespace l10n_util {

// Step 2: method stubs.

static jint GetFirstStrongCharacterDirection(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& string);

JNI_GENERATOR_EXPORT jint
Java_org_chromium_ui_base_LocalizationUtils_nativeGetFirstStrongCharacterDirection(JNIEnv*
                                                                                       env,
    jclass jcaller,
    jstring string)
{
    return GetFirstStrongCharacterDirection(env,
        base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, string));
}

static base::subtle::AtomicWord g_LocalizationUtils_getJavaLocale = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_LocalizationUtils_getJavaLocale(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& language,
    const base::android::JavaRefOrBare<jstring>& country,
    const base::android::JavaRefOrBare<jstring>& variant)
{
    CHECK_CLAZZ(env, LocalizationUtils_clazz(env),
        LocalizationUtils_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, LocalizationUtils_clazz(env),
        "getJavaLocale",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "Ljava/util/Locale;",
        &g_LocalizationUtils_getJavaLocale);

    jobject ret = env->CallStaticObjectMethod(LocalizationUtils_clazz(env),
        method_id, language.obj(), country.obj(), variant.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_LocalizationUtils_getDisplayNameForLocale = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_LocalizationUtils_getDisplayNameForLocale(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& locale,
    const base::android::JavaRefOrBare<jobject>& displayLocale)
{
    CHECK_CLAZZ(env, LocalizationUtils_clazz(env),
        LocalizationUtils_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, LocalizationUtils_clazz(env),
        "getDisplayNameForLocale",
        "("
        "Ljava/util/Locale;"
        "Ljava/util/Locale;"
        ")"
        "Ljava/lang/String;",
        &g_LocalizationUtils_getDisplayNameForLocale);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(LocalizationUtils_clazz(env),
        method_id, locale.obj(), displayLocale.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_LocalizationUtils_isLayoutRtl = 0;
static jboolean Java_LocalizationUtils_isLayoutRtl(JNIEnv* env)
{
    CHECK_CLAZZ(env, LocalizationUtils_clazz(env),
        LocalizationUtils_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, LocalizationUtils_clazz(env),
        "isLayoutRtl",
        "("
        ")"
        "Z",
        &g_LocalizationUtils_isLayoutRtl);

    jboolean ret = env->CallStaticBooleanMethod(LocalizationUtils_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsLocalizationUtils[] = {
    { "nativeGetFirstStrongCharacterDirection",
        "("
        "Ljava/lang/String;"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_LocalizationUtils_nativeGetFirstStrongCharacterDirection) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsLocalizationUtilsSize = arraysize(kMethodsLocalizationUtils);

    if (env->RegisterNatives(LocalizationUtils_clazz(env),
            kMethodsLocalizationUtils,
            kMethodsLocalizationUtilsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, LocalizationUtils_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace l10n_util

#endif // org_chromium_ui_base_LocalizationUtils_JNI
