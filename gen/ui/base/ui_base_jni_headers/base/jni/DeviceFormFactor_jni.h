// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/DeviceFormFactor

#ifndef org_chromium_ui_base_DeviceFormFactor_JNI
#define org_chromium_ui_base_DeviceFormFactor_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDeviceFormFactorClassPath[] = "org/chromium/ui/base/DeviceFormFactor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DeviceFormFactor_clazz __attribute__((unused)) = 0;
#define DeviceFormFactor_clazz(env) base::android::LazyGetClass(env, kDeviceFormFactorClassPath, &g_DeviceFormFactor_clazz)

} // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_DeviceFormFactor_isTablet = 0;
static jboolean Java_DeviceFormFactor_isTablet(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, DeviceFormFactor_clazz(env),
        DeviceFormFactor_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, DeviceFormFactor_clazz(env),
        "isTablet",
        "("
        "Landroid/content/Context;"
        ")"
        "Z",
        &g_DeviceFormFactor_isTablet);

    jboolean ret = env->CallStaticBooleanMethod(DeviceFormFactor_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

#endif // org_chromium_ui_base_DeviceFormFactor_JNI
