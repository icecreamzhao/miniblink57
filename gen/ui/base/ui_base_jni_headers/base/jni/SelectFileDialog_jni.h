// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/SelectFileDialog

#ifndef org_chromium_ui_base_SelectFileDialog_JNI
#define org_chromium_ui_base_SelectFileDialog_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSelectFileDialogClassPath[] = "org/chromium/ui/base/SelectFileDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SelectFileDialog_clazz __attribute__((unused)) = 0;
#define SelectFileDialog_clazz(env) base::android::LazyGetClass(env, kSelectFileDialogClassPath, &g_SelectFileDialog_clazz)

} // namespace

namespace ui {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_SelectFileDialog_nativeOnFileSelected(JNIEnv* env,
    jobject jcaller,
    jlong nativeSelectFileDialogImpl,
    jstring filePath,
    jstring displayName)
{
    SelectFileDialogImpl* native = reinterpret_cast<SelectFileDialogImpl*>(nativeSelectFileDialogImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnFileSelected");
    return native->OnFileSelected(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, filePath),
        base::android::JavaParamRef<jstring>(env, displayName));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_SelectFileDialog_nativeOnMultipleFilesSelected(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeSelectFileDialogImpl,
    jobjectArray filePathArray,
    jobjectArray displayNameArray)
{
    SelectFileDialogImpl* native = reinterpret_cast<SelectFileDialogImpl*>(nativeSelectFileDialogImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnMultipleFilesSelected");
    return native->OnMultipleFilesSelected(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobjectArray>(env, filePathArray),
        base::android::JavaParamRef<jobjectArray>(env, displayNameArray));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_SelectFileDialog_nativeOnFileNotSelected(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeSelectFileDialogImpl)
{
    SelectFileDialogImpl* native = reinterpret_cast<SelectFileDialogImpl*>(nativeSelectFileDialogImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnFileNotSelected");
    return native->OnFileNotSelected(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_SelectFileDialog_selectFile = 0;
static void Java_SelectFileDialog_selectFile(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& fileTypes,
    jboolean capture,
    jboolean multiple,
    const base::android::JavaRefOrBare<jobject>& window)
{
    CHECK_CLAZZ(env, obj.obj(),
        SelectFileDialog_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SelectFileDialog_clazz(env),
        "selectFile",
        "("
        "[Ljava/lang/String;"
        "Z"
        "Z"
        "Lorg/chromium/ui/base/WindowAndroid;"
        ")"
        "V",
        &g_SelectFileDialog_selectFile);

    env->CallVoidMethod(obj.obj(),
        method_id, fileTypes.obj(), capture, multiple, window.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_SelectFileDialog_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_SelectFileDialog_create(JNIEnv* env, jlong nativeSelectFileDialog)
{
    CHECK_CLAZZ(env, SelectFileDialog_clazz(env),
        SelectFileDialog_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SelectFileDialog_clazz(env),
        "create",
        "("
        "J"
        ")"
        "Lorg/chromium/ui/base/SelectFileDialog;",
        &g_SelectFileDialog_create);

    jobject ret = env->CallStaticObjectMethod(SelectFileDialog_clazz(env),
        method_id, nativeSelectFileDialog);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSelectFileDialog[] = {
    { "nativeOnFileSelected",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_SelectFileDialog_nativeOnFileSelected) },
    { "nativeOnMultipleFilesSelected",
        "("
        "J"
        "[Ljava/lang/String;"
        "[Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_SelectFileDialog_nativeOnMultipleFilesSelected) },
    { "nativeOnFileNotSelected",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_SelectFileDialog_nativeOnFileNotSelected) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsSelectFileDialogSize = arraysize(kMethodsSelectFileDialog);

    if (env->RegisterNatives(SelectFileDialog_clazz(env),
            kMethodsSelectFileDialog,
            kMethodsSelectFileDialogSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, SelectFileDialog_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace ui

#endif // org_chromium_ui_base_SelectFileDialog_JNI
