// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/Clipboard

#ifndef org_chromium_ui_base_Clipboard_JNI
#define org_chromium_ui_base_Clipboard_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kClipboardClassPath[] = "org/chromium/ui/base/Clipboard";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_Clipboard_clazz __attribute__((unused)) = 0;
#define Clipboard_clazz(env) base::android::LazyGetClass(env, kClipboardClassPath, &g_Clipboard_clazz)

} // namespace

namespace ui {

// Step 2: method stubs.

static base::subtle::AtomicWord g_Clipboard_create = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Clipboard_create(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, Clipboard_clazz(env),
        Clipboard_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, Clipboard_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/ui/base/Clipboard;",
        &g_Clipboard_create);

    jobject ret = env->CallStaticObjectMethod(Clipboard_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Clipboard_getCoercedText = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_Clipboard_getCoercedText(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Clipboard_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Clipboard_clazz(env),
        "getCoercedText",
        "("
        ")"
        "Ljava/lang/String;",
        &g_Clipboard_getCoercedText);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Clipboard_getHTMLText = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_Clipboard_getHTMLText(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Clipboard_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Clipboard_clazz(env),
        "getHTMLText",
        "("
        ")"
        "Ljava/lang/String;",
        &g_Clipboard_getHTMLText);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Clipboard_setText = 0;
static void Java_Clipboard_setText(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& text)
{
    CHECK_CLAZZ(env, obj.obj(),
        Clipboard_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Clipboard_clazz(env),
        "setText",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_Clipboard_setText);

    env->CallVoidMethod(obj.obj(),
        method_id, text.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Clipboard_setHTMLText = 0;
static void Java_Clipboard_setHTMLText(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& html,
    const base::android::JavaRefOrBare<jstring>& text)
{
    CHECK_CLAZZ(env, obj.obj(),
        Clipboard_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Clipboard_clazz(env),
        "setHTMLText",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_Clipboard_setHTMLText);

    env->CallVoidMethod(obj.obj(),
        method_id, html.obj(), text.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Clipboard_clear = 0;
static void Java_Clipboard_clear(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Clipboard_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Clipboard_clazz(env),
        "clear",
        "("
        ")"
        "V",
        &g_Clipboard_clear);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace ui

#endif // org_chromium_ui_base_Clipboard_JNI
