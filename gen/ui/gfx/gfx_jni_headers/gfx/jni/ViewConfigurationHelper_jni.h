// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gfx/ViewConfigurationHelper

#ifndef org_chromium_ui_gfx_ViewConfigurationHelper_JNI
#define org_chromium_ui_gfx_ViewConfigurationHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kViewConfigurationHelperClassPath[] = "org/chromium/ui/gfx/ViewConfigurationHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ViewConfigurationHelper_clazz __attribute__((unused))
= 0;
#define ViewConfigurationHelper_clazz(env) base::android::LazyGetClass(env, kViewConfigurationHelperClassPath, &g_ViewConfigurationHelper_clazz)

} // namespace

namespace gfx {

// Step 2: method stubs.

static void UpdateSharedViewConfiguration(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    jfloat maximumFlingVelocity,
    jfloat minimumFlingVelocity,
    jfloat touchSlop,
    jfloat doubleTapSlop,
    jfloat minScalingSpan);

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_gfx_ViewConfigurationHelper_nativeUpdateSharedViewConfiguration(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jfloat maximumFlingVelocity,
    jfloat minimumFlingVelocity,
    jfloat touchSlop,
    jfloat doubleTapSlop,
    jfloat minScalingSpan)
{
    return UpdateSharedViewConfiguration(env,
        base::android::JavaParamRef<jobject>(env, jcaller), maximumFlingVelocity,
        minimumFlingVelocity, touchSlop, doubleTapSlop, minScalingSpan);
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_getDoubleTapTimeout = 0;
static jint Java_ViewConfigurationHelper_getDoubleTapTimeout(JNIEnv* env)
{
    CHECK_CLAZZ(env, ViewConfigurationHelper_clazz(env),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ViewConfigurationHelper_clazz(env),
        "getDoubleTapTimeout",
        "("
        ")"
        "I",
        &g_ViewConfigurationHelper_getDoubleTapTimeout);

    jint ret = env->CallStaticIntMethod(ViewConfigurationHelper_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_getLongPressTimeout = 0;
static jint Java_ViewConfigurationHelper_getLongPressTimeout(JNIEnv* env)
{
    CHECK_CLAZZ(env, ViewConfigurationHelper_clazz(env),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ViewConfigurationHelper_clazz(env),
        "getLongPressTimeout",
        "("
        ")"
        "I",
        &g_ViewConfigurationHelper_getLongPressTimeout);

    jint ret = env->CallStaticIntMethod(ViewConfigurationHelper_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_getTapTimeout = 0;
static jint Java_ViewConfigurationHelper_getTapTimeout(JNIEnv* env)
{
    CHECK_CLAZZ(env, ViewConfigurationHelper_clazz(env),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ViewConfigurationHelper_clazz(env),
        "getTapTimeout",
        "("
        ")"
        "I",
        &g_ViewConfigurationHelper_getTapTimeout);

    jint ret = env->CallStaticIntMethod(ViewConfigurationHelper_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_ViewConfigurationHelper_getMaximumFlingVelocity
    = 0;
static jfloat Java_ViewConfigurationHelper_getMaximumFlingVelocity(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewConfigurationHelper_clazz(env),
        "getMaximumFlingVelocity",
        "("
        ")"
        "F",
        &g_ViewConfigurationHelper_getMaximumFlingVelocity);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_ViewConfigurationHelper_getMinimumFlingVelocity
    = 0;
static jfloat Java_ViewConfigurationHelper_getMinimumFlingVelocity(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewConfigurationHelper_clazz(env),
        "getMinimumFlingVelocity",
        "("
        ")"
        "F",
        &g_ViewConfigurationHelper_getMinimumFlingVelocity);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_getTouchSlop = 0;
static jfloat Java_ViewConfigurationHelper_getTouchSlop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewConfigurationHelper_clazz(env),
        "getTouchSlop",
        "("
        ")"
        "F",
        &g_ViewConfigurationHelper_getTouchSlop);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_getDoubleTapSlop = 0;
static jfloat Java_ViewConfigurationHelper_getDoubleTapSlop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewConfigurationHelper_clazz(env),
        "getDoubleTapSlop",
        "("
        ")"
        "F",
        &g_ViewConfigurationHelper_getDoubleTapSlop);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_getMinScalingSpan = 0;
static jfloat Java_ViewConfigurationHelper_getMinScalingSpan(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewConfigurationHelper_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewConfigurationHelper_clazz(env),
        "getMinScalingSpan",
        "("
        ")"
        "F",
        &g_ViewConfigurationHelper_getMinScalingSpan);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ViewConfigurationHelper_createWithListener = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ViewConfigurationHelper_createWithListener(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, ViewConfigurationHelper_clazz(env),
        ViewConfigurationHelper_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ViewConfigurationHelper_clazz(env),
        "createWithListener",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/ui/gfx/ViewConfigurationHelper;",
        &g_ViewConfigurationHelper_createWithListener);

    jobject ret = env->CallStaticObjectMethod(ViewConfigurationHelper_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsViewConfigurationHelper[] = {
    { "nativeUpdateSharedViewConfiguration",
        "("
        "F"
        "F"
        "F"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_gfx_ViewConfigurationHelper_nativeUpdateSharedViewConfiguration) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsViewConfigurationHelperSize = arraysize(kMethodsViewConfigurationHelper);

    if (env->RegisterNatives(ViewConfigurationHelper_clazz(env),
            kMethodsViewConfigurationHelper,
            kMethodsViewConfigurationHelperSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ViewConfigurationHelper_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace gfx

#endif // org_chromium_ui_gfx_ViewConfigurationHelper_JNI
