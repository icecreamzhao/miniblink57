// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gl/SurfaceTexturePlatformWrapper

#ifndef org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI
#define org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSurfaceTexturePlatformWrapperClassPath[] = "org/chromium/ui/gl/SurfaceTexturePlatformWrapper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_clazz
    __attribute__((unused))
    = 0;
#define SurfaceTexturePlatformWrapper_clazz(env) base::android::LazyGetClass(env, kSurfaceTexturePlatformWrapperClassPath, &g_SurfaceTexturePlatformWrapper_clazz)

} // namespace

namespace gl {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_SurfaceTexturePlatformWrapper_create(JNIEnv* env, JniIntWrapper textureId)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "create",
        "("
        "I"
        ")"
        "Landroid/graphics/SurfaceTexture;",
        &g_SurfaceTexturePlatformWrapper_create);

    jobject ret = env->CallStaticObjectMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, as_jint(textureId));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_destroy = 0;
static void Java_SurfaceTexturePlatformWrapper_destroy(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& surfaceTexture)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "destroy",
        "("
        "Landroid/graphics/SurfaceTexture;"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_destroy);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_setFrameAvailableCallback
    = 0;
static void Java_SurfaceTexturePlatformWrapper_setFrameAvailableCallback(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& surfaceTexture,
    jlong nativeSurfaceTextureListener)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "setFrameAvailableCallback",
        "("
        "Landroid/graphics/SurfaceTexture;"
        "J"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_setFrameAvailableCallback);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj(), nativeSurfaceTextureListener);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_updateTexImage = 0;
static void Java_SurfaceTexturePlatformWrapper_updateTexImage(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& surfaceTexture)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "updateTexImage",
        "("
        "Landroid/graphics/SurfaceTexture;"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_updateTexImage);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_getTransformMatrix
    = 0;
static void Java_SurfaceTexturePlatformWrapper_getTransformMatrix(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& surfaceTexture,
    const base::android::JavaRefOrBare<jfloatArray>& matrix)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "getTransformMatrix",
        "("
        "Landroid/graphics/SurfaceTexture;"
        "[F"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_getTransformMatrix);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj(), matrix.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_attachToGLContext
    = 0;
static void Java_SurfaceTexturePlatformWrapper_attachToGLContext(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& surfaceTexture,
    JniIntWrapper texName)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "attachToGLContext",
        "("
        "Landroid/graphics/SurfaceTexture;"
        "I"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_attachToGLContext);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj(), as_jint(texName));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_detachFromGLContext
    = 0;
static void Java_SurfaceTexturePlatformWrapper_detachFromGLContext(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& surfaceTexture)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "detachFromGLContext",
        "("
        "Landroid/graphics/SurfaceTexture;"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_detachFromGLContext);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_release = 0;
static void Java_SurfaceTexturePlatformWrapper_release(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& surfaceTexture)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "release",
        "("
        "Landroid/graphics/SurfaceTexture;"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_release);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_setDefaultBufferSize
    = 0;
static void Java_SurfaceTexturePlatformWrapper_setDefaultBufferSize(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& surfaceTexture,
    JniIntWrapper width,
    JniIntWrapper height)
{
    CHECK_CLAZZ(env, SurfaceTexturePlatformWrapper_clazz(env),
        SurfaceTexturePlatformWrapper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SurfaceTexturePlatformWrapper_clazz(env),
        "setDefaultBufferSize",
        "("
        "Landroid/graphics/SurfaceTexture;"
        "I"
        "I"
        ")"
        "V",
        &g_SurfaceTexturePlatformWrapper_setDefaultBufferSize);

    env->CallStaticVoidMethod(SurfaceTexturePlatformWrapper_clazz(env),
        method_id, surfaceTexture.obj(), as_jint(width), as_jint(height));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace gl

#endif // org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI
