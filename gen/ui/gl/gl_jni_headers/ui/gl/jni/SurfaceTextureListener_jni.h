// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gl/SurfaceTextureListener

#ifndef org_chromium_ui_gl_SurfaceTextureListener_JNI
#define org_chromium_ui_gl_SurfaceTextureListener_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSurfaceTextureListenerClassPath[] = "org/chromium/ui/gl/SurfaceTextureListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SurfaceTextureListener_clazz __attribute__((unused))
= 0;
#define SurfaceTextureListener_clazz(env) base::android::LazyGetClass(env, kSurfaceTextureListenerClassPath, &g_SurfaceTextureListener_clazz)

} // namespace

namespace gl {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_gl_SurfaceTextureListener_nativeFrameAvailable(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeSurfaceTextureListener)
{
    SurfaceTextureListener* native = reinterpret_cast<SurfaceTextureListener*>(nativeSurfaceTextureListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "FrameAvailable");
    return native->FrameAvailable(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_gl_SurfaceTextureListener_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativeSurfaceTextureListener)
{
    SurfaceTextureListener* native = reinterpret_cast<SurfaceTextureListener*>(nativeSurfaceTextureListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSurfaceTextureListener[] = {
    { "nativeFrameAvailable",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_gl_SurfaceTextureListener_nativeFrameAvailable) },
    { "nativeDestroy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_gl_SurfaceTextureListener_nativeDestroy) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsSurfaceTextureListenerSize = arraysize(kMethodsSurfaceTextureListener);

    if (env->RegisterNatives(SurfaceTextureListener_clazz(env),
            kMethodsSurfaceTextureListener,
            kMethodsSurfaceTextureListenerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, SurfaceTextureListener_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace gl

#endif // org_chromium_ui_gl_SurfaceTextureListener_JNI
