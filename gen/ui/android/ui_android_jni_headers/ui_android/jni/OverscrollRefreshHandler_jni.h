// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/OverscrollRefreshHandler

#ifndef org_chromium_ui_OverscrollRefreshHandler_JNI
#define org_chromium_ui_OverscrollRefreshHandler_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOverscrollRefreshHandlerClassPath[] = "org/chromium/ui/OverscrollRefreshHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OverscrollRefreshHandler_clazz
    __attribute__((unused))
    = 0;
#define OverscrollRefreshHandler_clazz(env) base::android::LazyGetClass(env, kOverscrollRefreshHandlerClassPath, &g_OverscrollRefreshHandler_clazz)

} // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_OverscrollRefreshHandler_start = 0;
static jboolean Java_OverscrollRefreshHandler_start(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        OverscrollRefreshHandler_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, OverscrollRefreshHandler_clazz(env),
        "start",
        "("
        ")"
        "Z",
        &g_OverscrollRefreshHandler_start);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_OverscrollRefreshHandler_pull = 0;
static void Java_OverscrollRefreshHandler_pull(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jfloat delta)
{
    CHECK_CLAZZ(env, obj.obj(),
        OverscrollRefreshHandler_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, OverscrollRefreshHandler_clazz(env),
        "pull",
        "("
        "F"
        ")"
        "V",
        &g_OverscrollRefreshHandler_pull);

    env->CallVoidMethod(obj.obj(),
        method_id, delta);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_OverscrollRefreshHandler_release = 0;
static void Java_OverscrollRefreshHandler_release(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean allowRefresh)
{
    CHECK_CLAZZ(env, obj.obj(),
        OverscrollRefreshHandler_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, OverscrollRefreshHandler_clazz(env),
        "release",
        "("
        "Z"
        ")"
        "V",
        &g_OverscrollRefreshHandler_release);

    env->CallVoidMethod(obj.obj(),
        method_id, allowRefresh);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_OverscrollRefreshHandler_reset = 0;
static void Java_OverscrollRefreshHandler_reset(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        OverscrollRefreshHandler_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, OverscrollRefreshHandler_clazz(env),
        "reset",
        "("
        ")"
        "V",
        &g_OverscrollRefreshHandler_reset);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

#endif // org_chromium_ui_OverscrollRefreshHandler_JNI
