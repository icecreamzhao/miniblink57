// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/WindowAndroid

#ifndef org_chromium_ui_base_WindowAndroid_JNI
#define org_chromium_ui_base_WindowAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWindowAndroidClassPath[] = "org/chromium/ui/base/WindowAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WindowAndroid_clazz __attribute__((unused)) = 0;
#define WindowAndroid_clazz(env) base::android::LazyGetClass(env, kWindowAndroidClassPath, &g_WindowAndroid_clazz)

} // namespace

namespace ui {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    jint displayId);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_ui_base_WindowAndroid_nativeInit(JNIEnv* env, jobject jcaller,
    jint displayId)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        displayId);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_WindowAndroid_nativeOnVSync(JNIEnv* env, jobject jcaller,
    jlong nativeWindowAndroid,
    jlong vsyncTimeMicros,
    jlong vsyncPeriodMicros)
{
    WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnVSync");
    return native->OnVSync(env, base::android::JavaParamRef<jobject>(env, jcaller), vsyncTimeMicros, vsyncPeriodMicros);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_WindowAndroid_nativeOnVisibilityChanged(JNIEnv*
                                                                      env,
    jobject jcaller,
    jlong nativeWindowAndroid,
    jboolean visible)
{
    WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnVisibilityChanged");
    return native->OnVisibilityChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller), visible);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_WindowAndroid_nativeOnActivityStopped(JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid)
{
    WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStopped");
    return native->OnActivityStopped(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_WindowAndroid_nativeOnActivityStarted(JNIEnv* env,
    jobject jcaller,
    jlong nativeWindowAndroid)
{
    WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStarted");
    return native->OnActivityStarted(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_base_WindowAndroid_nativeDestroy(JNIEnv* env, jobject jcaller,
    jlong nativeWindowAndroid)
{
    WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_WindowAndroid_createForTesting = 0;
static jlong Java_WindowAndroid_createForTesting(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, WindowAndroid_clazz(env),
        WindowAndroid_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WindowAndroid_clazz(env),
        "createForTesting",
        "("
        "Landroid/content/Context;"
        ")"
        "J",
        &g_WindowAndroid_createForTesting);

    jlong ret = env->CallStaticLongMethod(WindowAndroid_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WindowAndroid_clearNativePointer = 0;
static void Java_WindowAndroid_clearNativePointer(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WindowAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WindowAndroid_clazz(env),
        "clearNativePointer",
        "("
        ")"
        "V",
        &g_WindowAndroid_clearNativePointer);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WindowAndroid_hasPermission = 0;
static jboolean Java_WindowAndroid_hasPermission(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& permission)
{
    CHECK_CLAZZ(env, obj.obj(),
        WindowAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WindowAndroid_clazz(env),
        "hasPermission",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WindowAndroid_hasPermission);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, permission.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WindowAndroid_canRequestPermission = 0;
static jboolean Java_WindowAndroid_canRequestPermission(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& permission)
{
    CHECK_CLAZZ(env, obj.obj(),
        WindowAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WindowAndroid_clazz(env),
        "canRequestPermission",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WindowAndroid_canRequestPermission);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, permission.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WindowAndroid_requestVSyncUpdate = 0;
static void Java_WindowAndroid_requestVSyncUpdate(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WindowAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WindowAndroid_clazz(env),
        "requestVSyncUpdate",
        "("
        ")"
        "V",
        &g_WindowAndroid_requestVSyncUpdate);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWindowAndroid[] = {
    { "nativeInit",
        "("
        "I"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_WindowAndroid_nativeInit) },
    { "nativeOnVSync",
        "("
        "J"
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_WindowAndroid_nativeOnVSync) },
    { "nativeOnVisibilityChanged",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_WindowAndroid_nativeOnVisibilityChanged) },
    { "nativeOnActivityStopped",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_WindowAndroid_nativeOnActivityStopped) },
    { "nativeOnActivityStarted",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_WindowAndroid_nativeOnActivityStarted) },
    { "nativeDestroy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_base_WindowAndroid_nativeDestroy) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsWindowAndroidSize = arraysize(kMethodsWindowAndroid);

    if (env->RegisterNatives(WindowAndroid_clazz(env),
            kMethodsWindowAndroid,
            kMethodsWindowAndroidSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, WindowAndroid_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace ui

#endif // org_chromium_ui_base_WindowAndroid_JNI
