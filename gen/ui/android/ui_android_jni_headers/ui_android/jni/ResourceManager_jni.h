// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/resources/ResourceManager

#ifndef org_chromium_ui_resources_ResourceManager_JNI
#define org_chromium_ui_resources_ResourceManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kResourceManagerClassPath[] = "org/chromium/ui/resources/ResourceManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ResourceManager_clazz __attribute__((unused)) = 0;
#define ResourceManager_clazz(env) base::android::LazyGetClass(env, kResourceManagerClassPath, &g_ResourceManager_clazz)

} // namespace

namespace ui {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_resources_ResourceManager_nativeOnResourceReady(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeResourceManagerImpl,
    jint resType,
    jint resId,
    jobject bitmap,
    jint paddingLeft,
    jint paddingTop,
    jint paddingRight,
    jint paddingBottom,
    jint apertureLeft,
    jint apertureTop,
    jint apertureRight,
    jint apertureBottom)
{
    ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnResourceReady");
    return native->OnResourceReady(env, base::android::JavaParamRef<jobject>(env, jcaller), resType, resId, base::android::JavaParamRef<jobject>(env, bitmap), paddingLeft, paddingTop, paddingRight, paddingBottom,
        apertureLeft, apertureTop, apertureRight, apertureBottom);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_resources_ResourceManager_nativeOnCrushedSpriteResourceReady(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeResourceManagerImpl,
    jint bitmapResId,
    jobject bitmap,
    jobjectArray frameRects,
    jint unscaledSpriteWidth,
    jint unscaledSpriteHeight,
    jfloat scaledSpriteWidth,
    jfloat scaledSpriteHeight)
{
    ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnCrushedSpriteResourceReady");
    return native->OnCrushedSpriteResourceReady(env,
        base::android::JavaParamRef<jobject>(env, jcaller), bitmapResId,
        base::android::JavaParamRef<jobject>(env, bitmap),
        base::android::JavaParamRef<jobjectArray>(env, frameRects),
        unscaledSpriteWidth, unscaledSpriteHeight, scaledSpriteWidth,
        scaledSpriteHeight);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_resources_ResourceManager_nativeOnCrushedSpriteResourceReloaded(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeResourceManagerImpl,
    jint bitmapResId,
    jobject bitmap)
{
    ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnCrushedSpriteResourceReloaded");
    return native->OnCrushedSpriteResourceReloaded(env,
        base::android::JavaParamRef<jobject>(env, jcaller), bitmapResId,
        base::android::JavaParamRef<jobject>(env, bitmap));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_resources_ResourceManager_nativeRemoveResource(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeResourceManagerImpl,
    jint resType,
    jint resId)
{
    ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "RemoveResource");
    return native->RemoveResource(env, base::android::JavaParamRef<jobject>(env, jcaller), resType, resId);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_ui_resources_ResourceManager_nativeClearTintedResourceCache(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeResourceManagerImpl)
{
    ResourceManagerImpl* native = reinterpret_cast<ResourceManagerImpl*>(nativeResourceManagerImpl);
    CHECK_NATIVE_PTR(env, jcaller, native, "ClearTintedResourceCache");
    return native->ClearTintedResourceCache(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_ResourceManager_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ResourceManager_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& windowAndroid,
    jlong staticResourceManagerPtr)
{
    CHECK_CLAZZ(env, ResourceManager_clazz(env),
        ResourceManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ResourceManager_clazz(env),
        "create",
        "("
        "Lorg/chromium/ui/base/WindowAndroid;"
        "J"
        ")"
        "Lorg/chromium/ui/resources/ResourceManager;",
        &g_ResourceManager_create);

    jobject ret = env->CallStaticObjectMethod(ResourceManager_clazz(env),
        method_id, windowAndroid.obj(), staticResourceManagerPtr);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ResourceManager_destroy = 0;
static void Java_ResourceManager_destroy(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ResourceManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ResourceManager_clazz(env),
        "destroy",
        "("
        ")"
        "V",
        &g_ResourceManager_destroy);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ResourceManager_resourceRequested = 0;
static void Java_ResourceManager_resourceRequested(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper resType,
    JniIntWrapper resId)
{
    CHECK_CLAZZ(env, obj.obj(),
        ResourceManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ResourceManager_clazz(env),
        "resourceRequested",
        "("
        "I"
        "I"
        ")"
        "V",
        &g_ResourceManager_resourceRequested);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(resType), as_jint(resId));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ResourceManager_preloadResource = 0;
static void Java_ResourceManager_preloadResource(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper resType,
    JniIntWrapper resId)
{
    CHECK_CLAZZ(env, obj.obj(),
        ResourceManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ResourceManager_clazz(env),
        "preloadResource",
        "("
        "I"
        "I"
        ")"
        "V",
        &g_ResourceManager_preloadResource);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(resType), as_jint(resId));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ResourceManager_crushedSpriteResourceRequested
    = 0;
static void Java_ResourceManager_crushedSpriteResourceRequested(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper bitmapResId,
    JniIntWrapper metatadataResId,
    jboolean reloading)
{
    CHECK_CLAZZ(env, obj.obj(),
        ResourceManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ResourceManager_clazz(env),
        "crushedSpriteResourceRequested",
        "("
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_ResourceManager_crushedSpriteResourceRequested);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(bitmapResId), as_jint(metatadataResId), reloading);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ResourceManager_getNativePtr = 0;
static jlong Java_ResourceManager_getNativePtr(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ResourceManager_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ResourceManager_clazz(env),
        "getNativePtr",
        "("
        ")"
        "J",
        &g_ResourceManager_getNativePtr);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsResourceManager[] = {
    { "nativeOnResourceReady",
        "("
        "J"
        "I"
        "I"
        "Landroid/graphics/Bitmap;"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_resources_ResourceManager_nativeOnResourceReady) },
    { "nativeOnCrushedSpriteResourceReady",
        "("
        "J"
        "I"
        "Landroid/graphics/Bitmap;"
        "[[I"
        "I"
        "I"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_resources_ResourceManager_nativeOnCrushedSpriteResourceReady) },
    { "nativeOnCrushedSpriteResourceReloaded",
        "("
        "J"
        "I"
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_resources_ResourceManager_nativeOnCrushedSpriteResourceReloaded) },
    { "nativeRemoveResource",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_resources_ResourceManager_nativeRemoveResource) },
    { "nativeClearTintedResourceCache",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_ui_resources_ResourceManager_nativeClearTintedResourceCache) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsResourceManagerSize = arraysize(kMethodsResourceManager);

    if (env->RegisterNatives(ResourceManager_clazz(env),
            kMethodsResourceManager,
            kMethodsResourceManagerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ResourceManager_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace ui

#endif // org_chromium_ui_resources_ResourceManager_JNI
