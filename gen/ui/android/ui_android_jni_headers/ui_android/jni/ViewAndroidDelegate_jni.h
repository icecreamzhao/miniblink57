// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/ViewAndroidDelegate

#ifndef org_chromium_ui_base_ViewAndroidDelegate_JNI
#define org_chromium_ui_base_ViewAndroidDelegate_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kViewAndroidDelegateClassPath[] = "org/chromium/ui/base/ViewAndroidDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ViewAndroidDelegate_clazz __attribute__((unused)) = 0;
#define ViewAndroidDelegate_clazz(env) base::android::LazyGetClass(env, kViewAndroidDelegateClassPath, &g_ViewAndroidDelegate_clazz)

} // namespace

namespace ui {

// Step 2: method stubs.

static base::subtle::AtomicWord g_ViewAndroidDelegate_acquireView = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ViewAndroidDelegate_acquireView(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewAndroidDelegate_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewAndroidDelegate_clazz(env),
        "acquireView",
        "("
        ")"
        "Landroid/view/View;",
        &g_ViewAndroidDelegate_acquireView);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ViewAndroidDelegate_removeView = 0;
static void Java_ViewAndroidDelegate_removeView(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& anchorView)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewAndroidDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewAndroidDelegate_clazz(env),
        "removeView",
        "("
        "Landroid/view/View;"
        ")"
        "V",
        &g_ViewAndroidDelegate_removeView);

    env->CallVoidMethod(obj.obj(),
        method_id, anchorView.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ViewAndroidDelegate_setViewPosition = 0;
static void Java_ViewAndroidDelegate_setViewPosition(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& view,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jfloat scale,
    JniIntWrapper leftMargin,
    JniIntWrapper topMargin)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewAndroidDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewAndroidDelegate_clazz(env),
        "setViewPosition",
        "("
        "Landroid/view/View;"
        "F"
        "F"
        "F"
        "F"
        "F"
        "I"
        "I"
        ")"
        "V",
        &g_ViewAndroidDelegate_setViewPosition);

    env->CallVoidMethod(obj.obj(),
        method_id, view.obj(), x, y, width, height, scale,
        as_jint(leftMargin), as_jint(topMargin));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ViewAndroidDelegate_startDragAndDrop = 0;
static jboolean Java_ViewAndroidDelegate_startDragAndDrop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& text,
    const base::android::JavaRefOrBare<jobject>& shadowImage)
{
    CHECK_CLAZZ(env, obj.obj(),
        ViewAndroidDelegate_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ViewAndroidDelegate_clazz(env),
        "startDragAndDrop",
        "("
        "Ljava/lang/String;"
        "Landroid/graphics/Bitmap;"
        ")"
        "Z",
        &g_ViewAndroidDelegate_startDragAndDrop);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, text.obj(), shadowImage.obj());
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

} // namespace ui

#endif // org_chromium_ui_base_ViewAndroidDelegate_JNI
