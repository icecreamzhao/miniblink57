// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/view/Surface

#ifndef android_view_Surface_JNI
#define android_view_Surface_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSurfaceClassPath[] = "android/view/Surface";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_Surface_clazz __attribute__((unused)) = 0;
#define Surface_clazz(env) base::android::LazyGetClass(env, kSurfaceClassPath, &g_Surface_clazz)

} // namespace

namespace JNI_Surface {

enum Java_Surface_constant_fields {
    ROTATION_0 = 0,
    ROTATION_180 = 2,
    ROTATION_270 = 3,
    ROTATION_90 = 1,
};

// Step 2: method stubs.

static base::subtle::AtomicWord g_Surface_finalize = 0;
static void Java_Surface_finalize(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static void Java_Surface_finalize(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "finalize",
        "()V",
        &g_Surface_finalize);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Surface_release = 0;
static void Java_Surface_release(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static void Java_Surface_release(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "release",
        "()V",
        &g_Surface_release);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Surface_isValid = 0;
static jboolean Java_Surface_isValid(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_Surface_isValid(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "isValid",
        "()Z",
        &g_Surface_isValid);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Surface_lockCanvas = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Surface_lockCanvas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Surface_lockCanvas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "lockCanvas",
        "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;",
        &g_Surface_lockCanvas);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Surface_unlockCanvasAndPost = 0;
static void Java_Surface_unlockCanvasAndPost(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static void Java_Surface_unlockCanvasAndPost(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "unlockCanvasAndPost",
        "(Landroid/graphics/Canvas;)V",
        &g_Surface_unlockCanvasAndPost);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Surface_lockHardwareCanvas = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Surface_lockHardwareCanvas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Surface_lockHardwareCanvas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "lockHardwareCanvas",
        "()Landroid/graphics/Canvas;",
        &g_Surface_lockHardwareCanvas);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Surface_unlockCanvas = 0;
static void Java_Surface_unlockCanvas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static void Java_Surface_unlockCanvas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "unlockCanvas",
        "(Landroid/graphics/Canvas;)V",
        &g_Surface_unlockCanvas);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Surface_describeContents = 0;
static jint Java_Surface_describeContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_Surface_describeContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "describeContents",
        "()I",
        &g_Surface_describeContents);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Surface_readFromParcel = 0;
static void Java_Surface_readFromParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static void Java_Surface_readFromParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "readFromParcel",
        "(Landroid/os/Parcel;)V",
        &g_Surface_readFromParcel);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Surface_writeToParcel = 0;
static void Java_Surface_writeToParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1) __attribute__((unused));
static void Java_Surface_writeToParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "writeToParcel",
        "(Landroid/os/Parcel;I)V",
        &g_Surface_writeToParcel);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj(), as_jint(p1));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Surface_toString = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Surface_toString(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Surface_toString(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Surface_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "toString",
        "()Ljava/lang/String;",
        &g_Surface_toString);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Surface_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Surface_Constructor(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Surface_Constructor(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, Surface_clazz(env),
        Surface_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Surface_clazz(env),
        "<init>",
        "(Landroid/graphics/SurfaceTexture;)V",
        &g_Surface_Constructor);

    jobject ret = env->NewObject(Surface_clazz(env),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace JNI_Surface

#endif // android_view_Surface_JNI
