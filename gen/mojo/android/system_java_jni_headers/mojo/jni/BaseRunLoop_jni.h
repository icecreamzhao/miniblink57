// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/mojo/system/impl/BaseRunLoop

#ifndef org_chromium_mojo_system_impl_BaseRunLoop_JNI
#define org_chromium_mojo_system_impl_BaseRunLoop_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kBaseRunLoopClassPath[] = "org/chromium/mojo/system/impl/BaseRunLoop";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_BaseRunLoop_clazz __attribute__((unused)) = 0;
#define BaseRunLoop_clazz(env) base::android::LazyGetClass(env, kBaseRunLoopClassPath, &g_BaseRunLoop_clazz)

} // namespace

namespace mojo {
namespace android {

    // Step 2: method stubs.

    static jlong CreateBaseRunLoop(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeCreateBaseRunLoop(JNIEnv*
                                                                               env,
        jobject jcaller)
    {
        return CreateBaseRunLoop(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }

    static void Run(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRun(JNIEnv* env,
        jobject jcaller)
    {
        return Run(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }

    static void RunUntilIdle(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRunUntilIdle(JNIEnv*
                                                                          env,
        jobject jcaller)
    {
        return RunUntilIdle(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }

    static void Quit(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jlong runLoopID);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeQuit(JNIEnv* env,
        jobject jcaller,
        jlong runLoopID)
    {
        return Quit(env, base::android::JavaParamRef<jobject>(env, jcaller),
            runLoopID);
    }

    static void PostDelayedTask(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jlong runLoopID,
        const base::android::JavaParamRef<jobject>& runnable,
        jlong delay);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_mojo_system_impl_BaseRunLoop_nativePostDelayedTask(JNIEnv*
                                                                             env,
        jobject jcaller,
        jlong runLoopID,
        jobject runnable,
        jlong delay)
    {
        return PostDelayedTask(env, base::android::JavaParamRef<jobject>(env, jcaller), runLoopID, base::android::JavaParamRef<jobject>(env, runnable),
            delay);
    }

    static void DeleteMessageLoop(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jlong runLoopID);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeDeleteMessageLoop(JNIEnv*
                                                                               env,
        jobject jcaller,
        jlong runLoopID)
    {
        return DeleteMessageLoop(env, base::android::JavaParamRef<jobject>(env, jcaller), runLoopID);
    }

    static base::subtle::AtomicWord g_BaseRunLoop_runRunnable = 0;
    static void Java_BaseRunLoop_runRunnable(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& runnable)
    {
        CHECK_CLAZZ(env, BaseRunLoop_clazz(env),
            BaseRunLoop_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, BaseRunLoop_clazz(env),
            "runRunnable",
            "("
            "Ljava/lang/Runnable;"
            ")"
            "V",
            &g_BaseRunLoop_runRunnable);

        env->CallStaticVoidMethod(BaseRunLoop_clazz(env),
            method_id, runnable.obj());
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsBaseRunLoop[] = {
        { "nativeCreateBaseRunLoop",
            "("
            ")"
            "J",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeCreateBaseRunLoop) },
        { "nativeRun",
            "("
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRun) },
        { "nativeRunUntilIdle",
            "("
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRunUntilIdle) },
        { "nativeQuit",
            "("
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeQuit) },
        { "nativePostDelayedTask",
            "("
            "J"
            "Ljava/lang/Runnable;"
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativePostDelayedTask) },
        { "nativeDeleteMessageLoop",
            "("
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeDeleteMessageLoop) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsBaseRunLoopSize = arraysize(kMethodsBaseRunLoop);

        if (env->RegisterNatives(BaseRunLoop_clazz(env),
                kMethodsBaseRunLoop,
                kMethodsBaseRunLoopSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, BaseRunLoop_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace mojo

#endif // org_chromium_mojo_system_impl_BaseRunLoop_JNI
