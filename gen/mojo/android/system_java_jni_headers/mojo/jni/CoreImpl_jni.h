// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/mojo/system/impl/CoreImpl

#ifndef org_chromium_mojo_system_impl_CoreImpl_JNI
#define org_chromium_mojo_system_impl_CoreImpl_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCoreImplClassPath[] = "org/chromium/mojo/system/impl/CoreImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CoreImpl_clazz __attribute__((unused)) = 0;
#define CoreImpl_clazz(env) base::android::LazyGetClass(env, kCoreImplClassPath, &g_CoreImpl_clazz)

} // namespace

namespace mojo {
namespace android {

    // Step 2: method stubs.

    static jlong GetTimeTicksNow(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetTimeTicksNow(JNIEnv*
                                                                          env,
        jobject jcaller)
    {
        return GetTimeTicksNow(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }

    static jint WaitMany(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& buffer,
        jlong deadline);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeWaitMany(JNIEnv* env,
        jobject jcaller,
        jobject buffer,
        jlong deadline)
    {
        return WaitMany(env, base::android::JavaParamRef<jobject>(env, jcaller),
            base::android::JavaParamRef<jobject>(env, buffer), deadline);
    }

    static base::android::ScopedJavaLocalRef<jobject> CreateMessagePipe(JNIEnv* env,
        const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& optionsBuffer);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateMessagePipe(JNIEnv*
                                                                            env,
        jobject jcaller,
        jobject optionsBuffer)
    {
        return CreateMessagePipe(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, optionsBuffer)).Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> CreateDataPipe(JNIEnv* env,
        const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& optionsBuffer);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateDataPipe(JNIEnv*
                                                                         env,
        jobject jcaller,
        jobject optionsBuffer)
    {
        return CreateDataPipe(env, base::android::JavaParamRef<jobject>(env, jcaller),
            base::android::JavaParamRef<jobject>(env, optionsBuffer))
            .Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> CreateSharedBuffer(JNIEnv*
                                                                             env,
        const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& optionsBuffer,
        jlong numBytes);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateSharedBuffer(JNIEnv*
                                                                             env,
        jobject jcaller,
        jobject optionsBuffer,
        jlong numBytes)
    {
        return CreateSharedBuffer(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, optionsBuffer),
            numBytes)
            .Release();
    }

    static jint Close(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeClose(JNIEnv* env, jobject jcaller,
        jint mojoHandle)
    {
        return Close(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle);
    }

    static jint Wait(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& buffer,
        jint mojoHandle,
        jint signals,
        jlong deadline);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeWait(JNIEnv* env, jobject jcaller,
        jobject buffer,
        jint mojoHandle,
        jint signals,
        jlong deadline)
    {
        return Wait(env, base::android::JavaParamRef<jobject>(env, jcaller),
            base::android::JavaParamRef<jobject>(env, buffer), mojoHandle, signals,
            deadline);
    }

    static jint WriteMessage(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        const base::android::JavaParamRef<jobject>& bytes,
        jint numBytes,
        const base::android::JavaParamRef<jobject>& handlesBuffer,
        jint flags);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteMessage(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jobject bytes,
        jint numBytes,
        jobject handlesBuffer,
        jint flags)
    {
        return WriteMessage(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, base::android::JavaParamRef<jobject>(env, bytes), numBytes,
            base::android::JavaParamRef<jobject>(env, handlesBuffer), flags);
    }

    static base::android::ScopedJavaLocalRef<jobject> ReadMessage(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        const base::android::JavaParamRef<jobject>& bytes,
        const base::android::JavaParamRef<jobject>& handlesBuffer,
        jint flags);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadMessage(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jobject bytes,
        jobject handlesBuffer,
        jint flags)
    {
        return ReadMessage(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, base::android::JavaParamRef<jobject>(env, bytes),
            base::android::JavaParamRef<jobject>(env, handlesBuffer),
            flags)
            .Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> ReadData(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        const base::android::JavaParamRef<jobject>& elements,
        jint elementsSize,
        jint flags);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadData(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jobject elements,
        jint elementsSize,
        jint flags)
    {
        return ReadData(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, base::android::JavaParamRef<jobject>(env, elements),
            elementsSize, flags)
            .Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> BeginReadData(JNIEnv* env,
        const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        jint numBytes,
        jint flags);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginReadData(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jint numBytes,
        jint flags)
    {
        return BeginReadData(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, numBytes, flags)
            .Release();
    }

    static jint EndReadData(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        jint numBytesRead);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndReadData(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jint numBytesRead)
    {
        return EndReadData(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, numBytesRead);
    }

    static base::android::ScopedJavaLocalRef<jobject> WriteData(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        const base::android::JavaParamRef<jobject>& elements,
        jint limit,
        jint flags);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteData(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jobject elements,
        jint limit,
        jint flags)
    {
        return WriteData(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, base::android::JavaParamRef<jobject>(env, elements), limit,
            flags)
            .Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> BeginWriteData(JNIEnv* env,
        const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        jint numBytes,
        jint flags);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginWriteData(JNIEnv*
                                                                         env,
        jobject jcaller,
        jint mojoHandle,
        jint numBytes,
        jint flags)
    {
        return BeginWriteData(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, numBytes, flags)
            .Release();
    }

    static jint EndWriteData(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        jint numBytesWritten);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndWriteData(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jint numBytesWritten)
    {
        return EndWriteData(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, numBytesWritten);
    }

    static base::android::ScopedJavaLocalRef<jobject> Duplicate(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        const base::android::JavaParamRef<jobject>& optionsBuffer);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeDuplicate(JNIEnv* env,
        jobject jcaller,
        jint mojoHandle,
        jobject optionsBuffer)
    {
        return Duplicate(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, base::android::JavaParamRef<jobject>(env, optionsBuffer))
            .Release();
    }

    static base::android::ScopedJavaLocalRef<jobject> Map(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint mojoHandle,
        jlong offset,
        jlong numBytes,
        jint flags);

    JNI_GENERATOR_EXPORT jobject
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeMap(JNIEnv* env, jobject jcaller,
        jint mojoHandle,
        jlong offset,
        jlong numBytes,
        jint flags)
    {
        return Map(env, base::android::JavaParamRef<jobject>(env, jcaller),
            mojoHandle, offset, numBytes, flags)
            .Release();
    }

    static jint Unmap(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& buffer);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeUnmap(JNIEnv* env, jobject jcaller,
        jobject buffer)
    {
        return Unmap(env, base::android::JavaParamRef<jobject>(env, jcaller),
            base::android::JavaParamRef<jobject>(env, buffer));
    }

    static jint GetNativeBufferOffset(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobject>& buffer,
        jint alignment);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetNativeBufferOffset(JNIEnv*
                                                                                env,
        jobject jcaller,
        jobject buffer,
        jint alignment)
    {
        return GetNativeBufferOffset(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, buffer), alignment);
    }

    static base::subtle::AtomicWord g_CoreImpl_newResultAndBuffer = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_CoreImpl_newResultAndBuffer(JNIEnv* env, JniIntWrapper mojoResult,
        const base::android::JavaRefOrBare<jobject>& buffer)
    {
        CHECK_CLAZZ(env, CoreImpl_clazz(env),
            CoreImpl_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, CoreImpl_clazz(env),
            "newResultAndBuffer",
            "("
            "I"
            "Ljava/nio/ByteBuffer;"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            &g_CoreImpl_newResultAndBuffer);

        jobject ret = env->CallStaticObjectMethod(CoreImpl_clazz(env),
            method_id, as_jint(mojoResult), buffer.obj());
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_CoreImpl_newReadMessageResult = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_CoreImpl_newReadMessageResult(JNIEnv* env, JniIntWrapper mojoResult,
        JniIntWrapper messageSize,
        JniIntWrapper handlesCount)
    {
        CHECK_CLAZZ(env, CoreImpl_clazz(env),
            CoreImpl_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, CoreImpl_clazz(env),
            "newReadMessageResult",
            "("
            "I"
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            &g_CoreImpl_newReadMessageResult);

        jobject ret = env->CallStaticObjectMethod(CoreImpl_clazz(env),
            method_id, as_jint(mojoResult), as_jint(messageSize),
            as_jint(handlesCount));
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_CoreImpl_newResultAndInteger = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_CoreImpl_newResultAndInteger(JNIEnv* env, JniIntWrapper mojoResult,
        JniIntWrapper numBytesRead)
    {
        CHECK_CLAZZ(env, CoreImpl_clazz(env),
            CoreImpl_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, CoreImpl_clazz(env),
            "newResultAndInteger",
            "("
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            &g_CoreImpl_newResultAndInteger);

        jobject ret = env->CallStaticObjectMethod(CoreImpl_clazz(env),
            method_id, as_jint(mojoResult), as_jint(numBytesRead));
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_CoreImpl_newNativeCreationResult = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_CoreImpl_newNativeCreationResult(JNIEnv* env, JniIntWrapper mojoResult,
        JniIntWrapper mojoHandle1,
        JniIntWrapper mojoHandle2)
    {
        CHECK_CLAZZ(env, CoreImpl_clazz(env),
            CoreImpl_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, CoreImpl_clazz(env),
            "newNativeCreationResult",
            "("
            "I"
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            &g_CoreImpl_newNativeCreationResult);

        jobject ret = env->CallStaticObjectMethod(CoreImpl_clazz(env),
            method_id, as_jint(mojoResult), as_jint(mojoHandle1),
            as_jint(mojoHandle2));
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsCoreImpl[] = {
        { "nativeGetTimeTicksNow",
            "("
            ")"
            "J",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetTimeTicksNow) },
        { "nativeWaitMany",
            "("
            "Ljava/nio/ByteBuffer;"
            "J"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeWaitMany) },
        { "nativeCreateMessagePipe",
            "("
            "Ljava/nio/ByteBuffer;"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateMessagePipe) },
        { "nativeCreateDataPipe",
            "("
            "Ljava/nio/ByteBuffer;"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateDataPipe) },
        { "nativeCreateSharedBuffer",
            "("
            "Ljava/nio/ByteBuffer;"
            "J"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateSharedBuffer) },
        { "nativeClose",
            "("
            "I"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeClose) },
        { "nativeWait",
            "("
            "Ljava/nio/ByteBuffer;"
            "I"
            "I"
            "J"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeWait) },
        { "nativeWriteMessage",
            "("
            "I"
            "Ljava/nio/ByteBuffer;"
            "I"
            "Ljava/nio/ByteBuffer;"
            "I"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteMessage) },
        { "nativeReadMessage",
            "("
            "I"
            "Ljava/nio/ByteBuffer;"
            "Ljava/nio/ByteBuffer;"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadMessage) },
        { "nativeReadData",
            "("
            "I"
            "Ljava/nio/ByteBuffer;"
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadData) },
        { "nativeBeginReadData",
            "("
            "I"
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginReadData) },
        { "nativeEndReadData",
            "("
            "I"
            "I"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndReadData) },
        { "nativeWriteData",
            "("
            "I"
            "Ljava/nio/ByteBuffer;"
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteData) },
        { "nativeBeginWriteData",
            "("
            "I"
            "I"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginWriteData) },
        { "nativeEndWriteData",
            "("
            "I"
            "I"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndWriteData) },
        { "nativeDuplicate",
            "("
            "I"
            "Ljava/nio/ByteBuffer;"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeDuplicate) },
        { "nativeMap",
            "("
            "I"
            "J"
            "J"
            "I"
            ")"
            "Lorg/chromium/mojo/system/ResultAnd;",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeMap) },
        { "nativeUnmap",
            "("
            "Ljava/nio/ByteBuffer;"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeUnmap) },
        { "nativeGetNativeBufferOffset",
            "("
            "Ljava/nio/ByteBuffer;"
            "I"
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetNativeBufferOffset) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsCoreImplSize = arraysize(kMethodsCoreImpl);

        if (env->RegisterNatives(CoreImpl_clazz(env),
                kMethodsCoreImpl,
                kMethodsCoreImplSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, CoreImpl_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace mojo

#endif // org_chromium_mojo_system_impl_CoreImpl_JNI
