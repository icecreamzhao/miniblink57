// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/view/KeyEvent

#ifndef android_view_KeyEvent_JNI
#define android_view_KeyEvent_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kKeyEventClassPath[] = "android/view/KeyEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_KeyEvent_clazz __attribute__((unused)) = 0;
#define KeyEvent_clazz(env) base::android::LazyGetClass(env, kKeyEventClassPath, &g_KeyEvent_clazz)

} // namespace

namespace JNI_KeyEvent {

enum Java_KeyEvent_constant_fields {
    ACTION_DOWN = 0,
    ACTION_MULTIPLE = 2,
    ACTION_UP = 1,
    FLAG_CANCELED = 32,
    FLAG_CANCELED_LONG_PRESS = 256,
    FLAG_EDITOR_ACTION = 16,
    FLAG_FALLBACK = 1024,
    FLAG_FROM_SYSTEM = 8,
    FLAG_KEEP_TOUCH_MODE = 4,
    FLAG_LONG_PRESS = 128,
    FLAG_SOFT_KEYBOARD = 2,
    FLAG_TRACKING = 512,
    FLAG_VIRTUAL_HARD_KEY = 64,
    FLAG_WOKE_HERE = 1,
    KEYCODE_0 = 7,
    KEYCODE_1 = 8,
    KEYCODE_11 = 227,
    KEYCODE_12 = 228,
    KEYCODE_2 = 9,
    KEYCODE_3 = 10,
    KEYCODE_3D_MODE = 206,
    KEYCODE_4 = 11,
    KEYCODE_5 = 12,
    KEYCODE_6 = 13,
    KEYCODE_7 = 14,
    KEYCODE_8 = 15,
    KEYCODE_9 = 16,
    KEYCODE_A = 29,
    KEYCODE_ALT_LEFT = 57,
    KEYCODE_ALT_RIGHT = 58,
    KEYCODE_APOSTROPHE = 75,
    KEYCODE_APP_SWITCH = 187,
    KEYCODE_ASSIST = 219,
    KEYCODE_AT = 77,
    KEYCODE_AVR_INPUT = 182,
    KEYCODE_AVR_POWER = 181,
    KEYCODE_B = 30,
    KEYCODE_BACK = 4,
    KEYCODE_BACKSLASH = 73,
    KEYCODE_BOOKMARK = 174,
    KEYCODE_BREAK = 121,
    KEYCODE_BRIGHTNESS_DOWN = 220,
    KEYCODE_BRIGHTNESS_UP = 221,
    KEYCODE_BUTTON_1 = 188,
    KEYCODE_BUTTON_10 = 197,
    KEYCODE_BUTTON_11 = 198,
    KEYCODE_BUTTON_12 = 199,
    KEYCODE_BUTTON_13 = 200,
    KEYCODE_BUTTON_14 = 201,
    KEYCODE_BUTTON_15 = 202,
    KEYCODE_BUTTON_16 = 203,
    KEYCODE_BUTTON_2 = 189,
    KEYCODE_BUTTON_3 = 190,
    KEYCODE_BUTTON_4 = 191,
    KEYCODE_BUTTON_5 = 192,
    KEYCODE_BUTTON_6 = 193,
    KEYCODE_BUTTON_7 = 194,
    KEYCODE_BUTTON_8 = 195,
    KEYCODE_BUTTON_9 = 196,
    KEYCODE_BUTTON_A = 96,
    KEYCODE_BUTTON_B = 97,
    KEYCODE_BUTTON_C = 98,
    KEYCODE_BUTTON_L1 = 102,
    KEYCODE_BUTTON_L2 = 104,
    KEYCODE_BUTTON_MODE = 110,
    KEYCODE_BUTTON_R1 = 103,
    KEYCODE_BUTTON_R2 = 105,
    KEYCODE_BUTTON_SELECT = 109,
    KEYCODE_BUTTON_START = 108,
    KEYCODE_BUTTON_THUMBL = 106,
    KEYCODE_BUTTON_THUMBR = 107,
    KEYCODE_BUTTON_X = 99,
    KEYCODE_BUTTON_Y = 100,
    KEYCODE_BUTTON_Z = 101,
    KEYCODE_C = 31,
    KEYCODE_CALCULATOR = 210,
    KEYCODE_CALENDAR = 208,
    KEYCODE_CALL = 5,
    KEYCODE_CAMERA = 27,
    KEYCODE_CAPS_LOCK = 115,
    KEYCODE_CAPTIONS = 175,
    KEYCODE_CHANNEL_DOWN = 167,
    KEYCODE_CHANNEL_UP = 166,
    KEYCODE_CLEAR = 28,
    KEYCODE_COMMA = 55,
    KEYCODE_CONTACTS = 207,
    KEYCODE_COPY = 278,
    KEYCODE_CTRL_LEFT = 113,
    KEYCODE_CTRL_RIGHT = 114,
    KEYCODE_CUT = 277,
    KEYCODE_D = 32,
    KEYCODE_DEL = 67,
    KEYCODE_DPAD_CENTER = 23,
    KEYCODE_DPAD_DOWN = 20,
    KEYCODE_DPAD_DOWN_LEFT = 269,
    KEYCODE_DPAD_DOWN_RIGHT = 271,
    KEYCODE_DPAD_LEFT = 21,
    KEYCODE_DPAD_RIGHT = 22,
    KEYCODE_DPAD_UP = 19,
    KEYCODE_DPAD_UP_LEFT = 268,
    KEYCODE_DPAD_UP_RIGHT = 270,
    KEYCODE_DVR = 173,
    KEYCODE_E = 33,
    KEYCODE_EISU = 212,
    KEYCODE_ENDCALL = 6,
    KEYCODE_ENTER = 66,
    KEYCODE_ENVELOPE = 65,
    KEYCODE_EQUALS = 70,
    KEYCODE_ESCAPE = 111,
    KEYCODE_EXPLORER = 64,
    KEYCODE_F = 34,
    KEYCODE_F1 = 131,
    KEYCODE_F10 = 140,
    KEYCODE_F11 = 141,
    KEYCODE_F12 = 142,
    KEYCODE_F2 = 132,
    KEYCODE_F3 = 133,
    KEYCODE_F4 = 134,
    KEYCODE_F5 = 135,
    KEYCODE_F6 = 136,
    KEYCODE_F7 = 137,
    KEYCODE_F8 = 138,
    KEYCODE_F9 = 139,
    KEYCODE_FOCUS = 80,
    KEYCODE_FORWARD = 125,
    KEYCODE_FORWARD_DEL = 112,
    KEYCODE_FUNCTION = 119,
    KEYCODE_G = 35,
    KEYCODE_GRAVE = 68,
    KEYCODE_GUIDE = 172,
    KEYCODE_H = 36,
    KEYCODE_HEADSETHOOK = 79,
    KEYCODE_HELP = 259,
    KEYCODE_HENKAN = 214,
    KEYCODE_HOME = 3,
    KEYCODE_I = 37,
    KEYCODE_INFO = 165,
    KEYCODE_INSERT = 124,
    KEYCODE_J = 38,
    KEYCODE_K = 39,
    KEYCODE_KANA = 218,
    KEYCODE_KATAKANA_HIRAGANA = 215,
    KEYCODE_L = 40,
    KEYCODE_LANGUAGE_SWITCH = 204,
    KEYCODE_LAST_CHANNEL = 229,
    KEYCODE_LEFT_BRACKET = 71,
    KEYCODE_M = 41,
    KEYCODE_MANNER_MODE = 205,
    KEYCODE_MEDIA_AUDIO_TRACK = 222,
    KEYCODE_MEDIA_CLOSE = 128,
    KEYCODE_MEDIA_EJECT = 129,
    KEYCODE_MEDIA_FAST_FORWARD = 90,
    KEYCODE_MEDIA_NEXT = 87,
    KEYCODE_MEDIA_PAUSE = 127,
    KEYCODE_MEDIA_PLAY = 126,
    KEYCODE_MEDIA_PLAY_PAUSE = 85,
    KEYCODE_MEDIA_PREVIOUS = 88,
    KEYCODE_MEDIA_RECORD = 130,
    KEYCODE_MEDIA_REWIND = 89,
    KEYCODE_MEDIA_SKIP_BACKWARD = 273,
    KEYCODE_MEDIA_SKIP_FORWARD = 272,
    KEYCODE_MEDIA_STEP_BACKWARD = 275,
    KEYCODE_MEDIA_STEP_FORWARD = 274,
    KEYCODE_MEDIA_STOP = 86,
    KEYCODE_MEDIA_TOP_MENU = 226,
    KEYCODE_MENU = 82,
    KEYCODE_META_LEFT = 117,
    KEYCODE_META_RIGHT = 118,
    KEYCODE_MINUS = 69,
    KEYCODE_MOVE_END = 123,
    KEYCODE_MOVE_HOME = 122,
    KEYCODE_MUHENKAN = 213,
    KEYCODE_MUSIC = 209,
    KEYCODE_MUTE = 91,
    KEYCODE_N = 42,
    KEYCODE_NAVIGATE_IN = 262,
    KEYCODE_NAVIGATE_NEXT = 261,
    KEYCODE_NAVIGATE_OUT = 263,
    KEYCODE_NAVIGATE_PREVIOUS = 260,
    KEYCODE_NOTIFICATION = 83,
    KEYCODE_NUM = 78,
    KEYCODE_NUMPAD_0 = 144,
    KEYCODE_NUMPAD_1 = 145,
    KEYCODE_NUMPAD_2 = 146,
    KEYCODE_NUMPAD_3 = 147,
    KEYCODE_NUMPAD_4 = 148,
    KEYCODE_NUMPAD_5 = 149,
    KEYCODE_NUMPAD_6 = 150,
    KEYCODE_NUMPAD_7 = 151,
    KEYCODE_NUMPAD_8 = 152,
    KEYCODE_NUMPAD_9 = 153,
    KEYCODE_NUMPAD_ADD = 157,
    KEYCODE_NUMPAD_COMMA = 159,
    KEYCODE_NUMPAD_DIVIDE = 154,
    KEYCODE_NUMPAD_DOT = 158,
    KEYCODE_NUMPAD_ENTER = 160,
    KEYCODE_NUMPAD_EQUALS = 161,
    KEYCODE_NUMPAD_LEFT_PAREN = 162,
    KEYCODE_NUMPAD_MULTIPLY = 155,
    KEYCODE_NUMPAD_RIGHT_PAREN = 163,
    KEYCODE_NUMPAD_SUBTRACT = 156,
    KEYCODE_NUM_LOCK = 143,
    KEYCODE_O = 43,
    KEYCODE_P = 44,
    KEYCODE_PAGE_DOWN = 93,
    KEYCODE_PAGE_UP = 92,
    KEYCODE_PAIRING = 225,
    KEYCODE_PASTE = 279,
    KEYCODE_PERIOD = 56,
    KEYCODE_PICTSYMBOLS = 94,
    KEYCODE_PLUS = 81,
    KEYCODE_POUND = 18,
    KEYCODE_POWER = 26,
    KEYCODE_PROG_BLUE = 186,
    KEYCODE_PROG_GREEN = 184,
    KEYCODE_PROG_RED = 183,
    KEYCODE_PROG_YELLOW = 185,
    KEYCODE_Q = 45,
    KEYCODE_R = 46,
    KEYCODE_RIGHT_BRACKET = 72,
    KEYCODE_RO = 217,
    KEYCODE_S = 47,
    KEYCODE_SCROLL_LOCK = 116,
    KEYCODE_SEARCH = 84,
    KEYCODE_SEMICOLON = 74,
    KEYCODE_SETTINGS = 176,
    KEYCODE_SHIFT_LEFT = 59,
    KEYCODE_SHIFT_RIGHT = 60,
    KEYCODE_SLASH = 76,
    KEYCODE_SLEEP = 223,
    KEYCODE_SOFT_LEFT = 1,
    KEYCODE_SOFT_RIGHT = 2,
    KEYCODE_SOFT_SLEEP = 276,
    KEYCODE_SPACE = 62,
    KEYCODE_STAR = 17,
    KEYCODE_STB_INPUT = 180,
    KEYCODE_STB_POWER = 179,
    KEYCODE_STEM_1 = 265,
    KEYCODE_STEM_2 = 266,
    KEYCODE_STEM_3 = 267,
    KEYCODE_STEM_PRIMARY = 264,
    KEYCODE_SWITCH_CHARSET = 95,
    KEYCODE_SYM = 63,
    KEYCODE_SYSRQ = 120,
    KEYCODE_T = 48,
    KEYCODE_TAB = 61,
    KEYCODE_TV = 170,
    KEYCODE_TV_ANTENNA_CABLE = 242,
    KEYCODE_TV_AUDIO_DESCRIPTION = 252,
    KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 254,
    KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 253,
    KEYCODE_TV_CONTENTS_MENU = 256,
    KEYCODE_TV_DATA_SERVICE = 230,
    KEYCODE_TV_INPUT = 178,
    KEYCODE_TV_INPUT_COMPONENT_1 = 249,
    KEYCODE_TV_INPUT_COMPONENT_2 = 250,
    KEYCODE_TV_INPUT_COMPOSITE_1 = 247,
    KEYCODE_TV_INPUT_COMPOSITE_2 = 248,
    KEYCODE_TV_INPUT_HDMI_1 = 243,
    KEYCODE_TV_INPUT_HDMI_2 = 244,
    KEYCODE_TV_INPUT_HDMI_3 = 245,
    KEYCODE_TV_INPUT_HDMI_4 = 246,
    KEYCODE_TV_INPUT_VGA_1 = 251,
    KEYCODE_TV_MEDIA_CONTEXT_MENU = 257,
    KEYCODE_TV_NETWORK = 241,
    KEYCODE_TV_NUMBER_ENTRY = 234,
    KEYCODE_TV_POWER = 177,
    KEYCODE_TV_RADIO_SERVICE = 232,
    KEYCODE_TV_SATELLITE = 237,
    KEYCODE_TV_SATELLITE_BS = 238,
    KEYCODE_TV_SATELLITE_CS = 239,
    KEYCODE_TV_SATELLITE_SERVICE = 240,
    KEYCODE_TV_TELETEXT = 233,
    KEYCODE_TV_TERRESTRIAL_ANALOG = 235,
    KEYCODE_TV_TERRESTRIAL_DIGITAL = 236,
    KEYCODE_TV_TIMER_PROGRAMMING = 258,
    KEYCODE_TV_ZOOM_MODE = 255,
    KEYCODE_U = 49,
    KEYCODE_UNKNOWN = 0,
    KEYCODE_V = 50,
    KEYCODE_VOICE_ASSIST = 231,
    KEYCODE_VOLUME_DOWN = 25,
    KEYCODE_VOLUME_MUTE = 164,
    KEYCODE_VOLUME_UP = 24,
    KEYCODE_W = 51,
    KEYCODE_WAKEUP = 224,
    KEYCODE_WINDOW = 171,
    KEYCODE_X = 52,
    KEYCODE_Y = 53,
    KEYCODE_YEN = 216,
    KEYCODE_Z = 54,
    KEYCODE_ZENKAKU_HANKAKU = 211,
    KEYCODE_ZOOM_IN = 168,
    KEYCODE_ZOOM_OUT = 169,
    MAX_KEYCODE = 84,
    META_ALT_LEFT_ON = 16,
    META_ALT_MASK = 50,
    META_ALT_ON = 2,
    META_ALT_RIGHT_ON = 32,
    META_CAPS_LOCK_ON = 1048576,
    META_CTRL_LEFT_ON = 8192,
    META_CTRL_MASK = 28672,
    META_CTRL_ON = 4096,
    META_CTRL_RIGHT_ON = 16384,
    META_FUNCTION_ON = 8,
    META_META_LEFT_ON = 131072,
    META_META_MASK = 458752,
    META_META_ON = 65536,
    META_META_RIGHT_ON = 262144,
    META_NUM_LOCK_ON = 2097152,
    META_SCROLL_LOCK_ON = 4194304,
    META_SHIFT_LEFT_ON = 64,
    META_SHIFT_MASK = 193,
    META_SHIFT_ON = 1,
    META_SHIFT_RIGHT_ON = 128,
    META_SYM_ON = 4,
};

// Step 2: method stubs.

static base::subtle::AtomicWord g_KeyEvent_getMaxKeyCode = 0;
static jint Java_KeyEvent_getMaxKeyCode(JNIEnv* env) __attribute__((unused));
static jint Java_KeyEvent_getMaxKeyCode(JNIEnv* env)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "getMaxKeyCode",
        "()I",
        &g_KeyEvent_getMaxKeyCode);

    jint ret = env->CallStaticIntMethod(KeyEvent_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getDeadChar = 0;
static jint Java_KeyEvent_getDeadChar(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__((unused));
static jint Java_KeyEvent_getDeadChar(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "getDeadChar",
        "(II)I",
        &g_KeyEvent_getDeadChar);

    jint ret = env->CallStaticIntMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0), as_jint(p1));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    jlong p1,
    JniIntWrapper p2) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    jlong p1,
    JniIntWrapper p2)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "changeTimeRepeat",
        "(Landroid/view/KeyEvent;JI)Landroid/view/KeyEvent;",
        &g_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I);

    jobject ret = env->CallStaticObjectMethod(KeyEvent_clazz(env),
        method_id, p0.obj(), p1, as_jint(p2));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "changeTimeRepeat",
        "(Landroid/view/KeyEvent;JII)Landroid/view/KeyEvent;",
        &g_KeyEvent_changeTimeRepeatAVKE_AVKE_J_I_I);

    jobject ret = env->CallStaticObjectMethod(KeyEvent_clazz(env),
        method_id, p0.obj(), p1, as_jint(p2), as_jint(p3));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_changeAction = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeAction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeAction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "changeAction",
        "(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;",
        &g_KeyEvent_changeAction);

    jobject ret = env->CallStaticObjectMethod(KeyEvent_clazz(env),
        method_id, p0.obj(), as_jint(p1));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_changeFlags = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeFlags(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_changeFlags(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "changeFlags",
        "(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;",
        &g_KeyEvent_changeFlags);

    jobject ret = env->CallStaticObjectMethod(KeyEvent_clazz(env),
        method_id, p0.obj(), as_jint(p1));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_isSystem = 0;
static jboolean Java_KeyEvent_isSystem(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isSystem(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isSystem",
        "()Z",
        &g_KeyEvent_isSystem);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isGamepadButton = 0;
static jboolean Java_KeyEvent_isGamepadButton(JNIEnv* env, JniIntWrapper p0)
    __attribute__((unused));
static jboolean Java_KeyEvent_isGamepadButton(JNIEnv* env, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "isGamepadButton",
        "(I)Z",
        &g_KeyEvent_isGamepadButton);

    jboolean ret = env->CallStaticBooleanMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getDeviceId = 0;
static jint Java_KeyEvent_getDeviceId(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getDeviceId(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getDeviceId",
        "()I",
        &g_KeyEvent_getDeviceId);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getSource = 0;
static jint Java_KeyEvent_getSource(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getSource(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getSource",
        "()I",
        &g_KeyEvent_getSource);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_setSource = 0;
static void Java_KeyEvent_setSource(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0) __attribute__((unused));
static void Java_KeyEvent_setSource(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "setSource",
        "(I)V",
        &g_KeyEvent_setSource);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_KeyEvent_getMetaState = 0;
static jint Java_KeyEvent_getMetaState(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getMetaState(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getMetaState",
        "()I",
        &g_KeyEvent_getMetaState);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getModifiers = 0;
static jint Java_KeyEvent_getModifiers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getModifiers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getModifiers",
        "()I",
        &g_KeyEvent_getModifiers);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getFlags = 0;
static jint Java_KeyEvent_getFlags(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getFlags(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getFlags",
        "()I",
        &g_KeyEvent_getFlags);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getModifierMetaStateMask = 0;
static jint Java_KeyEvent_getModifierMetaStateMask(JNIEnv* env) __attribute__((unused));
static jint Java_KeyEvent_getModifierMetaStateMask(JNIEnv* env)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "getModifierMetaStateMask",
        "()I",
        &g_KeyEvent_getModifierMetaStateMask);

    jint ret = env->CallStaticIntMethod(KeyEvent_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isModifierKey = 0;
static jboolean Java_KeyEvent_isModifierKey(JNIEnv* env, JniIntWrapper p0)
    __attribute__((unused));
static jboolean Java_KeyEvent_isModifierKey(JNIEnv* env, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "isModifierKey",
        "(I)Z",
        &g_KeyEvent_isModifierKey);

    jboolean ret = env->CallStaticBooleanMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_normalizeMetaState = 0;
static jint Java_KeyEvent_normalizeMetaState(JNIEnv* env, JniIntWrapper p0)
    __attribute__((unused));
static jint Java_KeyEvent_normalizeMetaState(JNIEnv* env, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "normalizeMetaState",
        "(I)I",
        &g_KeyEvent_normalizeMetaState);

    jint ret = env->CallStaticIntMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_metaStateHasNoModifiers = 0;
static jboolean Java_KeyEvent_metaStateHasNoModifiers(JNIEnv* env, JniIntWrapper p0) __attribute__((unused));
static jboolean Java_KeyEvent_metaStateHasNoModifiers(JNIEnv* env, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "metaStateHasNoModifiers",
        "(I)Z",
        &g_KeyEvent_metaStateHasNoModifiers);

    jboolean ret = env->CallStaticBooleanMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_metaStateHasModifiers = 0;
static jboolean Java_KeyEvent_metaStateHasModifiers(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__((unused));
static jboolean Java_KeyEvent_metaStateHasModifiers(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "metaStateHasModifiers",
        "(II)Z",
        &g_KeyEvent_metaStateHasModifiers);

    jboolean ret = env->CallStaticBooleanMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0), as_jint(p1));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_hasNoModifiers = 0;
static jboolean Java_KeyEvent_hasNoModifiers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_hasNoModifiers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "hasNoModifiers",
        "()Z",
        &g_KeyEvent_hasNoModifiers);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_hasModifiers = 0;
static jboolean Java_KeyEvent_hasModifiers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0) __attribute__((unused));
static jboolean Java_KeyEvent_hasModifiers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "hasModifiers",
        "(I)Z",
        &g_KeyEvent_hasModifiers);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isAltPressed = 0;
static jboolean Java_KeyEvent_isAltPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isAltPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isAltPressed",
        "()Z",
        &g_KeyEvent_isAltPressed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isShiftPressed = 0;
static jboolean Java_KeyEvent_isShiftPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isShiftPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isShiftPressed",
        "()Z",
        &g_KeyEvent_isShiftPressed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isSymPressed = 0;
static jboolean Java_KeyEvent_isSymPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isSymPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isSymPressed",
        "()Z",
        &g_KeyEvent_isSymPressed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isCtrlPressed = 0;
static jboolean Java_KeyEvent_isCtrlPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isCtrlPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isCtrlPressed",
        "()Z",
        &g_KeyEvent_isCtrlPressed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isMetaPressed = 0;
static jboolean Java_KeyEvent_isMetaPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isMetaPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isMetaPressed",
        "()Z",
        &g_KeyEvent_isMetaPressed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isFunctionPressed = 0;
static jboolean Java_KeyEvent_isFunctionPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isFunctionPressed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isFunctionPressed",
        "()Z",
        &g_KeyEvent_isFunctionPressed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isCapsLockOn = 0;
static jboolean Java_KeyEvent_isCapsLockOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isCapsLockOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isCapsLockOn",
        "()Z",
        &g_KeyEvent_isCapsLockOn);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isNumLockOn = 0;
static jboolean Java_KeyEvent_isNumLockOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isNumLockOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isNumLockOn",
        "()Z",
        &g_KeyEvent_isNumLockOn);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isScrollLockOn = 0;
static jboolean Java_KeyEvent_isScrollLockOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isScrollLockOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isScrollLockOn",
        "()Z",
        &g_KeyEvent_isScrollLockOn);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getAction = 0;
static jint Java_KeyEvent_getAction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getAction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getAction",
        "()I",
        &g_KeyEvent_getAction);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isCanceled = 0;
static jboolean Java_KeyEvent_isCanceled(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isCanceled(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isCanceled",
        "()Z",
        &g_KeyEvent_isCanceled);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_startTracking = 0;
static void Java_KeyEvent_startTracking(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static void Java_KeyEvent_startTracking(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "startTracking",
        "()V",
        &g_KeyEvent_startTracking);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_KeyEvent_isTracking = 0;
static jboolean Java_KeyEvent_isTracking(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isTracking(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isTracking",
        "()Z",
        &g_KeyEvent_isTracking);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isLongPress = 0;
static jboolean Java_KeyEvent_isLongPress(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isLongPress(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isLongPress",
        "()Z",
        &g_KeyEvent_isLongPress);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getKeyCode = 0;
static jint Java_KeyEvent_getKeyCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getKeyCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getKeyCode",
        "()I",
        &g_KeyEvent_getKeyCode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getCharacters = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_KeyEvent_getCharacters(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jstring>
Java_KeyEvent_getCharacters(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getCharacters",
        "()Ljava/lang/String;",
        &g_KeyEvent_getCharacters);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_getScanCode = 0;
static jint Java_KeyEvent_getScanCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getScanCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getScanCode",
        "()I",
        &g_KeyEvent_getScanCode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getRepeatCount = 0;
static jint Java_KeyEvent_getRepeatCount(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getRepeatCount(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getRepeatCount",
        "()I",
        &g_KeyEvent_getRepeatCount);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getDownTime = 0;
static jlong Java_KeyEvent_getDownTime(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jlong Java_KeyEvent_getDownTime(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getDownTime",
        "()J",
        &g_KeyEvent_getDownTime);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getEventTime = 0;
static jlong Java_KeyEvent_getEventTime(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jlong Java_KeyEvent_getEventTime(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getEventTime",
        "()J",
        &g_KeyEvent_getEventTime);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getKeyCharacterMap = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_getKeyCharacterMap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_getKeyCharacterMap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getKeyCharacterMap",
        "()Landroid/view/KeyCharacterMap;",
        &g_KeyEvent_getKeyCharacterMap);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_getDisplayLabel = 0;
static jchar Java_KeyEvent_getDisplayLabel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jchar Java_KeyEvent_getDisplayLabel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getDisplayLabel",
        "()C",
        &g_KeyEvent_getDisplayLabel);

    jchar ret = env->CallCharMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getUnicodeCharI = 0;
static jint Java_KeyEvent_getUnicodeCharI(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_KeyEvent_getUnicodeCharI(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getUnicodeChar",
        "()I",
        &g_KeyEvent_getUnicodeCharI);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getUnicodeCharI_I = 0;
static jint Java_KeyEvent_getUnicodeCharI_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0) __attribute__((unused));
static jint Java_KeyEvent_getUnicodeCharI_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getUnicodeChar",
        "(I)I",
        &g_KeyEvent_getUnicodeCharI_I);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getKeyData = 0;
static jboolean Java_KeyEvent_getKeyData(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static jboolean Java_KeyEvent_getKeyData(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getKeyData",
        "(Landroid/view/KeyCharacterMap$KeyData;)Z",
        &g_KeyEvent_getKeyData);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getMatchC_AC = 0;
static jchar Java_KeyEvent_getMatchC_AC(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jcharArray>& p0) __attribute__((unused));
static jchar Java_KeyEvent_getMatchC_AC(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jcharArray>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getMatch",
        "([C)C",
        &g_KeyEvent_getMatchC_AC);

    jchar ret = env->CallCharMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getMatchC_AC_I = 0;
static jchar Java_KeyEvent_getMatchC_AC_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jcharArray>& p0,
    JniIntWrapper p1) __attribute__((unused));
static jchar Java_KeyEvent_getMatchC_AC_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jcharArray>& p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getMatch",
        "([CI)C",
        &g_KeyEvent_getMatchC_AC_I);

    jchar ret = env->CallCharMethod(obj.obj(),
        method_id, p0.obj(), as_jint(p1));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_getNumber = 0;
static jchar Java_KeyEvent_getNumber(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jchar Java_KeyEvent_getNumber(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "getNumber",
        "()C",
        &g_KeyEvent_getNumber);

    jchar ret = env->CallCharMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_isPrintingKey = 0;
static jboolean Java_KeyEvent_isPrintingKey(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_KeyEvent_isPrintingKey(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "isPrintingKey",
        "()Z",
        &g_KeyEvent_isPrintingKey);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_dispatchZ_AVKEC = 0;
static jboolean Java_KeyEvent_dispatchZ_AVKEC(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static jboolean Java_KeyEvent_dispatchZ_AVKEC(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "dispatch",
        "(Landroid/view/KeyEvent$Callback;)Z",
        &g_KeyEvent_dispatchZ_AVKEC);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_dispatchZ_AVKEC_AVKEDS_JLO = 0;
static jboolean Java_KeyEvent_dispatchZ_AVKEC_AVKEDS_JLO(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    const base::android::JavaRefOrBare<jobject>& p1,
    const base::android::JavaRefOrBare<jobject>& p2) __attribute__((unused));
static jboolean Java_KeyEvent_dispatchZ_AVKEC_AVKEDS_JLO(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    const base::android::JavaRefOrBare<jobject>& p1,
    const base::android::JavaRefOrBare<jobject>& p2)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "dispatch",
        "(Landroid/view/KeyEvent$Callback;Landroid/view/KeyEvent$DispatcherState;Ljava/lang/Object;)Z",
        &g_KeyEvent_dispatchZ_AVKEC_AVKEDS_JLO);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, p0.obj(), p1.obj(), p2.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_toString = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_KeyEvent_toString(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_KeyEvent_toString(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "toString",
        "()Ljava/lang/String;",
        &g_KeyEvent_toString);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_keyCodeToString = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_KeyEvent_keyCodeToString(JNIEnv* env, JniIntWrapper p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jstring>
Java_KeyEvent_keyCodeToString(JNIEnv* env, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "keyCodeToString",
        "(I)Ljava/lang/String;",
        &g_KeyEvent_keyCodeToString);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(KeyEvent_clazz(env),
        method_id, as_jint(p0)));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_keyCodeFromString = 0;
static jint Java_KeyEvent_keyCodeFromString(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& p0) __attribute__((unused));
static jint Java_KeyEvent_keyCodeFromString(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, KeyEvent_clazz(env),
        "keyCodeFromString",
        "(Ljava/lang/String;)I",
        &g_KeyEvent_keyCodeFromString);

    jint ret = env->CallStaticIntMethod(KeyEvent_clazz(env),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_KeyEvent_writeToParcel = 0;
static void Java_KeyEvent_writeToParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1) __attribute__((unused));
static void Java_KeyEvent_writeToParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, obj.obj(),
        KeyEvent_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "writeToParcel",
        "(Landroid/os/Parcel;I)V",
        &g_KeyEvent_writeToParcel);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj(), as_jint(p1));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_I_I(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_I_I(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(II)V",
        &g_KeyEvent_ConstructorAVKE_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, as_jint(p0), as_jint(p1));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_J_J_I_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(JJIII)V",
        &g_KeyEvent_ConstructorAVKE_J_J_I_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0, p1, as_jint(p2), as_jint(p3), as_jint(p4));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(JJIIII)V",
        &g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0, p1, as_jint(p2), as_jint(p3), as_jint(p4),
        as_jint(p5));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5,
    JniIntWrapper p6,
    JniIntWrapper p7) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5,
    JniIntWrapper p6,
    JniIntWrapper p7)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(JJIIIIII)V",
        &g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0, p1, as_jint(p2), as_jint(p3), as_jint(p4), as_jint(p5),
        as_jint(p6), as_jint(p7));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5,
    JniIntWrapper p6,
    JniIntWrapper p7,
    JniIntWrapper p8) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5,
    JniIntWrapper p6,
    JniIntWrapper p7,
    JniIntWrapper p8)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(JJIIIIIII)V",
        &g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0, p1, as_jint(p2), as_jint(p3), as_jint(p4), as_jint(p5),
        as_jint(p6), as_jint(p7), as_jint(p8));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5,
    JniIntWrapper p6,
    JniIntWrapper p7,
    JniIntWrapper p8,
    JniIntWrapper p9) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I_I(JNIEnv* env, jlong p0,
    jlong p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4,
    JniIntWrapper p5,
    JniIntWrapper p6,
    JniIntWrapper p7,
    JniIntWrapper p8,
    JniIntWrapper p9)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(JJIIIIIIII)V",
        &g_KeyEvent_ConstructorAVKE_J_J_I_I_I_I_I_I_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0, p1, as_jint(p2), as_jint(p3), as_jint(p4), as_jint(p5),
        as_jint(p6), as_jint(p7), as_jint(p8), as_jint(p9));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_J_JLS_I_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_JLS_I_I(JNIEnv* env, jlong p0,
    const base::android::JavaRefOrBare<jstring>& p1,
    JniIntWrapper p2,
    JniIntWrapper p3) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_J_JLS_I_I(JNIEnv* env, jlong p0,
    const base::android::JavaRefOrBare<jstring>& p1,
    JniIntWrapper p2,
    JniIntWrapper p3)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(JLjava/lang/String;II)V",
        &g_KeyEvent_ConstructorAVKE_J_JLS_I_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0, p1.obj(), as_jint(p2), as_jint(p3));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_AVKE = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_AVKE(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_AVKE(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(Landroid/view/KeyEvent;)V",
        &g_KeyEvent_ConstructorAVKE_AVKE);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_KeyEvent_ConstructorAVKE_AVKE_J_I = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_AVKE_J_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    jlong p1,
    JniIntWrapper p2) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_KeyEvent_ConstructorAVKE_AVKE_J_I(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& p0,
    jlong p1,
    JniIntWrapper p2)
{
    CHECK_CLAZZ(env, KeyEvent_clazz(env),
        KeyEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, KeyEvent_clazz(env),
        "<init>",
        "(Landroid/view/KeyEvent;JI)V",
        &g_KeyEvent_ConstructorAVKE_AVKE_J_I);

    jobject ret = env->NewObject(KeyEvent_clazz(env),
        method_id, p0.obj(), p1, as_jint(p2));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace JNI_KeyEvent

#endif // android_view_KeyEvent_JNI
