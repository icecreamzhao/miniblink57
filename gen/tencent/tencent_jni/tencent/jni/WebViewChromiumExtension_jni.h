// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/webkit/WebViewChromiumExtension

#ifndef com_tencent_smtt_webkit_WebViewChromiumExtension_JNI
#define com_tencent_smtt_webkit_WebViewChromiumExtension_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebViewChromiumExtensionClassPath[] = "com/tencent/smtt/webkit/WebViewChromiumExtension";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebViewChromiumExtension_clazz
    __attribute__((unused))
    = 0;
#define WebViewChromiumExtension_clazz(env) base::android::LazyGetClass(env, kWebViewChromiumExtensionClassPath, &g_WebViewChromiumExtension_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeInit(JNIEnv*
                                                                     env,
    jobject jcaller,
    jobject webContents)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeOnJavaWebViewChromiumExtensionDestroyed(JNIEnv*
                                                                                                        env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native,
        "OnJavaWebViewChromiumExtensionDestroyed");
    return native->OnJavaWebViewChromiumExtensionDestroyed(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeFullScreenPluginHidden(JNIEnv*
                                                                                       env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "FullScreenPluginHidden");
    return native->FullScreenPluginHidden(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeOnAppExit(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnAppExit");
    return native->OnAppExit(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeShowImage(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jfloat x,
    jfloat y)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "ShowImage");
    return native->ShowImage(env, base::android::JavaParamRef<jobject>(env, jcaller), x, y);
}

JNI_GENERATOR_EXPORT jint
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetCurrentNavigationEntryIndex(JNIEnv*
                                                                                               env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetCurrentNavigationEntryIndex", 0);
    return native->GetCurrentNavigationEntryIndex(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRemoveNavigationEntryAtIndex(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint index)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "RemoveNavigationEntryAtIndex");
    return native->RemoveNavigationEntryAtIndex(env,
        base::android::JavaParamRef<jobject>(env, jcaller), index);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeFocusAndPopupIM(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring elementId)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "FocusAndPopupIM");
    return native->FocusAndPopupIM(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, elementId));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeonFingerSearchResult(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring matchText,
    jint matchIndex,
    jint isMainOrSub)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "onFingerSearchResult");
    return native->onFingerSearchResult(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, matchText), matchIndex,
        isMainOrSub);
}

JNI_GENERATOR_EXPORT jstring
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetUrlByPageID(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint page_id)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetUrlByPageID", NULL);
    return native->GetUrlByPageID(env, base::android::JavaParamRef<jobject>(env, jcaller), page_id).Release();
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeOnRetrieveFingerSearchContext(JNIEnv*
                                                                                              env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint length)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnRetrieveFingerSearchContext");
    return native->OnRetrieveFingerSearchContext(env,
        base::android::JavaParamRef<jobject>(env, jcaller), length);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeReloadCustomMetaData(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "ReloadCustomMetaData");
    return native->ReloadCustomMetaData(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeUpdateImageList(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint minWidth,
    jint minHeight)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateImageList");
    return native->UpdateImageList(env, base::android::JavaParamRef<jobject>(env, jcaller), minWidth, minHeight);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetBitmapByIndex(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint index)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetBitmapByIndex");
    return native->GetBitmapByIndex(env, base::android::JavaParamRef<jobject>(env, jcaller), index);
}

JNI_GENERATOR_EXPORT jboolean
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeCanTakeScreenshotWithPageID(JNIEnv*
                                                                                            env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint id)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "CanTakeScreenshotWithPageID", false);
    return native->CanTakeScreenshotWithPageID(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeTakeScreenshotWithPageID(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint id,
    jobject bitmap)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "TakeScreenshotWithPageID", false);
    return native->TakeScreenshotWithPageID(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id,
        base::android::JavaParamRef<jobject>(env, bitmap));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeTakeCurrentScreenshot(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jint width,
    jint height,
    jfloat scaleX,
    jfloat scaleY,
    jboolean sync,
    jboolean wholePage)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "TakeCurrentScreenshot");
    return native->TakeCurrentScreenshot(env,
        base::android::JavaParamRef<jobject>(env, jcaller), width, height, scaleX,
        scaleY, sync, wholePage);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGoToPrereading(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "GoToPrereading");
    return native->GoToPrereading(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void RefreshPlugins(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& plugins);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRefreshPlugins(JNIEnv*
                                                                               env,
    jclass jcaller,
    jstring plugins)
{
    return RefreshPlugins(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, plugins));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativePluginSurfaceCreated(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jboolean surfaceCreated)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "PluginSurfaceCreated");
    return native->PluginSurfaceCreated(env,
        base::android::JavaParamRef<jobject>(env, jcaller), surfaceCreated);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSavePasswordResponse(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring result)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "SavePasswordResponse");
    return native->SavePasswordResponse(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, result));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeEvaluateJavaScriptInSubFrame(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring script,
    jboolean startRenderer)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScriptInSubFrame");
    return native->EvaluateJavaScriptInSubFrame(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, script), startRenderer);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRequestFocusForInputNode(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jlong node)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "RequestFocusForInputNode");
    return native->RequestFocusForInputNode(env,
        base::android::JavaParamRef<jobject>(env, jcaller), node);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeDetectDeadCode(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "DetectDeadCode");
    return native->DetectDeadCode(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeDumpDeadCode(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "DumpDeadCode");
    return native->DumpDeadCode(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSelectWordAroundPosition(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jfloat x,
    jfloat y)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "SelectWordAroundPosition");
    return native->SelectWordAroundPosition(env,
        base::android::JavaParamRef<jobject>(env, jcaller), x, y);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSelectBetweenCoordinates(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jfloat x1,
    jfloat y1,
    jfloat x2,
    jfloat y2,
    jfloat scrollX,
    jfloat scrollY)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "SelectBetweenCoordinates");
    return native->SelectBetweenCoordinates(env,
        base::android::JavaParamRef<jobject>(env, jcaller), x1, y1, x2, y2,
        scrollX, scrollY);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeMarkScrollOffsetForMoveRange(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jboolean startHandle)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "MarkScrollOffsetForMoveRange");
    return native->MarkScrollOffsetForMoveRange(env,
        base::android::JavaParamRef<jobject>(env, jcaller), startHandle);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeMoveCaret(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jfloat x,
    jfloat y)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "MoveCaret");
    return native->MoveCaret(env, base::android::JavaParamRef<jobject>(env, jcaller), x, y);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeServiceWorkerBackgroundUpdate(JNIEnv*
                                                                                              env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring url)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "ServiceWorkerBackgroundUpdate");
    return native->ServiceWorkerBackgroundUpdate(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeServiceWorkerBackgroundRegister(JNIEnv*
                                                                                                env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring url,
    jstring scriptUrl)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "ServiceWorkerBackgroundRegister");
    return native->ServiceWorkerBackgroundRegister(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, scriptUrl));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeServiceWorkerRegisterOffline(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring url,
    jstring localScriptPath,
    jboolean deleteAllCacheBefore)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "ServiceWorkerRegisterOffline");
    return native->ServiceWorkerRegisterOffline(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, localScriptPath),
        deleteAllCacheBefore);
}

static base::android::ScopedJavaLocalRef<jstring> GetCrashExtraMessage(JNIEnv*
                                                                           env,
    const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jstring
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetCrashExtraMessage(JNIEnv*
                                                                                     env,
    jclass jcaller)
{
    return GetCrashExtraMessage(env, base::android::JavaParamRef<jclass>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeEvaluateJavaScriptInFrame(JNIEnv*
                                                                                          env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jstring frameUrl,
    jstring script,
    jboolean startRenderer)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScriptInFrame");
    return native->EvaluateJavaScriptInFrame(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, frameUrl),
        base::android::JavaParamRef<jstring>(env, script), startRenderer);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSetContentCacheCurrentFrameWhenJsLocation(JNIEnv*
                                                                                                          env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension,
    jboolean enable)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native,
        "SetContentCacheCurrentFrameWhenJsLocation");
    return native->SetContentCacheCurrentFrameWhenJsLocation(env,
        base::android::JavaParamRef<jobject>(env, jcaller), enable);
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRequestCharacterStatistics(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "RequestCharacterStatistics");
    return native->RequestCharacterStatistics(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRequestExplorerStatistics(JNIEnv*
                                                                                          env,
    jobject jcaller,
    jlong nativeWebViewChromiumExtension)
{
    WebViewChromiumExtension* native = reinterpret_cast<WebViewChromiumExtension*>(nativeWebViewChromiumExtension);
    CHECK_NATIVE_PTR(env, jcaller, native, "RequestExplorerStatistics");
    return native->RequestExplorerStatistics(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onNativeWebViewChromiumExtensionDestroyed
    = 0;
static void
Java_WebViewChromiumExtension_onNativeWebViewChromiumExtensionDestroyed(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong nativeWebViewChromiumExtension)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onNativeWebViewChromiumExtensionDestroyed",
        "("
        "J"
        ")"
        "V",
        &g_WebViewChromiumExtension_onNativeWebViewChromiumExtensionDestroyed);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeWebViewChromiumExtension);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onUpdateHTMLElementAssoicateNativePanel
    = 0;
static void
Java_WebViewChromiumExtension_onUpdateHTMLElementAssoicateNativePanel(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id,
    const base::android::JavaRefOrBare<jstring>& panelType,
    JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper w,
    JniIntWrapper h)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onUpdateHTMLElementAssoicateNativePanel",
        "("
        "I"
        "Ljava/lang/String;"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_onUpdateHTMLElementAssoicateNativePanel);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id), panelType.obj(), as_jint(x), as_jint(y),
        as_jint(w), as_jint(h));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_OnFingerSearchRequest
    = 0;
static void Java_WebViewChromiumExtension_OnFingerSearchRequest(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& reqString,
    JniIntWrapper reqIndex,
    const base::android::JavaRefOrBare<jstring>& candidateReqString,
    JniIntWrapper candidateReqIndex,
    const base::android::JavaRefOrBare<jintArray>& breakLineInfo)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "OnFingerSearchRequest",
        "("
        "Ljava/lang/String;"
        "I"
        "Ljava/lang/String;"
        "I"
        "[I"
        ")"
        "V",
        &g_WebViewChromiumExtension_OnFingerSearchRequest);

    env->CallVoidMethod(obj.obj(),
        method_id, reqString.obj(), as_jint(reqIndex),
        candidateReqString.obj(), as_jint(candidateReqIndex),
        breakLineInfo.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_retrieveFingerSearchContext
    = 0;
static void Java_WebViewChromiumExtension_retrieveFingerSearchContext(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& orglString,
    const base::android::JavaRefOrBare<jstring>& expandedString,
    JniIntWrapper index)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "retrieveFingerSearchContext",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_retrieveFingerSearchContext);

    env->CallVoidMethod(obj.obj(),
        method_id, orglString.obj(), expandedString.obj(), as_jint(index));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_createHashMap = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebViewChromiumExtension_createHashMap(JNIEnv* env)
{
    CHECK_CLAZZ(env, WebViewChromiumExtension_clazz(env),
        WebViewChromiumExtension_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebViewChromiumExtension_clazz(env),
        "createHashMap",
        "("
        ")"
        "Ljava/lang/Object;",
        &g_WebViewChromiumExtension_createHashMap);

    jobject ret = env->CallStaticObjectMethod(WebViewChromiumExtension_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_updateHashMap = 0;
static void Java_WebViewChromiumExtension_updateHashMap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& opaqueObject,
    const base::android::JavaRefOrBare<jstring>& key,
    const base::android::JavaRefOrBare<jstring>& value)
{
    CHECK_CLAZZ(env, WebViewChromiumExtension_clazz(env),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebViewChromiumExtension_clazz(env),
        "updateHashMap",
        "("
        "Ljava/lang/Object;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_updateHashMap);

    env->CallStaticVoidMethod(WebViewChromiumExtension_clazz(env),
        method_id, opaqueObject.obj(), key.obj(), value.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onReceivedMetas = 0;
static void Java_WebViewChromiumExtension_onReceivedMetas(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& opaqueObject)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onReceivedMetas",
        "("
        "Ljava/lang/Object;"
        ")"
        "V",
        &g_WebViewChromiumExtension_onReceivedMetas);

    env->CallVoidMethod(obj.obj(),
        method_id, opaqueObject.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onPrintPage = 0;
static void Java_WebViewChromiumExtension_onPrintPage(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onPrintPage",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_onPrintPage);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onHideAddressBar = 0;
static void Java_WebViewChromiumExtension_onHideAddressBar(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onHideAddressBar",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_onHideAddressBar);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onReceiveNewImageInfo
    = 0;
static void Java_WebViewChromiumExtension_onReceiveNewImageInfo(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& imgSrc,
    jlong imgRawDataSize)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onReceiveNewImageInfo",
        "("
        "Ljava/lang/String;"
        "J"
        ")"
        "V",
        &g_WebViewChromiumExtension_onReceiveNewImageInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, imgSrc.obj(), imgRawDataSize);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onReceiveBitmap = 0;
static void Java_WebViewChromiumExtension_onReceiveBitmap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& bitmap)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onReceiveBitmap",
        "("
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        &g_WebViewChromiumExtension_onReceiveBitmap);

    env->CallVoidMethod(obj.obj(),
        method_id, bitmap.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_RecordDirectAdBlockInfo
    = 0;
static void Java_WebViewChromiumExtension_RecordDirectAdBlockInfo(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& pageUrl,
    const base::android::JavaRefOrBare<jstring>& adUrl,
    JniIntWrapper hiddenNum,
    jboolean isMainResource)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "RecordDirectAdBlockInfo",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_RecordDirectAdBlockInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, pageUrl.obj(), adUrl.obj(), as_jint(hiddenNum),
        isMainResource);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_BlockAPopupWindow = 0;
static void Java_WebViewChromiumExtension_BlockAPopupWindow(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isMobileSite)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "BlockAPopupWindow",
        "("
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_BlockAPopupWindow);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), isMobileSite);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_sentBlockInfoToUI = 0;
static void Java_WebViewChromiumExtension_sentBlockInfoToUI(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    JniIntWrapper AdBlockNum,
    JniIntWrapper PopupBlockNum,
    jboolean isMobileSite)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "sentBlockInfoToUI",
        "("
        "Ljava/lang/String;"
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_sentBlockInfoToUI);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), as_jint(AdBlockNum), as_jint(PopupBlockNum),
        isMobileSite);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_reportHtmlInfo = 0;
static void Java_WebViewChromiumExtension_reportHtmlInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper htmlType,
    const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "reportHtmlInfo",
        "("
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_reportHtmlInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(htmlType), url.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_reportMetricsSavedCountReceived
    = 0;
static void
Java_WebViewChromiumExtension_reportMetricsSavedCountReceived(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& validatedUrl,
    jboolean isProxy,
    JniIntWrapper usedBytes,
    const base::android::JavaRefOrBare<jstring>& metricsSaved,
    JniIntWrapper apn)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "reportMetricsSavedCountReceived",
        "("
        "Ljava/lang/String;"
        "Z"
        "I"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_reportMetricsSavedCountReceived);

    env->CallVoidMethod(obj.obj(),
        method_id, validatedUrl.obj(), isProxy, as_jint(usedBytes),
        metricsSaved.obj(), as_jint(apn));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_recordCorsErrorInfo = 0;
static void Java_WebViewChromiumExtension_recordCorsErrorInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& errorMessage,
    JniIntWrapper errorId,
    jboolean isProxy,
    jboolean viaCache,
    JniIntWrapper resourceType,
    const base::android::JavaRefOrBare<jstring>& serverIP,
    jlong contentLength)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "recordCorsErrorInfo",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        "Z"
        "Z"
        "I"
        "Ljava/lang/String;"
        "J"
        ")"
        "V",
        &g_WebViewChromiumExtension_recordCorsErrorInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), errorMessage.obj(), as_jint(errorId), isProxy,
        viaCache, as_jint(resourceType), serverIP.obj(), contentLength);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_recordUserBehaviourGesture
    = 0;
static void Java_WebViewChromiumExtension_recordUserBehaviourGesture(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& elementID,
    const base::android::JavaRefOrBare<jstring>& elementClass,
    const base::android::JavaRefOrBare<jstring>& elementTagName,
    JniIntWrapper ScreenX,
    JniIntWrapper ScreenY,
    JniIntWrapper PageX,
    JniIntWrapper PageY)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "recordUserBehaviourGesture",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_recordUserBehaviourGesture);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), elementID.obj(), elementClass.obj(),
        elementTagName.obj(), as_jint(ScreenX), as_jint(ScreenY),
        as_jint(PageX), as_jint(PageY));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_didFailLoad = 0;
static void Java_WebViewChromiumExtension_didFailLoad(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean isProvisionalLoad,
    jboolean isMainFrame,
    JniIntWrapper errorCode,
    const base::android::JavaRefOrBare<jstring>& description,
    const base::android::JavaRefOrBare<jstring>& failingUrl,
    jboolean wasIgnoredByHandler)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "didFailLoad",
        "("
        "Z"
        "Z"
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_didFailLoad);

    env->CallVoidMethod(obj.obj(),
        method_id, isProvisionalLoad, isMainFrame, as_jint(errorCode),
        description.obj(), failingUrl.obj(), wasIgnoredByHandler);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_didCommitProvisionalLoadForFrame
    = 0;
static void
Java_WebViewChromiumExtension_didCommitProvisionalLoadForFrame(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong frameId,
    jboolean isMainFrame,
    const base::android::JavaRefOrBare<jstring>& url,
    JniIntWrapper transitionType)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "didCommitProvisionalLoadForFrame",
        "("
        "J"
        "Z"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_didCommitProvisionalLoadForFrame);

    env->CallVoidMethod(obj.obj(),
        method_id, frameId, isMainFrame, url.obj(), as_jint(transitionType));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_didNavigateMainFrame
    = 0;
static void Java_WebViewChromiumExtension_didNavigateMainFrame(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& baseUrl,
    jboolean isNavigationToDifferentPage,
    jboolean isFragmentNavigation,
    JniIntWrapper statusCode)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "didNavigateMainFrame",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Z"
        "Z"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_didNavigateMainFrame);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), baseUrl.obj(), isNavigationToDifferentPage,
        isFragmentNavigation, as_jint(statusCode));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_documentAvailableInMainFrame
    = 0;
static void Java_WebViewChromiumExtension_documentAvailableInMainFrame(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "documentAvailableInMainFrame",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_documentAvailableInMainFrame);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_didFinishLoad = 0;
static void Java_WebViewChromiumExtension_didFinishLoad(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong frameId,
    const base::android::JavaRefOrBare<jstring>& validatedUrl,
    jboolean isMainFrame)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "didFinishLoad",
        "("
        "J"
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_didFinishLoad);

    env->CallVoidMethod(obj.obj(),
        method_id, frameId, validatedUrl.obj(), isMainFrame);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_didFirstVisuallyNonEmptyPaint
    = 0;
static void Java_WebViewChromiumExtension_didFirstVisuallyNonEmptyPaint(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "didFirstVisuallyNonEmptyPaint",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_didFirstVisuallyNonEmptyPaint);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onScreenshotReady = 0;
static void Java_WebViewChromiumExtension_onScreenshotReady(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onScreenshotReady",
        "("
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_onScreenshotReady);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onPrereadingFinished
    = 0;
static void Java_WebViewChromiumExtension_onPrereadingFinished(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onPrereadingFinished",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_onPrereadingFinished);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_notifyNavigationEntryAdded
    = 0;
static void Java_WebViewChromiumExtension_notifyNavigationEntryAdded(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index,
    JniIntWrapper id,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& virtualUrl,
    const base::android::JavaRefOrBare<jstring>& originalUrl,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jobject>& favicon)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "notifyNavigationEntryAdded",
        "("
        "I"
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        &g_WebViewChromiumExtension_notifyNavigationEntryAdded);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(index), as_jint(id), url.obj(), virtualUrl.obj(),
        originalUrl.obj(), title.obj(), favicon.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_updateFrameInfo = 0;
static void Java_WebViewChromiumExtension_updateFrameInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper frameTransitionType,
    JniIntWrapper pageId)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "updateFrameInfo",
        "("
        "I"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_updateFrameInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(frameTransitionType), as_jint(pageId));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_setNetWorkLoadPolicyToCacheFirst
    = 0;
static void
Java_WebViewChromiumExtension_setNetWorkLoadPolicyToCacheFirst(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "setNetWorkLoadPolicyToCacheFirst",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_setNetWorkLoadPolicyToCacheFirst);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_notifyCurrentNavigationEntryChanged
    = 0;
static void
Java_WebViewChromiumExtension_notifyCurrentNavigationEntryChanged(JNIEnv*
                                                                      env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index,
    JniIntWrapper id,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& virtualUrl,
    const base::android::JavaRefOrBare<jstring>& originalUrl,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jobject>& favicon)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "notifyCurrentNavigationEntryChanged",
        "("
        "I"
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        &g_WebViewChromiumExtension_notifyCurrentNavigationEntryChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(index), as_jint(id), url.obj(), virtualUrl.obj(),
        originalUrl.obj(), title.obj(), favicon.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_notifyNavigationEntryRemoved
    = 0;
static void Java_WebViewChromiumExtension_notifyNavigationEntryRemoved(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper index,
    JniIntWrapper id,
    const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& virtualUrl,
    const base::android::JavaRefOrBare<jstring>& originalUrl,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jobject>& favicon)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "notifyNavigationEntryRemoved",
        "("
        "I"
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        &g_WebViewChromiumExtension_notifyNavigationEntryRemoved);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(index), as_jint(id), url.obj(), virtualUrl.obj(),
        originalUrl.obj(), title.obj(), favicon.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onBackForwardFinished
    = 0;
static void Java_WebViewChromiumExtension_onBackForwardFinished(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onBackForwardFinished",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_onBackForwardFinished);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onMissingPluginClicked
    = 0;
static void Java_WebViewChromiumExtension_onMissingPluginClicked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& mimeType,
    const base::android::JavaRefOrBare<jstring>& dataUrl,
    const base::android::JavaRefOrBare<jstring>& pagesUrl,
    JniIntWrapper installType)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onMissingPluginClicked",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_onMissingPluginClicked);

    env->CallVoidMethod(obj.obj(),
        method_id, mimeType.obj(), dataUrl.obj(), pagesUrl.obj(),
        as_jint(installType));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_handlePluginTag = 0;
static jboolean Java_WebViewChromiumExtension_handlePluginTag(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    jboolean isClicked,
    const base::android::JavaRefOrBare<jstring>& outHTML)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "handlePluginTag",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Z"
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WebViewChromiumExtension_handlePluginTag);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, url.obj(), mimeType.obj(), isClicked, outHTML.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onVideoElementCreated
    = 0;
static void Java_WebViewChromiumExtension_onVideoElementCreated(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onVideoElementCreated",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_onVideoElementCreated);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_keepScreenOn = 0;
static void Java_WebViewChromiumExtension_keepScreenOn(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean screenOn)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "keepScreenOn",
        "("
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_keepScreenOn);

    env->CallVoidMethod(obj.obj(),
        method_id, screenOn);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_createSurface = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebViewChromiumExtension_createSurface(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& pluginView)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "createSurface",
        "("
        "Landroid/view/View;"
        ")"
        "Ljava/lang/Object;",
        &g_WebViewChromiumExtension_createSurface);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, pluginView.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_showFullScreenPlugin
    = 0;
static void Java_WebViewChromiumExtension_showFullScreenPlugin(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& surface,
    JniIntWrapper orientation,
    JniIntWrapper npp)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "showFullScreenPlugin",
        "("
        "Ljava/lang/Object;"
        "I"
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_showFullScreenPlugin);

    env->CallVoidMethod(obj.obj(),
        method_id, surface.obj(), as_jint(orientation), as_jint(npp));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_hideFullScreenPlugin
    = 0;
static void Java_WebViewChromiumExtension_hideFullScreenPlugin(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "hideFullScreenPlugin",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_hideFullScreenPlugin);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onReportFramePerformanceInfo
    = 0;
static void Java_WebViewChromiumExtension_onReportFramePerformanceInfo(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper sourceFrame,
    jlong start,
    jlong end,
    JniIntWrapper layer_num,
    JniIntWrapper totalLayerMem,
    jfloat minLayerSize,
    jfloat maxLayerSize)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onReportFramePerformanceInfo",
        "("
        "I"
        "J"
        "J"
        "I"
        "I"
        "F"
        "F"
        ")"
        "V",
        &g_WebViewChromiumExtension_onReportFramePerformanceInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(sourceFrame), start, end, as_jint(layer_num),
        as_jint(totalLayerMem), minLayerSize, maxLayerSize);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onReportJSPerformanceInfo
    = 0;
static void Java_WebViewChromiumExtension_onReportJSPerformanceInfo(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& resourceName,
    JniIntWrapper lineNumber,
    jdouble start,
    jdouble end)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onReportJSPerformanceInfo",
        "("
        "Ljava/lang/String;"
        "I"
        "D"
        "D"
        ")"
        "V",
        &g_WebViewChromiumExtension_onReportJSPerformanceInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, resourceName.obj(), as_jint(lineNumber), start, end);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_savePassword = 0;
static void Java_WebViewChromiumExtension_savePassword(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& scheme,
    const base::android::JavaRefOrBare<jstring>& host,
    const base::android::JavaRefOrBare<jstring>& name,
    const base::android::JavaRefOrBare<jstring>& password,
    const base::android::JavaRefOrBare<jstring>& nameElement,
    const base::android::JavaRefOrBare<jstring>& passwordElement)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "savePassword",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_savePassword);

    env->CallVoidMethod(obj.obj(),
        method_id, scheme.obj(), host.obj(), name.obj(), password.obj(),
        nameElement.obj(), passwordElement.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_getPasswordFromDatabase
    = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_WebViewChromiumExtension_getPasswordFromDatabase(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& host)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "getPasswordFromDatabase",
        "("
        "Ljava/lang/String;"
        ")"
        "[Ljava/lang/String;",
        &g_WebViewChromiumExtension_getPasswordFromDatabase);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id, host.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_updateImeAdapter = 0;
static void Java_WebViewChromiumExtension_updateImeAdapter(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper textInputType,
    const base::android::JavaRefOrBare<jstring>& text,
    jboolean showImeIfNeeded,
    jboolean isNonImeChange)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "updateImeAdapter",
        "("
        "I"
        "Ljava/lang/String;"
        "Z"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_updateImeAdapter);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(textInputType), text.obj(), showImeIfNeeded,
        isNonImeChange);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onUpdatePreNextInputNodeResult
    = 0;
static void Java_WebViewChromiumExtension_onUpdatePreNextInputNodeResult(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong preNode,
    jlong nextNode)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onUpdatePreNextInputNodeResult",
        "("
        "J"
        "J"
        ")"
        "V",
        &g_WebViewChromiumExtension_onUpdatePreNextInputNodeResult);

    env->CallVoidMethod(obj.obj(),
        method_id, preNode, nextNode);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_closeDisambiguationPopup
    = 0;
static void Java_WebViewChromiumExtension_closeDisambiguationPopup(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "closeDisambiguationPopup",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_closeDisambiguationPopup);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_showLongClickPopupMenu
    = 0;
static void Java_WebViewChromiumExtension_showLongClickPopupMenu(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, jboolean selectable)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "showLongClickPopupMenu",
        "("
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_showLongClickPopupMenu);

    env->CallVoidMethod(obj.obj(),
        method_id, selectable);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_onDeadCodeDetectionDone
    = 0;
static void Java_WebViewChromiumExtension_onDeadCodeDetectionDone(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onDeadCodeDetectionDone",
        "("
        ")"
        "V",
        &g_WebViewChromiumExtension_onDeadCodeDetectionDone);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_ReportExtraMessageLogToRQD
    = 0;
static void Java_WebViewChromiumExtension_ReportExtraMessageLogToRQD(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jstring>& tag,
    const base::android::JavaRefOrBare<jstring>& msg)
{
    CHECK_CLAZZ(env, WebViewChromiumExtension_clazz(env),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebViewChromiumExtension_clazz(env),
        "ReportExtraMessageLogToRQD",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_ReportExtraMessageLogToRQD);

    env->CallStaticVoidMethod(WebViewChromiumExtension_clazz(env),
        method_id, tag.obj(), msg.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_ReportExtraMessageUserDataToRQD
    = 0;
static void
Java_WebViewChromiumExtension_ReportExtraMessageUserDataToRQD(JNIEnv* env,
    const base::android::JavaRefOrBare<jstring>& tag,
    const base::android::JavaRefOrBare<jstring>& msg)
{
    CHECK_CLAZZ(env, WebViewChromiumExtension_clazz(env),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebViewChromiumExtension_clazz(env),
        "ReportExtraMessageUserDataToRQD",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_ReportExtraMessageUserDataToRQD);

    env->CallStaticVoidMethod(WebViewChromiumExtension_clazz(env),
        method_id, tag.obj(), msg.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebViewChromiumExtension_onColorModeChanged = 0;
static void Java_WebViewChromiumExtension_onColorModeChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper color)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "onColorModeChanged",
        "("
        "I"
        ")"
        "V",
        &g_WebViewChromiumExtension_onColorModeChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(color));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_OnContentCachePageSwapIn
    = 0;
static void Java_WebViewChromiumExtension_OnContentCachePageSwapIn(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "OnContentCachePageSwapIn",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_OnContentCachePageSwapIn);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_OnReceivedCharacterStatistics
    = 0;
static void Java_WebViewChromiumExtension_OnReceivedCharacterStatistics(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper charCountInBody,
    JniIntWrapper charCountAroundVideo,
    jboolean findVideoNode)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "OnReceivedCharacterStatistics",
        "("
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_WebViewChromiumExtension_OnReceivedCharacterStatistics);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(charCountInBody), as_jint(charCountAroundVideo),
        findVideoNode);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebViewChromiumExtension_OnReceivedExplorerStatistics
    = 0;
static void Java_WebViewChromiumExtension_OnReceivedExplorerStatistics(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper characterCount,
    JniIntWrapper videoCount,
    JniIntWrapper imgCount,
    const base::android::JavaRefOrBare<jstring>& title)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebViewChromiumExtension_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebViewChromiumExtension_clazz(env),
        "OnReceivedExplorerStatistics",
        "("
        "I"
        "I"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebViewChromiumExtension_OnReceivedExplorerStatistics);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(characterCount), as_jint(videoCount),
        as_jint(imgCount), title.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWebViewChromiumExtension[] = {
    { "nativeInit",
        "("
        "Lorg/chromium/content_public/browser/WebContents;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeInit) },
    { "nativeOnJavaWebViewChromiumExtensionDestroyed",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeOnJavaWebViewChromiumExtensionDestroyed) },
    { "nativeFullScreenPluginHidden",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeFullScreenPluginHidden) },
    { "nativeOnAppExit",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeOnAppExit) },
    { "nativeShowImage",
        "("
        "J"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeShowImage) },
    { "nativeGetCurrentNavigationEntryIndex",
        "("
        "J"
        ")"
        "I",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetCurrentNavigationEntryIndex) },
    { "nativeRemoveNavigationEntryAtIndex",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRemoveNavigationEntryAtIndex) },
    { "nativeFocusAndPopupIM",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeFocusAndPopupIM) },
    { "nativeonFingerSearchResult",
        "("
        "J"
        "Ljava/lang/String;"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeonFingerSearchResult) },
    { "nativeGetUrlByPageID",
        "("
        "J"
        "I"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetUrlByPageID) },
    { "nativeOnRetrieveFingerSearchContext",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeOnRetrieveFingerSearchContext) },
    { "nativeReloadCustomMetaData",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeReloadCustomMetaData) },
    { "nativeUpdateImageList",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeUpdateImageList) },
    { "nativeGetBitmapByIndex",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetBitmapByIndex) },
    { "nativeCanTakeScreenshotWithPageID",
        "("
        "J"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeCanTakeScreenshotWithPageID) },
    { "nativeTakeScreenshotWithPageID",
        "("
        "J"
        "I"
        "Landroid/graphics/Bitmap;"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeTakeScreenshotWithPageID) },
    { "nativeTakeCurrentScreenshot",
        "("
        "J"
        "I"
        "I"
        "F"
        "F"
        "Z"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeTakeCurrentScreenshot) },
    { "nativeGoToPrereading",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGoToPrereading) },
    { "nativeRefreshPlugins",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRefreshPlugins) },
    { "nativePluginSurfaceCreated",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativePluginSurfaceCreated) },
    { "nativeSavePasswordResponse",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSavePasswordResponse) },
    { "nativeEvaluateJavaScriptInSubFrame",
        "("
        "J"
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeEvaluateJavaScriptInSubFrame) },
    { "nativeRequestFocusForInputNode",
        "("
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRequestFocusForInputNode) },
    { "nativeDetectDeadCode",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeDetectDeadCode) },
    { "nativeDumpDeadCode",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeDumpDeadCode) },
    { "nativeSelectWordAroundPosition",
        "("
        "J"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSelectWordAroundPosition) },
    { "nativeSelectBetweenCoordinates",
        "("
        "J"
        "F"
        "F"
        "F"
        "F"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSelectBetweenCoordinates) },
    { "nativeMarkScrollOffsetForMoveRange",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeMarkScrollOffsetForMoveRange) },
    { "nativeMoveCaret",
        "("
        "J"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeMoveCaret) },
    { "nativeServiceWorkerBackgroundUpdate",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeServiceWorkerBackgroundUpdate) },
    { "nativeServiceWorkerBackgroundRegister",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeServiceWorkerBackgroundRegister) },
    { "nativeServiceWorkerRegisterOffline",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeServiceWorkerRegisterOffline) },
    { "nativeGetCrashExtraMessage",
        "("
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeGetCrashExtraMessage) },
    { "nativeEvaluateJavaScriptInFrame",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeEvaluateJavaScriptInFrame) },
    { "nativeSetContentCacheCurrentFrameWhenJsLocation",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeSetContentCacheCurrentFrameWhenJsLocation) },
    { "nativeRequestCharacterStatistics",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRequestCharacterStatistics) },
    { "nativeRequestExplorerStatistics",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_WebViewChromiumExtension_nativeRequestExplorerStatistics) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsWebViewChromiumExtensionSize = arraysize(kMethodsWebViewChromiumExtension);

    if (env->RegisterNatives(WebViewChromiumExtension_clazz(env),
            kMethodsWebViewChromiumExtension,
            kMethodsWebViewChromiumExtensionSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, WebViewChromiumExtension_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace tencent

#endif // com_tencent_smtt_webkit_WebViewChromiumExtension_JNI
