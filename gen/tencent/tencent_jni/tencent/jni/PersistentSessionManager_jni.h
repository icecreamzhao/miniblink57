// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/net/PersistentSessionManager

#ifndef com_tencent_smtt_net_PersistentSessionManager_JNI
#define com_tencent_smtt_net_PersistentSessionManager_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPersistentSessionManagerClassPath[] = "com/tencent/smtt/net/PersistentSessionManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PersistentSessionManager_clazz
    __attribute__((unused))
    = 0;
#define PersistentSessionManager_clazz(env) base::android::LazyGetClass(env, kPersistentSessionManagerClassPath, &g_PersistentSessionManager_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static base::subtle::AtomicWord g_PersistentSessionManager_init = 0;
static jboolean Java_PersistentSessionManager_init(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "init",
        "("
        ")"
        "Z",
        &g_PersistentSessionManager_init);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PersistentSessionManager_getInstance = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_PersistentSessionManager_getInstance(JNIEnv* env)
{
    CHECK_CLAZZ(env, PersistentSessionManager_clazz(env),
        PersistentSessionManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, PersistentSessionManager_clazz(env),
        "getInstance",
        "("
        ")"
        "Lcom/tencent/smtt/net/PersistentSessionManager;",
        &g_PersistentSessionManager_getInstance);

    jobject ret = env->CallStaticObjectMethod(PersistentSessionManager_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PersistentSessionManager_getSessionInfo = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_PersistentSessionManager_getSessionInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& cacheKey)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getSessionInfo",
        "("
        "Ljava/lang/String;"
        ")"
        "Lcom/tencent/smtt/net/SessionInfo;",
        &g_PersistentSessionManager_getSessionInfo);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, cacheKey.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PersistentSessionManager_getSupportedDomains = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_PersistentSessionManager_getSupportedDomains(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getSupportedDomains",
        "("
        ")"
        "[Ljava/lang/String;",
        &g_PersistentSessionManager_getSupportedDomains);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_PersistentSessionManager_notifyHandShakeFailed
    = 0;
static void Java_PersistentSessionManager_notifyHandShakeFailed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& cacheKey)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "notifyHandShakeFailed",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_PersistentSessionManager_notifyHandShakeFailed);

    env->CallVoidMethod(obj.obj(),
        method_id, cacheKey.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PersistentSessionManager_saveSessionInfo = 0;
static void Java_PersistentSessionManager_saveSessionInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& cacheKey,
    JniIntWrapper masterKeyLength,
    const base::android::JavaRefOrBare<jbyteArray>& masterKey,
    JniIntWrapper sessionIDLength,
    const base::android::JavaRefOrBare<jbyteArray>& sessionID,
    JniIntWrapper sessionTicketsLength,
    const base::android::JavaRefOrBare<jbyteArray>& sessionTickets,
    jlong sessionTicketsLifeHint,
    jboolean serverAllow)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "saveSessionInfo",
        "("
        "Ljava/lang/String;"
        "I"
        "[B"
        "I"
        "[B"
        "I"
        "[B"
        "J"
        "Z"
        ")"
        "V",
        &g_PersistentSessionManager_saveSessionInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, cacheKey.obj(), as_jint(masterKeyLength), masterKey.obj(),
        as_jint(sessionIDLength), sessionID.obj(),
        as_jint(sessionTicketsLength), sessionTickets.obj(),
        sessionTicketsLifeHint, serverAllow);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PersistentSessionManager_getMasterKeyLength = 0;
static jint Java_PersistentSessionManager_getMasterKeyLength(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& si)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getMasterKeyLength",
        "("
        "Lcom/tencent/smtt/net/SessionInfo;"
        ")"
        "I",
        &g_PersistentSessionManager_getMasterKeyLength);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id, si.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PersistentSessionManager_getSessionIDLength = 0;
static jint Java_PersistentSessionManager_getSessionIDLength(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& si)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getSessionIDLength",
        "("
        "Lcom/tencent/smtt/net/SessionInfo;"
        ")"
        "I",
        &g_PersistentSessionManager_getSessionIDLength);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id, si.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_PersistentSessionManager_getSessionTicketsLength
    = 0;
static jint Java_PersistentSessionManager_getSessionTicketsLength(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& si)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getSessionTicketsLength",
        "("
        "Lcom/tencent/smtt/net/SessionInfo;"
        ")"
        "I",
        &g_PersistentSessionManager_getSessionTicketsLength);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id, si.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PersistentSessionManager_getMasterKey = 0;
static base::android::ScopedJavaLocalRef<jbyteArray>
Java_PersistentSessionManager_getMasterKey(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& si)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getMasterKey",
        "("
        "Lcom/tencent/smtt/net/SessionInfo;"
        ")"
        "[B",
        &g_PersistentSessionManager_getMasterKey);

    jbyteArray ret = static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
        method_id, si.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_PersistentSessionManager_getSessionID = 0;
static base::android::ScopedJavaLocalRef<jbyteArray>
Java_PersistentSessionManager_getSessionID(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& si)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getSessionID",
        "("
        "Lcom/tencent/smtt/net/SessionInfo;"
        ")"
        "[B",
        &g_PersistentSessionManager_getSessionID);

    jbyteArray ret = static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
        method_id, si.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_PersistentSessionManager_getSessionTickets = 0;
static base::android::ScopedJavaLocalRef<jbyteArray>
Java_PersistentSessionManager_getSessionTickets(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& si)
{
    CHECK_CLAZZ(env, obj.obj(),
        PersistentSessionManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PersistentSessionManager_clazz(env),
        "getSessionTickets",
        "("
        "Lcom/tencent/smtt/net/SessionInfo;"
        ")"
        "[B",
        &g_PersistentSessionManager_getSessionTickets);

    jbyteArray ret = static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
        method_id, si.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace tencent

#endif // com_tencent_smtt_net_PersistentSessionManager_JNI
