// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/webkit/deeplink/DeeplinkClient

#ifndef com_tencent_smtt_webkit_deeplink_DeeplinkClient_JNI
#define com_tencent_smtt_webkit_deeplink_DeeplinkClient_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDeeplinkClientClassPath[] = "com/tencent/smtt/webkit/deeplink/DeeplinkClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DeeplinkClient_clazz __attribute__((unused)) = 0;
#define DeeplinkClient_clazz(env) base::android::LazyGetClass(env, kDeeplinkClientClassPath, &g_DeeplinkClient_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static jlong InitDeeplinkClient(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jlong
Java_com_tencent_smtt_webkit_deeplink_DeeplinkClient_nativeInitDeeplinkClient(JNIEnv*
                                                                                  env,
    jobject jcaller)
{
    return InitDeeplinkClient(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
Java_com_tencent_smtt_webkit_deeplink_DeeplinkClient_nativeRequestDeeplinkNet(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeDeeplinkClient,
    jobject deeplinkRequest,
    jstring url,
    jbyteArray body,
    jstring port,
    jstring QUA,
    jstring QUA2,
    jstring GUID,
    jstring QAuth)
{
    DeeplinkClient* native = reinterpret_cast<DeeplinkClient*>(nativeDeeplinkClient);
    CHECK_NATIVE_PTR(env, jcaller, native, "RequestDeeplinkNet", false);
    return native->RequestDeeplinkNet(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, deeplinkRequest),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jbyteArray>(env, body),
        base::android::JavaParamRef<jstring>(env, port),
        base::android::JavaParamRef<jstring>(env, QUA),
        base::android::JavaParamRef<jstring>(env, QUA2),
        base::android::JavaParamRef<jstring>(env, GUID),
        base::android::JavaParamRef<jstring>(env, QAuth));
}

static base::subtle::AtomicWord g_DeeplinkClient_tryMakingCall = 0;
static jboolean Java_DeeplinkClient_tryMakingCall(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& href,
    const base::android::JavaRefOrBare<jstring>& applink,
    const base::android::JavaRefOrBare<jstring>& linkname)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeeplinkClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeeplinkClient_clazz(env),
        "tryMakingCall",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_DeeplinkClient_tryMakingCall);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, url.obj(), href.obj(), applink.obj(), linkname.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DeeplinkClient_queryAuthCall = 0;
static void Java_DeeplinkClient_queryAuthCall(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& href,
    const base::android::JavaRefOrBare<jstring>& applink)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeeplinkClient_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeeplinkClient_clazz(env),
        "queryAuthCall",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_DeeplinkClient_queryAuthCall);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), href.obj(), applink.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDeeplinkClient[] = {
    { "nativeInitDeeplinkClient",
        "("
        ")"
        "J",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_deeplink_DeeplinkClient_nativeInitDeeplinkClient) },
    { "nativeRequestDeeplinkNet",
        "("
        "J"
        "Lcom/tencent/smtt/webkit/deeplink/DeeplinkRequest;"
        "Ljava/lang/String;"
        "[B"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_deeplink_DeeplinkClient_nativeRequestDeeplinkNet) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsDeeplinkClientSize = arraysize(kMethodsDeeplinkClient);

    if (env->RegisterNatives(DeeplinkClient_clazz(env),
            kMethodsDeeplinkClient,
            kMethodsDeeplinkClientSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, DeeplinkClient_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace tencent

#endif // com_tencent_smtt_webkit_deeplink_DeeplinkClient_JNI
