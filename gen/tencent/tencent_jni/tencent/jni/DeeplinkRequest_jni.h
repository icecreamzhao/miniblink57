// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/webkit/deeplink/DeeplinkRequest

#ifndef com_tencent_smtt_webkit_deeplink_DeeplinkRequest_JNI
#define com_tencent_smtt_webkit_deeplink_DeeplinkRequest_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDeeplinkRequestClassPath[] = "com/tencent/smtt/webkit/deeplink/DeeplinkRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DeeplinkRequest_clazz __attribute__((unused)) = 0;
#define DeeplinkRequest_clazz(env) base::android::LazyGetClass(env, kDeeplinkRequestClassPath, &g_DeeplinkRequest_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static base::subtle::AtomicWord g_DeeplinkRequest_Response = 0;
static void Java_DeeplinkRequest_Response(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jbyteArray>& encryptedResponse)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeeplinkRequest_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeeplinkRequest_clazz(env),
        "Response",
        "("
        "[B"
        ")"
        "V",
        &g_DeeplinkRequest_Response);

    env->CallVoidMethod(obj.obj(),
        method_id, encryptedResponse.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace tencent

#endif // com_tencent_smtt_webkit_deeplink_DeeplinkRequest_JNI
