// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/webkit/SmttResource

#ifndef com_tencent_smtt_webkit_SmttResource_JNI
#define com_tencent_smtt_webkit_SmttResource_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSmttResourceClassPath[] = "com/tencent/smtt/webkit/SmttResource";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SmttResource_clazz __attribute__((unused)) = 0;
#define SmttResource_clazz(env) base::android::LazyGetClass(env, kSmttResourceClassPath, &g_SmttResource_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SmttResource_getLocalizedString = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_SmttResource_getLocalizedString(JNIEnv* env, JniIntWrapper id)
{
    CHECK_CLAZZ(env, SmttResource_clazz(env),
        SmttResource_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SmttResource_clazz(env),
        "getLocalizedString",
        "("
        "I"
        ")"
        "Ljava/lang/String;",
        &g_SmttResource_getLocalizedString);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(SmttResource_clazz(env),
        method_id, as_jint(id)));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_SmttResource_getDataResource = 0;
static base::android::ScopedJavaLocalRef<jbyteArray>
Java_SmttResource_getDataResource(JNIEnv* env, JniIntWrapper id,
    JniIntWrapper factor)
{
    CHECK_CLAZZ(env, SmttResource_clazz(env),
        SmttResource_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SmttResource_clazz(env),
        "getDataResource",
        "("
        "I"
        "I"
        ")"
        "[B",
        &g_SmttResource_getDataResource);

    jbyteArray ret = static_cast<jbyteArray>(env->CallStaticObjectMethod(SmttResource_clazz(env),
        method_id, as_jint(id), as_jint(factor)));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace tencent

#endif // com_tencent_smtt_webkit_SmttResource_JNI
