// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/net/AwNetworkUtils

#ifndef com_tencent_smtt_net_AwNetworkUtils_JNI
#define com_tencent_smtt_net_AwNetworkUtils_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwNetworkUtilsClassPath[] = "com/tencent/smtt/net/AwNetworkUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwNetworkUtils_clazz __attribute__((unused)) = 0;
#define AwNetworkUtils_clazz(env) base::android::LazyGetClass(env, kAwNetworkUtilsClassPath, &g_AwNetworkUtils_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static void SetQProxyType(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint type);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetQProxyType(JNIEnv* env,
    jclass jcaller,
    jint type)
{
    return SetQProxyType(env, base::android::JavaParamRef<jclass>(env, jcaller),
        type);
}

static void SetSPDYPreconnect(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetSPDYPreconnect(JNIEnv*
                                                                     env,
    jclass jcaller)
{
    return SetSPDYPreconnect(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void SetPreconnect(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    jint num);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetPreconnect(JNIEnv* env,
    jclass jcaller,
    jstring url,
    jint num)
{
    return SetPreconnect(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url), num);
}

static void StartCheckSpdyProxy(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeStartCheckSpdyProxy(JNIEnv*
                                                                       env,
    jclass jcaller,
    jstring url)
{
    return StartCheckSpdyProxy(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, url));
}

static void SetCustomHosts(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& hostslist);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetCustomHosts(JNIEnv* env,
    jclass jcaller,
    jstring hostslist)
{
    return SetCustomHosts(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, hostslist));
}

static void EnableADFilterAddr(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& adUrl);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeEnableADFilterAddr(JNIEnv*
                                                                      env,
    jclass jcaller,
    jstring adUrl)
{
    return EnableADFilterAddr(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, adUrl));
}

static void ClearCache(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeClearCache(JNIEnv* env,
    jclass jcaller)
{
    return ClearCache(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void ClearDNSCache(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeClearDNSCache(JNIEnv* env,
    jclass jcaller)
{
    return ClearDNSCache(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void ClearSWCache(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeClearSWCache(JNIEnv* env,
    jclass jcaller)
{
    return ClearSWCache(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void CloseAllSpdySessions(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeCloseAllSpdySessions(JNIEnv*
                                                                        env,
    jclass jcaller)
{
    return CloseAllSpdySessions(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void OpenNativeMttLog(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean open);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeOpenNativeMttLog(JNIEnv* env,
    jclass jcaller,
    jboolean open)
{
    return OpenNativeMttLog(env, base::android::JavaParamRef<jclass>(env, jcaller), open);
}

static void EnableTraceUploading(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean enable);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeEnableTraceUploading(JNIEnv*
                                                                        env,
    jclass jcaller,
    jboolean enable)
{
    return EnableTraceUploading(env, base::android::JavaParamRef<jclass>(env, jcaller), enable);
}

static base::android::ScopedJavaLocalRef<jobjectArray> GetCacheEntry(JNIEnv*
                                                                         env,
    const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& localPath);

JNI_GENERATOR_EXPORT jobjectArray
Java_com_tencent_smtt_net_AwNetworkUtils_nativeGetCacheEntry(JNIEnv* env,
    jclass jcaller,
    jstring url,
    jstring localPath)
{
    return GetCacheEntry(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, localPath))
        .Release();
}

static void PrefetchResource(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& userAgent);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativePrefetchResource(JNIEnv* env,
    jclass jcaller,
    jstring url,
    jstring userAgent)
{
    return PrefetchResource(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, userAgent));
}

static void SetConnectionTimeOut(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint WifiTimeOut,
    jint GPRSTimeOut);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetConnectionTimeOut(JNIEnv*
                                                                        env,
    jclass jcaller,
    jint WifiTimeOut,
    jint GPRSTimeOut)
{
    return SetConnectionTimeOut(env, base::android::JavaParamRef<jclass>(env, jcaller), WifiTimeOut, GPRSTimeOut);
}

static void SetIsViewSourceMode(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean mode);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetIsViewSourceMode(JNIEnv*
                                                                       env,
    jclass jcaller,
    jboolean mode)
{
    return SetIsViewSourceMode(env, base::android::JavaParamRef<jclass>(env, jcaller), mode);
}

static void CustomDiskCachePathEnabled(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean enabled,
    const base::android::JavaParamRef<jstring>& path);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_AwNetworkUtils_nativeCustomDiskCachePathEnabled(JNIEnv*
                                                                              env,
    jclass jcaller,
    jboolean enabled,
    jstring path)
{
    return CustomDiskCachePathEnabled(env,
        base::android::JavaParamRef<jclass>(env, jcaller), enabled,
        base::android::JavaParamRef<jstring>(env, path));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwNetworkUtils[] = {
    { "nativeSetQProxyType",
        "("
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetQProxyType) },
    { "nativeSetSPDYPreconnect",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetSPDYPreconnect) },
    { "nativeSetPreconnect",
        "("
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetPreconnect) },
    { "nativeStartCheckSpdyProxy",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeStartCheckSpdyProxy) },
    { "nativeSetCustomHosts",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetCustomHosts) },
    { "nativeEnableADFilterAddr",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeEnableADFilterAddr) },
    { "nativeClearCache",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeClearCache) },
    { "nativeClearDNSCache",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeClearDNSCache) },
    { "nativeClearSWCache",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeClearSWCache) },
    { "nativeCloseAllSpdySessions",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeCloseAllSpdySessions) },
    { "nativeOpenNativeMttLog",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeOpenNativeMttLog) },
    { "nativeEnableTraceUploading",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeEnableTraceUploading) },
    { "nativeGetCacheEntry",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "[Ljava/lang/String;",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeGetCacheEntry) },
    { "nativePrefetchResource",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativePrefetchResource) },
    { "nativeSetConnectionTimeOut",
        "("
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetConnectionTimeOut) },
    { "nativeSetIsViewSourceMode",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeSetIsViewSourceMode) },
    { "nativeCustomDiskCachePathEnabled",
        "("
        "Z"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_AwNetworkUtils_nativeCustomDiskCachePathEnabled) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwNetworkUtilsSize = arraysize(kMethodsAwNetworkUtils);

    if (env->RegisterNatives(AwNetworkUtils_clazz(env),
            kMethodsAwNetworkUtils,
            kMethodsAwNetworkUtilsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwNetworkUtils_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace tencent

#endif // com_tencent_smtt_net_AwNetworkUtils_JNI
