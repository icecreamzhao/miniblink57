// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/memory/MemoryChecker

#ifndef com_tencent_smtt_memory_MemoryChecker_JNI
#define com_tencent_smtt_memory_MemoryChecker_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMemoryCheckerClassPath[] = "com/tencent/smtt/memory/MemoryChecker";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MemoryChecker_clazz __attribute__((unused)) = 0;
#define MemoryChecker_clazz(env) base::android::LazyGetClass(env, kMemoryCheckerClassPath, &g_MemoryChecker_clazz)

} // namespace

// Step 2: method stubs.

static jboolean TryMapMemory(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint sizeInKb);

JNI_GENERATOR_EXPORT jboolean
Java_com_tencent_smtt_memory_MemoryChecker_nativeTryMapMemory(JNIEnv* env,
    jclass jcaller,
    jint sizeInKb)
{
    return TryMapMemory(env, base::android::JavaParamRef<jclass>(env, jcaller),
        sizeInKb);
}

static jboolean TryReserveMemory(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint sizeInKb);

JNI_GENERATOR_EXPORT jboolean
Java_com_tencent_smtt_memory_MemoryChecker_nativeTryReserveMemory(JNIEnv*
                                                                      env,
    jclass jcaller,
    jint sizeInKb)
{
    return TryReserveMemory(env, base::android::JavaParamRef<jclass>(env, jcaller), sizeInKb);
}

static void SetupOOMHandler(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_memory_MemoryChecker_nativeSetupOOMHandler(JNIEnv*
                                                                     env,
    jclass jcaller)
{
    return SetupOOMHandler(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::subtle::AtomicWord g_MemoryChecker_check = 0;
static void Java_MemoryChecker_check(JNIEnv* env, JniIntWrapper checkReason)
{
    CHECK_CLAZZ(env, MemoryChecker_clazz(env),
        MemoryChecker_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MemoryChecker_clazz(env),
        "check",
        "("
        "I"
        ")"
        "V",
        &g_MemoryChecker_check);

    env->CallStaticVoidMethod(MemoryChecker_clazz(env),
        method_id, as_jint(checkReason));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMemoryChecker[] = {
    { "nativeTryMapMemory",
        "("
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_com_tencent_smtt_memory_MemoryChecker_nativeTryMapMemory) },
    { "nativeTryReserveMemory",
        "("
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_com_tencent_smtt_memory_MemoryChecker_nativeTryReserveMemory) },
    { "nativeSetupOOMHandler",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_memory_MemoryChecker_nativeSetupOOMHandler) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsMemoryCheckerSize = arraysize(kMethodsMemoryChecker);

    if (env->RegisterNatives(MemoryChecker_clazz(env),
            kMethodsMemoryChecker,
            kMethodsMemoryCheckerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, MemoryChecker_clazz(env), __FILE__);
        return false;
    }

    return true;
}

#endif // com_tencent_smtt_memory_MemoryChecker_JNI
