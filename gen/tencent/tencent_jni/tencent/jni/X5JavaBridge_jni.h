// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/webkit/X5JavaBridge

#ifndef com_tencent_smtt_webkit_X5JavaBridge_JNI
#define com_tencent_smtt_webkit_X5JavaBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kX5JavaBridgeClassPath[] = "com/tencent/smtt/webkit/X5JavaBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_X5JavaBridge_clazz __attribute__((unused)) = 0;
#define X5JavaBridge_clazz(env) base::android::LazyGetClass(env, kX5JavaBridgeClassPath, &g_X5JavaBridge_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& retainedObjectSet);

JNI_GENERATOR_EXPORT jlong
Java_com_tencent_smtt_webkit_X5JavaBridge_nativeInit(JNIEnv* env, jobject jcaller,
    jobject retainedObjectSet)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, retainedObjectSet));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_X5JavaBridge_nativeAddJavascriptInterface(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeX5JavaBridge,
    jobject object,
    jstring name,
    jclass requiredAnnotation)
{
    X5JavaBridge* native = reinterpret_cast<X5JavaBridge*>(nativeX5JavaBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "AddJavascriptInterface");
    return native->AddJavascriptInterface(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, object),
        base::android::JavaParamRef<jstring>(env, name),
        base::android::JavaParamRef<jclass>(env, requiredAnnotation));
}

JNI_GENERATOR_EXPORT jstring
Java_com_tencent_smtt_webkit_X5JavaBridge_nativeEvaluateJavaScript(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeX5JavaBridge,
    jstring script,
    jboolean hasCallback)
{
    X5JavaBridge* native = reinterpret_cast<X5JavaBridge*>(nativeX5JavaBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScript", NULL);
    return native->EvaluateJavaScript(env,
                     base::android::JavaParamRef<jobject>(env, jcaller),
                     base::android::JavaParamRef<jstring>(env, script), hasCallback)
        .Release();
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_X5JavaBridge_nativeRemoveJavascriptInterface(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeX5JavaBridge,
    jstring name)
{
    X5JavaBridge* native = reinterpret_cast<X5JavaBridge*>(nativeX5JavaBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "RemoveJavascriptInterface");
    return native->RemoveJavascriptInterface(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, name));
}

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_webkit_X5JavaBridge_nativeTimerFired(JNIEnv* env,
    jobject jcaller,
    jlong nativeX5JavaBridge,
    jint id)
{
    X5JavaBridge* native = reinterpret_cast<X5JavaBridge*>(nativeX5JavaBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "TimerFired");
    return native->TimerFired(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_com_tencent_smtt_webkit_X5JavaBridge_nativeDestroy(JNIEnv* env, jobject jcaller,
    jlong nativeX5JavaBridge)
{
    X5JavaBridge* native = reinterpret_cast<X5JavaBridge*>(nativeX5JavaBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy", false);
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_X5JavaBridge_SetTimeout = 0;
static void Java_X5JavaBridge_SetTimeout(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id,
    jlong delayMillis)
{
    CHECK_CLAZZ(env, obj.obj(),
        X5JavaBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, X5JavaBridge_clazz(env),
        "SetTimeout",
        "("
        "I"
        "J"
        ")"
        "V",
        &g_X5JavaBridge_SetTimeout);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id), delayMillis);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsX5JavaBridge[] = {
    { "nativeInit",
        "("
        "Ljava/util/HashSet;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_X5JavaBridge_nativeInit) },
    { "nativeAddJavascriptInterface",
        "("
        "J"
        "Ljava/lang/Object;"
        "Ljava/lang/String;"
        "Ljava/lang/Class;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_X5JavaBridge_nativeAddJavascriptInterface) },
    { "nativeEvaluateJavaScript",
        "("
        "J"
        "Ljava/lang/String;"
        "Z"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_X5JavaBridge_nativeEvaluateJavaScript) },
    { "nativeRemoveJavascriptInterface",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_X5JavaBridge_nativeRemoveJavascriptInterface) },
    { "nativeTimerFired",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_X5JavaBridge_nativeTimerFired) },
    { "nativeDestroy",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_com_tencent_smtt_webkit_X5JavaBridge_nativeDestroy) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsX5JavaBridgeSize = arraysize(kMethodsX5JavaBridge);

    if (env->RegisterNatives(X5JavaBridge_clazz(env),
            kMethodsX5JavaBridge,
            kMethodsX5JavaBridgeSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, X5JavaBridge_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // com_tencent_smtt_webkit_X5JavaBridge_JNI
