// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/net/SWOfflineFramework

#ifndef com_tencent_smtt_net_SWOfflineFramework_JNI
#define com_tencent_smtt_net_SWOfflineFramework_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSWOfflineFrameworkClassPath[] = "com/tencent/smtt/net/SWOfflineFramework";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SWOfflineFramework_clazz __attribute__((unused)) = 0;
#define SWOfflineFramework_clazz(env) base::android::LazyGetClass(env, kSWOfflineFrameworkClassPath, &g_SWOfflineFramework_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SWOfflineFramework_getInstance = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_SWOfflineFramework_getInstance(JNIEnv* env)
{
    CHECK_CLAZZ(env, SWOfflineFramework_clazz(env),
        SWOfflineFramework_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SWOfflineFramework_clazz(env),
        "getInstance",
        "("
        ")"
        "Lcom/tencent/smtt/net/SWOfflineFramework;",
        &g_SWOfflineFramework_getInstance);

    jobject ret = env->CallStaticObjectMethod(SWOfflineFramework_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SWOfflineFramework_writeRegisterToFileJNI = 0;
static void Java_SWOfflineFramework_writeRegisterToFileJNI(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& scope,
    jlong registrationID,
    jlong lastUpdateTime)
{
    CHECK_CLAZZ(env, obj.obj(),
        SWOfflineFramework_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SWOfflineFramework_clazz(env),
        "writeRegisterToFileJNI",
        "("
        "Ljava/lang/String;"
        "J"
        "J"
        ")"
        "V",
        &g_SWOfflineFramework_writeRegisterToFileJNI);

    env->CallVoidMethod(obj.obj(),
        method_id, scope.obj(), registrationID, lastUpdateTime);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace tencent

#endif // com_tencent_smtt_net_SWOfflineFramework_JNI
