// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/net/NetLogLoggerService

#ifndef com_tencent_smtt_net_NetLogLoggerService_JNI
#define com_tencent_smtt_net_NetLogLoggerService_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kNetLogLoggerServiceClassPath[] = "com/tencent/smtt/net/NetLogLoggerService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_NetLogLoggerService_clazz __attribute__((unused)) = 0;
#define NetLogLoggerService_clazz(env) base::android::LazyGetClass(env, kNetLogLoggerServiceClassPath, &g_NetLogLoggerService_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static void OpenNetLog(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_NetLogLoggerService_nativeOpenNetLog(JNIEnv* env,
    jclass jcaller)
{
    return OpenNetLog(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void StopNetLog(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_NetLogLoggerService_nativeStopNetLog(JNIEnv* env,
    jclass jcaller)
{
    return StopNetLog(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void EnableHttpDump(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_com_tencent_smtt_net_NetLogLoggerService_nativeEnableHttpDump(JNIEnv*
                                                                       env,
    jclass jcaller)
{
    return EnableHttpDump(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::subtle::AtomicWord g_NetLogLoggerService_netlog = 0;
static void Java_NetLogLoggerService_netlog(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& msg)
{
    CHECK_CLAZZ(env, NetLogLoggerService_clazz(env),
        NetLogLoggerService_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetLogLoggerService_clazz(env),
        "netlog",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_NetLogLoggerService_netlog);

    env->CallStaticVoidMethod(NetLogLoggerService_clazz(env),
        method_id, msg.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsNetLogLoggerService[] = {
    { "nativeOpenNetLog",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_NetLogLoggerService_nativeOpenNetLog) },
    { "nativeStopNetLog",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_NetLogLoggerService_nativeStopNetLog) },
    { "nativeEnableHttpDump",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_com_tencent_smtt_net_NetLogLoggerService_nativeEnableHttpDump) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsNetLogLoggerServiceSize = arraysize(kMethodsNetLogLoggerService);

    if (env->RegisterNatives(NetLogLoggerService_clazz(env),
            kMethodsNetLogLoggerService,
            kMethodsNetLogLoggerServiceSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, NetLogLoggerService_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace tencent

#endif // com_tencent_smtt_net_NetLogLoggerService_JNI
