// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/tencent/smtt/webkit/AdInfoManager

#ifndef com_tencent_smtt_webkit_AdInfoManager_JNI
#define com_tencent_smtt_webkit_AdInfoManager_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAdInfoManagerClassPath[] = "com/tencent/smtt/webkit/AdInfoManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AdInfoManager_clazz __attribute__((unused)) = 0;
#define AdInfoManager_clazz(env) base::android::LazyGetClass(env, kAdInfoManagerClassPath, &g_AdInfoManager_clazz)

} // namespace

namespace tencent {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AdInfoManager_init = 0;
static void Java_AdInfoManager_init(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "init",
        "("
        ")"
        "V",
        &g_AdInfoManager_init);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AdInfoManager_getInstance = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AdInfoManager_getInstance(JNIEnv* env)
{
    CHECK_CLAZZ(env, AdInfoManager_clazz(env),
        AdInfoManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AdInfoManager_clazz(env),
        "getInstance",
        "("
        ")"
        "Lcom/tencent/smtt/webkit/AdInfoManager;",
        &g_AdInfoManager_getInstance);

    jobject ret = env->CallStaticObjectMethod(AdInfoManager_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AdInfoManager_handleAdBlockBackendCmd = 0;
static void Java_AdInfoManager_handleAdBlockBackendCmd(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& resp)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "handleAdBlockBackendCmd",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AdInfoManager_handleAdBlockBackendCmd);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), resp.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AdInfoManager_shallRequestAdblockInfo = 0;
static jboolean Java_AdInfoManager_shallRequestAdblockInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isProxy,
    jboolean isMiniQB)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "shallRequestAdblockInfo",
        "("
        "Ljava/lang/String;"
        "Z"
        "Z"
        ")"
        "Z",
        &g_AdInfoManager_shallRequestAdblockInfo);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, url.obj(), isProxy, isMiniQB);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AdInfoManager_setAdInfoV_JLS_JLS_JLS_JLS_JLS = 0;
static void Java_AdInfoManager_setAdInfoV_JLS_JLS_JLS_JLS_JLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& hiddenRules,
    const base::android::JavaRefOrBare<jstring>& filterRules,
    const base::android::JavaRefOrBare<jstring>& QProxyResp,
    const base::android::JavaRefOrBare<jstring>& scriptArguments)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "setAdInfo",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AdInfoManager_setAdInfoV_JLS_JLS_JLS_JLS_JLS);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), hiddenRules.obj(), filterRules.obj(),
        QProxyResp.obj(), scriptArguments.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AdInfoManager_setAdInfoV_JLS_JLS = 0;
static void Java_AdInfoManager_setAdInfoV_JLS_JLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& AdInfo)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "setAdInfo",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AdInfoManager_setAdInfoV_JLS_JLS);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), AdInfo.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AdInfoManager_getAdInfoRuleUrl = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AdInfoManager_getAdInfoRuleUrl(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "getAdInfoRuleUrl",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AdInfoManager_getAdInfoRuleUrl);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AdInfoManager_getAdInfoForFilterRules = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AdInfoManager_getAdInfoForFilterRules(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isPrefetchPage)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "getAdInfoForFilterRules",
        "("
        "Ljava/lang/String;"
        "Z"
        ")"
        "Ljava/lang/String;",
        &g_AdInfoManager_getAdInfoForFilterRules);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id, url.obj(), isPrefetchPage));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AdInfoManager_getAdInfoForHiddenRules = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AdInfoManager_getAdInfoForHiddenRules(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isPrefetchPage)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "getAdInfoForHiddenRules",
        "("
        "Ljava/lang/String;"
        "Z"
        ")"
        "Ljava/lang/String;",
        &g_AdInfoManager_getAdInfoForHiddenRules);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id, url.obj(), isPrefetchPage));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AdInfoManager_getAdFilterScriptArguments = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AdInfoManager_getAdFilterScriptArguments(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isPrefetchPage)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "getAdFilterScriptArguments",
        "("
        "Ljava/lang/String;"
        "Z"
        ")"
        "Ljava/lang/String;",
        &g_AdInfoManager_getAdFilterScriptArguments);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id, url.obj(), isPrefetchPage));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AdInfoManager_getAdFilterScriptTemplate = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AdInfoManager_getAdFilterScriptTemplate(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AdInfoManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AdInfoManager_clazz(env),
        "getAdFilterScriptTemplate",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AdInfoManager_getAdFilterScriptTemplate);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace tencent

#endif // com_tencent_smtt_webkit_AdInfoManager_JNI
