// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/PowerMonitor

#ifndef org_chromium_base_PowerMonitor_JNI
#define org_chromium_base_PowerMonitor_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPowerMonitorClassPath[] = "org/chromium/base/PowerMonitor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PowerMonitor_clazz __attribute__((unused)) = 0;
#define PowerMonitor_clazz(env) base::android::LazyGetClass(env, kPowerMonitorClassPath, &g_PowerMonitor_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static void OnBatteryChargingChanged(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_PowerMonitor_nativeOnBatteryChargingChanged(JNIEnv*
                                                                           env,
        jclass jcaller)
    {
        return OnBatteryChargingChanged(env, base::android::JavaParamRef<jclass>(env, jcaller));
    }

    static base::subtle::AtomicWord g_PowerMonitor_isBatteryPower = 0;
    static jboolean Java_PowerMonitor_isBatteryPower(JNIEnv* env)
    {
        CHECK_CLAZZ(env, PowerMonitor_clazz(env),
            PowerMonitor_clazz(env), false);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, PowerMonitor_clazz(env),
            "isBatteryPower",
            "("
            ")"
            "Z",
            &g_PowerMonitor_isBatteryPower);

        jboolean ret = env->CallStaticBooleanMethod(PowerMonitor_clazz(env),
            method_id);
        jni_generator::CheckException(env);
        return ret;
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsPowerMonitor[] = {
        { "nativeOnBatteryChargingChanged",
            "("
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_PowerMonitor_nativeOnBatteryChargingChanged) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsPowerMonitorSize = arraysize(kMethodsPowerMonitor);

        if (env->RegisterNatives(PowerMonitor_clazz(env),
                kMethodsPowerMonitor,
                kMethodsPowerMonitorSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, PowerMonitor_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_PowerMonitor_JNI
