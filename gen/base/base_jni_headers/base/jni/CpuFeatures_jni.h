// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/CpuFeatures

#ifndef org_chromium_base_CpuFeatures_JNI
#define org_chromium_base_CpuFeatures_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCpuFeaturesClassPath[] = "org/chromium/base/CpuFeatures";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CpuFeatures_clazz __attribute__((unused)) = 0;
#define CpuFeatures_clazz(env) base::android::LazyGetClass(env, kCpuFeaturesClassPath, &g_CpuFeatures_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static jint GetCoreCount(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_base_CpuFeatures_nativeGetCoreCount(JNIEnv* env, jclass jcaller)
    {
        return GetCoreCount(env, base::android::JavaParamRef<jclass>(env, jcaller));
    }

    static jlong GetCpuFeatures(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

    JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_CpuFeatures_nativeGetCpuFeatures(JNIEnv* env, jclass jcaller)
    {
        return GetCpuFeatures(env, base::android::JavaParamRef<jclass>(env, jcaller));
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsCpuFeatures[] = {
        { "nativeGetCoreCount",
            "("
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_base_CpuFeatures_nativeGetCoreCount) },
        { "nativeGetCpuFeatures",
            "("
            ")"
            "J",
            reinterpret_cast<void*>(Java_org_chromium_base_CpuFeatures_nativeGetCpuFeatures) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsCpuFeaturesSize = arraysize(kMethodsCpuFeatures);

        if (env->RegisterNatives(CpuFeatures_clazz(env),
                kMethodsCpuFeatures,
                kMethodsCpuFeaturesSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, CpuFeatures_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_CpuFeatures_JNI
