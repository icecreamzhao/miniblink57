// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/ImportantFileWriterAndroid

#ifndef org_chromium_base_ImportantFileWriterAndroid_JNI
#define org_chromium_base_ImportantFileWriterAndroid_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kImportantFileWriterAndroidClassPath[] = "org/chromium/base/ImportantFileWriterAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ImportantFileWriterAndroid_clazz
    __attribute__((unused))
    = 0;
#define ImportantFileWriterAndroid_clazz(env) base::android::LazyGetClass(env, kImportantFileWriterAndroidClassPath, &g_ImportantFileWriterAndroid_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static jboolean WriteFileAtomically(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
        const base::android::JavaParamRef<jstring>& fileName,
        const base::android::JavaParamRef<jbyteArray>& data);

    JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_ImportantFileWriterAndroid_nativeWriteFileAtomically(JNIEnv*
                                                                                    env,
        jclass jcaller,
        jstring fileName,
        jbyteArray data)
    {
        return WriteFileAtomically(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, fileName),
            base::android::JavaParamRef<jbyteArray>(env, data));
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsImportantFileWriterAndroid[] = {
        { "nativeWriteFileAtomically",
            "("
            "Ljava/lang/String;"
            "[B"
            ")"
            "Z",
            reinterpret_cast<void*>(Java_org_chromium_base_ImportantFileWriterAndroid_nativeWriteFileAtomically) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsImportantFileWriterAndroidSize = arraysize(kMethodsImportantFileWriterAndroid);

        if (env->RegisterNatives(ImportantFileWriterAndroid_clazz(env),
                kMethodsImportantFileWriterAndroid,
                kMethodsImportantFileWriterAndroidSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, ImportantFileWriterAndroid_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_ImportantFileWriterAndroid_JNI
