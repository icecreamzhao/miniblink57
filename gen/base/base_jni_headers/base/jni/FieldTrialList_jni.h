// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/FieldTrialList

#ifndef org_chromium_base_FieldTrialList_JNI
#define org_chromium_base_FieldTrialList_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kFieldTrialListClassPath[] = "org/chromium/base/FieldTrialList";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_FieldTrialList_clazz __attribute__((unused)) = 0;
#define FieldTrialList_clazz(env) base::android::LazyGetClass(env, kFieldTrialListClassPath, &g_FieldTrialList_clazz)

} // namespace

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jstring> FindFullName(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName);

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_base_FieldTrialList_nativeFindFullName(JNIEnv* env, jclass jcaller,
    jstring trialName)
{
    return FindFullName(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, trialName))
        .Release();
}

static jboolean TrialExists(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_base_FieldTrialList_nativeTrialExists(JNIEnv* env, jclass jcaller,
    jstring trialName)
{
    return TrialExists(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, trialName));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsFieldTrialList[] = {
    { "nativeFindFullName",
        "("
        "Ljava/lang/String;"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_base_FieldTrialList_nativeFindFullName) },
    { "nativeTrialExists",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_base_FieldTrialList_nativeTrialExists) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsFieldTrialListSize = arraysize(kMethodsFieldTrialList);

    if (env->RegisterNatives(FieldTrialList_clazz(env),
            kMethodsFieldTrialList,
            kMethodsFieldTrialListSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, FieldTrialList_clazz(env), __FILE__);
        return false;
    }

    return true;
}

#endif // org_chromium_base_FieldTrialList_JNI
