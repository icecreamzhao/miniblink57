// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/ApplicationStatus

#ifndef org_chromium_base_ApplicationStatus_JNI
#define org_chromium_base_ApplicationStatus_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kApplicationStatusClassPath[] = "org/chromium/base/ApplicationStatus";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ApplicationStatus_clazz __attribute__((unused)) = 0;
#define ApplicationStatus_clazz(env) base::android::LazyGetClass(env, kApplicationStatusClassPath, &g_ApplicationStatus_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static void OnApplicationStateChange(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
        jint newState);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_ApplicationStatus_nativeOnApplicationStateChange(JNIEnv*
                                                                                env,
        jclass jcaller,
        jint newState)
    {
        return OnApplicationStateChange(env, base::android::JavaParamRef<jclass>(env, jcaller), newState);
    }

    static base::subtle::AtomicWord g_ApplicationStatus_getStateForApplication = 0;
    static jint Java_ApplicationStatus_getStateForApplication(JNIEnv* env)
    {
        CHECK_CLAZZ(env, ApplicationStatus_clazz(env),
            ApplicationStatus_clazz(env), 0);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, ApplicationStatus_clazz(env),
            "getStateForApplication",
            "("
            ")"
            "I",
            &g_ApplicationStatus_getStateForApplication);

        jint ret = env->CallStaticIntMethod(ApplicationStatus_clazz(env),
            method_id);
        jni_generator::CheckException(env);
        return ret;
    }

    static base::subtle::AtomicWord
        g_ApplicationStatus_registerThreadSafeNativeApplicationStateListener
        = 0;
    static void
    Java_ApplicationStatus_registerThreadSafeNativeApplicationStateListener(JNIEnv*
            env)
    {
        CHECK_CLAZZ(env, ApplicationStatus_clazz(env),
            ApplicationStatus_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, ApplicationStatus_clazz(env),
            "registerThreadSafeNativeApplicationStateListener",
            "("
            ")"
            "V",
            &g_ApplicationStatus_registerThreadSafeNativeApplicationStateListener);

        env->CallStaticVoidMethod(ApplicationStatus_clazz(env),
            method_id);
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsApplicationStatus[] = {
        { "nativeOnApplicationStateChange",
            "("
            "I"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_ApplicationStatus_nativeOnApplicationStateChange) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsApplicationStatusSize = arraysize(kMethodsApplicationStatus);

        if (env->RegisterNatives(ApplicationStatus_clazz(env),
                kMethodsApplicationStatus,
                kMethodsApplicationStatusSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, ApplicationStatus_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_ApplicationStatus_JNI
