// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/CommandLine

#ifndef org_chromium_base_CommandLine_JNI
#define org_chromium_base_CommandLine_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCommandLineClassPath[] = "org/chromium/base/CommandLine";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CommandLine_clazz __attribute__((unused)) = 0;
#define CommandLine_clazz(env) base::android::LazyGetClass(env, kCommandLineClassPath, &g_CommandLine_clazz)

} // namespace

// Step 2: method stubs.

static void Reset(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void Java_org_chromium_base_CommandLine_nativeReset(JNIEnv*
                                                                             env,
    jclass jcaller)
{
    return Reset(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static jboolean HasSwitch(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_base_CommandLine_nativeHasSwitch(JNIEnv* env, jclass jcaller,
    jstring switchString)
{
    return HasSwitch(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, switchString));
}

static base::android::ScopedJavaLocalRef<jstring> GetSwitchValue(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString);

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_base_CommandLine_nativeGetSwitchValue(JNIEnv* env, jclass jcaller,
    jstring switchString)
{
    return GetSwitchValue(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, switchString))
        .Release();
}

static void AppendSwitch(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString);

JNI_GENERATOR_EXPORT void
Java_org_chromium_base_CommandLine_nativeAppendSwitch(JNIEnv* env, jclass jcaller,
    jstring switchString)
{
    return AppendSwitch(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, switchString));
}

static void AppendSwitchWithValue(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString,
    const base::android::JavaParamRef<jstring>& value);

JNI_GENERATOR_EXPORT void
Java_org_chromium_base_CommandLine_nativeAppendSwitchWithValue(JNIEnv* env,
    jclass jcaller,
    jstring switchString,
    jstring value)
{
    return AppendSwitchWithValue(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, switchString),
        base::android::JavaParamRef<jstring>(env, value));
}

static void AppendSwitchesAndArguments(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobjectArray>& array);

JNI_GENERATOR_EXPORT void
Java_org_chromium_base_CommandLine_nativeAppendSwitchesAndArguments(JNIEnv*
                                                                        env,
    jclass jcaller,
    jobjectArray array)
{
    return AppendSwitchesAndArguments(env,
        base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jobjectArray>(env, array));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsCommandLine[] = {
    { "nativeReset",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_base_CommandLine_nativeReset) },
    { "nativeHasSwitch",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_base_CommandLine_nativeHasSwitch) },
    { "nativeGetSwitchValue",
        "("
        "Ljava/lang/String;"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_base_CommandLine_nativeGetSwitchValue) },
    { "nativeAppendSwitch",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_base_CommandLine_nativeAppendSwitch) },
    { "nativeAppendSwitchWithValue",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_base_CommandLine_nativeAppendSwitchWithValue) },
    { "nativeAppendSwitchesAndArguments",
        "("
        "[Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_base_CommandLine_nativeAppendSwitchesAndArguments) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsCommandLineSize = arraysize(kMethodsCommandLine);

    if (env->RegisterNatives(CommandLine_clazz(env),
            kMethodsCommandLine,
            kMethodsCommandLineSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, CommandLine_clazz(env), __FILE__);
        return false;
    }

    return true;
}

#endif // org_chromium_base_CommandLine_JNI
