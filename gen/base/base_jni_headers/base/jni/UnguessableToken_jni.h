// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/UnguessableToken

#ifndef org_chromium_base_UnguessableToken_JNI
#define org_chromium_base_UnguessableToken_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kUnguessableTokenClassPath[] = "org/chromium/base/UnguessableToken";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_UnguessableToken_clazz __attribute__((unused)) = 0;
#define UnguessableToken_clazz(env) base::android::LazyGetClass(env, kUnguessableTokenClassPath, &g_UnguessableToken_clazz)

} // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_UnguessableToken_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_UnguessableToken_create(JNIEnv* env, jlong high,
    jlong low)
{
    CHECK_CLAZZ(env, UnguessableToken_clazz(env),
        UnguessableToken_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, UnguessableToken_clazz(env),
        "create",
        "("
        "J"
        "J"
        ")"
        "Lorg/chromium/base/UnguessableToken;",
        &g_UnguessableToken_create);

    jobject ret = env->CallStaticObjectMethod(UnguessableToken_clazz(env),
        method_id, high, low);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_UnguessableToken_getHighForSerialization = 0;
static jlong Java_UnguessableToken_getHighForSerialization(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        UnguessableToken_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, UnguessableToken_clazz(env),
        "getHighForSerialization",
        "("
        ")"
        "J",
        &g_UnguessableToken_getHighForSerialization);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_UnguessableToken_getLowForSerialization = 0;
static jlong Java_UnguessableToken_getLowForSerialization(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        UnguessableToken_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, UnguessableToken_clazz(env),
        "getLowForSerialization",
        "("
        ")"
        "J",
        &g_UnguessableToken_getLowForSerialization);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_UnguessableToken_parcelAndUnparcelForTesting = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_UnguessableToken_parcelAndUnparcelForTesting(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        UnguessableToken_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, UnguessableToken_clazz(env),
        "parcelAndUnparcelForTesting",
        "("
        ")"
        "Lorg/chromium/base/UnguessableToken;",
        &g_UnguessableToken_parcelAndUnparcelForTesting);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

#endif // org_chromium_base_UnguessableToken_JNI
