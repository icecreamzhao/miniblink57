// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/EventLog

#ifndef org_chromium_base_EventLog_JNI
#define org_chromium_base_EventLog_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kEventLogClassPath[] = "org/chromium/base/EventLog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_EventLog_clazz __attribute__((unused)) = 0;
#define EventLog_clazz(env) base::android::LazyGetClass(env, kEventLogClassPath, &g_EventLog_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static base::subtle::AtomicWord g_EventLog_writeEvent = 0;
    static void Java_EventLog_writeEvent(JNIEnv* env, JniIntWrapper tag,
        JniIntWrapper value)
    {
        CHECK_CLAZZ(env, EventLog_clazz(env),
            EventLog_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, EventLog_clazz(env),
            "writeEvent",
            "("
            "I"
            "I"
            ")"
            "V",
            &g_EventLog_writeEvent);

        env->CallStaticVoidMethod(EventLog_clazz(env),
            method_id, as_jint(tag), as_jint(value));
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

} // namespace android
} // namespace base

#endif // org_chromium_base_EventLog_JNI
