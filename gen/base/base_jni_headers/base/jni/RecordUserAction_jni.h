// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/metrics/RecordUserAction

#ifndef org_chromium_base_metrics_RecordUserAction_JNI
#define org_chromium_base_metrics_RecordUserAction_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kRecordUserActionClassPath[] = "org/chromium/base/metrics/RecordUserAction";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_RecordUserAction_clazz __attribute__((unused)) = 0;
#define RecordUserAction_clazz(env) base::android::LazyGetClass(env, kRecordUserActionClassPath, &g_RecordUserAction_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static void RecordUserAction(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
        const base::android::JavaParamRef<jstring>& action);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_metrics_RecordUserAction_nativeRecordUserAction(JNIEnv*
                                                                               env,
        jclass jcaller,
        jstring action)
    {
        return RecordUserAction(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, action));
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsRecordUserAction[] = {
        { "nativeRecordUserAction",
            "("
            "Ljava/lang/String;"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_metrics_RecordUserAction_nativeRecordUserAction) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsRecordUserActionSize = arraysize(kMethodsRecordUserAction);

        if (env->RegisterNatives(RecordUserAction_clazz(env),
                kMethodsRecordUserAction,
                kMethodsRecordUserActionSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, RecordUserAction_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_metrics_RecordUserAction_JNI
