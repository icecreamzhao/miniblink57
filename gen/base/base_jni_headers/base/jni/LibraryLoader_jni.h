// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/library_loader/LibraryLoader

#ifndef org_chromium_base_library_loader_LibraryLoader_JNI
#define org_chromium_base_library_loader_LibraryLoader_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLibraryLoaderClassPath[] = "org/chromium/base/library_loader/LibraryLoader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LibraryLoader_clazz __attribute__((unused)) = 0;
#define LibraryLoader_clazz(env) base::android::LazyGetClass(env, kLibraryLoaderClassPath, &g_LibraryLoader_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.

    static void InitCommandLine(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        const base::android::JavaParamRef<jobjectArray>& initCommandLine);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeInitCommandLine(JNIEnv*
                                                                                   env,
        jobject jcaller,
        jobjectArray initCommandLine)
    {
        return InitCommandLine(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobjectArray>(env, initCommandLine));
    }

    static jboolean LibraryLoaded(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeLibraryLoaded(JNIEnv*
                                                                                 env,
        jobject jcaller)
    {
        return LibraryLoaded(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }

    static void RecordChromiumAndroidLinkerBrowserHistogram(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jboolean isUsingBrowserSharedRelros,
        jboolean loadAtFixedAddressFailed,
        jint libraryLoadFromApkStatus,
        jlong libraryLoadTime);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRecordChromiumAndroidLinkerBrowserHistogram(JNIEnv*
                                                                                                               env,
        jobject jcaller,
        jboolean isUsingBrowserSharedRelros,
        jboolean loadAtFixedAddressFailed,
        jint libraryLoadFromApkStatus,
        jlong libraryLoadTime)
    {
        return RecordChromiumAndroidLinkerBrowserHistogram(env,
            base::android::JavaParamRef<jobject>(env, jcaller),
            isUsingBrowserSharedRelros, loadAtFixedAddressFailed,
            libraryLoadFromApkStatus, libraryLoadTime);
    }

    static void RecordLibraryPreloaderBrowserHistogram(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint status);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRecordLibraryPreloaderBrowserHistogram(JNIEnv*
                                                                                                          env,
        jobject jcaller,
        jint status)
    {
        return RecordLibraryPreloaderBrowserHistogram(env,
            base::android::JavaParamRef<jobject>(env, jcaller), status);
    }

    static void RegisterChromiumAndroidLinkerRendererHistogram(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jboolean requestedSharedRelro,
        jboolean loadAtFixedAddressFailed,
        jlong libraryLoadTime);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRegisterChromiumAndroidLinkerRendererHistogram(JNIEnv*
                                                                                                                  env,
        jobject jcaller,
        jboolean requestedSharedRelro,
        jboolean loadAtFixedAddressFailed,
        jlong libraryLoadTime)
    {
        return RegisterChromiumAndroidLinkerRendererHistogram(env,
            base::android::JavaParamRef<jobject>(env, jcaller), requestedSharedRelro,
            loadAtFixedAddressFailed, libraryLoadTime);
    }

    static void RegisterLibraryPreloaderRendererHistogram(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
        jint status);

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRegisterLibraryPreloaderRendererHistogram(JNIEnv*
                                                                                                             env,
        jobject jcaller,
        jint status)
    {
        return RegisterLibraryPreloaderRendererHistogram(env,
            base::android::JavaParamRef<jobject>(env, jcaller), status);
    }

    static base::android::ScopedJavaLocalRef<jstring> GetVersionNumber(JNIEnv* env,
        const base::android::JavaParamRef<jobject>& jcaller);

    JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeGetVersionNumber(JNIEnv*
                                                                                    env,
        jobject jcaller)
    {
        return GetVersionNumber(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
    }

    static jboolean ForkAndPrefetchNativeLibrary(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

    JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeForkAndPrefetchNativeLibrary(JNIEnv*
                                                                                                env,
        jclass jcaller)
    {
        return ForkAndPrefetchNativeLibrary(env,
            base::android::JavaParamRef<jclass>(env, jcaller));
    }

    static jint PercentageOfResidentNativeLibraryCode(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

    JNI_GENERATOR_EXPORT jint
    Java_org_chromium_base_library_1loader_LibraryLoader_nativePercentageOfResidentNativeLibraryCode(JNIEnv*
                                                                                                         env,
        jclass jcaller)
    {
        return PercentageOfResidentNativeLibraryCode(env,
            base::android::JavaParamRef<jclass>(env, jcaller));
    }

    static base::subtle::AtomicWord g_LibraryLoader_getLibraryProcessType = 0;
    static jint Java_LibraryLoader_getLibraryProcessType(JNIEnv* env)
    {
        CHECK_CLAZZ(env, LibraryLoader_clazz(env),
            LibraryLoader_clazz(env), 0);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, LibraryLoader_clazz(env),
            "getLibraryProcessType",
            "("
            ")"
            "I",
            &g_LibraryLoader_getLibraryProcessType);

        jint ret = env->CallStaticIntMethod(LibraryLoader_clazz(env),
            method_id);
        jni_generator::CheckException(env);
        return ret;
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsLibraryLoader[] = {
        { "nativeInitCommandLine",
            "("
            "[Ljava/lang/String;"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeInitCommandLine) },
        { "nativeLibraryLoaded",
            "("
            ")"
            "Z",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeLibraryLoaded) },
        { "nativeRecordChromiumAndroidLinkerBrowserHistogram",
            "("
            "Z"
            "Z"
            "I"
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeRecordChromiumAndroidLinkerBrowserHistogram) },
        { "nativeRecordLibraryPreloaderBrowserHistogram",
            "("
            "I"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeRecordLibraryPreloaderBrowserHistogram) },
        { "nativeRegisterChromiumAndroidLinkerRendererHistogram",
            "("
            "Z"
            "Z"
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeRegisterChromiumAndroidLinkerRendererHistogram) },
        { "nativeRegisterLibraryPreloaderRendererHistogram",
            "("
            "I"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeRegisterLibraryPreloaderRendererHistogram) },
        { "nativeGetVersionNumber",
            "("
            ")"
            "Ljava/lang/String;",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeGetVersionNumber) },
        { "nativeForkAndPrefetchNativeLibrary",
            "("
            ")"
            "Z",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativeForkAndPrefetchNativeLibrary) },
        { "nativePercentageOfResidentNativeLibraryCode",
            "("
            ")"
            "I",
            reinterpret_cast<void*>(Java_org_chromium_base_library_1loader_LibraryLoader_nativePercentageOfResidentNativeLibraryCode) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsLibraryLoaderSize = arraysize(kMethodsLibraryLoader);

        if (env->RegisterNatives(LibraryLoader_clazz(env),
                kMethodsLibraryLoader,
                kMethodsLibraryLoaderSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, LibraryLoader_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_library_loader_LibraryLoader_JNI
