// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/BuildInfo

#ifndef org_chromium_base_BuildInfo_JNI
#define org_chromium_base_BuildInfo_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kBuildInfoClassPath[] = "org/chromium/base/BuildInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_BuildInfo_clazz __attribute__((unused)) = 0;
#define BuildInfo_clazz(env) base::android::LazyGetClass(env, kBuildInfoClassPath, &g_BuildInfo_clazz)

} // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_BuildInfo_getDevice = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getDevice(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getDevice",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getDevice);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getBrand = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getBrand(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getBrand",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getBrand);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getAndroidBuildId = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getAndroidBuildId(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getAndroidBuildId",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getAndroidBuildId);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getAndroidBuildFingerprint = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getAndroidBuildFingerprint(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getAndroidBuildFingerprint",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getAndroidBuildFingerprint);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getDeviceManufacturer = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getDeviceManufacturer(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getDeviceManufacturer",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getDeviceManufacturer);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getDeviceModel = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getDeviceModel(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getDeviceModel",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getDeviceModel);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getGMSVersionCode = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getGMSVersionCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getGMSVersionCode",
        "("
        "Landroid/content/Context;"
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getGMSVersionCode);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id, context.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getPackageVersionCode = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getPackageVersionCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getPackageVersionCode",
        "("
        "Landroid/content/Context;"
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getPackageVersionCode);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id, context.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getPackageVersionName = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getPackageVersionName(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getPackageVersionName",
        "("
        "Landroid/content/Context;"
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getPackageVersionName);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id, context.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getPackageLabel = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getPackageLabel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getPackageLabel",
        "("
        "Landroid/content/Context;"
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getPackageLabel);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id, context.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getPackageName = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getPackageName(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getPackageName",
        "("
        "Landroid/content/Context;"
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getPackageName);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id, context.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getBuildType = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_BuildInfo_getBuildType(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getBuildType",
        "("
        ")"
        "Ljava/lang/String;",
        &g_BuildInfo_getBuildType);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(BuildInfo_clazz(env),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_BuildInfo_getSdkInt = 0;
static jint Java_BuildInfo_getSdkInt(JNIEnv* env)
{
    CHECK_CLAZZ(env, BuildInfo_clazz(env),
        BuildInfo_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BuildInfo_clazz(env),
        "getSdkInt",
        "("
        ")"
        "I",
        &g_BuildInfo_getSdkInt);

    jint ret = env->CallStaticIntMethod(BuildInfo_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

#endif // org_chromium_base_BuildInfo_JNI
