// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/JavaHandlerThread

#ifndef org_chromium_base_JavaHandlerThread_JNI
#define org_chromium_base_JavaHandlerThread_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kJavaHandlerThreadClassPath[] = "org/chromium/base/JavaHandlerThread";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_JavaHandlerThread_clazz __attribute__((unused)) = 0;
#define JavaHandlerThread_clazz(env) base::android::LazyGetClass(env, kJavaHandlerThreadClassPath, &g_JavaHandlerThread_clazz)

} // namespace

namespace base {
namespace android {

    // Step 2: method stubs.
    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_JavaHandlerThread_nativeInitializeThread(JNIEnv* env,
        jobject jcaller,
        jlong nativeJavaHandlerThread,
        jlong nativeEvent)
    {
        JavaHandlerThread* native = reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread);
        CHECK_NATIVE_PTR(env, jcaller, native, "InitializeThread");
        return native->InitializeThread(env, base::android::JavaParamRef<jobject>(env, jcaller), nativeEvent);
    }

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_JavaHandlerThread_nativeStopThread(JNIEnv* env,
        jobject jcaller,
        jlong nativeJavaHandlerThread,
        jlong nativeEvent)
    {
        JavaHandlerThread* native = reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread);
        CHECK_NATIVE_PTR(env, jcaller, native, "StopThread");
        return native->StopThread(env, base::android::JavaParamRef<jobject>(env, jcaller), nativeEvent);
    }

    static base::subtle::AtomicWord g_JavaHandlerThread_create = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_JavaHandlerThread_create(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& name)
    {
        CHECK_CLAZZ(env, JavaHandlerThread_clazz(env),
            JavaHandlerThread_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, JavaHandlerThread_clazz(env),
            "create",
            "("
            "Ljava/lang/String;"
            ")"
            "Lorg/chromium/base/JavaHandlerThread;",
            &g_JavaHandlerThread_create);

        jobject ret = env->CallStaticObjectMethod(JavaHandlerThread_clazz(env),
            method_id, name.obj());
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_JavaHandlerThread_start = 0;
    static void Java_JavaHandlerThread_start(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeThread,
        jlong nativeEvent)
    {
        CHECK_CLAZZ(env, obj.obj(),
            JavaHandlerThread_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_INSTANCE>(
            env, JavaHandlerThread_clazz(env),
            "start",
            "("
            "J"
            "J"
            ")"
            "V",
            &g_JavaHandlerThread_start);

        env->CallVoidMethod(obj.obj(),
            method_id, nativeThread, nativeEvent);
        jni_generator::CheckException(env);
    }

    static base::subtle::AtomicWord g_JavaHandlerThread_stop = 0;
    static void Java_JavaHandlerThread_stop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeThread,
        jlong nativeEvent)
    {
        CHECK_CLAZZ(env, obj.obj(),
            JavaHandlerThread_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_INSTANCE>(
            env, JavaHandlerThread_clazz(env),
            "stop",
            "("
            "J"
            "J"
            ")"
            "V",
            &g_JavaHandlerThread_stop);

        env->CallVoidMethod(obj.obj(),
            method_id, nativeThread, nativeEvent);
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsJavaHandlerThread[] = {
        { "nativeInitializeThread",
            "("
            "J"
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_JavaHandlerThread_nativeInitializeThread) },
        { "nativeStopThread",
            "("
            "J"
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_base_JavaHandlerThread_nativeStopThread) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsJavaHandlerThreadSize = arraysize(kMethodsJavaHandlerThread);

        if (env->RegisterNatives(JavaHandlerThread_clazz(env),
                kMethodsJavaHandlerThread,
                kMethodsJavaHandlerThreadSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, JavaHandlerThread_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace base

#endif // org_chromium_base_JavaHandlerThread_JNI
