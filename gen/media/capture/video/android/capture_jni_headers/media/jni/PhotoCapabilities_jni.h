// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/PhotoCapabilities

#ifndef org_chromium_media_PhotoCapabilities_JNI
#define org_chromium_media_PhotoCapabilities_JNI

#include <jni.h>

#include "../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPhotoCapabilitiesClassPath[] = "org/chromium/media/PhotoCapabilities";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PhotoCapabilities_clazz __attribute__((unused)) = 0;
#define PhotoCapabilities_clazz(env) base::android::LazyGetClass(env, kPhotoCapabilitiesClassPath, &g_PhotoCapabilities_clazz)

} // namespace

namespace media {

// Step 2: method stubs.

static base::subtle::AtomicWord g_PhotoCapabilities_getMinIso = 0;
static jint Java_PhotoCapabilities_getMinIso(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMinIso",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMinIso);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMaxIso = 0;
static jint Java_PhotoCapabilities_getMaxIso(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMaxIso",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMaxIso);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getCurrentIso = 0;
static jint Java_PhotoCapabilities_getCurrentIso(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getCurrentIso",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getCurrentIso);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getStepIso = 0;
static jint Java_PhotoCapabilities_getStepIso(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getStepIso",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getStepIso);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMinHeight = 0;
static jint Java_PhotoCapabilities_getMinHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMinHeight",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMinHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMaxHeight = 0;
static jint Java_PhotoCapabilities_getMaxHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMaxHeight",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMaxHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getCurrentHeight = 0;
static jint Java_PhotoCapabilities_getCurrentHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getCurrentHeight",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getCurrentHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getStepHeight = 0;
static jint Java_PhotoCapabilities_getStepHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getStepHeight",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getStepHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMinWidth = 0;
static jint Java_PhotoCapabilities_getMinWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMinWidth",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMinWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMaxWidth = 0;
static jint Java_PhotoCapabilities_getMaxWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMaxWidth",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMaxWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getCurrentWidth = 0;
static jint Java_PhotoCapabilities_getCurrentWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getCurrentWidth",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getCurrentWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getStepWidth = 0;
static jint Java_PhotoCapabilities_getStepWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getStepWidth",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getStepWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMinZoom = 0;
static jdouble Java_PhotoCapabilities_getMinZoom(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMinZoom",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getMinZoom);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMaxZoom = 0;
static jdouble Java_PhotoCapabilities_getMaxZoom(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMaxZoom",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getMaxZoom);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getCurrentZoom = 0;
static jdouble Java_PhotoCapabilities_getCurrentZoom(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getCurrentZoom",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getCurrentZoom);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getStepZoom = 0;
static jdouble Java_PhotoCapabilities_getStepZoom(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getStepZoom",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getStepZoom);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getFocusMode = 0;
static jint Java_PhotoCapabilities_getFocusMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getFocusMode",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getFocusMode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getExposureMode = 0;
static jint Java_PhotoCapabilities_getExposureMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getExposureMode",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getExposureMode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMinExposureCompensation = 0;
static jdouble Java_PhotoCapabilities_getMinExposureCompensation(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMinExposureCompensation",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getMinExposureCompensation);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMaxExposureCompensation = 0;
static jdouble Java_PhotoCapabilities_getMaxExposureCompensation(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMaxExposureCompensation",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getMaxExposureCompensation);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_PhotoCapabilities_getCurrentExposureCompensation
    = 0;
static jdouble Java_PhotoCapabilities_getCurrentExposureCompensation(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getCurrentExposureCompensation",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getCurrentExposureCompensation);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getStepExposureCompensation
    = 0;
static jdouble Java_PhotoCapabilities_getStepExposureCompensation(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getStepExposureCompensation",
        "("
        ")"
        "D",
        &g_PhotoCapabilities_getStepExposureCompensation);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getWhiteBalanceMode = 0;
static jint Java_PhotoCapabilities_getWhiteBalanceMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getWhiteBalanceMode",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getWhiteBalanceMode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getFillLightMode = 0;
static jint Java_PhotoCapabilities_getFillLightMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getFillLightMode",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getFillLightMode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getRedEyeReduction = 0;
static jboolean Java_PhotoCapabilities_getRedEyeReduction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getRedEyeReduction",
        "("
        ")"
        "Z",
        &g_PhotoCapabilities_getRedEyeReduction);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMinColorTemperature = 0;
static jint Java_PhotoCapabilities_getMinColorTemperature(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMinColorTemperature",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMinColorTemperature);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getMaxColorTemperature = 0;
static jint Java_PhotoCapabilities_getMaxColorTemperature(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getMaxColorTemperature",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getMaxColorTemperature);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getCurrentColorTemperature = 0;
static jint Java_PhotoCapabilities_getCurrentColorTemperature(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getCurrentColorTemperature",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getCurrentColorTemperature);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PhotoCapabilities_getStepColorTemperature = 0;
static jint Java_PhotoCapabilities_getStepColorTemperature(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PhotoCapabilities_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PhotoCapabilities_clazz(env),
        "getStepColorTemperature",
        "("
        ")"
        "I",
        &g_PhotoCapabilities_getStepColorTemperature);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

} // namespace media

#endif // org_chromium_media_PhotoCapabilities_JNI
