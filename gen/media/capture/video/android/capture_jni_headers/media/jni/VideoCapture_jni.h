// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/VideoCapture

#ifndef org_chromium_media_VideoCapture_JNI
#define org_chromium_media_VideoCapture_JNI

#include <jni.h>

#include "../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kVideoCaptureClassPath[] = "org/chromium/media/VideoCapture";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_VideoCapture_clazz __attribute__((unused)) = 0;
#define VideoCapture_clazz(env) base::android::LazyGetClass(env, kVideoCaptureClassPath, &g_VideoCapture_clazz)

} // namespace

namespace media {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_media_VideoCapture_nativeOnFrameAvailable(JNIEnv* env,
    jobject jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jbyteArray data,
    jint length,
    jint rotation)
{
    VideoCaptureDeviceAndroid* native = reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnFrameAvailable");
    return native->OnFrameAvailable(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jbyteArray>(env, data), length,
        rotation);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_VideoCapture_nativeOnI420FrameAvailable(JNIEnv* env,
    jobject jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jobject yBuffer,
    jint yStride,
    jobject uBuffer,
    jobject vBuffer,
    jint uvRowStride,
    jint uvPixelStride,
    jint width,
    jint height,
    jint rotation,
    jlong timestamp)
{
    VideoCaptureDeviceAndroid* native = reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnI420FrameAvailable");
    return native->OnI420FrameAvailable(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, yBuffer), yStride,
        base::android::JavaParamRef<jobject>(env, uBuffer),
        base::android::JavaParamRef<jobject>(env, vBuffer), uvRowStride,
        uvPixelStride, width, height, rotation, timestamp);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_VideoCapture_nativeOnError(JNIEnv* env, jobject jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jstring message)
{
    VideoCaptureDeviceAndroid* native = reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnError");
    return native->OnError(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, message));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_VideoCapture_nativeOnPhotoTaken(JNIEnv* env, jobject jcaller,
    jlong nativeVideoCaptureDeviceAndroid,
    jlong callbackId,
    jbyteArray data)
{
    VideoCaptureDeviceAndroid* native = reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnPhotoTaken");
    return native->OnPhotoTaken(env, base::android::JavaParamRef<jobject>(env, jcaller), callbackId, base::android::JavaParamRef<jbyteArray>(env, data));
}

static base::subtle::AtomicWord g_VideoCapture_allocate = 0;
static jboolean Java_VideoCapture_allocate(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper frameRate)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "allocate",
        "("
        "I"
        "I"
        "I"
        ")"
        "Z",
        &g_VideoCapture_allocate);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(width), as_jint(height), as_jint(frameRate));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_startCapture = 0;
static jboolean Java_VideoCapture_startCapture(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "startCapture",
        "("
        ")"
        "Z",
        &g_VideoCapture_startCapture);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_stopCapture = 0;
static jboolean Java_VideoCapture_stopCapture(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "stopCapture",
        "("
        ")"
        "Z",
        &g_VideoCapture_stopCapture);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_getPhotoCapabilities = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_VideoCapture_getPhotoCapabilities(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "getPhotoCapabilities",
        "("
        ")"
        "Lorg/chromium/media/PhotoCapabilities;",
        &g_VideoCapture_getPhotoCapabilities);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_VideoCapture_setPhotoOptions = 0;
static void Java_VideoCapture_setPhotoOptions(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jdouble zoom,
    JniIntWrapper focusMode,
    JniIntWrapper exposureMode,
    jdouble width,
    jdouble height,
    const base::android::JavaRefOrBare<jfloatArray>& pointsOfInterest2D,
    jboolean hasExposureCompensation,
    jdouble exposureCompensation,
    JniIntWrapper whiteBalanceMode,
    jdouble iso,
    jboolean hasRedEyeReduction,
    jboolean redEyeReduction,
    JniIntWrapper fillLightMode,
    jdouble colorTemperature)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "setPhotoOptions",
        "("
        "D"
        "I"
        "I"
        "D"
        "D"
        "[F"
        "Z"
        "D"
        "I"
        "D"
        "Z"
        "Z"
        "I"
        "D"
        ")"
        "V",
        &g_VideoCapture_setPhotoOptions);

    env->CallVoidMethod(obj.obj(),
        method_id, zoom, as_jint(focusMode), as_jint(exposureMode), width,
        height, pointsOfInterest2D.obj(), hasExposureCompensation,
        exposureCompensation, as_jint(whiteBalanceMode), iso,
        hasRedEyeReduction, redEyeReduction, as_jint(fillLightMode),
        colorTemperature);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_VideoCapture_takePhoto = 0;
static jboolean Java_VideoCapture_takePhoto(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong callbackId)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "takePhoto",
        "("
        "J"
        ")"
        "Z",
        &g_VideoCapture_takePhoto);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, callbackId);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_deallocate = 0;
static void Java_VideoCapture_deallocate(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "deallocate",
        "("
        ")"
        "V",
        &g_VideoCapture_deallocate);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_VideoCapture_queryWidth = 0;
static jint Java_VideoCapture_queryWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "queryWidth",
        "("
        ")"
        "I",
        &g_VideoCapture_queryWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_queryHeight = 0;
static jint Java_VideoCapture_queryHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "queryHeight",
        "("
        ")"
        "I",
        &g_VideoCapture_queryHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_queryFrameRate = 0;
static jint Java_VideoCapture_queryFrameRate(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "queryFrameRate",
        "("
        ")"
        "I",
        &g_VideoCapture_queryFrameRate);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_getColorspace = 0;
static jint Java_VideoCapture_getColorspace(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "getColorspace",
        "("
        ")"
        "I",
        &g_VideoCapture_getColorspace);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_VideoCapture_setTestMode = 0;
static void Java_VideoCapture_setTestMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        VideoCapture_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, VideoCapture_clazz(env),
        "setTestMode",
        "("
        ")"
        "V",
        &g_VideoCapture_setTestMode);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsVideoCapture[] = {
    { "nativeOnFrameAvailable",
        "("
        "J"
        "[B"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_VideoCapture_nativeOnFrameAvailable) },
    { "nativeOnI420FrameAvailable",
        "("
        "J"
        "Ljava/nio/ByteBuffer;"
        "I"
        "Ljava/nio/ByteBuffer;"
        "Ljava/nio/ByteBuffer;"
        "I"
        "I"
        "I"
        "I"
        "I"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_VideoCapture_nativeOnI420FrameAvailable) },
    { "nativeOnError",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_VideoCapture_nativeOnError) },
    { "nativeOnPhotoTaken",
        "("
        "J"
        "J"
        "[B"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_VideoCapture_nativeOnPhotoTaken) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsVideoCaptureSize = arraysize(kMethodsVideoCapture);

    if (env->RegisterNatives(VideoCapture_clazz(env),
            kMethodsVideoCapture,
            kMethodsVideoCaptureSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, VideoCapture_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace media

#endif // org_chromium_media_VideoCapture_JNI
