// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaServerCrashListener

#ifndef org_chromium_media_MediaServerCrashListener_JNI
#define org_chromium_media_MediaServerCrashListener_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaServerCrashListenerClassPath[] = "org/chromium/media/MediaServerCrashListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaServerCrashListener_clazz
    __attribute__((unused))
    = 0;
#define MediaServerCrashListener_clazz(env) base::android::LazyGetClass(env, kMediaServerCrashListenerClassPath, &g_MediaServerCrashListener_clazz)

} // namespace

namespace media {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaServerCrashListener_nativeOnMediaServerCrashDetected(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeMediaServerCrashListener,
    jboolean watchdogNeedsRelease)
{
    MediaServerCrashListener* native = reinterpret_cast<MediaServerCrashListener*>(nativeMediaServerCrashListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaServerCrashDetected");
    return native->OnMediaServerCrashDetected(env,
        base::android::JavaParamRef<jobject>(env, jcaller), watchdogNeedsRelease);
}

static base::subtle::AtomicWord g_MediaServerCrashListener_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_MediaServerCrashListener_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context,
    jlong nativeMediaServerCrashListener)
{
    CHECK_CLAZZ(env, MediaServerCrashListener_clazz(env),
        MediaServerCrashListener_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MediaServerCrashListener_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        "J"
        ")"
        "Lorg/chromium/media/MediaServerCrashListener;",
        &g_MediaServerCrashListener_create);

    jobject ret = env->CallStaticObjectMethod(MediaServerCrashListener_clazz(env),
        method_id, context.obj(), nativeMediaServerCrashListener);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaServerCrashListener_releaseWatchdog = 0;
static void Java_MediaServerCrashListener_releaseWatchdog(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaServerCrashListener_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaServerCrashListener_clazz(env),
        "releaseWatchdog",
        "("
        ")"
        "V",
        &g_MediaServerCrashListener_releaseWatchdog);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MediaServerCrashListener_startListening = 0;
static jboolean Java_MediaServerCrashListener_startListening(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaServerCrashListener_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaServerCrashListener_clazz(env),
        "startListening",
        "("
        ")"
        "Z",
        &g_MediaServerCrashListener_startListening);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMediaServerCrashListener[] = {
    { "nativeOnMediaServerCrashDetected",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaServerCrashListener_nativeOnMediaServerCrashDetected) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsMediaServerCrashListenerSize = arraysize(kMethodsMediaServerCrashListener);

    if (env->RegisterNatives(MediaServerCrashListener_clazz(env),
            kMethodsMediaServerCrashListener,
            kMethodsMediaServerCrashListenerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, MediaServerCrashListener_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace media

#endif // org_chromium_media_MediaServerCrashListener_JNI
