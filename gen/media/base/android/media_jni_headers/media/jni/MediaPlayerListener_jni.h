// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaPlayerListener

#ifndef org_chromium_media_MediaPlayerListener_JNI
#define org_chromium_media_MediaPlayerListener_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaPlayerListenerClassPath[] = "org/chromium/media/MediaPlayerListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaPlayerListener_clazz __attribute__((unused)) = 0;
#define MediaPlayerListener_clazz(env) base::android::LazyGetClass(env, kMediaPlayerListenerClassPath, &g_MediaPlayerListener_clazz)

} // namespace

namespace media {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnMediaError(JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaPlayerListener,
    jint errorType)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaError");
    return native->OnMediaError(env, base::android::JavaParamRef<jobject>(env, jcaller), errorType);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnVideoSizeChanged(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeMediaPlayerListener,
    jint width,
    jint height)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnVideoSizeChanged");
    return native->OnVideoSizeChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller), width, height);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnBufferingUpdate(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeMediaPlayerListener,
    jint percent)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnBufferingUpdate");
    return native->OnBufferingUpdate(env,
        base::android::JavaParamRef<jobject>(env, jcaller), percent);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnMediaPrepared(JNIEnv*
                                                                      env,
    jobject jcaller,
    jlong nativeMediaPlayerListener)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaPrepared");
    return native->OnMediaPrepared(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnPlaybackComplete(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeMediaPlayerListener)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnPlaybackComplete");
    return native->OnPlaybackComplete(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnSeekComplete(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeMediaPlayerListener)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnSeekComplete");
    return native->OnSeekComplete(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_MediaPlayerListener_nativeOnMediaInterrupted(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeMediaPlayerListener)
{
    MediaPlayerListener* native = reinterpret_cast<MediaPlayerListener*>(nativeMediaPlayerListener);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnMediaInterrupted");
    return native->OnMediaInterrupted(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_MediaPlayerListener_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_MediaPlayerListener_create(JNIEnv* env, jlong nativeMediaPlayerListener,
    const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jobject>& mediaPlayerBridge)
{
    CHECK_CLAZZ(env, MediaPlayerListener_clazz(env),
        MediaPlayerListener_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MediaPlayerListener_clazz(env),
        "create",
        "("
        "J"
        "Landroid/content/Context;"
        "Lorg/chromium/media/MediaPlayerBridge;"
        ")"
        "Lorg/chromium/media/MediaPlayerListener;",
        &g_MediaPlayerListener_create);

    jobject ret = env->CallStaticObjectMethod(MediaPlayerListener_clazz(env),
        method_id, nativeMediaPlayerListener, context.obj(),
        mediaPlayerBridge.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMediaPlayerListener[] = {
    { "nativeOnMediaError",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnMediaError) },
    { "nativeOnVideoSizeChanged",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnVideoSizeChanged) },
    { "nativeOnBufferingUpdate",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnBufferingUpdate) },
    { "nativeOnMediaPrepared",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnMediaPrepared) },
    { "nativeOnPlaybackComplete",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnPlaybackComplete) },
    { "nativeOnSeekComplete",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnSeekComplete) },
    { "nativeOnMediaInterrupted",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_MediaPlayerListener_nativeOnMediaInterrupted) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsMediaPlayerListenerSize = arraysize(kMethodsMediaPlayerListener);

    if (env->RegisterNatives(MediaPlayerListener_clazz(env),
            kMethodsMediaPlayerListener,
            kMethodsMediaPlayerListenerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, MediaPlayerListener_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace media

#endif // org_chromium_media_MediaPlayerListener_JNI
