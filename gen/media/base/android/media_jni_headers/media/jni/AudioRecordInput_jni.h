// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/AudioRecordInput

#ifndef org_chromium_media_AudioRecordInput_JNI
#define org_chromium_media_AudioRecordInput_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAudioRecordInputClassPath[] = "org/chromium/media/AudioRecordInput";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AudioRecordInput_clazz __attribute__((unused)) = 0;
#define AudioRecordInput_clazz(env) base::android::LazyGetClass(env, kAudioRecordInputClassPath, &g_AudioRecordInput_clazz)

} // namespace

namespace media {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_media_AudioRecordInput_nativeCacheDirectBufferAddress(JNIEnv*
                                                                            env,
    jobject jcaller,
    jlong nativeAudioRecordInputStream,
    jobject buffer)
{
    AudioRecordInputStream* native = reinterpret_cast<AudioRecordInputStream*>(nativeAudioRecordInputStream);
    CHECK_NATIVE_PTR(env, jcaller, native, "CacheDirectBufferAddress");
    return native->CacheDirectBufferAddress(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, buffer));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_media_AudioRecordInput_nativeOnData(JNIEnv* env, jobject jcaller,
    jlong nativeAudioRecordInputStream,
    jint size,
    jint hardwareDelayBytes)
{
    AudioRecordInputStream* native = reinterpret_cast<AudioRecordInputStream*>(nativeAudioRecordInputStream);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnData");
    return native->OnData(env, base::android::JavaParamRef<jobject>(env, jcaller),
        size, hardwareDelayBytes);
}

static base::subtle::AtomicWord g_AudioRecordInput_createAudioRecordInput = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AudioRecordInput_createAudioRecordInput(JNIEnv* env, jlong nativeAudioRecordInputStream,
    JniIntWrapper sampleRate,
    JniIntWrapper channels,
    JniIntWrapper bitsPerSample,
    JniIntWrapper bytesPerBuffer,
    jboolean usePlatformAEC)
{
    CHECK_CLAZZ(env, AudioRecordInput_clazz(env),
        AudioRecordInput_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AudioRecordInput_clazz(env),
        "createAudioRecordInput",
        "("
        "J"
        "I"
        "I"
        "I"
        "I"
        "Z"
        ")"
        "Lorg/chromium/media/AudioRecordInput;",
        &g_AudioRecordInput_createAudioRecordInput);

    jobject ret = env->CallStaticObjectMethod(AudioRecordInput_clazz(env),
        method_id, nativeAudioRecordInputStream, as_jint(sampleRate),
        as_jint(channels), as_jint(bitsPerSample),
        as_jint(bytesPerBuffer), usePlatformAEC);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AudioRecordInput_open = 0;
static jboolean Java_AudioRecordInput_open(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioRecordInput_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioRecordInput_clazz(env),
        "open",
        "("
        ")"
        "Z",
        &g_AudioRecordInput_open);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AudioRecordInput_start = 0;
static void Java_AudioRecordInput_start(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioRecordInput_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioRecordInput_clazz(env),
        "start",
        "("
        ")"
        "V",
        &g_AudioRecordInput_start);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AudioRecordInput_stop = 0;
static void Java_AudioRecordInput_stop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioRecordInput_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioRecordInput_clazz(env),
        "stop",
        "("
        ")"
        "V",
        &g_AudioRecordInput_stop);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AudioRecordInput_close = 0;
static void Java_AudioRecordInput_close(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioRecordInput_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioRecordInput_clazz(env),
        "close",
        "("
        ")"
        "V",
        &g_AudioRecordInput_close);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAudioRecordInput[] = {
    { "nativeCacheDirectBufferAddress",
        "("
        "J"
        "Ljava/nio/ByteBuffer;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_AudioRecordInput_nativeCacheDirectBufferAddress) },
    { "nativeOnData",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_media_AudioRecordInput_nativeOnData) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAudioRecordInputSize = arraysize(kMethodsAudioRecordInput);

    if (env->RegisterNatives(AudioRecordInput_clazz(env),
            kMethodsAudioRecordInput,
            kMethodsAudioRecordInputSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AudioRecordInput_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace media

#endif // org_chromium_media_AudioRecordInput_JNI
