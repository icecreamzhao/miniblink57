// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/UsbMidiDeviceFactoryAndroid

#ifndef org_chromium_midi_UsbMidiDeviceFactoryAndroid_JNI
#define org_chromium_midi_UsbMidiDeviceFactoryAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kUsbMidiDeviceFactoryAndroidClassPath[] = "org/chromium/midi/UsbMidiDeviceFactoryAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_UsbMidiDeviceFactoryAndroid_clazz
    __attribute__((unused))
    = 0;
#define UsbMidiDeviceFactoryAndroid_clazz(env) base::android::LazyGetClass(env, kUsbMidiDeviceFactoryAndroidClassPath, &g_UsbMidiDeviceFactoryAndroid_clazz)

} // namespace

namespace midi {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceRequestDone(JNIEnv*
                                                                                        env,
    jobject jcaller,
    jlong nativeUsbMidiDeviceFactoryAndroid,
    jobjectArray devices)
{
    UsbMidiDeviceFactoryAndroid* native = reinterpret_cast<UsbMidiDeviceFactoryAndroid*>(nativeUsbMidiDeviceFactoryAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnUsbMidiDeviceRequestDone");
    return native->OnUsbMidiDeviceRequestDone(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobjectArray>(env, devices));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceAttached(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeUsbMidiDeviceFactoryAndroid,
    jobject device)
{
    UsbMidiDeviceFactoryAndroid* native = reinterpret_cast<UsbMidiDeviceFactoryAndroid*>(nativeUsbMidiDeviceFactoryAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnUsbMidiDeviceAttached");
    return native->OnUsbMidiDeviceAttached(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, device));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceDetached(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeUsbMidiDeviceFactoryAndroid,
    jint index)
{
    UsbMidiDeviceFactoryAndroid* native = reinterpret_cast<UsbMidiDeviceFactoryAndroid*>(nativeUsbMidiDeviceFactoryAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnUsbMidiDeviceDetached");
    return native->OnUsbMidiDeviceDetached(env,
        base::android::JavaParamRef<jobject>(env, jcaller), index);
}

static base::subtle::AtomicWord g_UsbMidiDeviceFactoryAndroid_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_UsbMidiDeviceFactoryAndroid_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context,
    jlong nativePointer)
{
    CHECK_CLAZZ(env, UsbMidiDeviceFactoryAndroid_clazz(env),
        UsbMidiDeviceFactoryAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, UsbMidiDeviceFactoryAndroid_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        "J"
        ")"
        "Lorg/chromium/midi/UsbMidiDeviceFactoryAndroid;",
        &g_UsbMidiDeviceFactoryAndroid_create);

    jobject ret = env->CallStaticObjectMethod(UsbMidiDeviceFactoryAndroid_clazz(env),
        method_id, context.obj(), nativePointer);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_UsbMidiDeviceFactoryAndroid_enumerateDevices = 0;
static jboolean Java_UsbMidiDeviceFactoryAndroid_enumerateDevices(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, obj.obj(),
        UsbMidiDeviceFactoryAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, UsbMidiDeviceFactoryAndroid_clazz(env),
        "enumerateDevices",
        "("
        "Landroid/content/Context;"
        ")"
        "Z",
        &g_UsbMidiDeviceFactoryAndroid_enumerateDevices);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_UsbMidiDeviceFactoryAndroid_close = 0;
static void Java_UsbMidiDeviceFactoryAndroid_close(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, obj.obj(),
        UsbMidiDeviceFactoryAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, UsbMidiDeviceFactoryAndroid_clazz(env),
        "close",
        "("
        "Landroid/content/Context;"
        ")"
        "V",
        &g_UsbMidiDeviceFactoryAndroid_close);

    env->CallVoidMethod(obj.obj(),
        method_id, context.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsUsbMidiDeviceFactoryAndroid[] = {
    { "nativeOnUsbMidiDeviceRequestDone",
        "("
        "J"
        "[Ljava/lang/Object;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceRequestDone) },
    { "nativeOnUsbMidiDeviceAttached",
        "("
        "J"
        "Ljava/lang/Object;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceAttached) },
    { "nativeOnUsbMidiDeviceDetached",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_midi_UsbMidiDeviceFactoryAndroid_nativeOnUsbMidiDeviceDetached) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsUsbMidiDeviceFactoryAndroidSize = arraysize(kMethodsUsbMidiDeviceFactoryAndroid);

    if (env->RegisterNatives(UsbMidiDeviceFactoryAndroid_clazz(env),
            kMethodsUsbMidiDeviceFactoryAndroid,
            kMethodsUsbMidiDeviceFactoryAndroidSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, UsbMidiDeviceFactoryAndroid_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace midi

#endif // org_chromium_midi_UsbMidiDeviceFactoryAndroid_JNI
