// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/MidiOutputPortAndroid

#ifndef org_chromium_midi_MidiOutputPortAndroid_JNI
#define org_chromium_midi_MidiOutputPortAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMidiOutputPortAndroidClassPath[] = "org/chromium/midi/MidiOutputPortAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MidiOutputPortAndroid_clazz __attribute__((unused)) = 0;
#define MidiOutputPortAndroid_clazz(env) base::android::LazyGetClass(env, kMidiOutputPortAndroidClassPath, &g_MidiOutputPortAndroid_clazz)

} // namespace

namespace midi {

// Step 2: method stubs.

static base::subtle::AtomicWord g_MidiOutputPortAndroid_open = 0;
static jboolean Java_MidiOutputPortAndroid_open(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiOutputPortAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiOutputPortAndroid_clazz(env),
        "open",
        "("
        ")"
        "Z",
        &g_MidiOutputPortAndroid_open);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_MidiOutputPortAndroid_send = 0;
static void Java_MidiOutputPortAndroid_send(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jbyteArray>& bs)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiOutputPortAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiOutputPortAndroid_clazz(env),
        "send",
        "("
        "[B"
        ")"
        "V",
        &g_MidiOutputPortAndroid_send);

    env->CallVoidMethod(obj.obj(),
        method_id, bs.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MidiOutputPortAndroid_close = 0;
static void Java_MidiOutputPortAndroid_close(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiOutputPortAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiOutputPortAndroid_clazz(env),
        "close",
        "("
        ")"
        "V",
        &g_MidiOutputPortAndroid_close);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace midi

#endif // org_chromium_midi_MidiOutputPortAndroid_JNI
