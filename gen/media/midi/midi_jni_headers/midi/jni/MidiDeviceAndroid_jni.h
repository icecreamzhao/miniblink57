// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/MidiDeviceAndroid

#ifndef org_chromium_midi_MidiDeviceAndroid_JNI
#define org_chromium_midi_MidiDeviceAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMidiDeviceAndroidClassPath[] = "org/chromium/midi/MidiDeviceAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MidiDeviceAndroid_clazz __attribute__((unused)) = 0;
#define MidiDeviceAndroid_clazz(env) base::android::LazyGetClass(env, kMidiDeviceAndroidClassPath, &g_MidiDeviceAndroid_clazz)

} // namespace

namespace midi {

// Step 2: method stubs.

static base::subtle::AtomicWord g_MidiDeviceAndroid_getManufacturer = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_MidiDeviceAndroid_getManufacturer(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiDeviceAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiDeviceAndroid_clazz(env),
        "getManufacturer",
        "("
        ")"
        "Ljava/lang/String;",
        &g_MidiDeviceAndroid_getManufacturer);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_MidiDeviceAndroid_getProduct = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_MidiDeviceAndroid_getProduct(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiDeviceAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiDeviceAndroid_clazz(env),
        "getProduct",
        "("
        ")"
        "Ljava/lang/String;",
        &g_MidiDeviceAndroid_getProduct);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_MidiDeviceAndroid_getVersion = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_MidiDeviceAndroid_getVersion(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiDeviceAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiDeviceAndroid_clazz(env),
        "getVersion",
        "("
        ")"
        "Ljava/lang/String;",
        &g_MidiDeviceAndroid_getVersion);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_MidiDeviceAndroid_getInputPorts = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_MidiDeviceAndroid_getInputPorts(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiDeviceAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiDeviceAndroid_clazz(env),
        "getInputPorts",
        "("
        ")"
        "[Lorg/chromium/midi/MidiInputPortAndroid;",
        &g_MidiDeviceAndroid_getInputPorts);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_MidiDeviceAndroid_getOutputPorts = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_MidiDeviceAndroid_getOutputPorts(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiDeviceAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiDeviceAndroid_clazz(env),
        "getOutputPorts",
        "("
        ")"
        "[Lorg/chromium/midi/MidiOutputPortAndroid;",
        &g_MidiDeviceAndroid_getOutputPorts);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace midi

#endif // org_chromium_midi_MidiDeviceAndroid_JNI
