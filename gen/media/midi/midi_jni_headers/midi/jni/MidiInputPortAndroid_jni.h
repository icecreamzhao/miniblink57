// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/midi/MidiInputPortAndroid

#ifndef org_chromium_midi_MidiInputPortAndroid_JNI
#define org_chromium_midi_MidiInputPortAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMidiInputPortAndroidClassPath[] = "org/chromium/midi/MidiInputPortAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MidiInputPortAndroid_clazz __attribute__((unused)) = 0;
#define MidiInputPortAndroid_clazz(env) base::android::LazyGetClass(env, kMidiInputPortAndroidClassPath, &g_MidiInputPortAndroid_clazz)

} // namespace

namespace midi {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_midi_MidiInputPortAndroid_nativeOnData(JNIEnv* env,
    jobject jcaller,
    jlong nativeMidiInputPortAndroid,
    jbyteArray bs,
    jint offset,
    jint count,
    jlong timestamp)
{
    MidiInputPortAndroid* native = reinterpret_cast<MidiInputPortAndroid*>(nativeMidiInputPortAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnData");
    return native->OnData(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jbyteArray>(env, bs), offset, count,
        timestamp);
}

static base::subtle::AtomicWord g_MidiInputPortAndroid_open = 0;
static jboolean Java_MidiInputPortAndroid_open(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeReceiverPointer)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiInputPortAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiInputPortAndroid_clazz(env),
        "open",
        "("
        "J"
        ")"
        "Z",
        &g_MidiInputPortAndroid_open);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, nativeReceiverPointer);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_MidiInputPortAndroid_close = 0;
static void Java_MidiInputPortAndroid_close(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MidiInputPortAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MidiInputPortAndroid_clazz(env),
        "close",
        "("
        ")"
        "V",
        &g_MidiInputPortAndroid_close);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMidiInputPortAndroid[] = {
    { "nativeOnData",
        "("
        "J"
        "[B"
        "I"
        "I"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_midi_MidiInputPortAndroid_nativeOnData) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsMidiInputPortAndroidSize = arraysize(kMethodsMidiInputPortAndroid);

    if (env->RegisterNatives(MidiInputPortAndroid_clazz(env),
            kMethodsMidiInputPortAndroid,
            kMethodsMidiInputPortAndroidSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, MidiInputPortAndroid_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace midi

#endif // org_chromium_midi_MidiInputPortAndroid_JNI
