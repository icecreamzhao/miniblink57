// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace ipc {
namespace invalidation {

    void protobuf_ShutdownFile_types_2eproto()
    {
        delete ClientType::default_instance_;
        delete ObjectSource::default_instance_;
        delete Constants::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_types_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_types_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        ClientType::default_instance_ = new ClientType();
        ObjectSource::default_instance_ = new ObjectSource();
        Constants::default_instance_ = new Constants();
        ClientType::default_instance_->InitAsDefaultInstance();
        ObjectSource::default_instance_->InitAsDefaultInstance();
        Constants::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_types_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_types_2eproto_once_);
    void protobuf_AddDesc_types_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_types_2eproto_once_,
            &protobuf_AddDesc_types_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_types_2eproto {
        StaticDescriptorInitializer_types_2eproto()
        {
            protobuf_AddDesc_types_2eproto();
        }
    } static_descriptor_initializer_types_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForClientType(
        ClientType* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    bool ClientType_Type_IsValid(int value)
    {
        switch (value) {
        case 1:
        case 2:
        case 4:
        case 1004:
        case 1018:
        case 1038:
        case 1055:
        case 1056:
            return true;
        default:
            return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const ClientType_Type ClientType::INTERNAL;
    const ClientType_Type ClientType::TEST;
    const ClientType_Type ClientType::DEMO;
    const ClientType_Type ClientType::CHROME_SYNC;
    const ClientType_Type ClientType::CHROME_SYNC_ANDROID;
    const ClientType_Type ClientType::CHROME_SYNC_IOS;
    const ClientType_Type ClientType::CHROME_SYNC_GCM_DESKTOP;
    const ClientType_Type ClientType::CHROME_SYNC_GCM_IOS;
    const ClientType_Type ClientType::Type_MIN;
    const ClientType_Type ClientType::Type_MAX;
    const int ClientType::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ClientType::kTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    ClientType::ClientType()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:ipc.invalidation.ClientType)
    }

    void ClientType::InitAsDefaultInstance()
    {
    }

    ClientType::ClientType(const ClientType& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ClientType)
    }

    void ClientType::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        type_ = 1;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    ClientType::~ClientType()
    {
        // @@protoc_insertion_point(destructor:ipc.invalidation.ClientType)
        SharedDtor();
    }

    void ClientType::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void ClientType::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ClientType& ClientType::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_types_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_types_2eproto();
#endif
        return *default_instance_;
    }

    ClientType* ClientType::default_instance_ = NULL;

    ClientType* ClientType::New(::google::protobuf::Arena* arena) const
    {
        ClientType* n = new ClientType;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void ClientType::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:ipc.invalidation.ClientType)
        type_ = 1;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool ClientType::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForClientType, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:ipc.invalidation.ClientType)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .ipc.invalidation.ClientType.Type type = 1;
            case 1: {
                if (tag == 8) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::ipc::invalidation::ClientType_Type_IsValid(value)) {
                        set_type(static_cast<::ipc::invalidation::ClientType_Type>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(8);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:ipc.invalidation.ClientType)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:ipc.invalidation.ClientType)
        return false;
#undef DO_
    }

    void ClientType::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:ipc.invalidation.ClientType)
        // optional .ipc.invalidation.ClientType.Type type = 1;
        if (has_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->type(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:ipc.invalidation.ClientType)
    }

    int ClientType::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ClientType)
        int total_size = 0;

        // optional .ipc.invalidation.ClientType.Type type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void ClientType::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const ClientType*>(&from));
    }

    void ClientType::MergeFrom(const ClientType& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ClientType)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_type()) {
                set_type(from.type());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void ClientType::CopyFrom(const ClientType& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ClientType)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool ClientType::IsInitialized() const
    {

        return true;
    }

    void ClientType::Swap(ClientType* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void ClientType::InternalSwap(ClientType* other)
    {
        std::swap(type_, other->type_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string ClientType::GetTypeName() const
    {
        return "ipc.invalidation.ClientType";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // ClientType

    // optional .ipc.invalidation.ClientType.Type type = 1;
    bool ClientType::has_type() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void ClientType::set_has_type()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void ClientType::clear_has_type()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void ClientType::clear_type()
    {
        type_ = 1;
        clear_has_type();
    }
    ::ipc::invalidation::ClientType_Type ClientType::type() const
    {
        // @@protoc_insertion_point(field_get:ipc.invalidation.ClientType.type)
        return static_cast<::ipc::invalidation::ClientType_Type>(type_);
    }
    void ClientType::set_type(::ipc::invalidation::ClientType_Type value)
    {
        assert(::ipc::invalidation::ClientType_Type_IsValid(value));
        set_has_type();
        type_ = value;
        // @@protoc_insertion_point(field_set:ipc.invalidation.ClientType.type)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForObjectSource(
        ObjectSource* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    bool ObjectSource_Type_IsValid(int value)
    {
        switch (value) {
        case 1:
        case 2:
        case 4:
        case 1004:
        case 1014:
        case 1025:
        case 1030:
            return true;
        default:
            return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const ObjectSource_Type ObjectSource::INTERNAL;
    const ObjectSource_Type ObjectSource::TEST;
    const ObjectSource_Type ObjectSource::DEMO;
    const ObjectSource_Type ObjectSource::CHROME_SYNC;
    const ObjectSource_Type ObjectSource::COSMO_CHANGELOG;
    const ObjectSource_Type ObjectSource::CHROME_COMPONENTS;
    const ObjectSource_Type ObjectSource::CHROME_PUSH_MESSAGING;
    const ObjectSource_Type ObjectSource::Type_MIN;
    const ObjectSource_Type ObjectSource::Type_MAX;
    const int ObjectSource::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ObjectSource::kTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    ObjectSource::ObjectSource()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:ipc.invalidation.ObjectSource)
    }

    void ObjectSource::InitAsDefaultInstance()
    {
    }

    ObjectSource::ObjectSource(const ObjectSource& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ObjectSource)
    }

    void ObjectSource::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        type_ = 1;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    ObjectSource::~ObjectSource()
    {
        // @@protoc_insertion_point(destructor:ipc.invalidation.ObjectSource)
        SharedDtor();
    }

    void ObjectSource::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void ObjectSource::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ObjectSource& ObjectSource::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_types_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_types_2eproto();
#endif
        return *default_instance_;
    }

    ObjectSource* ObjectSource::default_instance_ = NULL;

    ObjectSource* ObjectSource::New(::google::protobuf::Arena* arena) const
    {
        ObjectSource* n = new ObjectSource;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void ObjectSource::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:ipc.invalidation.ObjectSource)
        type_ = 1;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool ObjectSource::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForObjectSource, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:ipc.invalidation.ObjectSource)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .ipc.invalidation.ObjectSource.Type type = 1;
            case 1: {
                if (tag == 8) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::ipc::invalidation::ObjectSource_Type_IsValid(value)) {
                        set_type(static_cast<::ipc::invalidation::ObjectSource_Type>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(8);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:ipc.invalidation.ObjectSource)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:ipc.invalidation.ObjectSource)
        return false;
#undef DO_
    }

    void ObjectSource::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:ipc.invalidation.ObjectSource)
        // optional .ipc.invalidation.ObjectSource.Type type = 1;
        if (has_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->type(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:ipc.invalidation.ObjectSource)
    }

    int ObjectSource::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ObjectSource)
        int total_size = 0;

        // optional .ipc.invalidation.ObjectSource.Type type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void ObjectSource::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const ObjectSource*>(&from));
    }

    void ObjectSource::MergeFrom(const ObjectSource& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ObjectSource)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_type()) {
                set_type(from.type());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void ObjectSource::CopyFrom(const ObjectSource& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ObjectSource)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool ObjectSource::IsInitialized() const
    {

        return true;
    }

    void ObjectSource::Swap(ObjectSource* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void ObjectSource::InternalSwap(ObjectSource* other)
    {
        std::swap(type_, other->type_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string ObjectSource::GetTypeName() const
    {
        return "ipc.invalidation.ObjectSource";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // ObjectSource

    // optional .ipc.invalidation.ObjectSource.Type type = 1;
    bool ObjectSource::has_type() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void ObjectSource::set_has_type()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void ObjectSource::clear_has_type()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void ObjectSource::clear_type()
    {
        type_ = 1;
        clear_has_type();
    }
    ::ipc::invalidation::ObjectSource_Type ObjectSource::type() const
    {
        // @@protoc_insertion_point(field_get:ipc.invalidation.ObjectSource.type)
        return static_cast<::ipc::invalidation::ObjectSource_Type>(type_);
    }
    void ObjectSource::set_type(::ipc::invalidation::ObjectSource_Type value)
    {
        assert(::ipc::invalidation::ObjectSource_Type_IsValid(value));
        set_has_type();
        type_ = value;
        // @@protoc_insertion_point(field_set:ipc.invalidation.ObjectSource.type)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForConstants(
        Constants* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    bool Constants_ObjectVersion_IsValid(int value)
    {
        switch (value) {
        case 0:
            return true;
        default:
            return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const Constants_ObjectVersion Constants::UNKNOWN;
    const Constants_ObjectVersion Constants::ObjectVersion_MIN;
    const Constants_ObjectVersion Constants::ObjectVersion_MAX;
    const int Constants::ObjectVersion_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Constants::Constants()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:ipc.invalidation.Constants)
    }

    void Constants::InitAsDefaultInstance()
    {
    }

    Constants::Constants(const Constants& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:ipc.invalidation.Constants)
    }

    void Constants::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Constants::~Constants()
    {
        // @@protoc_insertion_point(destructor:ipc.invalidation.Constants)
        SharedDtor();
    }

    void Constants::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Constants::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Constants& Constants::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_types_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_types_2eproto();
#endif
        return *default_instance_;
    }

    Constants* Constants::default_instance_ = NULL;

    Constants* Constants::New(::google::protobuf::Arena* arena) const
    {
        Constants* n = new Constants;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Constants::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:ipc.invalidation.Constants)
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Constants::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForConstants, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:ipc.invalidation.Constants)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
        }
    success:
        // @@protoc_insertion_point(parse_success:ipc.invalidation.Constants)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:ipc.invalidation.Constants)
        return false;
#undef DO_
    }

    void Constants::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:ipc.invalidation.Constants)
        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:ipc.invalidation.Constants)
    }

    int Constants::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.Constants)
        int total_size = 0;

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Constants::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Constants*>(&from));
    }

    void Constants::MergeFrom(const Constants& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.Constants)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Constants::CopyFrom(const Constants& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.Constants)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Constants::IsInitialized() const
    {

        return true;
    }

    void Constants::Swap(Constants* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Constants::InternalSwap(Constants* other)
    {
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Constants::GetTypeName() const
    {
        return "ipc.invalidation.Constants";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Constants

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace invalidation
} // namespace ipc

// @@protoc_insertion_point(global_scope)
