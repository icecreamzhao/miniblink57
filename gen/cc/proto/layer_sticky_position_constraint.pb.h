// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_sticky_position_constraint.proto

#ifndef PROTOBUF_layer_5fsticky_5fposition_5fconstraint_2eproto__INCLUDED
#define PROTOBUF_layer_5fsticky_5fposition_5fconstraint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "point.pb.h"
#include "rect.pb.h"
#include "transform.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

    // Internal implementation detail -- do not call these.
    void CC_PROTO_EXPORT protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
    void protobuf_AssignDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
    void protobuf_ShutdownFile_layer_5fsticky_5fposition_5fconstraint_2eproto();

    class LayerStickyPositionConstraint;

    // ===================================================================

    class CC_PROTO_EXPORT LayerStickyPositionConstraint : public ::google::protobuf::MessageLite {
    public:
        LayerStickyPositionConstraint();
        virtual ~LayerStickyPositionConstraint();

        LayerStickyPositionConstraint(const LayerStickyPositionConstraint& from);

        inline LayerStickyPositionConstraint& operator=(const LayerStickyPositionConstraint& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const LayerStickyPositionConstraint& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const LayerStickyPositionConstraint* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(LayerStickyPositionConstraint* other);

        // implements Message ----------------------------------------------

        inline LayerStickyPositionConstraint* New() const { return New(NULL); }

        LayerStickyPositionConstraint* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const LayerStickyPositionConstraint& from);
        void MergeFrom(const LayerStickyPositionConstraint& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(LayerStickyPositionConstraint* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional bool is_sticky = 1;
        bool has_is_sticky() const;
        void clear_is_sticky();
        static const int kIsStickyFieldNumber = 1;
        bool is_sticky() const;
        void set_is_sticky(bool value);

        // optional bool is_anchored_left = 2;
        bool has_is_anchored_left() const;
        void clear_is_anchored_left();
        static const int kIsAnchoredLeftFieldNumber = 2;
        bool is_anchored_left() const;
        void set_is_anchored_left(bool value);

        // optional bool is_anchored_right = 3;
        bool has_is_anchored_right() const;
        void clear_is_anchored_right();
        static const int kIsAnchoredRightFieldNumber = 3;
        bool is_anchored_right() const;
        void set_is_anchored_right(bool value);

        // optional bool is_anchored_top = 4;
        bool has_is_anchored_top() const;
        void clear_is_anchored_top();
        static const int kIsAnchoredTopFieldNumber = 4;
        bool is_anchored_top() const;
        void set_is_anchored_top(bool value);

        // optional bool is_anchored_bottom = 5;
        bool has_is_anchored_bottom() const;
        void clear_is_anchored_bottom();
        static const int kIsAnchoredBottomFieldNumber = 5;
        bool is_anchored_bottom() const;
        void set_is_anchored_bottom(bool value);

        // optional float left_offset = 6;
        bool has_left_offset() const;
        void clear_left_offset();
        static const int kLeftOffsetFieldNumber = 6;
        float left_offset() const;
        void set_left_offset(float value);

        // optional float right_offset = 7;
        bool has_right_offset() const;
        void clear_right_offset();
        static const int kRightOffsetFieldNumber = 7;
        float right_offset() const;
        void set_right_offset(float value);

        // optional float top_offset = 8;
        bool has_top_offset() const;
        void clear_top_offset();
        static const int kTopOffsetFieldNumber = 8;
        float top_offset() const;
        void set_top_offset(float value);

        // optional float bottom_offset = 9;
        bool has_bottom_offset() const;
        void clear_bottom_offset();
        static const int kBottomOffsetFieldNumber = 9;
        float bottom_offset() const;
        void set_bottom_offset(float value);

        // optional .cc.proto.Point parent_relative_sticky_box_offset = 12;
        bool has_parent_relative_sticky_box_offset() const;
        void clear_parent_relative_sticky_box_offset();
        static const int kParentRelativeStickyBoxOffsetFieldNumber = 12;
        const ::cc::proto::Point& parent_relative_sticky_box_offset() const;
        ::cc::proto::Point* mutable_parent_relative_sticky_box_offset();
        ::cc::proto::Point* release_parent_relative_sticky_box_offset();
        void set_allocated_parent_relative_sticky_box_offset(::cc::proto::Point* parent_relative_sticky_box_offset);

        // optional .cc.proto.Rect scroll_container_relative_sticky_box_rect = 10;
        bool has_scroll_container_relative_sticky_box_rect() const;
        void clear_scroll_container_relative_sticky_box_rect();
        static const int kScrollContainerRelativeStickyBoxRectFieldNumber = 10;
        const ::cc::proto::Rect& scroll_container_relative_sticky_box_rect() const;
        ::cc::proto::Rect* mutable_scroll_container_relative_sticky_box_rect();
        ::cc::proto::Rect* release_scroll_container_relative_sticky_box_rect();
        void set_allocated_scroll_container_relative_sticky_box_rect(::cc::proto::Rect* scroll_container_relative_sticky_box_rect);

        // optional .cc.proto.Rect scroll_container_relative_containing_block_rect = 11;
        bool has_scroll_container_relative_containing_block_rect() const;
        void clear_scroll_container_relative_containing_block_rect();
        static const int kScrollContainerRelativeContainingBlockRectFieldNumber = 11;
        const ::cc::proto::Rect& scroll_container_relative_containing_block_rect() const;
        ::cc::proto::Rect* mutable_scroll_container_relative_containing_block_rect();
        ::cc::proto::Rect* release_scroll_container_relative_containing_block_rect();
        void set_allocated_scroll_container_relative_containing_block_rect(::cc::proto::Rect* scroll_container_relative_containing_block_rect);

        // @@protoc_insertion_point(class_scope:cc.proto.LayerStickyPositionConstraint)
    private:
        inline void set_has_is_sticky();
        inline void clear_has_is_sticky();
        inline void set_has_is_anchored_left();
        inline void clear_has_is_anchored_left();
        inline void set_has_is_anchored_right();
        inline void clear_has_is_anchored_right();
        inline void set_has_is_anchored_top();
        inline void clear_has_is_anchored_top();
        inline void set_has_is_anchored_bottom();
        inline void clear_has_is_anchored_bottom();
        inline void set_has_left_offset();
        inline void clear_has_left_offset();
        inline void set_has_right_offset();
        inline void clear_has_right_offset();
        inline void set_has_top_offset();
        inline void clear_has_top_offset();
        inline void set_has_bottom_offset();
        inline void clear_has_bottom_offset();
        inline void set_has_parent_relative_sticky_box_offset();
        inline void clear_has_parent_relative_sticky_box_offset();
        inline void set_has_scroll_container_relative_sticky_box_rect();
        inline void clear_has_scroll_container_relative_sticky_box_rect();
        inline void set_has_scroll_container_relative_containing_block_rect();
        inline void clear_has_scroll_container_relative_containing_block_rect();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        bool is_sticky_;
        bool is_anchored_left_;
        bool is_anchored_right_;
        bool is_anchored_top_;
        bool is_anchored_bottom_;
        float left_offset_;
        float right_offset_;
        float top_offset_;
        float bottom_offset_;
        ::cc::proto::Point* parent_relative_sticky_box_offset_;
        ::cc::proto::Rect* scroll_container_relative_sticky_box_rect_;
        ::cc::proto::Rect* scroll_container_relative_containing_block_rect_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void CC_PROTO_EXPORT protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto_impl();
#else
        friend void CC_PROTO_EXPORT protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
#endif
        friend void protobuf_AssignDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
        friend void protobuf_ShutdownFile_layer_5fsticky_5fposition_5fconstraint_2eproto();

        void InitAsDefaultInstance();
        static LayerStickyPositionConstraint* default_instance_;
    };
    // ===================================================================

    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // LayerStickyPositionConstraint

    // optional bool is_sticky = 1;
    inline bool LayerStickyPositionConstraint::has_is_sticky() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_is_sticky()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void LayerStickyPositionConstraint::clear_has_is_sticky()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void LayerStickyPositionConstraint::clear_is_sticky()
    {
        is_sticky_ = false;
        clear_has_is_sticky();
    }
    inline bool LayerStickyPositionConstraint::is_sticky() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_sticky)
        return is_sticky_;
    }
    inline void LayerStickyPositionConstraint::set_is_sticky(bool value)
    {
        set_has_is_sticky();
        is_sticky_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_sticky)
    }

    // optional bool is_anchored_left = 2;
    inline bool LayerStickyPositionConstraint::has_is_anchored_left() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_is_anchored_left()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void LayerStickyPositionConstraint::clear_has_is_anchored_left()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void LayerStickyPositionConstraint::clear_is_anchored_left()
    {
        is_anchored_left_ = false;
        clear_has_is_anchored_left();
    }
    inline bool LayerStickyPositionConstraint::is_anchored_left() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_left)
        return is_anchored_left_;
    }
    inline void LayerStickyPositionConstraint::set_is_anchored_left(bool value)
    {
        set_has_is_anchored_left();
        is_anchored_left_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_left)
    }

    // optional bool is_anchored_right = 3;
    inline bool LayerStickyPositionConstraint::has_is_anchored_right() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_is_anchored_right()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void LayerStickyPositionConstraint::clear_has_is_anchored_right()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void LayerStickyPositionConstraint::clear_is_anchored_right()
    {
        is_anchored_right_ = false;
        clear_has_is_anchored_right();
    }
    inline bool LayerStickyPositionConstraint::is_anchored_right() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_right)
        return is_anchored_right_;
    }
    inline void LayerStickyPositionConstraint::set_is_anchored_right(bool value)
    {
        set_has_is_anchored_right();
        is_anchored_right_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_right)
    }

    // optional bool is_anchored_top = 4;
    inline bool LayerStickyPositionConstraint::has_is_anchored_top() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_is_anchored_top()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    inline void LayerStickyPositionConstraint::clear_has_is_anchored_top()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    inline void LayerStickyPositionConstraint::clear_is_anchored_top()
    {
        is_anchored_top_ = false;
        clear_has_is_anchored_top();
    }
    inline bool LayerStickyPositionConstraint::is_anchored_top() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_top)
        return is_anchored_top_;
    }
    inline void LayerStickyPositionConstraint::set_is_anchored_top(bool value)
    {
        set_has_is_anchored_top();
        is_anchored_top_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_top)
    }

    // optional bool is_anchored_bottom = 5;
    inline bool LayerStickyPositionConstraint::has_is_anchored_bottom() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_is_anchored_bottom()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    inline void LayerStickyPositionConstraint::clear_has_is_anchored_bottom()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    inline void LayerStickyPositionConstraint::clear_is_anchored_bottom()
    {
        is_anchored_bottom_ = false;
        clear_has_is_anchored_bottom();
    }
    inline bool LayerStickyPositionConstraint::is_anchored_bottom() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_bottom)
        return is_anchored_bottom_;
    }
    inline void LayerStickyPositionConstraint::set_is_anchored_bottom(bool value)
    {
        set_has_is_anchored_bottom();
        is_anchored_bottom_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_bottom)
    }

    // optional float left_offset = 6;
    inline bool LayerStickyPositionConstraint::has_left_offset() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_left_offset()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    inline void LayerStickyPositionConstraint::clear_has_left_offset()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    inline void LayerStickyPositionConstraint::clear_left_offset()
    {
        left_offset_ = 0;
        clear_has_left_offset();
    }
    inline float LayerStickyPositionConstraint::left_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.left_offset)
        return left_offset_;
    }
    inline void LayerStickyPositionConstraint::set_left_offset(float value)
    {
        set_has_left_offset();
        left_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.left_offset)
    }

    // optional float right_offset = 7;
    inline bool LayerStickyPositionConstraint::has_right_offset() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_right_offset()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    inline void LayerStickyPositionConstraint::clear_has_right_offset()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    inline void LayerStickyPositionConstraint::clear_right_offset()
    {
        right_offset_ = 0;
        clear_has_right_offset();
    }
    inline float LayerStickyPositionConstraint::right_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.right_offset)
        return right_offset_;
    }
    inline void LayerStickyPositionConstraint::set_right_offset(float value)
    {
        set_has_right_offset();
        right_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.right_offset)
    }

    // optional float top_offset = 8;
    inline bool LayerStickyPositionConstraint::has_top_offset() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_top_offset()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    inline void LayerStickyPositionConstraint::clear_has_top_offset()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    inline void LayerStickyPositionConstraint::clear_top_offset()
    {
        top_offset_ = 0;
        clear_has_top_offset();
    }
    inline float LayerStickyPositionConstraint::top_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.top_offset)
        return top_offset_;
    }
    inline void LayerStickyPositionConstraint::set_top_offset(float value)
    {
        set_has_top_offset();
        top_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.top_offset)
    }

    // optional float bottom_offset = 9;
    inline bool LayerStickyPositionConstraint::has_bottom_offset() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_bottom_offset()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    inline void LayerStickyPositionConstraint::clear_has_bottom_offset()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    inline void LayerStickyPositionConstraint::clear_bottom_offset()
    {
        bottom_offset_ = 0;
        clear_has_bottom_offset();
    }
    inline float LayerStickyPositionConstraint::bottom_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.bottom_offset)
        return bottom_offset_;
    }
    inline void LayerStickyPositionConstraint::set_bottom_offset(float value)
    {
        set_has_bottom_offset();
        bottom_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.bottom_offset)
    }

    // optional .cc.proto.Point parent_relative_sticky_box_offset = 12;
    inline bool LayerStickyPositionConstraint::has_parent_relative_sticky_box_offset() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_parent_relative_sticky_box_offset()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    inline void LayerStickyPositionConstraint::clear_has_parent_relative_sticky_box_offset()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    inline void LayerStickyPositionConstraint::clear_parent_relative_sticky_box_offset()
    {
        if (parent_relative_sticky_box_offset_ != NULL)
            parent_relative_sticky_box_offset_->::cc::proto::Point::Clear();
        clear_has_parent_relative_sticky_box_offset();
    }
    inline const ::cc::proto::Point& LayerStickyPositionConstraint::parent_relative_sticky_box_offset() const
    {
// @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return parent_relative_sticky_box_offset_ != NULL ? *parent_relative_sticky_box_offset_ : *default_instance().parent_relative_sticky_box_offset_;
#else
        return parent_relative_sticky_box_offset_ != NULL ? *parent_relative_sticky_box_offset_ : *default_instance_->parent_relative_sticky_box_offset_;
#endif
    }
    inline ::cc::proto::Point* LayerStickyPositionConstraint::mutable_parent_relative_sticky_box_offset()
    {
        set_has_parent_relative_sticky_box_offset();
        if (parent_relative_sticky_box_offset_ == NULL) {
            parent_relative_sticky_box_offset_ = new ::cc::proto::Point;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
        return parent_relative_sticky_box_offset_;
    }
    inline ::cc::proto::Point* LayerStickyPositionConstraint::release_parent_relative_sticky_box_offset()
    {
        // @@protoc_insertion_point(field_release:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
        clear_has_parent_relative_sticky_box_offset();
        ::cc::proto::Point* temp = parent_relative_sticky_box_offset_;
        parent_relative_sticky_box_offset_ = NULL;
        return temp;
    }
    inline void LayerStickyPositionConstraint::set_allocated_parent_relative_sticky_box_offset(::cc::proto::Point* parent_relative_sticky_box_offset)
    {
        delete parent_relative_sticky_box_offset_;
        parent_relative_sticky_box_offset_ = parent_relative_sticky_box_offset;
        if (parent_relative_sticky_box_offset) {
            set_has_parent_relative_sticky_box_offset();
        } else {
            clear_has_parent_relative_sticky_box_offset();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
    }

    // optional .cc.proto.Rect scroll_container_relative_sticky_box_rect = 10;
    inline bool LayerStickyPositionConstraint::has_scroll_container_relative_sticky_box_rect() const
    {
        return (_has_bits_[0] & 0x00000400u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_scroll_container_relative_sticky_box_rect()
    {
        _has_bits_[0] |= 0x00000400u;
    }
    inline void LayerStickyPositionConstraint::clear_has_scroll_container_relative_sticky_box_rect()
    {
        _has_bits_[0] &= ~0x00000400u;
    }
    inline void LayerStickyPositionConstraint::clear_scroll_container_relative_sticky_box_rect()
    {
        if (scroll_container_relative_sticky_box_rect_ != NULL)
            scroll_container_relative_sticky_box_rect_->::cc::proto::Rect::Clear();
        clear_has_scroll_container_relative_sticky_box_rect();
    }
    inline const ::cc::proto::Rect& LayerStickyPositionConstraint::scroll_container_relative_sticky_box_rect() const
    {
// @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return scroll_container_relative_sticky_box_rect_ != NULL ? *scroll_container_relative_sticky_box_rect_ : *default_instance().scroll_container_relative_sticky_box_rect_;
#else
        return scroll_container_relative_sticky_box_rect_ != NULL ? *scroll_container_relative_sticky_box_rect_ : *default_instance_->scroll_container_relative_sticky_box_rect_;
#endif
    }
    inline ::cc::proto::Rect* LayerStickyPositionConstraint::mutable_scroll_container_relative_sticky_box_rect()
    {
        set_has_scroll_container_relative_sticky_box_rect();
        if (scroll_container_relative_sticky_box_rect_ == NULL) {
            scroll_container_relative_sticky_box_rect_ = new ::cc::proto::Rect;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
        return scroll_container_relative_sticky_box_rect_;
    }
    inline ::cc::proto::Rect* LayerStickyPositionConstraint::release_scroll_container_relative_sticky_box_rect()
    {
        // @@protoc_insertion_point(field_release:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
        clear_has_scroll_container_relative_sticky_box_rect();
        ::cc::proto::Rect* temp = scroll_container_relative_sticky_box_rect_;
        scroll_container_relative_sticky_box_rect_ = NULL;
        return temp;
    }
    inline void LayerStickyPositionConstraint::set_allocated_scroll_container_relative_sticky_box_rect(::cc::proto::Rect* scroll_container_relative_sticky_box_rect)
    {
        delete scroll_container_relative_sticky_box_rect_;
        scroll_container_relative_sticky_box_rect_ = scroll_container_relative_sticky_box_rect;
        if (scroll_container_relative_sticky_box_rect) {
            set_has_scroll_container_relative_sticky_box_rect();
        } else {
            clear_has_scroll_container_relative_sticky_box_rect();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
    }

    // optional .cc.proto.Rect scroll_container_relative_containing_block_rect = 11;
    inline bool LayerStickyPositionConstraint::has_scroll_container_relative_containing_block_rect() const
    {
        return (_has_bits_[0] & 0x00000800u) != 0;
    }
    inline void LayerStickyPositionConstraint::set_has_scroll_container_relative_containing_block_rect()
    {
        _has_bits_[0] |= 0x00000800u;
    }
    inline void LayerStickyPositionConstraint::clear_has_scroll_container_relative_containing_block_rect()
    {
        _has_bits_[0] &= ~0x00000800u;
    }
    inline void LayerStickyPositionConstraint::clear_scroll_container_relative_containing_block_rect()
    {
        if (scroll_container_relative_containing_block_rect_ != NULL)
            scroll_container_relative_containing_block_rect_->::cc::proto::Rect::Clear();
        clear_has_scroll_container_relative_containing_block_rect();
    }
    inline const ::cc::proto::Rect& LayerStickyPositionConstraint::scroll_container_relative_containing_block_rect() const
    {
// @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return scroll_container_relative_containing_block_rect_ != NULL ? *scroll_container_relative_containing_block_rect_ : *default_instance().scroll_container_relative_containing_block_rect_;
#else
        return scroll_container_relative_containing_block_rect_ != NULL ? *scroll_container_relative_containing_block_rect_ : *default_instance_->scroll_container_relative_containing_block_rect_;
#endif
    }
    inline ::cc::proto::Rect* LayerStickyPositionConstraint::mutable_scroll_container_relative_containing_block_rect()
    {
        set_has_scroll_container_relative_containing_block_rect();
        if (scroll_container_relative_containing_block_rect_ == NULL) {
            scroll_container_relative_containing_block_rect_ = new ::cc::proto::Rect;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
        return scroll_container_relative_containing_block_rect_;
    }
    inline ::cc::proto::Rect* LayerStickyPositionConstraint::release_scroll_container_relative_containing_block_rect()
    {
        // @@protoc_insertion_point(field_release:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
        clear_has_scroll_container_relative_containing_block_rect();
        ::cc::proto::Rect* temp = scroll_container_relative_containing_block_rect_;
        scroll_container_relative_containing_block_rect_ = NULL;
        return temp;
    }
    inline void LayerStickyPositionConstraint::set_allocated_scroll_container_relative_containing_block_rect(::cc::proto::Rect* scroll_container_relative_containing_block_rect)
    {
        delete scroll_container_relative_containing_block_rect_;
        scroll_container_relative_containing_block_rect_ = scroll_container_relative_containing_block_rect;
        if (scroll_container_relative_containing_block_rect) {
            set_has_scroll_container_relative_containing_block_rect();
        } else {
            clear_has_scroll_container_relative_containing_block_rect();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
    }

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_layer_5fsticky_5fposition_5fconstraint_2eproto__INCLUDED
