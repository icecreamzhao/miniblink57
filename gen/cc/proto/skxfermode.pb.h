// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skxfermode.proto

#ifndef PROTOBUF_skxfermode_2eproto__INCLUDED
#define PROTOBUF_skxfermode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

    // Internal implementation detail -- do not call these.
    void CC_PROTO_EXPORT protobuf_AddDesc_skxfermode_2eproto();
    void protobuf_AssignDesc_skxfermode_2eproto();
    void protobuf_ShutdownFile_skxfermode_2eproto();

    class SkXfermode;

    enum SkXfermode_Mode {
        SkXfermode_Mode_CLEAR_ = 0,
        SkXfermode_Mode_SRC = 1,
        SkXfermode_Mode_DST = 2,
        SkXfermode_Mode_SRC_OVER = 3,
        SkXfermode_Mode_DST_OVER = 4,
        SkXfermode_Mode_SRC_IN = 5,
        SkXfermode_Mode_DST_IN = 6,
        SkXfermode_Mode_SRC_OUT = 7,
        SkXfermode_Mode_DST_OUT = 8,
        SkXfermode_Mode_SRC_A_TOP = 9,
        SkXfermode_Mode_DST_A_TOP = 10,
        SkXfermode_Mode_XOR = 11,
        SkXfermode_Mode_PLUS = 12,
        SkXfermode_Mode_MODULATE = 13,
        SkXfermode_Mode_SCREEN = 14,
        SkXfermode_Mode_OVERLAY = 15,
        SkXfermode_Mode_DARKEN = 16,
        SkXfermode_Mode_LIGHTEN = 17,
        SkXfermode_Mode_COLOR_DODGE = 18,
        SkXfermode_Mode_COLOR_BURN = 19,
        SkXfermode_Mode_HARD_LIGHT = 20,
        SkXfermode_Mode_SOFT_LIGHT = 21,
        SkXfermode_Mode_DIFFERENCE_ = 22,
        SkXfermode_Mode_EXCLUSION = 23,
        SkXfermode_Mode_MULTIPLY = 24,
        SkXfermode_Mode_HUE = 25,
        SkXfermode_Mode_SATURATION = 26,
        SkXfermode_Mode_COLOR = 27,
        SkXfermode_Mode_LUMINOSITY = 28
    };
    CC_PROTO_EXPORT bool SkXfermode_Mode_IsValid(int value);
    const SkXfermode_Mode SkXfermode_Mode_Mode_MIN = SkXfermode_Mode_CLEAR_;
    const SkXfermode_Mode SkXfermode_Mode_Mode_MAX = SkXfermode_Mode_LUMINOSITY;
    const int SkXfermode_Mode_Mode_ARRAYSIZE = SkXfermode_Mode_Mode_MAX + 1;

    // ===================================================================

    class CC_PROTO_EXPORT SkXfermode : public ::google::protobuf::MessageLite {
    public:
        SkXfermode();
        virtual ~SkXfermode();

        SkXfermode(const SkXfermode& from);

        inline SkXfermode& operator=(const SkXfermode& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const SkXfermode& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const SkXfermode* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(SkXfermode* other);

        // implements Message ----------------------------------------------

        inline SkXfermode* New() const { return New(NULL); }

        SkXfermode* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const SkXfermode& from);
        void MergeFrom(const SkXfermode& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(SkXfermode* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        typedef SkXfermode_Mode Mode;
        static const Mode CLEAR_ = SkXfermode_Mode_CLEAR_;
        static const Mode SRC = SkXfermode_Mode_SRC;
        static const Mode DST = SkXfermode_Mode_DST;
        static const Mode SRC_OVER = SkXfermode_Mode_SRC_OVER;
        static const Mode DST_OVER = SkXfermode_Mode_DST_OVER;
        static const Mode SRC_IN = SkXfermode_Mode_SRC_IN;
        static const Mode DST_IN = SkXfermode_Mode_DST_IN;
        static const Mode SRC_OUT = SkXfermode_Mode_SRC_OUT;
        static const Mode DST_OUT = SkXfermode_Mode_DST_OUT;
        static const Mode SRC_A_TOP = SkXfermode_Mode_SRC_A_TOP;
        static const Mode DST_A_TOP = SkXfermode_Mode_DST_A_TOP;
        static const Mode XOR = SkXfermode_Mode_XOR;
        static const Mode PLUS = SkXfermode_Mode_PLUS;
        static const Mode MODULATE = SkXfermode_Mode_MODULATE;
        static const Mode SCREEN = SkXfermode_Mode_SCREEN;
        static const Mode OVERLAY = SkXfermode_Mode_OVERLAY;
        static const Mode DARKEN = SkXfermode_Mode_DARKEN;
        static const Mode LIGHTEN = SkXfermode_Mode_LIGHTEN;
        static const Mode COLOR_DODGE = SkXfermode_Mode_COLOR_DODGE;
        static const Mode COLOR_BURN = SkXfermode_Mode_COLOR_BURN;
        static const Mode HARD_LIGHT = SkXfermode_Mode_HARD_LIGHT;
        static const Mode SOFT_LIGHT = SkXfermode_Mode_SOFT_LIGHT;
        static const Mode DIFFERENCE_ = SkXfermode_Mode_DIFFERENCE_;
        static const Mode EXCLUSION = SkXfermode_Mode_EXCLUSION;
        static const Mode MULTIPLY = SkXfermode_Mode_MULTIPLY;
        static const Mode HUE = SkXfermode_Mode_HUE;
        static const Mode SATURATION = SkXfermode_Mode_SATURATION;
        static const Mode COLOR = SkXfermode_Mode_COLOR;
        static const Mode LUMINOSITY = SkXfermode_Mode_LUMINOSITY;
        static inline bool Mode_IsValid(int value)
        {
            return SkXfermode_Mode_IsValid(value);
        }
        static const Mode Mode_MIN = SkXfermode_Mode_Mode_MIN;
        static const Mode Mode_MAX = SkXfermode_Mode_Mode_MAX;
        static const int Mode_ARRAYSIZE = SkXfermode_Mode_Mode_ARRAYSIZE;

        // accessors -------------------------------------------------------

        // @@protoc_insertion_point(class_scope:cc.proto.SkXfermode)
    private:
        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void CC_PROTO_EXPORT protobuf_AddDesc_skxfermode_2eproto_impl();
#else
        friend void CC_PROTO_EXPORT protobuf_AddDesc_skxfermode_2eproto();
#endif
        friend void protobuf_AssignDesc_skxfermode_2eproto();
        friend void protobuf_ShutdownFile_skxfermode_2eproto();

        void InitAsDefaultInstance();
        static SkXfermode* default_instance_;
    };
    // ===================================================================

    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // SkXfermode

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

#ifndef SWIG
namespace google {
namespace protobuf {

    template <>
    struct is_proto_enum<::cc::proto::SkXfermode_Mode> : ::google::protobuf::internal::true_type {
    };

} // namespace protobuf
} // namespace google
#endif // SWIG

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_skxfermode_2eproto__INCLUDED
