// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vector2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

    void protobuf_ShutdownFile_vector2d_2eproto()
    {
        delete Vector2d::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_vector2d_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_vector2d_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        Vector2d::default_instance_ = new Vector2d();
        Vector2d::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vector2d_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_vector2d_2eproto_once_);
    void protobuf_AddDesc_vector2d_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_vector2d_2eproto_once_,
            &protobuf_AddDesc_vector2d_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_vector2d_2eproto {
        StaticDescriptorInitializer_vector2d_2eproto()
        {
            protobuf_AddDesc_vector2d_2eproto();
        }
    } static_descriptor_initializer_vector2d_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForVector2d(
        Vector2d* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Vector2d::kXFieldNumber;
    const int Vector2d::kYFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Vector2d::Vector2d()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cc.proto.Vector2d)
    }

    void Vector2d::InitAsDefaultInstance()
    {
    }

    Vector2d::Vector2d(const Vector2d& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cc.proto.Vector2d)
    }

    void Vector2d::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        x_ = GOOGLE_LONGLONG(0);
        y_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Vector2d::~Vector2d()
    {
        // @@protoc_insertion_point(destructor:cc.proto.Vector2d)
        SharedDtor();
    }

    void Vector2d::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Vector2d::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Vector2d& Vector2d::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_vector2d_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_vector2d_2eproto();
#endif
        return *default_instance_;
    }

    Vector2d* Vector2d::default_instance_ = NULL;

    Vector2d* Vector2d::New(::google::protobuf::Arena* arena) const
    {
        Vector2d* n = new Vector2d;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Vector2d::Clear()
    {
// @@protoc_insertion_point(message_clear_start:cc.proto.Vector2d)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                              \
    _Pragma("clang diagnostic push")                                                               \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Vector2d, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Vector2d*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Vector2d::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForVector2d, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:cc.proto.Vector2d)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional int64 x = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &x_)));
                    set_has_x();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_y;
                break;
            }

            // optional int64 y = 2;
            case 2: {
                if (tag == 16) {
                parse_y:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &y_)));
                    set_has_y();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:cc.proto.Vector2d)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:cc.proto.Vector2d)
        return false;
#undef DO_
    }

    void Vector2d::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:cc.proto.Vector2d)
        // optional int64 x = 1;
        if (has_x()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->x(), output);
        }

        // optional int64 y = 2;
        if (has_y()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->y(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:cc.proto.Vector2d)
    }

    int Vector2d::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:cc.proto.Vector2d)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 3u) {
            // optional int64 x = 1;
            if (has_x()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->x());
            }

            // optional int64 y = 2;
            if (has_y()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->y());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Vector2d::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Vector2d*>(&from));
    }

    void Vector2d::MergeFrom(const Vector2d& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.Vector2d)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_x()) {
                set_x(from.x());
            }
            if (from.has_y()) {
                set_y(from.y());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Vector2d::CopyFrom(const Vector2d& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.Vector2d)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Vector2d::IsInitialized() const
    {

        return true;
    }

    void Vector2d::Swap(Vector2d* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Vector2d::InternalSwap(Vector2d* other)
    {
        std::swap(x_, other->x_);
        std::swap(y_, other->y_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Vector2d::GetTypeName() const
    {
        return "cc.proto.Vector2d";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Vector2d

    // optional int64 x = 1;
    bool Vector2d::has_x() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Vector2d::set_has_x()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Vector2d::clear_has_x()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Vector2d::clear_x()
    {
        x_ = GOOGLE_LONGLONG(0);
        clear_has_x();
    }
    ::google::protobuf::int64 Vector2d::x() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.Vector2d.x)
        return x_;
    }
    void Vector2d::set_x(::google::protobuf::int64 value)
    {
        set_has_x();
        x_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.Vector2d.x)
    }

    // optional int64 y = 2;
    bool Vector2d::has_y() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Vector2d::set_has_y()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Vector2d::clear_has_y()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Vector2d::clear_y()
    {
        y_ = GOOGLE_LONGLONG(0);
        clear_has_y();
    }
    ::google::protobuf::int64 Vector2d::y() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.Vector2d.y)
        return y_;
    }
    void Vector2d::set_y(::google::protobuf::int64 value)
    {
        set_has_y();
        y_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.Vector2d.y)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)
