// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skrrect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skrrect.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

    void protobuf_ShutdownFile_skrrect_2eproto()
    {
        delete SkRRect::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_skrrect_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_skrrect_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        ::cc::proto::protobuf_AddDesc_pointf_2eproto();
        ::cc::proto::protobuf_AddDesc_rectf_2eproto();
        SkRRect::default_instance_ = new SkRRect();
        SkRRect::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skrrect_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_skrrect_2eproto_once_);
    void protobuf_AddDesc_skrrect_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_skrrect_2eproto_once_,
            &protobuf_AddDesc_skrrect_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_skrrect_2eproto {
        StaticDescriptorInitializer_skrrect_2eproto()
        {
            protobuf_AddDesc_skrrect_2eproto();
        }
    } static_descriptor_initializer_skrrect_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForSkRRect(
        SkRRect* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int SkRRect::kRectFieldNumber;
    const int SkRRect::kRadiiUpperLeftFieldNumber;
    const int SkRRect::kRadiiUpperRightFieldNumber;
    const int SkRRect::kRadiiLowerRightFieldNumber;
    const int SkRRect::kRadiiLowerLeftFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    SkRRect::SkRRect()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cc.proto.SkRRect)
    }

    void SkRRect::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        rect_ = const_cast<::cc::proto::RectF*>(
            ::cc::proto::RectF::internal_default_instance());
#else
        rect_ = const_cast<::cc::proto::RectF*>(&::cc::proto::RectF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        radii_upper_left_ = const_cast<::cc::proto::PointF*>(
            ::cc::proto::PointF::internal_default_instance());
#else
        radii_upper_left_ = const_cast<::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        radii_upper_right_ = const_cast<::cc::proto::PointF*>(
            ::cc::proto::PointF::internal_default_instance());
#else
        radii_upper_right_ = const_cast<::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        radii_lower_right_ = const_cast<::cc::proto::PointF*>(
            ::cc::proto::PointF::internal_default_instance());
#else
        radii_lower_right_ = const_cast<::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        radii_lower_left_ = const_cast<::cc::proto::PointF*>(
            ::cc::proto::PointF::internal_default_instance());
#else
        radii_lower_left_ = const_cast<::cc::proto::PointF*>(&::cc::proto::PointF::default_instance());
#endif
    }

    SkRRect::SkRRect(const SkRRect& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cc.proto.SkRRect)
    }

    void SkRRect::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        rect_ = NULL;
        radii_upper_left_ = NULL;
        radii_upper_right_ = NULL;
        radii_lower_right_ = NULL;
        radii_lower_left_ = NULL;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    SkRRect::~SkRRect()
    {
        // @@protoc_insertion_point(destructor:cc.proto.SkRRect)
        SharedDtor();
    }

    void SkRRect::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete rect_;
            delete radii_upper_left_;
            delete radii_upper_right_;
            delete radii_lower_right_;
            delete radii_lower_left_;
        }
    }

    void SkRRect::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const SkRRect& SkRRect::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_skrrect_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_skrrect_2eproto();
#endif
        return *default_instance_;
    }

    SkRRect* SkRRect::default_instance_ = NULL;

    SkRRect* SkRRect::New(::google::protobuf::Arena* arena) const
    {
        SkRRect* n = new SkRRect;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void SkRRect::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:cc.proto.SkRRect)
        if (_has_bits_[0 / 32] & 31u) {
            if (has_rect()) {
                if (rect_ != NULL)
                    rect_->::cc::proto::RectF::Clear();
            }
            if (has_radii_upper_left()) {
                if (radii_upper_left_ != NULL)
                    radii_upper_left_->::cc::proto::PointF::Clear();
            }
            if (has_radii_upper_right()) {
                if (radii_upper_right_ != NULL)
                    radii_upper_right_->::cc::proto::PointF::Clear();
            }
            if (has_radii_lower_right()) {
                if (radii_lower_right_ != NULL)
                    radii_lower_right_->::cc::proto::PointF::Clear();
            }
            if (has_radii_lower_left()) {
                if (radii_lower_left_ != NULL)
                    radii_lower_left_->::cc::proto::PointF::Clear();
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool SkRRect::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForSkRRect, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:cc.proto.SkRRect)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .cc.proto.RectF rect = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_rect()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_radii_upper_left;
                break;
            }

            // optional .cc.proto.PointF radii_upper_left = 2;
            case 2: {
                if (tag == 18) {
                parse_radii_upper_left:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_radii_upper_left()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_radii_upper_right;
                break;
            }

            // optional .cc.proto.PointF radii_upper_right = 3;
            case 3: {
                if (tag == 26) {
                parse_radii_upper_right:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_radii_upper_right()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_radii_lower_right;
                break;
            }

            // optional .cc.proto.PointF radii_lower_right = 4;
            case 4: {
                if (tag == 34) {
                parse_radii_lower_right:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_radii_lower_right()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_radii_lower_left;
                break;
            }

            // optional .cc.proto.PointF radii_lower_left = 5;
            case 5: {
                if (tag == 42) {
                parse_radii_lower_left:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_radii_lower_left()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:cc.proto.SkRRect)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:cc.proto.SkRRect)
        return false;
#undef DO_
    }

    void SkRRect::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:cc.proto.SkRRect)
        // optional .cc.proto.RectF rect = 1;
        if (has_rect()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                1, *this->rect_, output);
        }

        // optional .cc.proto.PointF radii_upper_left = 2;
        if (has_radii_upper_left()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, *this->radii_upper_left_, output);
        }

        // optional .cc.proto.PointF radii_upper_right = 3;
        if (has_radii_upper_right()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                3, *this->radii_upper_right_, output);
        }

        // optional .cc.proto.PointF radii_lower_right = 4;
        if (has_radii_lower_right()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                4, *this->radii_lower_right_, output);
        }

        // optional .cc.proto.PointF radii_lower_left = 5;
        if (has_radii_lower_left()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, *this->radii_lower_left_, output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:cc.proto.SkRRect)
    }

    int SkRRect::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:cc.proto.SkRRect)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 31u) {
            // optional .cc.proto.RectF rect = 1;
            if (has_rect()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->rect_);
            }

            // optional .cc.proto.PointF radii_upper_left = 2;
            if (has_radii_upper_left()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->radii_upper_left_);
            }

            // optional .cc.proto.PointF radii_upper_right = 3;
            if (has_radii_upper_right()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->radii_upper_right_);
            }

            // optional .cc.proto.PointF radii_lower_right = 4;
            if (has_radii_lower_right()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->radii_lower_right_);
            }

            // optional .cc.proto.PointF radii_lower_left = 5;
            if (has_radii_lower_left()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->radii_lower_left_);
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void SkRRect::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const SkRRect*>(&from));
    }

    void SkRRect::MergeFrom(const SkRRect& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.SkRRect)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_rect()) {
                mutable_rect()->::cc::proto::RectF::MergeFrom(from.rect());
            }
            if (from.has_radii_upper_left()) {
                mutable_radii_upper_left()->::cc::proto::PointF::MergeFrom(from.radii_upper_left());
            }
            if (from.has_radii_upper_right()) {
                mutable_radii_upper_right()->::cc::proto::PointF::MergeFrom(from.radii_upper_right());
            }
            if (from.has_radii_lower_right()) {
                mutable_radii_lower_right()->::cc::proto::PointF::MergeFrom(from.radii_lower_right());
            }
            if (from.has_radii_lower_left()) {
                mutable_radii_lower_left()->::cc::proto::PointF::MergeFrom(from.radii_lower_left());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void SkRRect::CopyFrom(const SkRRect& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.SkRRect)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool SkRRect::IsInitialized() const
    {

        return true;
    }

    void SkRRect::Swap(SkRRect* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void SkRRect::InternalSwap(SkRRect* other)
    {
        std::swap(rect_, other->rect_);
        std::swap(radii_upper_left_, other->radii_upper_left_);
        std::swap(radii_upper_right_, other->radii_upper_right_);
        std::swap(radii_lower_right_, other->radii_lower_right_);
        std::swap(radii_lower_left_, other->radii_lower_left_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string SkRRect::GetTypeName() const
    {
        return "cc.proto.SkRRect";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // SkRRect

    // optional .cc.proto.RectF rect = 1;
    bool SkRRect::has_rect() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void SkRRect::set_has_rect()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void SkRRect::clear_has_rect()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void SkRRect::clear_rect()
    {
        if (rect_ != NULL)
            rect_->::cc::proto::RectF::Clear();
        clear_has_rect();
    }
    const ::cc::proto::RectF& SkRRect::rect() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.SkRRect.rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return rect_ != NULL ? *rect_ : *default_instance().rect_;
#else
        return rect_ != NULL ? *rect_ : *default_instance_->rect_;
#endif
    }
    ::cc::proto::RectF* SkRRect::mutable_rect()
    {
        set_has_rect();
        if (rect_ == NULL) {
            rect_ = new ::cc::proto::RectF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.rect)
        return rect_;
    }
    ::cc::proto::RectF* SkRRect::release_rect()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.rect)
        clear_has_rect();
        ::cc::proto::RectF* temp = rect_;
        rect_ = NULL;
        return temp;
    }
    void SkRRect::set_allocated_rect(::cc::proto::RectF* rect)
    {
        delete rect_;
        rect_ = rect;
        if (rect) {
            set_has_rect();
        } else {
            clear_has_rect();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.rect)
    }

    // optional .cc.proto.PointF radii_upper_left = 2;
    bool SkRRect::has_radii_upper_left() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void SkRRect::set_has_radii_upper_left()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void SkRRect::clear_has_radii_upper_left()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void SkRRect::clear_radii_upper_left()
    {
        if (radii_upper_left_ != NULL)
            radii_upper_left_->::cc::proto::PointF::Clear();
        clear_has_radii_upper_left();
    }
    const ::cc::proto::PointF& SkRRect::radii_upper_left() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_upper_left)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_upper_left_ != NULL ? *radii_upper_left_ : *default_instance().radii_upper_left_;
#else
        return radii_upper_left_ != NULL ? *radii_upper_left_ : *default_instance_->radii_upper_left_;
#endif
    }
    ::cc::proto::PointF* SkRRect::mutable_radii_upper_left()
    {
        set_has_radii_upper_left();
        if (radii_upper_left_ == NULL) {
            radii_upper_left_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_upper_left)
        return radii_upper_left_;
    }
    ::cc::proto::PointF* SkRRect::release_radii_upper_left()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_upper_left)
        clear_has_radii_upper_left();
        ::cc::proto::PointF* temp = radii_upper_left_;
        radii_upper_left_ = NULL;
        return temp;
    }
    void SkRRect::set_allocated_radii_upper_left(::cc::proto::PointF* radii_upper_left)
    {
        delete radii_upper_left_;
        radii_upper_left_ = radii_upper_left;
        if (radii_upper_left) {
            set_has_radii_upper_left();
        } else {
            clear_has_radii_upper_left();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_upper_left)
    }

    // optional .cc.proto.PointF radii_upper_right = 3;
    bool SkRRect::has_radii_upper_right() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void SkRRect::set_has_radii_upper_right()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void SkRRect::clear_has_radii_upper_right()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void SkRRect::clear_radii_upper_right()
    {
        if (radii_upper_right_ != NULL)
            radii_upper_right_->::cc::proto::PointF::Clear();
        clear_has_radii_upper_right();
    }
    const ::cc::proto::PointF& SkRRect::radii_upper_right() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_upper_right)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_upper_right_ != NULL ? *radii_upper_right_ : *default_instance().radii_upper_right_;
#else
        return radii_upper_right_ != NULL ? *radii_upper_right_ : *default_instance_->radii_upper_right_;
#endif
    }
    ::cc::proto::PointF* SkRRect::mutable_radii_upper_right()
    {
        set_has_radii_upper_right();
        if (radii_upper_right_ == NULL) {
            radii_upper_right_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_upper_right)
        return radii_upper_right_;
    }
    ::cc::proto::PointF* SkRRect::release_radii_upper_right()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_upper_right)
        clear_has_radii_upper_right();
        ::cc::proto::PointF* temp = radii_upper_right_;
        radii_upper_right_ = NULL;
        return temp;
    }
    void SkRRect::set_allocated_radii_upper_right(::cc::proto::PointF* radii_upper_right)
    {
        delete radii_upper_right_;
        radii_upper_right_ = radii_upper_right;
        if (radii_upper_right) {
            set_has_radii_upper_right();
        } else {
            clear_has_radii_upper_right();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_upper_right)
    }

    // optional .cc.proto.PointF radii_lower_right = 4;
    bool SkRRect::has_radii_lower_right() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void SkRRect::set_has_radii_lower_right()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void SkRRect::clear_has_radii_lower_right()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void SkRRect::clear_radii_lower_right()
    {
        if (radii_lower_right_ != NULL)
            radii_lower_right_->::cc::proto::PointF::Clear();
        clear_has_radii_lower_right();
    }
    const ::cc::proto::PointF& SkRRect::radii_lower_right() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_lower_right)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_lower_right_ != NULL ? *radii_lower_right_ : *default_instance().radii_lower_right_;
#else
        return radii_lower_right_ != NULL ? *radii_lower_right_ : *default_instance_->radii_lower_right_;
#endif
    }
    ::cc::proto::PointF* SkRRect::mutable_radii_lower_right()
    {
        set_has_radii_lower_right();
        if (radii_lower_right_ == NULL) {
            radii_lower_right_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_lower_right)
        return radii_lower_right_;
    }
    ::cc::proto::PointF* SkRRect::release_radii_lower_right()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_lower_right)
        clear_has_radii_lower_right();
        ::cc::proto::PointF* temp = radii_lower_right_;
        radii_lower_right_ = NULL;
        return temp;
    }
    void SkRRect::set_allocated_radii_lower_right(::cc::proto::PointF* radii_lower_right)
    {
        delete radii_lower_right_;
        radii_lower_right_ = radii_lower_right;
        if (radii_lower_right) {
            set_has_radii_lower_right();
        } else {
            clear_has_radii_lower_right();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_lower_right)
    }

    // optional .cc.proto.PointF radii_lower_left = 5;
    bool SkRRect::has_radii_lower_left() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void SkRRect::set_has_radii_lower_left()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void SkRRect::clear_has_radii_lower_left()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void SkRRect::clear_radii_lower_left()
    {
        if (radii_lower_left_ != NULL)
            radii_lower_left_->::cc::proto::PointF::Clear();
        clear_has_radii_lower_left();
    }
    const ::cc::proto::PointF& SkRRect::radii_lower_left() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_lower_left)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_lower_left_ != NULL ? *radii_lower_left_ : *default_instance().radii_lower_left_;
#else
        return radii_lower_left_ != NULL ? *radii_lower_left_ : *default_instance_->radii_lower_left_;
#endif
    }
    ::cc::proto::PointF* SkRRect::mutable_radii_lower_left()
    {
        set_has_radii_lower_left();
        if (radii_lower_left_ == NULL) {
            radii_lower_left_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_lower_left)
        return radii_lower_left_;
    }
    ::cc::proto::PointF* SkRRect::release_radii_lower_left()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_lower_left)
        clear_has_radii_lower_left();
        ::cc::proto::PointF* temp = radii_lower_left_;
        radii_lower_left_ = NULL;
        return temp;
    }
    void SkRRect::set_allocated_radii_lower_left(::cc::proto::PointF* radii_lower_left)
    {
        delete radii_lower_left_;
        radii_lower_left_ = radii_lower_left;
        if (radii_lower_left) {
            set_has_radii_lower_left();
        } else {
            clear_has_radii_lower_left();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_lower_left)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)
