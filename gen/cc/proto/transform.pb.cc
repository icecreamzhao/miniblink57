// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transform.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

    void protobuf_ShutdownFile_transform_2eproto()
    {
        delete Transform::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_transform_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_transform_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        Transform::default_instance_ = new Transform();
        Transform::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transform_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_transform_2eproto_once_);
    void protobuf_AddDesc_transform_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_transform_2eproto_once_,
            &protobuf_AddDesc_transform_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_transform_2eproto {
        StaticDescriptorInitializer_transform_2eproto()
        {
            protobuf_AddDesc_transform_2eproto();
        }
    } static_descriptor_initializer_transform_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForTransform(
        Transform* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Transform::kMatrixFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Transform::Transform()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cc.proto.Transform)
    }

    void Transform::InitAsDefaultInstance()
    {
    }

    Transform::Transform(const Transform& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cc.proto.Transform)
    }

    void Transform::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Transform::~Transform()
    {
        // @@protoc_insertion_point(destructor:cc.proto.Transform)
        SharedDtor();
    }

    void Transform::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Transform::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Transform& Transform::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_transform_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_transform_2eproto();
#endif
        return *default_instance_;
    }

    Transform* Transform::default_instance_ = NULL;

    Transform* Transform::New(::google::protobuf::Arena* arena) const
    {
        Transform* n = new Transform;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Transform::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:cc.proto.Transform)
        matrix_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Transform::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForTransform, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:cc.proto.Transform)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // repeated float matrix = 1 [packed = true];
            case 1: {
                if (tag == 10) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, this->mutable_matrix())));
                } else if (tag == 13) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        1, 10, input, this->mutable_matrix())));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:cc.proto.Transform)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:cc.proto.Transform)
        return false;
#undef DO_
    }

    void Transform::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:cc.proto.Transform)
        // repeated float matrix = 1 [packed = true];
        if (this->matrix_size() > 0) {
            ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
            output->WriteVarint32(_matrix_cached_byte_size_);
        }
        for (int i = 0; i < this->matrix_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
                this->matrix(i), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:cc.proto.Transform)
    }

    int Transform::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:cc.proto.Transform)
        int total_size = 0;

        // repeated float matrix = 1 [packed = true];
        {
            int data_size = 0;
            data_size = 4 * this->matrix_size();
            if (data_size > 0) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
            }
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _matrix_cached_byte_size_ = data_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            total_size += data_size;
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Transform::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Transform*>(&from));
    }

    void Transform::MergeFrom(const Transform& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.Transform)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        matrix_.MergeFrom(from.matrix_);
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Transform::CopyFrom(const Transform& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.Transform)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Transform::IsInitialized() const
    {

        return true;
    }

    void Transform::Swap(Transform* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Transform::InternalSwap(Transform* other)
    {
        matrix_.UnsafeArenaSwap(&other->matrix_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Transform::GetTypeName() const
    {
        return "cc.proto.Transform";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Transform

    // repeated float matrix = 1 [packed = true];
    int Transform::matrix_size() const
    {
        return matrix_.size();
    }
    void Transform::clear_matrix()
    {
        matrix_.Clear();
    }
    float Transform::matrix(int index) const
    {
        // @@protoc_insertion_point(field_get:cc.proto.Transform.matrix)
        return matrix_.Get(index);
    }
    void Transform::set_matrix(int index, float value)
    {
        matrix_.Set(index, value);
        // @@protoc_insertion_point(field_set:cc.proto.Transform.matrix)
    }
    void Transform::add_matrix(float value)
    {
        matrix_.Add(value);
        // @@protoc_insertion_point(field_add:cc.proto.Transform.matrix)
    }
    const ::google::protobuf::RepeatedField<float>&
    Transform::matrix() const
    {
        // @@protoc_insertion_point(field_list:cc.proto.Transform.matrix)
        return matrix_;
    }
    ::google::protobuf::RepeatedField<float>*
    Transform::mutable_matrix()
    {
        // @@protoc_insertion_point(field_mutable_list:cc.proto.Transform.matrix)
        return &matrix_;
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)
