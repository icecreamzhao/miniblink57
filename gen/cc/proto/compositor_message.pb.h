// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compositor_message.proto

#ifndef PROTOBUF_compositor_5fmessage_2eproto__INCLUDED
#define PROTOBUF_compositor_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "client_state_update.pb.h"
#include "layer_tree_host.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

    // Internal implementation detail -- do not call these.
    void CC_PROTO_EXPORT protobuf_AddDesc_compositor_5fmessage_2eproto();
    void protobuf_AssignDesc_compositor_5fmessage_2eproto();
    void protobuf_ShutdownFile_compositor_5fmessage_2eproto();

    class CompositorMessage;

    // ===================================================================

    class CC_PROTO_EXPORT CompositorMessage : public ::google::protobuf::MessageLite {
    public:
        CompositorMessage();
        virtual ~CompositorMessage();

        CompositorMessage(const CompositorMessage& from);

        inline CompositorMessage& operator=(const CompositorMessage& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const CompositorMessage& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const CompositorMessage* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(CompositorMessage* other);

        // implements Message ----------------------------------------------

        inline CompositorMessage* New() const { return New(NULL); }

        CompositorMessage* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const CompositorMessage& from);
        void MergeFrom(const CompositorMessage& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(CompositorMessage* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional .cc.proto.LayerTreeHost layer_tree_host = 3;
        bool has_layer_tree_host() const;
        void clear_layer_tree_host();
        static const int kLayerTreeHostFieldNumber = 3;
        const ::cc::proto::LayerTreeHost& layer_tree_host() const;
        ::cc::proto::LayerTreeHost* mutable_layer_tree_host();
        ::cc::proto::LayerTreeHost* release_layer_tree_host();
        void set_allocated_layer_tree_host(::cc::proto::LayerTreeHost* layer_tree_host);

        // optional bool frame_ack = 4;
        bool has_frame_ack() const;
        void clear_frame_ack();
        static const int kFrameAckFieldNumber = 4;
        bool frame_ack() const;
        void set_frame_ack(bool value);

        // optional .cc.proto.ClientStateUpdate client_state_update = 5;
        bool has_client_state_update() const;
        void clear_client_state_update();
        static const int kClientStateUpdateFieldNumber = 5;
        const ::cc::proto::ClientStateUpdate& client_state_update() const;
        ::cc::proto::ClientStateUpdate* mutable_client_state_update();
        ::cc::proto::ClientStateUpdate* release_client_state_update();
        void set_allocated_client_state_update(::cc::proto::ClientStateUpdate* client_state_update);

        // optional bool client_state_update_ack = 6;
        bool has_client_state_update_ack() const;
        void clear_client_state_update_ack();
        static const int kClientStateUpdateAckFieldNumber = 6;
        bool client_state_update_ack() const;
        void set_client_state_update_ack(bool value);

        // @@protoc_insertion_point(class_scope:cc.proto.CompositorMessage)
    private:
        inline void set_has_layer_tree_host();
        inline void clear_has_layer_tree_host();
        inline void set_has_frame_ack();
        inline void clear_has_frame_ack();
        inline void set_has_client_state_update();
        inline void clear_has_client_state_update();
        inline void set_has_client_state_update_ack();
        inline void clear_has_client_state_update_ack();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::cc::proto::LayerTreeHost* layer_tree_host_;
        ::cc::proto::ClientStateUpdate* client_state_update_;
        bool frame_ack_;
        bool client_state_update_ack_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void CC_PROTO_EXPORT protobuf_AddDesc_compositor_5fmessage_2eproto_impl();
#else
        friend void CC_PROTO_EXPORT protobuf_AddDesc_compositor_5fmessage_2eproto();
#endif
        friend void protobuf_AssignDesc_compositor_5fmessage_2eproto();
        friend void protobuf_ShutdownFile_compositor_5fmessage_2eproto();

        void InitAsDefaultInstance();
        static CompositorMessage* default_instance_;
    };
    // ===================================================================

    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // CompositorMessage

    // optional .cc.proto.LayerTreeHost layer_tree_host = 3;
    inline bool CompositorMessage::has_layer_tree_host() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void CompositorMessage::set_has_layer_tree_host()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void CompositorMessage::clear_has_layer_tree_host()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void CompositorMessage::clear_layer_tree_host()
    {
        if (layer_tree_host_ != NULL)
            layer_tree_host_->::cc::proto::LayerTreeHost::Clear();
        clear_has_layer_tree_host();
    }
    inline const ::cc::proto::LayerTreeHost& CompositorMessage::layer_tree_host() const
    {
// @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.layer_tree_host)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return layer_tree_host_ != NULL ? *layer_tree_host_ : *default_instance().layer_tree_host_;
#else
        return layer_tree_host_ != NULL ? *layer_tree_host_ : *default_instance_->layer_tree_host_;
#endif
    }
    inline ::cc::proto::LayerTreeHost* CompositorMessage::mutable_layer_tree_host()
    {
        set_has_layer_tree_host();
        if (layer_tree_host_ == NULL) {
            layer_tree_host_ = new ::cc::proto::LayerTreeHost;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessage.layer_tree_host)
        return layer_tree_host_;
    }
    inline ::cc::proto::LayerTreeHost* CompositorMessage::release_layer_tree_host()
    {
        // @@protoc_insertion_point(field_release:cc.proto.CompositorMessage.layer_tree_host)
        clear_has_layer_tree_host();
        ::cc::proto::LayerTreeHost* temp = layer_tree_host_;
        layer_tree_host_ = NULL;
        return temp;
    }
    inline void CompositorMessage::set_allocated_layer_tree_host(::cc::proto::LayerTreeHost* layer_tree_host)
    {
        delete layer_tree_host_;
        layer_tree_host_ = layer_tree_host;
        if (layer_tree_host) {
            set_has_layer_tree_host();
        } else {
            clear_has_layer_tree_host();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessage.layer_tree_host)
    }

    // optional bool frame_ack = 4;
    inline bool CompositorMessage::has_frame_ack() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void CompositorMessage::set_has_frame_ack()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void CompositorMessage::clear_has_frame_ack()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void CompositorMessage::clear_frame_ack()
    {
        frame_ack_ = false;
        clear_has_frame_ack();
    }
    inline bool CompositorMessage::frame_ack() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.frame_ack)
        return frame_ack_;
    }
    inline void CompositorMessage::set_frame_ack(bool value)
    {
        set_has_frame_ack();
        frame_ack_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.CompositorMessage.frame_ack)
    }

    // optional .cc.proto.ClientStateUpdate client_state_update = 5;
    inline bool CompositorMessage::has_client_state_update() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void CompositorMessage::set_has_client_state_update()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void CompositorMessage::clear_has_client_state_update()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void CompositorMessage::clear_client_state_update()
    {
        if (client_state_update_ != NULL)
            client_state_update_->::cc::proto::ClientStateUpdate::Clear();
        clear_has_client_state_update();
    }
    inline const ::cc::proto::ClientStateUpdate& CompositorMessage::client_state_update() const
    {
// @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.client_state_update)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return client_state_update_ != NULL ? *client_state_update_ : *default_instance().client_state_update_;
#else
        return client_state_update_ != NULL ? *client_state_update_ : *default_instance_->client_state_update_;
#endif
    }
    inline ::cc::proto::ClientStateUpdate* CompositorMessage::mutable_client_state_update()
    {
        set_has_client_state_update();
        if (client_state_update_ == NULL) {
            client_state_update_ = new ::cc::proto::ClientStateUpdate;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.CompositorMessage.client_state_update)
        return client_state_update_;
    }
    inline ::cc::proto::ClientStateUpdate* CompositorMessage::release_client_state_update()
    {
        // @@protoc_insertion_point(field_release:cc.proto.CompositorMessage.client_state_update)
        clear_has_client_state_update();
        ::cc::proto::ClientStateUpdate* temp = client_state_update_;
        client_state_update_ = NULL;
        return temp;
    }
    inline void CompositorMessage::set_allocated_client_state_update(::cc::proto::ClientStateUpdate* client_state_update)
    {
        delete client_state_update_;
        client_state_update_ = client_state_update;
        if (client_state_update) {
            set_has_client_state_update();
        } else {
            clear_has_client_state_update();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.CompositorMessage.client_state_update)
    }

    // optional bool client_state_update_ack = 6;
    inline bool CompositorMessage::has_client_state_update_ack() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    inline void CompositorMessage::set_has_client_state_update_ack()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    inline void CompositorMessage::clear_has_client_state_update_ack()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    inline void CompositorMessage::clear_client_state_update_ack()
    {
        client_state_update_ack_ = false;
        clear_has_client_state_update_ack();
    }
    inline bool CompositorMessage::client_state_update_ack() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.CompositorMessage.client_state_update_ack)
        return client_state_update_ack_;
    }
    inline void CompositorMessage::set_client_state_update_ack(bool value)
    {
        set_has_client_state_update_ack();
        client_state_update_ack_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.CompositorMessage.client_state_update_ack)
    }

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_compositor_5fmessage_2eproto__INCLUDED
