// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rectf.proto

#ifndef PROTOBUF_rectf_2eproto__INCLUDED
#define PROTOBUF_rectf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "pointf.pb.h"
#include "sizef.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

    // Internal implementation detail -- do not call these.
    void CC_PROTO_EXPORT protobuf_AddDesc_rectf_2eproto();
    void protobuf_AssignDesc_rectf_2eproto();
    void protobuf_ShutdownFile_rectf_2eproto();

    class RectF;

    // ===================================================================

    class CC_PROTO_EXPORT RectF : public ::google::protobuf::MessageLite {
    public:
        RectF();
        virtual ~RectF();

        RectF(const RectF& from);

        inline RectF& operator=(const RectF& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const RectF& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const RectF* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(RectF* other);

        // implements Message ----------------------------------------------

        inline RectF* New() const { return New(NULL); }

        RectF* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const RectF& from);
        void MergeFrom(const RectF& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(RectF* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional .cc.proto.PointF origin = 1;
        bool has_origin() const;
        void clear_origin();
        static const int kOriginFieldNumber = 1;
        const ::cc::proto::PointF& origin() const;
        ::cc::proto::PointF* mutable_origin();
        ::cc::proto::PointF* release_origin();
        void set_allocated_origin(::cc::proto::PointF* origin);

        // optional .cc.proto.SizeF size = 2;
        bool has_size() const;
        void clear_size();
        static const int kSizeFieldNumber = 2;
        const ::cc::proto::SizeF& size() const;
        ::cc::proto::SizeF* mutable_size();
        ::cc::proto::SizeF* release_size();
        void set_allocated_size(::cc::proto::SizeF* size);

        // @@protoc_insertion_point(class_scope:cc.proto.RectF)
    private:
        inline void set_has_origin();
        inline void clear_has_origin();
        inline void set_has_size();
        inline void clear_has_size();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::cc::proto::PointF* origin_;
        ::cc::proto::SizeF* size_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void CC_PROTO_EXPORT protobuf_AddDesc_rectf_2eproto_impl();
#else
        friend void CC_PROTO_EXPORT protobuf_AddDesc_rectf_2eproto();
#endif
        friend void protobuf_AssignDesc_rectf_2eproto();
        friend void protobuf_ShutdownFile_rectf_2eproto();

        void InitAsDefaultInstance();
        static RectF* default_instance_;
    };
    // ===================================================================

    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // RectF

    // optional .cc.proto.PointF origin = 1;
    inline bool RectF::has_origin() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void RectF::set_has_origin()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void RectF::clear_has_origin()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void RectF::clear_origin()
    {
        if (origin_ != NULL)
            origin_->::cc::proto::PointF::Clear();
        clear_has_origin();
    }
    inline const ::cc::proto::PointF& RectF::origin() const
    {
// @@protoc_insertion_point(field_get:cc.proto.RectF.origin)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return origin_ != NULL ? *origin_ : *default_instance().origin_;
#else
        return origin_ != NULL ? *origin_ : *default_instance_->origin_;
#endif
    }
    inline ::cc::proto::PointF* RectF::mutable_origin()
    {
        set_has_origin();
        if (origin_ == NULL) {
            origin_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.RectF.origin)
        return origin_;
    }
    inline ::cc::proto::PointF* RectF::release_origin()
    {
        // @@protoc_insertion_point(field_release:cc.proto.RectF.origin)
        clear_has_origin();
        ::cc::proto::PointF* temp = origin_;
        origin_ = NULL;
        return temp;
    }
    inline void RectF::set_allocated_origin(::cc::proto::PointF* origin)
    {
        delete origin_;
        origin_ = origin;
        if (origin) {
            set_has_origin();
        } else {
            clear_has_origin();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.RectF.origin)
    }

    // optional .cc.proto.SizeF size = 2;
    inline bool RectF::has_size() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void RectF::set_has_size()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void RectF::clear_has_size()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void RectF::clear_size()
    {
        if (size_ != NULL)
            size_->::cc::proto::SizeF::Clear();
        clear_has_size();
    }
    inline const ::cc::proto::SizeF& RectF::size() const
    {
// @@protoc_insertion_point(field_get:cc.proto.RectF.size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return size_ != NULL ? *size_ : *default_instance().size_;
#else
        return size_ != NULL ? *size_ : *default_instance_->size_;
#endif
    }
    inline ::cc::proto::SizeF* RectF::mutable_size()
    {
        set_has_size();
        if (size_ == NULL) {
            size_ = new ::cc::proto::SizeF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.RectF.size)
        return size_;
    }
    inline ::cc::proto::SizeF* RectF::release_size()
    {
        // @@protoc_insertion_point(field_release:cc.proto.RectF.size)
        clear_has_size();
        ::cc::proto::SizeF* temp = size_;
        size_ = NULL;
        return temp;
    }
    inline void RectF::set_allocated_size(::cc::proto::SizeF* size)
    {
        delete size_;
        size_ = size;
        if (size) {
            set_has_size();
        } else {
            clear_has_size();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.RectF.size)
    }

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_rectf_2eproto__INCLUDED
