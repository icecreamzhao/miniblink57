// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layer_sticky_position_constraint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layer_sticky_position_constraint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

    void protobuf_ShutdownFile_layer_5fsticky_5fposition_5fconstraint_2eproto()
    {
        delete LayerStickyPositionConstraint::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        ::cc::proto::protobuf_AddDesc_point_2eproto();
        ::cc::proto::protobuf_AddDesc_rect_2eproto();
        ::cc::proto::protobuf_AddDesc_transform_2eproto();
        LayerStickyPositionConstraint::default_instance_ = new LayerStickyPositionConstraint();
        LayerStickyPositionConstraint::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layer_5fsticky_5fposition_5fconstraint_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto_once_);
    void protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto_once_,
            &protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_layer_5fsticky_5fposition_5fconstraint_2eproto {
        StaticDescriptorInitializer_layer_5fsticky_5fposition_5fconstraint_2eproto()
        {
            protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
        }
    } static_descriptor_initializer_layer_5fsticky_5fposition_5fconstraint_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForLayerStickyPositionConstraint(
        LayerStickyPositionConstraint* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int LayerStickyPositionConstraint::kIsStickyFieldNumber;
    const int LayerStickyPositionConstraint::kIsAnchoredLeftFieldNumber;
    const int LayerStickyPositionConstraint::kIsAnchoredRightFieldNumber;
    const int LayerStickyPositionConstraint::kIsAnchoredTopFieldNumber;
    const int LayerStickyPositionConstraint::kIsAnchoredBottomFieldNumber;
    const int LayerStickyPositionConstraint::kLeftOffsetFieldNumber;
    const int LayerStickyPositionConstraint::kRightOffsetFieldNumber;
    const int LayerStickyPositionConstraint::kTopOffsetFieldNumber;
    const int LayerStickyPositionConstraint::kBottomOffsetFieldNumber;
    const int LayerStickyPositionConstraint::kParentRelativeStickyBoxOffsetFieldNumber;
    const int LayerStickyPositionConstraint::kScrollContainerRelativeStickyBoxRectFieldNumber;
    const int LayerStickyPositionConstraint::kScrollContainerRelativeContainingBlockRectFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    LayerStickyPositionConstraint::LayerStickyPositionConstraint()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cc.proto.LayerStickyPositionConstraint)
    }

    void LayerStickyPositionConstraint::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        parent_relative_sticky_box_offset_ = const_cast<::cc::proto::Point*>(
            ::cc::proto::Point::internal_default_instance());
#else
        parent_relative_sticky_box_offset_ = const_cast<::cc::proto::Point*>(&::cc::proto::Point::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        scroll_container_relative_sticky_box_rect_ = const_cast<::cc::proto::Rect*>(
            ::cc::proto::Rect::internal_default_instance());
#else
        scroll_container_relative_sticky_box_rect_ = const_cast<::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        scroll_container_relative_containing_block_rect_ = const_cast<::cc::proto::Rect*>(
            ::cc::proto::Rect::internal_default_instance());
#else
        scroll_container_relative_containing_block_rect_ = const_cast<::cc::proto::Rect*>(&::cc::proto::Rect::default_instance());
#endif
    }

    LayerStickyPositionConstraint::LayerStickyPositionConstraint(const LayerStickyPositionConstraint& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cc.proto.LayerStickyPositionConstraint)
    }

    void LayerStickyPositionConstraint::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        is_sticky_ = false;
        is_anchored_left_ = false;
        is_anchored_right_ = false;
        is_anchored_top_ = false;
        is_anchored_bottom_ = false;
        left_offset_ = 0;
        right_offset_ = 0;
        top_offset_ = 0;
        bottom_offset_ = 0;
        parent_relative_sticky_box_offset_ = NULL;
        scroll_container_relative_sticky_box_rect_ = NULL;
        scroll_container_relative_containing_block_rect_ = NULL;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    LayerStickyPositionConstraint::~LayerStickyPositionConstraint()
    {
        // @@protoc_insertion_point(destructor:cc.proto.LayerStickyPositionConstraint)
        SharedDtor();
    }

    void LayerStickyPositionConstraint::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete parent_relative_sticky_box_offset_;
            delete scroll_container_relative_sticky_box_rect_;
            delete scroll_container_relative_containing_block_rect_;
        }
    }

    void LayerStickyPositionConstraint::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const LayerStickyPositionConstraint& LayerStickyPositionConstraint::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_layer_5fsticky_5fposition_5fconstraint_2eproto();
#endif
        return *default_instance_;
    }

    LayerStickyPositionConstraint* LayerStickyPositionConstraint::default_instance_ = NULL;

    LayerStickyPositionConstraint* LayerStickyPositionConstraint::New(::google::protobuf::Arena* arena) const
    {
        LayerStickyPositionConstraint* n = new LayerStickyPositionConstraint;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void LayerStickyPositionConstraint::Clear()
    {
// @@protoc_insertion_point(message_clear_start:cc.proto.LayerStickyPositionConstraint)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                   \
    _Pragma("clang diagnostic push")                                                                                    \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(LayerStickyPositionConstraint, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<LayerStickyPositionConstraint*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 255u) {
            ZR_(is_sticky_, top_offset_);
        }
        if (_has_bits_[8 / 32] & 3840u) {
            bottom_offset_ = 0;
            if (has_parent_relative_sticky_box_offset()) {
                if (parent_relative_sticky_box_offset_ != NULL)
                    parent_relative_sticky_box_offset_->::cc::proto::Point::Clear();
            }
            if (has_scroll_container_relative_sticky_box_rect()) {
                if (scroll_container_relative_sticky_box_rect_ != NULL)
                    scroll_container_relative_sticky_box_rect_->::cc::proto::Rect::Clear();
            }
            if (has_scroll_container_relative_containing_block_rect()) {
                if (scroll_container_relative_containing_block_rect_ != NULL)
                    scroll_container_relative_containing_block_rect_->::cc::proto::Rect::Clear();
            }
        }

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool LayerStickyPositionConstraint::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForLayerStickyPositionConstraint, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:cc.proto.LayerStickyPositionConstraint)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional bool is_sticky = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &is_sticky_)));
                    set_has_is_sticky();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_is_anchored_left;
                break;
            }

            // optional bool is_anchored_left = 2;
            case 2: {
                if (tag == 16) {
                parse_is_anchored_left:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &is_anchored_left_)));
                    set_has_is_anchored_left();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_is_anchored_right;
                break;
            }

            // optional bool is_anchored_right = 3;
            case 3: {
                if (tag == 24) {
                parse_is_anchored_right:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &is_anchored_right_)));
                    set_has_is_anchored_right();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32))
                    goto parse_is_anchored_top;
                break;
            }

            // optional bool is_anchored_top = 4;
            case 4: {
                if (tag == 32) {
                parse_is_anchored_top:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &is_anchored_top_)));
                    set_has_is_anchored_top();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(40))
                    goto parse_is_anchored_bottom;
                break;
            }

            // optional bool is_anchored_bottom = 5;
            case 5: {
                if (tag == 40) {
                parse_is_anchored_bottom:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &is_anchored_bottom_)));
                    set_has_is_anchored_bottom();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(53))
                    goto parse_left_offset;
                break;
            }

            // optional float left_offset = 6;
            case 6: {
                if (tag == 53) {
                parse_left_offset:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &left_offset_)));
                    set_has_left_offset();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(61))
                    goto parse_right_offset;
                break;
            }

            // optional float right_offset = 7;
            case 7: {
                if (tag == 61) {
                parse_right_offset:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &right_offset_)));
                    set_has_right_offset();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(69))
                    goto parse_top_offset;
                break;
            }

            // optional float top_offset = 8;
            case 8: {
                if (tag == 69) {
                parse_top_offset:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &top_offset_)));
                    set_has_top_offset();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(77))
                    goto parse_bottom_offset;
                break;
            }

            // optional float bottom_offset = 9;
            case 9: {
                if (tag == 77) {
                parse_bottom_offset:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &bottom_offset_)));
                    set_has_bottom_offset();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(82))
                    goto parse_scroll_container_relative_sticky_box_rect;
                break;
            }

            // optional .cc.proto.Rect scroll_container_relative_sticky_box_rect = 10;
            case 10: {
                if (tag == 82) {
                parse_scroll_container_relative_sticky_box_rect:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_scroll_container_relative_sticky_box_rect()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(90))
                    goto parse_scroll_container_relative_containing_block_rect;
                break;
            }

            // optional .cc.proto.Rect scroll_container_relative_containing_block_rect = 11;
            case 11: {
                if (tag == 90) {
                parse_scroll_container_relative_containing_block_rect:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_scroll_container_relative_containing_block_rect()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(98))
                    goto parse_parent_relative_sticky_box_offset;
                break;
            }

            // optional .cc.proto.Point parent_relative_sticky_box_offset = 12;
            case 12: {
                if (tag == 98) {
                parse_parent_relative_sticky_box_offset:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_parent_relative_sticky_box_offset()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:cc.proto.LayerStickyPositionConstraint)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:cc.proto.LayerStickyPositionConstraint)
        return false;
#undef DO_
    }

    void LayerStickyPositionConstraint::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:cc.proto.LayerStickyPositionConstraint)
        // optional bool is_sticky = 1;
        if (has_is_sticky()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_sticky(), output);
        }

        // optional bool is_anchored_left = 2;
        if (has_is_anchored_left()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_anchored_left(), output);
        }

        // optional bool is_anchored_right = 3;
        if (has_is_anchored_right()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_anchored_right(), output);
        }

        // optional bool is_anchored_top = 4;
        if (has_is_anchored_top()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_anchored_top(), output);
        }

        // optional bool is_anchored_bottom = 5;
        if (has_is_anchored_bottom()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_anchored_bottom(), output);
        }

        // optional float left_offset = 6;
        if (has_left_offset()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->left_offset(), output);
        }

        // optional float right_offset = 7;
        if (has_right_offset()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_offset(), output);
        }

        // optional float top_offset = 8;
        if (has_top_offset()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->top_offset(), output);
        }

        // optional float bottom_offset = 9;
        if (has_bottom_offset()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bottom_offset(), output);
        }

        // optional .cc.proto.Rect scroll_container_relative_sticky_box_rect = 10;
        if (has_scroll_container_relative_sticky_box_rect()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                10, *this->scroll_container_relative_sticky_box_rect_, output);
        }

        // optional .cc.proto.Rect scroll_container_relative_containing_block_rect = 11;
        if (has_scroll_container_relative_containing_block_rect()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                11, *this->scroll_container_relative_containing_block_rect_, output);
        }

        // optional .cc.proto.Point parent_relative_sticky_box_offset = 12;
        if (has_parent_relative_sticky_box_offset()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                12, *this->parent_relative_sticky_box_offset_, output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:cc.proto.LayerStickyPositionConstraint)
    }

    int LayerStickyPositionConstraint::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:cc.proto.LayerStickyPositionConstraint)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 255u) {
            // optional bool is_sticky = 1;
            if (has_is_sticky()) {
                total_size += 1 + 1;
            }

            // optional bool is_anchored_left = 2;
            if (has_is_anchored_left()) {
                total_size += 1 + 1;
            }

            // optional bool is_anchored_right = 3;
            if (has_is_anchored_right()) {
                total_size += 1 + 1;
            }

            // optional bool is_anchored_top = 4;
            if (has_is_anchored_top()) {
                total_size += 1 + 1;
            }

            // optional bool is_anchored_bottom = 5;
            if (has_is_anchored_bottom()) {
                total_size += 1 + 1;
            }

            // optional float left_offset = 6;
            if (has_left_offset()) {
                total_size += 1 + 4;
            }

            // optional float right_offset = 7;
            if (has_right_offset()) {
                total_size += 1 + 4;
            }

            // optional float top_offset = 8;
            if (has_top_offset()) {
                total_size += 1 + 4;
            }
        }
        if (_has_bits_[8 / 32] & 3840u) {
            // optional float bottom_offset = 9;
            if (has_bottom_offset()) {
                total_size += 1 + 4;
            }

            // optional .cc.proto.Point parent_relative_sticky_box_offset = 12;
            if (has_parent_relative_sticky_box_offset()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->parent_relative_sticky_box_offset_);
            }

            // optional .cc.proto.Rect scroll_container_relative_sticky_box_rect = 10;
            if (has_scroll_container_relative_sticky_box_rect()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->scroll_container_relative_sticky_box_rect_);
            }

            // optional .cc.proto.Rect scroll_container_relative_containing_block_rect = 11;
            if (has_scroll_container_relative_containing_block_rect()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->scroll_container_relative_containing_block_rect_);
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void LayerStickyPositionConstraint::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const LayerStickyPositionConstraint*>(&from));
    }

    void LayerStickyPositionConstraint::MergeFrom(const LayerStickyPositionConstraint& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.LayerStickyPositionConstraint)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_is_sticky()) {
                set_is_sticky(from.is_sticky());
            }
            if (from.has_is_anchored_left()) {
                set_is_anchored_left(from.is_anchored_left());
            }
            if (from.has_is_anchored_right()) {
                set_is_anchored_right(from.is_anchored_right());
            }
            if (from.has_is_anchored_top()) {
                set_is_anchored_top(from.is_anchored_top());
            }
            if (from.has_is_anchored_bottom()) {
                set_is_anchored_bottom(from.is_anchored_bottom());
            }
            if (from.has_left_offset()) {
                set_left_offset(from.left_offset());
            }
            if (from.has_right_offset()) {
                set_right_offset(from.right_offset());
            }
            if (from.has_top_offset()) {
                set_top_offset(from.top_offset());
            }
        }
        if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
            if (from.has_bottom_offset()) {
                set_bottom_offset(from.bottom_offset());
            }
            if (from.has_parent_relative_sticky_box_offset()) {
                mutable_parent_relative_sticky_box_offset()->::cc::proto::Point::MergeFrom(from.parent_relative_sticky_box_offset());
            }
            if (from.has_scroll_container_relative_sticky_box_rect()) {
                mutable_scroll_container_relative_sticky_box_rect()->::cc::proto::Rect::MergeFrom(from.scroll_container_relative_sticky_box_rect());
            }
            if (from.has_scroll_container_relative_containing_block_rect()) {
                mutable_scroll_container_relative_containing_block_rect()->::cc::proto::Rect::MergeFrom(from.scroll_container_relative_containing_block_rect());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void LayerStickyPositionConstraint::CopyFrom(const LayerStickyPositionConstraint& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.LayerStickyPositionConstraint)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool LayerStickyPositionConstraint::IsInitialized() const
    {

        return true;
    }

    void LayerStickyPositionConstraint::Swap(LayerStickyPositionConstraint* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void LayerStickyPositionConstraint::InternalSwap(LayerStickyPositionConstraint* other)
    {
        std::swap(is_sticky_, other->is_sticky_);
        std::swap(is_anchored_left_, other->is_anchored_left_);
        std::swap(is_anchored_right_, other->is_anchored_right_);
        std::swap(is_anchored_top_, other->is_anchored_top_);
        std::swap(is_anchored_bottom_, other->is_anchored_bottom_);
        std::swap(left_offset_, other->left_offset_);
        std::swap(right_offset_, other->right_offset_);
        std::swap(top_offset_, other->top_offset_);
        std::swap(bottom_offset_, other->bottom_offset_);
        std::swap(parent_relative_sticky_box_offset_, other->parent_relative_sticky_box_offset_);
        std::swap(scroll_container_relative_sticky_box_rect_, other->scroll_container_relative_sticky_box_rect_);
        std::swap(scroll_container_relative_containing_block_rect_, other->scroll_container_relative_containing_block_rect_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string LayerStickyPositionConstraint::GetTypeName() const
    {
        return "cc.proto.LayerStickyPositionConstraint";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // LayerStickyPositionConstraint

    // optional bool is_sticky = 1;
    bool LayerStickyPositionConstraint::has_is_sticky() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_is_sticky()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void LayerStickyPositionConstraint::clear_has_is_sticky()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void LayerStickyPositionConstraint::clear_is_sticky()
    {
        is_sticky_ = false;
        clear_has_is_sticky();
    }
    bool LayerStickyPositionConstraint::is_sticky() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_sticky)
        return is_sticky_;
    }
    void LayerStickyPositionConstraint::set_is_sticky(bool value)
    {
        set_has_is_sticky();
        is_sticky_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_sticky)
    }

    // optional bool is_anchored_left = 2;
    bool LayerStickyPositionConstraint::has_is_anchored_left() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_is_anchored_left()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void LayerStickyPositionConstraint::clear_has_is_anchored_left()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void LayerStickyPositionConstraint::clear_is_anchored_left()
    {
        is_anchored_left_ = false;
        clear_has_is_anchored_left();
    }
    bool LayerStickyPositionConstraint::is_anchored_left() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_left)
        return is_anchored_left_;
    }
    void LayerStickyPositionConstraint::set_is_anchored_left(bool value)
    {
        set_has_is_anchored_left();
        is_anchored_left_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_left)
    }

    // optional bool is_anchored_right = 3;
    bool LayerStickyPositionConstraint::has_is_anchored_right() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_is_anchored_right()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void LayerStickyPositionConstraint::clear_has_is_anchored_right()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void LayerStickyPositionConstraint::clear_is_anchored_right()
    {
        is_anchored_right_ = false;
        clear_has_is_anchored_right();
    }
    bool LayerStickyPositionConstraint::is_anchored_right() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_right)
        return is_anchored_right_;
    }
    void LayerStickyPositionConstraint::set_is_anchored_right(bool value)
    {
        set_has_is_anchored_right();
        is_anchored_right_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_right)
    }

    // optional bool is_anchored_top = 4;
    bool LayerStickyPositionConstraint::has_is_anchored_top() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_is_anchored_top()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void LayerStickyPositionConstraint::clear_has_is_anchored_top()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void LayerStickyPositionConstraint::clear_is_anchored_top()
    {
        is_anchored_top_ = false;
        clear_has_is_anchored_top();
    }
    bool LayerStickyPositionConstraint::is_anchored_top() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_top)
        return is_anchored_top_;
    }
    void LayerStickyPositionConstraint::set_is_anchored_top(bool value)
    {
        set_has_is_anchored_top();
        is_anchored_top_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_top)
    }

    // optional bool is_anchored_bottom = 5;
    bool LayerStickyPositionConstraint::has_is_anchored_bottom() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_is_anchored_bottom()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void LayerStickyPositionConstraint::clear_has_is_anchored_bottom()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void LayerStickyPositionConstraint::clear_is_anchored_bottom()
    {
        is_anchored_bottom_ = false;
        clear_has_is_anchored_bottom();
    }
    bool LayerStickyPositionConstraint::is_anchored_bottom() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.is_anchored_bottom)
        return is_anchored_bottom_;
    }
    void LayerStickyPositionConstraint::set_is_anchored_bottom(bool value)
    {
        set_has_is_anchored_bottom();
        is_anchored_bottom_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.is_anchored_bottom)
    }

    // optional float left_offset = 6;
    bool LayerStickyPositionConstraint::has_left_offset() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_left_offset()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void LayerStickyPositionConstraint::clear_has_left_offset()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void LayerStickyPositionConstraint::clear_left_offset()
    {
        left_offset_ = 0;
        clear_has_left_offset();
    }
    float LayerStickyPositionConstraint::left_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.left_offset)
        return left_offset_;
    }
    void LayerStickyPositionConstraint::set_left_offset(float value)
    {
        set_has_left_offset();
        left_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.left_offset)
    }

    // optional float right_offset = 7;
    bool LayerStickyPositionConstraint::has_right_offset() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_right_offset()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void LayerStickyPositionConstraint::clear_has_right_offset()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void LayerStickyPositionConstraint::clear_right_offset()
    {
        right_offset_ = 0;
        clear_has_right_offset();
    }
    float LayerStickyPositionConstraint::right_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.right_offset)
        return right_offset_;
    }
    void LayerStickyPositionConstraint::set_right_offset(float value)
    {
        set_has_right_offset();
        right_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.right_offset)
    }

    // optional float top_offset = 8;
    bool LayerStickyPositionConstraint::has_top_offset() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_top_offset()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    void LayerStickyPositionConstraint::clear_has_top_offset()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    void LayerStickyPositionConstraint::clear_top_offset()
    {
        top_offset_ = 0;
        clear_has_top_offset();
    }
    float LayerStickyPositionConstraint::top_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.top_offset)
        return top_offset_;
    }
    void LayerStickyPositionConstraint::set_top_offset(float value)
    {
        set_has_top_offset();
        top_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.top_offset)
    }

    // optional float bottom_offset = 9;
    bool LayerStickyPositionConstraint::has_bottom_offset() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_bottom_offset()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    void LayerStickyPositionConstraint::clear_has_bottom_offset()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    void LayerStickyPositionConstraint::clear_bottom_offset()
    {
        bottom_offset_ = 0;
        clear_has_bottom_offset();
    }
    float LayerStickyPositionConstraint::bottom_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.bottom_offset)
        return bottom_offset_;
    }
    void LayerStickyPositionConstraint::set_bottom_offset(float value)
    {
        set_has_bottom_offset();
        bottom_offset_ = value;
        // @@protoc_insertion_point(field_set:cc.proto.LayerStickyPositionConstraint.bottom_offset)
    }

    // optional .cc.proto.Point parent_relative_sticky_box_offset = 12;
    bool LayerStickyPositionConstraint::has_parent_relative_sticky_box_offset() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_parent_relative_sticky_box_offset()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    void LayerStickyPositionConstraint::clear_has_parent_relative_sticky_box_offset()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    void LayerStickyPositionConstraint::clear_parent_relative_sticky_box_offset()
    {
        if (parent_relative_sticky_box_offset_ != NULL)
            parent_relative_sticky_box_offset_->::cc::proto::Point::Clear();
        clear_has_parent_relative_sticky_box_offset();
    }
    const ::cc::proto::Point& LayerStickyPositionConstraint::parent_relative_sticky_box_offset() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return parent_relative_sticky_box_offset_ != NULL ? *parent_relative_sticky_box_offset_ : *default_instance().parent_relative_sticky_box_offset_;
#else
        return parent_relative_sticky_box_offset_ != NULL ? *parent_relative_sticky_box_offset_ : *default_instance_->parent_relative_sticky_box_offset_;
#endif
    }
    ::cc::proto::Point* LayerStickyPositionConstraint::mutable_parent_relative_sticky_box_offset()
    {
        set_has_parent_relative_sticky_box_offset();
        if (parent_relative_sticky_box_offset_ == NULL) {
            parent_relative_sticky_box_offset_ = new ::cc::proto::Point;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
        return parent_relative_sticky_box_offset_;
    }
    ::cc::proto::Point* LayerStickyPositionConstraint::release_parent_relative_sticky_box_offset()
    {
        // @@protoc_insertion_point(field_release:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
        clear_has_parent_relative_sticky_box_offset();
        ::cc::proto::Point* temp = parent_relative_sticky_box_offset_;
        parent_relative_sticky_box_offset_ = NULL;
        return temp;
    }
    void LayerStickyPositionConstraint::set_allocated_parent_relative_sticky_box_offset(::cc::proto::Point* parent_relative_sticky_box_offset)
    {
        delete parent_relative_sticky_box_offset_;
        parent_relative_sticky_box_offset_ = parent_relative_sticky_box_offset;
        if (parent_relative_sticky_box_offset) {
            set_has_parent_relative_sticky_box_offset();
        } else {
            clear_has_parent_relative_sticky_box_offset();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerStickyPositionConstraint.parent_relative_sticky_box_offset)
    }

    // optional .cc.proto.Rect scroll_container_relative_sticky_box_rect = 10;
    bool LayerStickyPositionConstraint::has_scroll_container_relative_sticky_box_rect() const
    {
        return (_has_bits_[0] & 0x00000400u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_scroll_container_relative_sticky_box_rect()
    {
        _has_bits_[0] |= 0x00000400u;
    }
    void LayerStickyPositionConstraint::clear_has_scroll_container_relative_sticky_box_rect()
    {
        _has_bits_[0] &= ~0x00000400u;
    }
    void LayerStickyPositionConstraint::clear_scroll_container_relative_sticky_box_rect()
    {
        if (scroll_container_relative_sticky_box_rect_ != NULL)
            scroll_container_relative_sticky_box_rect_->::cc::proto::Rect::Clear();
        clear_has_scroll_container_relative_sticky_box_rect();
    }
    const ::cc::proto::Rect& LayerStickyPositionConstraint::scroll_container_relative_sticky_box_rect() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return scroll_container_relative_sticky_box_rect_ != NULL ? *scroll_container_relative_sticky_box_rect_ : *default_instance().scroll_container_relative_sticky_box_rect_;
#else
        return scroll_container_relative_sticky_box_rect_ != NULL ? *scroll_container_relative_sticky_box_rect_ : *default_instance_->scroll_container_relative_sticky_box_rect_;
#endif
    }
    ::cc::proto::Rect* LayerStickyPositionConstraint::mutable_scroll_container_relative_sticky_box_rect()
    {
        set_has_scroll_container_relative_sticky_box_rect();
        if (scroll_container_relative_sticky_box_rect_ == NULL) {
            scroll_container_relative_sticky_box_rect_ = new ::cc::proto::Rect;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
        return scroll_container_relative_sticky_box_rect_;
    }
    ::cc::proto::Rect* LayerStickyPositionConstraint::release_scroll_container_relative_sticky_box_rect()
    {
        // @@protoc_insertion_point(field_release:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
        clear_has_scroll_container_relative_sticky_box_rect();
        ::cc::proto::Rect* temp = scroll_container_relative_sticky_box_rect_;
        scroll_container_relative_sticky_box_rect_ = NULL;
        return temp;
    }
    void LayerStickyPositionConstraint::set_allocated_scroll_container_relative_sticky_box_rect(::cc::proto::Rect* scroll_container_relative_sticky_box_rect)
    {
        delete scroll_container_relative_sticky_box_rect_;
        scroll_container_relative_sticky_box_rect_ = scroll_container_relative_sticky_box_rect;
        if (scroll_container_relative_sticky_box_rect) {
            set_has_scroll_container_relative_sticky_box_rect();
        } else {
            clear_has_scroll_container_relative_sticky_box_rect();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_sticky_box_rect)
    }

    // optional .cc.proto.Rect scroll_container_relative_containing_block_rect = 11;
    bool LayerStickyPositionConstraint::has_scroll_container_relative_containing_block_rect() const
    {
        return (_has_bits_[0] & 0x00000800u) != 0;
    }
    void LayerStickyPositionConstraint::set_has_scroll_container_relative_containing_block_rect()
    {
        _has_bits_[0] |= 0x00000800u;
    }
    void LayerStickyPositionConstraint::clear_has_scroll_container_relative_containing_block_rect()
    {
        _has_bits_[0] &= ~0x00000800u;
    }
    void LayerStickyPositionConstraint::clear_scroll_container_relative_containing_block_rect()
    {
        if (scroll_container_relative_containing_block_rect_ != NULL)
            scroll_container_relative_containing_block_rect_->::cc::proto::Rect::Clear();
        clear_has_scroll_container_relative_containing_block_rect();
    }
    const ::cc::proto::Rect& LayerStickyPositionConstraint::scroll_container_relative_containing_block_rect() const
    {
        // @@protoc_insertion_point(field_get:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return scroll_container_relative_containing_block_rect_ != NULL ? *scroll_container_relative_containing_block_rect_ : *default_instance().scroll_container_relative_containing_block_rect_;
#else
        return scroll_container_relative_containing_block_rect_ != NULL ? *scroll_container_relative_containing_block_rect_ : *default_instance_->scroll_container_relative_containing_block_rect_;
#endif
    }
    ::cc::proto::Rect* LayerStickyPositionConstraint::mutable_scroll_container_relative_containing_block_rect()
    {
        set_has_scroll_container_relative_containing_block_rect();
        if (scroll_container_relative_containing_block_rect_ == NULL) {
            scroll_container_relative_containing_block_rect_ = new ::cc::proto::Rect;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
        return scroll_container_relative_containing_block_rect_;
    }
    ::cc::proto::Rect* LayerStickyPositionConstraint::release_scroll_container_relative_containing_block_rect()
    {
        // @@protoc_insertion_point(field_release:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
        clear_has_scroll_container_relative_containing_block_rect();
        ::cc::proto::Rect* temp = scroll_container_relative_containing_block_rect_;
        scroll_container_relative_containing_block_rect_ = NULL;
        return temp;
    }
    void LayerStickyPositionConstraint::set_allocated_scroll_container_relative_containing_block_rect(::cc::proto::Rect* scroll_container_relative_containing_block_rect)
    {
        delete scroll_container_relative_containing_block_rect_;
        scroll_container_relative_containing_block_rect_ = scroll_container_relative_containing_block_rect;
        if (scroll_container_relative_containing_block_rect) {
            set_has_scroll_container_relative_containing_block_rect();
        } else {
            clear_has_scroll_container_relative_containing_block_rect();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.LayerStickyPositionConstraint.scroll_container_relative_containing_block_rect)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)
