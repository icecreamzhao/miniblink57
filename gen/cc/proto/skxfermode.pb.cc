// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skxfermode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skxfermode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cc {
namespace proto {

    void protobuf_ShutdownFile_skxfermode_2eproto()
    {
        delete SkXfermode::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_skxfermode_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_skxfermode_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        SkXfermode::default_instance_ = new SkXfermode();
        SkXfermode::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skxfermode_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_skxfermode_2eproto_once_);
    void protobuf_AddDesc_skxfermode_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_skxfermode_2eproto_once_,
            &protobuf_AddDesc_skxfermode_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_skxfermode_2eproto {
        StaticDescriptorInitializer_skxfermode_2eproto()
        {
            protobuf_AddDesc_skxfermode_2eproto();
        }
    } static_descriptor_initializer_skxfermode_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForSkXfermode(
        SkXfermode* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    bool SkXfermode_Mode_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
            return true;
        default:
            return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const SkXfermode_Mode SkXfermode::CLEAR_;
    const SkXfermode_Mode SkXfermode::SRC;
    const SkXfermode_Mode SkXfermode::DST;
    const SkXfermode_Mode SkXfermode::SRC_OVER;
    const SkXfermode_Mode SkXfermode::DST_OVER;
    const SkXfermode_Mode SkXfermode::SRC_IN;
    const SkXfermode_Mode SkXfermode::DST_IN;
    const SkXfermode_Mode SkXfermode::SRC_OUT;
    const SkXfermode_Mode SkXfermode::DST_OUT;
    const SkXfermode_Mode SkXfermode::SRC_A_TOP;
    const SkXfermode_Mode SkXfermode::DST_A_TOP;
    const SkXfermode_Mode SkXfermode::XOR;
    const SkXfermode_Mode SkXfermode::PLUS;
    const SkXfermode_Mode SkXfermode::MODULATE;
    const SkXfermode_Mode SkXfermode::SCREEN;
    const SkXfermode_Mode SkXfermode::OVERLAY;
    const SkXfermode_Mode SkXfermode::DARKEN;
    const SkXfermode_Mode SkXfermode::LIGHTEN;
    const SkXfermode_Mode SkXfermode::COLOR_DODGE;
    const SkXfermode_Mode SkXfermode::COLOR_BURN;
    const SkXfermode_Mode SkXfermode::HARD_LIGHT;
    const SkXfermode_Mode SkXfermode::SOFT_LIGHT;
    const SkXfermode_Mode SkXfermode::DIFFERENCE_;
    const SkXfermode_Mode SkXfermode::EXCLUSION;
    const SkXfermode_Mode SkXfermode::MULTIPLY;
    const SkXfermode_Mode SkXfermode::HUE;
    const SkXfermode_Mode SkXfermode::SATURATION;
    const SkXfermode_Mode SkXfermode::COLOR;
    const SkXfermode_Mode SkXfermode::LUMINOSITY;
    const SkXfermode_Mode SkXfermode::Mode_MIN;
    const SkXfermode_Mode SkXfermode::Mode_MAX;
    const int SkXfermode::Mode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    SkXfermode::SkXfermode()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cc.proto.SkXfermode)
    }

    void SkXfermode::InitAsDefaultInstance()
    {
    }

    SkXfermode::SkXfermode(const SkXfermode& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cc.proto.SkXfermode)
    }

    void SkXfermode::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    SkXfermode::~SkXfermode()
    {
        // @@protoc_insertion_point(destructor:cc.proto.SkXfermode)
        SharedDtor();
    }

    void SkXfermode::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void SkXfermode::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const SkXfermode& SkXfermode::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_skxfermode_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_skxfermode_2eproto();
#endif
        return *default_instance_;
    }

    SkXfermode* SkXfermode::default_instance_ = NULL;

    SkXfermode* SkXfermode::New(::google::protobuf::Arena* arena) const
    {
        SkXfermode* n = new SkXfermode;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void SkXfermode::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:cc.proto.SkXfermode)
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool SkXfermode::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForSkXfermode, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:cc.proto.SkXfermode)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
        }
    success:
        // @@protoc_insertion_point(parse_success:cc.proto.SkXfermode)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:cc.proto.SkXfermode)
        return false;
#undef DO_
    }

    void SkXfermode::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:cc.proto.SkXfermode)
        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:cc.proto.SkXfermode)
    }

    int SkXfermode::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:cc.proto.SkXfermode)
        int total_size = 0;

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void SkXfermode::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const SkXfermode*>(&from));
    }

    void SkXfermode::MergeFrom(const SkXfermode& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:cc.proto.SkXfermode)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void SkXfermode::CopyFrom(const SkXfermode& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:cc.proto.SkXfermode)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool SkXfermode::IsInitialized() const
    {

        return true;
    }

    void SkXfermode::Swap(SkXfermode* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void SkXfermode::InternalSwap(SkXfermode* other)
    {
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string SkXfermode::GetTypeName() const
    {
        return "cc.proto.SkXfermode";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // SkXfermode

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)
