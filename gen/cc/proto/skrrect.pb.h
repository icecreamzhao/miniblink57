// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skrrect.proto

#ifndef PROTOBUF_skrrect_2eproto__INCLUDED
#define PROTOBUF_skrrect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "pointf.pb.h"
#include "rectf.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)
#include "cc/proto/cc_proto_export.h"

namespace cc {
namespace proto {

    // Internal implementation detail -- do not call these.
    void CC_PROTO_EXPORT protobuf_AddDesc_skrrect_2eproto();
    void protobuf_AssignDesc_skrrect_2eproto();
    void protobuf_ShutdownFile_skrrect_2eproto();

    class SkRRect;

    // ===================================================================

    class CC_PROTO_EXPORT SkRRect : public ::google::protobuf::MessageLite {
    public:
        SkRRect();
        virtual ~SkRRect();

        SkRRect(const SkRRect& from);

        inline SkRRect& operator=(const SkRRect& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const SkRRect& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const SkRRect* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(SkRRect* other);

        // implements Message ----------------------------------------------

        inline SkRRect* New() const { return New(NULL); }

        SkRRect* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const SkRRect& from);
        void MergeFrom(const SkRRect& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(SkRRect* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional .cc.proto.RectF rect = 1;
        bool has_rect() const;
        void clear_rect();
        static const int kRectFieldNumber = 1;
        const ::cc::proto::RectF& rect() const;
        ::cc::proto::RectF* mutable_rect();
        ::cc::proto::RectF* release_rect();
        void set_allocated_rect(::cc::proto::RectF* rect);

        // optional .cc.proto.PointF radii_upper_left = 2;
        bool has_radii_upper_left() const;
        void clear_radii_upper_left();
        static const int kRadiiUpperLeftFieldNumber = 2;
        const ::cc::proto::PointF& radii_upper_left() const;
        ::cc::proto::PointF* mutable_radii_upper_left();
        ::cc::proto::PointF* release_radii_upper_left();
        void set_allocated_radii_upper_left(::cc::proto::PointF* radii_upper_left);

        // optional .cc.proto.PointF radii_upper_right = 3;
        bool has_radii_upper_right() const;
        void clear_radii_upper_right();
        static const int kRadiiUpperRightFieldNumber = 3;
        const ::cc::proto::PointF& radii_upper_right() const;
        ::cc::proto::PointF* mutable_radii_upper_right();
        ::cc::proto::PointF* release_radii_upper_right();
        void set_allocated_radii_upper_right(::cc::proto::PointF* radii_upper_right);

        // optional .cc.proto.PointF radii_lower_right = 4;
        bool has_radii_lower_right() const;
        void clear_radii_lower_right();
        static const int kRadiiLowerRightFieldNumber = 4;
        const ::cc::proto::PointF& radii_lower_right() const;
        ::cc::proto::PointF* mutable_radii_lower_right();
        ::cc::proto::PointF* release_radii_lower_right();
        void set_allocated_radii_lower_right(::cc::proto::PointF* radii_lower_right);

        // optional .cc.proto.PointF radii_lower_left = 5;
        bool has_radii_lower_left() const;
        void clear_radii_lower_left();
        static const int kRadiiLowerLeftFieldNumber = 5;
        const ::cc::proto::PointF& radii_lower_left() const;
        ::cc::proto::PointF* mutable_radii_lower_left();
        ::cc::proto::PointF* release_radii_lower_left();
        void set_allocated_radii_lower_left(::cc::proto::PointF* radii_lower_left);

        // @@protoc_insertion_point(class_scope:cc.proto.SkRRect)
    private:
        inline void set_has_rect();
        inline void clear_has_rect();
        inline void set_has_radii_upper_left();
        inline void clear_has_radii_upper_left();
        inline void set_has_radii_upper_right();
        inline void clear_has_radii_upper_right();
        inline void set_has_radii_lower_right();
        inline void clear_has_radii_lower_right();
        inline void set_has_radii_lower_left();
        inline void clear_has_radii_lower_left();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::cc::proto::RectF* rect_;
        ::cc::proto::PointF* radii_upper_left_;
        ::cc::proto::PointF* radii_upper_right_;
        ::cc::proto::PointF* radii_lower_right_;
        ::cc::proto::PointF* radii_lower_left_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void CC_PROTO_EXPORT protobuf_AddDesc_skrrect_2eproto_impl();
#else
        friend void CC_PROTO_EXPORT protobuf_AddDesc_skrrect_2eproto();
#endif
        friend void protobuf_AssignDesc_skrrect_2eproto();
        friend void protobuf_ShutdownFile_skrrect_2eproto();

        void InitAsDefaultInstance();
        static SkRRect* default_instance_;
    };
    // ===================================================================

    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // SkRRect

    // optional .cc.proto.RectF rect = 1;
    inline bool SkRRect::has_rect() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void SkRRect::set_has_rect()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void SkRRect::clear_has_rect()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void SkRRect::clear_rect()
    {
        if (rect_ != NULL)
            rect_->::cc::proto::RectF::Clear();
        clear_has_rect();
    }
    inline const ::cc::proto::RectF& SkRRect::rect() const
    {
// @@protoc_insertion_point(field_get:cc.proto.SkRRect.rect)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return rect_ != NULL ? *rect_ : *default_instance().rect_;
#else
        return rect_ != NULL ? *rect_ : *default_instance_->rect_;
#endif
    }
    inline ::cc::proto::RectF* SkRRect::mutable_rect()
    {
        set_has_rect();
        if (rect_ == NULL) {
            rect_ = new ::cc::proto::RectF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.rect)
        return rect_;
    }
    inline ::cc::proto::RectF* SkRRect::release_rect()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.rect)
        clear_has_rect();
        ::cc::proto::RectF* temp = rect_;
        rect_ = NULL;
        return temp;
    }
    inline void SkRRect::set_allocated_rect(::cc::proto::RectF* rect)
    {
        delete rect_;
        rect_ = rect;
        if (rect) {
            set_has_rect();
        } else {
            clear_has_rect();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.rect)
    }

    // optional .cc.proto.PointF radii_upper_left = 2;
    inline bool SkRRect::has_radii_upper_left() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void SkRRect::set_has_radii_upper_left()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void SkRRect::clear_has_radii_upper_left()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void SkRRect::clear_radii_upper_left()
    {
        if (radii_upper_left_ != NULL)
            radii_upper_left_->::cc::proto::PointF::Clear();
        clear_has_radii_upper_left();
    }
    inline const ::cc::proto::PointF& SkRRect::radii_upper_left() const
    {
// @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_upper_left)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_upper_left_ != NULL ? *radii_upper_left_ : *default_instance().radii_upper_left_;
#else
        return radii_upper_left_ != NULL ? *radii_upper_left_ : *default_instance_->radii_upper_left_;
#endif
    }
    inline ::cc::proto::PointF* SkRRect::mutable_radii_upper_left()
    {
        set_has_radii_upper_left();
        if (radii_upper_left_ == NULL) {
            radii_upper_left_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_upper_left)
        return radii_upper_left_;
    }
    inline ::cc::proto::PointF* SkRRect::release_radii_upper_left()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_upper_left)
        clear_has_radii_upper_left();
        ::cc::proto::PointF* temp = radii_upper_left_;
        radii_upper_left_ = NULL;
        return temp;
    }
    inline void SkRRect::set_allocated_radii_upper_left(::cc::proto::PointF* radii_upper_left)
    {
        delete radii_upper_left_;
        radii_upper_left_ = radii_upper_left;
        if (radii_upper_left) {
            set_has_radii_upper_left();
        } else {
            clear_has_radii_upper_left();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_upper_left)
    }

    // optional .cc.proto.PointF radii_upper_right = 3;
    inline bool SkRRect::has_radii_upper_right() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void SkRRect::set_has_radii_upper_right()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void SkRRect::clear_has_radii_upper_right()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void SkRRect::clear_radii_upper_right()
    {
        if (radii_upper_right_ != NULL)
            radii_upper_right_->::cc::proto::PointF::Clear();
        clear_has_radii_upper_right();
    }
    inline const ::cc::proto::PointF& SkRRect::radii_upper_right() const
    {
// @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_upper_right)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_upper_right_ != NULL ? *radii_upper_right_ : *default_instance().radii_upper_right_;
#else
        return radii_upper_right_ != NULL ? *radii_upper_right_ : *default_instance_->radii_upper_right_;
#endif
    }
    inline ::cc::proto::PointF* SkRRect::mutable_radii_upper_right()
    {
        set_has_radii_upper_right();
        if (radii_upper_right_ == NULL) {
            radii_upper_right_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_upper_right)
        return radii_upper_right_;
    }
    inline ::cc::proto::PointF* SkRRect::release_radii_upper_right()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_upper_right)
        clear_has_radii_upper_right();
        ::cc::proto::PointF* temp = radii_upper_right_;
        radii_upper_right_ = NULL;
        return temp;
    }
    inline void SkRRect::set_allocated_radii_upper_right(::cc::proto::PointF* radii_upper_right)
    {
        delete radii_upper_right_;
        radii_upper_right_ = radii_upper_right;
        if (radii_upper_right) {
            set_has_radii_upper_right();
        } else {
            clear_has_radii_upper_right();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_upper_right)
    }

    // optional .cc.proto.PointF radii_lower_right = 4;
    inline bool SkRRect::has_radii_lower_right() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    inline void SkRRect::set_has_radii_lower_right()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    inline void SkRRect::clear_has_radii_lower_right()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    inline void SkRRect::clear_radii_lower_right()
    {
        if (radii_lower_right_ != NULL)
            radii_lower_right_->::cc::proto::PointF::Clear();
        clear_has_radii_lower_right();
    }
    inline const ::cc::proto::PointF& SkRRect::radii_lower_right() const
    {
// @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_lower_right)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_lower_right_ != NULL ? *radii_lower_right_ : *default_instance().radii_lower_right_;
#else
        return radii_lower_right_ != NULL ? *radii_lower_right_ : *default_instance_->radii_lower_right_;
#endif
    }
    inline ::cc::proto::PointF* SkRRect::mutable_radii_lower_right()
    {
        set_has_radii_lower_right();
        if (radii_lower_right_ == NULL) {
            radii_lower_right_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_lower_right)
        return radii_lower_right_;
    }
    inline ::cc::proto::PointF* SkRRect::release_radii_lower_right()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_lower_right)
        clear_has_radii_lower_right();
        ::cc::proto::PointF* temp = radii_lower_right_;
        radii_lower_right_ = NULL;
        return temp;
    }
    inline void SkRRect::set_allocated_radii_lower_right(::cc::proto::PointF* radii_lower_right)
    {
        delete radii_lower_right_;
        radii_lower_right_ = radii_lower_right;
        if (radii_lower_right) {
            set_has_radii_lower_right();
        } else {
            clear_has_radii_lower_right();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_lower_right)
    }

    // optional .cc.proto.PointF radii_lower_left = 5;
    inline bool SkRRect::has_radii_lower_left() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    inline void SkRRect::set_has_radii_lower_left()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    inline void SkRRect::clear_has_radii_lower_left()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    inline void SkRRect::clear_radii_lower_left()
    {
        if (radii_lower_left_ != NULL)
            radii_lower_left_->::cc::proto::PointF::Clear();
        clear_has_radii_lower_left();
    }
    inline const ::cc::proto::PointF& SkRRect::radii_lower_left() const
    {
// @@protoc_insertion_point(field_get:cc.proto.SkRRect.radii_lower_left)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return radii_lower_left_ != NULL ? *radii_lower_left_ : *default_instance().radii_lower_left_;
#else
        return radii_lower_left_ != NULL ? *radii_lower_left_ : *default_instance_->radii_lower_left_;
#endif
    }
    inline ::cc::proto::PointF* SkRRect::mutable_radii_lower_left()
    {
        set_has_radii_lower_left();
        if (radii_lower_left_ == NULL) {
            radii_lower_left_ = new ::cc::proto::PointF;
        }
        // @@protoc_insertion_point(field_mutable:cc.proto.SkRRect.radii_lower_left)
        return radii_lower_left_;
    }
    inline ::cc::proto::PointF* SkRRect::release_radii_lower_left()
    {
        // @@protoc_insertion_point(field_release:cc.proto.SkRRect.radii_lower_left)
        clear_has_radii_lower_left();
        ::cc::proto::PointF* temp = radii_lower_left_;
        radii_lower_left_ = NULL;
        return temp;
    }
    inline void SkRRect::set_allocated_radii_lower_left(::cc::proto::PointF* radii_lower_left)
    {
        delete radii_lower_left_;
        radii_lower_left_ = radii_lower_left;
        if (radii_lower_left) {
            set_has_radii_lower_left();
        } else {
            clear_has_radii_lower_left();
        }
        // @@protoc_insertion_point(field_set_allocated:cc.proto.SkRRect.radii_lower_left)
    }

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace cc

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_skrrect_2eproto__INCLUDED
