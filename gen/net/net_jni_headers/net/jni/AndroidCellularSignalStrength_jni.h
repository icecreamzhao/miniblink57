// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/AndroidCellularSignalStrength

#ifndef org_chromium_net_AndroidCellularSignalStrength_JNI
#define org_chromium_net_AndroidCellularSignalStrength_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAndroidCellularSignalStrengthClassPath[] = "org/chromium/net/AndroidCellularSignalStrength";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AndroidCellularSignalStrength_clazz
    __attribute__((unused))
    = 0;
#define AndroidCellularSignalStrength_clazz(env) base::android::LazyGetClass(env, kAndroidCellularSignalStrengthClassPath, &g_AndroidCellularSignalStrength_clazz)

} // namespace

namespace net {
namespace android {
    namespace cellular_signal_strength {

        // Step 2: method stubs.

        static base::subtle::AtomicWord
            g_AndroidCellularSignalStrength_getSignalStrengthDbm
            = 0;
        static jint Java_AndroidCellularSignalStrength_getSignalStrengthDbm(JNIEnv* env,
            const base::android::JavaRefOrBare<jobject>& context)
        {
            CHECK_CLAZZ(env, AndroidCellularSignalStrength_clazz(env),
                AndroidCellularSignalStrength_clazz(env), 0);
            jmethodID method_id = base::android::MethodID::LazyGet<
                base::android::MethodID::TYPE_STATIC>(
                env, AndroidCellularSignalStrength_clazz(env),
                "getSignalStrengthDbm",
                "("
                "Landroid/content/Context;"
                ")"
                "I",
                &g_AndroidCellularSignalStrength_getSignalStrengthDbm);

            jint ret = env->CallStaticIntMethod(AndroidCellularSignalStrength_clazz(env),
                method_id, context.obj());
            jni_generator::CheckException(env);
            return ret;
        }

        static base::subtle::AtomicWord
            g_AndroidCellularSignalStrength_getSignalStrengthLevel
            = 0;
        static jint Java_AndroidCellularSignalStrength_getSignalStrengthLevel(JNIEnv*
                                                                                  env,
            const base::android::JavaRefOrBare<jobject>& context)
        {
            CHECK_CLAZZ(env, AndroidCellularSignalStrength_clazz(env),
                AndroidCellularSignalStrength_clazz(env), 0);
            jmethodID method_id = base::android::MethodID::LazyGet<
                base::android::MethodID::TYPE_STATIC>(
                env, AndroidCellularSignalStrength_clazz(env),
                "getSignalStrengthLevel",
                "("
                "Landroid/content/Context;"
                ")"
                "I",
                &g_AndroidCellularSignalStrength_getSignalStrengthLevel);

            jint ret = env->CallStaticIntMethod(AndroidCellularSignalStrength_clazz(env),
                method_id, context.obj());
            jni_generator::CheckException(env);
            return ret;
        }

        // Step 3: RegisterNatives.

    } // namespace cellular_signal_strength
} // namespace android
} // namespace net

#endif // org_chromium_net_AndroidCellularSignalStrength_JNI
