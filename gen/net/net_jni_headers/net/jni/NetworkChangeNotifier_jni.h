// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/NetworkChangeNotifier

#ifndef org_chromium_net_NetworkChangeNotifier_JNI
#define org_chromium_net_NetworkChangeNotifier_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kNetworkChangeNotifierClassPath[] = "org/chromium/net/NetworkChangeNotifier";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_NetworkChangeNotifier_clazz __attribute__((unused)) = 0;
#define NetworkChangeNotifier_clazz(env) base::android::LazyGetClass(env, kNetworkChangeNotifierClassPath, &g_NetworkChangeNotifier_clazz)

} // namespace

namespace net {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyConnectionTypeChanged(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativePtr,
    jint newConnectionType,
    jlong defaultNetId)
{
    NetworkChangeNotifierDelegateAndroid* native = reinterpret_cast<NetworkChangeNotifierDelegateAndroid*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyConnectionTypeChanged");
    return native->NotifyConnectionTypeChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller), newConnectionType,
        defaultNetId);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyMaxBandwidthChanged(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativePtr,
    jdouble maxBandwidthMbps)
{
    NetworkChangeNotifierDelegateAndroid* native = reinterpret_cast<NetworkChangeNotifierDelegateAndroid*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyMaxBandwidthChanged");
    return native->NotifyMaxBandwidthChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller), maxBandwidthMbps);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyOfNetworkConnect(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativePtr,
    jlong netId,
    jint connectionType)
{
    NetworkChangeNotifierDelegateAndroid* native = reinterpret_cast<NetworkChangeNotifierDelegateAndroid*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyOfNetworkConnect");
    return native->NotifyOfNetworkConnect(env,
        base::android::JavaParamRef<jobject>(env, jcaller), netId,
        connectionType);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyOfNetworkSoonToDisconnect(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativePtr,
    jlong netId)
{
    NetworkChangeNotifierDelegateAndroid* native = reinterpret_cast<NetworkChangeNotifierDelegateAndroid*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyOfNetworkSoonToDisconnect");
    return native->NotifyOfNetworkSoonToDisconnect(env,
        base::android::JavaParamRef<jobject>(env, jcaller), netId);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyOfNetworkDisconnect(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativePtr,
    jlong netId)
{
    NetworkChangeNotifierDelegateAndroid* native = reinterpret_cast<NetworkChangeNotifierDelegateAndroid*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyOfNetworkDisconnect");
    return native->NotifyOfNetworkDisconnect(env,
        base::android::JavaParamRef<jobject>(env, jcaller), netId);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyPurgeActiveNetworkList(JNIEnv*
                                                                                   env,
    jobject jcaller,
    jlong nativePtr,
    jlongArray activeNetIds)
{
    NetworkChangeNotifierDelegateAndroid* native = reinterpret_cast<NetworkChangeNotifierDelegateAndroid*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyPurgeActiveNetworkList");
    return native->NotifyPurgeActiveNetworkList(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jlongArray>(env, activeNetIds));
}

static jdouble GetMaxBandwidthForConnectionSubtype(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint subtype);

JNI_GENERATOR_EXPORT jdouble
Java_org_chromium_net_NetworkChangeNotifier_nativeGetMaxBandwidthForConnectionSubtype(JNIEnv*
                                                                                          env,
    jclass jcaller,
    jint subtype)
{
    return GetMaxBandwidthForConnectionSubtype(env,
        base::android::JavaParamRef<jclass>(env, jcaller), subtype);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_init = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_NetworkChangeNotifier_init(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "init",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/net/NetworkChangeNotifier;",
        &g_NetworkChangeNotifier_init);

    jobject ret = env->CallStaticObjectMethod(NetworkChangeNotifier_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_getCurrentConnectionType
    = 0;
static jint Java_NetworkChangeNotifier_getCurrentConnectionType(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "getCurrentConnectionType",
        "("
        ")"
        "I",
        &g_NetworkChangeNotifier_getCurrentConnectionType);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_NetworkChangeNotifier_getCurrentConnectionSubtype
    = 0;
static jint Java_NetworkChangeNotifier_getCurrentConnectionSubtype(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "getCurrentConnectionSubtype",
        "("
        ")"
        "I",
        &g_NetworkChangeNotifier_getCurrentConnectionSubtype);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_NetworkChangeNotifier_getCurrentMaxBandwidthInMbps
    = 0;
static jdouble Java_NetworkChangeNotifier_getCurrentMaxBandwidthInMbps(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "getCurrentMaxBandwidthInMbps",
        "("
        ")"
        "D",
        &g_NetworkChangeNotifier_getCurrentMaxBandwidthInMbps);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_getCurrentDefaultNetId = 0;
static jlong Java_NetworkChangeNotifier_getCurrentDefaultNetId(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "getCurrentDefaultNetId",
        "("
        ")"
        "J",
        &g_NetworkChangeNotifier_getCurrentDefaultNetId);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_NetworkChangeNotifier_getCurrentNetworksAndTypes
    = 0;
static base::android::ScopedJavaLocalRef<jlongArray>
Java_NetworkChangeNotifier_getCurrentNetworksAndTypes(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "getCurrentNetworksAndTypes",
        "("
        ")"
        "[J",
        &g_NetworkChangeNotifier_getCurrentNetworksAndTypes);

    jlongArray ret = static_cast<jlongArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jlongArray>(env, ret);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_addNativeObserver = 0;
static void Java_NetworkChangeNotifier_addNativeObserver(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeChangeNotifier)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "addNativeObserver",
        "("
        "J"
        ")"
        "V",
        &g_NetworkChangeNotifier_addNativeObserver);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeChangeNotifier);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_removeNativeObserver = 0;
static void Java_NetworkChangeNotifier_removeNativeObserver(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeChangeNotifier)
{
    CHECK_CLAZZ(env, obj.obj(),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, NetworkChangeNotifier_clazz(env),
        "removeNativeObserver",
        "("
        "J"
        ")"
        "V",
        &g_NetworkChangeNotifier_removeNativeObserver);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeChangeNotifier);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_forceConnectivityState = 0;
static void Java_NetworkChangeNotifier_forceConnectivityState(JNIEnv* env,
    jboolean networkAvailable)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "forceConnectivityState",
        "("
        "Z"
        ")"
        "V",
        &g_NetworkChangeNotifier_forceConnectivityState);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, networkAvailable);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_fakeNetworkConnected = 0;
static void Java_NetworkChangeNotifier_fakeNetworkConnected(JNIEnv* env, jlong netId,
    JniIntWrapper connectionType)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "fakeNetworkConnected",
        "("
        "J"
        "I"
        ")"
        "V",
        &g_NetworkChangeNotifier_fakeNetworkConnected);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, netId, as_jint(connectionType));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_NetworkChangeNotifier_fakeNetworkSoonToBeDisconnected
    = 0;
static void Java_NetworkChangeNotifier_fakeNetworkSoonToBeDisconnected(JNIEnv*
                                                                           env,
    jlong netId)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "fakeNetworkSoonToBeDisconnected",
        "("
        "J"
        ")"
        "V",
        &g_NetworkChangeNotifier_fakeNetworkSoonToBeDisconnected);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, netId);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_fakeNetworkDisconnected
    = 0;
static void Java_NetworkChangeNotifier_fakeNetworkDisconnected(JNIEnv* env,
    jlong netId)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "fakeNetworkDisconnected",
        "("
        "J"
        ")"
        "V",
        &g_NetworkChangeNotifier_fakeNetworkDisconnected);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, netId);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_NetworkChangeNotifier_fakePurgeActiveNetworkList
    = 0;
static void Java_NetworkChangeNotifier_fakePurgeActiveNetworkList(JNIEnv* env,
    const base::android::JavaRefOrBare<jlongArray>& activeNetIds)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "fakePurgeActiveNetworkList",
        "("
        "[J"
        ")"
        "V",
        &g_NetworkChangeNotifier_fakePurgeActiveNetworkList);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, activeNetIds.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_fakeDefaultNetwork = 0;
static void Java_NetworkChangeNotifier_fakeDefaultNetwork(JNIEnv* env, jlong netId,
    JniIntWrapper connectionType)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "fakeDefaultNetwork",
        "("
        "J"
        "I"
        ")"
        "V",
        &g_NetworkChangeNotifier_fakeDefaultNetwork);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, netId, as_jint(connectionType));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_NetworkChangeNotifier_fakeMaxBandwidthChanged
    = 0;
static void Java_NetworkChangeNotifier_fakeMaxBandwidthChanged(JNIEnv* env,
    jdouble maxBandwidthMbps)
{
    CHECK_CLAZZ(env, NetworkChangeNotifier_clazz(env),
        NetworkChangeNotifier_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, NetworkChangeNotifier_clazz(env),
        "fakeMaxBandwidthChanged",
        "("
        "D"
        ")"
        "V",
        &g_NetworkChangeNotifier_fakeMaxBandwidthChanged);

    env->CallStaticVoidMethod(NetworkChangeNotifier_clazz(env),
        method_id, maxBandwidthMbps);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsNetworkChangeNotifier[] = {
    { "nativeNotifyConnectionTypeChanged",
        "("
        "J"
        "I"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyConnectionTypeChanged) },
    { "nativeNotifyMaxBandwidthChanged",
        "("
        "J"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyMaxBandwidthChanged) },
    { "nativeNotifyOfNetworkConnect",
        "("
        "J"
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyOfNetworkConnect) },
    { "nativeNotifyOfNetworkSoonToDisconnect",
        "("
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyOfNetworkSoonToDisconnect) },
    { "nativeNotifyOfNetworkDisconnect",
        "("
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyOfNetworkDisconnect) },
    { "nativeNotifyPurgeActiveNetworkList",
        "("
        "J"
        "[J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeNotifyPurgeActiveNetworkList) },
    { "nativeGetMaxBandwidthForConnectionSubtype",
        "("
        "I"
        ")"
        "D",
        reinterpret_cast<void*>(Java_org_chromium_net_NetworkChangeNotifier_nativeGetMaxBandwidthForConnectionSubtype) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsNetworkChangeNotifierSize = arraysize(kMethodsNetworkChangeNotifier);

    if (env->RegisterNatives(NetworkChangeNotifier_clazz(env),
            kMethodsNetworkChangeNotifier,
            kMethodsNetworkChangeNotifierSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, NetworkChangeNotifier_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace net

#endif // org_chromium_net_NetworkChangeNotifier_JNI
