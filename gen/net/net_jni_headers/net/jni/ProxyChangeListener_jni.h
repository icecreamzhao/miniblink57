// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/ProxyChangeListener

#ifndef org_chromium_net_ProxyChangeListener_JNI
#define org_chromium_net_ProxyChangeListener_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kProxyChangeListenerClassPath[] = "org/chromium/net/ProxyChangeListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ProxyChangeListener_clazz __attribute__((unused)) = 0;
#define ProxyChangeListener_clazz(env) base::android::LazyGetClass(env, kProxyChangeListenerClassPath, &g_ProxyChangeListener_clazz)

} // namespace

namespace net {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_net_ProxyChangeListener_nativeProxySettingsChangedTo(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativePtr,
    jstring host,
    jint port,
    jstring pacUrl,
    jobjectArray exclusionList)
{
    ProxyConfigServiceAndroid::JNIDelegate* native = reinterpret_cast<ProxyConfigServiceAndroid::JNIDelegate*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "ProxySettingsChangedTo");
    return native->ProxySettingsChangedTo(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, host), port,
        base::android::JavaParamRef<jstring>(env, pacUrl),
        base::android::JavaParamRef<jobjectArray>(env, exclusionList));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_ProxyChangeListener_nativeProxySettingsChanged(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativePtr)
{
    ProxyConfigServiceAndroid::JNIDelegate* native = reinterpret_cast<ProxyConfigServiceAndroid::JNIDelegate*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "ProxySettingsChanged");
    return native->ProxySettingsChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_ProxyChangeListener_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ProxyChangeListener_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, ProxyChangeListener_clazz(env),
        ProxyChangeListener_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ProxyChangeListener_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/net/ProxyChangeListener;",
        &g_ProxyChangeListener_create);

    jobject ret = env->CallStaticObjectMethod(ProxyChangeListener_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ProxyChangeListener_getProperty = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_ProxyChangeListener_getProperty(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& property)
{
    CHECK_CLAZZ(env, ProxyChangeListener_clazz(env),
        ProxyChangeListener_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ProxyChangeListener_clazz(env),
        "getProperty",
        "("
        "Ljava/lang/String;"
        ")"
        "Ljava/lang/String;",
        &g_ProxyChangeListener_getProperty);

    jstring ret = static_cast<jstring>(env->CallStaticObjectMethod(ProxyChangeListener_clazz(env),
        method_id, property.obj()));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_ProxyChangeListener_start = 0;
static void Java_ProxyChangeListener_start(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativePtr)
{
    CHECK_CLAZZ(env, obj.obj(),
        ProxyChangeListener_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ProxyChangeListener_clazz(env),
        "start",
        "("
        "J"
        ")"
        "V",
        &g_ProxyChangeListener_start);

    env->CallVoidMethod(obj.obj(),
        method_id, nativePtr);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ProxyChangeListener_stop = 0;
static void Java_ProxyChangeListener_stop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ProxyChangeListener_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ProxyChangeListener_clazz(env),
        "stop",
        "("
        ")"
        "V",
        &g_ProxyChangeListener_stop);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsProxyChangeListener[] = {
    { "nativeProxySettingsChangedTo",
        "("
        "J"
        "Ljava/lang/String;"
        "I"
        "Ljava/lang/String;"
        "[Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_ProxyChangeListener_nativeProxySettingsChangedTo) },
    { "nativeProxySettingsChanged",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_ProxyChangeListener_nativeProxySettingsChanged) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsProxyChangeListenerSize = arraysize(kMethodsProxyChangeListener);

    if (env->RegisterNatives(ProxyChangeListener_clazz(env),
            kMethodsProxyChangeListener,
            kMethodsProxyChangeListenerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ProxyChangeListener_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace net

#endif // org_chromium_net_ProxyChangeListener_JNI
