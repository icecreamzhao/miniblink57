// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/AndroidTrafficStats

#ifndef org_chromium_net_AndroidTrafficStats_JNI
#define org_chromium_net_AndroidTrafficStats_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAndroidTrafficStatsClassPath[] = "org/chromium/net/AndroidTrafficStats";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AndroidTrafficStats_clazz __attribute__((unused)) = 0;
#define AndroidTrafficStats_clazz(env) base::android::LazyGetClass(env, kAndroidTrafficStatsClassPath, &g_AndroidTrafficStats_clazz)

} // namespace

namespace net {
namespace android {
    namespace traffic_stats {

        // Step 2: method stubs.

        static base::subtle::AtomicWord g_AndroidTrafficStats_getTotalTxBytes = 0;
        static jlong Java_AndroidTrafficStats_getTotalTxBytes(JNIEnv* env)
        {
            CHECK_CLAZZ(env, AndroidTrafficStats_clazz(env),
                AndroidTrafficStats_clazz(env), 0);
            jmethodID method_id = base::android::MethodID::LazyGet<
                base::android::MethodID::TYPE_STATIC>(
                env, AndroidTrafficStats_clazz(env),
                "getTotalTxBytes",
                "("
                ")"
                "J",
                &g_AndroidTrafficStats_getTotalTxBytes);

            jlong ret = env->CallStaticLongMethod(AndroidTrafficStats_clazz(env),
                method_id);
            jni_generator::CheckException(env);
            return ret;
        }

        static base::subtle::AtomicWord g_AndroidTrafficStats_getTotalRxBytes = 0;
        static jlong Java_AndroidTrafficStats_getTotalRxBytes(JNIEnv* env)
        {
            CHECK_CLAZZ(env, AndroidTrafficStats_clazz(env),
                AndroidTrafficStats_clazz(env), 0);
            jmethodID method_id = base::android::MethodID::LazyGet<
                base::android::MethodID::TYPE_STATIC>(
                env, AndroidTrafficStats_clazz(env),
                "getTotalRxBytes",
                "("
                ")"
                "J",
                &g_AndroidTrafficStats_getTotalRxBytes);

            jlong ret = env->CallStaticLongMethod(AndroidTrafficStats_clazz(env),
                method_id);
            jni_generator::CheckException(env);
            return ret;
        }

        static base::subtle::AtomicWord g_AndroidTrafficStats_getCurrentUidTxBytes = 0;
        static jlong Java_AndroidTrafficStats_getCurrentUidTxBytes(JNIEnv* env)
        {
            CHECK_CLAZZ(env, AndroidTrafficStats_clazz(env),
                AndroidTrafficStats_clazz(env), 0);
            jmethodID method_id = base::android::MethodID::LazyGet<
                base::android::MethodID::TYPE_STATIC>(
                env, AndroidTrafficStats_clazz(env),
                "getCurrentUidTxBytes",
                "("
                ")"
                "J",
                &g_AndroidTrafficStats_getCurrentUidTxBytes);

            jlong ret = env->CallStaticLongMethod(AndroidTrafficStats_clazz(env),
                method_id);
            jni_generator::CheckException(env);
            return ret;
        }

        static base::subtle::AtomicWord g_AndroidTrafficStats_getCurrentUidRxBytes = 0;
        static jlong Java_AndroidTrafficStats_getCurrentUidRxBytes(JNIEnv* env)
        {
            CHECK_CLAZZ(env, AndroidTrafficStats_clazz(env),
                AndroidTrafficStats_clazz(env), 0);
            jmethodID method_id = base::android::MethodID::LazyGet<
                base::android::MethodID::TYPE_STATIC>(
                env, AndroidTrafficStats_clazz(env),
                "getCurrentUidRxBytes",
                "("
                ")"
                "J",
                &g_AndroidTrafficStats_getCurrentUidRxBytes);

            jlong ret = env->CallStaticLongMethod(AndroidTrafficStats_clazz(env),
                method_id);
            jni_generator::CheckException(env);
            return ret;
        }

        // Step 3: RegisterNatives.

    } // namespace traffic_stats
} // namespace android
} // namespace net

#endif // org_chromium_net_AndroidTrafficStats_JNI
