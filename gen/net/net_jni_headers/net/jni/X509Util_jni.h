// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/X509Util

#ifndef org_chromium_net_X509Util_JNI
#define org_chromium_net_X509Util_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kX509UtilClassPath[] = "org/chromium/net/X509Util";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_X509Util_clazz __attribute__((unused)) = 0;
#define X509Util_clazz(env) base::android::LazyGetClass(env, kX509UtilClassPath, &g_X509Util_clazz)

} // namespace

namespace net {

// Step 2: method stubs.

static void NotifyKeyChainChanged(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_X509Util_nativeNotifyKeyChainChanged(JNIEnv* env,
    jclass jcaller)
{
    return NotifyKeyChainChanged(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void RecordCertVerifyCapabilitiesHistogram(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean foundSystemTrustRoots);

JNI_GENERATOR_EXPORT void
Java_org_chromium_net_X509Util_nativeRecordCertVerifyCapabilitiesHistogram(JNIEnv*
                                                                               env,
    jclass jcaller,
    jboolean foundSystemTrustRoots)
{
    return RecordCertVerifyCapabilitiesHistogram(env,
        base::android::JavaParamRef<jclass>(env, jcaller), foundSystemTrustRoots);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsX509Util[] = {
    { "nativeNotifyKeyChainChanged",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_X509Util_nativeNotifyKeyChainChanged) },
    { "nativeRecordCertVerifyCapabilitiesHistogram",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_net_X509Util_nativeRecordCertVerifyCapabilitiesHistogram) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsX509UtilSize = arraysize(kMethodsX509Util);

    if (env->RegisterNatives(X509Util_clazz(env),
            kMethodsX509Util,
            kMethodsX509UtilSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, X509Util_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace net

#endif // org_chromium_net_X509Util_JNI
