// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/HttpNegotiateAuthenticator

#ifndef org_chromium_net_HttpNegotiateAuthenticator_JNI
#define org_chromium_net_HttpNegotiateAuthenticator_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kHttpNegotiateAuthenticatorClassPath[] = "org/chromium/net/HttpNegotiateAuthenticator";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_HttpNegotiateAuthenticator_clazz
    __attribute__((unused))
    = 0;
#define HttpNegotiateAuthenticator_clazz(env) base::android::LazyGetClass(env, kHttpNegotiateAuthenticatorClassPath, &g_HttpNegotiateAuthenticator_clazz)

} // namespace

namespace net {
namespace android {

    // Step 2: method stubs.
    JNI_GENERATOR_EXPORT void
    Java_org_chromium_net_HttpNegotiateAuthenticator_nativeSetResult(JNIEnv*
                                                                         env,
        jobject jcaller,
        jlong nativeJavaNegotiateResultWrapper,
        jint status,
        jstring authToken)
    {
        JavaNegotiateResultWrapper* native = reinterpret_cast<JavaNegotiateResultWrapper*>(nativeJavaNegotiateResultWrapper);
        CHECK_NATIVE_PTR(env, jcaller, native, "SetResult");
        return native->SetResult(env, base::android::JavaParamRef<jobject>(env, jcaller), status, base::android::JavaParamRef<jstring>(env, authToken));
    }

    static base::subtle::AtomicWord g_HttpNegotiateAuthenticator_create = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_HttpNegotiateAuthenticator_create(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& accountType)
    {
        CHECK_CLAZZ(env, HttpNegotiateAuthenticator_clazz(env),
            HttpNegotiateAuthenticator_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, HttpNegotiateAuthenticator_clazz(env),
            "create",
            "("
            "Ljava/lang/String;"
            ")"
            "Lorg/chromium/net/HttpNegotiateAuthenticator;",
            &g_HttpNegotiateAuthenticator_create);

        jobject ret = env->CallStaticObjectMethod(HttpNegotiateAuthenticator_clazz(env),
            method_id, accountType.obj());
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_HttpNegotiateAuthenticator_getNextAuthToken = 0;
    static void Java_HttpNegotiateAuthenticator_getNextAuthToken(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeResultObject,
        const base::android::JavaRefOrBare<jstring>& principal,
        const base::android::JavaRefOrBare<jstring>& authToken,
        jboolean canDelegate)
    {
        CHECK_CLAZZ(env, obj.obj(),
            HttpNegotiateAuthenticator_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_INSTANCE>(
            env, HttpNegotiateAuthenticator_clazz(env),
            "getNextAuthToken",
            "("
            "J"
            "Ljava/lang/String;"
            "Ljava/lang/String;"
            "Z"
            ")"
            "V",
            &g_HttpNegotiateAuthenticator_getNextAuthToken);

        env->CallVoidMethod(obj.obj(),
            method_id, nativeResultObject, principal.obj(), authToken.obj(),
            canDelegate);
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsHttpNegotiateAuthenticator[] = {
        { "nativeSetResult",
            "("
            "J"
            "I"
            "Ljava/lang/String;"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_net_HttpNegotiateAuthenticator_nativeSetResult) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsHttpNegotiateAuthenticatorSize = arraysize(kMethodsHttpNegotiateAuthenticator);

        if (env->RegisterNatives(HttpNegotiateAuthenticator_clazz(env),
                kMethodsHttpNegotiateAuthenticator,
                kMethodsHttpNegotiateAuthenticatorSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, HttpNegotiateAuthenticator_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace net

#endif // org_chromium_net_HttpNegotiateAuthenticator_JNI
