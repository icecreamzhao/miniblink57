// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/view/DragEvent

#ifndef android_view_DragEvent_JNI
#define android_view_DragEvent_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDragEventClassPath[] = "android/view/DragEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DragEvent_clazz __attribute__((unused)) = 0;
#define DragEvent_clazz(env) base::android::LazyGetClass(env, kDragEventClassPath, &g_DragEvent_clazz)

} // namespace

namespace JNI_DragEvent {

enum Java_DragEvent_constant_fields {
    ACTION_DRAG_ENDED = 4,
    ACTION_DRAG_ENTERED = 5,
    ACTION_DRAG_EXITED = 6,
    ACTION_DRAG_LOCATION = 2,
    ACTION_DRAG_STARTED = 1,
    ACTION_DROP = 3,
};

// Step 2: method stubs.

static base::subtle::AtomicWord g_DragEvent_getAction = 0;
static jint Java_DragEvent_getAction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_DragEvent_getAction(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getAction",
        "()I",
        &g_DragEvent_getAction);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DragEvent_getX = 0;
static jfloat Java_DragEvent_getX(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jfloat Java_DragEvent_getX(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getX",
        "()F",
        &g_DragEvent_getX);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DragEvent_getY = 0;
static jfloat Java_DragEvent_getY(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jfloat Java_DragEvent_getY(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getY",
        "()F",
        &g_DragEvent_getY);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DragEvent_getClipData = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_DragEvent_getClipData(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_DragEvent_getClipData(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getClipData",
        "()Landroid/content/ClipData;",
        &g_DragEvent_getClipData);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_DragEvent_getClipDescription = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_DragEvent_getClipDescription(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_DragEvent_getClipDescription(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getClipDescription",
        "()Landroid/content/ClipDescription;",
        &g_DragEvent_getClipDescription);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_DragEvent_getLocalState = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_DragEvent_getLocalState(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_DragEvent_getLocalState(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getLocalState",
        "()Ljava/lang/Object;",
        &g_DragEvent_getLocalState);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_DragEvent_getResult = 0;
static jboolean Java_DragEvent_getResult(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jboolean Java_DragEvent_getResult(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "getResult",
        "()Z",
        &g_DragEvent_getResult);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DragEvent_toString = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_DragEvent_toString(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jstring>
Java_DragEvent_toString(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "toString",
        "()Ljava/lang/String;",
        &g_DragEvent_toString);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_DragEvent_describeContents = 0;
static jint Java_DragEvent_describeContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_DragEvent_describeContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "describeContents",
        "()I",
        &g_DragEvent_describeContents);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DragEvent_writeToParcel = 0;
static void Java_DragEvent_writeToParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1) __attribute__((unused));
static void Java_DragEvent_writeToParcel(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0,
    JniIntWrapper p1)
{
    CHECK_CLAZZ(env, obj.obj(),
        DragEvent_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DragEvent_clazz(env),
        "writeToParcel",
        "(Landroid/os/Parcel;I)V",
        &g_DragEvent_writeToParcel);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj(), as_jint(p1));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace JNI_DragEvent

#endif // android_view_DragEvent_JNI
