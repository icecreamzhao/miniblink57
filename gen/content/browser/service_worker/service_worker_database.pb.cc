// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_worker_database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_worker_database.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace content {

void protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto()
{
    delete ServiceWorkerOriginTrialFeature::default_instance_;
    delete ServiceWorkerOriginTrialInfo::default_instance_;
    delete ServiceWorkerNavigationPreloadState::default_instance_;
    delete ServiceWorkerRegistrationData::default_instance_;
    delete ServiceWorkerResourceRecord::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_service_5fworker_5fdatabase_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ServiceWorkerOriginTrialFeature::default_instance_ = new ServiceWorkerOriginTrialFeature();
    ServiceWorkerOriginTrialInfo::default_instance_ = new ServiceWorkerOriginTrialInfo();
    ServiceWorkerNavigationPreloadState::default_instance_ = new ServiceWorkerNavigationPreloadState();
    ServiceWorkerRegistrationData::default_instance_ = new ServiceWorkerRegistrationData();
    ServiceWorkerResourceRecord::default_instance_ = new ServiceWorkerResourceRecord();
    ServiceWorkerOriginTrialFeature::default_instance_->InitAsDefaultInstance();
    ServiceWorkerOriginTrialInfo::default_instance_->InitAsDefaultInstance();
    ServiceWorkerNavigationPreloadState::default_instance_->InitAsDefaultInstance();
    ServiceWorkerRegistrationData::default_instance_->InitAsDefaultInstance();
    ServiceWorkerResourceRecord::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fworker_5fdatabase_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_once_);
void protobuf_AddDesc_service_5fworker_5fdatabase_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_once_,
        &protobuf_AddDesc_service_5fworker_5fdatabase_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fworker_5fdatabase_2eproto {
    StaticDescriptorInitializer_service_5fworker_5fdatabase_2eproto()
    {
        protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
    }
} static_descriptor_initializer_service_5fworker_5fdatabase_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForServiceWorkerOriginTrialFeature(
    ServiceWorkerOriginTrialFeature* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerOriginTrialFeature::kNameFieldNumber;
const int ServiceWorkerOriginTrialFeature::kTokensFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerOriginTrialFeature::ServiceWorkerOriginTrialFeature()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:content.ServiceWorkerOriginTrialFeature)
}

void ServiceWorkerOriginTrialFeature::InitAsDefaultInstance()
{
}

ServiceWorkerOriginTrialFeature::ServiceWorkerOriginTrialFeature(const ServiceWorkerOriginTrialFeature& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerOriginTrialFeature)
}

void ServiceWorkerOriginTrialFeature::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerOriginTrialFeature::~ServiceWorkerOriginTrialFeature()
{
    // @@protoc_insertion_point(destructor:content.ServiceWorkerOriginTrialFeature)
    SharedDtor();
}

void ServiceWorkerOriginTrialFeature::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ServiceWorkerOriginTrialFeature::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialFeature::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
    return *default_instance_;
}

ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialFeature::default_instance_ = NULL;

ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialFeature::New(::google::protobuf::Arena* arena) const
{
    ServiceWorkerOriginTrialFeature* n = new ServiceWorkerOriginTrialFeature;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ServiceWorkerOriginTrialFeature::Clear()
{
    // @@protoc_insertion_point(message_clear_start:content.ServiceWorkerOriginTrialFeature)
    if (has_name()) {
        name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tokens_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceWorkerOriginTrialFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForServiceWorkerOriginTrialFeature, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:content.ServiceWorkerOriginTrialFeature)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required string name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_tokens;
            break;
        }

        // repeated string tokens = 2;
        case 2: {
            if (tag == 18) {
            parse_tokens:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_tokens()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_tokens;
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:content.ServiceWorkerOriginTrialFeature)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:content.ServiceWorkerOriginTrialFeature)
    return false;
#undef DO_
}

void ServiceWorkerOriginTrialFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:content.ServiceWorkerOriginTrialFeature)
    // required string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->name(), output);
    }

    // repeated string tokens = 2;
    for (int i = 0; i < this->tokens_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            2, this->tokens(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:content.ServiceWorkerOriginTrialFeature)
}

int ServiceWorkerOriginTrialFeature::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerOriginTrialFeature)
    int total_size = 0;

    // required string name = 1;
    if (has_name()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
    }
    // repeated string tokens = 2;
    total_size += 1 * this->tokens_size();
    for (int i = 0; i < this->tokens_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->tokens(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceWorkerOriginTrialFeature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerOriginTrialFeature*>(&from));
}

void ServiceWorkerOriginTrialFeature::MergeFrom(const ServiceWorkerOriginTrialFeature& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerOriginTrialFeature)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    tokens_.MergeFrom(from.tokens_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ServiceWorkerOriginTrialFeature::CopyFrom(const ServiceWorkerOriginTrialFeature& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerOriginTrialFeature)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ServiceWorkerOriginTrialFeature::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    return true;
}

void ServiceWorkerOriginTrialFeature::Swap(ServiceWorkerOriginTrialFeature* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ServiceWorkerOriginTrialFeature::InternalSwap(ServiceWorkerOriginTrialFeature* other)
{
    name_.Swap(&other->name_);
    tokens_.UnsafeArenaSwap(&other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerOriginTrialFeature::GetTypeName() const
{
    return "content.ServiceWorkerOriginTrialFeature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerOriginTrialFeature

// required string name = 1;
bool ServiceWorkerOriginTrialFeature::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerOriginTrialFeature::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerOriginTrialFeature::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerOriginTrialFeature::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& ServiceWorkerOriginTrialFeature::name() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerOriginTrialFeature::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.name)
}
void ServiceWorkerOriginTrialFeature::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.name)
}
void ServiceWorkerOriginTrialFeature::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.name)
}
::std::string* ServiceWorkerOriginTrialFeature::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerOriginTrialFeature::release_name()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerOriginTrialFeature.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerOriginTrialFeature::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerOriginTrialFeature.name)
}

// repeated string tokens = 2;
int ServiceWorkerOriginTrialFeature::tokens_size() const
{
    return tokens_.size();
}
void ServiceWorkerOriginTrialFeature::clear_tokens()
{
    tokens_.Clear();
}
const ::std::string& ServiceWorkerOriginTrialFeature::tokens(int index) const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialFeature.tokens)
    return tokens_.Get(index);
}
::std::string* ServiceWorkerOriginTrialFeature::mutable_tokens(int index)
{
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
    return tokens_.Mutable(index);
}
void ServiceWorkerOriginTrialFeature::set_tokens(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:content.ServiceWorkerOriginTrialFeature.tokens)
    tokens_.Mutable(index)->assign(value);
}
void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value)
{
    tokens_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
void ServiceWorkerOriginTrialFeature::set_tokens(int index, const char* value, size_t size)
{
    tokens_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
::std::string* ServiceWorkerOriginTrialFeature::add_tokens()
{
    // @@protoc_insertion_point(field_add_mutable:content.ServiceWorkerOriginTrialFeature.tokens)
    return tokens_.Add();
}
void ServiceWorkerOriginTrialFeature::add_tokens(const ::std::string& value)
{
    tokens_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialFeature.tokens)
}
void ServiceWorkerOriginTrialFeature::add_tokens(const char* value)
{
    tokens_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:content.ServiceWorkerOriginTrialFeature.tokens)
}
void ServiceWorkerOriginTrialFeature::add_tokens(const char* value, size_t size)
{
    tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:content.ServiceWorkerOriginTrialFeature.tokens)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
ServiceWorkerOriginTrialFeature::tokens() const
{
    // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialFeature.tokens)
    return tokens_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
ServiceWorkerOriginTrialFeature::mutable_tokens()
{
    // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialFeature.tokens)
    return &tokens_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForServiceWorkerOriginTrialInfo(
    ServiceWorkerOriginTrialInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerOriginTrialInfo::kFeaturesFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerOriginTrialInfo::ServiceWorkerOriginTrialInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:content.ServiceWorkerOriginTrialInfo)
}

void ServiceWorkerOriginTrialInfo::InitAsDefaultInstance()
{
}

ServiceWorkerOriginTrialInfo::ServiceWorkerOriginTrialInfo(const ServiceWorkerOriginTrialInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerOriginTrialInfo)
}

void ServiceWorkerOriginTrialInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerOriginTrialInfo::~ServiceWorkerOriginTrialInfo()
{
    // @@protoc_insertion_point(destructor:content.ServiceWorkerOriginTrialInfo)
    SharedDtor();
}

void ServiceWorkerOriginTrialInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ServiceWorkerOriginTrialInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerOriginTrialInfo& ServiceWorkerOriginTrialInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
    return *default_instance_;
}

ServiceWorkerOriginTrialInfo* ServiceWorkerOriginTrialInfo::default_instance_ = NULL;

ServiceWorkerOriginTrialInfo* ServiceWorkerOriginTrialInfo::New(::google::protobuf::Arena* arena) const
{
    ServiceWorkerOriginTrialInfo* n = new ServiceWorkerOriginTrialInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ServiceWorkerOriginTrialInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:content.ServiceWorkerOriginTrialInfo)
    features_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceWorkerOriginTrialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForServiceWorkerOriginTrialInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:content.ServiceWorkerOriginTrialInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
        case 1: {
            if (tag == 10) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_features:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_features()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_loop_features;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:content.ServiceWorkerOriginTrialInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:content.ServiceWorkerOriginTrialInfo)
    return false;
#undef DO_
}

void ServiceWorkerOriginTrialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:content.ServiceWorkerOriginTrialInfo)
    // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
    for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, this->features(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:content.ServiceWorkerOriginTrialInfo)
}

int ServiceWorkerOriginTrialInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerOriginTrialInfo)
    int total_size = 0;

    // repeated .content.ServiceWorkerOriginTrialFeature features = 1;
    total_size += 1 * this->features_size();
    for (int i = 0; i < this->features_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->features(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceWorkerOriginTrialInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerOriginTrialInfo*>(&from));
}

void ServiceWorkerOriginTrialInfo::MergeFrom(const ServiceWorkerOriginTrialInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerOriginTrialInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    features_.MergeFrom(from.features_);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ServiceWorkerOriginTrialInfo::CopyFrom(const ServiceWorkerOriginTrialInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerOriginTrialInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ServiceWorkerOriginTrialInfo::IsInitialized() const
{

    if (!::google::protobuf::internal::AllAreInitialized(this->features()))
        return false;
    return true;
}

void ServiceWorkerOriginTrialInfo::Swap(ServiceWorkerOriginTrialInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ServiceWorkerOriginTrialInfo::InternalSwap(ServiceWorkerOriginTrialInfo* other)
{
    features_.UnsafeArenaSwap(&other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerOriginTrialInfo::GetTypeName() const
{
    return "content.ServiceWorkerOriginTrialInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerOriginTrialInfo

// repeated .content.ServiceWorkerOriginTrialFeature features = 1;
int ServiceWorkerOriginTrialInfo::features_size() const
{
    return features_.size();
}
void ServiceWorkerOriginTrialInfo::clear_features()
{
    features_.Clear();
}
const ::content::ServiceWorkerOriginTrialFeature& ServiceWorkerOriginTrialInfo::features(int index) const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerOriginTrialInfo.features)
    return features_.Get(index);
}
::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::mutable_features(int index)
{
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerOriginTrialInfo.features)
    return features_.Mutable(index);
}
::content::ServiceWorkerOriginTrialFeature* ServiceWorkerOriginTrialInfo::add_features()
{
    // @@protoc_insertion_point(field_add:content.ServiceWorkerOriginTrialInfo.features)
    return features_.Add();
}
::google::protobuf::RepeatedPtrField<::content::ServiceWorkerOriginTrialFeature>*
ServiceWorkerOriginTrialInfo::mutable_features()
{
    // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerOriginTrialInfo.features)
    return &features_;
}
const ::google::protobuf::RepeatedPtrField<::content::ServiceWorkerOriginTrialFeature>&
ServiceWorkerOriginTrialInfo::features() const
{
    // @@protoc_insertion_point(field_list:content.ServiceWorkerOriginTrialInfo.features)
    return features_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForServiceWorkerNavigationPreloadState(
    ServiceWorkerNavigationPreloadState* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerNavigationPreloadState::kEnabledFieldNumber;
const int ServiceWorkerNavigationPreloadState::kHeaderFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerNavigationPreloadState::ServiceWorkerNavigationPreloadState()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:content.ServiceWorkerNavigationPreloadState)
}

void ServiceWorkerNavigationPreloadState::InitAsDefaultInstance()
{
}

ServiceWorkerNavigationPreloadState::ServiceWorkerNavigationPreloadState(const ServiceWorkerNavigationPreloadState& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerNavigationPreloadState)
}

void ServiceWorkerNavigationPreloadState::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerNavigationPreloadState::~ServiceWorkerNavigationPreloadState()
{
    // @@protoc_insertion_point(destructor:content.ServiceWorkerNavigationPreloadState)
    SharedDtor();
}

void ServiceWorkerNavigationPreloadState::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ServiceWorkerNavigationPreloadState::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerNavigationPreloadState& ServiceWorkerNavigationPreloadState::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
    return *default_instance_;
}

ServiceWorkerNavigationPreloadState* ServiceWorkerNavigationPreloadState::default_instance_ = NULL;

ServiceWorkerNavigationPreloadState* ServiceWorkerNavigationPreloadState::New(::google::protobuf::Arena* arena) const
{
    ServiceWorkerNavigationPreloadState* n = new ServiceWorkerNavigationPreloadState;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ServiceWorkerNavigationPreloadState::Clear()
{
    // @@protoc_insertion_point(message_clear_start:content.ServiceWorkerNavigationPreloadState)
    if (_has_bits_[0 / 32] & 3u) {
        enabled_ = false;
        if (has_header()) {
            header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceWorkerNavigationPreloadState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForServiceWorkerNavigationPreloadState, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:content.ServiceWorkerNavigationPreloadState)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_header;
            break;
        }

        // optional string header = 2;
        case 2: {
            if (tag == 18) {
            parse_header:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_header()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:content.ServiceWorkerNavigationPreloadState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:content.ServiceWorkerNavigationPreloadState)
    return false;
#undef DO_
}

void ServiceWorkerNavigationPreloadState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:content.ServiceWorkerNavigationPreloadState)
    // required bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    // optional string header = 2;
    if (has_header()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->header(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:content.ServiceWorkerNavigationPreloadState)
}

int ServiceWorkerNavigationPreloadState::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerNavigationPreloadState)
    int total_size = 0;

    // required bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }
    // optional string header = 2;
    if (has_header()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->header());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceWorkerNavigationPreloadState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerNavigationPreloadState*>(&from));
}

void ServiceWorkerNavigationPreloadState::MergeFrom(const ServiceWorkerNavigationPreloadState& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerNavigationPreloadState)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
        if (from.has_header()) {
            set_has_header();
            header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ServiceWorkerNavigationPreloadState::CopyFrom(const ServiceWorkerNavigationPreloadState& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerNavigationPreloadState)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ServiceWorkerNavigationPreloadState::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    return true;
}

void ServiceWorkerNavigationPreloadState::Swap(ServiceWorkerNavigationPreloadState* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ServiceWorkerNavigationPreloadState::InternalSwap(ServiceWorkerNavigationPreloadState* other)
{
    std::swap(enabled_, other->enabled_);
    header_.Swap(&other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerNavigationPreloadState::GetTypeName() const
{
    return "content.ServiceWorkerNavigationPreloadState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerNavigationPreloadState

// required bool enabled = 1;
bool ServiceWorkerNavigationPreloadState::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerNavigationPreloadState::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerNavigationPreloadState::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerNavigationPreloadState::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool ServiceWorkerNavigationPreloadState::enabled() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.enabled)
    return enabled_;
}
void ServiceWorkerNavigationPreloadState::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.enabled)
}

// optional string header = 2;
bool ServiceWorkerNavigationPreloadState::has_header() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerNavigationPreloadState::set_has_header()
{
    _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerNavigationPreloadState::clear_has_header()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerNavigationPreloadState::clear_header()
{
    header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_header();
}
const ::std::string& ServiceWorkerNavigationPreloadState::header() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerNavigationPreloadState.header)
    return header_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerNavigationPreloadState::set_header(const ::std::string& value)
{
    set_has_header();
    header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:content.ServiceWorkerNavigationPreloadState.header)
}
void ServiceWorkerNavigationPreloadState::set_header(const char* value)
{
    set_has_header();
    header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerNavigationPreloadState.header)
}
void ServiceWorkerNavigationPreloadState::set_header(const char* value, size_t size)
{
    set_has_header();
    header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerNavigationPreloadState.header)
}
::std::string* ServiceWorkerNavigationPreloadState::mutable_header()
{
    set_has_header();
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerNavigationPreloadState.header)
    return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerNavigationPreloadState::release_header()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerNavigationPreloadState.header)
    clear_has_header();
    return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerNavigationPreloadState::set_allocated_header(::std::string* header)
{
    if (header != NULL) {
        set_has_header();
    } else {
        clear_has_header();
    }
    header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerNavigationPreloadState.header)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForServiceWorkerRegistrationData(
    ServiceWorkerRegistrationData* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerRegistrationData::kRegistrationIdFieldNumber;
const int ServiceWorkerRegistrationData::kScopeUrlFieldNumber;
const int ServiceWorkerRegistrationData::kScriptUrlFieldNumber;
const int ServiceWorkerRegistrationData::kVersionIdFieldNumber;
const int ServiceWorkerRegistrationData::kIsActiveFieldNumber;
const int ServiceWorkerRegistrationData::kHasFetchHandlerFieldNumber;
const int ServiceWorkerRegistrationData::kLastUpdateCheckTimeFieldNumber;
const int ServiceWorkerRegistrationData::kResourcesTotalSizeBytesFieldNumber;
const int ServiceWorkerRegistrationData::kForeignFetchScopeFieldNumber;
const int ServiceWorkerRegistrationData::kForeignFetchOriginFieldNumber;
const int ServiceWorkerRegistrationData::kOriginTrialTokensFieldNumber;
const int ServiceWorkerRegistrationData::kNavigationPreloadStateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerRegistrationData::ServiceWorkerRegistrationData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:content.ServiceWorkerRegistrationData)
}

void ServiceWorkerRegistrationData::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    origin_trial_tokens_ = const_cast<::content::ServiceWorkerOriginTrialInfo*>(
        ::content::ServiceWorkerOriginTrialInfo::internal_default_instance());
#else
    origin_trial_tokens_ = const_cast<::content::ServiceWorkerOriginTrialInfo*>(&::content::ServiceWorkerOriginTrialInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    navigation_preload_state_ = const_cast<::content::ServiceWorkerNavigationPreloadState*>(
        ::content::ServiceWorkerNavigationPreloadState::internal_default_instance());
#else
    navigation_preload_state_ = const_cast<::content::ServiceWorkerNavigationPreloadState*>(&::content::ServiceWorkerNavigationPreloadState::default_instance());
#endif
}

ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(const ServiceWorkerRegistrationData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerRegistrationData)
}

void ServiceWorkerRegistrationData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    registration_id_ = GOOGLE_LONGLONG(0);
    scope_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    script_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_id_ = GOOGLE_LONGLONG(0);
    is_active_ = false;
    has_fetch_handler_ = false;
    last_update_check_time_ = GOOGLE_LONGLONG(0);
    resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
    origin_trial_tokens_ = NULL;
    navigation_preload_state_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData()
{
    // @@protoc_insertion_point(destructor:content.ServiceWorkerRegistrationData)
    SharedDtor();
}

void ServiceWorkerRegistrationData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    scope_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    script_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete origin_trial_tokens_;
        delete navigation_preload_state_;
    }
}

void ServiceWorkerRegistrationData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerRegistrationData& ServiceWorkerRegistrationData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
    return *default_instance_;
}

ServiceWorkerRegistrationData* ServiceWorkerRegistrationData::default_instance_ = NULL;

ServiceWorkerRegistrationData* ServiceWorkerRegistrationData::New(::google::protobuf::Arena* arena) const
{
    ServiceWorkerRegistrationData* n = new ServiceWorkerRegistrationData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ServiceWorkerRegistrationData::Clear()
{
// @@protoc_insertion_point(message_clear_start:content.ServiceWorkerRegistrationData)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                   \
    _Pragma("clang diagnostic push")                                                                                    \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(ServiceWorkerRegistrationData, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<ServiceWorkerRegistrationData*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(version_id_, resources_total_size_bytes_);
        ZR_(is_active_, has_fetch_handler_);
        registration_id_ = GOOGLE_LONGLONG(0);
        if (has_scope_url()) {
            scope_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_script_url()) {
            script_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (_has_bits_[8 / 32] & 3072u) {
        if (has_origin_trial_tokens()) {
            if (origin_trial_tokens_ != NULL)
                origin_trial_tokens_->::content::ServiceWorkerOriginTrialInfo::Clear();
        }
        if (has_navigation_preload_state()) {
            if (navigation_preload_state_ != NULL)
                navigation_preload_state_->::content::ServiceWorkerNavigationPreloadState::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    foreign_fetch_scope_.Clear();
    foreign_fetch_origin_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceWorkerRegistrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForServiceWorkerRegistrationData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:content.ServiceWorkerRegistrationData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required int64 registration_id = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &registration_id_)));
                set_has_registration_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_scope_url;
            break;
        }

        // required string scope_url = 2;
        case 2: {
            if (tag == 18) {
            parse_scope_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_scope_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_script_url;
            break;
        }

        // required string script_url = 3;
        case 3: {
            if (tag == 26) {
            parse_script_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_script_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_version_id;
            break;
        }

        // required int64 version_id = 4;
        case 4: {
            if (tag == 32) {
            parse_version_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &version_id_)));
                set_has_version_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_is_active;
            break;
        }

        // required bool is_active = 5;
        case 5: {
            if (tag == 40) {
            parse_is_active:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_active_)));
                set_has_is_active();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_has_fetch_handler;
            break;
        }

        // required bool has_fetch_handler = 6;
        case 6: {
            if (tag == 48) {
            parse_has_fetch_handler:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &has_fetch_handler_)));
                set_has_has_fetch_handler();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_last_update_check_time;
            break;
        }

        // required int64 last_update_check_time = 7;
        case 7: {
            if (tag == 56) {
            parse_last_update_check_time:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &last_update_check_time_)));
                set_has_last_update_check_time();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_resources_total_size_bytes;
            break;
        }

        // optional uint64 resources_total_size_bytes = 8;
        case 8: {
            if (tag == 64) {
            parse_resources_total_size_bytes:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &resources_total_size_bytes_)));
                set_has_resources_total_size_bytes();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_foreign_fetch_scope;
            break;
        }

        // repeated string foreign_fetch_scope = 9;
        case 9: {
            if (tag == 74) {
            parse_foreign_fetch_scope:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_foreign_fetch_scope()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_foreign_fetch_scope;
            if (input->ExpectTag(82))
                goto parse_foreign_fetch_origin;
            break;
        }

        // repeated string foreign_fetch_origin = 10;
        case 10: {
            if (tag == 82) {
            parse_foreign_fetch_origin:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_foreign_fetch_origin()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_foreign_fetch_origin;
            if (input->ExpectTag(90))
                goto parse_origin_trial_tokens;
            break;
        }

        // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
        case 11: {
            if (tag == 90) {
            parse_origin_trial_tokens:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_origin_trial_tokens()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_navigation_preload_state;
            break;
        }

        // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
        case 12: {
            if (tag == 98) {
            parse_navigation_preload_state:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_navigation_preload_state()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:content.ServiceWorkerRegistrationData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:content.ServiceWorkerRegistrationData)
    return false;
#undef DO_
}

void ServiceWorkerRegistrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:content.ServiceWorkerRegistrationData)
    // required int64 registration_id = 1;
    if (has_registration_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->registration_id(), output);
    }

    // required string scope_url = 2;
    if (has_scope_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->scope_url(), output);
    }

    // required string script_url = 3;
    if (has_script_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->script_url(), output);
    }

    // required int64 version_id = 4;
    if (has_version_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version_id(), output);
    }

    // required bool is_active = 5;
    if (has_is_active()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_active(), output);
    }

    // required bool has_fetch_handler = 6;
    if (has_has_fetch_handler()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_fetch_handler(), output);
    }

    // required int64 last_update_check_time = 7;
    if (has_last_update_check_time()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->last_update_check_time(), output);
    }

    // optional uint64 resources_total_size_bytes = 8;
    if (has_resources_total_size_bytes()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->resources_total_size_bytes(), output);
    }

    // repeated string foreign_fetch_scope = 9;
    for (int i = 0; i < this->foreign_fetch_scope_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            9, this->foreign_fetch_scope(i), output);
    }

    // repeated string foreign_fetch_origin = 10;
    for (int i = 0; i < this->foreign_fetch_origin_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            10, this->foreign_fetch_origin(i), output);
    }

    // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
    if (has_origin_trial_tokens()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *this->origin_trial_tokens_, output);
    }

    // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
    if (has_navigation_preload_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *this->navigation_preload_state_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:content.ServiceWorkerRegistrationData)
}

int ServiceWorkerRegistrationData::RequiredFieldsByteSizeFallback() const
{
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.ServiceWorkerRegistrationData)
    int total_size = 0;

    if (has_registration_id()) {
        // required int64 registration_id = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->registration_id());
    }

    if (has_scope_url()) {
        // required string scope_url = 2;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->scope_url());
    }

    if (has_script_url()) {
        // required string script_url = 3;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->script_url());
    }

    if (has_version_id()) {
        // required int64 version_id = 4;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->version_id());
    }

    if (has_is_active()) {
        // required bool is_active = 5;
        total_size += 1 + 1;
    }

    if (has_has_fetch_handler()) {
        // required bool has_fetch_handler = 6;
        total_size += 1 + 1;
    }

    if (has_last_update_check_time()) {
        // required int64 last_update_check_time = 7;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_update_check_time());
    }

    return total_size;
}
int ServiceWorkerRegistrationData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerRegistrationData)
    int total_size = 0;

    if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) { // All required fields are present.
        // required int64 registration_id = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->registration_id());

        // required string scope_url = 2;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->scope_url());

        // required string script_url = 3;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->script_url());

        // required int64 version_id = 4;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->version_id());

        // required bool is_active = 5;
        total_size += 1 + 1;

        // required bool has_fetch_handler = 6;
        total_size += 1 + 1;

        // required int64 last_update_check_time = 7;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_update_check_time());

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    // optional uint64 resources_total_size_bytes = 8;
    if (has_resources_total_size_bytes()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->resources_total_size_bytes());
    }

    if (_has_bits_[10 / 32] & 3072u) {
        // optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
        if (has_origin_trial_tokens()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->origin_trial_tokens_);
        }

        // optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
        if (has_navigation_preload_state()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->navigation_preload_state_);
        }
    }
    // repeated string foreign_fetch_scope = 9;
    total_size += 1 * this->foreign_fetch_scope_size();
    for (int i = 0; i < this->foreign_fetch_scope_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->foreign_fetch_scope(i));
    }

    // repeated string foreign_fetch_origin = 10;
    total_size += 1 * this->foreign_fetch_origin_size();
    for (int i = 0; i < this->foreign_fetch_origin_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->foreign_fetch_origin(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceWorkerRegistrationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerRegistrationData*>(&from));
}

void ServiceWorkerRegistrationData::MergeFrom(const ServiceWorkerRegistrationData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerRegistrationData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    foreign_fetch_scope_.MergeFrom(from.foreign_fetch_scope_);
    foreign_fetch_origin_.MergeFrom(from.foreign_fetch_origin_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_registration_id()) {
            set_registration_id(from.registration_id());
        }
        if (from.has_scope_url()) {
            set_has_scope_url();
            scope_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_url_);
        }
        if (from.has_script_url()) {
            set_has_script_url();
            script_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_url_);
        }
        if (from.has_version_id()) {
            set_version_id(from.version_id());
        }
        if (from.has_is_active()) {
            set_is_active(from.is_active());
        }
        if (from.has_has_fetch_handler()) {
            set_has_fetch_handler(from.has_fetch_handler());
        }
        if (from.has_last_update_check_time()) {
            set_last_update_check_time(from.last_update_check_time());
        }
        if (from.has_resources_total_size_bytes()) {
            set_resources_total_size_bytes(from.resources_total_size_bytes());
        }
    }
    if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
        if (from.has_origin_trial_tokens()) {
            mutable_origin_trial_tokens()->::content::ServiceWorkerOriginTrialInfo::MergeFrom(from.origin_trial_tokens());
        }
        if (from.has_navigation_preload_state()) {
            mutable_navigation_preload_state()->::content::ServiceWorkerNavigationPreloadState::MergeFrom(from.navigation_preload_state());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ServiceWorkerRegistrationData::CopyFrom(const ServiceWorkerRegistrationData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerRegistrationData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ServiceWorkerRegistrationData::IsInitialized() const
{
    if ((_has_bits_[0] & 0x0000007f) != 0x0000007f)
        return false;

    if (has_origin_trial_tokens()) {
        if (!this->origin_trial_tokens_->IsInitialized())
            return false;
    }
    if (has_navigation_preload_state()) {
        if (!this->navigation_preload_state_->IsInitialized())
            return false;
    }
    return true;
}

void ServiceWorkerRegistrationData::Swap(ServiceWorkerRegistrationData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ServiceWorkerRegistrationData::InternalSwap(ServiceWorkerRegistrationData* other)
{
    std::swap(registration_id_, other->registration_id_);
    scope_url_.Swap(&other->scope_url_);
    script_url_.Swap(&other->script_url_);
    std::swap(version_id_, other->version_id_);
    std::swap(is_active_, other->is_active_);
    std::swap(has_fetch_handler_, other->has_fetch_handler_);
    std::swap(last_update_check_time_, other->last_update_check_time_);
    std::swap(resources_total_size_bytes_, other->resources_total_size_bytes_);
    foreign_fetch_scope_.UnsafeArenaSwap(&other->foreign_fetch_scope_);
    foreign_fetch_origin_.UnsafeArenaSwap(&other->foreign_fetch_origin_);
    std::swap(origin_trial_tokens_, other->origin_trial_tokens_);
    std::swap(navigation_preload_state_, other->navigation_preload_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerRegistrationData::GetTypeName() const
{
    return "content.ServiceWorkerRegistrationData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerRegistrationData

// required int64 registration_id = 1;
bool ServiceWorkerRegistrationData::has_registration_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerRegistrationData::set_has_registration_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerRegistrationData::clear_has_registration_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerRegistrationData::clear_registration_id()
{
    registration_id_ = GOOGLE_LONGLONG(0);
    clear_has_registration_id();
}
::google::protobuf::int64 ServiceWorkerRegistrationData::registration_id() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.registration_id)
    return registration_id_;
}
void ServiceWorkerRegistrationData::set_registration_id(::google::protobuf::int64 value)
{
    set_has_registration_id();
    registration_id_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.registration_id)
}

// required string scope_url = 2;
bool ServiceWorkerRegistrationData::has_scope_url() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerRegistrationData::set_has_scope_url()
{
    _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerRegistrationData::clear_has_scope_url()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerRegistrationData::clear_scope_url()
{
    scope_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_scope_url();
}
const ::std::string& ServiceWorkerRegistrationData::scope_url() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.scope_url)
    return scope_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerRegistrationData::set_scope_url(const ::std::string& value)
{
    set_has_scope_url();
    scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.scope_url)
}
void ServiceWorkerRegistrationData::set_scope_url(const char* value)
{
    set_has_scope_url();
    scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.scope_url)
}
void ServiceWorkerRegistrationData::set_scope_url(const char* value, size_t size)
{
    set_has_scope_url();
    scope_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.scope_url)
}
::std::string* ServiceWorkerRegistrationData::mutable_scope_url()
{
    set_has_scope_url();
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.scope_url)
    return scope_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerRegistrationData::release_scope_url()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.scope_url)
    clear_has_scope_url();
    return scope_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerRegistrationData::set_allocated_scope_url(::std::string* scope_url)
{
    if (scope_url != NULL) {
        set_has_scope_url();
    } else {
        clear_has_scope_url();
    }
    scope_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope_url);
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.scope_url)
}

// required string script_url = 3;
bool ServiceWorkerRegistrationData::has_script_url() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServiceWorkerRegistrationData::set_has_script_url()
{
    _has_bits_[0] |= 0x00000004u;
}
void ServiceWorkerRegistrationData::clear_has_script_url()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ServiceWorkerRegistrationData::clear_script_url()
{
    script_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_script_url();
}
const ::std::string& ServiceWorkerRegistrationData::script_url() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.script_url)
    return script_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerRegistrationData::set_script_url(const ::std::string& value)
{
    set_has_script_url();
    script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.script_url)
}
void ServiceWorkerRegistrationData::set_script_url(const char* value)
{
    set_has_script_url();
    script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.script_url)
}
void ServiceWorkerRegistrationData::set_script_url(const char* value, size_t size)
{
    set_has_script_url();
    script_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.script_url)
}
::std::string* ServiceWorkerRegistrationData::mutable_script_url()
{
    set_has_script_url();
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.script_url)
    return script_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerRegistrationData::release_script_url()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.script_url)
    clear_has_script_url();
    return script_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerRegistrationData::set_allocated_script_url(::std::string* script_url)
{
    if (script_url != NULL) {
        set_has_script_url();
    } else {
        clear_has_script_url();
    }
    script_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_url);
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.script_url)
}

// required int64 version_id = 4;
bool ServiceWorkerRegistrationData::has_version_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServiceWorkerRegistrationData::set_has_version_id()
{
    _has_bits_[0] |= 0x00000008u;
}
void ServiceWorkerRegistrationData::clear_has_version_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ServiceWorkerRegistrationData::clear_version_id()
{
    version_id_ = GOOGLE_LONGLONG(0);
    clear_has_version_id();
}
::google::protobuf::int64 ServiceWorkerRegistrationData::version_id() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.version_id)
    return version_id_;
}
void ServiceWorkerRegistrationData::set_version_id(::google::protobuf::int64 value)
{
    set_has_version_id();
    version_id_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.version_id)
}

// required bool is_active = 5;
bool ServiceWorkerRegistrationData::has_is_active() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServiceWorkerRegistrationData::set_has_is_active()
{
    _has_bits_[0] |= 0x00000010u;
}
void ServiceWorkerRegistrationData::clear_has_is_active()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ServiceWorkerRegistrationData::clear_is_active()
{
    is_active_ = false;
    clear_has_is_active();
}
bool ServiceWorkerRegistrationData::is_active() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.is_active)
    return is_active_;
}
void ServiceWorkerRegistrationData::set_is_active(bool value)
{
    set_has_is_active();
    is_active_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.is_active)
}

// required bool has_fetch_handler = 6;
bool ServiceWorkerRegistrationData::has_has_fetch_handler() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServiceWorkerRegistrationData::set_has_has_fetch_handler()
{
    _has_bits_[0] |= 0x00000020u;
}
void ServiceWorkerRegistrationData::clear_has_has_fetch_handler()
{
    _has_bits_[0] &= ~0x00000020u;
}
void ServiceWorkerRegistrationData::clear_has_fetch_handler()
{
    has_fetch_handler_ = false;
    clear_has_has_fetch_handler();
}
bool ServiceWorkerRegistrationData::has_fetch_handler() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.has_fetch_handler)
    return has_fetch_handler_;
}
void ServiceWorkerRegistrationData::set_has_fetch_handler(bool value)
{
    set_has_has_fetch_handler();
    has_fetch_handler_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.has_fetch_handler)
}

// required int64 last_update_check_time = 7;
bool ServiceWorkerRegistrationData::has_last_update_check_time() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServiceWorkerRegistrationData::set_has_last_update_check_time()
{
    _has_bits_[0] |= 0x00000040u;
}
void ServiceWorkerRegistrationData::clear_has_last_update_check_time()
{
    _has_bits_[0] &= ~0x00000040u;
}
void ServiceWorkerRegistrationData::clear_last_update_check_time()
{
    last_update_check_time_ = GOOGLE_LONGLONG(0);
    clear_has_last_update_check_time();
}
::google::protobuf::int64 ServiceWorkerRegistrationData::last_update_check_time() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.last_update_check_time)
    return last_update_check_time_;
}
void ServiceWorkerRegistrationData::set_last_update_check_time(::google::protobuf::int64 value)
{
    set_has_last_update_check_time();
    last_update_check_time_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.last_update_check_time)
}

// optional uint64 resources_total_size_bytes = 8;
bool ServiceWorkerRegistrationData::has_resources_total_size_bytes() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServiceWorkerRegistrationData::set_has_resources_total_size_bytes()
{
    _has_bits_[0] |= 0x00000080u;
}
void ServiceWorkerRegistrationData::clear_has_resources_total_size_bytes()
{
    _has_bits_[0] &= ~0x00000080u;
}
void ServiceWorkerRegistrationData::clear_resources_total_size_bytes()
{
    resources_total_size_bytes_ = GOOGLE_ULONGLONG(0);
    clear_has_resources_total_size_bytes();
}
::google::protobuf::uint64 ServiceWorkerRegistrationData::resources_total_size_bytes() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
    return resources_total_size_bytes_;
}
void ServiceWorkerRegistrationData::set_resources_total_size_bytes(::google::protobuf::uint64 value)
{
    set_has_resources_total_size_bytes();
    resources_total_size_bytes_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.resources_total_size_bytes)
}

// repeated string foreign_fetch_scope = 9;
int ServiceWorkerRegistrationData::foreign_fetch_scope_size() const
{
    return foreign_fetch_scope_.size();
}
void ServiceWorkerRegistrationData::clear_foreign_fetch_scope()
{
    foreign_fetch_scope_.Clear();
}
const ::std::string& ServiceWorkerRegistrationData::foreign_fetch_scope(int index) const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
    return foreign_fetch_scope_.Get(index);
}
::std::string* ServiceWorkerRegistrationData::mutable_foreign_fetch_scope(int index)
{
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
    return foreign_fetch_scope_.Mutable(index);
}
void ServiceWorkerRegistrationData::set_foreign_fetch_scope(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
    foreign_fetch_scope_.Mutable(index)->assign(value);
}
void ServiceWorkerRegistrationData::set_foreign_fetch_scope(int index, const char* value)
{
    foreign_fetch_scope_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
}
void ServiceWorkerRegistrationData::set_foreign_fetch_scope(int index, const char* value, size_t size)
{
    foreign_fetch_scope_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
}
::std::string* ServiceWorkerRegistrationData::add_foreign_fetch_scope()
{
    // @@protoc_insertion_point(field_add_mutable:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
    return foreign_fetch_scope_.Add();
}
void ServiceWorkerRegistrationData::add_foreign_fetch_scope(const ::std::string& value)
{
    foreign_fetch_scope_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
}
void ServiceWorkerRegistrationData::add_foreign_fetch_scope(const char* value)
{
    foreign_fetch_scope_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
}
void ServiceWorkerRegistrationData::add_foreign_fetch_scope(const char* value, size_t size)
{
    foreign_fetch_scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
ServiceWorkerRegistrationData::foreign_fetch_scope() const
{
    // @@protoc_insertion_point(field_list:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
    return foreign_fetch_scope_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
ServiceWorkerRegistrationData::mutable_foreign_fetch_scope()
{
    // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerRegistrationData.foreign_fetch_scope)
    return &foreign_fetch_scope_;
}

// repeated string foreign_fetch_origin = 10;
int ServiceWorkerRegistrationData::foreign_fetch_origin_size() const
{
    return foreign_fetch_origin_.size();
}
void ServiceWorkerRegistrationData::clear_foreign_fetch_origin()
{
    foreign_fetch_origin_.Clear();
}
const ::std::string& ServiceWorkerRegistrationData::foreign_fetch_origin(int index) const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
    return foreign_fetch_origin_.Get(index);
}
::std::string* ServiceWorkerRegistrationData::mutable_foreign_fetch_origin(int index)
{
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
    return foreign_fetch_origin_.Mutable(index);
}
void ServiceWorkerRegistrationData::set_foreign_fetch_origin(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
    foreign_fetch_origin_.Mutable(index)->assign(value);
}
void ServiceWorkerRegistrationData::set_foreign_fetch_origin(int index, const char* value)
{
    foreign_fetch_origin_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
}
void ServiceWorkerRegistrationData::set_foreign_fetch_origin(int index, const char* value, size_t size)
{
    foreign_fetch_origin_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
}
::std::string* ServiceWorkerRegistrationData::add_foreign_fetch_origin()
{
    // @@protoc_insertion_point(field_add_mutable:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
    return foreign_fetch_origin_.Add();
}
void ServiceWorkerRegistrationData::add_foreign_fetch_origin(const ::std::string& value)
{
    foreign_fetch_origin_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
}
void ServiceWorkerRegistrationData::add_foreign_fetch_origin(const char* value)
{
    foreign_fetch_origin_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
}
void ServiceWorkerRegistrationData::add_foreign_fetch_origin(const char* value, size_t size)
{
    foreign_fetch_origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
ServiceWorkerRegistrationData::foreign_fetch_origin() const
{
    // @@protoc_insertion_point(field_list:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
    return foreign_fetch_origin_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
ServiceWorkerRegistrationData::mutable_foreign_fetch_origin()
{
    // @@protoc_insertion_point(field_mutable_list:content.ServiceWorkerRegistrationData.foreign_fetch_origin)
    return &foreign_fetch_origin_;
}

// optional .content.ServiceWorkerOriginTrialInfo origin_trial_tokens = 11;
bool ServiceWorkerRegistrationData::has_origin_trial_tokens() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void ServiceWorkerRegistrationData::set_has_origin_trial_tokens()
{
    _has_bits_[0] |= 0x00000400u;
}
void ServiceWorkerRegistrationData::clear_has_origin_trial_tokens()
{
    _has_bits_[0] &= ~0x00000400u;
}
void ServiceWorkerRegistrationData::clear_origin_trial_tokens()
{
    if (origin_trial_tokens_ != NULL)
        origin_trial_tokens_->::content::ServiceWorkerOriginTrialInfo::Clear();
    clear_has_origin_trial_tokens();
}
const ::content::ServiceWorkerOriginTrialInfo& ServiceWorkerRegistrationData::origin_trial_tokens() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.origin_trial_tokens)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return origin_trial_tokens_ != NULL ? *origin_trial_tokens_ : *default_instance().origin_trial_tokens_;
#else
    return origin_trial_tokens_ != NULL ? *origin_trial_tokens_ : *default_instance_->origin_trial_tokens_;
#endif
}
::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::mutable_origin_trial_tokens()
{
    set_has_origin_trial_tokens();
    if (origin_trial_tokens_ == NULL) {
        origin_trial_tokens_ = new ::content::ServiceWorkerOriginTrialInfo;
    }
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.origin_trial_tokens)
    return origin_trial_tokens_;
}
::content::ServiceWorkerOriginTrialInfo* ServiceWorkerRegistrationData::release_origin_trial_tokens()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.origin_trial_tokens)
    clear_has_origin_trial_tokens();
    ::content::ServiceWorkerOriginTrialInfo* temp = origin_trial_tokens_;
    origin_trial_tokens_ = NULL;
    return temp;
}
void ServiceWorkerRegistrationData::set_allocated_origin_trial_tokens(::content::ServiceWorkerOriginTrialInfo* origin_trial_tokens)
{
    delete origin_trial_tokens_;
    origin_trial_tokens_ = origin_trial_tokens;
    if (origin_trial_tokens) {
        set_has_origin_trial_tokens();
    } else {
        clear_has_origin_trial_tokens();
    }
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.origin_trial_tokens)
}

// optional .content.ServiceWorkerNavigationPreloadState navigation_preload_state = 12;
bool ServiceWorkerRegistrationData::has_navigation_preload_state() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void ServiceWorkerRegistrationData::set_has_navigation_preload_state()
{
    _has_bits_[0] |= 0x00000800u;
}
void ServiceWorkerRegistrationData::clear_has_navigation_preload_state()
{
    _has_bits_[0] &= ~0x00000800u;
}
void ServiceWorkerRegistrationData::clear_navigation_preload_state()
{
    if (navigation_preload_state_ != NULL)
        navigation_preload_state_->::content::ServiceWorkerNavigationPreloadState::Clear();
    clear_has_navigation_preload_state();
}
const ::content::ServiceWorkerNavigationPreloadState& ServiceWorkerRegistrationData::navigation_preload_state() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerRegistrationData.navigation_preload_state)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return navigation_preload_state_ != NULL ? *navigation_preload_state_ : *default_instance().navigation_preload_state_;
#else
    return navigation_preload_state_ != NULL ? *navigation_preload_state_ : *default_instance_->navigation_preload_state_;
#endif
}
::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::mutable_navigation_preload_state()
{
    set_has_navigation_preload_state();
    if (navigation_preload_state_ == NULL) {
        navigation_preload_state_ = new ::content::ServiceWorkerNavigationPreloadState;
    }
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerRegistrationData.navigation_preload_state)
    return navigation_preload_state_;
}
::content::ServiceWorkerNavigationPreloadState* ServiceWorkerRegistrationData::release_navigation_preload_state()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerRegistrationData.navigation_preload_state)
    clear_has_navigation_preload_state();
    ::content::ServiceWorkerNavigationPreloadState* temp = navigation_preload_state_;
    navigation_preload_state_ = NULL;
    return temp;
}
void ServiceWorkerRegistrationData::set_allocated_navigation_preload_state(::content::ServiceWorkerNavigationPreloadState* navigation_preload_state)
{
    delete navigation_preload_state_;
    navigation_preload_state_ = navigation_preload_state;
    if (navigation_preload_state) {
        set_has_navigation_preload_state();
    } else {
        clear_has_navigation_preload_state();
    }
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerRegistrationData.navigation_preload_state)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForServiceWorkerResourceRecord(
    ServiceWorkerResourceRecord* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceWorkerResourceRecord::kResourceIdFieldNumber;
const int ServiceWorkerResourceRecord::kUrlFieldNumber;
const int ServiceWorkerResourceRecord::kSizeBytesFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceWorkerResourceRecord::ServiceWorkerResourceRecord()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:content.ServiceWorkerResourceRecord)
}

void ServiceWorkerResourceRecord::InitAsDefaultInstance()
{
}

ServiceWorkerResourceRecord::ServiceWorkerResourceRecord(const ServiceWorkerResourceRecord& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:content.ServiceWorkerResourceRecord)
}

void ServiceWorkerResourceRecord::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    resource_id_ = GOOGLE_LONGLONG(0);
    url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    size_bytes_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceWorkerResourceRecord::~ServiceWorkerResourceRecord()
{
    // @@protoc_insertion_point(destructor:content.ServiceWorkerResourceRecord)
    SharedDtor();
}

void ServiceWorkerResourceRecord::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ServiceWorkerResourceRecord::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceWorkerResourceRecord& ServiceWorkerResourceRecord::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_service_5fworker_5fdatabase_2eproto();
#endif
    return *default_instance_;
}

ServiceWorkerResourceRecord* ServiceWorkerResourceRecord::default_instance_ = NULL;

ServiceWorkerResourceRecord* ServiceWorkerResourceRecord::New(::google::protobuf::Arena* arena) const
{
    ServiceWorkerResourceRecord* n = new ServiceWorkerResourceRecord;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ServiceWorkerResourceRecord::Clear()
{
    // @@protoc_insertion_point(message_clear_start:content.ServiceWorkerResourceRecord)
    if (_has_bits_[0 / 32] & 7u) {
        resource_id_ = GOOGLE_LONGLONG(0);
        if (has_url()) {
            url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        size_bytes_ = GOOGLE_ULONGLONG(0);
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceWorkerResourceRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForServiceWorkerResourceRecord, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:content.ServiceWorkerResourceRecord)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required int64 resource_id = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &resource_id_)));
                set_has_resource_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_url;
            break;
        }

        // required string url = 2;
        case 2: {
            if (tag == 18) {
            parse_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_size_bytes;
            break;
        }

        // optional uint64 size_bytes = 3;
        case 3: {
            if (tag == 24) {
            parse_size_bytes:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &size_bytes_)));
                set_has_size_bytes();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:content.ServiceWorkerResourceRecord)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:content.ServiceWorkerResourceRecord)
    return false;
#undef DO_
}

void ServiceWorkerResourceRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:content.ServiceWorkerResourceRecord)
    // required int64 resource_id = 1;
    if (has_resource_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->resource_id(), output);
    }

    // required string url = 2;
    if (has_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->url(), output);
    }

    // optional uint64 size_bytes = 3;
    if (has_size_bytes()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size_bytes(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:content.ServiceWorkerResourceRecord)
}

int ServiceWorkerResourceRecord::RequiredFieldsByteSizeFallback() const
{
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.ServiceWorkerResourceRecord)
    int total_size = 0;

    if (has_resource_id()) {
        // required int64 resource_id = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->resource_id());
    }

    if (has_url()) {
        // required string url = 2;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->url());
    }

    return total_size;
}
int ServiceWorkerResourceRecord::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:content.ServiceWorkerResourceRecord)
    int total_size = 0;

    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) { // All required fields are present.
        // required int64 resource_id = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->resource_id());

        // required string url = 2;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->url());

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    // optional uint64 size_bytes = 3;
    if (has_size_bytes()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->size_bytes());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ServiceWorkerResourceRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ServiceWorkerResourceRecord*>(&from));
}

void ServiceWorkerResourceRecord::MergeFrom(const ServiceWorkerResourceRecord& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:content.ServiceWorkerResourceRecord)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_resource_id()) {
            set_resource_id(from.resource_id());
        }
        if (from.has_url()) {
            set_has_url();
            url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
        }
        if (from.has_size_bytes()) {
            set_size_bytes(from.size_bytes());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ServiceWorkerResourceRecord::CopyFrom(const ServiceWorkerResourceRecord& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:content.ServiceWorkerResourceRecord)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ServiceWorkerResourceRecord::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
        return false;

    return true;
}

void ServiceWorkerResourceRecord::Swap(ServiceWorkerResourceRecord* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ServiceWorkerResourceRecord::InternalSwap(ServiceWorkerResourceRecord* other)
{
    std::swap(resource_id_, other->resource_id_);
    url_.Swap(&other->url_);
    std::swap(size_bytes_, other->size_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceWorkerResourceRecord::GetTypeName() const
{
    return "content.ServiceWorkerResourceRecord";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceWorkerResourceRecord

// required int64 resource_id = 1;
bool ServiceWorkerResourceRecord::has_resource_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServiceWorkerResourceRecord::set_has_resource_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void ServiceWorkerResourceRecord::clear_has_resource_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ServiceWorkerResourceRecord::clear_resource_id()
{
    resource_id_ = GOOGLE_LONGLONG(0);
    clear_has_resource_id();
}
::google::protobuf::int64 ServiceWorkerResourceRecord::resource_id() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.resource_id)
    return resource_id_;
}
void ServiceWorkerResourceRecord::set_resource_id(::google::protobuf::int64 value)
{
    set_has_resource_id();
    resource_id_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.resource_id)
}

// required string url = 2;
bool ServiceWorkerResourceRecord::has_url() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServiceWorkerResourceRecord::set_has_url()
{
    _has_bits_[0] |= 0x00000002u;
}
void ServiceWorkerResourceRecord::clear_has_url()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ServiceWorkerResourceRecord::clear_url()
{
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
}
const ::std::string& ServiceWorkerResourceRecord::url() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.url)
    return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerResourceRecord::set_url(const ::std::string& value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.url)
}
void ServiceWorkerResourceRecord::set_url(const char* value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:content.ServiceWorkerResourceRecord.url)
}
void ServiceWorkerResourceRecord::set_url(const char* value, size_t size)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:content.ServiceWorkerResourceRecord.url)
}
::std::string* ServiceWorkerResourceRecord::mutable_url()
{
    set_has_url();
    // @@protoc_insertion_point(field_mutable:content.ServiceWorkerResourceRecord.url)
    return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceWorkerResourceRecord::release_url()
{
    // @@protoc_insertion_point(field_release:content.ServiceWorkerResourceRecord.url)
    clear_has_url();
    return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceWorkerResourceRecord::set_allocated_url(::std::string* url)
{
    if (url != NULL) {
        set_has_url();
    } else {
        clear_has_url();
    }
    url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
    // @@protoc_insertion_point(field_set_allocated:content.ServiceWorkerResourceRecord.url)
}

// optional uint64 size_bytes = 3;
bool ServiceWorkerResourceRecord::has_size_bytes() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServiceWorkerResourceRecord::set_has_size_bytes()
{
    _has_bits_[0] |= 0x00000004u;
}
void ServiceWorkerResourceRecord::clear_has_size_bytes()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ServiceWorkerResourceRecord::clear_size_bytes()
{
    size_bytes_ = GOOGLE_ULONGLONG(0);
    clear_has_size_bytes();
}
::google::protobuf::uint64 ServiceWorkerResourceRecord::size_bytes() const
{
    // @@protoc_insertion_point(field_get:content.ServiceWorkerResourceRecord.size_bytes)
    return size_bytes_;
}
void ServiceWorkerResourceRecord::set_size_bytes(::google::protobuf::uint64 value)
{
    set_has_size_bytes();
    size_bytes_ = value;
    // @@protoc_insertion_point(field_set:content.ServiceWorkerResourceRecord.size_bytes)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace content

// @@protoc_insertion_point(global_scope)
