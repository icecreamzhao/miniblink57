// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MediaSessionImpl

#ifndef org_chromium_content_browser_MediaSessionImpl_JNI
#define org_chromium_content_browser_MediaSessionImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaSessionImplClassPath[] = "org/chromium/content/browser/MediaSessionImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaSessionImpl_clazz __attribute__((unused)) = 0;
#define MediaSessionImpl_clazz(env) base::android::LazyGetClass(env, kMediaSessionImplClassPath, &g_MediaSessionImpl_clazz)

} // namespace

namespace content {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_MediaSessionImpl_nativeResume(JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid)
{
    MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Resume");
    return native->Resume(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_MediaSessionImpl_nativeSuspend(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid)
{
    MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Suspend");
    return native->Suspend(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_MediaSessionImpl_nativeStop(JNIEnv* env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid)
{
    MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
    return native->Stop(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_MediaSessionImpl_nativeDidReceiveAction(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeMediaSessionAndroid,
    jint action)
{
    MediaSessionAndroid* native = reinterpret_cast<MediaSessionAndroid*>(nativeMediaSessionAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "DidReceiveAction");
    return native->DidReceiveAction(env, base::android::JavaParamRef<jobject>(env, jcaller), action);
}

static base::android::ScopedJavaLocalRef<jobject>
GetMediaSessionFromWebContents(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& contents);

JNI_GENERATOR_EXPORT jobject
Java_org_chromium_content_browser_MediaSessionImpl_nativeGetMediaSessionFromWebContents(JNIEnv*
                                                                                            env,
    jclass jcaller,
    jobject contents)
{
    return GetMediaSessionFromWebContents(env,
        base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, contents))
        .Release();
}

static base::subtle::AtomicWord g_MediaSessionImpl_hasObservers = 0;
static jboolean Java_MediaSessionImpl_hasObservers(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaSessionImpl_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaSessionImpl_clazz(env),
        "hasObservers",
        "("
        ")"
        "Z",
        &g_MediaSessionImpl_hasObservers);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_MediaSessionImpl_mediaSessionDestroyed = 0;
static void Java_MediaSessionImpl_mediaSessionDestroyed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaSessionImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaSessionImpl_clazz(env),
        "mediaSessionDestroyed",
        "("
        ")"
        "V",
        &g_MediaSessionImpl_mediaSessionDestroyed);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MediaSessionImpl_mediaSessionStateChanged = 0;
static void Java_MediaSessionImpl_mediaSessionStateChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean isControllable,
    jboolean isSuspended)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaSessionImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaSessionImpl_clazz(env),
        "mediaSessionStateChanged",
        "("
        "Z"
        "Z"
        ")"
        "V",
        &g_MediaSessionImpl_mediaSessionStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, isControllable, isSuspended);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MediaSessionImpl_mediaSessionMetadataChanged = 0;
static void Java_MediaSessionImpl_mediaSessionMetadataChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& metadata)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaSessionImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaSessionImpl_clazz(env),
        "mediaSessionMetadataChanged",
        "("
        "Lorg/chromium/content_public/common/MediaMetadata;"
        ")"
        "V",
        &g_MediaSessionImpl_mediaSessionMetadataChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, metadata.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MediaSessionImpl_mediaSessionActionsChanged = 0;
static void Java_MediaSessionImpl_mediaSessionActionsChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jintArray>& actions)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaSessionImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaSessionImpl_clazz(env),
        "mediaSessionActionsChanged",
        "("
        "[I"
        ")"
        "V",
        &g_MediaSessionImpl_mediaSessionActionsChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, actions.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MediaSessionImpl_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_MediaSessionImpl_create(JNIEnv* env, jlong nativeMediaSession)
{
    CHECK_CLAZZ(env, MediaSessionImpl_clazz(env),
        MediaSessionImpl_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MediaSessionImpl_clazz(env),
        "create",
        "("
        "J"
        ")"
        "Lorg/chromium/content/browser/MediaSessionImpl;",
        &g_MediaSessionImpl_create);

    jobject ret = env->CallStaticObjectMethod(MediaSessionImpl_clazz(env),
        method_id, nativeMediaSession);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMediaSessionImpl[] = {
    { "nativeResume",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionImpl_nativeResume) },
    { "nativeSuspend",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionImpl_nativeSuspend) },
    { "nativeStop",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionImpl_nativeStop) },
    { "nativeDidReceiveAction",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionImpl_nativeDidReceiveAction) },
    { "nativeGetMediaSessionFromWebContents",
        "("
        "Lorg/chromium/content_public/browser/WebContents;"
        ")"
        "Lorg/chromium/content/browser/MediaSessionImpl;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MediaSessionImpl_nativeGetMediaSessionFromWebContents) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsMediaSessionImplSize = arraysize(kMethodsMediaSessionImpl);

    if (env->RegisterNatives(MediaSessionImpl_clazz(env),
            kMethodsMediaSessionImpl,
            kMethodsMediaSessionImplSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, MediaSessionImpl_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_MediaSessionImpl_JNI
