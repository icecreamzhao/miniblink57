// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/BackgroundSyncNetworkObserver

#ifndef org_chromium_content_browser_BackgroundSyncNetworkObserver_JNI
#define org_chromium_content_browser_BackgroundSyncNetworkObserver_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kBackgroundSyncNetworkObserverClassPath[] = "org/chromium/content/browser/BackgroundSyncNetworkObserver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_BackgroundSyncNetworkObserver_clazz
    __attribute__((unused))
    = 0;
#define BackgroundSyncNetworkObserver_clazz(env) base::android::LazyGetClass(env, kBackgroundSyncNetworkObserverClassPath, &g_BackgroundSyncNetworkObserver_clazz)

} // namespace

namespace content {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_BackgroundSyncNetworkObserver_nativeNotifyConnectionTypeChanged(JNIEnv*
                                                                                                      env,
    jobject jcaller,
    jlong nativePtr,
    jint newConnectionType)
{
    BackgroundSyncNetworkObserverAndroid::Observer* native = reinterpret_cast<BackgroundSyncNetworkObserverAndroid::Observer*>(nativePtr);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyConnectionTypeChanged");
    return native->NotifyConnectionTypeChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller), newConnectionType);
}

static base::subtle::AtomicWord g_BackgroundSyncNetworkObserver_createObserver = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_BackgroundSyncNetworkObserver_createObserver(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& ctx,
    jlong nativePtr)
{
    CHECK_CLAZZ(env, BackgroundSyncNetworkObserver_clazz(env),
        BackgroundSyncNetworkObserver_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BackgroundSyncNetworkObserver_clazz(env),
        "createObserver",
        "("
        "Landroid/content/Context;"
        "J"
        ")"
        "Lorg/chromium/content/browser/BackgroundSyncNetworkObserver;",
        &g_BackgroundSyncNetworkObserver_createObserver);

    jobject ret = env->CallStaticObjectMethod(BackgroundSyncNetworkObserver_clazz(env),
        method_id, ctx.obj(), nativePtr);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_BackgroundSyncNetworkObserver_removeObserver = 0;
static void Java_BackgroundSyncNetworkObserver_removeObserver(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativePtr)
{
    CHECK_CLAZZ(env, obj.obj(),
        BackgroundSyncNetworkObserver_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BackgroundSyncNetworkObserver_clazz(env),
        "removeObserver",
        "("
        "J"
        ")"
        "V",
        &g_BackgroundSyncNetworkObserver_removeObserver);

    env->CallVoidMethod(obj.obj(),
        method_id, nativePtr);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsBackgroundSyncNetworkObserver[] = {
    { "nativeNotifyConnectionTypeChanged",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_BackgroundSyncNetworkObserver_nativeNotifyConnectionTypeChanged) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsBackgroundSyncNetworkObserverSize = arraysize(kMethodsBackgroundSyncNetworkObserver);

    if (env->RegisterNatives(BackgroundSyncNetworkObserver_clazz(env),
            kMethodsBackgroundSyncNetworkObserver,
            kMethodsBackgroundSyncNetworkObserverSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, BackgroundSyncNetworkObserver_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_BackgroundSyncNetworkObserver_JNI
