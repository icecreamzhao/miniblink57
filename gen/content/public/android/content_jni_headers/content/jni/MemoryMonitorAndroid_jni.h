// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MemoryMonitorAndroid

#ifndef org_chromium_content_browser_MemoryMonitorAndroid_JNI
#define org_chromium_content_browser_MemoryMonitorAndroid_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMemoryMonitorAndroidClassPath[] = "org/chromium/content/browser/MemoryMonitorAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MemoryMonitorAndroid_clazz __attribute__((unused)) = 0;
#define MemoryMonitorAndroid_clazz(env) base::android::LazyGetClass(env, kMemoryMonitorAndroidClassPath, &g_MemoryMonitorAndroid_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static void GetMemoryInfoCallback(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong availMem,
    jboolean lowMemory,
    jlong threshold,
    jlong totalMem,
    jlong outPtr);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_MemoryMonitorAndroid_nativeGetMemoryInfoCallback(JNIEnv*
                                                                                       env,
    jclass jcaller,
    jlong availMem,
    jboolean lowMemory,
    jlong threshold,
    jlong totalMem,
    jlong outPtr)
{
    return GetMemoryInfoCallback(env, base::android::JavaParamRef<jclass>(env, jcaller), availMem, lowMemory, threshold, totalMem, outPtr);
}

static void OnTrimMemory(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint level);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_MemoryMonitorAndroid_nativeOnTrimMemory(JNIEnv*
                                                                              env,
    jclass jcaller,
    jint level)
{
    return OnTrimMemory(env, base::android::JavaParamRef<jclass>(env, jcaller),
        level);
}

static base::subtle::AtomicWord g_MemoryMonitorAndroid_getMemoryInfo = 0;
static void Java_MemoryMonitorAndroid_getMemoryInfo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context,
    jlong outPtr)
{
    CHECK_CLAZZ(env, MemoryMonitorAndroid_clazz(env),
        MemoryMonitorAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MemoryMonitorAndroid_clazz(env),
        "getMemoryInfo",
        "("
        "Landroid/content/Context;"
        "J"
        ")"
        "V",
        &g_MemoryMonitorAndroid_getMemoryInfo);

    env->CallStaticVoidMethod(MemoryMonitorAndroid_clazz(env),
        method_id, context.obj(), outPtr);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_MemoryMonitorAndroid_registerComponentCallbacks
    = 0;
static void Java_MemoryMonitorAndroid_registerComponentCallbacks(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, MemoryMonitorAndroid_clazz(env),
        MemoryMonitorAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MemoryMonitorAndroid_clazz(env),
        "registerComponentCallbacks",
        "("
        "Landroid/content/Context;"
        ")"
        "V",
        &g_MemoryMonitorAndroid_registerComponentCallbacks);

    env->CallStaticVoidMethod(MemoryMonitorAndroid_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsMemoryMonitorAndroid[] = {
    { "nativeGetMemoryInfoCallback",
        "("
        "J"
        "Z"
        "J"
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MemoryMonitorAndroid_nativeGetMemoryInfoCallback) },
    { "nativeOnTrimMemory",
        "("
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_MemoryMonitorAndroid_nativeOnTrimMemory) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsMemoryMonitorAndroidSize = arraysize(kMethodsMemoryMonitorAndroid);

    if (env->RegisterNatives(MemoryMonitorAndroid_clazz(env),
            kMethodsMemoryMonitorAndroid,
            kMethodsMemoryMonitorAndroidSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, MemoryMonitorAndroid_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_MemoryMonitorAndroid_JNI
