// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/DeviceSensors

#ifndef org_chromium_content_browser_DeviceSensors_JNI
#define org_chromium_content_browser_DeviceSensors_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kDeviceSensorsClassPath[] = "org/chromium/content/browser/DeviceSensors";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_DeviceSensors_clazz __attribute__((unused)) = 0;
#define DeviceSensors_clazz(env) base::android::LazyGetClass(env, kDeviceSensorsClassPath, &g_DeviceSensors_clazz)

} // namespace

namespace content {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_DeviceSensors_nativeGotOrientation(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeSensorManagerAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma)
{
    SensorManagerAndroid* native = reinterpret_cast<SensorManagerAndroid*>(nativeSensorManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GotOrientation");
    return native->GotOrientation(env, base::android::JavaParamRef<jobject>(env, jcaller), alpha, beta, gamma);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_DeviceSensors_nativeGotOrientationAbsolute(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeSensorManagerAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma)
{
    SensorManagerAndroid* native = reinterpret_cast<SensorManagerAndroid*>(nativeSensorManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GotOrientationAbsolute");
    return native->GotOrientationAbsolute(env,
        base::android::JavaParamRef<jobject>(env, jcaller), alpha, beta, gamma);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_DeviceSensors_nativeGotAcceleration(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeSensorManagerAndroid,
    jdouble x,
    jdouble y,
    jdouble z)
{
    SensorManagerAndroid* native = reinterpret_cast<SensorManagerAndroid*>(nativeSensorManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GotAcceleration");
    return native->GotAcceleration(env, base::android::JavaParamRef<jobject>(env, jcaller), x, y, z);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_DeviceSensors_nativeGotAccelerationIncludingGravity(JNIEnv*
                                                                                          env,
    jobject jcaller,
    jlong nativeSensorManagerAndroid,
    jdouble x,
    jdouble y,
    jdouble z)
{
    SensorManagerAndroid* native = reinterpret_cast<SensorManagerAndroid*>(nativeSensorManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GotAccelerationIncludingGravity");
    return native->GotAccelerationIncludingGravity(env,
        base::android::JavaParamRef<jobject>(env, jcaller), x, y, z);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_DeviceSensors_nativeGotRotationRate(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeSensorManagerAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma)
{
    SensorManagerAndroid* native = reinterpret_cast<SensorManagerAndroid*>(nativeSensorManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GotRotationRate");
    return native->GotRotationRate(env, base::android::JavaParamRef<jobject>(env, jcaller), alpha, beta, gamma);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_DeviceSensors_nativeGotLight(JNIEnv* env,
    jobject jcaller,
    jlong nativeSensorManagerAndroid,
    jdouble value)
{
    SensorManagerAndroid* native = reinterpret_cast<SensorManagerAndroid*>(nativeSensorManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GotLight");
    return native->GotLight(env, base::android::JavaParamRef<jobject>(env, jcaller), value);
}

static base::subtle::AtomicWord g_DeviceSensors_start = 0;
static jboolean Java_DeviceSensors_start(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativePtr,
    JniIntWrapper eventType,
    JniIntWrapper rateInMicroseconds)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeviceSensors_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeviceSensors_clazz(env),
        "start",
        "("
        "J"
        "I"
        "I"
        ")"
        "Z",
        &g_DeviceSensors_start);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, nativePtr, as_jint(eventType),
        as_jint(rateInMicroseconds));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_DeviceSensors_getNumberActiveDeviceMotionSensors
    = 0;
static jint Java_DeviceSensors_getNumberActiveDeviceMotionSensors(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeviceSensors_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeviceSensors_clazz(env),
        "getNumberActiveDeviceMotionSensors",
        "("
        ")"
        "I",
        &g_DeviceSensors_getNumberActiveDeviceMotionSensors);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DeviceSensors_getOrientationSensorTypeUsed = 0;
static jint Java_DeviceSensors_getOrientationSensorTypeUsed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeviceSensors_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeviceSensors_clazz(env),
        "getOrientationSensorTypeUsed",
        "("
        ")"
        "I",
        &g_DeviceSensors_getOrientationSensorTypeUsed);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_DeviceSensors_stop = 0;
static void Java_DeviceSensors_stop(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper eventType)
{
    CHECK_CLAZZ(env, obj.obj(),
        DeviceSensors_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, DeviceSensors_clazz(env),
        "stop",
        "("
        "I"
        ")"
        "V",
        &g_DeviceSensors_stop);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(eventType));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_DeviceSensors_getInstance = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_DeviceSensors_getInstance(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& appContext)
{
    CHECK_CLAZZ(env, DeviceSensors_clazz(env),
        DeviceSensors_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, DeviceSensors_clazz(env),
        "getInstance",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/content/browser/DeviceSensors;",
        &g_DeviceSensors_getInstance);

    jobject ret = env->CallStaticObjectMethod(DeviceSensors_clazz(env),
        method_id, appContext.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsDeviceSensors[] = {
    { "nativeGotOrientation",
        "("
        "J"
        "D"
        "D"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_DeviceSensors_nativeGotOrientation) },
    { "nativeGotOrientationAbsolute",
        "("
        "J"
        "D"
        "D"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_DeviceSensors_nativeGotOrientationAbsolute) },
    { "nativeGotAcceleration",
        "("
        "J"
        "D"
        "D"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_DeviceSensors_nativeGotAcceleration) },
    { "nativeGotAccelerationIncludingGravity",
        "("
        "J"
        "D"
        "D"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_DeviceSensors_nativeGotAccelerationIncludingGravity) },
    { "nativeGotRotationRate",
        "("
        "J"
        "D"
        "D"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_DeviceSensors_nativeGotRotationRate) },
    { "nativeGotLight",
        "("
        "J"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_DeviceSensors_nativeGotLight) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsDeviceSensorsSize = arraysize(kMethodsDeviceSensors);

    if (env->RegisterNatives(DeviceSensors_clazz(env),
            kMethodsDeviceSensors,
            kMethodsDeviceSensorsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, DeviceSensors_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_DeviceSensors_JNI
