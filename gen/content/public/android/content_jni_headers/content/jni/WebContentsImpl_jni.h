// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/webcontents/WebContentsImpl

#ifndef org_chromium_content_browser_webcontents_WebContentsImpl_JNI
#define org_chromium_content_browser_webcontents_WebContentsImpl_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebContentsImplClassPath[] = "org/chromium/content/browser/webcontents/WebContentsImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebContentsImpl_clazz __attribute__((unused)) = 0;
#define WebContentsImpl_clazz(env) base::android::LazyGetClass(env, kWebContentsImplClassPath, &g_WebContentsImpl_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static void DestroyWebContents(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong webContentsAndroidPtr);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDestroyWebContents(JNIEnv*
                                                                                           env,
    jclass jcaller,
    jlong webContentsAndroidPtr)
{
    return DestroyWebContents(env, base::android::JavaParamRef<jclass>(env, jcaller), webContentsAndroidPtr);
}

static base::android::ScopedJavaLocalRef<jobject> FromNativePtr(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    jlong webContentsAndroidPtr);

JNI_GENERATOR_EXPORT jobject
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeFromNativePtr(JNIEnv*
                                                                                      env,
    jclass jcaller,
    jlong webContentsAndroidPtr)
{
    return FromNativePtr(env, base::android::JavaParamRef<jclass>(env, jcaller),
        webContentsAndroidPtr)
        .Release();
}

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetTitle(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetTitle", NULL);
    return native->GetTitle(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetVisibleURL(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetVisibleURL", NULL);
    return native->GetVisibleURL(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsLoading(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsLoading", false);
    return native->IsLoading(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsLoadingToDifferentDocument(JNIEnv*
                                                                                                     env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsLoadingToDifferentDocument", false);
    return native->IsLoadingToDifferentDocument(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeStop(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Stop");
    return native->Stop(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCut(JNIEnv*
                                                                            env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Cut");
    return native->Cut(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCopy(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Copy");
    return native->Copy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePaste(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Paste");
    return native->Paste(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeReplace(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring word)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Replace");
    return native->Replace(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, word));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSelectAll(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SelectAll");
    return native->SelectAll(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeUnselect(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Unselect");
    return native->Unselect(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnHide(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnHide");
    return native->OnHide(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnShow(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnShow");
    return native->OnShow(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSuspendAllMediaPlayers(JNIEnv*
                                                                                               env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SuspendAllMediaPlayers");
    return native->SuspendAllMediaPlayers(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetAudioMuted(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jboolean mute)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetAudioMuted");
    return native->SetAudioMuted(env, base::android::JavaParamRef<jobject>(env, jcaller), mute);
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetBackgroundColor(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetBackgroundColor", 0);
    return native->GetBackgroundColor(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeShowInterstitialPage(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring url,
    jlong nativeInterstitialPageDelegateAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ShowInterstitialPage");
    return native->ShowInterstitialPage(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        nativeInterstitialPageDelegateAndroid);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsShowingInterstitialPage(JNIEnv*
                                                                                                  env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingInterstitialPage", false);
    return native->IsShowingInterstitialPage(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeFocusLocationBarByDefault(JNIEnv*
                                                                                                  env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "FocusLocationBarByDefault", false);
    return native->FocusLocationBarByDefault(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsRenderWidgetHostViewReady(JNIEnv*
                                                                                                    env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsRenderWidgetHostViewReady", false);
    return native->IsRenderWidgetHostViewReady(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeExitFullscreen(JNIEnv*
                                                                                       env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ExitFullscreen");
    return native->ExitFullscreen(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeUpdateBrowserControlsState(JNIEnv*
                                                                                                   env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jboolean enableHiding,
    jboolean enableShowing,
    jboolean animate)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateBrowserControlsState");
    return native->UpdateBrowserControlsState(env,
        base::android::JavaParamRef<jobject>(env, jcaller), enableHiding,
        enableShowing, animate);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeScrollFocusedEditableNodeIntoView(JNIEnv*
                                                                                                          env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ScrollFocusedEditableNodeIntoView");
    return native->ScrollFocusedEditableNodeIntoView(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSelectWordAroundCaret(JNIEnv*
                                                                                              env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SelectWordAroundCaret");
    return native->SelectWordAroundCaret(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeAdjustSelectionByCharacterOffset(JNIEnv*
                                                                                                         env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint startAdjust,
    jint endAdjust)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "AdjustSelectionByCharacterOffset");
    return native->AdjustSelectionByCharacterOffset(env,
        base::android::JavaParamRef<jobject>(env, jcaller), startAdjust,
        endAdjust);
}

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetURL(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetURL", NULL);
    return native->GetURL(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetLastCommittedURL(JNIEnv*
                                                                                            env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetLastCommittedURL", NULL);
    return native->GetLastCommittedURL(env,
                     base::android::JavaParamRef<jobject>(env, jcaller))
        .Release();
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsIncognito(JNIEnv*
                                                                                    env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsIncognito", false);
    return native->IsIncognito(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeResumeLoadingCreatedWebContents(JNIEnv*
                                                                                                        env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ResumeLoadingCreatedWebContents");
    return native->ResumeLoadingCreatedWebContents(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeEvaluateJavaScript(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring script,
    jobject callback)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScript");
    return native->EvaluateJavaScript(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, script),
        base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeEvaluateJavaScriptForTests(JNIEnv*
                                                                                                   env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring script,
    jobject callback)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScriptForTests");
    return native->EvaluateJavaScriptForTests(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, script),
        base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeAddMessageToDevToolsConsole(JNIEnv*
                                                                                                    env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jint level,
    jstring message)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "AddMessageToDevToolsConsole");
    return native->AddMessageToDevToolsConsole(env,
        base::android::JavaParamRef<jobject>(env, jcaller), level,
        base::android::JavaParamRef<jstring>(env, message));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePostMessageToFrame(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring frameName,
    jstring message,
    jstring sourceOrigin,
    jstring targetOrigin,
    jintArray sentPortIds)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "PostMessageToFrame");
    return native->PostMessageToFrame(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, frameName),
        base::android::JavaParamRef<jstring>(env, message),
        base::android::JavaParamRef<jstring>(env, sourceOrigin),
        base::android::JavaParamRef<jstring>(env, targetOrigin),
        base::android::JavaParamRef<jintArray>(env, sentPortIds));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCreateMessageChannel(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobjectArray ports)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "CreateMessageChannel");
    return native->CreateMessageChannel(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobjectArray>(env, ports));
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeHasAccessedInitialDocument(JNIEnv*
                                                                                                   env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "HasAccessedInitialDocument", false);
    return native->HasAccessedInitialDocument(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetThemeColor(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetThemeColor", 0);
    return native->GetThemeColor(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeRequestAccessibilitySnapshot(JNIEnv*
                                                                                                     env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject callback)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "RequestAccessibilitySnapshot");
    return native->RequestAccessibilitySnapshot(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetOverscrollRefreshHandler(JNIEnv*
                                                                                                    env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject nativeOverscrollRefreshHandler)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetOverscrollRefreshHandler");
    return native->SetOverscrollRefreshHandler(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env,
            nativeOverscrollRefreshHandler));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetContentBitmap(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jobject callback,
    jobject config,
    jfloat scale,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetContentBitmap");
    return native->GetContentBitmap(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, callback),
        base::android::JavaParamRef<jobject>(env, config), scale, x, y, width,
        height);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeReloadLoFiImages(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ReloadLoFiImages");
    return native->ReloadLoFiImages(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDownloadImage(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeWebContentsAndroid,
    jstring url,
    jboolean isFavicon,
    jint maxBitmapSize,
    jboolean bypassCache,
    jobject callback)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "DownloadImage", 0);
    return native->DownloadImage(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, url), isFavicon,
        maxBitmapSize, bypassCache, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDismissTextHandles(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeWebContentsAndroid)
{
    WebContentsAndroid* native = reinterpret_cast<WebContentsAndroid*>(nativeWebContentsAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "DismissTextHandles");
    return native->DismissTextHandles(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_WebContentsImpl_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebContentsImpl_create(JNIEnv* env, jlong nativeWebContentsAndroid,
    const base::android::JavaRefOrBare<jobject>& navigationController)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "create",
        "("
        "J"
        "Lorg/chromium/content_public/browser/NavigationController;"
        ")"
        "Lorg/chromium/content/browser/webcontents/WebContentsImpl;",
        &g_WebContentsImpl_create);

    jobject ret = env->CallStaticObjectMethod(WebContentsImpl_clazz(env),
        method_id, nativeWebContentsAndroid, navigationController.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebContentsImpl_clearNativePtr = 0;
static void Java_WebContentsImpl_clearNativePtr(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsImpl_clazz(env),
        "clearNativePtr",
        "("
        ")"
        "V",
        &g_WebContentsImpl_clearNativePtr);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_getNativePointer = 0;
static jlong Java_WebContentsImpl_getNativePointer(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsImpl_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsImpl_clazz(env),
        "getNativePointer",
        "("
        ")"
        "J",
        &g_WebContentsImpl_getNativePointer);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebContentsImpl_onEvaluateJavaScriptResult = 0;
static void Java_WebContentsImpl_onEvaluateJavaScriptResult(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& jsonResult,
    const base::android::JavaRefOrBare<jobject>& callback)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "onEvaluateJavaScriptResult",
        "("
        "Ljava/lang/String;"
        "Lorg/chromium/content_public/browser/JavaScriptCallback;"
        ")"
        "V",
        &g_WebContentsImpl_onEvaluateJavaScriptResult);

    env->CallStaticVoidMethod(WebContentsImpl_clazz(env),
        method_id, jsonResult.obj(), callback.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_onAccessibilitySnapshot = 0;
static void Java_WebContentsImpl_onAccessibilitySnapshot(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& root,
    const base::android::JavaRefOrBare<jobject>& callback)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "onAccessibilitySnapshot",
        "("
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;"
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotCallback;"
        ")"
        "V",
        &g_WebContentsImpl_onAccessibilitySnapshot);

    env->CallStaticVoidMethod(WebContentsImpl_clazz(env),
        method_id, root.obj(), callback.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_addAccessibilityNodeAsChild = 0;
static void Java_WebContentsImpl_addAccessibilityNodeAsChild(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& parent,
    const base::android::JavaRefOrBare<jobject>& child)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "addAccessibilityNodeAsChild",
        "("
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;"
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;"
        ")"
        "V",
        &g_WebContentsImpl_addAccessibilityNodeAsChild);

    env->CallStaticVoidMethod(WebContentsImpl_clazz(env),
        method_id, parent.obj(), child.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsImpl_createAccessibilitySnapshotNode
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebContentsImpl_createAccessibilitySnapshotNode(JNIEnv* env,
    JniIntWrapper parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height,
    jboolean isRootNode,
    const base::android::JavaRefOrBare<jstring>& text,
    JniIntWrapper color,
    JniIntWrapper bgcolor,
    jfloat size,
    JniIntWrapper textStyle,
    const base::android::JavaRefOrBare<jstring>& className)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "createAccessibilitySnapshotNode",
        "("
        "I"
        "I"
        "I"
        "I"
        "Z"
        "Ljava/lang/String;"
        "I"
        "I"
        "F"
        "I"
        "Ljava/lang/String;"
        ")"
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;",
        &g_WebContentsImpl_createAccessibilitySnapshotNode);

    jobject ret = env->CallStaticObjectMethod(WebContentsImpl_clazz(env),
        method_id, as_jint(parentRelativeLeft), as_jint(parentRelativeTop),
        as_jint(width), as_jint(height), isRootNode, text.obj(),
        as_jint(color), as_jint(bgcolor), size, as_jint(textStyle),
        className.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_WebContentsImpl_setAccessibilitySnapshotSelection
    = 0;
static void Java_WebContentsImpl_setAccessibilitySnapshotSelection(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper start,
    JniIntWrapper end)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "setAccessibilitySnapshotSelection",
        "("
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotNode;"
        "I"
        "I"
        ")"
        "V",
        &g_WebContentsImpl_setAccessibilitySnapshotSelection);

    env->CallStaticVoidMethod(WebContentsImpl_clazz(env),
        method_id, node.obj(), as_jint(start), as_jint(end));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_onGetContentBitmapFinished = 0;
static void Java_WebContentsImpl_onGetContentBitmapFinished(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& callback,
    const base::android::JavaRefOrBare<jobject>& bitmap,
    JniIntWrapper response)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsImpl_clazz(env),
        "onGetContentBitmapFinished",
        "("
        "Lorg/chromium/content_public/browser/ContentBitmapCallback;"
        "Landroid/graphics/Bitmap;"
        "I"
        ")"
        "V",
        &g_WebContentsImpl_onGetContentBitmapFinished);

    env->CallVoidMethod(obj.obj(),
        method_id, callback.obj(), bitmap.obj(), as_jint(response));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_onDownloadImageFinished = 0;
static void Java_WebContentsImpl_onDownloadImageFinished(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& callback,
    JniIntWrapper id,
    JniIntWrapper httpStatusCode,
    const base::android::JavaRefOrBare<jstring>& imageUrl,
    const base::android::JavaRefOrBare<jobject>& bitmaps,
    const base::android::JavaRefOrBare<jobject>& sizes)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsImpl_clazz(env),
        "onDownloadImageFinished",
        "("
        "Lorg/chromium/content_public/browser/ImageDownloadCallback;"
        "I"
        "I"
        "Ljava/lang/String;"
        "Ljava/util/List;"
        "Ljava/util/List;"
        ")"
        "V",
        &g_WebContentsImpl_onDownloadImageFinished);

    env->CallVoidMethod(obj.obj(),
        method_id, callback.obj(), as_jint(id), as_jint(httpStatusCode),
        imageUrl.obj(), bitmaps.obj(), sizes.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_setMediaSession = 0;
static void Java_WebContentsImpl_setMediaSession(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& mediaSession)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsImpl_clazz(env),
        "setMediaSession",
        "("
        "Lorg/chromium/content/browser/MediaSessionImpl;"
        ")"
        "V",
        &g_WebContentsImpl_setMediaSession);

    env->CallVoidMethod(obj.obj(),
        method_id, mediaSession.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_createBitmapList = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebContentsImpl_createBitmapList(JNIEnv* env)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "createBitmapList",
        "("
        ")"
        "Ljava/util/List;",
        &g_WebContentsImpl_createBitmapList);

    jobject ret = env->CallStaticObjectMethod(WebContentsImpl_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebContentsImpl_addToBitmapList = 0;
static void Java_WebContentsImpl_addToBitmapList(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& bitmaps,
    const base::android::JavaRefOrBare<jobject>& bitmap)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "addToBitmapList",
        "("
        "Ljava/util/List;"
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        &g_WebContentsImpl_addToBitmapList);

    env->CallStaticVoidMethod(WebContentsImpl_clazz(env),
        method_id, bitmaps.obj(), bitmap.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsImpl_createSizeList = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebContentsImpl_createSizeList(JNIEnv* env)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "createSizeList",
        "("
        ")"
        "Ljava/util/List;",
        &g_WebContentsImpl_createSizeList);

    jobject ret = env->CallStaticObjectMethod(WebContentsImpl_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebContentsImpl_createSizeAndAddToList = 0;
static void Java_WebContentsImpl_createSizeAndAddToList(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& sizes,
    JniIntWrapper width,
    JniIntWrapper height)
{
    CHECK_CLAZZ(env, WebContentsImpl_clazz(env),
        WebContentsImpl_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebContentsImpl_clazz(env),
        "createSizeAndAddToList",
        "("
        "Ljava/util/List;"
        "I"
        "I"
        ")"
        "V",
        &g_WebContentsImpl_createSizeAndAddToList);

    env->CallStaticVoidMethod(WebContentsImpl_clazz(env),
        method_id, sizes.obj(), as_jint(width), as_jint(height));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWebContentsImpl[] = {
    { "nativeDestroyWebContents",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDestroyWebContents) },
    { "nativeFromNativePtr",
        "("
        "J"
        ")"
        "Lorg/chromium/content_public/browser/WebContents;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeFromNativePtr) },
    { "nativeGetTitle",
        "("
        "J"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetTitle) },
    { "nativeGetVisibleURL",
        "("
        "J"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetVisibleURL) },
    { "nativeIsLoading",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsLoading) },
    { "nativeIsLoadingToDifferentDocument",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsLoadingToDifferentDocument) },
    { "nativeStop",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeStop) },
    { "nativeCut",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCut) },
    { "nativeCopy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCopy) },
    { "nativePaste",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePaste) },
    { "nativeReplace",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeReplace) },
    { "nativeSelectAll",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSelectAll) },
    { "nativeUnselect",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeUnselect) },
    { "nativeOnHide",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnHide) },
    { "nativeOnShow",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeOnShow) },
    { "nativeSuspendAllMediaPlayers",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSuspendAllMediaPlayers) },
    { "nativeSetAudioMuted",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetAudioMuted) },
    { "nativeGetBackgroundColor",
        "("
        "J"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetBackgroundColor) },
    { "nativeShowInterstitialPage",
        "("
        "J"
        "Ljava/lang/String;"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeShowInterstitialPage) },
    { "nativeIsShowingInterstitialPage",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsShowingInterstitialPage) },
    { "nativeFocusLocationBarByDefault",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeFocusLocationBarByDefault) },
    { "nativeIsRenderWidgetHostViewReady",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsRenderWidgetHostViewReady) },
    { "nativeExitFullscreen",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeExitFullscreen) },
    { "nativeUpdateBrowserControlsState",
        "("
        "J"
        "Z"
        "Z"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeUpdateBrowserControlsState) },
    { "nativeScrollFocusedEditableNodeIntoView",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeScrollFocusedEditableNodeIntoView) },
    { "nativeSelectWordAroundCaret",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSelectWordAroundCaret) },
    { "nativeAdjustSelectionByCharacterOffset",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeAdjustSelectionByCharacterOffset) },
    { "nativeGetURL",
        "("
        "J"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetURL) },
    { "nativeGetLastCommittedURL",
        "("
        "J"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetLastCommittedURL) },
    { "nativeIsIncognito",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeIsIncognito) },
    { "nativeResumeLoadingCreatedWebContents",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeResumeLoadingCreatedWebContents) },
    { "nativeEvaluateJavaScript",
        "("
        "J"
        "Ljava/lang/String;"
        "Lorg/chromium/content_public/browser/JavaScriptCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeEvaluateJavaScript) },
    { "nativeEvaluateJavaScriptForTests",
        "("
        "J"
        "Ljava/lang/String;"
        "Lorg/chromium/content_public/browser/JavaScriptCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeEvaluateJavaScriptForTests) },
    { "nativeAddMessageToDevToolsConsole",
        "("
        "J"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeAddMessageToDevToolsConsole) },
    { "nativePostMessageToFrame",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "[I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativePostMessageToFrame) },
    { "nativeCreateMessageChannel",
        "("
        "J"
        "[Lorg/chromium/content/browser/AppWebMessagePort;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeCreateMessageChannel) },
    { "nativeHasAccessedInitialDocument",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeHasAccessedInitialDocument) },
    { "nativeGetThemeColor",
        "("
        "J"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetThemeColor) },
    { "nativeRequestAccessibilitySnapshot",
        "("
        "J"
        "Lorg/chromium/content_public/browser/AccessibilitySnapshotCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeRequestAccessibilitySnapshot) },
    { "nativeSetOverscrollRefreshHandler",
        "("
        "J"
        "Lorg/chromium/ui/OverscrollRefreshHandler;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeSetOverscrollRefreshHandler) },
    { "nativeGetContentBitmap",
        "("
        "J"
        "Lorg/chromium/content_public/browser/ContentBitmapCallback;"
        "Landroid/graphics/Bitmap$Config;"
        "F"
        "F"
        "F"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeGetContentBitmap) },
    { "nativeReloadLoFiImages",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeReloadLoFiImages) },
    { "nativeDownloadImage",
        "("
        "J"
        "Ljava/lang/String;"
        "Z"
        "I"
        "Z"
        "Lorg/chromium/content_public/browser/ImageDownloadCallback;"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDownloadImage) },
    { "nativeDismissTextHandles",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_webcontents_WebContentsImpl_nativeDismissTextHandles) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsWebContentsImplSize = arraysize(kMethodsWebContentsImpl);

    if (env->RegisterNatives(WebContentsImpl_clazz(env),
            kMethodsWebContentsImpl,
            kMethodsWebContentsImplSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, WebContentsImpl_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_webcontents_WebContentsImpl_JNI
