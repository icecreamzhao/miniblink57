// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/input/HandleViewResources

#ifndef org_chromium_content_browser_input_HandleViewResources_JNI
#define org_chromium_content_browser_input_HandleViewResources_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kHandleViewResourcesClassPath[] = "org/chromium/content/browser/input/HandleViewResources";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_HandleViewResources_clazz __attribute__((unused)) = 0;
#define HandleViewResources_clazz(env) base::android::LazyGetClass(env, kHandleViewResourcesClassPath, &g_HandleViewResources_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_HandleViewResources_getHandleHorizontalPaddingRatio
    = 0;
static jfloat Java_HandleViewResources_getHandleHorizontalPaddingRatio(JNIEnv*
        env)
{
    CHECK_CLAZZ(env, HandleViewResources_clazz(env),
        HandleViewResources_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, HandleViewResources_clazz(env),
        "getHandleHorizontalPaddingRatio",
        "("
        ")"
        "F",
        &g_HandleViewResources_getHandleHorizontalPaddingRatio);

    jfloat ret = env->CallStaticFloatMethod(HandleViewResources_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_HandleViewResources_getLeftHandleBitmap = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_HandleViewResources_getLeftHandleBitmap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, HandleViewResources_clazz(env),
        HandleViewResources_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, HandleViewResources_clazz(env),
        "getLeftHandleBitmap",
        "("
        "Landroid/content/Context;"
        ")"
        "Landroid/graphics/Bitmap;",
        &g_HandleViewResources_getLeftHandleBitmap);

    jobject ret = env->CallStaticObjectMethod(HandleViewResources_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_HandleViewResources_getCenterHandleBitmap = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_HandleViewResources_getCenterHandleBitmap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, HandleViewResources_clazz(env),
        HandleViewResources_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, HandleViewResources_clazz(env),
        "getCenterHandleBitmap",
        "("
        "Landroid/content/Context;"
        ")"
        "Landroid/graphics/Bitmap;",
        &g_HandleViewResources_getCenterHandleBitmap);

    jobject ret = env->CallStaticObjectMethod(HandleViewResources_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_HandleViewResources_getRightHandleBitmap = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_HandleViewResources_getRightHandleBitmap(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, HandleViewResources_clazz(env),
        HandleViewResources_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, HandleViewResources_clazz(env),
        "getRightHandleBitmap",
        "("
        "Landroid/content/Context;"
        ")"
        "Landroid/graphics/Bitmap;",
        &g_HandleViewResources_getRightHandleBitmap);

    jobject ret = env->CallStaticObjectMethod(HandleViewResources_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace content

#endif // org_chromium_content_browser_input_HandleViewResources_JNI
