// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content_public/browser/LoadUrlParams

#ifndef org_chromium_content_public_browser_LoadUrlParams_JNI
#define org_chromium_content_public_browser_LoadUrlParams_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLoadUrlParamsClassPath[] = "org/chromium/content_public/browser/LoadUrlParams";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LoadUrlParams_clazz __attribute__((unused)) = 0;
#define LoadUrlParams_clazz(env) base::android::LazyGetClass(env, kLoadUrlParamsClassPath, &g_LoadUrlParams_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static jboolean IsDataScheme(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_1public_browser_LoadUrlParams_nativeIsDataScheme(JNIEnv*
                                                                               env,
    jclass jcaller,
    jstring url)
{
    return IsDataScheme(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsLoadUrlParams[] = {
    { "nativeIsDataScheme",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_1public_browser_LoadUrlParams_nativeIsDataScheme) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsLoadUrlParamsSize = arraysize(kMethodsLoadUrlParams);

    if (env->RegisterNatives(LoadUrlParams_clazz(env),
            kMethodsLoadUrlParams,
            kMethodsLoadUrlParamsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, LoadUrlParams_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_public_browser_LoadUrlParams_JNI
