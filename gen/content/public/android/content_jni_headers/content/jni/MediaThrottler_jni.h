// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MediaThrottler

#ifndef org_chromium_content_browser_MediaThrottler_JNI
#define org_chromium_content_browser_MediaThrottler_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaThrottlerClassPath[] = "org/chromium/content/browser/MediaThrottler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaThrottler_clazz __attribute__((unused)) = 0;
#define MediaThrottler_clazz(env) base::android::LazyGetClass(env, kMediaThrottlerClassPath, &g_MediaThrottler_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static base::subtle::AtomicWord g_MediaThrottler_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_MediaThrottler_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, MediaThrottler_clazz(env),
        MediaThrottler_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, MediaThrottler_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/content/browser/MediaThrottler;",
        &g_MediaThrottler_create);

    jobject ret = env->CallStaticObjectMethod(MediaThrottler_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaThrottler_requestDecoderResources = 0;
static jboolean Java_MediaThrottler_requestDecoderResources(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaThrottler_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaThrottler_clazz(env),
        "requestDecoderResources",
        "("
        ")"
        "Z",
        &g_MediaThrottler_requestDecoderResources);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_MediaThrottler_onDecodeRequestFinished = 0;
static void Java_MediaThrottler_onDecodeRequestFinished(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaThrottler_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaThrottler_clazz(env),
        "onDecodeRequestFinished",
        "("
        ")"
        "V",
        &g_MediaThrottler_onDecodeRequestFinished);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_MediaThrottler_reset = 0;
static void Java_MediaThrottler_reset(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        MediaThrottler_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, MediaThrottler_clazz(env),
        "reset",
        "("
        ")"
        "V",
        &g_MediaThrottler_reset);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace content

#endif // org_chromium_content_browser_MediaThrottler_JNI
