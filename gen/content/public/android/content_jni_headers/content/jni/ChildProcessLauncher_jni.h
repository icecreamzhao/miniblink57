// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ChildProcessLauncher

#ifndef org_chromium_content_browser_ChildProcessLauncher_JNI
#define org_chromium_content_browser_ChildProcessLauncher_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChildProcessLauncherClassPath[] = "org/chromium/content/browser/ChildProcessLauncher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChildProcessLauncher_clazz __attribute__((unused)) = 0;
#define ChildProcessLauncher_clazz(env) base::android::LazyGetClass(env, kChildProcessLauncherClassPath, &g_ChildProcessLauncher_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static void OnChildProcessStarted(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong clientContext,
    jint pid);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ChildProcessLauncher_nativeOnChildProcessStarted(JNIEnv*
                                                                                       env,
    jclass jcaller,
    jlong clientContext,
    jint pid)
{
    return OnChildProcessStarted(env, base::android::JavaParamRef<jclass>(env, jcaller), clientContext, pid);
}

static void EstablishSurfacePeer(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint pid,
    const base::android::JavaParamRef<jobject>& surface,
    jint primaryID,
    jint secondaryID);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ChildProcessLauncher_nativeEstablishSurfacePeer(JNIEnv*
                                                                                      env,
    jclass jcaller,
    jint pid,
    jobject surface,
    jint primaryID,
    jint secondaryID)
{
    return EstablishSurfacePeer(env, base::android::JavaParamRef<jclass>(env, jcaller), pid, base::android::JavaParamRef<jobject>(env, surface),
        primaryID, secondaryID);
}

static void CompleteScopedSurfaceRequest(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& requestToken,
    const base::android::JavaParamRef<jobject>& surface);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ChildProcessLauncher_nativeCompleteScopedSurfaceRequest(JNIEnv*
                                                                                              env,
    jclass jcaller,
    jobject requestToken,
    jobject surface)
{
    return CompleteScopedSurfaceRequest(env,
        base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, requestToken),
        base::android::JavaParamRef<jobject>(env, surface));
}

static jboolean IsSingleProcess(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_ChildProcessLauncher_nativeIsSingleProcess(JNIEnv*
                                                                                 env,
    jclass jcaller)
{
    return IsSingleProcess(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jobject> GetViewSurface(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    jint surfaceId);

JNI_GENERATOR_EXPORT jobject
Java_org_chromium_content_browser_ChildProcessLauncher_nativeGetViewSurface(JNIEnv*
                                                                                env,
    jclass jcaller,
    jint surfaceId)
{
    return GetViewSurface(env, base::android::JavaParamRef<jclass>(env, jcaller),
        surfaceId)
        .Release();
}

static base::subtle::AtomicWord g_ChildProcessLauncher_isOomProtected = 0;
static jboolean Java_ChildProcessLauncher_isOomProtected(JNIEnv* env,
    JniIntWrapper pid)
{
    CHECK_CLAZZ(env, ChildProcessLauncher_clazz(env),
        ChildProcessLauncher_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChildProcessLauncher_clazz(env),
        "isOomProtected",
        "("
        "I"
        ")"
        "Z",
        &g_ChildProcessLauncher_isOomProtected);

    jboolean ret = env->CallStaticBooleanMethod(ChildProcessLauncher_clazz(env),
        method_id, as_jint(pid));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChildProcessLauncher_setInForeground = 0;
static void Java_ChildProcessLauncher_setInForeground(JNIEnv* env, JniIntWrapper pid,
    jboolean inForeground)
{
    CHECK_CLAZZ(env, ChildProcessLauncher_clazz(env),
        ChildProcessLauncher_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChildProcessLauncher_clazz(env),
        "setInForeground",
        "("
        "I"
        "Z"
        ")"
        "V",
        &g_ChildProcessLauncher_setInForeground);

    env->CallStaticVoidMethod(ChildProcessLauncher_clazz(env),
        method_id, as_jint(pid), inForeground);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ChildProcessLauncher_makeFdInfo = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ChildProcessLauncher_makeFdInfo(JNIEnv* env, JniIntWrapper id,
    JniIntWrapper fd,
    jboolean autoClose,
    jlong offset,
    jlong size)
{
    CHECK_CLAZZ(env, ChildProcessLauncher_clazz(env),
        ChildProcessLauncher_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChildProcessLauncher_clazz(env),
        "makeFdInfo",
        "("
        "I"
        "I"
        "Z"
        "J"
        "J"
        ")"
        "Lorg/chromium/content/common/FileDescriptorInfo;",
        &g_ChildProcessLauncher_makeFdInfo);

    jobject ret = env->CallStaticObjectMethod(ChildProcessLauncher_clazz(env),
        method_id, as_jint(id), as_jint(fd), autoClose, offset, size);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChildProcessLauncher_start = 0;
static void Java_ChildProcessLauncher_start(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context,
    const base::android::JavaRefOrBare<jobjectArray>& commandLine,
    JniIntWrapper childProcessId,
    const base::android::JavaRefOrBare<jobjectArray>& filesToBeMapped,
    jlong clientContext)
{
    CHECK_CLAZZ(env, ChildProcessLauncher_clazz(env),
        ChildProcessLauncher_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChildProcessLauncher_clazz(env),
        "start",
        "("
        "Landroid/content/Context;"
        "[Ljava/lang/String;"
        "I"
        "[Lorg/chromium/content/common/FileDescriptorInfo;"
        "J"
        ")"
        "V",
        &g_ChildProcessLauncher_start);

    env->CallStaticVoidMethod(ChildProcessLauncher_clazz(env),
        method_id, context.obj(), commandLine.obj(), as_jint(childProcessId),
        filesToBeMapped.obj(), clientContext);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ChildProcessLauncher_stop = 0;
static void Java_ChildProcessLauncher_stop(JNIEnv* env, JniIntWrapper pid)
{
    CHECK_CLAZZ(env, ChildProcessLauncher_clazz(env),
        ChildProcessLauncher_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChildProcessLauncher_clazz(env),
        "stop",
        "("
        "I"
        ")"
        "V",
        &g_ChildProcessLauncher_stop);

    env->CallStaticVoidMethod(ChildProcessLauncher_clazz(env),
        method_id, as_jint(pid));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChildProcessLauncher[] = {
    { "nativeOnChildProcessStarted",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ChildProcessLauncher_nativeOnChildProcessStarted) },
    { "nativeEstablishSurfacePeer",
        "("
        "I"
        "Landroid/view/Surface;"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ChildProcessLauncher_nativeEstablishSurfacePeer) },
    { "nativeCompleteScopedSurfaceRequest",
        "("
        "Lorg/chromium/base/UnguessableToken;"
        "Landroid/view/Surface;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ChildProcessLauncher_nativeCompleteScopedSurfaceRequest) },
    { "nativeIsSingleProcess",
        "("
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ChildProcessLauncher_nativeIsSingleProcess) },
    { "nativeGetViewSurface",
        "("
        "I"
        ")"
        "Landroid/view/Surface;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ChildProcessLauncher_nativeGetViewSurface) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsChildProcessLauncherSize = arraysize(kMethodsChildProcessLauncher);

    if (env->RegisterNatives(ChildProcessLauncher_clazz(env),
            kMethodsChildProcessLauncher,
            kMethodsChildProcessLauncherSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ChildProcessLauncher_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_ChildProcessLauncher_JNI
