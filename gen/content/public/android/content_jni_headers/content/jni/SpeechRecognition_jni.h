// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/SpeechRecognition

#ifndef org_chromium_content_browser_SpeechRecognition_JNI
#define org_chromium_content_browser_SpeechRecognition_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSpeechRecognitionClassPath[] = "org/chromium/content/browser/SpeechRecognition";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SpeechRecognition_clazz __attribute__((unused)) = 0;
#define SpeechRecognition_clazz(env) base::android::LazyGetClass(env, kSpeechRecognitionClassPath, &g_SpeechRecognition_clazz)

} // namespace

namespace content {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnAudioStart(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnAudioStart");
    return native->OnAudioStart(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnSoundStart(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnSoundStart");
    return native->OnSoundStart(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnSoundEnd(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnSoundEnd");
    return native->OnSoundEnd(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnAudioEnd(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnAudioEnd");
    return native->OnAudioEnd(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnRecognitionResults(JNIEnv*
                                                                                   env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jobjectArray results,
    jfloatArray scores,
    jboolean provisional)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnRecognitionResults");
    return native->OnRecognitionResults(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobjectArray>(env, results),
        base::android::JavaParamRef<jfloatArray>(env, scores), provisional);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnRecognitionError(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid,
    jint error)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnRecognitionError");
    return native->OnRecognitionError(env,
        base::android::JavaParamRef<jobject>(env, jcaller), error);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_SpeechRecognition_nativeOnRecognitionEnd(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeSpeechRecognizerImplAndroid)
{
    SpeechRecognizerImplAndroid* native = reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnRecognitionEnd");
    return native->OnRecognitionEnd(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_SpeechRecognition_createSpeechRecognition = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_SpeechRecognition_createSpeechRecognition(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context,
    jlong nativeSpeechRecognizerImplAndroid)
{
    CHECK_CLAZZ(env, SpeechRecognition_clazz(env),
        SpeechRecognition_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SpeechRecognition_clazz(env),
        "createSpeechRecognition",
        "("
        "Landroid/content/Context;"
        "J"
        ")"
        "Lorg/chromium/content/browser/SpeechRecognition;",
        &g_SpeechRecognition_createSpeechRecognition);

    jobject ret = env->CallStaticObjectMethod(SpeechRecognition_clazz(env),
        method_id, context.obj(), nativeSpeechRecognizerImplAndroid);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SpeechRecognition_startRecognition = 0;
static void Java_SpeechRecognition_startRecognition(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& language,
    jboolean continuous,
    jboolean interimResults)
{
    CHECK_CLAZZ(env, obj.obj(),
        SpeechRecognition_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SpeechRecognition_clazz(env),
        "startRecognition",
        "("
        "Ljava/lang/String;"
        "Z"
        "Z"
        ")"
        "V",
        &g_SpeechRecognition_startRecognition);

    env->CallVoidMethod(obj.obj(),
        method_id, language.obj(), continuous, interimResults);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_SpeechRecognition_abortRecognition = 0;
static void Java_SpeechRecognition_abortRecognition(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        SpeechRecognition_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SpeechRecognition_clazz(env),
        "abortRecognition",
        "("
        ")"
        "V",
        &g_SpeechRecognition_abortRecognition);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_SpeechRecognition_stopRecognition = 0;
static void Java_SpeechRecognition_stopRecognition(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        SpeechRecognition_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SpeechRecognition_clazz(env),
        "stopRecognition",
        "("
        ")"
        "V",
        &g_SpeechRecognition_stopRecognition);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSpeechRecognition[] = {
    { "nativeOnAudioStart",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnAudioStart) },
    { "nativeOnSoundStart",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnSoundStart) },
    { "nativeOnSoundEnd",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnSoundEnd) },
    { "nativeOnAudioEnd",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnAudioEnd) },
    { "nativeOnRecognitionResults",
        "("
        "J"
        "[Ljava/lang/String;"
        "[F"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnRecognitionResults) },
    { "nativeOnRecognitionError",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnRecognitionError) },
    { "nativeOnRecognitionEnd",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_SpeechRecognition_nativeOnRecognitionEnd) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsSpeechRecognitionSize = arraysize(kMethodsSpeechRecognition);

    if (env->RegisterNatives(SpeechRecognition_clazz(env),
            kMethodsSpeechRecognition,
            kMethodsSpeechRecognitionSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, SpeechRecognition_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_SpeechRecognition_JNI
