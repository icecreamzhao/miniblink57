// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/AudioFocusDelegate

#ifndef org_chromium_content_browser_AudioFocusDelegate_JNI
#define org_chromium_content_browser_AudioFocusDelegate_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAudioFocusDelegateClassPath[] = "org/chromium/content/browser/AudioFocusDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AudioFocusDelegate_clazz __attribute__((unused)) = 0;
#define AudioFocusDelegate_clazz(env) base::android::LazyGetClass(env, kAudioFocusDelegateClassPath, &g_AudioFocusDelegate_clazz)

} // namespace

namespace content {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnSuspend(JNIEnv*
                                                                         env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid)
{
    AudioFocusDelegateAndroid* native = reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnSuspend");
    return native->OnSuspend(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnResume(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid)
{
    AudioFocusDelegateAndroid* native = reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnResume");
    return native->OnResume(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnStartDucking(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid)
{
    AudioFocusDelegateAndroid* native = reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnStartDucking");
    return native->OnStartDucking(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnStopDucking(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid)
{
    AudioFocusDelegateAndroid* native = reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnStopDucking");
    return native->OnStopDucking(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_AudioFocusDelegate_nativeRecordSessionDuck(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeAudioFocusDelegateAndroid)
{
    AudioFocusDelegateAndroid* native = reinterpret_cast<AudioFocusDelegateAndroid*>(nativeAudioFocusDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "RecordSessionDuck");
    return native->RecordSessionDuck(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_AudioFocusDelegate_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AudioFocusDelegate_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context,
    jlong nativeAudioFocusDelegateAndroid)
{
    CHECK_CLAZZ(env, AudioFocusDelegate_clazz(env),
        AudioFocusDelegate_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AudioFocusDelegate_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        "J"
        ")"
        "Lorg/chromium/content/browser/AudioFocusDelegate;",
        &g_AudioFocusDelegate_create);

    jobject ret = env->CallStaticObjectMethod(AudioFocusDelegate_clazz(env),
        method_id, context.obj(), nativeAudioFocusDelegateAndroid);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AudioFocusDelegate_tearDown = 0;
static void Java_AudioFocusDelegate_tearDown(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioFocusDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioFocusDelegate_clazz(env),
        "tearDown",
        "("
        ")"
        "V",
        &g_AudioFocusDelegate_tearDown);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AudioFocusDelegate_requestAudioFocus = 0;
static jboolean Java_AudioFocusDelegate_requestAudioFocus(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean transientFocus)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioFocusDelegate_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioFocusDelegate_clazz(env),
        "requestAudioFocus",
        "("
        "Z"
        ")"
        "Z",
        &g_AudioFocusDelegate_requestAudioFocus);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, transientFocus);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AudioFocusDelegate_abandonAudioFocus = 0;
static void Java_AudioFocusDelegate_abandonAudioFocus(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AudioFocusDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AudioFocusDelegate_clazz(env),
        "abandonAudioFocus",
        "("
        ")"
        "V",
        &g_AudioFocusDelegate_abandonAudioFocus);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAudioFocusDelegate[] = {
    { "nativeOnSuspend",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnSuspend) },
    { "nativeOnResume",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnResume) },
    { "nativeOnStartDucking",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnStartDucking) },
    { "nativeOnStopDucking",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_AudioFocusDelegate_nativeOnStopDucking) },
    { "nativeRecordSessionDuck",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_AudioFocusDelegate_nativeRecordSessionDuck) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAudioFocusDelegateSize = arraysize(kMethodsAudioFocusDelegate);

    if (env->RegisterNatives(AudioFocusDelegate_clazz(env),
            kMethodsAudioFocusDelegate,
            kMethodsAudioFocusDelegateSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AudioFocusDelegate_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_AudioFocusDelegate_JNI
