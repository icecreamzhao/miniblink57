// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/input/JoystickScrollProvider

#ifndef org_chromium_content_browser_input_JoystickScrollProvider_JNI
#define org_chromium_content_browser_input_JoystickScrollProvider_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kJoystickScrollProviderClassPath[] = "org/chromium/content/browser/input/JoystickScrollProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_JoystickScrollProvider_clazz __attribute__((unused))
= 0;
#define JoystickScrollProvider_clazz(env) base::android::LazyGetClass(env, kJoystickScrollProviderClassPath, &g_JoystickScrollProvider_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_content_browser_input_JoystickScrollProvider_nativeInit(JNIEnv*
                                                                              env,
    jobject jcaller,
    jobject webContents)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_input_JoystickScrollProvider_nativeScrollBy(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeJoystickScrollProvider,
    jlong timeMs,
    jfloat dxDip,
    jfloat dyDip)
{
    JoystickScrollProvider* native = reinterpret_cast<JoystickScrollProvider*>(nativeJoystickScrollProvider);
    CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBy");
    return native->ScrollBy(env, base::android::JavaParamRef<jobject>(env, jcaller), timeMs, dxDip, dyDip);
}

static base::subtle::AtomicWord g_JoystickScrollProvider_onNativeObjectDestroyed
    = 0;
static void Java_JoystickScrollProvider_onNativeObjectDestroyed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong nativePointer)
{
    CHECK_CLAZZ(env, obj.obj(),
        JoystickScrollProvider_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, JoystickScrollProvider_clazz(env),
        "onNativeObjectDestroyed",
        "("
        "J"
        ")"
        "V",
        &g_JoystickScrollProvider_onNativeObjectDestroyed);

    env->CallVoidMethod(obj.obj(),
        method_id, nativePointer);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsJoystickScrollProvider[] = {
    { "nativeInit",
        "("
        "Lorg/chromium/content_public/browser/WebContents;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_input_JoystickScrollProvider_nativeInit) },
    { "nativeScrollBy",
        "("
        "J"
        "J"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_input_JoystickScrollProvider_nativeScrollBy) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsJoystickScrollProviderSize = arraysize(kMethodsJoystickScrollProvider);

    if (env->RegisterNatives(JoystickScrollProvider_clazz(env),
            kMethodsJoystickScrollProvider,
            kMethodsJoystickScrollProviderSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, JoystickScrollProvider_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_input_JoystickScrollProvider_JNI
