// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content_public/common/ResourceRequestBody

#ifndef org_chromium_content_public_common_ResourceRequestBody_JNI
#define org_chromium_content_public_common_ResourceRequestBody_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kResourceRequestBodyClassPath[] = "org/chromium/content_public/common/ResourceRequestBody";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ResourceRequestBody_clazz __attribute__((unused)) = 0;
#define ResourceRequestBody_clazz(env) base::android::LazyGetClass(env, kResourceRequestBodyClassPath, &g_ResourceRequestBody_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jbyteArray>
CreateResourceRequestBodyFromBytes(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jbyteArray>& httpBody);

JNI_GENERATOR_EXPORT jbyteArray
Java_org_chromium_content_1public_common_ResourceRequestBody_nativeCreateResourceRequestBodyFromBytes(JNIEnv*
                                                                                                          env,
    jclass jcaller,
    jbyteArray httpBody)
{
    return CreateResourceRequestBodyFromBytes(env,
        base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jbyteArray>(env, httpBody))
        .Release();
}

static base::subtle::AtomicWord
    g_ResourceRequestBody_createFromEncodedNativeForm
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ResourceRequestBody_createFromEncodedNativeForm(JNIEnv* env, const base::android::JavaRefOrBare<jbyteArray>& encodedNativeForm)
{
    CHECK_CLAZZ(env, ResourceRequestBody_clazz(env),
        ResourceRequestBody_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ResourceRequestBody_clazz(env),
        "createFromEncodedNativeForm",
        "("
        "[B"
        ")"
        "Lorg/chromium/content_public/common/ResourceRequestBody;",
        &g_ResourceRequestBody_createFromEncodedNativeForm);

    jobject ret = env->CallStaticObjectMethod(ResourceRequestBody_clazz(env),
        method_id, encodedNativeForm.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ResourceRequestBody_getEncodedNativeForm = 0;
static base::android::ScopedJavaLocalRef<jbyteArray>
Java_ResourceRequestBody_getEncodedNativeForm(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ResourceRequestBody_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ResourceRequestBody_clazz(env),
        "getEncodedNativeForm",
        "("
        ")"
        "[B",
        &g_ResourceRequestBody_getEncodedNativeForm);

    jbyteArray ret = static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsResourceRequestBody[] = {
    { "nativeCreateResourceRequestBodyFromBytes",
        "("
        "[B"
        ")"
        "[B",
        reinterpret_cast<void*>(Java_org_chromium_content_1public_common_ResourceRequestBody_nativeCreateResourceRequestBodyFromBytes) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsResourceRequestBodySize = arraysize(kMethodsResourceRequestBody);

    if (env->RegisterNatives(ResourceRequestBody_clazz(env),
            kMethodsResourceRequestBody,
            kMethodsResourceRequestBodySize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ResourceRequestBody_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_public_common_ResourceRequestBody_JNI
