// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/InterstitialPageDelegateAndroid

#ifndef org_chromium_content_browser_InterstitialPageDelegateAndroid_JNI
#define org_chromium_content_browser_InterstitialPageDelegateAndroid_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kInterstitialPageDelegateAndroidClassPath[] = "org/chromium/content/browser/InterstitialPageDelegateAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_InterstitialPageDelegateAndroid_clazz
    __attribute__((unused))
    = 0;
#define InterstitialPageDelegateAndroid_clazz(env) base::android::LazyGetClass(env, kInterstitialPageDelegateAndroidClassPath, &g_InterstitialPageDelegateAndroid_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& htmlContent);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_content_browser_InterstitialPageDelegateAndroid_nativeInit(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jstring htmlContent)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, htmlContent));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_InterstitialPageDelegateAndroid_nativeProceed(JNIEnv*
                                                                                    env,
    jobject jcaller,
    jlong nativeInterstitialPageDelegateAndroid)
{
    InterstitialPageDelegateAndroid* native = reinterpret_cast<InterstitialPageDelegateAndroid*>(nativeInterstitialPageDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Proceed");
    return native->Proceed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_InterstitialPageDelegateAndroid_nativeDontProceed(JNIEnv*
                                                                                        env,
    jobject jcaller,
    jlong nativeInterstitialPageDelegateAndroid)
{
    InterstitialPageDelegateAndroid* native = reinterpret_cast<InterstitialPageDelegateAndroid*>(nativeInterstitialPageDelegateAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "DontProceed");
    return native->DontProceed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_InterstitialPageDelegateAndroid_onProceed = 0;
static void Java_InterstitialPageDelegateAndroid_onProceed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        InterstitialPageDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, InterstitialPageDelegateAndroid_clazz(env),
        "onProceed",
        "("
        ")"
        "V",
        &g_InterstitialPageDelegateAndroid_onProceed);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_InterstitialPageDelegateAndroid_onDontProceed
    = 0;
static void Java_InterstitialPageDelegateAndroid_onDontProceed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        InterstitialPageDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, InterstitialPageDelegateAndroid_clazz(env),
        "onDontProceed",
        "("
        ")"
        "V",
        &g_InterstitialPageDelegateAndroid_onDontProceed);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_InterstitialPageDelegateAndroid_commandReceived
    = 0;
static void Java_InterstitialPageDelegateAndroid_commandReceived(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& command)
{
    CHECK_CLAZZ(env, obj.obj(),
        InterstitialPageDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, InterstitialPageDelegateAndroid_clazz(env),
        "commandReceived",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_InterstitialPageDelegateAndroid_commandReceived);

    env->CallVoidMethod(obj.obj(),
        method_id, command.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_InterstitialPageDelegateAndroid_onNativeDestroyed
    = 0;
static void Java_InterstitialPageDelegateAndroid_onNativeDestroyed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        InterstitialPageDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, InterstitialPageDelegateAndroid_clazz(env),
        "onNativeDestroyed",
        "("
        ")"
        "V",
        &g_InterstitialPageDelegateAndroid_onNativeDestroyed);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsInterstitialPageDelegateAndroid[] = {
    { "nativeInit",
        "("
        "Ljava/lang/String;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_InterstitialPageDelegateAndroid_nativeInit) },
    { "nativeProceed",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_InterstitialPageDelegateAndroid_nativeProceed) },
    { "nativeDontProceed",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_InterstitialPageDelegateAndroid_nativeDontProceed) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsInterstitialPageDelegateAndroidSize = arraysize(kMethodsInterstitialPageDelegateAndroid);

    if (env->RegisterNatives(InterstitialPageDelegateAndroid_clazz(env),
            kMethodsInterstitialPageDelegateAndroid,
            kMethodsInterstitialPageDelegateAndroidSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, InterstitialPageDelegateAndroid_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_InterstitialPageDelegateAndroid_JNI
