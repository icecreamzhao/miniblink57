// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentViewStatics

#ifndef org_chromium_content_browser_ContentViewStatics_JNI
#define org_chromium_content_browser_ContentViewStatics_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kContentViewStaticsClassPath[] = "org/chromium/content/browser/ContentViewStatics";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ContentViewStatics_clazz __attribute__((unused)) = 0;
#define ContentViewStatics_clazz(env) base::android::LazyGetClass(env, kContentViewStaticsClassPath, &g_ContentViewStatics_clazz)

} // namespace

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jstring> FindAddress(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& addr);

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_content_browser_ContentViewStatics_nativeFindAddress(JNIEnv*
                                                                           env,
    jclass jcaller,
    jstring addr)
{
    return FindAddress(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, addr))
        .Release();
}

static void SetWebKitSharedTimersSuspended(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean suspend);

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ContentViewStatics_nativeSetWebKitSharedTimersSuspended(JNIEnv*
                                                                                              env,
    jclass jcaller,
    jboolean suspend)
{
    return SetWebKitSharedTimersSuspended(env,
        base::android::JavaParamRef<jclass>(env, jcaller), suspend);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsContentViewStatics[] = {
    { "nativeFindAddress",
        "("
        "Ljava/lang/String;"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewStatics_nativeFindAddress) },
    { "nativeSetWebKitSharedTimersSuspended",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentViewStatics_nativeSetWebKitSharedTimersSuspended) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsContentViewStaticsSize = arraysize(kMethodsContentViewStatics);

    if (env->RegisterNatives(ContentViewStatics_clazz(env),
            kMethodsContentViewStatics,
            kMethodsContentViewStaticsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ContentViewStatics_clazz(env), __FILE__);
        return false;
    }

    return true;
}

#endif // org_chromium_content_browser_ContentViewStatics_JNI
