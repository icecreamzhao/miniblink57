// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/BrowserAccessibilityManager

#ifndef org_chromium_content_browser_accessibility_BrowserAccessibilityManager_JNI
#define org_chromium_content_browser_accessibility_BrowserAccessibilityManager_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kBrowserAccessibilityManagerClassPath[] = "org/chromium/content/browser/accessibility/BrowserAccessibilityManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_BrowserAccessibilityManager_clazz
    __attribute__((unused))
    = 0;
#define BrowserAccessibilityManager_clazz(env) base::android::LazyGetClass(env, kBrowserAccessibilityManagerClassPath, &g_BrowserAccessibilityManager_clazz)

} // namespace

namespace content {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetRootId(JNIEnv*
                                                                                                env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetRootId", 0);
    return native->GetRootId(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsNodeValid(JNIEnv*
                                                                                                  env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsNodeValid", false);
    return native->IsNodeValid(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsEditableText(JNIEnv*
                                                                                                     env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsEditableText", false);
    return native->IsEditableText(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsFocused(JNIEnv*
                                                                                                env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsFocused", false);
    return native->IsFocused(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetEditableTextSelectionStart(JNIEnv*
                                                                                                                    env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetEditableTextSelectionStart", 0);
    return native->GetEditableTextSelectionStart(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetEditableTextSelectionEnd(JNIEnv*
                                                                                                                  env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetEditableTextSelectionEnd", 0);
    return native->GetEditableTextSelectionEnd(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeHitTest(JNIEnv*
                                                                                              env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint x,
    jint y)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "HitTest");
    return native->HitTest(env, base::android::JavaParamRef<jobject>(env, jcaller), x, y);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativePopulateAccessibilityNodeInfo(JNIEnv*
                                                                                                                    env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jobject info,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "PopulateAccessibilityNodeInfo",
        false);
    return native->PopulateAccessibilityNodeInfo(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, info), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativePopulateAccessibilityEvent(JNIEnv*
                                                                                                                 env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jobject event,
    jint id,
    jint eventType)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "PopulateAccessibilityEvent", false);
    return native->PopulateAccessibilityEvent(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, event), id, eventType);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeClick(JNIEnv*
                                                                                            env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Click");
    return native->Click(env, base::android::JavaParamRef<jobject>(env, jcaller),
        id);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeFocus(JNIEnv*
                                                                                            env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Focus");
    return native->Focus(env, base::android::JavaParamRef<jobject>(env, jcaller),
        id);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeBlur(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Blur");
    return native->Blur(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeScrollToMakeNodeVisible(JNIEnv*
                                                                                                              env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ScrollToMakeNodeVisible");
    return native->ScrollToMakeNodeVisible(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeFindElementType(JNIEnv*
                                                                                                      env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint startId,
    jstring elementType,
    jboolean forwards)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "FindElementType", 0);
    return native->FindElementType(env, base::android::JavaParamRef<jobject>(env, jcaller), startId, base::android::JavaParamRef<jstring>(env, elementType),
        forwards);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeSetTextFieldValue(JNIEnv*
                                                                                                        env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id,
    jstring newValue)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetTextFieldValue");
    return native->SetTextFieldValue(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id,
        base::android::JavaParamRef<jstring>(env, newValue));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeSetSelection(JNIEnv*
                                                                                                   env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id,
    jint start,
    jint end)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetSelection");
    return native->SetSelection(env, base::android::JavaParamRef<jobject>(env, jcaller), id, start, end);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeNextAtGranularity(JNIEnv*
                                                                                                        env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint selectionGranularity,
    jboolean extendSelection,
    jint id,
    jint cursorIndex)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "NextAtGranularity", false);
    return native->NextAtGranularity(env,
        base::android::JavaParamRef<jobject>(env, jcaller), selectionGranularity,
        extendSelection, id, cursorIndex);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativePreviousAtGranularity(JNIEnv*
                                                                                                            env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint selectionGranularity,
    jboolean extendSelection,
    jint id,
    jint cursorIndex)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "PreviousAtGranularity", false);
    return native->PreviousAtGranularity(env,
        base::android::JavaParamRef<jobject>(env, jcaller), selectionGranularity,
        extendSelection, id, cursorIndex);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeAdjustSlider(JNIEnv*
                                                                                                   env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id,
    jboolean increment)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "AdjustSlider", false);
    return native->AdjustSlider(env, base::android::JavaParamRef<jobject>(env, jcaller), id, increment);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeSetAccessibilityFocus(JNIEnv*
                                                                                                            env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetAccessibilityFocus");
    return native->SetAccessibilityFocus(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsSlider(JNIEnv*
                                                                                               env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsSlider", false);
    return native->IsSlider(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeScroll(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id,
    jint direction)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "Scroll", false);
    return native->Scroll(env, base::android::JavaParamRef<jobject>(env, jcaller),
        id, direction);
}

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetSupportedHtmlElementTypes(JNIEnv*
                                                                                                                   env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetSupportedHtmlElementTypes", NULL);
    return native->GetSupportedHtmlElementTypes(env,
                     base::android::JavaParamRef<jobject>(env, jcaller))
        .Release();
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeShowContextMenu(JNIEnv*
                                                                                                      env,
    jobject jcaller,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id)
{
    BrowserAccessibilityManagerAndroid* native = reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ShowContextMenu");
    return native->ShowContextMenu(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_BrowserAccessibilityManager_create(JNIEnv* env, jlong nativeBrowserAccessibilityManagerAndroid,
    const base::android::JavaRefOrBare<jobject>& contentViewCore)
{
    CHECK_CLAZZ(env, BrowserAccessibilityManager_clazz(env),
        BrowserAccessibilityManager_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, BrowserAccessibilityManager_clazz(env),
        "create",
        "("
        "J"
        "Lorg/chromium/content/browser/ContentViewCore;"
        ")"
        "Lorg/chromium/content/browser/accessibility/BrowserAccessibilityManager;",
        &g_BrowserAccessibilityManager_create);

    jobject ret = env->CallStaticObjectMethod(BrowserAccessibilityManager_clazz(env),
        method_id, nativeBrowserAccessibilityManagerAndroid,
        contentViewCore.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_onNativeObjectDestroyed
    = 0;
static void Java_BrowserAccessibilityManager_onNativeObjectDestroyed(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong nativeBrowserAccessibilityManagerAndroid)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "onNativeObjectDestroyed",
        "("
        "J"
        ")"
        "V",
        &g_BrowserAccessibilityManager_onNativeObjectDestroyed);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeBrowserAccessibilityManagerAndroid);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_finishGranularityMove
    = 0;
static void Java_BrowserAccessibilityManager_finishGranularityMove(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& text,
    jboolean extendSelection,
    JniIntWrapper itemStartIndex,
    JniIntWrapper itemEndIndex,
    jboolean forwards)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "finishGranularityMove",
        "("
        "Ljava/lang/String;"
        "Z"
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_finishGranularityMove);

    env->CallVoidMethod(obj.obj(),
        method_id, text.obj(), extendSelection, as_jint(itemStartIndex),
        as_jint(itemEndIndex), forwards);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_sendDelayedWindowContentChangedEvent
    = 0;
static void
Java_BrowserAccessibilityManager_sendDelayedWindowContentChangedEvent(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "sendDelayedWindowContentChangedEvent",
        "("
        ")"
        "V",
        &g_BrowserAccessibilityManager_sendDelayedWindowContentChangedEvent);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handlePageLoaded = 0;
static void Java_BrowserAccessibilityManager_handlePageLoaded(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handlePageLoaded",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handlePageLoaded);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handleFocusChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleFocusChanged(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleFocusChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleFocusChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleCheckStateChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleCheckStateChanged(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleCheckStateChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleCheckStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handleClicked = 0;
static void Java_BrowserAccessibilityManager_handleClicked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleClicked",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleClicked);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleTextSelectionChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleTextSelectionChanged(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleTextSelectionChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleTextSelectionChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleEditableTextChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleEditableTextChanged(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleEditableTextChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleEditableTextChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleSliderChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleSliderChanged(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleSliderChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleSliderChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleContentChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleContentChanged(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleContentChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleContentChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handleNavigate = 0;
static void Java_BrowserAccessibilityManager_handleNavigate(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleNavigate",
        "("
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleNavigate);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleScrollPositionChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleScrollPositionChanged(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleScrollPositionChanged",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleScrollPositionChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleScrolledToAnchor
    = 0;
static void Java_BrowserAccessibilityManager_handleScrolledToAnchor(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleScrolledToAnchor",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleScrolledToAnchor);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handleHover = 0;
static void Java_BrowserAccessibilityManager_handleHover(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "handleHover",
        "("
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_handleHover);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_announceLiveRegionText
    = 0;
static void Java_BrowserAccessibilityManager_announceLiveRegionText(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& text)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "announceLiveRegionText",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_announceLiveRegionText);

    env->CallVoidMethod(obj.obj(),
        method_id, text.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoParent
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoParent(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper parentId)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoParent",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoParent);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(parentId));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_addAccessibilityNodeInfoChild
    = 0;
static void
Java_BrowserAccessibilityManager_addAccessibilityNodeInfoChild(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper childId)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "addAccessibilityNodeInfoChild",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_addAccessibilityNodeInfoChild);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(childId));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes(JNIEnv*
                                                                               env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper virtualViewId,
    jboolean checkable,
    jboolean checked,
    jboolean clickable,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean password,
    jboolean scrollable,
    jboolean selected,
    jboolean visibleToUser)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoBooleanAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(virtualViewId), checkable, checked,
        clickable, enabled, focusable, focused, password, scrollable,
        selected, visibleToUser);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_addAccessibilityNodeInfoActions
    = 0;
static void
Java_BrowserAccessibilityManager_addAccessibilityNodeInfoActions(JNIEnv*
                                                                     env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper virtualViewId,
    jboolean canScrollForward,
    jboolean canScrollBackward,
    jboolean canScrollUp,
    jboolean canScrollDown,
    jboolean canScrollLeft,
    jboolean canScrollRight,
    jboolean clickable,
    jboolean editableText,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean isCollapsed,
    jboolean isExpanded,
    jboolean hasNonEmptyValue)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "addAccessibilityNodeInfoActions",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_addAccessibilityNodeInfoActions);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(virtualViewId), canScrollForward,
        canScrollBackward, canScrollUp, canScrollDown, canScrollLeft,
        canScrollRight, clickable, editableText, enabled, focusable,
        focused, isCollapsed, isExpanded, hasNonEmptyValue);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoClassName
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoClassName(JNIEnv*
                                                                       env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    const base::android::JavaRefOrBare<jstring>& className)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoClassName",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoClassName);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), className.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoText
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoText(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    const base::android::JavaRefOrBare<jstring>& text,
    jboolean annotateAsLink,
    jboolean isEditableText)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoText",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "Ljava/lang/String;"
        "Z"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoText);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), text.obj(), annotateAsLink, isEditableText);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation(JNIEnv*
                                                                      env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper virtualViewId,
    JniIntWrapper absoluteLeft,
    JniIntWrapper absoluteTop,
    JniIntWrapper parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height,
    jboolean isRootNode)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoLocation",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(virtualViewId), as_jint(absoluteLeft),
        as_jint(absoluteTop), as_jint(parentRelativeLeft),
        as_jint(parentRelativeTop), as_jint(width), as_jint(height),
        isRootNode);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes(JNIEnv*
                                                                              env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    jboolean isRoot,
    jboolean isEditableText,
    const base::android::JavaRefOrBare<jstring>& roleDescription)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoKitKatAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "Z"
        "Z"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), isRoot, isEditableText, roleDescription.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoLollipopAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoLollipopAttributes(JNIEnv*
                                                                                env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    jboolean canOpenPopup,
    jboolean contentInvalid,
    jboolean dismissable,
    jboolean multiLine,
    JniIntWrapper inputType,
    JniIntWrapper liveRegion)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoLollipopAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "Z"
        "Z"
        "Z"
        "Z"
        "I"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoLollipopAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), canOpenPopup, contentInvalid, dismissable,
        multiLine, as_jint(inputType), as_jint(liveRegion));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper rowCount,
    JniIntWrapper columnCount,
    jboolean hierarchical)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoCollectionInfo",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(rowCount), as_jint(columnCount),
        hierarchical);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo(JNIEnv*
                                                                                env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper rowIndex,
    JniIntWrapper rowSpan,
    JniIntWrapper columnIndex,
    JniIntWrapper columnSpan,
    jboolean heading)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoCollectionItemInfo",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        "I"
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(rowIndex), as_jint(rowSpan),
        as_jint(columnIndex), as_jint(columnSpan), heading);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo(JNIEnv*
                                                                       env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    JniIntWrapper rangeType,
    jfloat min,
    jfloat max,
    jfloat current)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoRangeInfo",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        "F"
        "F"
        "F"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), as_jint(rangeType), min, max, current);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoViewIdResourceName
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityNodeInfoViewIdResourceName(JNIEnv*
                                                                                env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& node,
    const base::android::JavaRefOrBare<jstring>& viewIdResourceName)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityNodeInfoViewIdResourceName",
        "("
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityNodeInfoViewIdResourceName);

    env->CallVoidMethod(obj.obj(),
        method_id, node.obj(), viewIdResourceName.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    jboolean checked,
    jboolean enabled,
    jboolean password,
    jboolean scrollable)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventBooleanAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "Z"
        "Z"
        "Z"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), checked, enabled, password, scrollable);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventClassName
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventClassName(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    const base::android::JavaRefOrBare<jstring>& className)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventClassName",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventClassName);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), className.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventListAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventListAttributes(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper currentItemIndex,
    JniIntWrapper itemCount)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventListAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventListAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(currentItemIndex),
        as_jint(itemCount));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper scrollX,
    JniIntWrapper scrollY,
    JniIntWrapper maxScrollX,
    JniIntWrapper maxScrollY)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventScrollAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(scrollX), as_jint(scrollY),
        as_jint(maxScrollX), as_jint(maxScrollY));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper fromIndex,
    JniIntWrapper addedCount,
    JniIntWrapper removedCount,
    const base::android::JavaRefOrBare<jstring>& beforeText,
    const base::android::JavaRefOrBare<jstring>& text)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventTextChangedAttrs",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(fromIndex), as_jint(addedCount),
        as_jint(removedCount), beforeText.obj(), text.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper fromIndex,
    JniIntWrapper toIndex,
    JniIntWrapper itemCount,
    const base::android::JavaRefOrBare<jstring>& text)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventSelectionAttrs",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(fromIndex), as_jint(toIndex),
        as_jint(itemCount), text.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventLollipopAttributes
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventLollipopAttributes(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    jboolean canOpenPopup,
    jboolean contentInvalid,
    jboolean dismissable,
    jboolean multiLine,
    JniIntWrapper inputType,
    JniIntWrapper liveRegion)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventLollipopAttributes",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "Z"
        "Z"
        "Z"
        "Z"
        "I"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventLollipopAttributes);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), canOpenPopup, contentInvalid, dismissable,
        multiLine, as_jint(inputType), as_jint(liveRegion));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper rowCount,
    JniIntWrapper columnCount,
    jboolean hierarchical)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventCollectionInfo",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(rowCount), as_jint(columnCount),
        hierarchical);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventHeadingFlag
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventHeadingFlag(JNIEnv*
                                                                      env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    jboolean heading)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventHeadingFlag",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "Z"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventHeadingFlag);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), heading);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo(JNIEnv*
                                                                             env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper rowIndex,
    JniIntWrapper rowSpan,
    JniIntWrapper columnIndex,
    JniIntWrapper columnSpan)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventCollectionItemInfo",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(rowIndex), as_jint(rowSpan),
        as_jint(columnIndex), as_jint(columnSpan));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventRangeInfo
    = 0;
static void
Java_BrowserAccessibilityManager_setAccessibilityEventRangeInfo(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event,
    JniIntWrapper rangeType,
    jfloat min,
    jfloat max,
    jfloat current)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "setAccessibilityEventRangeInfo",
        "("
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "F"
        "F"
        "F"
        ")"
        "V",
        &g_BrowserAccessibilityManager_setAccessibilityEventRangeInfo);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj(), as_jint(rangeType), min, max, current);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_shouldExposePasswordText
    = 0;
static jboolean
Java_BrowserAccessibilityManager_shouldExposePasswordText(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        BrowserAccessibilityManager_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, BrowserAccessibilityManager_clazz(env),
        "shouldExposePasswordText",
        "("
        ")"
        "Z",
        &g_BrowserAccessibilityManager_shouldExposePasswordText);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsBrowserAccessibilityManager[] = {
    { "nativeGetRootId",
        "("
        "J"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetRootId) },
    { "nativeIsNodeValid",
        "("
        "J"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsNodeValid) },
    { "nativeIsEditableText",
        "("
        "J"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsEditableText) },
    { "nativeIsFocused",
        "("
        "J"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsFocused) },
    { "nativeGetEditableTextSelectionStart",
        "("
        "J"
        "I"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetEditableTextSelectionStart) },
    { "nativeGetEditableTextSelectionEnd",
        "("
        "J"
        "I"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetEditableTextSelectionEnd) },
    { "nativeHitTest",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeHitTest) },
    { "nativePopulateAccessibilityNodeInfo",
        "("
        "J"
        "Landroid/view/accessibility/AccessibilityNodeInfo;"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativePopulateAccessibilityNodeInfo) },
    { "nativePopulateAccessibilityEvent",
        "("
        "J"
        "Landroid/view/accessibility/AccessibilityEvent;"
        "I"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativePopulateAccessibilityEvent) },
    { "nativeClick",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeClick) },
    { "nativeFocus",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeFocus) },
    { "nativeBlur",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeBlur) },
    { "nativeScrollToMakeNodeVisible",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeScrollToMakeNodeVisible) },
    { "nativeFindElementType",
        "("
        "J"
        "I"
        "Ljava/lang/String;"
        "Z"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeFindElementType) },
    { "nativeSetTextFieldValue",
        "("
        "J"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeSetTextFieldValue) },
    { "nativeSetSelection",
        "("
        "J"
        "I"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeSetSelection) },
    { "nativeNextAtGranularity",
        "("
        "J"
        "I"
        "Z"
        "I"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeNextAtGranularity) },
    { "nativePreviousAtGranularity",
        "("
        "J"
        "I"
        "Z"
        "I"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativePreviousAtGranularity) },
    { "nativeAdjustSlider",
        "("
        "J"
        "I"
        "Z"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeAdjustSlider) },
    { "nativeSetAccessibilityFocus",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeSetAccessibilityFocus) },
    { "nativeIsSlider",
        "("
        "J"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeIsSlider) },
    { "nativeScroll",
        "("
        "J"
        "I"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeScroll) },
    { "nativeGetSupportedHtmlElementTypes",
        "("
        "J"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeGetSupportedHtmlElementTypes) },
    { "nativeShowContextMenu",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_accessibility_BrowserAccessibilityManager_nativeShowContextMenu) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsBrowserAccessibilityManagerSize = arraysize(kMethodsBrowserAccessibilityManager);

    if (env->RegisterNatives(BrowserAccessibilityManager_clazz(env),
            kMethodsBrowserAccessibilityManager,
            kMethodsBrowserAccessibilityManagerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, BrowserAccessibilityManager_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_accessibility_BrowserAccessibilityManager_JNI
