// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentVideoView

#ifndef org_chromium_content_browser_ContentVideoView_JNI
#define org_chromium_content_browser_ContentVideoView_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kContentVideoViewClassPath[] = "org/chromium/content/browser/ContentVideoView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ContentVideoView_clazz __attribute__((unused)) = 0;
#define ContentVideoView_clazz(env) base::android::LazyGetClass(env, kContentVideoViewClassPath, &g_ContentVideoView_clazz)

} // namespace

namespace content {

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jobject>
GetSingletonJavaContentVideoView(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jobject
Java_org_chromium_content_browser_ContentVideoView_nativeGetSingletonJavaContentVideoView(JNIEnv*
                                                                                              env,
    jclass jcaller)
{
    return GetSingletonJavaContentVideoView(env,
        base::android::JavaParamRef<jclass>(env, jcaller))
        .Release();
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ContentVideoView_nativeDidExitFullscreen(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeContentVideoView,
    jboolean releaseMediaPlayer)
{
    ContentVideoView* native = reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
    CHECK_NATIVE_PTR(env, jcaller, native, "DidExitFullscreen");
    return native->DidExitFullscreen(env,
        base::android::JavaParamRef<jobject>(env, jcaller), releaseMediaPlayer);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ContentVideoView_nativeSetSurface(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeContentVideoView,
    jobject surface)
{
    ContentVideoView* native = reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetSurface");
    return native->SetSurface(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, surface));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ContentVideoView_nativeRecordFullscreenPlayback(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeContentVideoView,
    jboolean isVideoPortrait,
    jboolean isOrientationPortrait)
{
    ContentVideoView* native = reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
    CHECK_NATIVE_PTR(env, jcaller, native, "RecordFullscreenPlayback");
    return native->RecordFullscreenPlayback(env,
        base::android::JavaParamRef<jobject>(env, jcaller), isVideoPortrait,
        isOrientationPortrait);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_content_browser_ContentVideoView_nativeRecordExitFullscreenPlayback(JNIEnv*
                                                                                          env,
    jobject jcaller,
    jlong nativeContentVideoView,
    jboolean isOrientationPortrait,
    jlong playbackDurationBeforeOrientationChange,
    jlong playbackDurationAfterOrientationChange)
{
    ContentVideoView* native = reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
    CHECK_NATIVE_PTR(env, jcaller, native, "RecordExitFullscreenPlayback");
    return native->RecordExitFullscreenPlayback(env,
        base::android::JavaParamRef<jobject>(env, jcaller), isOrientationPortrait,
        playbackDurationBeforeOrientationChange,
        playbackDurationAfterOrientationChange);
}

static base::subtle::AtomicWord g_ContentVideoView_onMediaPlayerError = 0;
static void Java_ContentVideoView_onMediaPlayerError(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper errorType)
{
    CHECK_CLAZZ(env, obj.obj(),
        ContentVideoView_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ContentVideoView_clazz(env),
        "onMediaPlayerError",
        "("
        "I"
        ")"
        "V",
        &g_ContentVideoView_onMediaPlayerError);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(errorType));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ContentVideoView_onVideoSizeChanged = 0;
static void Java_ContentVideoView_onVideoSizeChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper width,
    JniIntWrapper height)
{
    CHECK_CLAZZ(env, obj.obj(),
        ContentVideoView_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ContentVideoView_clazz(env),
        "onVideoSizeChanged",
        "("
        "I"
        "I"
        ")"
        "V",
        &g_ContentVideoView_onVideoSizeChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(width), as_jint(height));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ContentVideoView_openVideo = 0;
static void Java_ContentVideoView_openVideo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ContentVideoView_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ContentVideoView_clazz(env),
        "openVideo",
        "("
        ")"
        "V",
        &g_ContentVideoView_openVideo);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ContentVideoView_createContentVideoView = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ContentVideoView_createContentVideoView(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& contentViewCore,
    const base::android::JavaRefOrBare<jobject>& embedder,
    jlong nativeContentVideoView,
    JniIntWrapper videoWidth,
    JniIntWrapper videoHeight)
{
    CHECK_CLAZZ(env, ContentVideoView_clazz(env),
        ContentVideoView_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ContentVideoView_clazz(env),
        "createContentVideoView",
        "("
        "Lorg/chromium/content/browser/ContentViewCore;"
        "Lorg/chromium/content/browser/ContentVideoViewEmbedder;"
        "J"
        "I"
        "I"
        ")"
        "Lorg/chromium/content/browser/ContentVideoView;",
        &g_ContentVideoView_createContentVideoView);

    jobject ret = env->CallStaticObjectMethod(ContentVideoView_clazz(env),
        method_id, contentViewCore.obj(), embedder.obj(),
        nativeContentVideoView, as_jint(videoWidth),
        as_jint(videoHeight));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentVideoView_exitFullscreen = 0;
static void Java_ContentVideoView_exitFullscreen(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean releaseMediaPlayer)
{
    CHECK_CLAZZ(env, obj.obj(),
        ContentVideoView_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ContentVideoView_clazz(env),
        "exitFullscreen",
        "("
        "Z"
        ")"
        "V",
        &g_ContentVideoView_exitFullscreen);

    env->CallVoidMethod(obj.obj(),
        method_id, releaseMediaPlayer);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ContentVideoView_destroyContentVideoView = 0;
static void Java_ContentVideoView_destroyContentVideoView(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean nativeViewDestroyed)
{
    CHECK_CLAZZ(env, obj.obj(),
        ContentVideoView_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ContentVideoView_clazz(env),
        "destroyContentVideoView",
        "("
        "Z"
        ")"
        "V",
        &g_ContentVideoView_destroyContentVideoView);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeViewDestroyed);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsContentVideoView[] = {
    { "nativeGetSingletonJavaContentVideoView",
        "("
        ")"
        "Lorg/chromium/content/browser/ContentVideoView;",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentVideoView_nativeGetSingletonJavaContentVideoView) },
    { "nativeDidExitFullscreen",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentVideoView_nativeDidExitFullscreen) },
    { "nativeSetSurface",
        "("
        "J"
        "Landroid/view/Surface;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentVideoView_nativeSetSurface) },
    { "nativeRecordFullscreenPlayback",
        "("
        "J"
        "Z"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentVideoView_nativeRecordFullscreenPlayback) },
    { "nativeRecordExitFullscreenPlayback",
        "("
        "J"
        "Z"
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_content_browser_ContentVideoView_nativeRecordExitFullscreenPlayback) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsContentVideoViewSize = arraysize(kMethodsContentVideoView);

    if (env->RegisterNatives(ContentVideoView_clazz(env),
            kMethodsContentVideoView,
            kMethodsContentVideoViewSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ContentVideoView_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace content

#endif // org_chromium_content_browser_ContentVideoView_JNI
