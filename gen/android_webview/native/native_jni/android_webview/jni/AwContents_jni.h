// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContents

#ifndef org_chromium_android_webview_AwContents_JNI
#define org_chromium_android_webview_AwContents_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwContentsClassPath[] = "org/chromium/android_webview/AwContents";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwContents_clazz __attribute__((unused)) = 0;
#define AwContents_clazz(env) base::android::LazyGetClass(env, kAwContentsClassPath, &g_AwContents_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& browserContext);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwContents_nativeInit(JNIEnv* env, jclass jcaller,
    jobject browserContext)
{
    return Init(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, browserContext));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void SetForceAuxiliaryBitmapRendering(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jboolean forceAuxiliaryBitmapRendering);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetForceAuxiliaryBitmapRendering(JNIEnv*
                                                                                         env,
    jclass jcaller,
    jboolean forceAuxiliaryBitmapRendering)
{
    return SetForceAuxiliaryBitmapRendering(env,
        base::android::JavaParamRef<jclass>(env, jcaller),
        forceAuxiliaryBitmapRendering);
}

static void SetAwDrawSWFunctionTable(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong functionTablePointer);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetAwDrawSWFunctionTable(JNIEnv*
                                                                                 env,
    jclass jcaller,
    jlong functionTablePointer)
{
    return SetAwDrawSWFunctionTable(env, base::android::JavaParamRef<jclass>(env, jcaller), functionTablePointer);
}

static void SetAwDrawGLFunctionTable(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong functionTablePointer);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetAwDrawGLFunctionTable(JNIEnv*
                                                                                 env,
    jclass jcaller,
    jlong functionTablePointer)
{
    return SetAwDrawGLFunctionTable(env, base::android::JavaParamRef<jclass>(env, jcaller), functionTablePointer);
}

static jint GetNativeInstanceCount(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jint
Java_org_chromium_android_1webview_AwContents_nativeGetNativeInstanceCount(JNIEnv*
                                                                               env,
    jclass jcaller)
{
    return GetNativeInstanceCount(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void SetShouldDownloadFavicons(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetShouldDownloadFavicons(JNIEnv*
                                                                                  env,
    jclass jcaller)
{
    return SetShouldDownloadFavicons(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void UpdateDefaultLocale(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& locale,
    const base::android::JavaParamRef<jstring>& localeList);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeUpdateDefaultLocale(JNIEnv*
                                                                            env,
    jclass jcaller,
    jstring locale,
    jstring localeList)
{
    return UpdateDefaultLocale(env, base::android::JavaParamRef<jclass>(env, jcaller), base::android::JavaParamRef<jstring>(env, locale),
        base::android::JavaParamRef<jstring>(env, localeList));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetJavaPeers(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeAwContents,
    jobject awContents,
    jobject webViewWebContentsDelegate,
    jobject contentsClientBridge,
    jobject ioThreadClient,
    jobject navigationInterceptionDelegate)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetJavaPeers");
    return native->SetJavaPeers(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, awContents),
        base::android::JavaParamRef<jobject>(env, webViewWebContentsDelegate),
        base::android::JavaParamRef<jobject>(env, contentsClientBridge),
        base::android::JavaParamRef<jobject>(env, ioThreadClient),
        base::android::JavaParamRef<jobject>(env,
            navigationInterceptionDelegate));
}

JNI_GENERATOR_EXPORT jobject
Java_org_chromium_android_1webview_AwContents_nativeGetWebContents(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetWebContents", NULL);
    return native->GetWebContents(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetAwGLFunctor(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwContents,
    jlong nativeAwGLFunctor)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetAwGLFunctor");
    return native->SetAwGLFunctor(env, base::android::JavaParamRef<jobject>(env, jcaller), nativeAwGLFunctor);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeDocumentHasImages(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeAwContents,
    jobject message)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "DocumentHasImages");
    return native->DocumentHasImages(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, message));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeGenerateMHTML(JNIEnv*
                                                                      env,
    jobject jcaller,
    jlong nativeAwContents,
    jstring path,
    jobject callback)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "GenerateMHTML");
    return native->GenerateMHTML(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, path),
        base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeAddVisitedLinks(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeAwContents,
    jobjectArray visitedLinks)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "AddVisitedLinks");
    return native->AddVisitedLinks(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobjectArray>(env, visitedLinks));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeZoomBy(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jfloat delta)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "ZoomBy");
    return native->ZoomBy(env, base::android::JavaParamRef<jobject>(env, jcaller),
        delta);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeOnComputeScroll(JNIEnv*
                                                                        env,
    jobject jcaller,
    jlong nativeAwContents,
    jlong currentAnimationTimeMillis)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnComputeScroll");
    return native->OnComputeScroll(env, base::android::JavaParamRef<jobject>(env, jcaller), currentAnimationTimeMillis);
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwContents_nativeOnDraw(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jobject canvas,
    jboolean isHardwareAccelerated,
    jint scrollX,
    jint scrollY,
    jint visibleLeft,
    jint visibleTop,
    jint visibleRight,
    jint visibleBottom)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnDraw", false);
    return native->OnDraw(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, canvas), isHardwareAccelerated,
        scrollX, scrollY, visibleLeft, visibleTop, visibleRight, visibleBottom);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeFindAllAsync(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeAwContents,
    jstring searchString)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "FindAllAsync");
    return native->FindAllAsync(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, searchString));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeFindNext(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean forward)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "FindNext");
    return native->FindNext(env, base::android::JavaParamRef<jobject>(env, jcaller), forward);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeClearMatches(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "ClearMatches");
    return native->ClearMatches(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeClearCache(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean includeDiskFiles)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "ClearCache");
    return native->ClearCache(env, base::android::JavaParamRef<jobject>(env, jcaller), includeDiskFiles);
}

JNI_GENERATOR_EXPORT jbyteArray
Java_org_chromium_android_1webview_AwContents_nativeGetCertificate(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetCertificate", NULL);
    return native->GetCertificate(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeRequestNewHitTestDataAt(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativeAwContents,
    jfloat x,
    jfloat y,
    jfloat touchMajor)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "RequestNewHitTestDataAt");
    return native->RequestNewHitTestDataAt(env,
        base::android::JavaParamRef<jobject>(env, jcaller), x, y, touchMajor);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeUpdateLastHitTestData(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateLastHitTestData");
    return native->UpdateLastHitTestData(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeOnSizeChanged(JNIEnv*
                                                                      env,
    jobject jcaller,
    jlong nativeAwContents,
    jint w,
    jint h,
    jint ow,
    jint oh)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnSizeChanged");
    return native->OnSizeChanged(env, base::android::JavaParamRef<jobject>(env, jcaller), w, h, ow, oh);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeScrollTo(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jint x,
    jint y)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "ScrollTo");
    return native->ScrollTo(env, base::android::JavaParamRef<jobject>(env, jcaller), x, y);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSmoothScroll(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeAwContents,
    jint targetX,
    jint targetY,
    jlong durationMs)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SmoothScroll");
    return native->SmoothScroll(env, base::android::JavaParamRef<jobject>(env, jcaller), targetX, targetY, durationMs);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetViewVisibility(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean visible)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetViewVisibility");
    return native->SetViewVisibility(env,
        base::android::JavaParamRef<jobject>(env, jcaller), visible);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetWindowVisibility(JNIEnv*
                                                                            env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean visible)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetWindowVisibility");
    return native->SetWindowVisibility(env,
        base::android::JavaParamRef<jobject>(env, jcaller), visible);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetIsPaused(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean paused)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetIsPaused");
    return native->SetIsPaused(env, base::android::JavaParamRef<jobject>(env, jcaller), paused);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeOnAttachedToWindow(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeAwContents,
    jint w,
    jint h)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnAttachedToWindow");
    return native->OnAttachedToWindow(env,
        base::android::JavaParamRef<jobject>(env, jcaller), w, h);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeOnDetachedFromWindow(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnDetachedFromWindow");
    return native->OnDetachedFromWindow(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwContents_nativeIsVisible(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "IsVisible", false);
    return native->IsVisible(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetDipScale(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jfloat dipScale)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetDipScale");
    return native->SetDipScale(env, base::android::JavaParamRef<jobject>(env, jcaller), dipScale);
}

JNI_GENERATOR_EXPORT jbyteArray
Java_org_chromium_android_1webview_AwContents_nativeGetOpaqueState(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetOpaqueState", NULL);
    return native->GetOpaqueState(env, base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwContents_nativeRestoreFromOpaqueState(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeAwContents,
    jbyteArray state)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "RestoreFromOpaqueState", false);
    return native->RestoreFromOpaqueState(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jbyteArray>(env, state));
}

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwContents_nativeReleasePopupAwContents(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "ReleasePopupAwContents", 0);
    return native->ReleasePopupAwContents(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeFocusFirstNode(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "FocusFirstNode");
    return native->FocusFirstNode(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetBackgroundColor(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeAwContents,
    jint color)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetBackgroundColor");
    return native->SetBackgroundColor(env,
        base::android::JavaParamRef<jobject>(env, jcaller), color);
}

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwContents_nativeCapturePicture(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwContents,
    jint width,
    jint height)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "CapturePicture", 0);
    return native->CapturePicture(env, base::android::JavaParamRef<jobject>(env, jcaller), width, height);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeEnableOnNewPicture(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean enabled)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "EnableOnNewPicture");
    return native->EnableOnNewPicture(env,
        base::android::JavaParamRef<jobject>(env, jcaller), enabled);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeInsertVisualStateCallback(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeAwContents,
    jlong requestId,
    jobject callback)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "InsertVisualStateCallback");
    return native->InsertVisualStateCallback(env,
        base::android::JavaParamRef<jobject>(env, jcaller), requestId,
        base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeClearView(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "ClearView");
    return native->ClearView(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetExtraHeadersForUrl(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeAwContents,
    jstring url,
    jstring extraHeaders)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetExtraHeadersForUrl");
    return native->SetExtraHeadersForUrl(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, extraHeaders));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeInvokeGeolocationCallback(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean value,
    jstring requestingFrame)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "InvokeGeolocationCallback");
    return native->InvokeGeolocationCallback(env,
        base::android::JavaParamRef<jobject>(env, jcaller), value,
        base::android::JavaParamRef<jstring>(env, requestingFrame));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetJsOnlineProperty(JNIEnv*
                                                                            env,
    jobject jcaller,
    jlong nativeAwContents,
    jboolean networkUp)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetJsOnlineProperty");
    return native->SetJsOnlineProperty(env,
        base::android::JavaParamRef<jobject>(env, jcaller), networkUp);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeTrimMemory(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwContents,
    jint level,
    jboolean visible)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "TrimMemory");
    return native->TrimMemory(env, base::android::JavaParamRef<jobject>(env, jcaller), level, visible);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeCreatePdfExporter(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativeAwContents,
    jobject awPdfExporter)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "CreatePdfExporter");
    return native->CreatePdfExporter(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, awPdfExporter));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativePreauthorizePermission(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeAwContents,
    jstring origin,
    jlong resources)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "PreauthorizePermission");
    return native->PreauthorizePermission(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, origin), resources);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativePostMessageToFrame(JNIEnv*
                                                                           env,
    jobject jcaller,
    jlong nativeAwContents,
    jstring frameId,
    jstring message,
    jstring targetOrigin,
    jintArray msgPorts)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "PostMessageToFrame");
    return native->PostMessageToFrame(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, frameId),
        base::android::JavaParamRef<jstring>(env, message),
        base::android::JavaParamRef<jstring>(env, targetOrigin),
        base::android::JavaParamRef<jintArray>(env, msgPorts));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeCreateMessageChannel(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativeAwContents,
    jobjectArray ports)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "CreateMessageChannel");
    return native->CreateMessageChannel(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobjectArray>(env, ports));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeGrantFileSchemeAccesstoChildProcess(JNIEnv*
                                                                                            env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "GrantFileSchemeAccesstoChildProcess");
    return native->GrantFileSchemeAccesstoChildProcess(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeResumeLoadingCreatedPopupWebContents(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jlong nativeAwContents)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native,
        "ResumeLoadingCreatedPopupWebContents");
    return native->ResumeLoadingCreatedPopupWebContents(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContents_nativeSetDrawParam(JNIEnv*
                                                                     env,
    jobject jcaller,
    jlong nativeAwContents,
    jint scrollX,
    jint scrollY,
    jint visibleLeft,
    jint visibleTop,
    jint visibleRight,
    jint visibleBottom)
{
    AwContents* native = reinterpret_cast<AwContents*>(nativeAwContents);
    CHECK_NATIVE_PTR(env, jcaller, native, "SetDrawParam");
    return native->SetDrawParam(env, base::android::JavaParamRef<jobject>(env, jcaller), scrollX, scrollY, visibleLeft, visibleTop, visibleRight,
        visibleBottom);
}

static base::subtle::AtomicWord g_AwContents_onRenderProcessGone = 0;
static void Java_AwContents_onRenderProcessGone(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper childProcessID)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onRenderProcessGone",
        "("
        "I"
        ")"
        "V",
        &g_AwContents_onRenderProcessGone);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(childProcessID));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onRenderProcessGoneDetail = 0;
static jboolean Java_AwContents_onRenderProcessGoneDetail(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper childProcessID,
    jboolean crashed)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onRenderProcessGoneDetail",
        "("
        "I"
        "Z"
        ")"
        "Z",
        &g_AwContents_onRenderProcessGoneDetail);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(childProcessID), crashed);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwContents_onDocumentHasImagesResponse = 0;
static void Java_AwContents_onDocumentHasImagesResponse(JNIEnv* env, jboolean result,
    const base::android::JavaRefOrBare<jobject>& message)
{
    CHECK_CLAZZ(env, AwContents_clazz(env),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AwContents_clazz(env),
        "onDocumentHasImagesResponse",
        "("
        "Z"
        "Landroid/os/Message;"
        ")"
        "V",
        &g_AwContents_onDocumentHasImagesResponse);

    env->CallStaticVoidMethod(AwContents_clazz(env),
        method_id, result, message.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onReceivedTouchIconUrl = 0;
static void Java_AwContents_onReceivedTouchIconUrl(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean precomposed)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onReceivedTouchIconUrl",
        "("
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        &g_AwContents_onReceivedTouchIconUrl);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), precomposed);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onReceivedIcon = 0;
static void Java_AwContents_onReceivedIcon(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& bitmap)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onReceivedIcon",
        "("
        "Landroid/graphics/Bitmap;"
        ")"
        "V",
        &g_AwContents_onReceivedIcon);

    env->CallVoidMethod(obj.obj(),
        method_id, bitmap.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onCreateTouchHandle = 0;
static jlong Java_AwContents_onCreateTouchHandle(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onCreateTouchHandle",
        "("
        ")"
        "J",
        &g_AwContents_onCreateTouchHandle);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwContents_generateMHTMLCallback = 0;
static void Java_AwContents_generateMHTMLCallback(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& path,
    jlong size,
    const base::android::JavaRefOrBare<jobject>& callback)
{
    CHECK_CLAZZ(env, AwContents_clazz(env),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AwContents_clazz(env),
        "generateMHTMLCallback",
        "("
        "Ljava/lang/String;"
        "J"
        "Landroid/webkit/ValueCallback;"
        ")"
        "V",
        &g_AwContents_generateMHTMLCallback);

    env->CallStaticVoidMethod(AwContents_clazz(env),
        method_id, path.obj(), size, callback.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onReceivedHttpAuthRequest = 0;
static void Java_AwContents_onReceivedHttpAuthRequest(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& handler,
    const base::android::JavaRefOrBare<jstring>& host,
    const base::android::JavaRefOrBare<jstring>& realm)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onReceivedHttpAuthRequest",
        "("
        "Lorg/chromium/android_webview/AwHttpAuthHandler;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AwContents_onReceivedHttpAuthRequest);

    env->CallVoidMethod(obj.obj(),
        method_id, handler.obj(), host.obj(), realm.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onGeolocationPermissionsShowPrompt
    = 0;
static void Java_AwContents_onGeolocationPermissionsShowPrompt(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& origin)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onGeolocationPermissionsShowPrompt",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AwContents_onGeolocationPermissionsShowPrompt);

    env->CallVoidMethod(obj.obj(),
        method_id, origin.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onGeolocationPermissionsHidePrompt
    = 0;
static void Java_AwContents_onGeolocationPermissionsHidePrompt(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onGeolocationPermissionsHidePrompt",
        "("
        ")"
        "V",
        &g_AwContents_onGeolocationPermissionsHidePrompt);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onPermissionRequest = 0;
static void Java_AwContents_onPermissionRequest(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& awPermissionRequest)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onPermissionRequest",
        "("
        "Lorg/chromium/android_webview/permission/AwPermissionRequest;"
        ")"
        "V",
        &g_AwContents_onPermissionRequest);

    env->CallVoidMethod(obj.obj(),
        method_id, awPermissionRequest.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onPermissionRequestCanceled = 0;
static void Java_AwContents_onPermissionRequestCanceled(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& awPermissionRequest)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onPermissionRequestCanceled",
        "("
        "Lorg/chromium/android_webview/permission/AwPermissionRequest;"
        ")"
        "V",
        &g_AwContents_onPermissionRequestCanceled);

    env->CallVoidMethod(obj.obj(),
        method_id, awPermissionRequest.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onFindResultReceived = 0;
static void Java_AwContents_onFindResultReceived(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper activeMatchOrdinal,
    JniIntWrapper numberOfMatches,
    jboolean isDoneCounting)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onFindResultReceived",
        "("
        "I"
        "I"
        "Z"
        ")"
        "V",
        &g_AwContents_onFindResultReceived);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(activeMatchOrdinal), as_jint(numberOfMatches),
        isDoneCounting);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onNewPicture = 0;
static void Java_AwContents_onNewPicture(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onNewPicture",
        "("
        ")"
        "V",
        &g_AwContents_onNewPicture);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_invokeVisualStateCallback = 0;
static void Java_AwContents_invokeVisualStateCallback(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& callback,
    jlong requestId)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "invokeVisualStateCallback",
        "("
        "Lorg/chromium/android_webview/AwContents$VisualStateCallback;"
        "J"
        ")"
        "V",
        &g_AwContents_invokeVisualStateCallback);

    env->CallVoidMethod(obj.obj(),
        method_id, callback.obj(), requestId);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_updateHitTestData = 0;
static void Java_AwContents_updateHitTestData(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper type,
    const base::android::JavaRefOrBare<jstring>& extra,
    const base::android::JavaRefOrBare<jstring>& href,
    const base::android::JavaRefOrBare<jstring>& anchorText,
    const base::android::JavaRefOrBare<jstring>& imgSrc)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "updateHitTestData",
        "("
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AwContents_updateHitTestData);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(type), extra.obj(), href.obj(), anchorText.obj(),
        imgSrc.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_postInvalidateOnAnimation = 0;
static void Java_AwContents_postInvalidateOnAnimation(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "postInvalidateOnAnimation",
        "("
        ")"
        "V",
        &g_AwContents_postInvalidateOnAnimation);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_getLocationOnScreen = 0;
static base::android::ScopedJavaLocalRef<jintArray>
Java_AwContents_getLocationOnScreen(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "getLocationOnScreen",
        "("
        ")"
        "[I",
        &g_AwContents_getLocationOnScreen);

    jintArray ret = static_cast<jintArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static base::subtle::AtomicWord g_AwContents_onWebLayoutPageScaleFactorChanged = 0;
static void Java_AwContents_onWebLayoutPageScaleFactorChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jfloat webLayoutPageScaleFactor)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onWebLayoutPageScaleFactorChanged",
        "("
        "F"
        ")"
        "V",
        &g_AwContents_onWebLayoutPageScaleFactorChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, webLayoutPageScaleFactor);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_onWebLayoutContentsSizeChanged = 0;
static void Java_AwContents_onWebLayoutContentsSizeChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper widthCss,
    JniIntWrapper heightCss)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "onWebLayoutContentsSizeChanged",
        "("
        "I"
        "I"
        ")"
        "V",
        &g_AwContents_onWebLayoutContentsSizeChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(widthCss), as_jint(heightCss));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_scrollContainerViewTo = 0;
static void Java_AwContents_scrollContainerViewTo(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper x,
    JniIntWrapper y)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "scrollContainerViewTo",
        "("
        "I"
        "I"
        ")"
        "V",
        &g_AwContents_scrollContainerViewTo);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(x), as_jint(y));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_updateScrollState = 0;
static void Java_AwContents_updateScrollState(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper maxContainerViewScrollOffsetX,
    JniIntWrapper maxContainerViewScrollOffsetY,
    JniIntWrapper contentWidthDip,
    JniIntWrapper contentHeightDip,
    jfloat pageScaleFactor,
    jfloat minPageScaleFactor,
    jfloat maxPageScaleFactor)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "updateScrollState",
        "("
        "I"
        "I"
        "I"
        "I"
        "F"
        "F"
        "F"
        ")"
        "V",
        &g_AwContents_updateScrollState);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(maxContainerViewScrollOffsetX),
        as_jint(maxContainerViewScrollOffsetY), as_jint(contentWidthDip),
        as_jint(contentHeightDip), pageScaleFactor, minPageScaleFactor,
        maxPageScaleFactor);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_setAwAutofillClient = 0;
static void Java_AwContents_setAwAutofillClient(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& client)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "setAwAutofillClient",
        "("
        "Lorg/chromium/android_webview/AwAutofillClient;"
        ")"
        "V",
        &g_AwContents_setAwAutofillClient);

    env->CallVoidMethod(obj.obj(),
        method_id, client.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_didOverscroll = 0;
static void Java_AwContents_didOverscroll(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper deltaX,
    JniIntWrapper deltaY,
    jfloat velocityX,
    jfloat velocityY)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "didOverscroll",
        "("
        "I"
        "I"
        "F"
        "F"
        ")"
        "V",
        &g_AwContents_didOverscroll);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(deltaX), as_jint(deltaY), velocityX, velocityY);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContents_canShowInterstitial = 0;
static jboolean Java_AwContents_canShowInterstitial(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "canShowInterstitial",
        "("
        ")"
        "Z",
        &g_AwContents_canShowInterstitial);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwContents_useLegacyGeolocationPermissionAPI = 0;
static jboolean Java_AwContents_useLegacyGeolocationPermissionAPI(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "useLegacyGeolocationPermissionAPI",
        "("
        ")"
        "Z",
        &g_AwContents_useLegacyGeolocationPermissionAPI);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwContents_updateDrawParam = 0;
static void Java_AwContents_updateDrawParam(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContents_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContents_clazz(env),
        "updateDrawParam",
        "("
        ")"
        "V",
        &g_AwContents_updateDrawParam);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwContents[] = {
    { "nativeInit",
        "("
        "Lorg/chromium/android_webview/AwBrowserContext;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeInit) },
    { "nativeDestroy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeDestroy) },
    { "nativeSetForceAuxiliaryBitmapRendering",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetForceAuxiliaryBitmapRendering) },
    { "nativeSetAwDrawSWFunctionTable",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetAwDrawSWFunctionTable) },
    { "nativeSetAwDrawGLFunctionTable",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetAwDrawGLFunctionTable) },
    { "nativeGetNativeInstanceCount",
        "("
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeGetNativeInstanceCount) },
    { "nativeSetShouldDownloadFavicons",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetShouldDownloadFavicons) },
    { "nativeUpdateDefaultLocale",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeUpdateDefaultLocale) },
    { "nativeSetJavaPeers",
        "("
        "J"
        "Lorg/chromium/android_webview/AwContents;"
        "Lorg/chromium/android_webview/AwWebContentsDelegate;"
        "Lorg/chromium/android_webview/AwContentsClientBridge;"
        "Lorg/chromium/android_webview/AwContentsIoThreadClient;"
        "Lorg/chromium/components/navigation_interception/InterceptNavigationDelegate;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetJavaPeers) },
    { "nativeGetWebContents",
        "("
        "J"
        ")"
        "Lorg/chromium/content_public/browser/WebContents;",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeGetWebContents) },
    { "nativeSetAwGLFunctor",
        "("
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetAwGLFunctor) },
    { "nativeDocumentHasImages",
        "("
        "J"
        "Landroid/os/Message;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeDocumentHasImages) },
    { "nativeGenerateMHTML",
        "("
        "J"
        "Ljava/lang/String;"
        "Landroid/webkit/ValueCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeGenerateMHTML) },
    { "nativeAddVisitedLinks",
        "("
        "J"
        "[Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeAddVisitedLinks) },
    { "nativeZoomBy",
        "("
        "J"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeZoomBy) },
    { "nativeOnComputeScroll",
        "("
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeOnComputeScroll) },
    { "nativeOnDraw",
        "("
        "J"
        "Landroid/graphics/Canvas;"
        "Z"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeOnDraw) },
    { "nativeFindAllAsync",
        "("
        "J"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeFindAllAsync) },
    { "nativeFindNext",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeFindNext) },
    { "nativeClearMatches",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeClearMatches) },
    { "nativeClearCache",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeClearCache) },
    { "nativeGetCertificate",
        "("
        "J"
        ")"
        "[B",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeGetCertificate) },
    { "nativeRequestNewHitTestDataAt",
        "("
        "J"
        "F"
        "F"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeRequestNewHitTestDataAt) },
    { "nativeUpdateLastHitTestData",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeUpdateLastHitTestData) },
    { "nativeOnSizeChanged",
        "("
        "J"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeOnSizeChanged) },
    { "nativeScrollTo",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeScrollTo) },
    { "nativeSmoothScroll",
        "("
        "J"
        "I"
        "I"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSmoothScroll) },
    { "nativeSetViewVisibility",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetViewVisibility) },
    { "nativeSetWindowVisibility",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetWindowVisibility) },
    { "nativeSetIsPaused",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetIsPaused) },
    { "nativeOnAttachedToWindow",
        "("
        "J"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeOnAttachedToWindow) },
    { "nativeOnDetachedFromWindow",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeOnDetachedFromWindow) },
    { "nativeIsVisible",
        "("
        "J"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeIsVisible) },
    { "nativeSetDipScale",
        "("
        "J"
        "F"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetDipScale) },
    { "nativeGetOpaqueState",
        "("
        "J"
        ")"
        "[B",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeGetOpaqueState) },
    { "nativeRestoreFromOpaqueState",
        "("
        "J"
        "[B"
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeRestoreFromOpaqueState) },
    { "nativeReleasePopupAwContents",
        "("
        "J"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeReleasePopupAwContents) },
    { "nativeFocusFirstNode",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeFocusFirstNode) },
    { "nativeSetBackgroundColor",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetBackgroundColor) },
    { "nativeCapturePicture",
        "("
        "J"
        "I"
        "I"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeCapturePicture) },
    { "nativeEnableOnNewPicture",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeEnableOnNewPicture) },
    { "nativeInsertVisualStateCallback",
        "("
        "J"
        "J"
        "Lorg/chromium/android_webview/AwContents$VisualStateCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeInsertVisualStateCallback) },
    { "nativeClearView",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeClearView) },
    { "nativeSetExtraHeadersForUrl",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetExtraHeadersForUrl) },
    { "nativeInvokeGeolocationCallback",
        "("
        "J"
        "Z"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeInvokeGeolocationCallback) },
    { "nativeSetJsOnlineProperty",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetJsOnlineProperty) },
    { "nativeTrimMemory",
        "("
        "J"
        "I"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeTrimMemory) },
    { "nativeCreatePdfExporter",
        "("
        "J"
        "Lorg/chromium/android_webview/AwPdfExporter;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeCreatePdfExporter) },
    { "nativePreauthorizePermission",
        "("
        "J"
        "Ljava/lang/String;"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativePreauthorizePermission) },
    { "nativePostMessageToFrame",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "[I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativePostMessageToFrame) },
    { "nativeCreateMessageChannel",
        "("
        "J"
        "[Lorg/chromium/content/browser/AppWebMessagePort;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeCreateMessageChannel) },
    { "nativeGrantFileSchemeAccesstoChildProcess",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeGrantFileSchemeAccesstoChildProcess) },
    { "nativeResumeLoadingCreatedPopupWebContents",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeResumeLoadingCreatedPopupWebContents) },
    { "nativeSetDrawParam",
        "("
        "J"
        "I"
        "I"
        "I"
        "I"
        "I"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContents_nativeSetDrawParam) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwContentsSize = arraysize(kMethodsAwContents);

    if (env->RegisterNatives(AwContents_clazz(env),
            kMethodsAwContents,
            kMethodsAwContentsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwContents_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwContents_JNI
