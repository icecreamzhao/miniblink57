// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContentsIoThreadClient

#ifndef org_chromium_android_webview_AwContentsIoThreadClient_JNI
#define org_chromium_android_webview_AwContentsIoThreadClient_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwContentsIoThreadClientClassPath[] = "org/chromium/android_webview/AwContentsIoThreadClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwContentsIoThreadClient_clazz
    __attribute__((unused))
    = 0;
#define AwContentsIoThreadClient_clazz(env) base::android::LazyGetClass(env, kAwContentsIoThreadClientClassPath, &g_AwContentsIoThreadClient_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AwContentsIoThreadClient_getCacheMode = 0;
static jint Java_AwContentsIoThreadClient_getCacheMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsIoThreadClient_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsIoThreadClient_clazz(env),
        "getCacheMode",
        "("
        ")"
        "I",
        &g_AwContentsIoThreadClient_getCacheMode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwContentsIoThreadClient_shouldBlockContentUrls
    = 0;
static jboolean Java_AwContentsIoThreadClient_shouldBlockContentUrls(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsIoThreadClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsIoThreadClient_clazz(env),
        "shouldBlockContentUrls",
        "("
        ")"
        "Z",
        &g_AwContentsIoThreadClient_shouldBlockContentUrls);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwContentsIoThreadClient_shouldBlockFileUrls = 0;
static jboolean Java_AwContentsIoThreadClient_shouldBlockFileUrls(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsIoThreadClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsIoThreadClient_clazz(env),
        "shouldBlockFileUrls",
        "("
        ")"
        "Z",
        &g_AwContentsIoThreadClient_shouldBlockFileUrls);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwContentsIoThreadClient_shouldBlockNetworkLoads
    = 0;
static jboolean Java_AwContentsIoThreadClient_shouldBlockNetworkLoads(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsIoThreadClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsIoThreadClient_clazz(env),
        "shouldBlockNetworkLoads",
        "("
        ")"
        "Z",
        &g_AwContentsIoThreadClient_shouldBlockNetworkLoads);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwContentsIoThreadClient_shouldAcceptThirdPartyCookies
    = 0;
static jboolean
Java_AwContentsIoThreadClient_shouldAcceptThirdPartyCookies(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsIoThreadClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsIoThreadClient_clazz(env),
        "shouldAcceptThirdPartyCookies",
        "("
        ")"
        "Z",
        &g_AwContentsIoThreadClient_shouldAcceptThirdPartyCookies);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwContentsIoThreadClient_getBackgroundThreadClient
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AwContentsIoThreadClient_getBackgroundThreadClient(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsIoThreadClient_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsIoThreadClient_clazz(env),
        "getBackgroundThreadClient",
        "("
        ")"
        "Lorg/chromium/android_webview/AwContentsBackgroundThreadClient;",
        &g_AwContentsIoThreadClient_getBackgroundThreadClient);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace android_webview

#endif // org_chromium_android_webview_AwContentsIoThreadClient_JNI
