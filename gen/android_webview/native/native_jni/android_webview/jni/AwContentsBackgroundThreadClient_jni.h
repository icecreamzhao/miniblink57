// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContentsBackgroundThreadClient

#ifndef org_chromium_android_webview_AwContentsBackgroundThreadClient_JNI
#define org_chromium_android_webview_AwContentsBackgroundThreadClient_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwContentsBackgroundThreadClientClassPath[] = "org/chromium/android_webview/AwContentsBackgroundThreadClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwContentsBackgroundThreadClient_clazz
    __attribute__((unused))
    = 0;
#define AwContentsBackgroundThreadClient_clazz(env) base::android::LazyGetClass(env, kAwContentsBackgroundThreadClientClassPath, &g_AwContentsBackgroundThreadClient_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_AwContentsBackgroundThreadClient_shouldInterceptRequestFromNative
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AwContentsBackgroundThreadClient_shouldInterceptRequestFromNative(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isMainFrame,
    jboolean hasUserGesture,
    const base::android::JavaRefOrBare<jstring>& method,
    const base::android::JavaRefOrBare<jobjectArray>& requestHeaderNames,
    const base::android::JavaRefOrBare<jobjectArray>& requestHeaderValues)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsBackgroundThreadClient_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsBackgroundThreadClient_clazz(env),
        "shouldInterceptRequestFromNative",
        "("
        "Ljava/lang/String;"
        "Z"
        "Z"
        "Ljava/lang/String;"
        "[Ljava/lang/String;"
        "[Ljava/lang/String;"
        ")"
        "Lorg/chromium/android_webview/AwWebResourceResponse;",
        &g_AwContentsBackgroundThreadClient_shouldInterceptRequestFromNative);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, url.obj(), isMainFrame, hasUserGesture, method.obj(),
        requestHeaderNames.obj(), requestHeaderValues.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace android_webview

#endif // org_chromium_android_webview_AwContentsBackgroundThreadClient_JNI
