// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwSettings

#ifndef org_chromium_android_webview_AwSettings_JNI
#define org_chromium_android_webview_AwSettings_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwSettingsClassPath[] = "org/chromium/android_webview/AwSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwSettings_clazz __attribute__((unused)) = 0;
#define AwSettings_clazz(env) base::android::LazyGetClass(env, kAwSettingsClassPath, &g_AwSettings_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwSettings_nativeInit(JNIEnv* env,
    jobject jcaller,
    jobject webContents)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativePopulateWebPreferencesLocked(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeAwSettings,
    jlong webPrefsPtr)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "PopulateWebPreferencesLocked");
    return native->PopulateWebPreferencesLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller), webPrefsPtr);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeResetScrollAndScaleState(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "ResetScrollAndScaleState");
    return native->ResetScrollAndScaleState(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateEverythingLocked(JNIEnv*
                                                                               env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateEverythingLocked");
    return native->UpdateEverythingLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateInitialPageScaleLocked(JNIEnv*
                                                                                     env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateInitialPageScaleLocked");
    return native->UpdateInitialPageScaleLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateUserAgentLocked(JNIEnv*
                                                                              env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateUserAgentLocked");
    return native->UpdateUserAgentLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateWebkitPreferencesLocked(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateWebkitPreferencesLocked");
    return native->UpdateWebkitPreferencesLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jstring> GetDefaultUserAgent(JNIEnv*
                                                                          env,
    const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_android_1webview_AwSettings_nativeGetDefaultUserAgent(JNIEnv*
                                                                            env,
    jclass jcaller)
{
    return GetDefaultUserAgent(env, base::android::JavaParamRef<jclass>(env, jcaller)).Release();
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateFormDataPreferencesLocked(JNIEnv*
                                                                                        env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateFormDataPreferencesLocked");
    return native->UpdateFormDataPreferencesLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateRendererPreferencesLocked(JNIEnv*
                                                                                        env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateRendererPreferencesLocked");
    return native->UpdateRendererPreferencesLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwSettings_nativeUpdateOffscreenPreRasterLocked(JNIEnv*
                                                                                       env,
    jobject jcaller,
    jlong nativeAwSettings)
{
    AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdateOffscreenPreRasterLocked");
    return native->UpdateOffscreenPreRasterLocked(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_AwSettings_nativeAwSettingsGone = 0;
static void Java_AwSettings_nativeAwSettingsGone(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativeAwSettings)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "nativeAwSettingsGone",
        "("
        "J"
        ")"
        "V",
        &g_AwSettings_nativeAwSettingsGone);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeAwSettings);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwSettings_getDIPScaleLocked = 0;
static jdouble Java_AwSettings_getDIPScaleLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDIPScaleLocked",
        "("
        ")"
        "D",
        &g_AwSettings_getDIPScaleLocked);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getInitialPageScalePercentLocked = 0;
static jfloat Java_AwSettings_getInitialPageScalePercentLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getInitialPageScalePercentLocked",
        "("
        ")"
        "F",
        &g_AwSettings_getInitialPageScalePercentLocked);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSpatialNavigationLocked = 0;
static jboolean Java_AwSettings_getSpatialNavigationLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getSpatialNavigationLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getSpatialNavigationLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked
    = 0;
static jboolean
Java_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked(JNIEnv*
                                                                        env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getEnableSupportedHardwareAcceleratedFeaturesLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getFullscreenSupportedLocked = 0;
static jboolean Java_AwSettings_getFullscreenSupportedLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getFullscreenSupportedLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getFullscreenSupportedLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSaveFormDataLocked = 0;
static jboolean Java_AwSettings_getSaveFormDataLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getSaveFormDataLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getSaveFormDataLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getUserAgentLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getUserAgentLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getUserAgentLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getUserAgentLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getLoadWithOverviewModeLocked = 0;
static jboolean Java_AwSettings_getLoadWithOverviewModeLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getLoadWithOverviewModeLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getLoadWithOverviewModeLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getTextSizePercentLocked = 0;
static jint Java_AwSettings_getTextSizePercentLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getTextSizePercentLocked",
        "("
        ")"
        "I",
        &g_AwSettings_getTextSizePercentLocked);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getStandardFontFamilyLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getStandardFontFamilyLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getStandardFontFamilyLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getStandardFontFamilyLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getFixedFontFamilyLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getFixedFontFamilyLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getFixedFontFamilyLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getFixedFontFamilyLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getSansSerifFontFamilyLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getSansSerifFontFamilyLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getSansSerifFontFamilyLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getSansSerifFontFamilyLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getSerifFontFamilyLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getSerifFontFamilyLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getSerifFontFamilyLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getSerifFontFamilyLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getCursiveFontFamilyLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getCursiveFontFamilyLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getCursiveFontFamilyLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getCursiveFontFamilyLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getFantasyFontFamilyLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getFantasyFontFamilyLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getFantasyFontFamilyLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getFantasyFontFamilyLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getMinimumFontSizeLocked = 0;
static jint Java_AwSettings_getMinimumFontSizeLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getMinimumFontSizeLocked",
        "("
        ")"
        "I",
        &g_AwSettings_getMinimumFontSizeLocked);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getMinimumLogicalFontSizeLocked = 0;
static jint Java_AwSettings_getMinimumLogicalFontSizeLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getMinimumLogicalFontSizeLocked",
        "("
        ")"
        "I",
        &g_AwSettings_getMinimumLogicalFontSizeLocked);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultFontSizeLocked = 0;
static jint Java_AwSettings_getDefaultFontSizeLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDefaultFontSizeLocked",
        "("
        ")"
        "I",
        &g_AwSettings_getDefaultFontSizeLocked);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultFixedFontSizeLocked = 0;
static jint Java_AwSettings_getDefaultFixedFontSizeLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDefaultFixedFontSizeLocked",
        "("
        ")"
        "I",
        &g_AwSettings_getDefaultFixedFontSizeLocked);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getLoadsImagesAutomaticallyLocked = 0;
static jboolean Java_AwSettings_getLoadsImagesAutomaticallyLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getLoadsImagesAutomaticallyLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getLoadsImagesAutomaticallyLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getImagesEnabledLocked = 0;
static jboolean Java_AwSettings_getImagesEnabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getImagesEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getImagesEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getJavaScriptEnabledLocked = 0;
static jboolean Java_AwSettings_getJavaScriptEnabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getJavaScriptEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getJavaScriptEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowUniversalAccessFromFileURLsLocked
    = 0;
static jboolean
Java_AwSettings_getAllowUniversalAccessFromFileURLsLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getAllowUniversalAccessFromFileURLsLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getAllowUniversalAccessFromFileURLsLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowFileAccessFromFileURLsLocked
    = 0;
static jboolean Java_AwSettings_getAllowFileAccessFromFileURLsLocked(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getAllowFileAccessFromFileURLsLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getAllowFileAccessFromFileURLsLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getPluginsDisabledLocked = 0;
static jboolean Java_AwSettings_getPluginsDisabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getPluginsDisabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getPluginsDisabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked
    = 0;
static jboolean
Java_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getJavaScriptCanOpenWindowsAutomaticallyLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getTextAutosizingEnabledLocked = 0;
static jboolean Java_AwSettings_getTextAutosizingEnabledLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getTextAutosizingEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getTextAutosizingEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSupportMultipleWindowsLocked = 0;
static jboolean Java_AwSettings_getSupportMultipleWindowsLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getSupportMultipleWindowsLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getSupportMultipleWindowsLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSupportLegacyQuirksLocked = 0;
static jboolean Java_AwSettings_getSupportLegacyQuirksLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getSupportLegacyQuirksLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getSupportLegacyQuirksLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowEmptyDocumentPersistenceLocked
    = 0;
static jboolean Java_AwSettings_getAllowEmptyDocumentPersistenceLocked(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getAllowEmptyDocumentPersistenceLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getAllowEmptyDocumentPersistenceLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowGeolocationOnInsecureOrigins
    = 0;
static jboolean Java_AwSettings_getAllowGeolocationOnInsecureOrigins(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getAllowGeolocationOnInsecureOrigins",
        "("
        ")"
        "Z",
        &g_AwSettings_getAllowGeolocationOnInsecureOrigins);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getUseWideViewportLocked = 0;
static jboolean Java_AwSettings_getUseWideViewportLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getUseWideViewportLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getUseWideViewportLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getZeroLayoutHeightDisablesViewportQuirkLocked
    = 0;
static jboolean
Java_AwSettings_getZeroLayoutHeightDisablesViewportQuirkLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getZeroLayoutHeightDisablesViewportQuirkLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getZeroLayoutHeightDisablesViewportQuirkLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getForceZeroLayoutHeightLocked = 0;
static jboolean Java_AwSettings_getForceZeroLayoutHeightLocked(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getForceZeroLayoutHeightLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getForceZeroLayoutHeightLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getPasswordEchoEnabledLocked = 0;
static jboolean Java_AwSettings_getPasswordEchoEnabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getPasswordEchoEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getPasswordEchoEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getAppCacheEnabledLocked = 0;
static jboolean Java_AwSettings_getAppCacheEnabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getAppCacheEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getAppCacheEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDomStorageEnabledLocked = 0;
static jboolean Java_AwSettings_getDomStorageEnabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDomStorageEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getDomStorageEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDatabaseEnabledLocked = 0;
static jboolean Java_AwSettings_getDatabaseEnabledLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDatabaseEnabledLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getDatabaseEnabledLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultTextEncodingLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getDefaultTextEncodingLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDefaultTextEncodingLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getDefaultTextEncodingLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_AwSettings_getMediaPlaybackRequiresUserGestureLocked
    = 0;
static jboolean
Java_AwSettings_getMediaPlaybackRequiresUserGestureLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getMediaPlaybackRequiresUserGestureLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getMediaPlaybackRequiresUserGestureLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultVideoPosterURLLocked = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwSettings_getDefaultVideoPosterURLLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getDefaultVideoPosterURLLocked",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwSettings_getDefaultVideoPosterURLLocked);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowRunningInsecureContentLocked
    = 0;
static jboolean Java_AwSettings_getAllowRunningInsecureContentLocked(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getAllowRunningInsecureContentLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getAllowRunningInsecureContentLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getUseStricMixedContentCheckingLocked
    = 0;
static jboolean Java_AwSettings_getUseStricMixedContentCheckingLocked(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getUseStricMixedContentCheckingLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getUseStricMixedContentCheckingLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getOffscreenPreRasterLocked = 0;
static jboolean Java_AwSettings_getOffscreenPreRasterLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getOffscreenPreRasterLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_getOffscreenPreRasterLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_supportsDoubleTapZoomLocked = 0;
static jboolean Java_AwSettings_supportsDoubleTapZoomLocked(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "supportsDoubleTapZoomLocked",
        "("
        ")"
        "Z",
        &g_AwSettings_supportsDoubleTapZoomLocked);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_getRecordFullDocument = 0;
static jboolean Java_AwSettings_getRecordFullDocument(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "getRecordFullDocument",
        "("
        ")"
        "Z",
        &g_AwSettings_getRecordFullDocument);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwSettings_updateEverything = 0;
static void Java_AwSettings_updateEverything(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "updateEverything",
        "("
        ")"
        "V",
        &g_AwSettings_updateEverything);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwSettings_populateWebPreferences = 0;
static void Java_AwSettings_populateWebPreferences(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong webPrefsPtr)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwSettings_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwSettings_clazz(env),
        "populateWebPreferences",
        "("
        "J"
        ")"
        "V",
        &g_AwSettings_populateWebPreferences);

    env->CallVoidMethod(obj.obj(),
        method_id, webPrefsPtr);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwSettings[] = {
    { "nativeInit",
        "("
        "Lorg/chromium/content_public/browser/WebContents;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeInit) },
    { "nativeDestroy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeDestroy) },
    { "nativePopulateWebPreferencesLocked",
        "("
        "J"
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativePopulateWebPreferencesLocked) },
    { "nativeResetScrollAndScaleState",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeResetScrollAndScaleState) },
    { "nativeUpdateEverythingLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateEverythingLocked) },
    { "nativeUpdateInitialPageScaleLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateInitialPageScaleLocked) },
    { "nativeUpdateUserAgentLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateUserAgentLocked) },
    { "nativeUpdateWebkitPreferencesLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateWebkitPreferencesLocked) },
    { "nativeGetDefaultUserAgent",
        "("
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeGetDefaultUserAgent) },
    { "nativeUpdateFormDataPreferencesLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateFormDataPreferencesLocked) },
    { "nativeUpdateRendererPreferencesLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateRendererPreferencesLocked) },
    { "nativeUpdateOffscreenPreRasterLocked",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwSettings_nativeUpdateOffscreenPreRasterLocked) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwSettingsSize = arraysize(kMethodsAwSettings);

    if (env->RegisterNatives(AwSettings_clazz(env),
            kMethodsAwSettings,
            kMethodsAwSettingsSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwSettings_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwSettings_JNI
