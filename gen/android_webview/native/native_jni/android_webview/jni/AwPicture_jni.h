// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwPicture

#ifndef org_chromium_android_webview_AwPicture_JNI
#define org_chromium_android_webview_AwPicture_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwPictureClassPath[] = "org/chromium/android_webview/AwPicture";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwPicture_clazz __attribute__((unused)) = 0;
#define AwPicture_clazz(env) base::android::LazyGetClass(env, kAwPictureClassPath, &g_AwPicture_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwPicture_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwPicture)
{
    AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_android_1webview_AwPicture_nativeGetWidth(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwPicture)
{
    AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetWidth", 0);
    return native->GetWidth(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jint
Java_org_chromium_android_1webview_AwPicture_nativeGetHeight(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwPicture)
{
    AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetHeight", 0);
    return native->GetHeight(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwPicture_nativeDraw(JNIEnv* env, jobject jcaller,
    jlong nativeAwPicture,
    jobject canvas)
{
    AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
    CHECK_NATIVE_PTR(env, jcaller, native, "Draw");
    return native->Draw(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, canvas));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwPicture[] = {
    { "nativeDestroy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwPicture_nativeDestroy) },
    { "nativeGetWidth",
        "("
        "J"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwPicture_nativeGetWidth) },
    { "nativeGetHeight",
        "("
        "J"
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwPicture_nativeGetHeight) },
    { "nativeDraw",
        "("
        "J"
        "Landroid/graphics/Canvas;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwPicture_nativeDraw) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwPictureSize = arraysize(kMethodsAwPicture);

    if (env->RegisterNatives(AwPicture_clazz(env),
            kMethodsAwPicture,
            kMethodsAwPictureSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwPicture_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwPicture_JNI
