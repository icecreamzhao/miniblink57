// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/PopupTouchHandleDrawable

#ifndef org_chromium_android_webview_PopupTouchHandleDrawable_JNI
#define org_chromium_android_webview_PopupTouchHandleDrawable_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPopupTouchHandleDrawableClassPath[] = "org/chromium/android_webview/PopupTouchHandleDrawable";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PopupTouchHandleDrawable_clazz
    __attribute__((unused))
    = 0;
#define PopupTouchHandleDrawable_clazz(env) base::android::LazyGetClass(env, kPopupTouchHandleDrawableClassPath, &g_PopupTouchHandleDrawable_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    jfloat horizontalPaddingRatio);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_PopupTouchHandleDrawable_nativeInit(JNIEnv*
                                                                           env,
    jobject jcaller,
    jfloat horizontalPaddingRatio)
{
    return Init(env, base::android::JavaParamRef<jobject>(env, jcaller),
        horizontalPaddingRatio);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_setOrientation = 0;
static void Java_PopupTouchHandleDrawable_setOrientation(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper orientation,
    jboolean mirrorVertical,
    jboolean mirrorHorizontal)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "setOrientation",
        "("
        "I"
        "Z"
        "Z"
        ")"
        "V",
        &g_PopupTouchHandleDrawable_setOrientation);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(orientation), mirrorVertical, mirrorHorizontal);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_destroy = 0;
static void Java_PopupTouchHandleDrawable_destroy(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "destroy",
        "("
        ")"
        "V",
        &g_PopupTouchHandleDrawable_destroy);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_show = 0;
static void Java_PopupTouchHandleDrawable_show(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "show",
        "("
        ")"
        "V",
        &g_PopupTouchHandleDrawable_show);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_hide = 0;
static void Java_PopupTouchHandleDrawable_hide(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "hide",
        "("
        ")"
        "V",
        &g_PopupTouchHandleDrawable_hide);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_setOrigin = 0;
static void Java_PopupTouchHandleDrawable_setOrigin(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jfloat originXDip,
    jfloat originYDip)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "setOrigin",
        "("
        "F"
        "F"
        ")"
        "V",
        &g_PopupTouchHandleDrawable_setOrigin);

    env->CallVoidMethod(obj.obj(),
        method_id, originXDip, originYDip);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_setVisible = 0;
static void Java_PopupTouchHandleDrawable_setVisible(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean visible)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "setVisible",
        "("
        "Z"
        ")"
        "V",
        &g_PopupTouchHandleDrawable_setVisible);

    env->CallVoidMethod(obj.obj(),
        method_id, visible);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getOriginXDip = 0;
static jfloat Java_PopupTouchHandleDrawable_getOriginXDip(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "getOriginXDip",
        "("
        ")"
        "F",
        &g_PopupTouchHandleDrawable_getOriginXDip);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getOriginYDip = 0;
static jfloat Java_PopupTouchHandleDrawable_getOriginYDip(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "getOriginYDip",
        "("
        ")"
        "F",
        &g_PopupTouchHandleDrawable_getOriginYDip);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getVisibleWidthDip = 0;
static jfloat Java_PopupTouchHandleDrawable_getVisibleWidthDip(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "getVisibleWidthDip",
        "("
        ")"
        "F",
        &g_PopupTouchHandleDrawable_getVisibleWidthDip);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PopupTouchHandleDrawable_getVisibleHeightDip = 0;
static jfloat Java_PopupTouchHandleDrawable_getVisibleHeightDip(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PopupTouchHandleDrawable_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PopupTouchHandleDrawable_clazz(env),
        "getVisibleHeightDip",
        "("
        ")"
        "F",
        &g_PopupTouchHandleDrawable_getVisibleHeightDip);

    jfloat ret = env->CallFloatMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPopupTouchHandleDrawable[] = {
    { "nativeInit",
        "("
        "F"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_PopupTouchHandleDrawable_nativeInit) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsPopupTouchHandleDrawableSize = arraysize(kMethodsPopupTouchHandleDrawable);

    if (env->RegisterNatives(PopupTouchHandleDrawable_clazz(env),
            kMethodsPopupTouchHandleDrawable,
            kMethodsPopupTouchHandleDrawableSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, PopupTouchHandleDrawable_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_PopupTouchHandleDrawable_JNI
