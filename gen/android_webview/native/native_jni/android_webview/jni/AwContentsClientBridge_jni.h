// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwContentsClientBridge

#ifndef org_chromium_android_webview_AwContentsClientBridge_JNI
#define org_chromium_android_webview_AwContentsClientBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwContentsClientBridgeClassPath[] = "org/chromium/android_webview/AwContentsClientBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwContentsClientBridge_clazz __attribute__((unused))
= 0;
#define AwContentsClientBridge_clazz(env) base::android::LazyGetClass(env, kAwContentsClientBridgeClassPath, &g_AwContentsClientBridge_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContentsClientBridge_nativeProceedSslError(JNIEnv*
                                                                                    env,
    jobject jcaller,
    jlong nativeAwContentsClientBridge,
    jboolean proceed,
    jint id)
{
    AwContentsClientBridge* native = reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "ProceedSslError");
    return native->ProceedSslError(env, base::android::JavaParamRef<jobject>(env, jcaller), proceed, id);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContentsClientBridge_nativeProvideClientCertificateResponse(JNIEnv*
                                                                                                     env,
    jobject jcaller,
    jlong nativeAwContentsClientBridge,
    jint id,
    jobjectArray certChain,
    jobject androidKey)
{
    AwContentsClientBridge* native = reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "ProvideClientCertificateResponse");
    return native->ProvideClientCertificateResponse(env,
        base::android::JavaParamRef<jobject>(env, jcaller), id,
        base::android::JavaParamRef<jobjectArray>(env, certChain),
        base::android::JavaParamRef<jobject>(env, androidKey));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContentsClientBridge_nativeConfirmJsResult(JNIEnv*
                                                                                    env,
    jobject jcaller,
    jlong nativeAwContentsClientBridge,
    jint id,
    jstring prompt)
{
    AwContentsClientBridge* native = reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "ConfirmJsResult");
    return native->ConfirmJsResult(env, base::android::JavaParamRef<jobject>(env, jcaller), id, base::android::JavaParamRef<jstring>(env, prompt));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwContentsClientBridge_nativeCancelJsResult(JNIEnv*
                                                                                   env,
    jobject jcaller,
    jlong nativeAwContentsClientBridge,
    jint id)
{
    AwContentsClientBridge* native = reinterpret_cast<AwContentsClientBridge*>(nativeAwContentsClientBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "CancelJsResult");
    return native->CancelJsResult(env, base::android::JavaParamRef<jobject>(env, jcaller), id);
}

static base::subtle::AtomicWord
    g_AwContentsClientBridge_setNativeContentsClientBridge
    = 0;
static void Java_AwContentsClientBridge_setNativeContentsClientBridge(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj, jlong nativeContentsClientBridge)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "setNativeContentsClientBridge",
        "("
        "J"
        ")"
        "V",
        &g_AwContentsClientBridge_setNativeContentsClientBridge);

    env->CallVoidMethod(obj.obj(),
        method_id, nativeContentsClientBridge);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_allowCertificateError = 0;
static jboolean Java_AwContentsClientBridge_allowCertificateError(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper certError,
    const base::android::JavaRefOrBare<jbyteArray>& derBytes,
    const base::android::JavaRefOrBare<jstring>& url,
    JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "allowCertificateError",
        "("
        "I"
        "[B"
        "Ljava/lang/String;"
        "I"
        ")"
        "Z",
        &g_AwContentsClientBridge_allowCertificateError);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(certError), derBytes.obj(), url.obj(),
        as_jint(id));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwContentsClientBridge_selectClientCertificate
    = 0;
static void Java_AwContentsClientBridge_selectClientCertificate(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper id,
    const base::android::JavaRefOrBare<jobjectArray>& keyTypes,
    const base::android::JavaRefOrBare<jobjectArray>& encodedPrincipals,
    const base::android::JavaRefOrBare<jstring>& host,
    JniIntWrapper port)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "selectClientCertificate",
        "("
        "I"
        "[Ljava/lang/String;"
        "[[B"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_AwContentsClientBridge_selectClientCertificate);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(id), keyTypes.obj(), encodedPrincipals.obj(),
        host.obj(), as_jint(port));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_handleJsAlert = 0;
static void Java_AwContentsClientBridge_handleJsAlert(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& message,
    JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "handleJsAlert",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_AwContentsClientBridge_handleJsAlert);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), message.obj(), as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_handleJsConfirm = 0;
static void Java_AwContentsClientBridge_handleJsConfirm(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& message,
    JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "handleJsConfirm",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_AwContentsClientBridge_handleJsConfirm);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), message.obj(), as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_handleJsPrompt = 0;
static void Java_AwContentsClientBridge_handleJsPrompt(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& message,
    const base::android::JavaRefOrBare<jstring>& defaultValue,
    JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "handleJsPrompt",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_AwContentsClientBridge_handleJsPrompt);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), message.obj(), defaultValue.obj(), as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_handleJsBeforeUnload = 0;
static void Java_AwContentsClientBridge_handleJsBeforeUnload(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& message,
    JniIntWrapper id)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "handleJsBeforeUnload",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        ")"
        "V",
        &g_AwContentsClientBridge_handleJsBeforeUnload);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), message.obj(), as_jint(id));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_newDownload = 0;
static void Java_AwContentsClientBridge_newDownload(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& userAgent,
    const base::android::JavaRefOrBare<jstring>& contentDisposition,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    jlong contentLength)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "newDownload",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "J"
        ")"
        "V",
        &g_AwContentsClientBridge_newDownload);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), userAgent.obj(), contentDisposition.obj(),
        mimeType.obj(), contentLength);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_newLoginRequest = 0;
static void Java_AwContentsClientBridge_newLoginRequest(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& realm,
    const base::android::JavaRefOrBare<jstring>& account,
    const base::android::JavaRefOrBare<jstring>& args)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "newLoginRequest",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AwContentsClientBridge_newLoginRequest);

    env->CallVoidMethod(obj.obj(),
        method_id, realm.obj(), account.obj(), args.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_onReceivedError = 0;
static void Java_AwContentsClientBridge_onReceivedError(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isMainFrame,
    jboolean hasUserGesture,
    const base::android::JavaRefOrBare<jstring>& method,
    const base::android::JavaRefOrBare<jobjectArray>& requestHeaderNames,
    const base::android::JavaRefOrBare<jobjectArray>& requestHeaderValues,
    JniIntWrapper errorCode,
    const base::android::JavaRefOrBare<jstring>& description)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "onReceivedError",
        "("
        "Ljava/lang/String;"
        "Z"
        "Z"
        "Ljava/lang/String;"
        "[Ljava/lang/String;"
        "[Ljava/lang/String;"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_AwContentsClientBridge_onReceivedError);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), isMainFrame, hasUserGesture, method.obj(),
        requestHeaderNames.obj(), requestHeaderValues.obj(),
        as_jint(errorCode), description.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwContentsClientBridge_onReceivedHttpError = 0;
static void Java_AwContentsClientBridge_onReceivedHttpError(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean isMainFrame,
    jboolean hasUserGesture,
    const base::android::JavaRefOrBare<jstring>& method,
    const base::android::JavaRefOrBare<jobjectArray>& requestHeaderNames,
    const base::android::JavaRefOrBare<jobjectArray>& requestHeaderValues,
    const base::android::JavaRefOrBare<jstring>& mimeType,
    const base::android::JavaRefOrBare<jstring>& encoding,
    JniIntWrapper statusCode,
    const base::android::JavaRefOrBare<jstring>& reasonPhrase,
    const base::android::JavaRefOrBare<jobjectArray>& responseHeaderNames,
    const base::android::JavaRefOrBare<jobjectArray>& responseHeaderValues)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "onReceivedHttpError",
        "("
        "Ljava/lang/String;"
        "Z"
        "Z"
        "Ljava/lang/String;"
        "[Ljava/lang/String;"
        "[Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "I"
        "Ljava/lang/String;"
        "[Ljava/lang/String;"
        "[Ljava/lang/String;"
        ")"
        "V",
        &g_AwContentsClientBridge_onReceivedHttpError);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), isMainFrame, hasUserGesture, method.obj(),
        requestHeaderNames.obj(), requestHeaderValues.obj(),
        mimeType.obj(), encoding.obj(), as_jint(statusCode),
        reasonPhrase.obj(), responseHeaderNames.obj(),
        responseHeaderValues.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_AwContentsClientBridge_shouldOverrideUrlLoading
    = 0;
static jboolean Java_AwContentsClientBridge_shouldOverrideUrlLoading(JNIEnv*
                                                                         env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    jboolean hasUserGesture,
    jboolean isRedirect,
    jboolean isMainFrame)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwContentsClientBridge_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwContentsClientBridge_clazz(env),
        "shouldOverrideUrlLoading",
        "("
        "Ljava/lang/String;"
        "Z"
        "Z"
        "Z"
        ")"
        "Z",
        &g_AwContentsClientBridge_shouldOverrideUrlLoading);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, url.obj(), hasUserGesture, isRedirect, isMainFrame);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwContentsClientBridge[] = {
    { "nativeProceedSslError",
        "("
        "J"
        "Z"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContentsClientBridge_nativeProceedSslError) },
    { "nativeProvideClientCertificateResponse",
        "("
        "J"
        "I"
        "[[B"
        "Ljava/security/PrivateKey;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContentsClientBridge_nativeProvideClientCertificateResponse) },
    { "nativeConfirmJsResult",
        "("
        "J"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContentsClientBridge_nativeConfirmJsResult) },
    { "nativeCancelJsResult",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwContentsClientBridge_nativeCancelJsResult) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwContentsClientBridgeSize = arraysize(kMethodsAwContentsClientBridge);

    if (env->RegisterNatives(AwContentsClientBridge_clazz(env),
            kMethodsAwContentsClientBridge,
            kMethodsAwContentsClientBridgeSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwContentsClientBridge_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwContentsClientBridge_JNI
