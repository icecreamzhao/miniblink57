// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwTokenBindingManager

#ifndef org_chromium_android_webview_AwTokenBindingManager_JNI
#define org_chromium_android_webview_AwTokenBindingManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwTokenBindingManagerClassPath[] = "org/chromium/android_webview/AwTokenBindingManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwTokenBindingManager_clazz __attribute__((unused)) = 0;
#define AwTokenBindingManager_clazz(env) base::android::LazyGetClass(env, kAwTokenBindingManagerClassPath, &g_AwTokenBindingManager_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static void EnableTokenBinding(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwTokenBindingManager_nativeEnableTokenBinding(JNIEnv*
                                                                                      env,
    jobject jcaller)
{
    return EnableTokenBinding(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void GetTokenBindingKey(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& host,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwTokenBindingManager_nativeGetTokenBindingKey(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jstring host,
    jobject callback)
{
    return GetTokenBindingKey(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, host),
        base::android::JavaParamRef<jobject>(env, callback));
}

static void DeleteTokenBindingKey(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& host,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwTokenBindingManager_nativeDeleteTokenBindingKey(JNIEnv*
                                                                                         env,
    jobject jcaller,
    jstring host,
    jobject callback)
{
    return DeleteTokenBindingKey(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, host),
        base::android::JavaParamRef<jobject>(env, callback));
}

static void DeleteAllTokenBindingKeys(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwTokenBindingManager_nativeDeleteAllTokenBindingKeys(JNIEnv*
                                                                                             env,
    jobject jcaller,
    jobject callback)
{
    return DeleteAllTokenBindingKeys(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, callback));
}

static base::subtle::AtomicWord g_AwTokenBindingManager_onKeyReady = 0;
static void Java_AwTokenBindingManager_onKeyReady(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& callback,
    const base::android::JavaRefOrBare<jbyteArray>& privateKeyBytes,
    const base::android::JavaRefOrBare<jbyteArray>& publicKeyBytes)
{
    CHECK_CLAZZ(env, AwTokenBindingManager_clazz(env),
        AwTokenBindingManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AwTokenBindingManager_clazz(env),
        "onKeyReady",
        "("
        "Landroid/webkit/ValueCallback;"
        "[B"
        "[B"
        ")"
        "V",
        &g_AwTokenBindingManager_onKeyReady);

    env->CallStaticVoidMethod(AwTokenBindingManager_clazz(env),
        method_id, callback.obj(), privateKeyBytes.obj(),
        publicKeyBytes.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwTokenBindingManager_onDeletionComplete = 0;
static void Java_AwTokenBindingManager_onDeletionComplete(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& callback)
{
    CHECK_CLAZZ(env, AwTokenBindingManager_clazz(env),
        AwTokenBindingManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AwTokenBindingManager_clazz(env),
        "onDeletionComplete",
        "("
        "Landroid/webkit/ValueCallback;"
        ")"
        "V",
        &g_AwTokenBindingManager_onDeletionComplete);

    env->CallStaticVoidMethod(AwTokenBindingManager_clazz(env),
        method_id, callback.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwTokenBindingManager[] = {
    { "nativeEnableTokenBinding",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwTokenBindingManager_nativeEnableTokenBinding) },
    { "nativeGetTokenBindingKey",
        "("
        "Ljava/lang/String;"
        "Landroid/webkit/ValueCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwTokenBindingManager_nativeGetTokenBindingKey) },
    { "nativeDeleteTokenBindingKey",
        "("
        "Ljava/lang/String;"
        "Landroid/webkit/ValueCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwTokenBindingManager_nativeDeleteTokenBindingKey) },
    { "nativeDeleteAllTokenBindingKeys",
        "("
        "Landroid/webkit/ValueCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwTokenBindingManager_nativeDeleteAllTokenBindingKeys) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwTokenBindingManagerSize = arraysize(kMethodsAwTokenBindingManager);

    if (env->RegisterNatives(AwTokenBindingManager_clazz(env),
            kMethodsAwTokenBindingManager,
            kMethodsAwTokenBindingManagerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwTokenBindingManager_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwTokenBindingManager_JNI
