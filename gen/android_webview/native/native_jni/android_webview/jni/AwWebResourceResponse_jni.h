// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwWebResourceResponse

#ifndef org_chromium_android_webview_AwWebResourceResponse_JNI
#define org_chromium_android_webview_AwWebResourceResponse_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwWebResourceResponseClassPath[] = "org/chromium/android_webview/AwWebResourceResponse";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwWebResourceResponse_clazz __attribute__((unused)) = 0;
#define AwWebResourceResponse_clazz(env) base::android::LazyGetClass(env, kAwWebResourceResponseClassPath, &g_AwWebResourceResponse_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AwWebResourceResponse_getMimeType = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwWebResourceResponse_getMimeType(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getMimeType",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwWebResourceResponse_getMimeType);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwWebResourceResponse_getCharset = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwWebResourceResponse_getCharset(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getCharset",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwWebResourceResponse_getCharset);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwWebResourceResponse_getData = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AwWebResourceResponse_getData(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getData",
        "("
        ")"
        "Ljava/io/InputStream;",
        &g_AwWebResourceResponse_getData);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AwWebResourceResponse_getStatusCode = 0;
static jint Java_AwWebResourceResponse_getStatusCode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getStatusCode",
        "("
        ")"
        "I",
        &g_AwWebResourceResponse_getStatusCode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwWebResourceResponse_getReasonPhrase = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_AwWebResourceResponse_getReasonPhrase(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getReasonPhrase",
        "("
        ")"
        "Ljava/lang/String;",
        &g_AwWebResourceResponse_getReasonPhrase);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwWebResourceResponse_getResponseHeaderNames = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_AwWebResourceResponse_getResponseHeaderNames(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getResponseHeaderNames",
        "("
        ")"
        "[Ljava/lang/String;",
        &g_AwWebResourceResponse_getResponseHeaderNames);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_AwWebResourceResponse_getResponseHeaderValues
    = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_AwWebResourceResponse_getResponseHeaderValues(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebResourceResponse_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebResourceResponse_clazz(env),
        "getResponseHeaderValues",
        "("
        ")"
        "[Ljava/lang/String;",
        &g_AwWebResourceResponse_getResponseHeaderValues);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace android_webview

#endif // org_chromium_android_webview_AwWebResourceResponse_JNI
