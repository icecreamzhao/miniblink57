// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwWebContentsDelegate

#ifndef org_chromium_android_webview_AwWebContentsDelegate_JNI
#define org_chromium_android_webview_AwWebContentsDelegate_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwWebContentsDelegateClassPath[] = "org/chromium/android_webview/AwWebContentsDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwWebContentsDelegate_clazz __attribute__((unused)) = 0;
#define AwWebContentsDelegate_clazz(env) base::android::LazyGetClass(env, kAwWebContentsDelegateClassPath, &g_AwWebContentsDelegate_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static void FilesSelectedInChooser(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jint processId,
    jint renderId,
    jint modeFlags,
    const base::android::JavaParamRef<jobjectArray>& filePath,
    const base::android::JavaParamRef<jobjectArray>& displayName);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwWebContentsDelegate_nativeFilesSelectedInChooser(JNIEnv*
                                                                                          env,
    jclass jcaller,
    jint processId,
    jint renderId,
    jint modeFlags,
    jobjectArray filePath,
    jobjectArray displayName)
{
    return FilesSelectedInChooser(env, base::android::JavaParamRef<jclass>(env, jcaller), processId, renderId, modeFlags,
        base::android::JavaParamRef<jobjectArray>(env, filePath),
        base::android::JavaParamRef<jobjectArray>(env, displayName));
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_runFileChooser = 0;
static void Java_AwWebContentsDelegate_runFileChooser(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper processId,
    JniIntWrapper renderId,
    JniIntWrapper modeFlags,
    const base::android::JavaRefOrBare<jstring>& acceptTypes,
    const base::android::JavaRefOrBare<jstring>& title,
    const base::android::JavaRefOrBare<jstring>& defaultFilename,
    jboolean capture)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebContentsDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebContentsDelegate_clazz(env),
        "runFileChooser",
        "("
        "I"
        "I"
        "I"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Z"
        ")"
        "V",
        &g_AwWebContentsDelegate_runFileChooser);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(processId), as_jint(renderId), as_jint(modeFlags),
        acceptTypes.obj(), title.obj(), defaultFilename.obj(), capture);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_addNewContents = 0;
static jboolean Java_AwWebContentsDelegate_addNewContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean isDialog,
    jboolean isUserGesture)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebContentsDelegate_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebContentsDelegate_clazz(env),
        "addNewContents",
        "("
        "Z"
        "Z"
        ")"
        "Z",
        &g_AwWebContentsDelegate_addNewContents);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, isDialog, isUserGesture);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_closeContents = 0;
static void Java_AwWebContentsDelegate_closeContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebContentsDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebContentsDelegate_clazz(env),
        "closeContents",
        "("
        ")"
        "V",
        &g_AwWebContentsDelegate_closeContents);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_activateContents = 0;
static void Java_AwWebContentsDelegate_activateContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebContentsDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebContentsDelegate_clazz(env),
        "activateContents",
        "("
        ")"
        "V",
        &g_AwWebContentsDelegate_activateContents);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_navigationStateChanged = 0;
static void Java_AwWebContentsDelegate_navigationStateChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper flags)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebContentsDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebContentsDelegate_clazz(env),
        "navigationStateChanged",
        "("
        "I"
        ")"
        "V",
        &g_AwWebContentsDelegate_navigationStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(flags));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_loadingStateChanged = 0;
static void Java_AwWebContentsDelegate_loadingStateChanged(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwWebContentsDelegate_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwWebContentsDelegate_clazz(env),
        "loadingStateChanged",
        "("
        ")"
        "V",
        &g_AwWebContentsDelegate_loadingStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwWebContentsDelegate[] = {
    { "nativeFilesSelectedInChooser",
        "("
        "I"
        "I"
        "I"
        "[Ljava/lang/String;"
        "[Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwWebContentsDelegate_nativeFilesSelectedInChooser) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwWebContentsDelegateSize = arraysize(kMethodsAwWebContentsDelegate);

    if (env->RegisterNatives(AwWebContentsDelegate_clazz(env),
            kMethodsAwWebContentsDelegate,
            kMethodsAwWebContentsDelegateSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwWebContentsDelegate_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwWebContentsDelegate_JNI
