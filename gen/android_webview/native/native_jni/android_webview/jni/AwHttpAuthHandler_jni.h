// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwHttpAuthHandler

#ifndef org_chromium_android_webview_AwHttpAuthHandler_JNI
#define org_chromium_android_webview_AwHttpAuthHandler_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwHttpAuthHandlerClassPath[] = "org/chromium/android_webview/AwHttpAuthHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwHttpAuthHandler_clazz __attribute__((unused)) = 0;
#define AwHttpAuthHandler_clazz(env) base::android::LazyGetClass(env, kAwHttpAuthHandlerClassPath, &g_AwHttpAuthHandler_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwHttpAuthHandler_nativeProceed(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwHttpAuthHandler,
    jstring username,
    jstring password)
{
    AwHttpAuthHandler* native = reinterpret_cast<AwHttpAuthHandler*>(nativeAwHttpAuthHandler);
    CHECK_NATIVE_PTR(env, jcaller, native, "Proceed");
    return native->Proceed(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, username),
        base::android::JavaParamRef<jstring>(env, password));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwHttpAuthHandler_nativeCancel(JNIEnv*
                                                                      env,
    jobject jcaller,
    jlong nativeAwHttpAuthHandler)
{
    AwHttpAuthHandler* native = reinterpret_cast<AwHttpAuthHandler*>(nativeAwHttpAuthHandler);
    CHECK_NATIVE_PTR(env, jcaller, native, "Cancel");
    return native->Cancel(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_AwHttpAuthHandler_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_AwHttpAuthHandler_create(JNIEnv* env, jlong nativeAwAuthHandler,
    jboolean firstAttempt)
{
    CHECK_CLAZZ(env, AwHttpAuthHandler_clazz(env),
        AwHttpAuthHandler_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AwHttpAuthHandler_clazz(env),
        "create",
        "("
        "J"
        "Z"
        ")"
        "Lorg/chromium/android_webview/AwHttpAuthHandler;",
        &g_AwHttpAuthHandler_create);

    jobject ret = env->CallStaticObjectMethod(AwHttpAuthHandler_clazz(env),
        method_id, nativeAwAuthHandler, firstAttempt);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AwHttpAuthHandler_handlerDestroyed = 0;
static void Java_AwHttpAuthHandler_handlerDestroyed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwHttpAuthHandler_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwHttpAuthHandler_clazz(env),
        "handlerDestroyed",
        "("
        ")"
        "V",
        &g_AwHttpAuthHandler_handlerDestroyed);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwHttpAuthHandler[] = {
    { "nativeProceed",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwHttpAuthHandler_nativeProceed) },
    { "nativeCancel",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwHttpAuthHandler_nativeCancel) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwHttpAuthHandlerSize = arraysize(kMethodsAwHttpAuthHandler);

    if (env->RegisterNatives(AwHttpAuthHandler_clazz(env),
            kMethodsAwHttpAuthHandler,
            kMethodsAwHttpAuthHandlerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwHttpAuthHandler_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwHttpAuthHandler_JNI
