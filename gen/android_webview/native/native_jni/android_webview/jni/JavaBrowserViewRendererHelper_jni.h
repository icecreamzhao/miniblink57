// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/JavaBrowserViewRendererHelper

#ifndef org_chromium_android_webview_JavaBrowserViewRendererHelper_JNI
#define org_chromium_android_webview_JavaBrowserViewRendererHelper_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kJavaBrowserViewRendererHelperClassPath[] = "org/chromium/android_webview/JavaBrowserViewRendererHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_JavaBrowserViewRendererHelper_clazz
    __attribute__((unused))
    = 0;
#define JavaBrowserViewRendererHelper_clazz(env) base::android::LazyGetClass(env, kJavaBrowserViewRendererHelperClassPath, &g_JavaBrowserViewRendererHelper_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord g_JavaBrowserViewRendererHelper_createBitmap = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_JavaBrowserViewRendererHelper_createBitmap(JNIEnv* env, JniIntWrapper width,
    JniIntWrapper height,
    const base::android::JavaRefOrBare<jobject>& canvas)
{
    CHECK_CLAZZ(env, JavaBrowserViewRendererHelper_clazz(env),
        JavaBrowserViewRendererHelper_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, JavaBrowserViewRendererHelper_clazz(env),
        "createBitmap",
        "("
        "I"
        "I"
        "Landroid/graphics/Canvas;"
        ")"
        "Landroid/graphics/Bitmap;",
        &g_JavaBrowserViewRendererHelper_createBitmap);

    jobject ret = env->CallStaticObjectMethod(JavaBrowserViewRendererHelper_clazz(env),
        method_id, as_jint(width), as_jint(height), canvas.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas
    = 0;
static void Java_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& bitmap,
    const base::android::JavaRefOrBare<jobject>& canvas,
    JniIntWrapper scrollX,
    JniIntWrapper scrollY)
{
    CHECK_CLAZZ(env, JavaBrowserViewRendererHelper_clazz(env),
        JavaBrowserViewRendererHelper_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, JavaBrowserViewRendererHelper_clazz(env),
        "drawBitmapIntoCanvas",
        "("
        "Landroid/graphics/Bitmap;"
        "Landroid/graphics/Canvas;"
        "I"
        "I"
        ")"
        "V",
        &g_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas);

    env->CallStaticVoidMethod(JavaBrowserViewRendererHelper_clazz(env),
        method_id, bitmap.obj(), canvas.obj(), as_jint(scrollX),
        as_jint(scrollY));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

} // namespace android_webview

#endif // org_chromium_android_webview_JavaBrowserViewRendererHelper_JNI
