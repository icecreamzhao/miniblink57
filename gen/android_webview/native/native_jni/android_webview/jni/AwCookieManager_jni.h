// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwCookieManager

#ifndef org_chromium_android_webview_AwCookieManager_JNI
#define org_chromium_android_webview_AwCookieManager_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwCookieManagerClassPath[] = "org/chromium/android_webview/AwCookieManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwCookieManager_clazz __attribute__((unused)) = 0;
#define AwCookieManager_clazz(env) base::android::LazyGetClass(env, kAwCookieManagerClassPath, &g_AwCookieManager_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static void SetShouldAcceptCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    jboolean accept);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeSetShouldAcceptCookies(JNIEnv*
                                                                                    env,
    jobject jcaller,
    jboolean accept)
{
    return SetShouldAcceptCookies(env, base::android::JavaParamRef<jobject>(env, jcaller), accept);
}

static jboolean GetShouldAcceptCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwCookieManager_nativeGetShouldAcceptCookies(JNIEnv*
                                                                                    env,
    jobject jcaller)
{
    return GetShouldAcceptCookies(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void SetCookie(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& value,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeSetCookie(JNIEnv*
                                                                       env,
    jobject jcaller,
    jstring url,
    jstring value,
    jobject callback)
{
    return SetCookie(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, value),
        base::android::JavaParamRef<jobject>(env, callback));
}

static void SetCookieSync(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& value);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeSetCookieSync(JNIEnv*
                                                                           env,
    jobject jcaller,
    jstring url,
    jstring value)
{
    return SetCookieSync(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url),
        base::android::JavaParamRef<jstring>(env, value));
}

static base::android::ScopedJavaLocalRef<jstring> GetCookie(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jstring
Java_org_chromium_android_1webview_AwCookieManager_nativeGetCookie(JNIEnv*
                                                                       env,
    jobject jcaller,
    jstring url)
{
    return GetCookie(env, base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, url))
        .Release();
}

static void RemoveSessionCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveSessionCookies(JNIEnv*
                                                                                  env,
    jobject jcaller,
    jobject callback)
{
    return RemoveSessionCookies(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, callback));
}

static void RemoveSessionCookiesSync(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveSessionCookiesSync(JNIEnv*
                                                                                      env,
    jobject jcaller)
{
    return RemoveSessionCookiesSync(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void RemoveAllCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveAllCookies(JNIEnv*
                                                                              env,
    jobject jcaller,
    jobject callback)
{
    return RemoveAllCookies(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jobject>(env, callback));
}

static void RemoveAllCookiesSync(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveAllCookiesSync(JNIEnv*
                                                                                  env,
    jobject jcaller)
{
    return RemoveAllCookiesSync(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void RemoveExpiredCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveExpiredCookies(JNIEnv*
                                                                                  env,
    jobject jcaller)
{
    return RemoveExpiredCookies(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void FlushCookieStore(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeFlushCookieStore(JNIEnv*
                                                                              env,
    jobject jcaller)
{
    return FlushCookieStore(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static jboolean HasCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwCookieManager_nativeHasCookies(JNIEnv*
                                                                        env,
    jobject jcaller)
{
    return HasCookies(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static jboolean AllowFileSchemeCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwCookieManager_nativeAllowFileSchemeCookies(JNIEnv*
                                                                                    env,
    jobject jcaller)
{
    return AllowFileSchemeCookies(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void SetAcceptFileSchemeCookies(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    jboolean accept);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwCookieManager_nativeSetAcceptFileSchemeCookies(JNIEnv*
                                                                                        env,
    jobject jcaller,
    jboolean accept)
{
    return SetAcceptFileSchemeCookies(env,
        base::android::JavaParamRef<jobject>(env, jcaller), accept);
}

static base::subtle::AtomicWord g_AwCookieManager_invokeBooleanCookieCallback = 0;
static void Java_AwCookieManager_invokeBooleanCookieCallback(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& callback,
    jboolean result)
{
    CHECK_CLAZZ(env, AwCookieManager_clazz(env),
        AwCookieManager_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, AwCookieManager_clazz(env),
        "invokeBooleanCookieCallback",
        "("
        "Lorg/chromium/android_webview/AwCookieManager$CookieCallback;"
        "Z"
        ")"
        "V",
        &g_AwCookieManager_invokeBooleanCookieCallback);

    env->CallStaticVoidMethod(AwCookieManager_clazz(env),
        method_id, callback.obj(), result);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwCookieManager[] = {
    { "nativeSetShouldAcceptCookies",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeSetShouldAcceptCookies) },
    { "nativeGetShouldAcceptCookies",
        "("
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeGetShouldAcceptCookies) },
    { "nativeSetCookie",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Lorg/chromium/android_webview/AwCookieManager$CookieCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeSetCookie) },
    { "nativeSetCookieSync",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeSetCookieSync) },
    { "nativeGetCookie",
        "("
        "Ljava/lang/String;"
        ")"
        "Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeGetCookie) },
    { "nativeRemoveSessionCookies",
        "("
        "Lorg/chromium/android_webview/AwCookieManager$CookieCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveSessionCookies) },
    { "nativeRemoveSessionCookiesSync",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveSessionCookiesSync) },
    { "nativeRemoveAllCookies",
        "("
        "Lorg/chromium/android_webview/AwCookieManager$CookieCallback;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveAllCookies) },
    { "nativeRemoveAllCookiesSync",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveAllCookiesSync) },
    { "nativeRemoveExpiredCookies",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeRemoveExpiredCookies) },
    { "nativeFlushCookieStore",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeFlushCookieStore) },
    { "nativeHasCookies",
        "("
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeHasCookies) },
    { "nativeAllowFileSchemeCookies",
        "("
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeAllowFileSchemeCookies) },
    { "nativeSetAcceptFileSchemeCookies",
        "("
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwCookieManager_nativeSetAcceptFileSchemeCookies) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwCookieManagerSize = arraysize(kMethodsAwCookieManager);

    if (env->RegisterNatives(AwCookieManager_clazz(env),
            kMethodsAwCookieManager,
            kMethodsAwCookieManagerSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwCookieManager_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwCookieManager_JNI
