// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/InputStreamUtil

#ifndef org_chromium_android_webview_InputStreamUtil_JNI
#define org_chromium_android_webview_InputStreamUtil_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kInputStreamUtilClassPath[] = "org/chromium/android_webview/InputStreamUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_InputStreamUtil_clazz __attribute__((unused)) = 0;
#define InputStreamUtil_clazz(env) base::android::LazyGetClass(env, kInputStreamUtilClassPath, &g_InputStreamUtil_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord g_InputStreamUtil_close = 0;
static void Java_InputStreamUtil_close(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& stream)
{
    CHECK_CLAZZ(env, InputStreamUtil_clazz(env),
        InputStreamUtil_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, InputStreamUtil_clazz(env),
        "close",
        "("
        "Ljava/io/InputStream;"
        ")"
        "V",
        &g_InputStreamUtil_close);

    env->CallStaticVoidMethod(InputStreamUtil_clazz(env),
        method_id, stream.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_InputStreamUtil_available = 0;
static jint Java_InputStreamUtil_available(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& stream)
{
    CHECK_CLAZZ(env, InputStreamUtil_clazz(env),
        InputStreamUtil_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, InputStreamUtil_clazz(env),
        "available",
        "("
        "Ljava/io/InputStream;"
        ")"
        "I",
        &g_InputStreamUtil_available);

    jint ret = env->CallStaticIntMethod(InputStreamUtil_clazz(env),
        method_id, stream.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_InputStreamUtil_read = 0;
static jint Java_InputStreamUtil_read(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& stream,
    const base::android::JavaRefOrBare<jbyteArray>& b,
    JniIntWrapper off,
    JniIntWrapper len)
{
    CHECK_CLAZZ(env, InputStreamUtil_clazz(env),
        InputStreamUtil_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, InputStreamUtil_clazz(env),
        "read",
        "("
        "Ljava/io/InputStream;"
        "[B"
        "I"
        "I"
        ")"
        "I",
        &g_InputStreamUtil_read);

    jint ret = env->CallStaticIntMethod(InputStreamUtil_clazz(env),
        method_id, stream.obj(), b.obj(), as_jint(off), as_jint(len));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_InputStreamUtil_skip = 0;
static jlong Java_InputStreamUtil_skip(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& stream,
    jlong n)
{
    CHECK_CLAZZ(env, InputStreamUtil_clazz(env),
        InputStreamUtil_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, InputStreamUtil_clazz(env),
        "skip",
        "("
        "Ljava/io/InputStream;"
        "J"
        ")"
        "J",
        &g_InputStreamUtil_skip);

    jlong ret = env->CallStaticLongMethod(InputStreamUtil_clazz(env),
        method_id, stream.obj(), n);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

} // namespace android_webview

#endif // org_chromium_android_webview_InputStreamUtil_JNI
