// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwGLFunctor

#ifndef org_chromium_android_webview_AwGLFunctor_JNI
#define org_chromium_android_webview_AwGLFunctor_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwGLFunctorClassPath[] = "org/chromium/android_webview/AwGLFunctor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwGLFunctor_clazz __attribute__((unused)) = 0;
#define AwGLFunctor_clazz(env) base::android::LazyGetClass(env, kAwGLFunctorClassPath, &g_AwGLFunctor_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwGLFunctor_nativeDeleteHardwareRenderer(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativeAwGLFunctor)
{
    AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
    CHECK_NATIVE_PTR(env, jcaller, native, "DeleteHardwareRenderer");
    return native->DeleteHardwareRenderer(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwGLFunctor_nativeGetAwDrawGLViewContext(JNIEnv*
                                                                                env,
    jobject jcaller,
    jlong nativeAwGLFunctor)
{
    AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
    CHECK_NATIVE_PTR(env, jcaller, native, "GetAwDrawGLViewContext", 0);
    return native->GetAwDrawGLViewContext(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static jlong GetAwDrawGLFunction(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwGLFunctor_nativeGetAwDrawGLFunction(JNIEnv*
                                                                             env,
    jclass jcaller)
{
    return GetAwDrawGLFunction(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwGLFunctor_nativeDestroy(JNIEnv* env,
    jobject jcaller,
    jlong nativeAwGLFunctor)
{
    AwGLFunctor* native = reinterpret_cast<AwGLFunctor*>(nativeAwGLFunctor);
    CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
    return native->Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static jlong Create(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& javaProxy);

JNI_GENERATOR_EXPORT jlong
Java_org_chromium_android_1webview_AwGLFunctor_nativeCreate(JNIEnv* env,
    jclass jcaller,
    jobject javaProxy)
{
    return Create(env, base::android::JavaParamRef<jclass>(env, jcaller),
        base::android::JavaParamRef<jobject>(env, javaProxy));
}

static jint GetNativeInstanceCount(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jint
Java_org_chromium_android_1webview_AwGLFunctor_nativeGetNativeInstanceCount(JNIEnv*
                                                                                env,
    jclass jcaller)
{
    return GetNativeInstanceCount(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::subtle::AtomicWord g_AwGLFunctor_requestInvokeGL = 0;
static jboolean Java_AwGLFunctor_requestInvokeGL(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean waitForCompletion)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwGLFunctor_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwGLFunctor_clazz(env),
        "requestInvokeGL",
        "("
        "Z"
        ")"
        "Z",
        &g_AwGLFunctor_requestInvokeGL);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, waitForCompletion);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwGLFunctor_detachFunctorFromView = 0;
static void Java_AwGLFunctor_detachFunctorFromView(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwGLFunctor_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwGLFunctor_clazz(env),
        "detachFunctorFromView",
        "("
        ")"
        "V",
        &g_AwGLFunctor_detachFunctorFromView);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwGLFunctor[] = {
    { "nativeDeleteHardwareRenderer",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwGLFunctor_nativeDeleteHardwareRenderer) },
    { "nativeGetAwDrawGLViewContext",
        "("
        "J"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwGLFunctor_nativeGetAwDrawGLViewContext) },
    { "nativeGetAwDrawGLFunction",
        "("
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwGLFunctor_nativeGetAwDrawGLFunction) },
    { "nativeDestroy",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwGLFunctor_nativeDestroy) },
    { "nativeCreate",
        "("
        "Lorg/chromium/android_webview/AwGLFunctor;"
        ")"
        "J",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwGLFunctor_nativeCreate) },
    { "nativeGetNativeInstanceCount",
        "("
        ")"
        "I",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwGLFunctor_nativeGetNativeInstanceCount) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwGLFunctorSize = arraysize(kMethodsAwGLFunctor);

    if (env->RegisterNatives(AwGLFunctor_clazz(env),
            kMethodsAwGLFunctor,
            kMethodsAwGLFunctorSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwGLFunctor_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwGLFunctor_JNI
