// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwPdfExporter

#ifndef org_chromium_android_webview_AwPdfExporter_JNI
#define org_chromium_android_webview_AwPdfExporter_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwPdfExporterClassPath[] = "org/chromium/android_webview/AwPdfExporter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwPdfExporter_clazz __attribute__((unused)) = 0;
#define AwPdfExporter_clazz(env) base::android::LazyGetClass(env, kAwPdfExporterClassPath, &g_AwPdfExporter_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwPdfExporter_nativeExportToPdf(JNIEnv*
                                                                       env,
    jobject jcaller,
    jlong nativeAwPdfExporter,
    jint fd,
    jobject cancellationSignal)
{
    AwPdfExporter* native = reinterpret_cast<AwPdfExporter*>(nativeAwPdfExporter);
    CHECK_NATIVE_PTR(env, jcaller, native, "ExportToPdf");
    return native->ExportToPdf(env, base::android::JavaParamRef<jobject>(env, jcaller), fd, base::android::JavaParamRef<jobject>(env, cancellationSignal));
}

static base::subtle::AtomicWord g_AwPdfExporter_setNativeAwPdfExporter = 0;
static void Java_AwPdfExporter_setNativeAwPdfExporter(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativePdfExporter)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "setNativeAwPdfExporter",
        "("
        "J"
        ")"
        "V",
        &g_AwPdfExporter_setNativeAwPdfExporter);

    env->CallVoidMethod(obj.obj(),
        method_id, nativePdfExporter);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwPdfExporter_didExportPdf = 0;
static void Java_AwPdfExporter_didExportPdf(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean success)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "didExportPdf",
        "("
        "Z"
        ")"
        "V",
        &g_AwPdfExporter_didExportPdf);

    env->CallVoidMethod(obj.obj(),
        method_id, success);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_AwPdfExporter_getPageWidth = 0;
static jint Java_AwPdfExporter_getPageWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getPageWidth",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getPageWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getPageHeight = 0;
static jint Java_AwPdfExporter_getPageHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getPageHeight",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getPageHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getDpi = 0;
static jint Java_AwPdfExporter_getDpi(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getDpi",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getDpi);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getLeftMargin = 0;
static jint Java_AwPdfExporter_getLeftMargin(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getLeftMargin",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getLeftMargin);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getRightMargin = 0;
static jint Java_AwPdfExporter_getRightMargin(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getRightMargin",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getRightMargin);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getTopMargin = 0;
static jint Java_AwPdfExporter_getTopMargin(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getTopMargin",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getTopMargin);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getBottomMargin = 0;
static jint Java_AwPdfExporter_getBottomMargin(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        AwPdfExporter_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, AwPdfExporter_clazz(env),
        "getBottomMargin",
        "("
        ")"
        "I",
        &g_AwPdfExporter_getBottomMargin);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwPdfExporter[] = {
    { "nativeExportToPdf",
        "("
        "J"
        "I"
        "Landroid/os/CancellationSignal;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwPdfExporter_nativeExportToPdf) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwPdfExporterSize = arraysize(kMethodsAwPdfExporter);

    if (env->RegisterNatives(AwPdfExporter_clazz(env),
            kMethodsAwPdfExporter,
            kMethodsAwPdfExporterSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwPdfExporter_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwPdfExporter_JNI
