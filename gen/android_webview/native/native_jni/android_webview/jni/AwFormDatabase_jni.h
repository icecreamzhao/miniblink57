// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwFormDatabase

#ifndef org_chromium_android_webview_AwFormDatabase_JNI
#define org_chromium_android_webview_AwFormDatabase_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kAwFormDatabaseClassPath[] = "org/chromium/android_webview/AwFormDatabase";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_AwFormDatabase_clazz __attribute__((unused)) = 0;
#define AwFormDatabase_clazz(env) base::android::LazyGetClass(env, kAwFormDatabaseClassPath, &g_AwFormDatabase_clazz)

} // namespace

namespace android_webview {

// Step 2: method stubs.

static jboolean HasFormData(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jboolean
Java_org_chromium_android_1webview_AwFormDatabase_nativeHasFormData(JNIEnv*
                                                                        env,
    jclass jcaller)
{
    return HasFormData(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void ClearFormData(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
Java_org_chromium_android_1webview_AwFormDatabase_nativeClearFormData(JNIEnv*
                                                                          env,
    jclass jcaller)
{
    return ClearFormData(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsAwFormDatabase[] = {
    { "nativeHasFormData",
        "("
        ")"
        "Z",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwFormDatabase_nativeHasFormData) },
    { "nativeClearFormData",
        "("
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_android_1webview_AwFormDatabase_nativeClearFormData) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsAwFormDatabaseSize = arraysize(kMethodsAwFormDatabase);

    if (env->RegisterNatives(AwFormDatabase_clazz(env),
            kMethodsAwFormDatabase,
            kMethodsAwFormDatabaseSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, AwFormDatabase_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace android_webview

#endif // org_chromium_android_webview_AwFormDatabase_JNI
