// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/bluetooth/ChromeBluetoothDevice

#ifndef org_chromium_device_bluetooth_ChromeBluetoothDevice_JNI
#define org_chromium_device_bluetooth_ChromeBluetoothDevice_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeBluetoothDeviceClassPath[] = "org/chromium/device/bluetooth/ChromeBluetoothDevice";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeBluetoothDevice_clazz __attribute__((unused)) = 0;
#define ChromeBluetoothDevice_clazz(env) base::android::LazyGetClass(env, kChromeBluetoothDeviceClassPath, &g_ChromeBluetoothDevice_clazz)

} // namespace

namespace device {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_device_bluetooth_ChromeBluetoothDevice_nativeOnConnectionStateChange(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeBluetoothDeviceAndroid,
    jint status,
    jboolean connected)
{
    BluetoothDeviceAndroid* native = reinterpret_cast<BluetoothDeviceAndroid*>(nativeBluetoothDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnConnectionStateChange");
    return native->OnConnectionStateChange(env,
        base::android::JavaParamRef<jobject>(env, jcaller), status, connected);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_device_bluetooth_ChromeBluetoothDevice_nativeCreateGattRemoteService(JNIEnv*
                                                                                           env,
    jobject jcaller,
    jlong nativeBluetoothDeviceAndroid,
    jstring instanceId,
    jobject bluetoothGattServiceWrapper)
{
    BluetoothDeviceAndroid* native = reinterpret_cast<BluetoothDeviceAndroid*>(nativeBluetoothDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "CreateGattRemoteService");
    return native->CreateGattRemoteService(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, instanceId),
        base::android::JavaParamRef<jobject>(env, bluetoothGattServiceWrapper));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_device_bluetooth_ChromeBluetoothDevice_nativeOnGattServicesDiscovered(JNIEnv*
                                                                                            env,
    jobject jcaller,
    jlong nativeBluetoothDeviceAndroid)
{
    BluetoothDeviceAndroid* native = reinterpret_cast<BluetoothDeviceAndroid*>(nativeBluetoothDeviceAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnGattServicesDiscovered");
    return native->OnGattServicesDiscovered(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord
    g_ChromeBluetoothDevice_onBluetoothDeviceAndroidDestruction
    = 0;
static void
Java_ChromeBluetoothDevice_onBluetoothDeviceAndroidDestruction(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "onBluetoothDeviceAndroidDestruction",
        "("
        ")"
        "V",
        &g_ChromeBluetoothDevice_onBluetoothDeviceAndroidDestruction);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ChromeBluetoothDevice_create(JNIEnv* env, jlong nativeBluetoothDeviceAndroid,
    const base::android::JavaRefOrBare<jobject>& deviceWrapper)
{
    CHECK_CLAZZ(env, ChromeBluetoothDevice_clazz(env),
        ChromeBluetoothDevice_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChromeBluetoothDevice_clazz(env),
        "create",
        "("
        "J"
        "Ljava/lang/Object;"
        ")"
        "Lorg/chromium/device/bluetooth/ChromeBluetoothDevice;",
        &g_ChromeBluetoothDevice_create);

    jobject ret = env->CallStaticObjectMethod(ChromeBluetoothDevice_clazz(env),
        method_id, nativeBluetoothDeviceAndroid, deviceWrapper.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_getBluetoothClass = 0;
static jint Java_ChromeBluetoothDevice_getBluetoothClass(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "getBluetoothClass",
        "("
        ")"
        "I",
        &g_ChromeBluetoothDevice_getBluetoothClass);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_getAddress = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_ChromeBluetoothDevice_getAddress(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "getAddress",
        "("
        ")"
        "Ljava/lang/String;",
        &g_ChromeBluetoothDevice_getAddress);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_getName = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_ChromeBluetoothDevice_getName(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "getName",
        "("
        ")"
        "Ljava/lang/String;",
        &g_ChromeBluetoothDevice_getName);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_isPaired = 0;
static jboolean Java_ChromeBluetoothDevice_isPaired(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "isPaired",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothDevice_isPaired);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_createGattConnectionImpl
    = 0;
static void Java_ChromeBluetoothDevice_createGattConnectionImpl(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "createGattConnectionImpl",
        "("
        "Landroid/content/Context;"
        ")"
        "V",
        &g_ChromeBluetoothDevice_createGattConnectionImpl);

    env->CallVoidMethod(obj.obj(),
        method_id, context.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ChromeBluetoothDevice_disconnectGatt = 0;
static void Java_ChromeBluetoothDevice_disconnectGatt(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothDevice_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothDevice_clazz(env),
        "disconnectGatt",
        "("
        ")"
        "V",
        &g_ChromeBluetoothDevice_disconnectGatt);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChromeBluetoothDevice[] = {
    { "nativeOnConnectionStateChange",
        "("
        "J"
        "I"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_bluetooth_ChromeBluetoothDevice_nativeOnConnectionStateChange) },
    { "nativeCreateGattRemoteService",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/Object;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_bluetooth_ChromeBluetoothDevice_nativeCreateGattRemoteService) },
    { "nativeOnGattServicesDiscovered",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_bluetooth_ChromeBluetoothDevice_nativeOnGattServicesDiscovered) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsChromeBluetoothDeviceSize = arraysize(kMethodsChromeBluetoothDevice);

    if (env->RegisterNatives(ChromeBluetoothDevice_clazz(env),
            kMethodsChromeBluetoothDevice,
            kMethodsChromeBluetoothDeviceSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ChromeBluetoothDevice_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace device

#endif // org_chromium_device_bluetooth_ChromeBluetoothDevice_JNI
