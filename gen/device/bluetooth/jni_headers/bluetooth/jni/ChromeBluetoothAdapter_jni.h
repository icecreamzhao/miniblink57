// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/bluetooth/ChromeBluetoothAdapter

#ifndef org_chromium_device_bluetooth_ChromeBluetoothAdapter_JNI
#define org_chromium_device_bluetooth_ChromeBluetoothAdapter_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeBluetoothAdapterClassPath[] = "org/chromium/device/bluetooth/ChromeBluetoothAdapter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeBluetoothAdapter_clazz __attribute__((unused))
= 0;
#define ChromeBluetoothAdapter_clazz(env) base::android::LazyGetClass(env, kChromeBluetoothAdapterClassPath, &g_ChromeBluetoothAdapter_clazz)

} // namespace

namespace device {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeOnScanFailed(JNIEnv*
                                                                                 env,
    jobject jcaller,
    jlong nativeBluetoothAdapterAndroid)
{
    BluetoothAdapterAndroid* native = reinterpret_cast<BluetoothAdapterAndroid*>(nativeBluetoothAdapterAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnScanFailed");
    return native->OnScanFailed(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeCreateOrUpdateDeviceOnScan(JNIEnv*
                                                                                               env,
    jobject jcaller,
    jlong nativeBluetoothAdapterAndroid,
    jstring address,
    jobject bluetoothDeviceWrapper,
    jint rssi,
    jobjectArray advertisedUuids,
    jint txPower)
{
    BluetoothAdapterAndroid* native = reinterpret_cast<BluetoothAdapterAndroid*>(nativeBluetoothAdapterAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "CreateOrUpdateDeviceOnScan");
    return native->CreateOrUpdateDeviceOnScan(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jstring>(env, address),
        base::android::JavaParamRef<jobject>(env, bluetoothDeviceWrapper), rssi,
        base::android::JavaParamRef<jobjectArray>(env, advertisedUuids), txPower);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeOnAdapterStateChanged(JNIEnv*
                                                                                          env,
    jobject jcaller,
    jlong nativeBluetoothAdapterAndroid,
    jboolean powered)
{
    BluetoothAdapterAndroid* native = reinterpret_cast<BluetoothAdapterAndroid*>(nativeBluetoothAdapterAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnAdapterStateChanged");
    return native->OnAdapterStateChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller), powered);
}

static base::subtle::AtomicWord
    g_ChromeBluetoothAdapter_onBluetoothAdapterAndroidDestruction
    = 0;
static void
Java_ChromeBluetoothAdapter_onBluetoothAdapterAndroidDestruction(JNIEnv*
                                                                     env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "onBluetoothAdapterAndroidDestruction",
        "("
        ")"
        "V",
        &g_ChromeBluetoothAdapter_onBluetoothAdapterAndroidDestruction);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ChromeBluetoothAdapter_create(JNIEnv* env, jlong nativeBluetoothAdapterAndroid,
    const base::android::JavaRefOrBare<jobject>& adapterWrapper)
{
    CHECK_CLAZZ(env, ChromeBluetoothAdapter_clazz(env),
        ChromeBluetoothAdapter_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChromeBluetoothAdapter_clazz(env),
        "create",
        "("
        "J"
        "Ljava/lang/Object;"
        ")"
        "Lorg/chromium/device/bluetooth/ChromeBluetoothAdapter;",
        &g_ChromeBluetoothAdapter_create);

    jobject ret = env->CallStaticObjectMethod(ChromeBluetoothAdapter_clazz(env),
        method_id, nativeBluetoothAdapterAndroid, adapterWrapper.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_getAddress = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_ChromeBluetoothAdapter_getAddress(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "getAddress",
        "("
        ")"
        "Ljava/lang/String;",
        &g_ChromeBluetoothAdapter_getAddress);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_getName = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_ChromeBluetoothAdapter_getName(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "getName",
        "("
        ")"
        "Ljava/lang/String;",
        &g_ChromeBluetoothAdapter_getName);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_isPresent = 0;
static jboolean Java_ChromeBluetoothAdapter_isPresent(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "isPresent",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_isPresent);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_isPowered = 0;
static jboolean Java_ChromeBluetoothAdapter_isPowered(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "isPowered",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_isPowered);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_setPowered = 0;
static jboolean Java_ChromeBluetoothAdapter_setPowered(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean powered)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "setPowered",
        "("
        "Z"
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_setPowered);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, powered);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_isDiscoverable = 0;
static jboolean Java_ChromeBluetoothAdapter_isDiscoverable(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "isDiscoverable",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_isDiscoverable);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_isDiscovering = 0;
static jboolean Java_ChromeBluetoothAdapter_isDiscovering(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "isDiscovering",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_isDiscovering);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_startScan = 0;
static jboolean Java_ChromeBluetoothAdapter_startScan(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "startScan",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_startScan);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeBluetoothAdapter_stopScan = 0;
static jboolean Java_ChromeBluetoothAdapter_stopScan(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeBluetoothAdapter_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeBluetoothAdapter_clazz(env),
        "stopScan",
        "("
        ")"
        "Z",
        &g_ChromeBluetoothAdapter_stopScan);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChromeBluetoothAdapter[] = {
    { "nativeOnScanFailed",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeOnScanFailed) },
    { "nativeCreateOrUpdateDeviceOnScan",
        "("
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/Object;"
        "I"
        "[Ljava/lang/String;"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeCreateOrUpdateDeviceOnScan) },
    { "nativeOnAdapterStateChanged",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_bluetooth_ChromeBluetoothAdapter_nativeOnAdapterStateChanged) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsChromeBluetoothAdapterSize = arraysize(kMethodsChromeBluetoothAdapter);

    if (env->RegisterNatives(ChromeBluetoothAdapter_clazz(env),
            kMethodsChromeBluetoothAdapter,
            kMethodsChromeBluetoothAdapterSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ChromeBluetoothAdapter_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace device

#endif // org_chromium_device_bluetooth_ChromeBluetoothAdapter_JNI
