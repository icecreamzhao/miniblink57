// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/sensors/PlatformSensorProvider

#ifndef org_chromium_device_sensors_PlatformSensorProvider_JNI
#define org_chromium_device_sensors_PlatformSensorProvider_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPlatformSensorProviderClassPath[] = "org/chromium/device/sensors/PlatformSensorProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PlatformSensorProvider_clazz __attribute__((unused))
= 0;
#define PlatformSensorProvider_clazz(env) base::android::LazyGetClass(env, kPlatformSensorProviderClassPath, &g_PlatformSensorProvider_clazz)

} // namespace

namespace device {

// Step 2: method stubs.

static base::subtle::AtomicWord g_PlatformSensorProvider_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_PlatformSensorProvider_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, PlatformSensorProvider_clazz(env),
        PlatformSensorProvider_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, PlatformSensorProvider_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/device/sensors/PlatformSensorProvider;",
        &g_PlatformSensorProvider_create);

    jobject ret = env->CallStaticObjectMethod(PlatformSensorProvider_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PlatformSensorProvider_createSensor = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_PlatformSensorProvider_createSensor(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper type)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensorProvider_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensorProvider_clazz(env),
        "createSensor",
        "("
        "I"
        ")"
        "Lorg/chromium/device/sensors/PlatformSensor;",
        &g_PlatformSensorProvider_createSensor);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, as_jint(type));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace device

#endif // org_chromium_device_sensors_PlatformSensorProvider_JNI
