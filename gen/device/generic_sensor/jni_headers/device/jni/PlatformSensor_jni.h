// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/sensors/PlatformSensor

#ifndef org_chromium_device_sensors_PlatformSensor_JNI
#define org_chromium_device_sensors_PlatformSensor_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPlatformSensorClassPath[] = "org/chromium/device/sensors/PlatformSensor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PlatformSensor_clazz __attribute__((unused)) = 0;
#define PlatformSensor_clazz(env) base::android::LazyGetClass(env, kPlatformSensorClassPath, &g_PlatformSensor_clazz)

} // namespace

namespace device {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_device_sensors_PlatformSensor_nativeNotifyPlatformSensorError(JNIEnv*
                                                                                    env,
    jobject jcaller,
    jlong nativePlatformSensorAndroid)
{
    PlatformSensorAndroid* native = reinterpret_cast<PlatformSensorAndroid*>(nativePlatformSensorAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "NotifyPlatformSensorError");
    return native->NotifyPlatformSensorError(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_device_sensors_PlatformSensor_nativeUpdatePlatformSensorReading(JNIEnv*
                                                                                      env,
    jobject jcaller,
    jlong nativePlatformSensorAndroid,
    jdouble timestamp,
    jdouble value1,
    jdouble value2,
    jdouble value3)
{
    PlatformSensorAndroid* native = reinterpret_cast<PlatformSensorAndroid*>(nativePlatformSensorAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "UpdatePlatformSensorReading");
    return native->UpdatePlatformSensorReading(env,
        base::android::JavaParamRef<jobject>(env, jcaller), timestamp, value1,
        value2, value3);
}

static base::subtle::AtomicWord g_PlatformSensor_initPlatformSensorAndroid = 0;
static void Java_PlatformSensor_initPlatformSensorAndroid(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jlong nativePlatformSensorAndroid)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "initPlatformSensorAndroid",
        "("
        "J"
        ")"
        "V",
        &g_PlatformSensor_initPlatformSensorAndroid);

    env->CallVoidMethod(obj.obj(),
        method_id, nativePlatformSensorAndroid);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PlatformSensor_getReportingMode = 0;
static jint Java_PlatformSensor_getReportingMode(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "getReportingMode",
        "("
        ")"
        "I",
        &g_PlatformSensor_getReportingMode);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PlatformSensor_getDefaultConfiguration = 0;
static jdouble Java_PlatformSensor_getDefaultConfiguration(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "getDefaultConfiguration",
        "("
        ")"
        "D",
        &g_PlatformSensor_getDefaultConfiguration);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PlatformSensor_getMaximumSupportedFrequency = 0;
static jdouble Java_PlatformSensor_getMaximumSupportedFrequency(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "getMaximumSupportedFrequency",
        "("
        ")"
        "D",
        &g_PlatformSensor_getMaximumSupportedFrequency);

    jdouble ret = env->CallDoubleMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PlatformSensor_startSensor = 0;
static jboolean Java_PlatformSensor_startSensor(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jdouble frequency)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "startSensor",
        "("
        "D"
        ")"
        "Z",
        &g_PlatformSensor_startSensor);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, frequency);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PlatformSensor_stopSensor = 0;
static void Java_PlatformSensor_stopSensor(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "stopSensor",
        "("
        ")"
        "V",
        &g_PlatformSensor_stopSensor);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PlatformSensor_checkSensorConfiguration = 0;
static jboolean Java_PlatformSensor_checkSensorConfiguration(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jdouble frequency)
{
    CHECK_CLAZZ(env, obj.obj(),
        PlatformSensor_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PlatformSensor_clazz(env),
        "checkSensorConfiguration",
        "("
        "D"
        ")"
        "Z",
        &g_PlatformSensor_checkSensorConfiguration);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, frequency);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPlatformSensor[] = {
    { "nativeNotifyPlatformSensorError",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_sensors_PlatformSensor_nativeNotifyPlatformSensorError) },
    { "nativeUpdatePlatformSensorReading",
        "("
        "J"
        "D"
        "D"
        "D"
        "D"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_device_sensors_PlatformSensor_nativeUpdatePlatformSensorReading) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsPlatformSensorSize = arraysize(kMethodsPlatformSensor);

    if (env->RegisterNatives(PlatformSensor_clazz(env),
            kMethodsPlatformSensor,
            kMethodsPlatformSensorSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, PlatformSensor_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace device

#endif // org_chromium_device_sensors_PlatformSensor_JNI
