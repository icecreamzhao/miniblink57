// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/usb/ChromeUsbConfiguration

#ifndef org_chromium_device_usb_ChromeUsbConfiguration_JNI
#define org_chromium_device_usb_ChromeUsbConfiguration_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeUsbConfigurationClassPath[] = "org/chromium/device/usb/ChromeUsbConfiguration";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeUsbConfiguration_clazz __attribute__((unused))
= 0;
#define ChromeUsbConfiguration_clazz(env) base::android::LazyGetClass(env, kChromeUsbConfigurationClassPath, &g_ChromeUsbConfiguration_clazz)

} // namespace

namespace device {

// Step 2: method stubs.

static base::subtle::AtomicWord g_ChromeUsbConfiguration_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ChromeUsbConfiguration_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& configuration)
{
    CHECK_CLAZZ(env, ChromeUsbConfiguration_clazz(env),
        ChromeUsbConfiguration_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChromeUsbConfiguration_clazz(env),
        "create",
        "("
        "Landroid/hardware/usb/UsbConfiguration;"
        ")"
        "Lorg/chromium/device/usb/ChromeUsbConfiguration;",
        &g_ChromeUsbConfiguration_create);

    jobject ret = env->CallStaticObjectMethod(ChromeUsbConfiguration_clazz(env),
        method_id, configuration.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeUsbConfiguration_getConfigurationValue = 0;
static jint Java_ChromeUsbConfiguration_getConfigurationValue(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbConfiguration_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbConfiguration_clazz(env),
        "getConfigurationValue",
        "("
        ")"
        "I",
        &g_ChromeUsbConfiguration_getConfigurationValue);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbConfiguration_isSelfPowered = 0;
static jboolean Java_ChromeUsbConfiguration_isSelfPowered(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbConfiguration_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbConfiguration_clazz(env),
        "isSelfPowered",
        "("
        ")"
        "Z",
        &g_ChromeUsbConfiguration_isSelfPowered);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbConfiguration_isRemoteWakeup = 0;
static jboolean Java_ChromeUsbConfiguration_isRemoteWakeup(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbConfiguration_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbConfiguration_clazz(env),
        "isRemoteWakeup",
        "("
        ")"
        "Z",
        &g_ChromeUsbConfiguration_isRemoteWakeup);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbConfiguration_getMaxPower = 0;
static jint Java_ChromeUsbConfiguration_getMaxPower(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbConfiguration_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbConfiguration_clazz(env),
        "getMaxPower",
        "("
        ")"
        "I",
        &g_ChromeUsbConfiguration_getMaxPower);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbConfiguration_getInterfaces = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_ChromeUsbConfiguration_getInterfaces(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbConfiguration_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbConfiguration_clazz(env),
        "getInterfaces",
        "("
        ")"
        "[Landroid/hardware/usb/UsbInterface;",
        &g_ChromeUsbConfiguration_getInterfaces);

    jobjectArray ret = static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace device

#endif // org_chromium_device_usb_ChromeUsbConfiguration_JNI
