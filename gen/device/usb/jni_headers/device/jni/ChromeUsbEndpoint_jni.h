// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/device/usb/ChromeUsbEndpoint

#ifndef org_chromium_device_usb_ChromeUsbEndpoint_JNI
#define org_chromium_device_usb_ChromeUsbEndpoint_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromeUsbEndpointClassPath[] = "org/chromium/device/usb/ChromeUsbEndpoint";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromeUsbEndpoint_clazz __attribute__((unused)) = 0;
#define ChromeUsbEndpoint_clazz(env) base::android::LazyGetClass(env, kChromeUsbEndpointClassPath, &g_ChromeUsbEndpoint_clazz)

} // namespace

namespace device {

// Step 2: method stubs.

static base::subtle::AtomicWord g_ChromeUsbEndpoint_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ChromeUsbEndpoint_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& endpoint)
{
    CHECK_CLAZZ(env, ChromeUsbEndpoint_clazz(env),
        ChromeUsbEndpoint_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ChromeUsbEndpoint_clazz(env),
        "create",
        "("
        "Landroid/hardware/usb/UsbEndpoint;"
        ")"
        "Lorg/chromium/device/usb/ChromeUsbEndpoint;",
        &g_ChromeUsbEndpoint_create);

    jobject ret = env->CallStaticObjectMethod(ChromeUsbEndpoint_clazz(env),
        method_id, endpoint.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeUsbEndpoint_getAddress = 0;
static jint Java_ChromeUsbEndpoint_getAddress(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbEndpoint_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbEndpoint_clazz(env),
        "getAddress",
        "("
        ")"
        "I",
        &g_ChromeUsbEndpoint_getAddress);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbEndpoint_getMaxPacketSize = 0;
static jint Java_ChromeUsbEndpoint_getMaxPacketSize(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbEndpoint_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbEndpoint_clazz(env),
        "getMaxPacketSize",
        "("
        ")"
        "I",
        &g_ChromeUsbEndpoint_getMaxPacketSize);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbEndpoint_getAttributes = 0;
static jint Java_ChromeUsbEndpoint_getAttributes(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbEndpoint_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbEndpoint_clazz(env),
        "getAttributes",
        "("
        ")"
        "I",
        &g_ChromeUsbEndpoint_getAttributes);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_ChromeUsbEndpoint_getInterval = 0;
static jint Java_ChromeUsbEndpoint_getInterval(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ChromeUsbEndpoint_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ChromeUsbEndpoint_clazz(env),
        "getInterval",
        "("
        ")"
        "I",
        &g_ChromeUsbEndpoint_getInterval);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

} // namespace device

#endif // org_chromium_device_usb_ChromeUsbEndpoint_JNI
