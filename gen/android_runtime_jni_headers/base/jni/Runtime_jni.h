// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/Runtime

#ifndef java_lang_Runtime_JNI
#define java_lang_Runtime_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kRuntimeClassPath[] = "java/lang/Runtime";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_Runtime_clazz __attribute__((unused)) = 0;
#define Runtime_clazz(env) base::android::LazyGetClass(env, kRuntimeClassPath, &g_Runtime_clazz)

} // namespace

namespace JNI_Runtime {

// Step 2: method stubs.

static base::subtle::AtomicWord g_Runtime_getRuntime = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_getRuntime(JNIEnv* env) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_getRuntime(JNIEnv* env)
{
    CHECK_CLAZZ(env, Runtime_clazz(env),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, Runtime_clazz(env),
        "getRuntime",
        "()Ljava/lang/Runtime;",
        &g_Runtime_getRuntime);

    jobject ret = env->CallStaticObjectMethod(Runtime_clazz(env),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_exit = 0;
static void Java_Runtime_exit(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0) __attribute__((unused));
static void Java_Runtime_exit(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exit",
        "(I)V",
        &g_Runtime_exit);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_addShutdownHook = 0;
static void Java_Runtime_addShutdownHook(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static void Java_Runtime_addShutdownHook(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "addShutdownHook",
        "(Ljava/lang/Thread;)V",
        &g_Runtime_addShutdownHook);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_removeShutdownHook = 0;
static jboolean Java_Runtime_removeShutdownHook(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static jboolean Java_Runtime_removeShutdownHook(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "removeShutdownHook",
        "(Ljava/lang/Thread;)Z",
        &g_Runtime_removeShutdownHook);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Runtime_halt = 0;
static void Java_Runtime_halt(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0) __attribute__((unused));
static void Java_Runtime_halt(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "halt",
        "(I)V",
        &g_Runtime_halt);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(p0));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_runFinalizersOnExit = 0;
static void Java_Runtime_runFinalizersOnExit(JNIEnv* env, jboolean p0)
    __attribute__((unused));
static void Java_Runtime_runFinalizersOnExit(JNIEnv* env, jboolean p0)
{
    CHECK_CLAZZ(env, Runtime_clazz(env),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, Runtime_clazz(env),
        "runFinalizersOnExit",
        "(Z)V",
        &g_Runtime_runFinalizersOnExit);

    env->CallStaticVoidMethod(Runtime_clazz(env),
        method_id, p0);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_execJLP_JLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_JLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_JLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exec",
        "(Ljava/lang/String;)Ljava/lang/Process;",
        &g_Runtime_execJLP_JLS);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_execJLP_JLS_LJLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_JLS_LJLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_JLS_LJLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exec",
        "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;",
        &g_Runtime_execJLP_JLS_LJLS);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj(), p1.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_execJLP_JLS_LJLS_JIF = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_JLS_LJLS_JIF(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1,
    const base::android::JavaRefOrBare<jobject>& p2) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_JLS_LJLS_JIF(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1,
    const base::android::JavaRefOrBare<jobject>& p2)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exec",
        "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;",
        &g_Runtime_execJLP_JLS_LJLS_JIF);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj(), p1.obj(), p2.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_execJLP_LJLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_LJLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_LJLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exec",
        "([Ljava/lang/String;)Ljava/lang/Process;",
        &g_Runtime_execJLP_LJLS);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_execJLP_LJLS_LJLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_LJLS_LJLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_LJLS_LJLS(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exec",
        "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;",
        &g_Runtime_execJLP_LJLS_LJLS);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj(), p1.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_execJLP_LJLS_LJLS_JIF = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_LJLS_LJLS_JIF(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1,
    const base::android::JavaRefOrBare<jobject>& p2) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_execJLP_LJLS_LJLS_JIF(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobjectArray>& p0,
    const base::android::JavaRefOrBare<jobjectArray>& p1,
    const base::android::JavaRefOrBare<jobject>& p2)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "exec",
        "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;",
        &g_Runtime_execJLP_LJLS_LJLS_JIF);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj(), p1.obj(), p2.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_availableProcessors = 0;
static jint Java_Runtime_availableProcessors(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jint Java_Runtime_availableProcessors(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "availableProcessors",
        "()I",
        &g_Runtime_availableProcessors);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Runtime_freeMemory = 0;
static jlong Java_Runtime_freeMemory(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jlong Java_Runtime_freeMemory(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "freeMemory",
        "()J",
        &g_Runtime_freeMemory);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Runtime_totalMemory = 0;
static jlong Java_Runtime_totalMemory(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jlong Java_Runtime_totalMemory(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "totalMemory",
        "()J",
        &g_Runtime_totalMemory);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Runtime_maxMemory = 0;
static jlong Java_Runtime_maxMemory(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static jlong Java_Runtime_maxMemory(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "maxMemory",
        "()J",
        &g_Runtime_maxMemory);

    jlong ret = env->CallLongMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_Runtime_gc = 0;
static void Java_Runtime_gc(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static void Java_Runtime_gc(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "gc",
        "()V",
        &g_Runtime_gc);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_runFinalization = 0;
static void Java_Runtime_runFinalization(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj) __attribute__((unused));
static void Java_Runtime_runFinalization(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "runFinalization",
        "()V",
        &g_Runtime_runFinalization);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_traceInstructions = 0;
static void Java_Runtime_traceInstructions(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean p0) __attribute__((unused));
static void Java_Runtime_traceInstructions(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "traceInstructions",
        "(Z)V",
        &g_Runtime_traceInstructions);

    env->CallVoidMethod(obj.obj(),
        method_id, p0);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_traceMethodCalls = 0;
static void Java_Runtime_traceMethodCalls(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean p0) __attribute__((unused));
static void Java_Runtime_traceMethodCalls(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "traceMethodCalls",
        "(Z)V",
        &g_Runtime_traceMethodCalls);

    env->CallVoidMethod(obj.obj(),
        method_id, p0);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_load = 0;
static void Java_Runtime_load(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0) __attribute__((unused));
static void Java_Runtime_load(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "load",
        "(Ljava/lang/String;)V",
        &g_Runtime_load);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_loadLibrary = 0;
static void Java_Runtime_loadLibrary(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0) __attribute__((unused));
static void Java_Runtime_loadLibrary(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "loadLibrary",
        "(Ljava/lang/String;)V",
        &g_Runtime_loadLibrary);

    env->CallVoidMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_Runtime_getLocalizedInputStream = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_getLocalizedInputStream(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_getLocalizedInputStream(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "getLocalizedInputStream",
        "(Ljava/io/InputStream;)Ljava/io/InputStream;",
        &g_Runtime_getLocalizedInputStream);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Runtime_getLocalizedOutputStream = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_getLocalizedOutputStream(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0) __attribute__((unused));
static base::android::ScopedJavaLocalRef<jobject>
Java_Runtime_getLocalizedOutputStream(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& p0)
{
    CHECK_CLAZZ(env, obj.obj(),
        Runtime_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, Runtime_clazz(env),
        "getLocalizedOutputStream",
        "(Ljava/io/OutputStream;)Ljava/io/OutputStream;",
        &g_Runtime_getLocalizedOutputStream);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, p0.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

} // namespace JNI_Runtime

#endif // java_lang_Runtime_JNI
