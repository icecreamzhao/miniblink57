// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace audioproc {

    void protobuf_ShutdownFile_debug_2eproto()
    {
        delete Init::default_instance_;
        delete ReverseStream::default_instance_;
        delete Stream::default_instance_;
        delete Config::default_instance_;
        delete Event::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_debug_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_debug_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        Init::default_instance_ = new Init();
        ReverseStream::default_instance_ = new ReverseStream();
        Stream::default_instance_ = new Stream();
        Config::default_instance_ = new Config();
        Event::default_instance_ = new Event();
        Init::default_instance_->InitAsDefaultInstance();
        ReverseStream::default_instance_->InitAsDefaultInstance();
        Stream::default_instance_->InitAsDefaultInstance();
        Config::default_instance_->InitAsDefaultInstance();
        Event::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_debug_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_debug_2eproto_once_);
    void protobuf_AddDesc_debug_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_debug_2eproto_once_,
            &protobuf_AddDesc_debug_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_debug_2eproto {
        StaticDescriptorInitializer_debug_2eproto()
        {
            protobuf_AddDesc_debug_2eproto();
        }
    } static_descriptor_initializer_debug_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForInit(
        Init* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Init::kSampleRateFieldNumber;
    const int Init::kDeviceSampleRateFieldNumber;
    const int Init::kNumInputChannelsFieldNumber;
    const int Init::kNumOutputChannelsFieldNumber;
    const int Init::kNumReverseChannelsFieldNumber;
    const int Init::kReverseSampleRateFieldNumber;
    const int Init::kOutputSampleRateFieldNumber;
    const int Init::kReverseOutputSampleRateFieldNumber;
    const int Init::kNumReverseOutputChannelsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Init::Init()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:webrtc.audioproc.Init)
    }

    void Init::InitAsDefaultInstance()
    {
    }

    Init::Init(const Init& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Init)
    }

    void Init::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        sample_rate_ = 0;
        device_sample_rate_ = 0;
        num_input_channels_ = 0;
        num_output_channels_ = 0;
        num_reverse_channels_ = 0;
        reverse_sample_rate_ = 0;
        output_sample_rate_ = 0;
        reverse_output_sample_rate_ = 0;
        num_reverse_output_channels_ = 0;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Init::~Init()
    {
        // @@protoc_insertion_point(destructor:webrtc.audioproc.Init)
        SharedDtor();
    }

    void Init::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Init::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Init& Init::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_debug_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_debug_2eproto();
#endif
        return *default_instance_;
    }

    Init* Init::default_instance_ = NULL;

    Init* Init::New(::google::protobuf::Arena* arena) const
    {
        Init* n = new Init;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Init::Clear()
    {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Init)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                          \
    _Pragma("clang diagnostic push")                                                           \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Init, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Init*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 255u) {
            ZR_(sample_rate_, reverse_output_sample_rate_);
        }
        num_reverse_output_channels_ = 0;

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Init::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForInit, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:webrtc.audioproc.Init)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional int32 sample_rate = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &sample_rate_)));
                    set_has_sample_rate();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_device_sample_rate;
                break;
            }

            // optional int32 device_sample_rate = 2 [deprecated = true];
            case 2: {
                if (tag == 16) {
                parse_device_sample_rate:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &device_sample_rate_)));
                    set_has_device_sample_rate();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_num_input_channels;
                break;
            }

            // optional int32 num_input_channels = 3;
            case 3: {
                if (tag == 24) {
                parse_num_input_channels:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &num_input_channels_)));
                    set_has_num_input_channels();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32))
                    goto parse_num_output_channels;
                break;
            }

            // optional int32 num_output_channels = 4;
            case 4: {
                if (tag == 32) {
                parse_num_output_channels:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &num_output_channels_)));
                    set_has_num_output_channels();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(40))
                    goto parse_num_reverse_channels;
                break;
            }

            // optional int32 num_reverse_channels = 5;
            case 5: {
                if (tag == 40) {
                parse_num_reverse_channels:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &num_reverse_channels_)));
                    set_has_num_reverse_channels();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(48))
                    goto parse_reverse_sample_rate;
                break;
            }

            // optional int32 reverse_sample_rate = 6;
            case 6: {
                if (tag == 48) {
                parse_reverse_sample_rate:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &reverse_sample_rate_)));
                    set_has_reverse_sample_rate();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(56))
                    goto parse_output_sample_rate;
                break;
            }

            // optional int32 output_sample_rate = 7;
            case 7: {
                if (tag == 56) {
                parse_output_sample_rate:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &output_sample_rate_)));
                    set_has_output_sample_rate();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(64))
                    goto parse_reverse_output_sample_rate;
                break;
            }

            // optional int32 reverse_output_sample_rate = 8;
            case 8: {
                if (tag == 64) {
                parse_reverse_output_sample_rate:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &reverse_output_sample_rate_)));
                    set_has_reverse_output_sample_rate();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(72))
                    goto parse_num_reverse_output_channels;
                break;
            }

            // optional int32 num_reverse_output_channels = 9;
            case 9: {
                if (tag == 72) {
                parse_num_reverse_output_channels:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &num_reverse_output_channels_)));
                    set_has_num_reverse_output_channels();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:webrtc.audioproc.Init)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Init)
        return false;
#undef DO_
    }

    void Init::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Init)
        // optional int32 sample_rate = 1;
        if (has_sample_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_rate(), output);
        }

        // optional int32 device_sample_rate = 2 [deprecated = true];
        if (has_device_sample_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_sample_rate(), output);
        }

        // optional int32 num_input_channels = 3;
        if (has_num_input_channels()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_input_channels(), output);
        }

        // optional int32 num_output_channels = 4;
        if (has_num_output_channels()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_output_channels(), output);
        }

        // optional int32 num_reverse_channels = 5;
        if (has_num_reverse_channels()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_reverse_channels(), output);
        }

        // optional int32 reverse_sample_rate = 6;
        if (has_reverse_sample_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reverse_sample_rate(), output);
        }

        // optional int32 output_sample_rate = 7;
        if (has_output_sample_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->output_sample_rate(), output);
        }

        // optional int32 reverse_output_sample_rate = 8;
        if (has_reverse_output_sample_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reverse_output_sample_rate(), output);
        }

        // optional int32 num_reverse_output_channels = 9;
        if (has_num_reverse_output_channels()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_reverse_output_channels(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Init)
    }

    int Init::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Init)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 255u) {
            // optional int32 sample_rate = 1;
            if (has_sample_rate()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->sample_rate());
            }

            // optional int32 device_sample_rate = 2 [deprecated = true];
            if (has_device_sample_rate()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->device_sample_rate());
            }

            // optional int32 num_input_channels = 3;
            if (has_num_input_channels()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_input_channels());
            }

            // optional int32 num_output_channels = 4;
            if (has_num_output_channels()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_output_channels());
            }

            // optional int32 num_reverse_channels = 5;
            if (has_num_reverse_channels()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_reverse_channels());
            }

            // optional int32 reverse_sample_rate = 6;
            if (has_reverse_sample_rate()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->reverse_sample_rate());
            }

            // optional int32 output_sample_rate = 7;
            if (has_output_sample_rate()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->output_sample_rate());
            }

            // optional int32 reverse_output_sample_rate = 8;
            if (has_reverse_output_sample_rate()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->reverse_output_sample_rate());
            }
        }
        // optional int32 num_reverse_output_channels = 9;
        if (has_num_reverse_output_channels()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_reverse_output_channels());
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Init::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Init*>(&from));
    }

    void Init::MergeFrom(const Init& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Init)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_sample_rate()) {
                set_sample_rate(from.sample_rate());
            }
            if (from.has_device_sample_rate()) {
                set_device_sample_rate(from.device_sample_rate());
            }
            if (from.has_num_input_channels()) {
                set_num_input_channels(from.num_input_channels());
            }
            if (from.has_num_output_channels()) {
                set_num_output_channels(from.num_output_channels());
            }
            if (from.has_num_reverse_channels()) {
                set_num_reverse_channels(from.num_reverse_channels());
            }
            if (from.has_reverse_sample_rate()) {
                set_reverse_sample_rate(from.reverse_sample_rate());
            }
            if (from.has_output_sample_rate()) {
                set_output_sample_rate(from.output_sample_rate());
            }
            if (from.has_reverse_output_sample_rate()) {
                set_reverse_output_sample_rate(from.reverse_output_sample_rate());
            }
        }
        if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
            if (from.has_num_reverse_output_channels()) {
                set_num_reverse_output_channels(from.num_reverse_output_channels());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Init::CopyFrom(const Init& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Init)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Init::IsInitialized() const
    {

        return true;
    }

    void Init::Swap(Init* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Init::InternalSwap(Init* other)
    {
        std::swap(sample_rate_, other->sample_rate_);
        std::swap(device_sample_rate_, other->device_sample_rate_);
        std::swap(num_input_channels_, other->num_input_channels_);
        std::swap(num_output_channels_, other->num_output_channels_);
        std::swap(num_reverse_channels_, other->num_reverse_channels_);
        std::swap(reverse_sample_rate_, other->reverse_sample_rate_);
        std::swap(output_sample_rate_, other->output_sample_rate_);
        std::swap(reverse_output_sample_rate_, other->reverse_output_sample_rate_);
        std::swap(num_reverse_output_channels_, other->num_reverse_output_channels_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Init::GetTypeName() const
    {
        return "webrtc.audioproc.Init";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Init

    // optional int32 sample_rate = 1;
    bool Init::has_sample_rate() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Init::set_has_sample_rate()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Init::clear_has_sample_rate()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Init::clear_sample_rate()
    {
        sample_rate_ = 0;
        clear_has_sample_rate();
    }
    ::google::protobuf::int32 Init::sample_rate() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.sample_rate)
        return sample_rate_;
    }
    void Init::set_sample_rate(::google::protobuf::int32 value)
    {
        set_has_sample_rate();
        sample_rate_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.sample_rate)
    }

    // optional int32 device_sample_rate = 2 [deprecated = true];
    bool Init::has_device_sample_rate() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Init::set_has_device_sample_rate()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Init::clear_has_device_sample_rate()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Init::clear_device_sample_rate()
    {
        device_sample_rate_ = 0;
        clear_has_device_sample_rate();
    }
    ::google::protobuf::int32 Init::device_sample_rate() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.device_sample_rate)
        return device_sample_rate_;
    }
    void Init::set_device_sample_rate(::google::protobuf::int32 value)
    {
        set_has_device_sample_rate();
        device_sample_rate_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.device_sample_rate)
    }

    // optional int32 num_input_channels = 3;
    bool Init::has_num_input_channels() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Init::set_has_num_input_channels()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Init::clear_has_num_input_channels()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Init::clear_num_input_channels()
    {
        num_input_channels_ = 0;
        clear_has_num_input_channels();
    }
    ::google::protobuf::int32 Init::num_input_channels() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_input_channels)
        return num_input_channels_;
    }
    void Init::set_num_input_channels(::google::protobuf::int32 value)
    {
        set_has_num_input_channels();
        num_input_channels_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_input_channels)
    }

    // optional int32 num_output_channels = 4;
    bool Init::has_num_output_channels() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Init::set_has_num_output_channels()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Init::clear_has_num_output_channels()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Init::clear_num_output_channels()
    {
        num_output_channels_ = 0;
        clear_has_num_output_channels();
    }
    ::google::protobuf::int32 Init::num_output_channels() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_output_channels)
        return num_output_channels_;
    }
    void Init::set_num_output_channels(::google::protobuf::int32 value)
    {
        set_has_num_output_channels();
        num_output_channels_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_output_channels)
    }

    // optional int32 num_reverse_channels = 5;
    bool Init::has_num_reverse_channels() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Init::set_has_num_reverse_channels()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Init::clear_has_num_reverse_channels()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Init::clear_num_reverse_channels()
    {
        num_reverse_channels_ = 0;
        clear_has_num_reverse_channels();
    }
    ::google::protobuf::int32 Init::num_reverse_channels() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_reverse_channels)
        return num_reverse_channels_;
    }
    void Init::set_num_reverse_channels(::google::protobuf::int32 value)
    {
        set_has_num_reverse_channels();
        num_reverse_channels_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_reverse_channels)
    }

    // optional int32 reverse_sample_rate = 6;
    bool Init::has_reverse_sample_rate() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void Init::set_has_reverse_sample_rate()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void Init::clear_has_reverse_sample_rate()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void Init::clear_reverse_sample_rate()
    {
        reverse_sample_rate_ = 0;
        clear_has_reverse_sample_rate();
    }
    ::google::protobuf::int32 Init::reverse_sample_rate() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.reverse_sample_rate)
        return reverse_sample_rate_;
    }
    void Init::set_reverse_sample_rate(::google::protobuf::int32 value)
    {
        set_has_reverse_sample_rate();
        reverse_sample_rate_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.reverse_sample_rate)
    }

    // optional int32 output_sample_rate = 7;
    bool Init::has_output_sample_rate() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void Init::set_has_output_sample_rate()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void Init::clear_has_output_sample_rate()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void Init::clear_output_sample_rate()
    {
        output_sample_rate_ = 0;
        clear_has_output_sample_rate();
    }
    ::google::protobuf::int32 Init::output_sample_rate() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.output_sample_rate)
        return output_sample_rate_;
    }
    void Init::set_output_sample_rate(::google::protobuf::int32 value)
    {
        set_has_output_sample_rate();
        output_sample_rate_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.output_sample_rate)
    }

    // optional int32 reverse_output_sample_rate = 8;
    bool Init::has_reverse_output_sample_rate() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    void Init::set_has_reverse_output_sample_rate()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    void Init::clear_has_reverse_output_sample_rate()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    void Init::clear_reverse_output_sample_rate()
    {
        reverse_output_sample_rate_ = 0;
        clear_has_reverse_output_sample_rate();
    }
    ::google::protobuf::int32 Init::reverse_output_sample_rate() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.reverse_output_sample_rate)
        return reverse_output_sample_rate_;
    }
    void Init::set_reverse_output_sample_rate(::google::protobuf::int32 value)
    {
        set_has_reverse_output_sample_rate();
        reverse_output_sample_rate_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.reverse_output_sample_rate)
    }

    // optional int32 num_reverse_output_channels = 9;
    bool Init::has_num_reverse_output_channels() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    void Init::set_has_num_reverse_output_channels()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    void Init::clear_has_num_reverse_output_channels()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    void Init::clear_num_reverse_output_channels()
    {
        num_reverse_output_channels_ = 0;
        clear_has_num_reverse_output_channels();
    }
    ::google::protobuf::int32 Init::num_reverse_output_channels() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_reverse_output_channels)
        return num_reverse_output_channels_;
    }
    void Init::set_num_reverse_output_channels(::google::protobuf::int32 value)
    {
        set_has_num_reverse_output_channels();
        num_reverse_output_channels_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_reverse_output_channels)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForReverseStream(
        ReverseStream* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ReverseStream::kDataFieldNumber;
    const int ReverseStream::kChannelFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    ReverseStream::ReverseStream()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:webrtc.audioproc.ReverseStream)
    }

    void ReverseStream::InitAsDefaultInstance()
    {
    }

    ReverseStream::ReverseStream(const ReverseStream& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.ReverseStream)
    }

    void ReverseStream::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    ReverseStream::~ReverseStream()
    {
        // @@protoc_insertion_point(destructor:webrtc.audioproc.ReverseStream)
        SharedDtor();
    }

    void ReverseStream::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void ReverseStream::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ReverseStream& ReverseStream::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_debug_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_debug_2eproto();
#endif
        return *default_instance_;
    }

    ReverseStream* ReverseStream::default_instance_ = NULL;

    ReverseStream* ReverseStream::New(::google::protobuf::Arena* arena) const
    {
        ReverseStream* n = new ReverseStream;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void ReverseStream::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:webrtc.audioproc.ReverseStream)
        if (has_data()) {
            data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        channel_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool ReverseStream::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForReverseStream, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:webrtc.audioproc.ReverseStream)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional bytes data = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_data()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_channel;
                break;
            }

            // repeated bytes channel = 2;
            case 2: {
                if (tag == 18) {
                parse_channel:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->add_channel()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_channel;
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:webrtc.audioproc.ReverseStream)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:webrtc.audioproc.ReverseStream)
        return false;
#undef DO_
    }

    void ReverseStream::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:webrtc.audioproc.ReverseStream)
        // optional bytes data = 1;
        if (has_data()) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                1, this->data(), output);
        }

        // repeated bytes channel = 2;
        for (int i = 0; i < this->channel_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteBytes(
                2, this->channel(i), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:webrtc.audioproc.ReverseStream)
    }

    int ReverseStream::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.ReverseStream)
        int total_size = 0;

        // optional bytes data = 1;
        if (has_data()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->data());
        }

        // repeated bytes channel = 2;
        total_size += 1 * this->channel_size();
        for (int i = 0; i < this->channel_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                this->channel(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void ReverseStream::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const ReverseStream*>(&from));
    }

    void ReverseStream::MergeFrom(const ReverseStream& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.ReverseStream)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        channel_.MergeFrom(from.channel_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_data()) {
                set_has_data();
                data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void ReverseStream::CopyFrom(const ReverseStream& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.ReverseStream)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool ReverseStream::IsInitialized() const
    {

        return true;
    }

    void ReverseStream::Swap(ReverseStream* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void ReverseStream::InternalSwap(ReverseStream* other)
    {
        data_.Swap(&other->data_);
        channel_.UnsafeArenaSwap(&other->channel_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string ReverseStream::GetTypeName() const
    {
        return "webrtc.audioproc.ReverseStream";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // ReverseStream

    // optional bytes data = 1;
    bool ReverseStream::has_data() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void ReverseStream::set_has_data()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void ReverseStream::clear_has_data()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void ReverseStream::clear_data()
    {
        data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_data();
    }
    const ::std::string& ReverseStream::data() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.ReverseStream.data)
        return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void ReverseStream::set_data(const ::std::string& value)
    {
        set_has_data();
        data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.data)
    }
    void ReverseStream::set_data(const char* value)
    {
        set_has_data();
        data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.ReverseStream.data)
    }
    void ReverseStream::set_data(const void* value, size_t size)
    {
        set_has_data();
        data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.ReverseStream.data)
    }
    ::std::string* ReverseStream::mutable_data()
    {
        set_has_data();
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.ReverseStream.data)
        return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* ReverseStream::release_data()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.ReverseStream.data)
        clear_has_data();
        return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void ReverseStream::set_allocated_data(::std::string* data)
    {
        if (data != NULL) {
            set_has_data();
        } else {
            clear_has_data();
        }
        data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.ReverseStream.data)
    }

    // repeated bytes channel = 2;
    int ReverseStream::channel_size() const
    {
        return channel_.size();
    }
    void ReverseStream::clear_channel()
    {
        channel_.Clear();
    }
    const ::std::string& ReverseStream::channel(int index) const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.ReverseStream.channel)
        return channel_.Get(index);
    }
    ::std::string* ReverseStream::mutable_channel(int index)
    {
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.ReverseStream.channel)
        return channel_.Mutable(index);
    }
    void ReverseStream::set_channel(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.channel)
        channel_.Mutable(index)->assign(value);
    }
    void ReverseStream::set_channel(int index, const char* value)
    {
        channel_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.ReverseStream.channel)
    }
    void ReverseStream::set_channel(int index, const void* value, size_t size)
    {
        channel_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.ReverseStream.channel)
    }
    ::std::string* ReverseStream::add_channel()
    {
        // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.ReverseStream.channel)
        return channel_.Add();
    }
    void ReverseStream::add_channel(const ::std::string& value)
    {
        channel_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:webrtc.audioproc.ReverseStream.channel)
    }
    void ReverseStream::add_channel(const char* value)
    {
        channel_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:webrtc.audioproc.ReverseStream.channel)
    }
    void ReverseStream::add_channel(const void* value, size_t size)
    {
        channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.ReverseStream.channel)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    ReverseStream::channel() const
    {
        // @@protoc_insertion_point(field_list:webrtc.audioproc.ReverseStream.channel)
        return channel_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    ReverseStream::mutable_channel()
    {
        // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.ReverseStream.channel)
        return &channel_;
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForStream(
        Stream* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Stream::kInputDataFieldNumber;
    const int Stream::kOutputDataFieldNumber;
    const int Stream::kDelayFieldNumber;
    const int Stream::kDriftFieldNumber;
    const int Stream::kLevelFieldNumber;
    const int Stream::kKeypressFieldNumber;
    const int Stream::kInputChannelFieldNumber;
    const int Stream::kOutputChannelFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Stream::Stream()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:webrtc.audioproc.Stream)
    }

    void Stream::InitAsDefaultInstance()
    {
    }

    Stream::Stream(const Stream& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Stream)
    }

    void Stream::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        input_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        output_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        delay_ = 0;
        drift_ = 0;
        level_ = 0;
        keypress_ = false;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Stream::~Stream()
    {
        // @@protoc_insertion_point(destructor:webrtc.audioproc.Stream)
        SharedDtor();
    }

    void Stream::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        input_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        output_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Stream::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Stream& Stream::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_debug_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_debug_2eproto();
#endif
        return *default_instance_;
    }

    Stream* Stream::default_instance_ = NULL;

    Stream* Stream::New(::google::protobuf::Arena* arena) const
    {
        Stream* n = new Stream;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Stream::Clear()
    {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Stream)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                            \
    _Pragma("clang diagnostic push")                                                             \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Stream, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Stream*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 63u) {
            ZR_(delay_, keypress_);
            if (has_input_data()) {
                input_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_output_data()) {
                output_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }

#undef ZR_HELPER_
#undef ZR_

        input_channel_.Clear();
        output_channel_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Stream::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForStream, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:webrtc.audioproc.Stream)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional bytes input_data = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_input_data()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_output_data;
                break;
            }

            // optional bytes output_data = 2;
            case 2: {
                if (tag == 18) {
                parse_output_data:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->mutable_output_data()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_delay;
                break;
            }

            // optional int32 delay = 3;
            case 3: {
                if (tag == 24) {
                parse_delay:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &delay_)));
                    set_has_delay();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32))
                    goto parse_drift;
                break;
            }

            // optional sint32 drift = 4;
            case 4: {
                if (tag == 32) {
                parse_drift:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                        input, &drift_)));
                    set_has_drift();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(40))
                    goto parse_level;
                break;
            }

            // optional int32 level = 5;
            case 5: {
                if (tag == 40) {
                parse_level:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &level_)));
                    set_has_level();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(48))
                    goto parse_keypress;
                break;
            }

            // optional bool keypress = 6;
            case 6: {
                if (tag == 48) {
                parse_keypress:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &keypress_)));
                    set_has_keypress();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(58))
                    goto parse_input_channel;
                break;
            }

            // repeated bytes input_channel = 7;
            case 7: {
                if (tag == 58) {
                parse_input_channel:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->add_input_channel()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(58))
                    goto parse_input_channel;
                if (input->ExpectTag(66))
                    goto parse_output_channel;
                break;
            }

            // repeated bytes output_channel = 8;
            case 8: {
                if (tag == 66) {
                parse_output_channel:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                        input, this->add_output_channel()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(66))
                    goto parse_output_channel;
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:webrtc.audioproc.Stream)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Stream)
        return false;
#undef DO_
    }

    void Stream::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Stream)
        // optional bytes input_data = 1;
        if (has_input_data()) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                1, this->input_data(), output);
        }

        // optional bytes output_data = 2;
        if (has_output_data()) {
            ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
                2, this->output_data(), output);
        }

        // optional int32 delay = 3;
        if (has_delay()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->delay(), output);
        }

        // optional sint32 drift = 4;
        if (has_drift()) {
            ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->drift(), output);
        }

        // optional int32 level = 5;
        if (has_level()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
        }

        // optional bool keypress = 6;
        if (has_keypress()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keypress(), output);
        }

        // repeated bytes input_channel = 7;
        for (int i = 0; i < this->input_channel_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteBytes(
                7, this->input_channel(i), output);
        }

        // repeated bytes output_channel = 8;
        for (int i = 0; i < this->output_channel_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteBytes(
                8, this->output_channel(i), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Stream)
    }

    int Stream::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Stream)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 63u) {
            // optional bytes input_data = 1;
            if (has_input_data()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->input_data());
            }

            // optional bytes output_data = 2;
            if (has_output_data()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->output_data());
            }

            // optional int32 delay = 3;
            if (has_delay()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->delay());
            }

            // optional sint32 drift = 4;
            if (has_drift()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::SInt32Size(this->drift());
            }

            // optional int32 level = 5;
            if (has_level()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->level());
            }

            // optional bool keypress = 6;
            if (has_keypress()) {
                total_size += 1 + 1;
            }
        }
        // repeated bytes input_channel = 7;
        total_size += 1 * this->input_channel_size();
        for (int i = 0; i < this->input_channel_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                this->input_channel(i));
        }

        // repeated bytes output_channel = 8;
        total_size += 1 * this->output_channel_size();
        for (int i = 0; i < this->output_channel_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                this->output_channel(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Stream::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Stream*>(&from));
    }

    void Stream::MergeFrom(const Stream& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Stream)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        input_channel_.MergeFrom(from.input_channel_);
        output_channel_.MergeFrom(from.output_channel_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_input_data()) {
                set_has_input_data();
                input_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_data_);
            }
            if (from.has_output_data()) {
                set_has_output_data();
                output_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_data_);
            }
            if (from.has_delay()) {
                set_delay(from.delay());
            }
            if (from.has_drift()) {
                set_drift(from.drift());
            }
            if (from.has_level()) {
                set_level(from.level());
            }
            if (from.has_keypress()) {
                set_keypress(from.keypress());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Stream::CopyFrom(const Stream& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Stream)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Stream::IsInitialized() const
    {

        return true;
    }

    void Stream::Swap(Stream* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Stream::InternalSwap(Stream* other)
    {
        input_data_.Swap(&other->input_data_);
        output_data_.Swap(&other->output_data_);
        std::swap(delay_, other->delay_);
        std::swap(drift_, other->drift_);
        std::swap(level_, other->level_);
        std::swap(keypress_, other->keypress_);
        input_channel_.UnsafeArenaSwap(&other->input_channel_);
        output_channel_.UnsafeArenaSwap(&other->output_channel_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Stream::GetTypeName() const
    {
        return "webrtc.audioproc.Stream";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Stream

    // optional bytes input_data = 1;
    bool Stream::has_input_data() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Stream::set_has_input_data()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Stream::clear_has_input_data()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Stream::clear_input_data()
    {
        input_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_input_data();
    }
    const ::std::string& Stream::input_data() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.input_data)
        return input_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Stream::set_input_data(const ::std::string& value)
    {
        set_has_input_data();
        input_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_data)
    }
    void Stream::set_input_data(const char* value)
    {
        set_has_input_data();
        input_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.input_data)
    }
    void Stream::set_input_data(const void* value, size_t size)
    {
        set_has_input_data();
        input_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.input_data)
    }
    ::std::string* Stream::mutable_input_data()
    {
        set_has_input_data();
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.input_data)
        return input_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Stream::release_input_data()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Stream.input_data)
        clear_has_input_data();
        return input_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Stream::set_allocated_input_data(::std::string* input_data)
    {
        if (input_data != NULL) {
            set_has_input_data();
        } else {
            clear_has_input_data();
        }
        input_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_data);
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Stream.input_data)
    }

    // optional bytes output_data = 2;
    bool Stream::has_output_data() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Stream::set_has_output_data()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Stream::clear_has_output_data()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Stream::clear_output_data()
    {
        output_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_output_data();
    }
    const ::std::string& Stream::output_data() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.output_data)
        return output_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Stream::set_output_data(const ::std::string& value)
    {
        set_has_output_data();
        output_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_data)
    }
    void Stream::set_output_data(const char* value)
    {
        set_has_output_data();
        output_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.output_data)
    }
    void Stream::set_output_data(const void* value, size_t size)
    {
        set_has_output_data();
        output_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.output_data)
    }
    ::std::string* Stream::mutable_output_data()
    {
        set_has_output_data();
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.output_data)
        return output_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Stream::release_output_data()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Stream.output_data)
        clear_has_output_data();
        return output_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Stream::set_allocated_output_data(::std::string* output_data)
    {
        if (output_data != NULL) {
            set_has_output_data();
        } else {
            clear_has_output_data();
        }
        output_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_data);
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Stream.output_data)
    }

    // optional int32 delay = 3;
    bool Stream::has_delay() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Stream::set_has_delay()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Stream::clear_has_delay()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Stream::clear_delay()
    {
        delay_ = 0;
        clear_has_delay();
    }
    ::google::protobuf::int32 Stream::delay() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.delay)
        return delay_;
    }
    void Stream::set_delay(::google::protobuf::int32 value)
    {
        set_has_delay();
        delay_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.delay)
    }

    // optional sint32 drift = 4;
    bool Stream::has_drift() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Stream::set_has_drift()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Stream::clear_has_drift()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Stream::clear_drift()
    {
        drift_ = 0;
        clear_has_drift();
    }
    ::google::protobuf::int32 Stream::drift() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.drift)
        return drift_;
    }
    void Stream::set_drift(::google::protobuf::int32 value)
    {
        set_has_drift();
        drift_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.drift)
    }

    // optional int32 level = 5;
    bool Stream::has_level() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Stream::set_has_level()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Stream::clear_has_level()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Stream::clear_level()
    {
        level_ = 0;
        clear_has_level();
    }
    ::google::protobuf::int32 Stream::level() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.level)
        return level_;
    }
    void Stream::set_level(::google::protobuf::int32 value)
    {
        set_has_level();
        level_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.level)
    }

    // optional bool keypress = 6;
    bool Stream::has_keypress() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void Stream::set_has_keypress()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void Stream::clear_has_keypress()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void Stream::clear_keypress()
    {
        keypress_ = false;
        clear_has_keypress();
    }
    bool Stream::keypress() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.keypress)
        return keypress_;
    }
    void Stream::set_keypress(bool value)
    {
        set_has_keypress();
        keypress_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.keypress)
    }

    // repeated bytes input_channel = 7;
    int Stream::input_channel_size() const
    {
        return input_channel_.size();
    }
    void Stream::clear_input_channel()
    {
        input_channel_.Clear();
    }
    const ::std::string& Stream::input_channel(int index) const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.input_channel)
        return input_channel_.Get(index);
    }
    ::std::string* Stream::mutable_input_channel(int index)
    {
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.input_channel)
        return input_channel_.Mutable(index);
    }
    void Stream::set_input_channel(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_channel)
        input_channel_.Mutable(index)->assign(value);
    }
    void Stream::set_input_channel(int index, const char* value)
    {
        input_channel_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.input_channel)
    }
    void Stream::set_input_channel(int index, const void* value, size_t size)
    {
        input_channel_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.input_channel)
    }
    ::std::string* Stream::add_input_channel()
    {
        // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.Stream.input_channel)
        return input_channel_.Add();
    }
    void Stream::add_input_channel(const ::std::string& value)
    {
        input_channel_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.input_channel)
    }
    void Stream::add_input_channel(const char* value)
    {
        input_channel_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:webrtc.audioproc.Stream.input_channel)
    }
    void Stream::add_input_channel(const void* value, size_t size)
    {
        input_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.Stream.input_channel)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    Stream::input_channel() const
    {
        // @@protoc_insertion_point(field_list:webrtc.audioproc.Stream.input_channel)
        return input_channel_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    Stream::mutable_input_channel()
    {
        // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Stream.input_channel)
        return &input_channel_;
    }

    // repeated bytes output_channel = 8;
    int Stream::output_channel_size() const
    {
        return output_channel_.size();
    }
    void Stream::clear_output_channel()
    {
        output_channel_.Clear();
    }
    const ::std::string& Stream::output_channel(int index) const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.output_channel)
        return output_channel_.Get(index);
    }
    ::std::string* Stream::mutable_output_channel(int index)
    {
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.output_channel)
        return output_channel_.Mutable(index);
    }
    void Stream::set_output_channel(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_channel)
        output_channel_.Mutable(index)->assign(value);
    }
    void Stream::set_output_channel(int index, const char* value)
    {
        output_channel_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.output_channel)
    }
    void Stream::set_output_channel(int index, const void* value, size_t size)
    {
        output_channel_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.output_channel)
    }
    ::std::string* Stream::add_output_channel()
    {
        // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.Stream.output_channel)
        return output_channel_.Add();
    }
    void Stream::add_output_channel(const ::std::string& value)
    {
        output_channel_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.output_channel)
    }
    void Stream::add_output_channel(const char* value)
    {
        output_channel_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:webrtc.audioproc.Stream.output_channel)
    }
    void Stream::add_output_channel(const void* value, size_t size)
    {
        output_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.Stream.output_channel)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    Stream::output_channel() const
    {
        // @@protoc_insertion_point(field_list:webrtc.audioproc.Stream.output_channel)
        return output_channel_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    Stream::mutable_output_channel()
    {
        // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Stream.output_channel)
        return &output_channel_;
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForConfig(
        Config* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Config::kAecEnabledFieldNumber;
    const int Config::kAecDelayAgnosticEnabledFieldNumber;
    const int Config::kAecDriftCompensationEnabledFieldNumber;
    const int Config::kAecExtendedFilterEnabledFieldNumber;
    const int Config::kAecSuppressionLevelFieldNumber;
    const int Config::kAecmEnabledFieldNumber;
    const int Config::kAecmComfortNoiseEnabledFieldNumber;
    const int Config::kAecmRoutingModeFieldNumber;
    const int Config::kAgcEnabledFieldNumber;
    const int Config::kAgcModeFieldNumber;
    const int Config::kAgcLimiterEnabledFieldNumber;
    const int Config::kNoiseRobustAgcEnabledFieldNumber;
    const int Config::kHpfEnabledFieldNumber;
    const int Config::kNsEnabledFieldNumber;
    const int Config::kNsLevelFieldNumber;
    const int Config::kTransientSuppressionEnabledFieldNumber;
    const int Config::kExperimentsDescriptionFieldNumber;
    const int Config::kIntelligibilityEnhancerEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Config::Config()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:webrtc.audioproc.Config)
    }

    void Config::InitAsDefaultInstance()
    {
    }

    Config::Config(const Config& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Config)
    }

    void Config::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        aec_enabled_ = false;
        aec_delay_agnostic_enabled_ = false;
        aec_drift_compensation_enabled_ = false;
        aec_extended_filter_enabled_ = false;
        aec_suppression_level_ = 0;
        aecm_enabled_ = false;
        aecm_comfort_noise_enabled_ = false;
        aecm_routing_mode_ = 0;
        agc_enabled_ = false;
        agc_mode_ = 0;
        agc_limiter_enabled_ = false;
        noise_robust_agc_enabled_ = false;
        hpf_enabled_ = false;
        ns_enabled_ = false;
        ns_level_ = 0;
        transient_suppression_enabled_ = false;
        experiments_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        intelligibility_enhancer_enabled_ = false;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Config::~Config()
    {
        // @@protoc_insertion_point(destructor:webrtc.audioproc.Config)
        SharedDtor();
    }

    void Config::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        experiments_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Config::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Config& Config::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_debug_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_debug_2eproto();
#endif
        return *default_instance_;
    }

    Config* Config::default_instance_ = NULL;

    Config* Config::New(::google::protobuf::Arena* arena) const
    {
        Config* n = new Config;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Config::Clear()
    {
// @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Config)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                            \
    _Pragma("clang diagnostic push")                                                             \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Config, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Config*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 255u) {
            ZR_(aec_enabled_, aecm_comfort_noise_enabled_);
        }
        if (_has_bits_[8 / 32] & 65280u) {
            ZR_(agc_enabled_, ns_level_);
        }
        if (_has_bits_[16 / 32] & 196608u) {
            if (has_experiments_description()) {
                experiments_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            intelligibility_enhancer_enabled_ = false;
        }

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Config::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForConfig, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:webrtc.audioproc.Config)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional bool aec_enabled = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &aec_enabled_)));
                    set_has_aec_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_aec_delay_agnostic_enabled;
                break;
            }

            // optional bool aec_delay_agnostic_enabled = 2;
            case 2: {
                if (tag == 16) {
                parse_aec_delay_agnostic_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &aec_delay_agnostic_enabled_)));
                    set_has_aec_delay_agnostic_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_aec_drift_compensation_enabled;
                break;
            }

            // optional bool aec_drift_compensation_enabled = 3;
            case 3: {
                if (tag == 24) {
                parse_aec_drift_compensation_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &aec_drift_compensation_enabled_)));
                    set_has_aec_drift_compensation_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32))
                    goto parse_aec_extended_filter_enabled;
                break;
            }

            // optional bool aec_extended_filter_enabled = 4;
            case 4: {
                if (tag == 32) {
                parse_aec_extended_filter_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &aec_extended_filter_enabled_)));
                    set_has_aec_extended_filter_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(40))
                    goto parse_aec_suppression_level;
                break;
            }

            // optional int32 aec_suppression_level = 5;
            case 5: {
                if (tag == 40) {
                parse_aec_suppression_level:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &aec_suppression_level_)));
                    set_has_aec_suppression_level();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(48))
                    goto parse_aecm_enabled;
                break;
            }

            // optional bool aecm_enabled = 6;
            case 6: {
                if (tag == 48) {
                parse_aecm_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &aecm_enabled_)));
                    set_has_aecm_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(56))
                    goto parse_aecm_comfort_noise_enabled;
                break;
            }

            // optional bool aecm_comfort_noise_enabled = 7;
            case 7: {
                if (tag == 56) {
                parse_aecm_comfort_noise_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &aecm_comfort_noise_enabled_)));
                    set_has_aecm_comfort_noise_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(64))
                    goto parse_aecm_routing_mode;
                break;
            }

            // optional int32 aecm_routing_mode = 8;
            case 8: {
                if (tag == 64) {
                parse_aecm_routing_mode:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &aecm_routing_mode_)));
                    set_has_aecm_routing_mode();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(72))
                    goto parse_agc_enabled;
                break;
            }

            // optional bool agc_enabled = 9;
            case 9: {
                if (tag == 72) {
                parse_agc_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &agc_enabled_)));
                    set_has_agc_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(80))
                    goto parse_agc_mode;
                break;
            }

            // optional int32 agc_mode = 10;
            case 10: {
                if (tag == 80) {
                parse_agc_mode:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &agc_mode_)));
                    set_has_agc_mode();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(88))
                    goto parse_agc_limiter_enabled;
                break;
            }

            // optional bool agc_limiter_enabled = 11;
            case 11: {
                if (tag == 88) {
                parse_agc_limiter_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &agc_limiter_enabled_)));
                    set_has_agc_limiter_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(96))
                    goto parse_noise_robust_agc_enabled;
                break;
            }

            // optional bool noise_robust_agc_enabled = 12;
            case 12: {
                if (tag == 96) {
                parse_noise_robust_agc_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &noise_robust_agc_enabled_)));
                    set_has_noise_robust_agc_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(104))
                    goto parse_hpf_enabled;
                break;
            }

            // optional bool hpf_enabled = 13;
            case 13: {
                if (tag == 104) {
                parse_hpf_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &hpf_enabled_)));
                    set_has_hpf_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(112))
                    goto parse_ns_enabled;
                break;
            }

            // optional bool ns_enabled = 14;
            case 14: {
                if (tag == 112) {
                parse_ns_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &ns_enabled_)));
                    set_has_ns_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(120))
                    goto parse_ns_level;
                break;
            }

            // optional int32 ns_level = 15;
            case 15: {
                if (tag == 120) {
                parse_ns_level:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &ns_level_)));
                    set_has_ns_level();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(128))
                    goto parse_transient_suppression_enabled;
                break;
            }

            // optional bool transient_suppression_enabled = 16;
            case 16: {
                if (tag == 128) {
                parse_transient_suppression_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &transient_suppression_enabled_)));
                    set_has_transient_suppression_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(138))
                    goto parse_experiments_description;
                break;
            }

            // optional string experiments_description = 17;
            case 17: {
                if (tag == 138) {
                parse_experiments_description:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_experiments_description()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(144))
                    goto parse_intelligibility_enhancer_enabled;
                break;
            }

            // optional bool intelligibility_enhancer_enabled = 18;
            case 18: {
                if (tag == 144) {
                parse_intelligibility_enhancer_enabled:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &intelligibility_enhancer_enabled_)));
                    set_has_intelligibility_enhancer_enabled();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:webrtc.audioproc.Config)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Config)
        return false;
#undef DO_
    }

    void Config::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Config)
        // optional bool aec_enabled = 1;
        if (has_aec_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->aec_enabled(), output);
        }

        // optional bool aec_delay_agnostic_enabled = 2;
        if (has_aec_delay_agnostic_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->aec_delay_agnostic_enabled(), output);
        }

        // optional bool aec_drift_compensation_enabled = 3;
        if (has_aec_drift_compensation_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->aec_drift_compensation_enabled(), output);
        }

        // optional bool aec_extended_filter_enabled = 4;
        if (has_aec_extended_filter_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->aec_extended_filter_enabled(), output);
        }

        // optional int32 aec_suppression_level = 5;
        if (has_aec_suppression_level()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->aec_suppression_level(), output);
        }

        // optional bool aecm_enabled = 6;
        if (has_aecm_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->aecm_enabled(), output);
        }

        // optional bool aecm_comfort_noise_enabled = 7;
        if (has_aecm_comfort_noise_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->aecm_comfort_noise_enabled(), output);
        }

        // optional int32 aecm_routing_mode = 8;
        if (has_aecm_routing_mode()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->aecm_routing_mode(), output);
        }

        // optional bool agc_enabled = 9;
        if (has_agc_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->agc_enabled(), output);
        }

        // optional int32 agc_mode = 10;
        if (has_agc_mode()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->agc_mode(), output);
        }

        // optional bool agc_limiter_enabled = 11;
        if (has_agc_limiter_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->agc_limiter_enabled(), output);
        }

        // optional bool noise_robust_agc_enabled = 12;
        if (has_noise_robust_agc_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->noise_robust_agc_enabled(), output);
        }

        // optional bool hpf_enabled = 13;
        if (has_hpf_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->hpf_enabled(), output);
        }

        // optional bool ns_enabled = 14;
        if (has_ns_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ns_enabled(), output);
        }

        // optional int32 ns_level = 15;
        if (has_ns_level()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ns_level(), output);
        }

        // optional bool transient_suppression_enabled = 16;
        if (has_transient_suppression_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->transient_suppression_enabled(), output);
        }

        // optional string experiments_description = 17;
        if (has_experiments_description()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                17, this->experiments_description(), output);
        }

        // optional bool intelligibility_enhancer_enabled = 18;
        if (has_intelligibility_enhancer_enabled()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->intelligibility_enhancer_enabled(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Config)
    }

    int Config::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Config)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 255u) {
            // optional bool aec_enabled = 1;
            if (has_aec_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool aec_delay_agnostic_enabled = 2;
            if (has_aec_delay_agnostic_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool aec_drift_compensation_enabled = 3;
            if (has_aec_drift_compensation_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool aec_extended_filter_enabled = 4;
            if (has_aec_extended_filter_enabled()) {
                total_size += 1 + 1;
            }

            // optional int32 aec_suppression_level = 5;
            if (has_aec_suppression_level()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->aec_suppression_level());
            }

            // optional bool aecm_enabled = 6;
            if (has_aecm_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool aecm_comfort_noise_enabled = 7;
            if (has_aecm_comfort_noise_enabled()) {
                total_size += 1 + 1;
            }

            // optional int32 aecm_routing_mode = 8;
            if (has_aecm_routing_mode()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->aecm_routing_mode());
            }
        }
        if (_has_bits_[8 / 32] & 65280u) {
            // optional bool agc_enabled = 9;
            if (has_agc_enabled()) {
                total_size += 1 + 1;
            }

            // optional int32 agc_mode = 10;
            if (has_agc_mode()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->agc_mode());
            }

            // optional bool agc_limiter_enabled = 11;
            if (has_agc_limiter_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool noise_robust_agc_enabled = 12;
            if (has_noise_robust_agc_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool hpf_enabled = 13;
            if (has_hpf_enabled()) {
                total_size += 1 + 1;
            }

            // optional bool ns_enabled = 14;
            if (has_ns_enabled()) {
                total_size += 1 + 1;
            }

            // optional int32 ns_level = 15;
            if (has_ns_level()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->ns_level());
            }

            // optional bool transient_suppression_enabled = 16;
            if (has_transient_suppression_enabled()) {
                total_size += 2 + 1;
            }
        }
        if (_has_bits_[16 / 32] & 196608u) {
            // optional string experiments_description = 17;
            if (has_experiments_description()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->experiments_description());
            }

            // optional bool intelligibility_enhancer_enabled = 18;
            if (has_intelligibility_enhancer_enabled()) {
                total_size += 2 + 1;
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Config::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Config*>(&from));
    }

    void Config::MergeFrom(const Config& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Config)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_aec_enabled()) {
                set_aec_enabled(from.aec_enabled());
            }
            if (from.has_aec_delay_agnostic_enabled()) {
                set_aec_delay_agnostic_enabled(from.aec_delay_agnostic_enabled());
            }
            if (from.has_aec_drift_compensation_enabled()) {
                set_aec_drift_compensation_enabled(from.aec_drift_compensation_enabled());
            }
            if (from.has_aec_extended_filter_enabled()) {
                set_aec_extended_filter_enabled(from.aec_extended_filter_enabled());
            }
            if (from.has_aec_suppression_level()) {
                set_aec_suppression_level(from.aec_suppression_level());
            }
            if (from.has_aecm_enabled()) {
                set_aecm_enabled(from.aecm_enabled());
            }
            if (from.has_aecm_comfort_noise_enabled()) {
                set_aecm_comfort_noise_enabled(from.aecm_comfort_noise_enabled());
            }
            if (from.has_aecm_routing_mode()) {
                set_aecm_routing_mode(from.aecm_routing_mode());
            }
        }
        if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
            if (from.has_agc_enabled()) {
                set_agc_enabled(from.agc_enabled());
            }
            if (from.has_agc_mode()) {
                set_agc_mode(from.agc_mode());
            }
            if (from.has_agc_limiter_enabled()) {
                set_agc_limiter_enabled(from.agc_limiter_enabled());
            }
            if (from.has_noise_robust_agc_enabled()) {
                set_noise_robust_agc_enabled(from.noise_robust_agc_enabled());
            }
            if (from.has_hpf_enabled()) {
                set_hpf_enabled(from.hpf_enabled());
            }
            if (from.has_ns_enabled()) {
                set_ns_enabled(from.ns_enabled());
            }
            if (from.has_ns_level()) {
                set_ns_level(from.ns_level());
            }
            if (from.has_transient_suppression_enabled()) {
                set_transient_suppression_enabled(from.transient_suppression_enabled());
            }
        }
        if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
            if (from.has_experiments_description()) {
                set_has_experiments_description();
                experiments_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.experiments_description_);
            }
            if (from.has_intelligibility_enhancer_enabled()) {
                set_intelligibility_enhancer_enabled(from.intelligibility_enhancer_enabled());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Config::CopyFrom(const Config& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Config)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Config::IsInitialized() const
    {

        return true;
    }

    void Config::Swap(Config* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Config::InternalSwap(Config* other)
    {
        std::swap(aec_enabled_, other->aec_enabled_);
        std::swap(aec_delay_agnostic_enabled_, other->aec_delay_agnostic_enabled_);
        std::swap(aec_drift_compensation_enabled_, other->aec_drift_compensation_enabled_);
        std::swap(aec_extended_filter_enabled_, other->aec_extended_filter_enabled_);
        std::swap(aec_suppression_level_, other->aec_suppression_level_);
        std::swap(aecm_enabled_, other->aecm_enabled_);
        std::swap(aecm_comfort_noise_enabled_, other->aecm_comfort_noise_enabled_);
        std::swap(aecm_routing_mode_, other->aecm_routing_mode_);
        std::swap(agc_enabled_, other->agc_enabled_);
        std::swap(agc_mode_, other->agc_mode_);
        std::swap(agc_limiter_enabled_, other->agc_limiter_enabled_);
        std::swap(noise_robust_agc_enabled_, other->noise_robust_agc_enabled_);
        std::swap(hpf_enabled_, other->hpf_enabled_);
        std::swap(ns_enabled_, other->ns_enabled_);
        std::swap(ns_level_, other->ns_level_);
        std::swap(transient_suppression_enabled_, other->transient_suppression_enabled_);
        experiments_description_.Swap(&other->experiments_description_);
        std::swap(intelligibility_enhancer_enabled_, other->intelligibility_enhancer_enabled_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Config::GetTypeName() const
    {
        return "webrtc.audioproc.Config";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Config

    // optional bool aec_enabled = 1;
    bool Config::has_aec_enabled() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Config::set_has_aec_enabled()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Config::clear_has_aec_enabled()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Config::clear_aec_enabled()
    {
        aec_enabled_ = false;
        clear_has_aec_enabled();
    }
    bool Config::aec_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_enabled)
        return aec_enabled_;
    }
    void Config::set_aec_enabled(bool value)
    {
        set_has_aec_enabled();
        aec_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_enabled)
    }

    // optional bool aec_delay_agnostic_enabled = 2;
    bool Config::has_aec_delay_agnostic_enabled() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Config::set_has_aec_delay_agnostic_enabled()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Config::clear_has_aec_delay_agnostic_enabled()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Config::clear_aec_delay_agnostic_enabled()
    {
        aec_delay_agnostic_enabled_ = false;
        clear_has_aec_delay_agnostic_enabled();
    }
    bool Config::aec_delay_agnostic_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_delay_agnostic_enabled)
        return aec_delay_agnostic_enabled_;
    }
    void Config::set_aec_delay_agnostic_enabled(bool value)
    {
        set_has_aec_delay_agnostic_enabled();
        aec_delay_agnostic_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_delay_agnostic_enabled)
    }

    // optional bool aec_drift_compensation_enabled = 3;
    bool Config::has_aec_drift_compensation_enabled() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Config::set_has_aec_drift_compensation_enabled()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Config::clear_has_aec_drift_compensation_enabled()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Config::clear_aec_drift_compensation_enabled()
    {
        aec_drift_compensation_enabled_ = false;
        clear_has_aec_drift_compensation_enabled();
    }
    bool Config::aec_drift_compensation_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_drift_compensation_enabled)
        return aec_drift_compensation_enabled_;
    }
    void Config::set_aec_drift_compensation_enabled(bool value)
    {
        set_has_aec_drift_compensation_enabled();
        aec_drift_compensation_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_drift_compensation_enabled)
    }

    // optional bool aec_extended_filter_enabled = 4;
    bool Config::has_aec_extended_filter_enabled() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Config::set_has_aec_extended_filter_enabled()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Config::clear_has_aec_extended_filter_enabled()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Config::clear_aec_extended_filter_enabled()
    {
        aec_extended_filter_enabled_ = false;
        clear_has_aec_extended_filter_enabled();
    }
    bool Config::aec_extended_filter_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_extended_filter_enabled)
        return aec_extended_filter_enabled_;
    }
    void Config::set_aec_extended_filter_enabled(bool value)
    {
        set_has_aec_extended_filter_enabled();
        aec_extended_filter_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_extended_filter_enabled)
    }

    // optional int32 aec_suppression_level = 5;
    bool Config::has_aec_suppression_level() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Config::set_has_aec_suppression_level()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Config::clear_has_aec_suppression_level()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Config::clear_aec_suppression_level()
    {
        aec_suppression_level_ = 0;
        clear_has_aec_suppression_level();
    }
    ::google::protobuf::int32 Config::aec_suppression_level() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_suppression_level)
        return aec_suppression_level_;
    }
    void Config::set_aec_suppression_level(::google::protobuf::int32 value)
    {
        set_has_aec_suppression_level();
        aec_suppression_level_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_suppression_level)
    }

    // optional bool aecm_enabled = 6;
    bool Config::has_aecm_enabled() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void Config::set_has_aecm_enabled()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void Config::clear_has_aecm_enabled()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void Config::clear_aecm_enabled()
    {
        aecm_enabled_ = false;
        clear_has_aecm_enabled();
    }
    bool Config::aecm_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_enabled)
        return aecm_enabled_;
    }
    void Config::set_aecm_enabled(bool value)
    {
        set_has_aecm_enabled();
        aecm_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_enabled)
    }

    // optional bool aecm_comfort_noise_enabled = 7;
    bool Config::has_aecm_comfort_noise_enabled() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void Config::set_has_aecm_comfort_noise_enabled()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void Config::clear_has_aecm_comfort_noise_enabled()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void Config::clear_aecm_comfort_noise_enabled()
    {
        aecm_comfort_noise_enabled_ = false;
        clear_has_aecm_comfort_noise_enabled();
    }
    bool Config::aecm_comfort_noise_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_comfort_noise_enabled)
        return aecm_comfort_noise_enabled_;
    }
    void Config::set_aecm_comfort_noise_enabled(bool value)
    {
        set_has_aecm_comfort_noise_enabled();
        aecm_comfort_noise_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_comfort_noise_enabled)
    }

    // optional int32 aecm_routing_mode = 8;
    bool Config::has_aecm_routing_mode() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    void Config::set_has_aecm_routing_mode()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    void Config::clear_has_aecm_routing_mode()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    void Config::clear_aecm_routing_mode()
    {
        aecm_routing_mode_ = 0;
        clear_has_aecm_routing_mode();
    }
    ::google::protobuf::int32 Config::aecm_routing_mode() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_routing_mode)
        return aecm_routing_mode_;
    }
    void Config::set_aecm_routing_mode(::google::protobuf::int32 value)
    {
        set_has_aecm_routing_mode();
        aecm_routing_mode_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_routing_mode)
    }

    // optional bool agc_enabled = 9;
    bool Config::has_agc_enabled() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    void Config::set_has_agc_enabled()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    void Config::clear_has_agc_enabled()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    void Config::clear_agc_enabled()
    {
        agc_enabled_ = false;
        clear_has_agc_enabled();
    }
    bool Config::agc_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_enabled)
        return agc_enabled_;
    }
    void Config::set_agc_enabled(bool value)
    {
        set_has_agc_enabled();
        agc_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_enabled)
    }

    // optional int32 agc_mode = 10;
    bool Config::has_agc_mode() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    void Config::set_has_agc_mode()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    void Config::clear_has_agc_mode()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    void Config::clear_agc_mode()
    {
        agc_mode_ = 0;
        clear_has_agc_mode();
    }
    ::google::protobuf::int32 Config::agc_mode() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_mode)
        return agc_mode_;
    }
    void Config::set_agc_mode(::google::protobuf::int32 value)
    {
        set_has_agc_mode();
        agc_mode_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_mode)
    }

    // optional bool agc_limiter_enabled = 11;
    bool Config::has_agc_limiter_enabled() const
    {
        return (_has_bits_[0] & 0x00000400u) != 0;
    }
    void Config::set_has_agc_limiter_enabled()
    {
        _has_bits_[0] |= 0x00000400u;
    }
    void Config::clear_has_agc_limiter_enabled()
    {
        _has_bits_[0] &= ~0x00000400u;
    }
    void Config::clear_agc_limiter_enabled()
    {
        agc_limiter_enabled_ = false;
        clear_has_agc_limiter_enabled();
    }
    bool Config::agc_limiter_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_limiter_enabled)
        return agc_limiter_enabled_;
    }
    void Config::set_agc_limiter_enabled(bool value)
    {
        set_has_agc_limiter_enabled();
        agc_limiter_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_limiter_enabled)
    }

    // optional bool noise_robust_agc_enabled = 12;
    bool Config::has_noise_robust_agc_enabled() const
    {
        return (_has_bits_[0] & 0x00000800u) != 0;
    }
    void Config::set_has_noise_robust_agc_enabled()
    {
        _has_bits_[0] |= 0x00000800u;
    }
    void Config::clear_has_noise_robust_agc_enabled()
    {
        _has_bits_[0] &= ~0x00000800u;
    }
    void Config::clear_noise_robust_agc_enabled()
    {
        noise_robust_agc_enabled_ = false;
        clear_has_noise_robust_agc_enabled();
    }
    bool Config::noise_robust_agc_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.noise_robust_agc_enabled)
        return noise_robust_agc_enabled_;
    }
    void Config::set_noise_robust_agc_enabled(bool value)
    {
        set_has_noise_robust_agc_enabled();
        noise_robust_agc_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.noise_robust_agc_enabled)
    }

    // optional bool hpf_enabled = 13;
    bool Config::has_hpf_enabled() const
    {
        return (_has_bits_[0] & 0x00001000u) != 0;
    }
    void Config::set_has_hpf_enabled()
    {
        _has_bits_[0] |= 0x00001000u;
    }
    void Config::clear_has_hpf_enabled()
    {
        _has_bits_[0] &= ~0x00001000u;
    }
    void Config::clear_hpf_enabled()
    {
        hpf_enabled_ = false;
        clear_has_hpf_enabled();
    }
    bool Config::hpf_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.hpf_enabled)
        return hpf_enabled_;
    }
    void Config::set_hpf_enabled(bool value)
    {
        set_has_hpf_enabled();
        hpf_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.hpf_enabled)
    }

    // optional bool ns_enabled = 14;
    bool Config::has_ns_enabled() const
    {
        return (_has_bits_[0] & 0x00002000u) != 0;
    }
    void Config::set_has_ns_enabled()
    {
        _has_bits_[0] |= 0x00002000u;
    }
    void Config::clear_has_ns_enabled()
    {
        _has_bits_[0] &= ~0x00002000u;
    }
    void Config::clear_ns_enabled()
    {
        ns_enabled_ = false;
        clear_has_ns_enabled();
    }
    bool Config::ns_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.ns_enabled)
        return ns_enabled_;
    }
    void Config::set_ns_enabled(bool value)
    {
        set_has_ns_enabled();
        ns_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.ns_enabled)
    }

    // optional int32 ns_level = 15;
    bool Config::has_ns_level() const
    {
        return (_has_bits_[0] & 0x00004000u) != 0;
    }
    void Config::set_has_ns_level()
    {
        _has_bits_[0] |= 0x00004000u;
    }
    void Config::clear_has_ns_level()
    {
        _has_bits_[0] &= ~0x00004000u;
    }
    void Config::clear_ns_level()
    {
        ns_level_ = 0;
        clear_has_ns_level();
    }
    ::google::protobuf::int32 Config::ns_level() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.ns_level)
        return ns_level_;
    }
    void Config::set_ns_level(::google::protobuf::int32 value)
    {
        set_has_ns_level();
        ns_level_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.ns_level)
    }

    // optional bool transient_suppression_enabled = 16;
    bool Config::has_transient_suppression_enabled() const
    {
        return (_has_bits_[0] & 0x00008000u) != 0;
    }
    void Config::set_has_transient_suppression_enabled()
    {
        _has_bits_[0] |= 0x00008000u;
    }
    void Config::clear_has_transient_suppression_enabled()
    {
        _has_bits_[0] &= ~0x00008000u;
    }
    void Config::clear_transient_suppression_enabled()
    {
        transient_suppression_enabled_ = false;
        clear_has_transient_suppression_enabled();
    }
    bool Config::transient_suppression_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.transient_suppression_enabled)
        return transient_suppression_enabled_;
    }
    void Config::set_transient_suppression_enabled(bool value)
    {
        set_has_transient_suppression_enabled();
        transient_suppression_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.transient_suppression_enabled)
    }

    // optional string experiments_description = 17;
    bool Config::has_experiments_description() const
    {
        return (_has_bits_[0] & 0x00010000u) != 0;
    }
    void Config::set_has_experiments_description()
    {
        _has_bits_[0] |= 0x00010000u;
    }
    void Config::clear_has_experiments_description()
    {
        _has_bits_[0] &= ~0x00010000u;
    }
    void Config::clear_experiments_description()
    {
        experiments_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_experiments_description();
    }
    const ::std::string& Config::experiments_description() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.experiments_description)
        return experiments_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Config::set_experiments_description(const ::std::string& value)
    {
        set_has_experiments_description();
        experiments_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.experiments_description)
    }
    void Config::set_experiments_description(const char* value)
    {
        set_has_experiments_description();
        experiments_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Config.experiments_description)
    }
    void Config::set_experiments_description(const char* value, size_t size)
    {
        set_has_experiments_description();
        experiments_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Config.experiments_description)
    }
    ::std::string* Config::mutable_experiments_description()
    {
        set_has_experiments_description();
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Config.experiments_description)
        return experiments_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Config::release_experiments_description()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Config.experiments_description)
        clear_has_experiments_description();
        return experiments_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Config::set_allocated_experiments_description(::std::string* experiments_description)
    {
        if (experiments_description != NULL) {
            set_has_experiments_description();
        } else {
            clear_has_experiments_description();
        }
        experiments_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiments_description);
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Config.experiments_description)
    }

    // optional bool intelligibility_enhancer_enabled = 18;
    bool Config::has_intelligibility_enhancer_enabled() const
    {
        return (_has_bits_[0] & 0x00020000u) != 0;
    }
    void Config::set_has_intelligibility_enhancer_enabled()
    {
        _has_bits_[0] |= 0x00020000u;
    }
    void Config::clear_has_intelligibility_enhancer_enabled()
    {
        _has_bits_[0] &= ~0x00020000u;
    }
    void Config::clear_intelligibility_enhancer_enabled()
    {
        intelligibility_enhancer_enabled_ = false;
        clear_has_intelligibility_enhancer_enabled();
    }
    bool Config::intelligibility_enhancer_enabled() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.intelligibility_enhancer_enabled)
        return intelligibility_enhancer_enabled_;
    }
    void Config::set_intelligibility_enhancer_enabled(bool value)
    {
        set_has_intelligibility_enhancer_enabled();
        intelligibility_enhancer_enabled_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.intelligibility_enhancer_enabled)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForEvent(
        Event* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    bool Event_Type_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
            return true;
        default:
            return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const Event_Type Event::INIT;
    const Event_Type Event::REVERSE_STREAM;
    const Event_Type Event::STREAM;
    const Event_Type Event::CONFIG;
    const Event_Type Event::UNKNOWN_EVENT;
    const Event_Type Event::Type_MIN;
    const Event_Type Event::Type_MAX;
    const int Event::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Event::kTypeFieldNumber;
    const int Event::kInitFieldNumber;
    const int Event::kReverseStreamFieldNumber;
    const int Event::kStreamFieldNumber;
    const int Event::kConfigFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Event::Event()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:webrtc.audioproc.Event)
    }

    void Event::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        init_ = const_cast<::webrtc::audioproc::Init*>(
            ::webrtc::audioproc::Init::internal_default_instance());
#else
        init_ = const_cast<::webrtc::audioproc::Init*>(&::webrtc::audioproc::Init::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        reverse_stream_ = const_cast<::webrtc::audioproc::ReverseStream*>(
            ::webrtc::audioproc::ReverseStream::internal_default_instance());
#else
        reverse_stream_ = const_cast<::webrtc::audioproc::ReverseStream*>(&::webrtc::audioproc::ReverseStream::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        stream_ = const_cast<::webrtc::audioproc::Stream*>(
            ::webrtc::audioproc::Stream::internal_default_instance());
#else
        stream_ = const_cast<::webrtc::audioproc::Stream*>(&::webrtc::audioproc::Stream::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        config_ = const_cast<::webrtc::audioproc::Config*>(
            ::webrtc::audioproc::Config::internal_default_instance());
#else
        config_ = const_cast<::webrtc::audioproc::Config*>(&::webrtc::audioproc::Config::default_instance());
#endif
    }

    Event::Event(const Event& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:webrtc.audioproc.Event)
    }

    void Event::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        type_ = 0;
        init_ = NULL;
        reverse_stream_ = NULL;
        stream_ = NULL;
        config_ = NULL;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Event::~Event()
    {
        // @@protoc_insertion_point(destructor:webrtc.audioproc.Event)
        SharedDtor();
    }

    void Event::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete init_;
            delete reverse_stream_;
            delete stream_;
            delete config_;
        }
    }

    void Event::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Event& Event::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_debug_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_debug_2eproto();
#endif
        return *default_instance_;
    }

    Event* Event::default_instance_ = NULL;

    Event* Event::New(::google::protobuf::Arena* arena) const
    {
        Event* n = new Event;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Event::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:webrtc.audioproc.Event)
        if (_has_bits_[0 / 32] & 31u) {
            type_ = 0;
            if (has_init()) {
                if (init_ != NULL)
                    init_->::webrtc::audioproc::Init::Clear();
            }
            if (has_reverse_stream()) {
                if (reverse_stream_ != NULL)
                    reverse_stream_->::webrtc::audioproc::ReverseStream::Clear();
            }
            if (has_stream()) {
                if (stream_ != NULL)
                    stream_->::webrtc::audioproc::Stream::Clear();
            }
            if (has_config()) {
                if (config_ != NULL)
                    config_->::webrtc::audioproc::Config::Clear();
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Event::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForEvent, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:webrtc.audioproc.Event)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required .webrtc.audioproc.Event.Type type = 1;
            case 1: {
                if (tag == 8) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::webrtc::audioproc::Event_Type_IsValid(value)) {
                        set_type(static_cast<::webrtc::audioproc::Event_Type>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(8);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_init;
                break;
            }

            // optional .webrtc.audioproc.Init init = 2;
            case 2: {
                if (tag == 18) {
                parse_init:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_init()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_reverse_stream;
                break;
            }

            // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
            case 3: {
                if (tag == 26) {
                parse_reverse_stream:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_reverse_stream()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_stream;
                break;
            }

            // optional .webrtc.audioproc.Stream stream = 4;
            case 4: {
                if (tag == 34) {
                parse_stream:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_stream()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_config;
                break;
            }

            // optional .webrtc.audioproc.Config config = 5;
            case 5: {
                if (tag == 42) {
                parse_config:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_config()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:webrtc.audioproc.Event)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:webrtc.audioproc.Event)
        return false;
#undef DO_
    }

    void Event::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:webrtc.audioproc.Event)
        // required .webrtc.audioproc.Event.Type type = 1;
        if (has_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->type(), output);
        }

        // optional .webrtc.audioproc.Init init = 2;
        if (has_init()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, *this->init_, output);
        }

        // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
        if (has_reverse_stream()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                3, *this->reverse_stream_, output);
        }

        // optional .webrtc.audioproc.Stream stream = 4;
        if (has_stream()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                4, *this->stream_, output);
        }

        // optional .webrtc.audioproc.Config config = 5;
        if (has_config()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, *this->config_, output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:webrtc.audioproc.Event)
    }

    int Event::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:webrtc.audioproc.Event)
        int total_size = 0;

        // required .webrtc.audioproc.Event.Type type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }
        if (_has_bits_[1 / 32] & 30u) {
            // optional .webrtc.audioproc.Init init = 2;
            if (has_init()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->init_);
            }

            // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
            if (has_reverse_stream()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->reverse_stream_);
            }

            // optional .webrtc.audioproc.Stream stream = 4;
            if (has_stream()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->stream_);
            }

            // optional .webrtc.audioproc.Config config = 5;
            if (has_config()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->config_);
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Event::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
    }

    void Event::MergeFrom(const Event& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audioproc.Event)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_type()) {
                set_type(from.type());
            }
            if (from.has_init()) {
                mutable_init()->::webrtc::audioproc::Init::MergeFrom(from.init());
            }
            if (from.has_reverse_stream()) {
                mutable_reverse_stream()->::webrtc::audioproc::ReverseStream::MergeFrom(from.reverse_stream());
            }
            if (from.has_stream()) {
                mutable_stream()->::webrtc::audioproc::Stream::MergeFrom(from.stream());
            }
            if (from.has_config()) {
                mutable_config()->::webrtc::audioproc::Config::MergeFrom(from.config());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Event::CopyFrom(const Event& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audioproc.Event)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Event::IsInitialized() const
    {
        if ((_has_bits_[0] & 0x00000001) != 0x00000001)
            return false;

        return true;
    }

    void Event::Swap(Event* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Event::InternalSwap(Event* other)
    {
        std::swap(type_, other->type_);
        std::swap(init_, other->init_);
        std::swap(reverse_stream_, other->reverse_stream_);
        std::swap(stream_, other->stream_);
        std::swap(config_, other->config_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Event::GetTypeName() const
    {
        return "webrtc.audioproc.Event";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Event

    // required .webrtc.audioproc.Event.Type type = 1;
    bool Event::has_type() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Event::set_has_type()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Event::clear_has_type()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Event::clear_type()
    {
        type_ = 0;
        clear_has_type();
    }
    ::webrtc::audioproc::Event_Type Event::type() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.type)
        return static_cast<::webrtc::audioproc::Event_Type>(type_);
    }
    void Event::set_type(::webrtc::audioproc::Event_Type value)
    {
        assert(::webrtc::audioproc::Event_Type_IsValid(value));
        set_has_type();
        type_ = value;
        // @@protoc_insertion_point(field_set:webrtc.audioproc.Event.type)
    }

    // optional .webrtc.audioproc.Init init = 2;
    bool Event::has_init() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Event::set_has_init()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Event::clear_has_init()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Event::clear_init()
    {
        if (init_ != NULL)
            init_->::webrtc::audioproc::Init::Clear();
        clear_has_init();
    }
    const ::webrtc::audioproc::Init& Event::init() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.init)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return init_ != NULL ? *init_ : *default_instance().init_;
#else
        return init_ != NULL ? *init_ : *default_instance_->init_;
#endif
    }
    ::webrtc::audioproc::Init* Event::mutable_init()
    {
        set_has_init();
        if (init_ == NULL) {
            init_ = new ::webrtc::audioproc::Init;
        }
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.init)
        return init_;
    }
    ::webrtc::audioproc::Init* Event::release_init()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.init)
        clear_has_init();
        ::webrtc::audioproc::Init* temp = init_;
        init_ = NULL;
        return temp;
    }
    void Event::set_allocated_init(::webrtc::audioproc::Init* init)
    {
        delete init_;
        init_ = init;
        if (init) {
            set_has_init();
        } else {
            clear_has_init();
        }
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.init)
    }

    // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
    bool Event::has_reverse_stream() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Event::set_has_reverse_stream()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Event::clear_has_reverse_stream()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Event::clear_reverse_stream()
    {
        if (reverse_stream_ != NULL)
            reverse_stream_->::webrtc::audioproc::ReverseStream::Clear();
        clear_has_reverse_stream();
    }
    const ::webrtc::audioproc::ReverseStream& Event::reverse_stream() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.reverse_stream)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return reverse_stream_ != NULL ? *reverse_stream_ : *default_instance().reverse_stream_;
#else
        return reverse_stream_ != NULL ? *reverse_stream_ : *default_instance_->reverse_stream_;
#endif
    }
    ::webrtc::audioproc::ReverseStream* Event::mutable_reverse_stream()
    {
        set_has_reverse_stream();
        if (reverse_stream_ == NULL) {
            reverse_stream_ = new ::webrtc::audioproc::ReverseStream;
        }
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.reverse_stream)
        return reverse_stream_;
    }
    ::webrtc::audioproc::ReverseStream* Event::release_reverse_stream()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.reverse_stream)
        clear_has_reverse_stream();
        ::webrtc::audioproc::ReverseStream* temp = reverse_stream_;
        reverse_stream_ = NULL;
        return temp;
    }
    void Event::set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* reverse_stream)
    {
        delete reverse_stream_;
        reverse_stream_ = reverse_stream;
        if (reverse_stream) {
            set_has_reverse_stream();
        } else {
            clear_has_reverse_stream();
        }
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.reverse_stream)
    }

    // optional .webrtc.audioproc.Stream stream = 4;
    bool Event::has_stream() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Event::set_has_stream()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Event::clear_has_stream()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Event::clear_stream()
    {
        if (stream_ != NULL)
            stream_->::webrtc::audioproc::Stream::Clear();
        clear_has_stream();
    }
    const ::webrtc::audioproc::Stream& Event::stream() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.stream)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return stream_ != NULL ? *stream_ : *default_instance().stream_;
#else
        return stream_ != NULL ? *stream_ : *default_instance_->stream_;
#endif
    }
    ::webrtc::audioproc::Stream* Event::mutable_stream()
    {
        set_has_stream();
        if (stream_ == NULL) {
            stream_ = new ::webrtc::audioproc::Stream;
        }
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.stream)
        return stream_;
    }
    ::webrtc::audioproc::Stream* Event::release_stream()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.stream)
        clear_has_stream();
        ::webrtc::audioproc::Stream* temp = stream_;
        stream_ = NULL;
        return temp;
    }
    void Event::set_allocated_stream(::webrtc::audioproc::Stream* stream)
    {
        delete stream_;
        stream_ = stream;
        if (stream) {
            set_has_stream();
        } else {
            clear_has_stream();
        }
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.stream)
    }

    // optional .webrtc.audioproc.Config config = 5;
    bool Event::has_config() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Event::set_has_config()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Event::clear_has_config()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Event::clear_config()
    {
        if (config_ != NULL)
            config_->::webrtc::audioproc::Config::Clear();
        clear_has_config();
    }
    const ::webrtc::audioproc::Config& Event::config() const
    {
        // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return config_ != NULL ? *config_ : *default_instance().config_;
#else
        return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
    }
    ::webrtc::audioproc::Config* Event::mutable_config()
    {
        set_has_config();
        if (config_ == NULL) {
            config_ = new ::webrtc::audioproc::Config;
        }
        // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.config)
        return config_;
    }
    ::webrtc::audioproc::Config* Event::release_config()
    {
        // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.config)
        clear_has_config();
        ::webrtc::audioproc::Config* temp = config_;
        config_ = NULL;
        return temp;
    }
    void Event::set_allocated_config(::webrtc::audioproc::Config* config)
    {
        delete config_;
        config_ = config;
        if (config) {
            set_has_config();
        } else {
            clear_has_config();
        }
        // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.config)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace audioproc
} // namespace webrtc

// @@protoc_insertion_point(global_scope)
