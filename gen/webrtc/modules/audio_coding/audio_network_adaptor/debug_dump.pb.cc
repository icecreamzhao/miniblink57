// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_dump.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "debug_dump.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace audio_network_adaptor {
    namespace debug_dump {

        void protobuf_ShutdownFile_debug_5fdump_2eproto()
        {
            delete NetworkMetrics::default_instance_;
            delete EncoderRuntimeConfig::default_instance_;
            delete Event::default_instance_;
        }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        void protobuf_AddDesc_debug_5fdump_2eproto_impl()
        {
            GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
        void protobuf_AddDesc_debug_5fdump_2eproto()
        {
            static bool already_here = false;
            if (already_here)
                return;
            already_here = true;
            GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
            NetworkMetrics::default_instance_ = new NetworkMetrics();
            EncoderRuntimeConfig::default_instance_ = new EncoderRuntimeConfig();
            Event::default_instance_ = new Event();
            NetworkMetrics::default_instance_->InitAsDefaultInstance();
            EncoderRuntimeConfig::default_instance_->InitAsDefaultInstance();
            Event::default_instance_->InitAsDefaultInstance();
            ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_debug_5fdump_2eproto);
        }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_debug_5fdump_2eproto_once_);
        void protobuf_AddDesc_debug_5fdump_2eproto()
        {
            ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_debug_5fdump_2eproto_once_,
                &protobuf_AddDesc_debug_5fdump_2eproto_impl);
        }
#else
        // Force AddDescriptors() to be called at static initialization time.
        struct StaticDescriptorInitializer_debug_5fdump_2eproto {
            StaticDescriptorInitializer_debug_5fdump_2eproto()
            {
                protobuf_AddDesc_debug_5fdump_2eproto();
            }
        } static_descriptor_initializer_debug_5fdump_2eproto_;
#endif

        namespace {

            static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
            GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
            {
                GOOGLE_CHECK(false) << __FILE__ << ":" << line;
            }

        } // namespace

        // ===================================================================

        static ::std::string* MutableUnknownFieldsForNetworkMetrics(
            NetworkMetrics* ptr)
        {
            return ptr->mutable_unknown_fields();
        }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int NetworkMetrics::kUplinkBandwidthBpsFieldNumber;
        const int NetworkMetrics::kUplinkPacketLossFractionFieldNumber;
        const int NetworkMetrics::kTargetAudioBitrateBpsFieldNumber;
        const int NetworkMetrics::kRttMsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        NetworkMetrics::NetworkMetrics()
            : ::google::protobuf::MessageLite()
            , _arena_ptr_(NULL)
        {
            SharedCtor();
            // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
        }

        void NetworkMetrics::InitAsDefaultInstance()
        {
        }

        NetworkMetrics::NetworkMetrics(const NetworkMetrics& from)
            : ::google::protobuf::MessageLite()
            , _arena_ptr_(NULL)
        {
            SharedCtor();
            MergeFrom(from);
            // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
        }

        void NetworkMetrics::SharedCtor()
        {
            ::google::protobuf::internal::GetEmptyString();
            _cached_size_ = 0;
            _unknown_fields_.UnsafeSetDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
            uplink_bandwidth_bps_ = 0;
            uplink_packet_loss_fraction_ = 0;
            target_audio_bitrate_bps_ = 0;
            rtt_ms_ = 0;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        NetworkMetrics::~NetworkMetrics()
        {
            // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            SharedDtor();
        }

        void NetworkMetrics::SharedDtor()
        {
            _unknown_fields_.DestroyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            if (this != &default_instance()) {
#else
            if (this != default_instance_) {
#endif
            }
        }

        void NetworkMetrics::SetCachedSize(int size) const
        {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const NetworkMetrics& NetworkMetrics::default_instance()
        {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            protobuf_AddDesc_debug_5fdump_2eproto();
#else
            if (default_instance_ == NULL)
                protobuf_AddDesc_debug_5fdump_2eproto();
#endif
            return *default_instance_;
        }

        NetworkMetrics* NetworkMetrics::default_instance_ = NULL;

        NetworkMetrics* NetworkMetrics::New(::google::protobuf::Arena* arena) const
        {
            NetworkMetrics* n = new NetworkMetrics;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void NetworkMetrics::Clear()
        {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                    \
    _Pragma("clang diagnostic push")                                                                     \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(NetworkMetrics, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<NetworkMetrics*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

            ZR_(uplink_bandwidth_bps_, rtt_ms_);

#undef ZR_HELPER_
#undef ZR_

            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            _unknown_fields_.ClearToEmptyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        bool NetworkMetrics::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input)
        {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
            ::google::protobuf::uint32 tag;
            ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
                ::google::protobuf::internal::NewPermanentCallback(
                    &MutableUnknownFieldsForNetworkMetrics, this));
            ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_string, false);
            // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            for (;;) {
                ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 uplink_bandwidth_bps = 1;
                case 1: {
                    if (tag == 8) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &uplink_bandwidth_bps_)));
                        set_has_uplink_bandwidth_bps();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(21))
                        goto parse_uplink_packet_loss_fraction;
                    break;
                }

                // optional float uplink_packet_loss_fraction = 2;
                case 2: {
                    if (tag == 21) {
                    parse_uplink_packet_loss_fraction:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &uplink_packet_loss_fraction_)));
                        set_has_uplink_packet_loss_fraction();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(24))
                        goto parse_target_audio_bitrate_bps;
                    break;
                }

                // optional int32 target_audio_bitrate_bps = 3;
                case 3: {
                    if (tag == 24) {
                    parse_target_audio_bitrate_bps:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &target_audio_bitrate_bps_)));
                        set_has_target_audio_bitrate_bps();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(32))
                        goto parse_rtt_ms;
                    break;
                }

                // optional int32 rtt_ms = 4;
                case 4: {
                    if (tag == 32) {
                    parse_rtt_ms:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &rtt_ms_)));
                        set_has_rtt_ms();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectAtEnd())
                        goto success;
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                        input, tag, &unknown_fields_stream));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            return false;
#undef DO_
        }

        void NetworkMetrics::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const
        {
            // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            // optional int32 uplink_bandwidth_bps = 1;
            if (has_uplink_bandwidth_bps()) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uplink_bandwidth_bps(), output);
            }

            // optional float uplink_packet_loss_fraction = 2;
            if (has_uplink_packet_loss_fraction()) {
                ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->uplink_packet_loss_fraction(), output);
            }

            // optional int32 target_audio_bitrate_bps = 3;
            if (has_target_audio_bitrate_bps()) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_audio_bitrate_bps(), output);
            }

            // optional int32 rtt_ms = 4;
            if (has_rtt_ms()) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rtt_ms(), output);
            }

            output->WriteRaw(unknown_fields().data(),
                static_cast<int>(unknown_fields().size()));
            // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
        }

        int NetworkMetrics::ByteSize() const
        {
            // @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            int total_size = 0;

            if (_has_bits_[0 / 32] & 15u) {
                // optional int32 uplink_bandwidth_bps = 1;
                if (has_uplink_bandwidth_bps()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->uplink_bandwidth_bps());
                }

                // optional float uplink_packet_loss_fraction = 2;
                if (has_uplink_packet_loss_fraction()) {
                    total_size += 1 + 4;
                }

                // optional int32 target_audio_bitrate_bps = 3;
                if (has_target_audio_bitrate_bps()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->target_audio_bitrate_bps());
                }

                // optional int32 rtt_ms = 4;
                if (has_rtt_ms()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->rtt_ms());
                }
            }
            total_size += unknown_fields().size();

            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void NetworkMetrics::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from)
        {
            MergeFrom(*::google::protobuf::down_cast<const NetworkMetrics*>(&from));
        }

        void NetworkMetrics::MergeFrom(const NetworkMetrics& from)
        {
            // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            if (GOOGLE_PREDICT_FALSE(&from == this))
                MergeFromFail(__LINE__);
            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (from.has_uplink_bandwidth_bps()) {
                    set_uplink_bandwidth_bps(from.uplink_bandwidth_bps());
                }
                if (from.has_uplink_packet_loss_fraction()) {
                    set_uplink_packet_loss_fraction(from.uplink_packet_loss_fraction());
                }
                if (from.has_target_audio_bitrate_bps()) {
                    set_target_audio_bitrate_bps(from.target_audio_bitrate_bps());
                }
                if (from.has_rtt_ms()) {
                    set_rtt_ms(from.rtt_ms());
                }
            }
            if (!from.unknown_fields().empty()) {
                mutable_unknown_fields()->append(from.unknown_fields());
            }
        }

        void NetworkMetrics::CopyFrom(const NetworkMetrics& from)
        {
            // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool NetworkMetrics::IsInitialized() const
        {

            return true;
        }

        void NetworkMetrics::Swap(NetworkMetrics* other)
        {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void NetworkMetrics::InternalSwap(NetworkMetrics* other)
        {
            std::swap(uplink_bandwidth_bps_, other->uplink_bandwidth_bps_);
            std::swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
            std::swap(target_audio_bitrate_bps_, other->target_audio_bitrate_bps_);
            std::swap(rtt_ms_, other->rtt_ms_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }

        ::std::string NetworkMetrics::GetTypeName() const
        {
            return "webrtc.audio_network_adaptor.debug_dump.NetworkMetrics";
        }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
        // NetworkMetrics

        // optional int32 uplink_bandwidth_bps = 1;
        bool NetworkMetrics::has_uplink_bandwidth_bps() const
        {
            return (_has_bits_[0] & 0x00000001u) != 0;
        }
        void NetworkMetrics::set_has_uplink_bandwidth_bps()
        {
            _has_bits_[0] |= 0x00000001u;
        }
        void NetworkMetrics::clear_has_uplink_bandwidth_bps()
        {
            _has_bits_[0] &= ~0x00000001u;
        }
        void NetworkMetrics::clear_uplink_bandwidth_bps()
        {
            uplink_bandwidth_bps_ = 0;
            clear_has_uplink_bandwidth_bps();
        }
        ::google::protobuf::int32 NetworkMetrics::uplink_bandwidth_bps() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_bandwidth_bps)
            return uplink_bandwidth_bps_;
        }
        void NetworkMetrics::set_uplink_bandwidth_bps(::google::protobuf::int32 value)
        {
            set_has_uplink_bandwidth_bps();
            uplink_bandwidth_bps_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_bandwidth_bps)
        }

        // optional float uplink_packet_loss_fraction = 2;
        bool NetworkMetrics::has_uplink_packet_loss_fraction() const
        {
            return (_has_bits_[0] & 0x00000002u) != 0;
        }
        void NetworkMetrics::set_has_uplink_packet_loss_fraction()
        {
            _has_bits_[0] |= 0x00000002u;
        }
        void NetworkMetrics::clear_has_uplink_packet_loss_fraction()
        {
            _has_bits_[0] &= ~0x00000002u;
        }
        void NetworkMetrics::clear_uplink_packet_loss_fraction()
        {
            uplink_packet_loss_fraction_ = 0;
            clear_has_uplink_packet_loss_fraction();
        }
        float NetworkMetrics::uplink_packet_loss_fraction() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_packet_loss_fraction)
            return uplink_packet_loss_fraction_;
        }
        void NetworkMetrics::set_uplink_packet_loss_fraction(float value)
        {
            set_has_uplink_packet_loss_fraction();
            uplink_packet_loss_fraction_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.uplink_packet_loss_fraction)
        }

        // optional int32 target_audio_bitrate_bps = 3;
        bool NetworkMetrics::has_target_audio_bitrate_bps() const
        {
            return (_has_bits_[0] & 0x00000004u) != 0;
        }
        void NetworkMetrics::set_has_target_audio_bitrate_bps()
        {
            _has_bits_[0] |= 0x00000004u;
        }
        void NetworkMetrics::clear_has_target_audio_bitrate_bps()
        {
            _has_bits_[0] &= ~0x00000004u;
        }
        void NetworkMetrics::clear_target_audio_bitrate_bps()
        {
            target_audio_bitrate_bps_ = 0;
            clear_has_target_audio_bitrate_bps();
        }
        ::google::protobuf::int32 NetworkMetrics::target_audio_bitrate_bps() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.target_audio_bitrate_bps)
            return target_audio_bitrate_bps_;
        }
        void NetworkMetrics::set_target_audio_bitrate_bps(::google::protobuf::int32 value)
        {
            set_has_target_audio_bitrate_bps();
            target_audio_bitrate_bps_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.target_audio_bitrate_bps)
        }

        // optional int32 rtt_ms = 4;
        bool NetworkMetrics::has_rtt_ms() const
        {
            return (_has_bits_[0] & 0x00000008u) != 0;
        }
        void NetworkMetrics::set_has_rtt_ms()
        {
            _has_bits_[0] |= 0x00000008u;
        }
        void NetworkMetrics::clear_has_rtt_ms()
        {
            _has_bits_[0] &= ~0x00000008u;
        }
        void NetworkMetrics::clear_rtt_ms()
        {
            rtt_ms_ = 0;
            clear_has_rtt_ms();
        }
        ::google::protobuf::int32 NetworkMetrics::rtt_ms() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.rtt_ms)
            return rtt_ms_;
        }
        void NetworkMetrics::set_rtt_ms(::google::protobuf::int32 value)
        {
            set_has_rtt_ms();
            rtt_ms_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.NetworkMetrics.rtt_ms)
        }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

        // ===================================================================

        static ::std::string* MutableUnknownFieldsForEncoderRuntimeConfig(
            EncoderRuntimeConfig* ptr)
        {
            return ptr->mutable_unknown_fields();
        }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int EncoderRuntimeConfig::kBitrateBpsFieldNumber;
        const int EncoderRuntimeConfig::kFrameLengthMsFieldNumber;
        const int EncoderRuntimeConfig::kUplinkPacketLossFractionFieldNumber;
        const int EncoderRuntimeConfig::kEnableFecFieldNumber;
        const int EncoderRuntimeConfig::kEnableDtxFieldNumber;
        const int EncoderRuntimeConfig::kNumChannelsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        EncoderRuntimeConfig::EncoderRuntimeConfig()
            : ::google::protobuf::MessageLite()
            , _arena_ptr_(NULL)
        {
            SharedCtor();
            // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
        }

        void EncoderRuntimeConfig::InitAsDefaultInstance()
        {
        }

        EncoderRuntimeConfig::EncoderRuntimeConfig(const EncoderRuntimeConfig& from)
            : ::google::protobuf::MessageLite()
            , _arena_ptr_(NULL)
        {
            SharedCtor();
            MergeFrom(from);
            // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
        }

        void EncoderRuntimeConfig::SharedCtor()
        {
            ::google::protobuf::internal::GetEmptyString();
            _cached_size_ = 0;
            _unknown_fields_.UnsafeSetDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
            bitrate_bps_ = 0;
            frame_length_ms_ = 0;
            uplink_packet_loss_fraction_ = 0;
            enable_fec_ = false;
            enable_dtx_ = false;
            num_channels_ = 0u;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        EncoderRuntimeConfig::~EncoderRuntimeConfig()
        {
            // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            SharedDtor();
        }

        void EncoderRuntimeConfig::SharedDtor()
        {
            _unknown_fields_.DestroyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            if (this != &default_instance()) {
#else
            if (this != default_instance_) {
#endif
            }
        }

        void EncoderRuntimeConfig::SetCachedSize(int size) const
        {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const EncoderRuntimeConfig& EncoderRuntimeConfig::default_instance()
        {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            protobuf_AddDesc_debug_5fdump_2eproto();
#else
            if (default_instance_ == NULL)
                protobuf_AddDesc_debug_5fdump_2eproto();
#endif
            return *default_instance_;
        }

        EncoderRuntimeConfig* EncoderRuntimeConfig::default_instance_ = NULL;

        EncoderRuntimeConfig* EncoderRuntimeConfig::New(::google::protobuf::Arena* arena) const
        {
            EncoderRuntimeConfig* n = new EncoderRuntimeConfig;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void EncoderRuntimeConfig::Clear()
        {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                          \
    _Pragma("clang diagnostic push")                                                                           \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(EncoderRuntimeConfig, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<EncoderRuntimeConfig*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

            if (_has_bits_[0 / 32] & 63u) {
                ZR_(bitrate_bps_, num_channels_);
            }

#undef ZR_HELPER_
#undef ZR_

            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            _unknown_fields_.ClearToEmptyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        bool EncoderRuntimeConfig::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input)
        {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
            ::google::protobuf::uint32 tag;
            ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
                ::google::protobuf::internal::NewPermanentCallback(
                    &MutableUnknownFieldsForEncoderRuntimeConfig, this));
            ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_string, false);
            // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            for (;;) {
                ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 bitrate_bps = 1;
                case 1: {
                    if (tag == 8) {
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &bitrate_bps_)));
                        set_has_bitrate_bps();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(16))
                        goto parse_frame_length_ms;
                    break;
                }

                // optional int32 frame_length_ms = 2;
                case 2: {
                    if (tag == 16) {
                    parse_frame_length_ms:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &frame_length_ms_)));
                        set_has_frame_length_ms();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(29))
                        goto parse_uplink_packet_loss_fraction;
                    break;
                }

                // optional float uplink_packet_loss_fraction = 3;
                case 3: {
                    if (tag == 29) {
                    parse_uplink_packet_loss_fraction:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &uplink_packet_loss_fraction_)));
                        set_has_uplink_packet_loss_fraction();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(32))
                        goto parse_enable_fec;
                    break;
                }

                // optional bool enable_fec = 4;
                case 4: {
                    if (tag == 32) {
                    parse_enable_fec:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                            input, &enable_fec_)));
                        set_has_enable_fec();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(40))
                        goto parse_enable_dtx;
                    break;
                }

                // optional bool enable_dtx = 5;
                case 5: {
                    if (tag == 40) {
                    parse_enable_dtx:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                            input, &enable_dtx_)));
                        set_has_enable_dtx();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(48))
                        goto parse_num_channels;
                    break;
                }

                // optional uint32 num_channels = 6;
                case 6: {
                    if (tag == 48) {
                    parse_num_channels:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                            input, &num_channels_)));
                        set_has_num_channels();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectAtEnd())
                        goto success;
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                        input, tag, &unknown_fields_stream));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            return false;
#undef DO_
        }

        void EncoderRuntimeConfig::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const
        {
            // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            // optional int32 bitrate_bps = 1;
            if (has_bitrate_bps()) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bitrate_bps(), output);
            }

            // optional int32 frame_length_ms = 2;
            if (has_frame_length_ms()) {
                ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_length_ms(), output);
            }

            // optional float uplink_packet_loss_fraction = 3;
            if (has_uplink_packet_loss_fraction()) {
                ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->uplink_packet_loss_fraction(), output);
            }

            // optional bool enable_fec = 4;
            if (has_enable_fec()) {
                ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_fec(), output);
            }

            // optional bool enable_dtx = 5;
            if (has_enable_dtx()) {
                ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_dtx(), output);
            }

            // optional uint32 num_channels = 6;
            if (has_num_channels()) {
                ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_channels(), output);
            }

            output->WriteRaw(unknown_fields().data(),
                static_cast<int>(unknown_fields().size()));
            // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
        }

        int EncoderRuntimeConfig::ByteSize() const
        {
            // @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            int total_size = 0;

            if (_has_bits_[0 / 32] & 63u) {
                // optional int32 bitrate_bps = 1;
                if (has_bitrate_bps()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->bitrate_bps());
                }

                // optional int32 frame_length_ms = 2;
                if (has_frame_length_ms()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->frame_length_ms());
                }

                // optional float uplink_packet_loss_fraction = 3;
                if (has_uplink_packet_loss_fraction()) {
                    total_size += 1 + 4;
                }

                // optional bool enable_fec = 4;
                if (has_enable_fec()) {
                    total_size += 1 + 1;
                }

                // optional bool enable_dtx = 5;
                if (has_enable_dtx()) {
                    total_size += 1 + 1;
                }

                // optional uint32 num_channels = 6;
                if (has_num_channels()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_channels());
                }
            }
            total_size += unknown_fields().size();

            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void EncoderRuntimeConfig::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from)
        {
            MergeFrom(*::google::protobuf::down_cast<const EncoderRuntimeConfig*>(&from));
        }

        void EncoderRuntimeConfig::MergeFrom(const EncoderRuntimeConfig& from)
        {
            // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            if (GOOGLE_PREDICT_FALSE(&from == this))
                MergeFromFail(__LINE__);
            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (from.has_bitrate_bps()) {
                    set_bitrate_bps(from.bitrate_bps());
                }
                if (from.has_frame_length_ms()) {
                    set_frame_length_ms(from.frame_length_ms());
                }
                if (from.has_uplink_packet_loss_fraction()) {
                    set_uplink_packet_loss_fraction(from.uplink_packet_loss_fraction());
                }
                if (from.has_enable_fec()) {
                    set_enable_fec(from.enable_fec());
                }
                if (from.has_enable_dtx()) {
                    set_enable_dtx(from.enable_dtx());
                }
                if (from.has_num_channels()) {
                    set_num_channels(from.num_channels());
                }
            }
            if (!from.unknown_fields().empty()) {
                mutable_unknown_fields()->append(from.unknown_fields());
            }
        }

        void EncoderRuntimeConfig::CopyFrom(const EncoderRuntimeConfig& from)
        {
            // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool EncoderRuntimeConfig::IsInitialized() const
        {

            return true;
        }

        void EncoderRuntimeConfig::Swap(EncoderRuntimeConfig* other)
        {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void EncoderRuntimeConfig::InternalSwap(EncoderRuntimeConfig* other)
        {
            std::swap(bitrate_bps_, other->bitrate_bps_);
            std::swap(frame_length_ms_, other->frame_length_ms_);
            std::swap(uplink_packet_loss_fraction_, other->uplink_packet_loss_fraction_);
            std::swap(enable_fec_, other->enable_fec_);
            std::swap(enable_dtx_, other->enable_dtx_);
            std::swap(num_channels_, other->num_channels_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }

        ::std::string EncoderRuntimeConfig::GetTypeName() const
        {
            return "webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig";
        }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
        // EncoderRuntimeConfig

        // optional int32 bitrate_bps = 1;
        bool EncoderRuntimeConfig::has_bitrate_bps() const
        {
            return (_has_bits_[0] & 0x00000001u) != 0;
        }
        void EncoderRuntimeConfig::set_has_bitrate_bps()
        {
            _has_bits_[0] |= 0x00000001u;
        }
        void EncoderRuntimeConfig::clear_has_bitrate_bps()
        {
            _has_bits_[0] &= ~0x00000001u;
        }
        void EncoderRuntimeConfig::clear_bitrate_bps()
        {
            bitrate_bps_ = 0;
            clear_has_bitrate_bps();
        }
        ::google::protobuf::int32 EncoderRuntimeConfig::bitrate_bps() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.bitrate_bps)
            return bitrate_bps_;
        }
        void EncoderRuntimeConfig::set_bitrate_bps(::google::protobuf::int32 value)
        {
            set_has_bitrate_bps();
            bitrate_bps_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.bitrate_bps)
        }

        // optional int32 frame_length_ms = 2;
        bool EncoderRuntimeConfig::has_frame_length_ms() const
        {
            return (_has_bits_[0] & 0x00000002u) != 0;
        }
        void EncoderRuntimeConfig::set_has_frame_length_ms()
        {
            _has_bits_[0] |= 0x00000002u;
        }
        void EncoderRuntimeConfig::clear_has_frame_length_ms()
        {
            _has_bits_[0] &= ~0x00000002u;
        }
        void EncoderRuntimeConfig::clear_frame_length_ms()
        {
            frame_length_ms_ = 0;
            clear_has_frame_length_ms();
        }
        ::google::protobuf::int32 EncoderRuntimeConfig::frame_length_ms() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.frame_length_ms)
            return frame_length_ms_;
        }
        void EncoderRuntimeConfig::set_frame_length_ms(::google::protobuf::int32 value)
        {
            set_has_frame_length_ms();
            frame_length_ms_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.frame_length_ms)
        }

        // optional float uplink_packet_loss_fraction = 3;
        bool EncoderRuntimeConfig::has_uplink_packet_loss_fraction() const
        {
            return (_has_bits_[0] & 0x00000004u) != 0;
        }
        void EncoderRuntimeConfig::set_has_uplink_packet_loss_fraction()
        {
            _has_bits_[0] |= 0x00000004u;
        }
        void EncoderRuntimeConfig::clear_has_uplink_packet_loss_fraction()
        {
            _has_bits_[0] &= ~0x00000004u;
        }
        void EncoderRuntimeConfig::clear_uplink_packet_loss_fraction()
        {
            uplink_packet_loss_fraction_ = 0;
            clear_has_uplink_packet_loss_fraction();
        }
        float EncoderRuntimeConfig::uplink_packet_loss_fraction() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.uplink_packet_loss_fraction)
            return uplink_packet_loss_fraction_;
        }
        void EncoderRuntimeConfig::set_uplink_packet_loss_fraction(float value)
        {
            set_has_uplink_packet_loss_fraction();
            uplink_packet_loss_fraction_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.uplink_packet_loss_fraction)
        }

        // optional bool enable_fec = 4;
        bool EncoderRuntimeConfig::has_enable_fec() const
        {
            return (_has_bits_[0] & 0x00000008u) != 0;
        }
        void EncoderRuntimeConfig::set_has_enable_fec()
        {
            _has_bits_[0] |= 0x00000008u;
        }
        void EncoderRuntimeConfig::clear_has_enable_fec()
        {
            _has_bits_[0] &= ~0x00000008u;
        }
        void EncoderRuntimeConfig::clear_enable_fec()
        {
            enable_fec_ = false;
            clear_has_enable_fec();
        }
        bool EncoderRuntimeConfig::enable_fec() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_fec)
            return enable_fec_;
        }
        void EncoderRuntimeConfig::set_enable_fec(bool value)
        {
            set_has_enable_fec();
            enable_fec_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_fec)
        }

        // optional bool enable_dtx = 5;
        bool EncoderRuntimeConfig::has_enable_dtx() const
        {
            return (_has_bits_[0] & 0x00000010u) != 0;
        }
        void EncoderRuntimeConfig::set_has_enable_dtx()
        {
            _has_bits_[0] |= 0x00000010u;
        }
        void EncoderRuntimeConfig::clear_has_enable_dtx()
        {
            _has_bits_[0] &= ~0x00000010u;
        }
        void EncoderRuntimeConfig::clear_enable_dtx()
        {
            enable_dtx_ = false;
            clear_has_enable_dtx();
        }
        bool EncoderRuntimeConfig::enable_dtx() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_dtx)
            return enable_dtx_;
        }
        void EncoderRuntimeConfig::set_enable_dtx(bool value)
        {
            set_has_enable_dtx();
            enable_dtx_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.enable_dtx)
        }

        // optional uint32 num_channels = 6;
        bool EncoderRuntimeConfig::has_num_channels() const
        {
            return (_has_bits_[0] & 0x00000020u) != 0;
        }
        void EncoderRuntimeConfig::set_has_num_channels()
        {
            _has_bits_[0] |= 0x00000020u;
        }
        void EncoderRuntimeConfig::clear_has_num_channels()
        {
            _has_bits_[0] &= ~0x00000020u;
        }
        void EncoderRuntimeConfig::clear_num_channels()
        {
            num_channels_ = 0u;
            clear_has_num_channels();
        }
        ::google::protobuf::uint32 EncoderRuntimeConfig::num_channels() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.num_channels)
            return num_channels_;
        }
        void EncoderRuntimeConfig::set_num_channels(::google::protobuf::uint32 value)
        {
            set_has_num_channels();
            num_channels_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig.num_channels)
        }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

        // ===================================================================

        static ::std::string* MutableUnknownFieldsForEvent(
            Event* ptr)
        {
            return ptr->mutable_unknown_fields();
        }

        bool Event_Type_IsValid(int value)
        {
            switch (value) {
            case 0:
            case 1:
                return true;
            default:
                return false;
            }
        }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const Event_Type Event::NETWORK_METRICS;
        const Event_Type Event::ENCODER_RUNTIME_CONFIG;
        const Event_Type Event::Type_MIN;
        const Event_Type Event::Type_MAX;
        const int Event::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
        const int Event::kTypeFieldNumber;
        const int Event::kTimestampFieldNumber;
        const int Event::kNetworkMetricsFieldNumber;
        const int Event::kEncoderRuntimeConfigFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

        Event::Event()
            : ::google::protobuf::MessageLite()
            , _arena_ptr_(NULL)
        {
            SharedCtor();
            // @@protoc_insertion_point(constructor:webrtc.audio_network_adaptor.debug_dump.Event)
        }

        void Event::InitAsDefaultInstance()
        {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            network_metrics_ = const_cast<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*>(
                ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::internal_default_instance());
#else
            network_metrics_ = const_cast<::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics*>(&::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            encoder_runtime_config_ = const_cast<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*>(
                ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::internal_default_instance());
#else
            encoder_runtime_config_ = const_cast<::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig*>(&::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::default_instance());
#endif
        }

        Event::Event(const Event& from)
            : ::google::protobuf::MessageLite()
            , _arena_ptr_(NULL)
        {
            SharedCtor();
            MergeFrom(from);
            // @@protoc_insertion_point(copy_constructor:webrtc.audio_network_adaptor.debug_dump.Event)
        }

        void Event::SharedCtor()
        {
            ::google::protobuf::internal::GetEmptyString();
            _cached_size_ = 0;
            _unknown_fields_.UnsafeSetDefault(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
            type_ = 0;
            timestamp_ = 0u;
            network_metrics_ = NULL;
            encoder_runtime_config_ = NULL;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        Event::~Event()
        {
            // @@protoc_insertion_point(destructor:webrtc.audio_network_adaptor.debug_dump.Event)
            SharedDtor();
        }

        void Event::SharedDtor()
        {
            _unknown_fields_.DestroyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            if (this != &default_instance()) {
#else
            if (this != default_instance_) {
#endif
                delete network_metrics_;
                delete encoder_runtime_config_;
            }
        }

        void Event::SetCachedSize(int size) const
        {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const Event& Event::default_instance()
        {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            protobuf_AddDesc_debug_5fdump_2eproto();
#else
            if (default_instance_ == NULL)
                protobuf_AddDesc_debug_5fdump_2eproto();
#endif
            return *default_instance_;
        }

        Event* Event::default_instance_ = NULL;

        Event* Event::New(::google::protobuf::Arena* arena) const
        {
            Event* n = new Event;
            if (arena != NULL) {
                arena->Own(n);
            }
            return n;
        }

        void Event::Clear()
        {
// @@protoc_insertion_point(message_clear_start:webrtc.audio_network_adaptor.debug_dump.Event)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                           \
    _Pragma("clang diagnostic push")                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Event, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Event*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

            if (_has_bits_[0 / 32] & 15u) {
                ZR_(type_, timestamp_);
                if (has_network_metrics()) {
                    if (network_metrics_ != NULL)
                        network_metrics_->::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::Clear();
                }
                if (has_encoder_runtime_config()) {
                    if (encoder_runtime_config_ != NULL)
                        encoder_runtime_config_->::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::Clear();
                }
            }

#undef ZR_HELPER_
#undef ZR_

            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            _unknown_fields_.ClearToEmptyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        bool Event::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input)
        {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
            ::google::protobuf::uint32 tag;
            ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
                ::google::protobuf::internal::NewPermanentCallback(
                    &MutableUnknownFieldsForEvent, this));
            ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
                &unknown_fields_string, false);
            // @@protoc_insertion_point(parse_start:webrtc.audio_network_adaptor.debug_dump.Event)
            for (;;) {
                ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
                tag = p.first;
                if (!p.second)
                    goto handle_unusual;
                switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
                case 1: {
                    if (tag == 8) {
                        int value;
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                            input, &value)));
                        if (::webrtc::audio_network_adaptor::debug_dump::Event_Type_IsValid(value)) {
                            set_type(static_cast<::webrtc::audio_network_adaptor::debug_dump::Event_Type>(value));
                        } else {
                            unknown_fields_stream.WriteVarint32(8);
                            unknown_fields_stream.WriteVarint32(value);
                        }
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(16))
                        goto parse_timestamp;
                    break;
                }

                // required uint32 timestamp = 2;
                case 2: {
                    if (tag == 16) {
                    parse_timestamp:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                            input, &timestamp_)));
                        set_has_timestamp();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(26))
                        goto parse_network_metrics;
                    break;
                }

                // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
                case 3: {
                    if (tag == 26) {
                    parse_network_metrics:
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                            input, mutable_network_metrics()));
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(34))
                        goto parse_encoder_runtime_config;
                    break;
                }

                // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
                case 4: {
                    if (tag == 34) {
                    parse_encoder_runtime_config:
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                            input, mutable_encoder_runtime_config()));
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectAtEnd())
                        goto success;
                    break;
                }

                default: {
                handle_unusual:
                    if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                        input, tag, &unknown_fields_stream));
                    break;
                }
                }
            }
        success:
            // @@protoc_insertion_point(parse_success:webrtc.audio_network_adaptor.debug_dump.Event)
            return true;
        failure:
            // @@protoc_insertion_point(parse_failure:webrtc.audio_network_adaptor.debug_dump.Event)
            return false;
#undef DO_
        }

        void Event::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const
        {
            // @@protoc_insertion_point(serialize_start:webrtc.audio_network_adaptor.debug_dump.Event)
            // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
            if (has_type()) {
                ::google::protobuf::internal::WireFormatLite::WriteEnum(
                    1, this->type(), output);
            }

            // required uint32 timestamp = 2;
            if (has_timestamp()) {
                ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
            }

            // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
            if (has_network_metrics()) {
                ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    3, *this->network_metrics_, output);
            }

            // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
            if (has_encoder_runtime_config()) {
                ::google::protobuf::internal::WireFormatLite::WriteMessage(
                    4, *this->encoder_runtime_config_, output);
            }

            output->WriteRaw(unknown_fields().data(),
                static_cast<int>(unknown_fields().size()));
            // @@protoc_insertion_point(serialize_end:webrtc.audio_network_adaptor.debug_dump.Event)
        }

        int Event::RequiredFieldsByteSizeFallback() const
        {
            // @@protoc_insertion_point(required_fields_byte_size_fallback_start:webrtc.audio_network_adaptor.debug_dump.Event)
            int total_size = 0;

            if (has_type()) {
                // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
            }

            if (has_timestamp()) {
                // required uint32 timestamp = 2;
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->timestamp());
            }

            return total_size;
        }
        int Event::ByteSize() const
        {
            // @@protoc_insertion_point(message_byte_size_start:webrtc.audio_network_adaptor.debug_dump.Event)
            int total_size = 0;

            if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) { // All required fields are present.
                // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

                // required uint32 timestamp = 2;
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->timestamp());

            } else {
                total_size += RequiredFieldsByteSizeFallback();
            }
            if (_has_bits_[2 / 32] & 12u) {
                // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
                if (has_network_metrics()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->network_metrics_);
                }

                // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
                if (has_encoder_runtime_config()) {
                    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->encoder_runtime_config_);
                }
            }
            total_size += unknown_fields().size();

            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void Event::CheckTypeAndMergeFrom(
            const ::google::protobuf::MessageLite& from)
        {
            MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
        }

        void Event::MergeFrom(const Event& from)
        {
            // @@protoc_insertion_point(class_specific_merge_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
            if (GOOGLE_PREDICT_FALSE(&from == this))
                MergeFromFail(__LINE__);
            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (from.has_type()) {
                    set_type(from.type());
                }
                if (from.has_timestamp()) {
                    set_timestamp(from.timestamp());
                }
                if (from.has_network_metrics()) {
                    mutable_network_metrics()->::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::MergeFrom(from.network_metrics());
                }
                if (from.has_encoder_runtime_config()) {
                    mutable_encoder_runtime_config()->::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::MergeFrom(from.encoder_runtime_config());
                }
            }
            if (!from.unknown_fields().empty()) {
                mutable_unknown_fields()->append(from.unknown_fields());
            }
        }

        void Event::CopyFrom(const Event& from)
        {
            // @@protoc_insertion_point(class_specific_copy_from_start:webrtc.audio_network_adaptor.debug_dump.Event)
            if (&from == this)
                return;
            Clear();
            MergeFrom(from);
        }

        bool Event::IsInitialized() const
        {
            if ((_has_bits_[0] & 0x00000003) != 0x00000003)
                return false;

            return true;
        }

        void Event::Swap(Event* other)
        {
            if (other == this)
                return;
            InternalSwap(other);
        }
        void Event::InternalSwap(Event* other)
        {
            std::swap(type_, other->type_);
            std::swap(timestamp_, other->timestamp_);
            std::swap(network_metrics_, other->network_metrics_);
            std::swap(encoder_runtime_config_, other->encoder_runtime_config_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }

        ::std::string Event::GetTypeName() const
        {
            return "webrtc.audio_network_adaptor.debug_dump.Event";
        }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
        // Event

        // required .webrtc.audio_network_adaptor.debug_dump.Event.Type type = 1;
        bool Event::has_type() const
        {
            return (_has_bits_[0] & 0x00000001u) != 0;
        }
        void Event::set_has_type()
        {
            _has_bits_[0] |= 0x00000001u;
        }
        void Event::clear_has_type()
        {
            _has_bits_[0] &= ~0x00000001u;
        }
        void Event::clear_type()
        {
            type_ = 0;
            clear_has_type();
        }
        ::webrtc::audio_network_adaptor::debug_dump::Event_Type Event::type() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.type)
            return static_cast<::webrtc::audio_network_adaptor::debug_dump::Event_Type>(type_);
        }
        void Event::set_type(::webrtc::audio_network_adaptor::debug_dump::Event_Type value)
        {
            assert(::webrtc::audio_network_adaptor::debug_dump::Event_Type_IsValid(value));
            set_has_type();
            type_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.Event.type)
        }

        // required uint32 timestamp = 2;
        bool Event::has_timestamp() const
        {
            return (_has_bits_[0] & 0x00000002u) != 0;
        }
        void Event::set_has_timestamp()
        {
            _has_bits_[0] |= 0x00000002u;
        }
        void Event::clear_has_timestamp()
        {
            _has_bits_[0] &= ~0x00000002u;
        }
        void Event::clear_timestamp()
        {
            timestamp_ = 0u;
            clear_has_timestamp();
        }
        ::google::protobuf::uint32 Event::timestamp() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.timestamp)
            return timestamp_;
        }
        void Event::set_timestamp(::google::protobuf::uint32 value)
        {
            set_has_timestamp();
            timestamp_ = value;
            // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.debug_dump.Event.timestamp)
        }

        // optional .webrtc.audio_network_adaptor.debug_dump.NetworkMetrics network_metrics = 3;
        bool Event::has_network_metrics() const
        {
            return (_has_bits_[0] & 0x00000004u) != 0;
        }
        void Event::set_has_network_metrics()
        {
            _has_bits_[0] |= 0x00000004u;
        }
        void Event::clear_has_network_metrics()
        {
            _has_bits_[0] &= ~0x00000004u;
        }
        void Event::clear_network_metrics()
        {
            if (network_metrics_ != NULL)
                network_metrics_->::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics::Clear();
            clear_has_network_metrics();
        }
        const ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics& Event::network_metrics() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            return network_metrics_ != NULL ? *network_metrics_ : *default_instance().network_metrics_;
#else
            return network_metrics_ != NULL ? *network_metrics_ : *default_instance_->network_metrics_;
#endif
        }
        ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* Event::mutable_network_metrics()
        {
            set_has_network_metrics();
            if (network_metrics_ == NULL) {
                network_metrics_ = new ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics;
            }
            // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
            return network_metrics_;
        }
        ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* Event::release_network_metrics()
        {
            // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
            clear_has_network_metrics();
            ::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* temp = network_metrics_;
            network_metrics_ = NULL;
            return temp;
        }
        void Event::set_allocated_network_metrics(::webrtc::audio_network_adaptor::debug_dump::NetworkMetrics* network_metrics)
        {
            delete network_metrics_;
            network_metrics_ = network_metrics;
            if (network_metrics) {
                set_has_network_metrics();
            } else {
                clear_has_network_metrics();
            }
            // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.network_metrics)
        }

        // optional .webrtc.audio_network_adaptor.debug_dump.EncoderRuntimeConfig encoder_runtime_config = 4;
        bool Event::has_encoder_runtime_config() const
        {
            return (_has_bits_[0] & 0x00000008u) != 0;
        }
        void Event::set_has_encoder_runtime_config()
        {
            _has_bits_[0] |= 0x00000008u;
        }
        void Event::clear_has_encoder_runtime_config()
        {
            _has_bits_[0] &= ~0x00000008u;
        }
        void Event::clear_encoder_runtime_config()
        {
            if (encoder_runtime_config_ != NULL)
                encoder_runtime_config_->::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig::Clear();
            clear_has_encoder_runtime_config();
        }
        const ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig& Event::encoder_runtime_config() const
        {
            // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
            return encoder_runtime_config_ != NULL ? *encoder_runtime_config_ : *default_instance().encoder_runtime_config_;
#else
            return encoder_runtime_config_ != NULL ? *encoder_runtime_config_ : *default_instance_->encoder_runtime_config_;
#endif
        }
        ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* Event::mutable_encoder_runtime_config()
        {
            set_has_encoder_runtime_config();
            if (encoder_runtime_config_ == NULL) {
                encoder_runtime_config_ = new ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig;
            }
            // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
            return encoder_runtime_config_;
        }
        ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* Event::release_encoder_runtime_config()
        {
            // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
            clear_has_encoder_runtime_config();
            ::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* temp = encoder_runtime_config_;
            encoder_runtime_config_ = NULL;
            return temp;
        }
        void Event::set_allocated_encoder_runtime_config(::webrtc::audio_network_adaptor::debug_dump::EncoderRuntimeConfig* encoder_runtime_config)
        {
            delete encoder_runtime_config_;
            encoder_runtime_config_ = encoder_runtime_config;
            if (encoder_runtime_config) {
                set_has_encoder_runtime_config();
            } else {
                clear_has_encoder_runtime_config();
            }
            // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.debug_dump.Event.encoder_runtime_config)
        }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

        // @@protoc_insertion_point(namespace_scope)

    } // namespace debug_dump
} // namespace audio_network_adaptor
} // namespace webrtc

// @@protoc_insertion_point(global_scope)
