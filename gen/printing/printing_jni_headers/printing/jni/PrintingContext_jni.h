// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/printing/PrintingContext

#ifndef org_chromium_printing_PrintingContext_JNI
#define org_chromium_printing_PrintingContext_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPrintingContextClassPath[] = "org/chromium/printing/PrintingContext";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PrintingContext_clazz __attribute__((unused)) = 0;
#define PrintingContext_clazz(env) base::android::LazyGetClass(env, kPrintingContextClassPath, &g_PrintingContext_clazz)

} // namespace

namespace printing {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_printing_PrintingContext_nativeAskUserForSettingsReply(JNIEnv*
                                                                             env,
    jobject jcaller,
    jlong nativePrintingContextAndroid,
    jboolean success)
{
    PrintingContextAndroid* native = reinterpret_cast<PrintingContextAndroid*>(nativePrintingContextAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "AskUserForSettingsReply");
    return native->AskUserForSettingsReply(env,
        base::android::JavaParamRef<jobject>(env, jcaller), success);
}

JNI_GENERATOR_EXPORT void
Java_org_chromium_printing_PrintingContext_nativeShowSystemDialogDone(JNIEnv*
                                                                          env,
    jobject jcaller,
    jlong nativePrintingContextAndroid)
{
    PrintingContextAndroid* native = reinterpret_cast<PrintingContextAndroid*>(nativePrintingContextAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "ShowSystemDialogDone");
    return native->ShowSystemDialogDone(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_PrintingContext_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_PrintingContext_create(JNIEnv* env, jlong nativeObjectPointer)
{
    CHECK_CLAZZ(env, PrintingContext_clazz(env),
        PrintingContext_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, PrintingContext_clazz(env),
        "create",
        "("
        "J"
        ")"
        "Lorg/chromium/printing/PrintingContext;",
        &g_PrintingContext_create);

    jobject ret = env->CallStaticObjectMethod(PrintingContext_clazz(env),
        method_id, nativeObjectPointer);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PrintingContext_getFileDescriptor = 0;
static jint Java_PrintingContext_getFileDescriptor(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "getFileDescriptor",
        "("
        ")"
        "I",
        &g_PrintingContext_getFileDescriptor);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PrintingContext_getDpi = 0;
static jint Java_PrintingContext_getDpi(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "getDpi",
        "("
        ")"
        "I",
        &g_PrintingContext_getDpi);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PrintingContext_getWidth = 0;
static jint Java_PrintingContext_getWidth(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "getWidth",
        "("
        ")"
        "I",
        &g_PrintingContext_getWidth);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PrintingContext_getHeight = 0;
static jint Java_PrintingContext_getHeight(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "getHeight",
        "("
        ")"
        "I",
        &g_PrintingContext_getHeight);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_PrintingContext_showPrintDialog = 0;
static void Java_PrintingContext_showPrintDialog(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "showPrintDialog",
        "("
        ")"
        "V",
        &g_PrintingContext_showPrintDialog);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PrintingContext_pdfWritingDone = 0;
static void Java_PrintingContext_pdfWritingDone(JNIEnv* env, JniIntWrapper fd,
    jboolean success)
{
    CHECK_CLAZZ(env, PrintingContext_clazz(env),
        PrintingContext_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, PrintingContext_clazz(env),
        "pdfWritingDone",
        "("
        "I"
        "Z"
        ")"
        "V",
        &g_PrintingContext_pdfWritingDone);

    env->CallStaticVoidMethod(PrintingContext_clazz(env),
        method_id, as_jint(fd), success);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_PrintingContext_getPages = 0;
static base::android::ScopedJavaLocalRef<jintArray>
Java_PrintingContext_getPages(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "getPages",
        "("
        ")"
        "[I",
        &g_PrintingContext_getPages);

    jintArray ret = static_cast<jintArray>(env->CallObjectMethod(obj.obj(),
        method_id));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static base::subtle::AtomicWord g_PrintingContext_pageCountEstimationDone = 0;
static void Java_PrintingContext_pageCountEstimationDone(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper maxPages)
{
    CHECK_CLAZZ(env, obj.obj(),
        PrintingContext_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, PrintingContext_clazz(env),
        "pageCountEstimationDone",
        "("
        "I"
        ")"
        "V",
        &g_PrintingContext_pageCountEstimationDone);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(maxPages));
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPrintingContext[] = {
    { "nativeAskUserForSettingsReply",
        "("
        "J"
        "Z"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_printing_PrintingContext_nativeAskUserForSettingsReply) },
    { "nativeShowSystemDialogDone",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_printing_PrintingContext_nativeShowSystemDialogDone) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsPrintingContextSize = arraysize(kMethodsPrintingContext);

    if (env->RegisterNatives(PrintingContext_clazz(env),
            kMethodsPrintingContext,
            kMethodsPrintingContextSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, PrintingContext_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace printing

#endif // org_chromium_printing_PrintingContext_JNI
