// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phonemetadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phonemetadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace i18n {
namespace phonenumbers {

    void protobuf_ShutdownFile_phonemetadata_2eproto()
    {
        delete NumberFormat::default_instance_;
        delete PhoneNumberDesc::default_instance_;
        delete PhoneMetadata::default_instance_;
        delete PhoneMetadataCollection::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_phonemetadata_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_phonemetadata_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        NumberFormat::default_instance_ = new NumberFormat();
        PhoneNumberDesc::default_instance_ = new PhoneNumberDesc();
        PhoneMetadata::default_instance_ = new PhoneMetadata();
        PhoneMetadataCollection::default_instance_ = new PhoneMetadataCollection();
        NumberFormat::default_instance_->InitAsDefaultInstance();
        PhoneNumberDesc::default_instance_->InitAsDefaultInstance();
        PhoneMetadata::default_instance_->InitAsDefaultInstance();
        PhoneMetadataCollection::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_phonemetadata_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_phonemetadata_2eproto_once_);
    void protobuf_AddDesc_phonemetadata_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_phonemetadata_2eproto_once_,
            &protobuf_AddDesc_phonemetadata_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_phonemetadata_2eproto {
        StaticDescriptorInitializer_phonemetadata_2eproto()
        {
            protobuf_AddDesc_phonemetadata_2eproto();
        }
    } static_descriptor_initializer_phonemetadata_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForNumberFormat(
        NumberFormat* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int NumberFormat::kPatternFieldNumber;
    const int NumberFormat::kFormatFieldNumber;
    const int NumberFormat::kLeadingDigitsPatternFieldNumber;
    const int NumberFormat::kNationalPrefixFormattingRuleFieldNumber;
    const int NumberFormat::kNationalPrefixOptionalWhenFormattingFieldNumber;
    const int NumberFormat::kDomesticCarrierCodeFormattingRuleFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    NumberFormat::NumberFormat()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:i18n.phonenumbers.NumberFormat)
    }

    void NumberFormat::InitAsDefaultInstance()
    {
    }

    NumberFormat::NumberFormat(const NumberFormat& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.NumberFormat)
    }

    void NumberFormat::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_formatting_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_optional_when_formatting_ = false;
        domestic_carrier_code_formatting_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    NumberFormat::~NumberFormat()
    {
        // @@protoc_insertion_point(destructor:i18n.phonenumbers.NumberFormat)
        SharedDtor();
    }

    void NumberFormat::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_formatting_rule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domestic_carrier_code_formatting_rule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void NumberFormat::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const NumberFormat& NumberFormat::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_phonemetadata_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_phonemetadata_2eproto();
#endif
        return *default_instance_;
    }

    NumberFormat* NumberFormat::default_instance_ = NULL;

    NumberFormat* NumberFormat::New(::google::protobuf::Arena* arena) const
    {
        NumberFormat* n = new NumberFormat;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void NumberFormat::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.NumberFormat)
        if (_has_bits_[0 / 32] & 59u) {
            if (has_pattern()) {
                pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_format()) {
                format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_national_prefix_formatting_rule()) {
                national_prefix_formatting_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            national_prefix_optional_when_formatting_ = false;
            if (has_domestic_carrier_code_formatting_rule()) {
                domestic_carrier_code_formatting_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        leading_digits_pattern_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool NumberFormat::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForNumberFormat, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:i18n.phonenumbers.NumberFormat)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required string pattern = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_pattern()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_format;
                break;
            }

            // required string format = 2;
            case 2: {
                if (tag == 18) {
                parse_format:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_format()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_leading_digits_pattern;
                break;
            }

            // repeated string leading_digits_pattern = 3;
            case 3: {
                if (tag == 26) {
                parse_leading_digits_pattern:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->add_leading_digits_pattern()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_leading_digits_pattern;
                if (input->ExpectTag(34))
                    goto parse_national_prefix_formatting_rule;
                break;
            }

            // optional string national_prefix_formatting_rule = 4;
            case 4: {
                if (tag == 34) {
                parse_national_prefix_formatting_rule:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_national_prefix_formatting_rule()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_domestic_carrier_code_formatting_rule;
                break;
            }

            // optional string domestic_carrier_code_formatting_rule = 5;
            case 5: {
                if (tag == 42) {
                parse_domestic_carrier_code_formatting_rule:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_domestic_carrier_code_formatting_rule()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(48))
                    goto parse_national_prefix_optional_when_formatting;
                break;
            }

            // optional bool national_prefix_optional_when_formatting = 6;
            case 6: {
                if (tag == 48) {
                parse_national_prefix_optional_when_formatting:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &national_prefix_optional_when_formatting_)));
                    set_has_national_prefix_optional_when_formatting();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:i18n.phonenumbers.NumberFormat)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.NumberFormat)
        return false;
#undef DO_
    }

    void NumberFormat::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.NumberFormat)
        // required string pattern = 1;
        if (has_pattern()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->pattern(), output);
        }

        // required string format = 2;
        if (has_format()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->format(), output);
        }

        // repeated string leading_digits_pattern = 3;
        for (int i = 0; i < this->leading_digits_pattern_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteString(
                3, this->leading_digits_pattern(i), output);
        }

        // optional string national_prefix_formatting_rule = 4;
        if (has_national_prefix_formatting_rule()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                4, this->national_prefix_formatting_rule(), output);
        }

        // optional string domestic_carrier_code_formatting_rule = 5;
        if (has_domestic_carrier_code_formatting_rule()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                5, this->domestic_carrier_code_formatting_rule(), output);
        }

        // optional bool national_prefix_optional_when_formatting = 6;
        if (has_national_prefix_optional_when_formatting()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->national_prefix_optional_when_formatting(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.NumberFormat)
    }

    int NumberFormat::RequiredFieldsByteSizeFallback() const
    {
        // @@protoc_insertion_point(required_fields_byte_size_fallback_start:i18n.phonenumbers.NumberFormat)
        int total_size = 0;

        if (has_pattern()) {
            // required string pattern = 1;
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->pattern());
        }

        if (has_format()) {
            // required string format = 2;
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->format());
        }

        return total_size;
    }
    int NumberFormat::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.NumberFormat)
        int total_size = 0;

        if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) { // All required fields are present.
            // required string pattern = 1;
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->pattern());

            // required string format = 2;
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->format());

        } else {
            total_size += RequiredFieldsByteSizeFallback();
        }
        if (_has_bits_[3 / 32] & 56u) {
            // optional string national_prefix_formatting_rule = 4;
            if (has_national_prefix_formatting_rule()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->national_prefix_formatting_rule());
            }

            // optional bool national_prefix_optional_when_formatting = 6;
            if (has_national_prefix_optional_when_formatting()) {
                total_size += 1 + 1;
            }

            // optional string domestic_carrier_code_formatting_rule = 5;
            if (has_domestic_carrier_code_formatting_rule()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->domestic_carrier_code_formatting_rule());
            }
        }
        // repeated string leading_digits_pattern = 3;
        total_size += 1 * this->leading_digits_pattern_size();
        for (int i = 0; i < this->leading_digits_pattern_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                this->leading_digits_pattern(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void NumberFormat::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const NumberFormat*>(&from));
    }

    void NumberFormat::MergeFrom(const NumberFormat& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.NumberFormat)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        leading_digits_pattern_.MergeFrom(from.leading_digits_pattern_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_pattern()) {
                set_has_pattern();
                pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
            }
            if (from.has_format()) {
                set_has_format();
                format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
            }
            if (from.has_national_prefix_formatting_rule()) {
                set_has_national_prefix_formatting_rule();
                national_prefix_formatting_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_formatting_rule_);
            }
            if (from.has_national_prefix_optional_when_formatting()) {
                set_national_prefix_optional_when_formatting(from.national_prefix_optional_when_formatting());
            }
            if (from.has_domestic_carrier_code_formatting_rule()) {
                set_has_domestic_carrier_code_formatting_rule();
                domestic_carrier_code_formatting_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domestic_carrier_code_formatting_rule_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void NumberFormat::CopyFrom(const NumberFormat& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.NumberFormat)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool NumberFormat::IsInitialized() const
    {
        if ((_has_bits_[0] & 0x00000003) != 0x00000003)
            return false;

        return true;
    }

    void NumberFormat::Swap(NumberFormat* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void NumberFormat::InternalSwap(NumberFormat* other)
    {
        pattern_.Swap(&other->pattern_);
        format_.Swap(&other->format_);
        leading_digits_pattern_.UnsafeArenaSwap(&other->leading_digits_pattern_);
        national_prefix_formatting_rule_.Swap(&other->national_prefix_formatting_rule_);
        std::swap(national_prefix_optional_when_formatting_, other->national_prefix_optional_when_formatting_);
        domestic_carrier_code_formatting_rule_.Swap(&other->domestic_carrier_code_formatting_rule_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string NumberFormat::GetTypeName() const
    {
        return "i18n.phonenumbers.NumberFormat";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // NumberFormat

    // required string pattern = 1;
    bool NumberFormat::has_pattern() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void NumberFormat::set_has_pattern()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void NumberFormat::clear_has_pattern()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void NumberFormat::clear_pattern()
    {
        pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_pattern();
    }
    const ::std::string& NumberFormat::pattern() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.pattern)
        return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_pattern(const ::std::string& value)
    {
        set_has_pattern();
        pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.pattern)
    }
    void NumberFormat::set_pattern(const char* value)
    {
        set_has_pattern();
        pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.pattern)
    }
    void NumberFormat::set_pattern(const char* value, size_t size)
    {
        set_has_pattern();
        pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.pattern)
    }
    ::std::string* NumberFormat::mutable_pattern()
    {
        set_has_pattern();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.pattern)
        return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* NumberFormat::release_pattern()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.pattern)
        clear_has_pattern();
        return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_allocated_pattern(::std::string* pattern)
    {
        if (pattern != NULL) {
            set_has_pattern();
        } else {
            clear_has_pattern();
        }
        pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.pattern)
    }

    // required string format = 2;
    bool NumberFormat::has_format() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void NumberFormat::set_has_format()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void NumberFormat::clear_has_format()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void NumberFormat::clear_format()
    {
        format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_format();
    }
    const ::std::string& NumberFormat::format() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.format)
        return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_format(const ::std::string& value)
    {
        set_has_format();
        format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.format)
    }
    void NumberFormat::set_format(const char* value)
    {
        set_has_format();
        format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.format)
    }
    void NumberFormat::set_format(const char* value, size_t size)
    {
        set_has_format();
        format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.format)
    }
    ::std::string* NumberFormat::mutable_format()
    {
        set_has_format();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.format)
        return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* NumberFormat::release_format()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.format)
        clear_has_format();
        return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_allocated_format(::std::string* format)
    {
        if (format != NULL) {
            set_has_format();
        } else {
            clear_has_format();
        }
        format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.format)
    }

    // repeated string leading_digits_pattern = 3;
    int NumberFormat::leading_digits_pattern_size() const
    {
        return leading_digits_pattern_.size();
    }
    void NumberFormat::clear_leading_digits_pattern()
    {
        leading_digits_pattern_.Clear();
    }
    const ::std::string& NumberFormat::leading_digits_pattern(int index) const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
        return leading_digits_pattern_.Get(index);
    }
    ::std::string* NumberFormat::mutable_leading_digits_pattern(int index)
    {
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
        return leading_digits_pattern_.Mutable(index);
    }
    void NumberFormat::set_leading_digits_pattern(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
        leading_digits_pattern_.Mutable(index)->assign(value);
    }
    void NumberFormat::set_leading_digits_pattern(int index, const char* value)
    {
        leading_digits_pattern_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
    }
    void NumberFormat::set_leading_digits_pattern(int index, const char* value, size_t size)
    {
        leading_digits_pattern_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
    }
    ::std::string* NumberFormat::add_leading_digits_pattern()
    {
        // @@protoc_insertion_point(field_add_mutable:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
        return leading_digits_pattern_.Add();
    }
    void NumberFormat::add_leading_digits_pattern(const ::std::string& value)
    {
        leading_digits_pattern_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
    }
    void NumberFormat::add_leading_digits_pattern(const char* value)
    {
        leading_digits_pattern_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
    }
    void NumberFormat::add_leading_digits_pattern(const char* value, size_t size)
    {
        leading_digits_pattern_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    NumberFormat::leading_digits_pattern() const
    {
        // @@protoc_insertion_point(field_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
        return leading_digits_pattern_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    NumberFormat::mutable_leading_digits_pattern()
    {
        // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.NumberFormat.leading_digits_pattern)
        return &leading_digits_pattern_;
    }

    // optional string national_prefix_formatting_rule = 4;
    bool NumberFormat::has_national_prefix_formatting_rule() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void NumberFormat::set_has_national_prefix_formatting_rule()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void NumberFormat::clear_has_national_prefix_formatting_rule()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void NumberFormat::clear_national_prefix_formatting_rule()
    {
        national_prefix_formatting_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_national_prefix_formatting_rule();
    }
    const ::std::string& NumberFormat::national_prefix_formatting_rule() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
        return national_prefix_formatting_rule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_national_prefix_formatting_rule(const ::std::string& value)
    {
        set_has_national_prefix_formatting_rule();
        national_prefix_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
    }
    void NumberFormat::set_national_prefix_formatting_rule(const char* value)
    {
        set_has_national_prefix_formatting_rule();
        national_prefix_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
    }
    void NumberFormat::set_national_prefix_formatting_rule(const char* value, size_t size)
    {
        set_has_national_prefix_formatting_rule();
        national_prefix_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
    }
    ::std::string* NumberFormat::mutable_national_prefix_formatting_rule()
    {
        set_has_national_prefix_formatting_rule();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
        return national_prefix_formatting_rule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* NumberFormat::release_national_prefix_formatting_rule()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
        clear_has_national_prefix_formatting_rule();
        return national_prefix_formatting_rule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_allocated_national_prefix_formatting_rule(::std::string* national_prefix_formatting_rule)
    {
        if (national_prefix_formatting_rule != NULL) {
            set_has_national_prefix_formatting_rule();
        } else {
            clear_has_national_prefix_formatting_rule();
        }
        national_prefix_formatting_rule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix_formatting_rule);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.national_prefix_formatting_rule)
    }

    // optional bool national_prefix_optional_when_formatting = 6;
    bool NumberFormat::has_national_prefix_optional_when_formatting() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void NumberFormat::set_has_national_prefix_optional_when_formatting()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void NumberFormat::clear_has_national_prefix_optional_when_formatting()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void NumberFormat::clear_national_prefix_optional_when_formatting()
    {
        national_prefix_optional_when_formatting_ = false;
        clear_has_national_prefix_optional_when_formatting();
    }
    bool NumberFormat::national_prefix_optional_when_formatting() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
        return national_prefix_optional_when_formatting_;
    }
    void NumberFormat::set_national_prefix_optional_when_formatting(bool value)
    {
        set_has_national_prefix_optional_when_formatting();
        national_prefix_optional_when_formatting_ = value;
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.national_prefix_optional_when_formatting)
    }

    // optional string domestic_carrier_code_formatting_rule = 5;
    bool NumberFormat::has_domestic_carrier_code_formatting_rule() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void NumberFormat::set_has_domestic_carrier_code_formatting_rule()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void NumberFormat::clear_has_domestic_carrier_code_formatting_rule()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void NumberFormat::clear_domestic_carrier_code_formatting_rule()
    {
        domestic_carrier_code_formatting_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_domestic_carrier_code_formatting_rule();
    }
    const ::std::string& NumberFormat::domestic_carrier_code_formatting_rule() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
        return domestic_carrier_code_formatting_rule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_domestic_carrier_code_formatting_rule(const ::std::string& value)
    {
        set_has_domestic_carrier_code_formatting_rule();
        domestic_carrier_code_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
    }
    void NumberFormat::set_domestic_carrier_code_formatting_rule(const char* value)
    {
        set_has_domestic_carrier_code_formatting_rule();
        domestic_carrier_code_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
    }
    void NumberFormat::set_domestic_carrier_code_formatting_rule(const char* value, size_t size)
    {
        set_has_domestic_carrier_code_formatting_rule();
        domestic_carrier_code_formatting_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
    }
    ::std::string* NumberFormat::mutable_domestic_carrier_code_formatting_rule()
    {
        set_has_domestic_carrier_code_formatting_rule();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
        return domestic_carrier_code_formatting_rule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* NumberFormat::release_domestic_carrier_code_formatting_rule()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
        clear_has_domestic_carrier_code_formatting_rule();
        return domestic_carrier_code_formatting_rule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void NumberFormat::set_allocated_domestic_carrier_code_formatting_rule(::std::string* domestic_carrier_code_formatting_rule)
    {
        if (domestic_carrier_code_formatting_rule != NULL) {
            set_has_domestic_carrier_code_formatting_rule();
        } else {
            clear_has_domestic_carrier_code_formatting_rule();
        }
        domestic_carrier_code_formatting_rule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domestic_carrier_code_formatting_rule);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.NumberFormat.domestic_carrier_code_formatting_rule)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForPhoneNumberDesc(
        PhoneNumberDesc* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int PhoneNumberDesc::kNationalNumberPatternFieldNumber;
    const int PhoneNumberDesc::kPossibleNumberPatternFieldNumber;
    const int PhoneNumberDesc::kExampleNumberFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    PhoneNumberDesc::PhoneNumberDesc()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:i18n.phonenumbers.PhoneNumberDesc)
    }

    void PhoneNumberDesc::InitAsDefaultInstance()
    {
    }

    PhoneNumberDesc::PhoneNumberDesc(const PhoneNumberDesc& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneNumberDesc)
    }

    void PhoneNumberDesc::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_number_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        possible_number_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        example_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    PhoneNumberDesc::~PhoneNumberDesc()
    {
        // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneNumberDesc)
        SharedDtor();
    }

    void PhoneNumberDesc::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_number_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        possible_number_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        example_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void PhoneNumberDesc::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const PhoneNumberDesc& PhoneNumberDesc::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_phonemetadata_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_phonemetadata_2eproto();
#endif
        return *default_instance_;
    }

    PhoneNumberDesc* PhoneNumberDesc::default_instance_ = NULL;

    PhoneNumberDesc* PhoneNumberDesc::New(::google::protobuf::Arena* arena) const
    {
        PhoneNumberDesc* n = new PhoneNumberDesc;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void PhoneNumberDesc::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneNumberDesc)
        if (_has_bits_[0 / 32] & 7u) {
            if (has_national_number_pattern()) {
                national_number_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_possible_number_pattern()) {
                possible_number_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_example_number()) {
                example_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool PhoneNumberDesc::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForPhoneNumberDesc, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:i18n.phonenumbers.PhoneNumberDesc)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string national_number_pattern = 2;
            case 2: {
                if (tag == 18) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_national_number_pattern()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_possible_number_pattern;
                break;
            }

            // optional string possible_number_pattern = 3;
            case 3: {
                if (tag == 26) {
                parse_possible_number_pattern:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_possible_number_pattern()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(50))
                    goto parse_example_number;
                break;
            }

            // optional string example_number = 6;
            case 6: {
                if (tag == 50) {
                parse_example_number:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_example_number()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:i18n.phonenumbers.PhoneNumberDesc)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.PhoneNumberDesc)
        return false;
#undef DO_
    }

    void PhoneNumberDesc::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.PhoneNumberDesc)
        // optional string national_number_pattern = 2;
        if (has_national_number_pattern()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->national_number_pattern(), output);
        }

        // optional string possible_number_pattern = 3;
        if (has_possible_number_pattern()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                3, this->possible_number_pattern(), output);
        }

        // optional string example_number = 6;
        if (has_example_number()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                6, this->example_number(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.PhoneNumberDesc)
    }

    int PhoneNumberDesc::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneNumberDesc)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 7u) {
            // optional string national_number_pattern = 2;
            if (has_national_number_pattern()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->national_number_pattern());
            }

            // optional string possible_number_pattern = 3;
            if (has_possible_number_pattern()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->possible_number_pattern());
            }

            // optional string example_number = 6;
            if (has_example_number()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->example_number());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void PhoneNumberDesc::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const PhoneNumberDesc*>(&from));
    }

    void PhoneNumberDesc::MergeFrom(const PhoneNumberDesc& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneNumberDesc)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_national_number_pattern()) {
                set_has_national_number_pattern();
                national_number_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_number_pattern_);
            }
            if (from.has_possible_number_pattern()) {
                set_has_possible_number_pattern();
                possible_number_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.possible_number_pattern_);
            }
            if (from.has_example_number()) {
                set_has_example_number();
                example_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.example_number_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void PhoneNumberDesc::CopyFrom(const PhoneNumberDesc& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneNumberDesc)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool PhoneNumberDesc::IsInitialized() const
    {

        return true;
    }

    void PhoneNumberDesc::Swap(PhoneNumberDesc* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void PhoneNumberDesc::InternalSwap(PhoneNumberDesc* other)
    {
        national_number_pattern_.Swap(&other->national_number_pattern_);
        possible_number_pattern_.Swap(&other->possible_number_pattern_);
        example_number_.Swap(&other->example_number_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string PhoneNumberDesc::GetTypeName() const
    {
        return "i18n.phonenumbers.PhoneNumberDesc";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // PhoneNumberDesc

    // optional string national_number_pattern = 2;
    bool PhoneNumberDesc::has_national_number_pattern() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void PhoneNumberDesc::set_has_national_number_pattern()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void PhoneNumberDesc::clear_has_national_number_pattern()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void PhoneNumberDesc::clear_national_number_pattern()
    {
        national_number_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_national_number_pattern();
    }
    const ::std::string& PhoneNumberDesc::national_number_pattern() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
        return national_number_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneNumberDesc::set_national_number_pattern(const ::std::string& value)
    {
        set_has_national_number_pattern();
        national_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
    }
    void PhoneNumberDesc::set_national_number_pattern(const char* value)
    {
        set_has_national_number_pattern();
        national_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
    }
    void PhoneNumberDesc::set_national_number_pattern(const char* value, size_t size)
    {
        set_has_national_number_pattern();
        national_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
    }
    ::std::string* PhoneNumberDesc::mutable_national_number_pattern()
    {
        set_has_national_number_pattern();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
        return national_number_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneNumberDesc::release_national_number_pattern()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
        clear_has_national_number_pattern();
        return national_number_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneNumberDesc::set_allocated_national_number_pattern(::std::string* national_number_pattern)
    {
        if (national_number_pattern != NULL) {
            set_has_national_number_pattern();
        } else {
            clear_has_national_number_pattern();
        }
        national_number_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_number_pattern);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.national_number_pattern)
    }

    // optional string possible_number_pattern = 3;
    bool PhoneNumberDesc::has_possible_number_pattern() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void PhoneNumberDesc::set_has_possible_number_pattern()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void PhoneNumberDesc::clear_has_possible_number_pattern()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void PhoneNumberDesc::clear_possible_number_pattern()
    {
        possible_number_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_possible_number_pattern();
    }
    const ::std::string& PhoneNumberDesc::possible_number_pattern() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
        return possible_number_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneNumberDesc::set_possible_number_pattern(const ::std::string& value)
    {
        set_has_possible_number_pattern();
        possible_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
    }
    void PhoneNumberDesc::set_possible_number_pattern(const char* value)
    {
        set_has_possible_number_pattern();
        possible_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
    }
    void PhoneNumberDesc::set_possible_number_pattern(const char* value, size_t size)
    {
        set_has_possible_number_pattern();
        possible_number_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
    }
    ::std::string* PhoneNumberDesc::mutable_possible_number_pattern()
    {
        set_has_possible_number_pattern();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
        return possible_number_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneNumberDesc::release_possible_number_pattern()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
        clear_has_possible_number_pattern();
        return possible_number_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneNumberDesc::set_allocated_possible_number_pattern(::std::string* possible_number_pattern)
    {
        if (possible_number_pattern != NULL) {
            set_has_possible_number_pattern();
        } else {
            clear_has_possible_number_pattern();
        }
        possible_number_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), possible_number_pattern);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.possible_number_pattern)
    }

    // optional string example_number = 6;
    bool PhoneNumberDesc::has_example_number() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void PhoneNumberDesc::set_has_example_number()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void PhoneNumberDesc::clear_has_example_number()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void PhoneNumberDesc::clear_example_number()
    {
        example_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_example_number();
    }
    const ::std::string& PhoneNumberDesc::example_number() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneNumberDesc.example_number)
        return example_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneNumberDesc::set_example_number(const ::std::string& value)
    {
        set_has_example_number();
        example_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneNumberDesc.example_number)
    }
    void PhoneNumberDesc::set_example_number(const char* value)
    {
        set_has_example_number();
        example_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneNumberDesc.example_number)
    }
    void PhoneNumberDesc::set_example_number(const char* value, size_t size)
    {
        set_has_example_number();
        example_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneNumberDesc.example_number)
    }
    ::std::string* PhoneNumberDesc::mutable_example_number()
    {
        set_has_example_number();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneNumberDesc.example_number)
        return example_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneNumberDesc::release_example_number()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneNumberDesc.example_number)
        clear_has_example_number();
        return example_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneNumberDesc::set_allocated_example_number(::std::string* example_number)
    {
        if (example_number != NULL) {
            set_has_example_number();
        } else {
            clear_has_example_number();
        }
        example_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), example_number);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneNumberDesc.example_number)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForPhoneMetadata(
        PhoneMetadata* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int PhoneMetadata::kGeneralDescFieldNumber;
    const int PhoneMetadata::kFixedLineFieldNumber;
    const int PhoneMetadata::kMobileFieldNumber;
    const int PhoneMetadata::kTollFreeFieldNumber;
    const int PhoneMetadata::kPremiumRateFieldNumber;
    const int PhoneMetadata::kSharedCostFieldNumber;
    const int PhoneMetadata::kPersonalNumberFieldNumber;
    const int PhoneMetadata::kVoipFieldNumber;
    const int PhoneMetadata::kPagerFieldNumber;
    const int PhoneMetadata::kUanFieldNumber;
    const int PhoneMetadata::kEmergencyFieldNumber;
    const int PhoneMetadata::kVoicemailFieldNumber;
    const int PhoneMetadata::kShortCodeFieldNumber;
    const int PhoneMetadata::kStandardRateFieldNumber;
    const int PhoneMetadata::kCarrierSpecificFieldNumber;
    const int PhoneMetadata::kNoInternationalDiallingFieldNumber;
    const int PhoneMetadata::kIdFieldNumber;
    const int PhoneMetadata::kCountryCodeFieldNumber;
    const int PhoneMetadata::kInternationalPrefixFieldNumber;
    const int PhoneMetadata::kPreferredInternationalPrefixFieldNumber;
    const int PhoneMetadata::kNationalPrefixFieldNumber;
    const int PhoneMetadata::kPreferredExtnPrefixFieldNumber;
    const int PhoneMetadata::kNationalPrefixForParsingFieldNumber;
    const int PhoneMetadata::kNationalPrefixTransformRuleFieldNumber;
    const int PhoneMetadata::kSameMobileAndFixedLinePatternFieldNumber;
    const int PhoneMetadata::kNumberFormatFieldNumber;
    const int PhoneMetadata::kIntlNumberFormatFieldNumber;
    const int PhoneMetadata::kMainCountryForCodeFieldNumber;
    const int PhoneMetadata::kLeadingDigitsFieldNumber;
    const int PhoneMetadata::kLeadingZeroPossibleFieldNumber;
    const int PhoneMetadata::kMobileNumberPortableRegionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    PhoneMetadata::PhoneMetadata()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:i18n.phonenumbers.PhoneMetadata)
    }

    void PhoneMetadata::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        general_desc_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        general_desc_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        fixed_line_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        fixed_line_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        mobile_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        mobile_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        toll_free_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        toll_free_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        premium_rate_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        premium_rate_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        shared_cost_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        shared_cost_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        personal_number_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        personal_number_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        voip_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        voip_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        pager_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        pager_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        uan_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        uan_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        emergency_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        emergency_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        voicemail_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        voicemail_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        short_code_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        short_code_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        standard_rate_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        standard_rate_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        carrier_specific_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        carrier_specific_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        no_international_dialling_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(
            ::i18n::phonenumbers::PhoneNumberDesc::internal_default_instance());
#else
        no_international_dialling_ = const_cast<::i18n::phonenumbers::PhoneNumberDesc*>(&::i18n::phonenumbers::PhoneNumberDesc::default_instance());
#endif
    }

    PhoneMetadata::PhoneMetadata(const PhoneMetadata& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneMetadata)
    }

    void PhoneMetadata::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        general_desc_ = NULL;
        fixed_line_ = NULL;
        mobile_ = NULL;
        toll_free_ = NULL;
        premium_rate_ = NULL;
        shared_cost_ = NULL;
        personal_number_ = NULL;
        voip_ = NULL;
        pager_ = NULL;
        uan_ = NULL;
        emergency_ = NULL;
        voicemail_ = NULL;
        short_code_ = NULL;
        standard_rate_ = NULL;
        carrier_specific_ = NULL;
        no_international_dialling_ = NULL;
        id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        country_code_ = 0;
        international_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        preferred_international_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        preferred_extn_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_for_parsing_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_transform_rule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        same_mobile_and_fixed_line_pattern_ = false;
        main_country_for_code_ = false;
        leading_digits_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        leading_zero_possible_ = false;
        mobile_number_portable_region_ = false;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    PhoneMetadata::~PhoneMetadata()
    {
        // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneMetadata)
        SharedDtor();
    }

    void PhoneMetadata::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        international_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        preferred_international_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        preferred_extn_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_for_parsing_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        national_prefix_transform_rule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        leading_digits_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete general_desc_;
            delete fixed_line_;
            delete mobile_;
            delete toll_free_;
            delete premium_rate_;
            delete shared_cost_;
            delete personal_number_;
            delete voip_;
            delete pager_;
            delete uan_;
            delete emergency_;
            delete voicemail_;
            delete short_code_;
            delete standard_rate_;
            delete carrier_specific_;
            delete no_international_dialling_;
        }
    }

    void PhoneMetadata::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const PhoneMetadata& PhoneMetadata::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_phonemetadata_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_phonemetadata_2eproto();
#endif
        return *default_instance_;
    }

    PhoneMetadata* PhoneMetadata::default_instance_ = NULL;

    PhoneMetadata* PhoneMetadata::New(::google::protobuf::Arena* arena) const
    {
        PhoneMetadata* n = new PhoneMetadata;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void PhoneMetadata::Clear()
    {
// @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                   \
    _Pragma("clang diagnostic push")                                                                    \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PhoneMetadata, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PhoneMetadata*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 255u) {
            if (has_general_desc()) {
                if (general_desc_ != NULL)
                    general_desc_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_fixed_line()) {
                if (fixed_line_ != NULL)
                    fixed_line_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_mobile()) {
                if (mobile_ != NULL)
                    mobile_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_toll_free()) {
                if (toll_free_ != NULL)
                    toll_free_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_premium_rate()) {
                if (premium_rate_ != NULL)
                    premium_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_shared_cost()) {
                if (shared_cost_ != NULL)
                    shared_cost_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_personal_number()) {
                if (personal_number_ != NULL)
                    personal_number_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_voip()) {
                if (voip_ != NULL)
                    voip_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
        }
        if (_has_bits_[8 / 32] & 65280u) {
            if (has_pager()) {
                if (pager_ != NULL)
                    pager_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_uan()) {
                if (uan_ != NULL)
                    uan_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_emergency()) {
                if (emergency_ != NULL)
                    emergency_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_voicemail()) {
                if (voicemail_ != NULL)
                    voicemail_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_short_code()) {
                if (short_code_ != NULL)
                    short_code_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_standard_rate()) {
                if (standard_rate_ != NULL)
                    standard_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_carrier_specific()) {
                if (carrier_specific_ != NULL)
                    carrier_specific_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
            if (has_no_international_dialling()) {
                if (no_international_dialling_ != NULL)
                    no_international_dialling_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
            }
        }
        if (_has_bits_[16 / 32] & 16711680u) {
            if (has_id()) {
                id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            country_code_ = 0;
            if (has_international_prefix()) {
                international_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_preferred_international_prefix()) {
                preferred_international_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_national_prefix()) {
                national_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_preferred_extn_prefix()) {
                preferred_extn_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_national_prefix_for_parsing()) {
                national_prefix_for_parsing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_national_prefix_transform_rule()) {
                national_prefix_transform_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        if (_has_bits_[24 / 32] & 2030043136u) {
            ZR_(same_mobile_and_fixed_line_pattern_, mobile_number_portable_region_);
            if (has_leading_digits()) {
                leading_digits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }

#undef ZR_HELPER_
#undef ZR_

        number_format_.Clear();
        intl_number_format_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool PhoneMetadata::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForPhoneMetadata, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:i18n.phonenumbers.PhoneMetadata)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_general_desc()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_fixed_line;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
            case 2: {
                if (tag == 18) {
                parse_fixed_line:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_fixed_line()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_mobile;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
            case 3: {
                if (tag == 26) {
                parse_mobile:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_mobile()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_toll_free;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
            case 4: {
                if (tag == 34) {
                parse_toll_free:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_toll_free()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_premium_rate;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
            case 5: {
                if (tag == 42) {
                parse_premium_rate:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_premium_rate()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(50))
                    goto parse_shared_cost;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
            case 6: {
                if (tag == 50) {
                parse_shared_cost:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_shared_cost()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(58))
                    goto parse_personal_number;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
            case 7: {
                if (tag == 58) {
                parse_personal_number:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_personal_number()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(66))
                    goto parse_voip;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
            case 8: {
                if (tag == 66) {
                parse_voip:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_voip()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(74))
                    goto parse_id;
                break;
            }

            // required string id = 9;
            case 9: {
                if (tag == 74) {
                parse_id:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_id()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(80))
                    goto parse_country_code;
                break;
            }

            // optional int32 country_code = 10;
            case 10: {
                if (tag == 80) {
                parse_country_code:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &country_code_)));
                    set_has_country_code();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(90))
                    goto parse_international_prefix;
                break;
            }

            // optional string international_prefix = 11;
            case 11: {
                if (tag == 90) {
                parse_international_prefix:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_international_prefix()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(98))
                    goto parse_national_prefix;
                break;
            }

            // optional string national_prefix = 12;
            case 12: {
                if (tag == 98) {
                parse_national_prefix:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_national_prefix()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(106))
                    goto parse_preferred_extn_prefix;
                break;
            }

            // optional string preferred_extn_prefix = 13;
            case 13: {
                if (tag == 106) {
                parse_preferred_extn_prefix:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_preferred_extn_prefix()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(122))
                    goto parse_national_prefix_for_parsing;
                break;
            }

            // optional string national_prefix_for_parsing = 15;
            case 15: {
                if (tag == 122) {
                parse_national_prefix_for_parsing:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_national_prefix_for_parsing()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(130))
                    goto parse_national_prefix_transform_rule;
                break;
            }

            // optional string national_prefix_transform_rule = 16;
            case 16: {
                if (tag == 130) {
                parse_national_prefix_transform_rule:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_national_prefix_transform_rule()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(138))
                    goto parse_preferred_international_prefix;
                break;
            }

            // optional string preferred_international_prefix = 17;
            case 17: {
                if (tag == 138) {
                parse_preferred_international_prefix:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_preferred_international_prefix()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(144))
                    goto parse_same_mobile_and_fixed_line_pattern;
                break;
            }

            // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
            case 18: {
                if (tag == 144) {
                parse_same_mobile_and_fixed_line_pattern:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &same_mobile_and_fixed_line_pattern_)));
                    set_has_same_mobile_and_fixed_line_pattern();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(154))
                    goto parse_number_format;
                break;
            }

            // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
            case 19: {
                if (tag == 154) {
                parse_number_format:
                    DO_(input->IncrementRecursionDepth());
                parse_loop_number_format:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_number_format()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(154))
                    goto parse_loop_number_format;
                if (input->ExpectTag(162))
                    goto parse_loop_intl_number_format;
                input->UnsafeDecrementRecursionDepth();
                break;
            }

            // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
            case 20: {
                if (tag == 162) {
                    DO_(input->IncrementRecursionDepth());
                parse_loop_intl_number_format:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_intl_number_format()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(162))
                    goto parse_loop_intl_number_format;
                input->UnsafeDecrementRecursionDepth();
                if (input->ExpectTag(170))
                    goto parse_pager;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
            case 21: {
                if (tag == 170) {
                parse_pager:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_pager()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(176))
                    goto parse_main_country_for_code;
                break;
            }

            // optional bool main_country_for_code = 22 [default = false];
            case 22: {
                if (tag == 176) {
                parse_main_country_for_code:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &main_country_for_code_)));
                    set_has_main_country_for_code();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(186))
                    goto parse_leading_digits;
                break;
            }

            // optional string leading_digits = 23;
            case 23: {
                if (tag == 186) {
                parse_leading_digits:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_leading_digits()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(194))
                    goto parse_no_international_dialling;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
            case 24: {
                if (tag == 194) {
                parse_no_international_dialling:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_no_international_dialling()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(202))
                    goto parse_uan;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
            case 25: {
                if (tag == 202) {
                parse_uan:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_uan()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(208))
                    goto parse_leading_zero_possible;
                break;
            }

            // optional bool leading_zero_possible = 26 [default = false];
            case 26: {
                if (tag == 208) {
                parse_leading_zero_possible:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &leading_zero_possible_)));
                    set_has_leading_zero_possible();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(218))
                    goto parse_emergency;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
            case 27: {
                if (tag == 218) {
                parse_emergency:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_emergency()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(226))
                    goto parse_voicemail;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
            case 28: {
                if (tag == 226) {
                parse_voicemail:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_voicemail()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(234))
                    goto parse_short_code;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
            case 29: {
                if (tag == 234) {
                parse_short_code:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_short_code()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(242))
                    goto parse_standard_rate;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
            case 30: {
                if (tag == 242) {
                parse_standard_rate:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_standard_rate()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(250))
                    goto parse_carrier_specific;
                break;
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
            case 31: {
                if (tag == 250) {
                parse_carrier_specific:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_carrier_specific()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(256))
                    goto parse_mobile_number_portable_region;
                break;
            }

            // optional bool mobile_number_portable_region = 32 [default = false];
            case 32: {
                if (tag == 256) {
                parse_mobile_number_portable_region:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &mobile_number_portable_region_)));
                    set_has_mobile_number_portable_region();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:i18n.phonenumbers.PhoneMetadata)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.PhoneMetadata)
        return false;
#undef DO_
    }

    void PhoneMetadata::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.PhoneMetadata)
        // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
        if (has_general_desc()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                1, *this->general_desc_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
        if (has_fixed_line()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, *this->fixed_line_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
        if (has_mobile()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                3, *this->mobile_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
        if (has_toll_free()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                4, *this->toll_free_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
        if (has_premium_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, *this->premium_rate_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
        if (has_shared_cost()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                6, *this->shared_cost_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
        if (has_personal_number()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                7, *this->personal_number_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
        if (has_voip()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                8, *this->voip_, output);
        }

        // required string id = 9;
        if (has_id()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                9, this->id(), output);
        }

        // optional int32 country_code = 10;
        if (has_country_code()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->country_code(), output);
        }

        // optional string international_prefix = 11;
        if (has_international_prefix()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                11, this->international_prefix(), output);
        }

        // optional string national_prefix = 12;
        if (has_national_prefix()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                12, this->national_prefix(), output);
        }

        // optional string preferred_extn_prefix = 13;
        if (has_preferred_extn_prefix()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                13, this->preferred_extn_prefix(), output);
        }

        // optional string national_prefix_for_parsing = 15;
        if (has_national_prefix_for_parsing()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                15, this->national_prefix_for_parsing(), output);
        }

        // optional string national_prefix_transform_rule = 16;
        if (has_national_prefix_transform_rule()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                16, this->national_prefix_transform_rule(), output);
        }

        // optional string preferred_international_prefix = 17;
        if (has_preferred_international_prefix()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                17, this->preferred_international_prefix(), output);
        }

        // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
        if (has_same_mobile_and_fixed_line_pattern()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->same_mobile_and_fixed_line_pattern(), output);
        }

        // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
        for (unsigned int i = 0, n = this->number_format_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                19, this->number_format(i), output);
        }

        // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
        for (unsigned int i = 0, n = this->intl_number_format_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                20, this->intl_number_format(i), output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
        if (has_pager()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                21, *this->pager_, output);
        }

        // optional bool main_country_for_code = 22 [default = false];
        if (has_main_country_for_code()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->main_country_for_code(), output);
        }

        // optional string leading_digits = 23;
        if (has_leading_digits()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                23, this->leading_digits(), output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
        if (has_no_international_dialling()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                24, *this->no_international_dialling_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
        if (has_uan()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                25, *this->uan_, output);
        }

        // optional bool leading_zero_possible = 26 [default = false];
        if (has_leading_zero_possible()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->leading_zero_possible(), output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
        if (has_emergency()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                27, *this->emergency_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
        if (has_voicemail()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                28, *this->voicemail_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
        if (has_short_code()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                29, *this->short_code_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
        if (has_standard_rate()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                30, *this->standard_rate_, output);
        }

        // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
        if (has_carrier_specific()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                31, *this->carrier_specific_, output);
        }

        // optional bool mobile_number_portable_region = 32 [default = false];
        if (has_mobile_number_portable_region()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->mobile_number_portable_region(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.PhoneMetadata)
    }

    int PhoneMetadata::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneMetadata)
        int total_size = 0;

        // required string id = 9;
        if (has_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->id());
        }
        if (_has_bits_[0 / 32] & 255u) {
            // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
            if (has_general_desc()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->general_desc_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
            if (has_fixed_line()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->fixed_line_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
            if (has_mobile()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->mobile_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
            if (has_toll_free()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->toll_free_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
            if (has_premium_rate()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->premium_rate_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
            if (has_shared_cost()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->shared_cost_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
            if (has_personal_number()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->personal_number_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
            if (has_voip()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->voip_);
            }
        }
        if (_has_bits_[8 / 32] & 65280u) {
            // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
            if (has_pager()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->pager_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
            if (has_uan()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->uan_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
            if (has_emergency()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->emergency_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
            if (has_voicemail()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->voicemail_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
            if (has_short_code()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->short_code_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
            if (has_standard_rate()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->standard_rate_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
            if (has_carrier_specific()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->carrier_specific_);
            }

            // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
            if (has_no_international_dialling()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->no_international_dialling_);
            }
        }
        if (_has_bits_[17 / 32] & 16646144u) {
            // optional int32 country_code = 10;
            if (has_country_code()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->country_code());
            }

            // optional string international_prefix = 11;
            if (has_international_prefix()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->international_prefix());
            }

            // optional string preferred_international_prefix = 17;
            if (has_preferred_international_prefix()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->preferred_international_prefix());
            }

            // optional string national_prefix = 12;
            if (has_national_prefix()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->national_prefix());
            }

            // optional string preferred_extn_prefix = 13;
            if (has_preferred_extn_prefix()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->preferred_extn_prefix());
            }

            // optional string national_prefix_for_parsing = 15;
            if (has_national_prefix_for_parsing()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->national_prefix_for_parsing());
            }

            // optional string national_prefix_transform_rule = 16;
            if (has_national_prefix_transform_rule()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->national_prefix_transform_rule());
            }
        }
        if (_has_bits_[24 / 32] & 2030043136u) {
            // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
            if (has_same_mobile_and_fixed_line_pattern()) {
                total_size += 2 + 1;
            }

            // optional bool main_country_for_code = 22 [default = false];
            if (has_main_country_for_code()) {
                total_size += 2 + 1;
            }

            // optional string leading_digits = 23;
            if (has_leading_digits()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->leading_digits());
            }

            // optional bool leading_zero_possible = 26 [default = false];
            if (has_leading_zero_possible()) {
                total_size += 2 + 1;
            }

            // optional bool mobile_number_portable_region = 32 [default = false];
            if (has_mobile_number_portable_region()) {
                total_size += 2 + 1;
            }
        }
        // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
        total_size += 2 * this->number_format_size();
        for (int i = 0; i < this->number_format_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->number_format(i));
        }

        // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
        total_size += 2 * this->intl_number_format_size();
        for (int i = 0; i < this->intl_number_format_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->intl_number_format(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void PhoneMetadata::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const PhoneMetadata*>(&from));
    }

    void PhoneMetadata::MergeFrom(const PhoneMetadata& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneMetadata)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        number_format_.MergeFrom(from.number_format_);
        intl_number_format_.MergeFrom(from.intl_number_format_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_general_desc()) {
                mutable_general_desc()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.general_desc());
            }
            if (from.has_fixed_line()) {
                mutable_fixed_line()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.fixed_line());
            }
            if (from.has_mobile()) {
                mutable_mobile()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.mobile());
            }
            if (from.has_toll_free()) {
                mutable_toll_free()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.toll_free());
            }
            if (from.has_premium_rate()) {
                mutable_premium_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.premium_rate());
            }
            if (from.has_shared_cost()) {
                mutable_shared_cost()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.shared_cost());
            }
            if (from.has_personal_number()) {
                mutable_personal_number()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.personal_number());
            }
            if (from.has_voip()) {
                mutable_voip()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.voip());
            }
        }
        if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
            if (from.has_pager()) {
                mutable_pager()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.pager());
            }
            if (from.has_uan()) {
                mutable_uan()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.uan());
            }
            if (from.has_emergency()) {
                mutable_emergency()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.emergency());
            }
            if (from.has_voicemail()) {
                mutable_voicemail()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.voicemail());
            }
            if (from.has_short_code()) {
                mutable_short_code()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.short_code());
            }
            if (from.has_standard_rate()) {
                mutable_standard_rate()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.standard_rate());
            }
            if (from.has_carrier_specific()) {
                mutable_carrier_specific()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.carrier_specific());
            }
            if (from.has_no_international_dialling()) {
                mutable_no_international_dialling()->::i18n::phonenumbers::PhoneNumberDesc::MergeFrom(from.no_international_dialling());
            }
        }
        if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
            if (from.has_id()) {
                set_has_id();
                id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
            }
            if (from.has_country_code()) {
                set_country_code(from.country_code());
            }
            if (from.has_international_prefix()) {
                set_has_international_prefix();
                international_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.international_prefix_);
            }
            if (from.has_preferred_international_prefix()) {
                set_has_preferred_international_prefix();
                preferred_international_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_international_prefix_);
            }
            if (from.has_national_prefix()) {
                set_has_national_prefix();
                national_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_);
            }
            if (from.has_preferred_extn_prefix()) {
                set_has_preferred_extn_prefix();
                preferred_extn_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_extn_prefix_);
            }
            if (from.has_national_prefix_for_parsing()) {
                set_has_national_prefix_for_parsing();
                national_prefix_for_parsing_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_for_parsing_);
            }
            if (from.has_national_prefix_transform_rule()) {
                set_has_national_prefix_transform_rule();
                national_prefix_transform_rule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_prefix_transform_rule_);
            }
        }
        if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
            if (from.has_same_mobile_and_fixed_line_pattern()) {
                set_same_mobile_and_fixed_line_pattern(from.same_mobile_and_fixed_line_pattern());
            }
            if (from.has_main_country_for_code()) {
                set_main_country_for_code(from.main_country_for_code());
            }
            if (from.has_leading_digits()) {
                set_has_leading_digits();
                leading_digits_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leading_digits_);
            }
            if (from.has_leading_zero_possible()) {
                set_leading_zero_possible(from.leading_zero_possible());
            }
            if (from.has_mobile_number_portable_region()) {
                set_mobile_number_portable_region(from.mobile_number_portable_region());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void PhoneMetadata::CopyFrom(const PhoneMetadata& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneMetadata)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool PhoneMetadata::IsInitialized() const
    {
        if ((_has_bits_[0] & 0x00010000) != 0x00010000)
            return false;

        if (!::google::protobuf::internal::AllAreInitialized(this->number_format()))
            return false;
        if (!::google::protobuf::internal::AllAreInitialized(this->intl_number_format()))
            return false;
        return true;
    }

    void PhoneMetadata::Swap(PhoneMetadata* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void PhoneMetadata::InternalSwap(PhoneMetadata* other)
    {
        std::swap(general_desc_, other->general_desc_);
        std::swap(fixed_line_, other->fixed_line_);
        std::swap(mobile_, other->mobile_);
        std::swap(toll_free_, other->toll_free_);
        std::swap(premium_rate_, other->premium_rate_);
        std::swap(shared_cost_, other->shared_cost_);
        std::swap(personal_number_, other->personal_number_);
        std::swap(voip_, other->voip_);
        std::swap(pager_, other->pager_);
        std::swap(uan_, other->uan_);
        std::swap(emergency_, other->emergency_);
        std::swap(voicemail_, other->voicemail_);
        std::swap(short_code_, other->short_code_);
        std::swap(standard_rate_, other->standard_rate_);
        std::swap(carrier_specific_, other->carrier_specific_);
        std::swap(no_international_dialling_, other->no_international_dialling_);
        id_.Swap(&other->id_);
        std::swap(country_code_, other->country_code_);
        international_prefix_.Swap(&other->international_prefix_);
        preferred_international_prefix_.Swap(&other->preferred_international_prefix_);
        national_prefix_.Swap(&other->national_prefix_);
        preferred_extn_prefix_.Swap(&other->preferred_extn_prefix_);
        national_prefix_for_parsing_.Swap(&other->national_prefix_for_parsing_);
        national_prefix_transform_rule_.Swap(&other->national_prefix_transform_rule_);
        std::swap(same_mobile_and_fixed_line_pattern_, other->same_mobile_and_fixed_line_pattern_);
        number_format_.UnsafeArenaSwap(&other->number_format_);
        intl_number_format_.UnsafeArenaSwap(&other->intl_number_format_);
        std::swap(main_country_for_code_, other->main_country_for_code_);
        leading_digits_.Swap(&other->leading_digits_);
        std::swap(leading_zero_possible_, other->leading_zero_possible_);
        std::swap(mobile_number_portable_region_, other->mobile_number_portable_region_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string PhoneMetadata::GetTypeName() const
    {
        return "i18n.phonenumbers.PhoneMetadata";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // PhoneMetadata

    // optional .i18n.phonenumbers.PhoneNumberDesc general_desc = 1;
    bool PhoneMetadata::has_general_desc() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void PhoneMetadata::set_has_general_desc()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void PhoneMetadata::clear_has_general_desc()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void PhoneMetadata::clear_general_desc()
    {
        if (general_desc_ != NULL)
            general_desc_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_general_desc();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::general_desc() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.general_desc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return general_desc_ != NULL ? *general_desc_ : *default_instance().general_desc_;
#else
        return general_desc_ != NULL ? *general_desc_ : *default_instance_->general_desc_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_general_desc()
    {
        set_has_general_desc();
        if (general_desc_ == NULL) {
            general_desc_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.general_desc)
        return general_desc_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_general_desc()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.general_desc)
        clear_has_general_desc();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = general_desc_;
        general_desc_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_general_desc(::i18n::phonenumbers::PhoneNumberDesc* general_desc)
    {
        delete general_desc_;
        general_desc_ = general_desc;
        if (general_desc) {
            set_has_general_desc();
        } else {
            clear_has_general_desc();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.general_desc)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc fixed_line = 2;
    bool PhoneMetadata::has_fixed_line() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void PhoneMetadata::set_has_fixed_line()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void PhoneMetadata::clear_has_fixed_line()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void PhoneMetadata::clear_fixed_line()
    {
        if (fixed_line_ != NULL)
            fixed_line_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_fixed_line();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::fixed_line() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.fixed_line)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return fixed_line_ != NULL ? *fixed_line_ : *default_instance().fixed_line_;
#else
        return fixed_line_ != NULL ? *fixed_line_ : *default_instance_->fixed_line_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_fixed_line()
    {
        set_has_fixed_line();
        if (fixed_line_ == NULL) {
            fixed_line_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.fixed_line)
        return fixed_line_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_fixed_line()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.fixed_line)
        clear_has_fixed_line();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = fixed_line_;
        fixed_line_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_fixed_line(::i18n::phonenumbers::PhoneNumberDesc* fixed_line)
    {
        delete fixed_line_;
        fixed_line_ = fixed_line;
        if (fixed_line) {
            set_has_fixed_line();
        } else {
            clear_has_fixed_line();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.fixed_line)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc mobile = 3;
    bool PhoneMetadata::has_mobile() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void PhoneMetadata::set_has_mobile()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void PhoneMetadata::clear_has_mobile()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void PhoneMetadata::clear_mobile()
    {
        if (mobile_ != NULL)
            mobile_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_mobile();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::mobile() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return mobile_ != NULL ? *mobile_ : *default_instance().mobile_;
#else
        return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_mobile()
    {
        set_has_mobile();
        if (mobile_ == NULL) {
            mobile_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.mobile)
        return mobile_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_mobile()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.mobile)
        clear_has_mobile();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = mobile_;
        mobile_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_mobile(::i18n::phonenumbers::PhoneNumberDesc* mobile)
    {
        delete mobile_;
        mobile_ = mobile;
        if (mobile) {
            set_has_mobile();
        } else {
            clear_has_mobile();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.mobile)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc toll_free = 4;
    bool PhoneMetadata::has_toll_free() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void PhoneMetadata::set_has_toll_free()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void PhoneMetadata::clear_has_toll_free()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void PhoneMetadata::clear_toll_free()
    {
        if (toll_free_ != NULL)
            toll_free_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_toll_free();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::toll_free() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.toll_free)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return toll_free_ != NULL ? *toll_free_ : *default_instance().toll_free_;
#else
        return toll_free_ != NULL ? *toll_free_ : *default_instance_->toll_free_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_toll_free()
    {
        set_has_toll_free();
        if (toll_free_ == NULL) {
            toll_free_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.toll_free)
        return toll_free_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_toll_free()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.toll_free)
        clear_has_toll_free();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = toll_free_;
        toll_free_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_toll_free(::i18n::phonenumbers::PhoneNumberDesc* toll_free)
    {
        delete toll_free_;
        toll_free_ = toll_free;
        if (toll_free) {
            set_has_toll_free();
        } else {
            clear_has_toll_free();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.toll_free)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc premium_rate = 5;
    bool PhoneMetadata::has_premium_rate() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void PhoneMetadata::set_has_premium_rate()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void PhoneMetadata::clear_has_premium_rate()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void PhoneMetadata::clear_premium_rate()
    {
        if (premium_rate_ != NULL)
            premium_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_premium_rate();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::premium_rate() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.premium_rate)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return premium_rate_ != NULL ? *premium_rate_ : *default_instance().premium_rate_;
#else
        return premium_rate_ != NULL ? *premium_rate_ : *default_instance_->premium_rate_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_premium_rate()
    {
        set_has_premium_rate();
        if (premium_rate_ == NULL) {
            premium_rate_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.premium_rate)
        return premium_rate_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_premium_rate()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.premium_rate)
        clear_has_premium_rate();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = premium_rate_;
        premium_rate_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_premium_rate(::i18n::phonenumbers::PhoneNumberDesc* premium_rate)
    {
        delete premium_rate_;
        premium_rate_ = premium_rate;
        if (premium_rate) {
            set_has_premium_rate();
        } else {
            clear_has_premium_rate();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.premium_rate)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc shared_cost = 6;
    bool PhoneMetadata::has_shared_cost() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void PhoneMetadata::set_has_shared_cost()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void PhoneMetadata::clear_has_shared_cost()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void PhoneMetadata::clear_shared_cost()
    {
        if (shared_cost_ != NULL)
            shared_cost_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_shared_cost();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::shared_cost() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.shared_cost)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return shared_cost_ != NULL ? *shared_cost_ : *default_instance().shared_cost_;
#else
        return shared_cost_ != NULL ? *shared_cost_ : *default_instance_->shared_cost_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_shared_cost()
    {
        set_has_shared_cost();
        if (shared_cost_ == NULL) {
            shared_cost_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.shared_cost)
        return shared_cost_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_shared_cost()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.shared_cost)
        clear_has_shared_cost();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = shared_cost_;
        shared_cost_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_shared_cost(::i18n::phonenumbers::PhoneNumberDesc* shared_cost)
    {
        delete shared_cost_;
        shared_cost_ = shared_cost;
        if (shared_cost) {
            set_has_shared_cost();
        } else {
            clear_has_shared_cost();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.shared_cost)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc personal_number = 7;
    bool PhoneMetadata::has_personal_number() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void PhoneMetadata::set_has_personal_number()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void PhoneMetadata::clear_has_personal_number()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void PhoneMetadata::clear_personal_number()
    {
        if (personal_number_ != NULL)
            personal_number_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_personal_number();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::personal_number() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.personal_number)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return personal_number_ != NULL ? *personal_number_ : *default_instance().personal_number_;
#else
        return personal_number_ != NULL ? *personal_number_ : *default_instance_->personal_number_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_personal_number()
    {
        set_has_personal_number();
        if (personal_number_ == NULL) {
            personal_number_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.personal_number)
        return personal_number_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_personal_number()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.personal_number)
        clear_has_personal_number();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = personal_number_;
        personal_number_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_personal_number(::i18n::phonenumbers::PhoneNumberDesc* personal_number)
    {
        delete personal_number_;
        personal_number_ = personal_number;
        if (personal_number) {
            set_has_personal_number();
        } else {
            clear_has_personal_number();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.personal_number)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voip = 8;
    bool PhoneMetadata::has_voip() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    void PhoneMetadata::set_has_voip()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    void PhoneMetadata::clear_has_voip()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    void PhoneMetadata::clear_voip()
    {
        if (voip_ != NULL)
            voip_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_voip();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voip() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voip)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return voip_ != NULL ? *voip_ : *default_instance().voip_;
#else
        return voip_ != NULL ? *voip_ : *default_instance_->voip_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voip()
    {
        set_has_voip();
        if (voip_ == NULL) {
            voip_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voip)
        return voip_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voip()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voip)
        clear_has_voip();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = voip_;
        voip_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_voip(::i18n::phonenumbers::PhoneNumberDesc* voip)
    {
        delete voip_;
        voip_ = voip;
        if (voip) {
            set_has_voip();
        } else {
            clear_has_voip();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voip)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc pager = 21;
    bool PhoneMetadata::has_pager() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    void PhoneMetadata::set_has_pager()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    void PhoneMetadata::clear_has_pager()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    void PhoneMetadata::clear_pager()
    {
        if (pager_ != NULL)
            pager_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_pager();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::pager() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.pager)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return pager_ != NULL ? *pager_ : *default_instance().pager_;
#else
        return pager_ != NULL ? *pager_ : *default_instance_->pager_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_pager()
    {
        set_has_pager();
        if (pager_ == NULL) {
            pager_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.pager)
        return pager_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_pager()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.pager)
        clear_has_pager();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = pager_;
        pager_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_pager(::i18n::phonenumbers::PhoneNumberDesc* pager)
    {
        delete pager_;
        pager_ = pager;
        if (pager) {
            set_has_pager();
        } else {
            clear_has_pager();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.pager)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc uan = 25;
    bool PhoneMetadata::has_uan() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    void PhoneMetadata::set_has_uan()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    void PhoneMetadata::clear_has_uan()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    void PhoneMetadata::clear_uan()
    {
        if (uan_ != NULL)
            uan_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_uan();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::uan() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.uan)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return uan_ != NULL ? *uan_ : *default_instance().uan_;
#else
        return uan_ != NULL ? *uan_ : *default_instance_->uan_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_uan()
    {
        set_has_uan();
        if (uan_ == NULL) {
            uan_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.uan)
        return uan_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_uan()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.uan)
        clear_has_uan();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = uan_;
        uan_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_uan(::i18n::phonenumbers::PhoneNumberDesc* uan)
    {
        delete uan_;
        uan_ = uan;
        if (uan) {
            set_has_uan();
        } else {
            clear_has_uan();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.uan)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc emergency = 27;
    bool PhoneMetadata::has_emergency() const
    {
        return (_has_bits_[0] & 0x00000400u) != 0;
    }
    void PhoneMetadata::set_has_emergency()
    {
        _has_bits_[0] |= 0x00000400u;
    }
    void PhoneMetadata::clear_has_emergency()
    {
        _has_bits_[0] &= ~0x00000400u;
    }
    void PhoneMetadata::clear_emergency()
    {
        if (emergency_ != NULL)
            emergency_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_emergency();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::emergency() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.emergency)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return emergency_ != NULL ? *emergency_ : *default_instance().emergency_;
#else
        return emergency_ != NULL ? *emergency_ : *default_instance_->emergency_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_emergency()
    {
        set_has_emergency();
        if (emergency_ == NULL) {
            emergency_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.emergency)
        return emergency_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_emergency()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.emergency)
        clear_has_emergency();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = emergency_;
        emergency_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_emergency(::i18n::phonenumbers::PhoneNumberDesc* emergency)
    {
        delete emergency_;
        emergency_ = emergency;
        if (emergency) {
            set_has_emergency();
        } else {
            clear_has_emergency();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.emergency)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc voicemail = 28;
    bool PhoneMetadata::has_voicemail() const
    {
        return (_has_bits_[0] & 0x00000800u) != 0;
    }
    void PhoneMetadata::set_has_voicemail()
    {
        _has_bits_[0] |= 0x00000800u;
    }
    void PhoneMetadata::clear_has_voicemail()
    {
        _has_bits_[0] &= ~0x00000800u;
    }
    void PhoneMetadata::clear_voicemail()
    {
        if (voicemail_ != NULL)
            voicemail_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_voicemail();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::voicemail() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.voicemail)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return voicemail_ != NULL ? *voicemail_ : *default_instance().voicemail_;
#else
        return voicemail_ != NULL ? *voicemail_ : *default_instance_->voicemail_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_voicemail()
    {
        set_has_voicemail();
        if (voicemail_ == NULL) {
            voicemail_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.voicemail)
        return voicemail_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_voicemail()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.voicemail)
        clear_has_voicemail();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = voicemail_;
        voicemail_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_voicemail(::i18n::phonenumbers::PhoneNumberDesc* voicemail)
    {
        delete voicemail_;
        voicemail_ = voicemail;
        if (voicemail) {
            set_has_voicemail();
        } else {
            clear_has_voicemail();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.voicemail)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc short_code = 29;
    bool PhoneMetadata::has_short_code() const
    {
        return (_has_bits_[0] & 0x00001000u) != 0;
    }
    void PhoneMetadata::set_has_short_code()
    {
        _has_bits_[0] |= 0x00001000u;
    }
    void PhoneMetadata::clear_has_short_code()
    {
        _has_bits_[0] &= ~0x00001000u;
    }
    void PhoneMetadata::clear_short_code()
    {
        if (short_code_ != NULL)
            short_code_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_short_code();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::short_code() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.short_code)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return short_code_ != NULL ? *short_code_ : *default_instance().short_code_;
#else
        return short_code_ != NULL ? *short_code_ : *default_instance_->short_code_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_short_code()
    {
        set_has_short_code();
        if (short_code_ == NULL) {
            short_code_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.short_code)
        return short_code_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_short_code()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.short_code)
        clear_has_short_code();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = short_code_;
        short_code_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_short_code(::i18n::phonenumbers::PhoneNumberDesc* short_code)
    {
        delete short_code_;
        short_code_ = short_code;
        if (short_code) {
            set_has_short_code();
        } else {
            clear_has_short_code();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.short_code)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc standard_rate = 30;
    bool PhoneMetadata::has_standard_rate() const
    {
        return (_has_bits_[0] & 0x00002000u) != 0;
    }
    void PhoneMetadata::set_has_standard_rate()
    {
        _has_bits_[0] |= 0x00002000u;
    }
    void PhoneMetadata::clear_has_standard_rate()
    {
        _has_bits_[0] &= ~0x00002000u;
    }
    void PhoneMetadata::clear_standard_rate()
    {
        if (standard_rate_ != NULL)
            standard_rate_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_standard_rate();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::standard_rate() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.standard_rate)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return standard_rate_ != NULL ? *standard_rate_ : *default_instance().standard_rate_;
#else
        return standard_rate_ != NULL ? *standard_rate_ : *default_instance_->standard_rate_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_standard_rate()
    {
        set_has_standard_rate();
        if (standard_rate_ == NULL) {
            standard_rate_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.standard_rate)
        return standard_rate_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_standard_rate()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.standard_rate)
        clear_has_standard_rate();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = standard_rate_;
        standard_rate_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_standard_rate(::i18n::phonenumbers::PhoneNumberDesc* standard_rate)
    {
        delete standard_rate_;
        standard_rate_ = standard_rate;
        if (standard_rate) {
            set_has_standard_rate();
        } else {
            clear_has_standard_rate();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.standard_rate)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc carrier_specific = 31;
    bool PhoneMetadata::has_carrier_specific() const
    {
        return (_has_bits_[0] & 0x00004000u) != 0;
    }
    void PhoneMetadata::set_has_carrier_specific()
    {
        _has_bits_[0] |= 0x00004000u;
    }
    void PhoneMetadata::clear_has_carrier_specific()
    {
        _has_bits_[0] &= ~0x00004000u;
    }
    void PhoneMetadata::clear_carrier_specific()
    {
        if (carrier_specific_ != NULL)
            carrier_specific_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_carrier_specific();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::carrier_specific() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.carrier_specific)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return carrier_specific_ != NULL ? *carrier_specific_ : *default_instance().carrier_specific_;
#else
        return carrier_specific_ != NULL ? *carrier_specific_ : *default_instance_->carrier_specific_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_carrier_specific()
    {
        set_has_carrier_specific();
        if (carrier_specific_ == NULL) {
            carrier_specific_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.carrier_specific)
        return carrier_specific_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_carrier_specific()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.carrier_specific)
        clear_has_carrier_specific();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = carrier_specific_;
        carrier_specific_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_carrier_specific(::i18n::phonenumbers::PhoneNumberDesc* carrier_specific)
    {
        delete carrier_specific_;
        carrier_specific_ = carrier_specific;
        if (carrier_specific) {
            set_has_carrier_specific();
        } else {
            clear_has_carrier_specific();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.carrier_specific)
    }

    // optional .i18n.phonenumbers.PhoneNumberDesc no_international_dialling = 24;
    bool PhoneMetadata::has_no_international_dialling() const
    {
        return (_has_bits_[0] & 0x00008000u) != 0;
    }
    void PhoneMetadata::set_has_no_international_dialling()
    {
        _has_bits_[0] |= 0x00008000u;
    }
    void PhoneMetadata::clear_has_no_international_dialling()
    {
        _has_bits_[0] &= ~0x00008000u;
    }
    void PhoneMetadata::clear_no_international_dialling()
    {
        if (no_international_dialling_ != NULL)
            no_international_dialling_->::i18n::phonenumbers::PhoneNumberDesc::Clear();
        clear_has_no_international_dialling();
    }
    const ::i18n::phonenumbers::PhoneNumberDesc& PhoneMetadata::no_international_dialling() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return no_international_dialling_ != NULL ? *no_international_dialling_ : *default_instance().no_international_dialling_;
#else
        return no_international_dialling_ != NULL ? *no_international_dialling_ : *default_instance_->no_international_dialling_;
#endif
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::mutable_no_international_dialling()
    {
        set_has_no_international_dialling();
        if (no_international_dialling_ == NULL) {
            no_international_dialling_ = new ::i18n::phonenumbers::PhoneNumberDesc;
        }
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
        return no_international_dialling_;
    }
    ::i18n::phonenumbers::PhoneNumberDesc* PhoneMetadata::release_no_international_dialling()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
        clear_has_no_international_dialling();
        ::i18n::phonenumbers::PhoneNumberDesc* temp = no_international_dialling_;
        no_international_dialling_ = NULL;
        return temp;
    }
    void PhoneMetadata::set_allocated_no_international_dialling(::i18n::phonenumbers::PhoneNumberDesc* no_international_dialling)
    {
        delete no_international_dialling_;
        no_international_dialling_ = no_international_dialling;
        if (no_international_dialling) {
            set_has_no_international_dialling();
        } else {
            clear_has_no_international_dialling();
        }
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.no_international_dialling)
    }

    // required string id = 9;
    bool PhoneMetadata::has_id() const
    {
        return (_has_bits_[0] & 0x00010000u) != 0;
    }
    void PhoneMetadata::set_has_id()
    {
        _has_bits_[0] |= 0x00010000u;
    }
    void PhoneMetadata::clear_has_id()
    {
        _has_bits_[0] &= ~0x00010000u;
    }
    void PhoneMetadata::clear_id()
    {
        id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_id();
    }
    const ::std::string& PhoneMetadata::id() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.id)
        return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_id(const ::std::string& value)
    {
        set_has_id();
        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.id)
    }
    void PhoneMetadata::set_id(const char* value)
    {
        set_has_id();
        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.id)
    }
    void PhoneMetadata::set_id(const char* value, size_t size)
    {
        set_has_id();
        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.id)
    }
    ::std::string* PhoneMetadata::mutable_id()
    {
        set_has_id();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.id)
        return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_id()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.id)
        clear_has_id();
        return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_id(::std::string* id)
    {
        if (id != NULL) {
            set_has_id();
        } else {
            clear_has_id();
        }
        id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.id)
    }

    // optional int32 country_code = 10;
    bool PhoneMetadata::has_country_code() const
    {
        return (_has_bits_[0] & 0x00020000u) != 0;
    }
    void PhoneMetadata::set_has_country_code()
    {
        _has_bits_[0] |= 0x00020000u;
    }
    void PhoneMetadata::clear_has_country_code()
    {
        _has_bits_[0] &= ~0x00020000u;
    }
    void PhoneMetadata::clear_country_code()
    {
        country_code_ = 0;
        clear_has_country_code();
    }
    ::google::protobuf::int32 PhoneMetadata::country_code() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.country_code)
        return country_code_;
    }
    void PhoneMetadata::set_country_code(::google::protobuf::int32 value)
    {
        set_has_country_code();
        country_code_ = value;
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.country_code)
    }

    // optional string international_prefix = 11;
    bool PhoneMetadata::has_international_prefix() const
    {
        return (_has_bits_[0] & 0x00040000u) != 0;
    }
    void PhoneMetadata::set_has_international_prefix()
    {
        _has_bits_[0] |= 0x00040000u;
    }
    void PhoneMetadata::clear_has_international_prefix()
    {
        _has_bits_[0] &= ~0x00040000u;
    }
    void PhoneMetadata::clear_international_prefix()
    {
        international_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_international_prefix();
    }
    const ::std::string& PhoneMetadata::international_prefix() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.international_prefix)
        return international_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_international_prefix(const ::std::string& value)
    {
        set_has_international_prefix();
        international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.international_prefix)
    }
    void PhoneMetadata::set_international_prefix(const char* value)
    {
        set_has_international_prefix();
        international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.international_prefix)
    }
    void PhoneMetadata::set_international_prefix(const char* value, size_t size)
    {
        set_has_international_prefix();
        international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.international_prefix)
    }
    ::std::string* PhoneMetadata::mutable_international_prefix()
    {
        set_has_international_prefix();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.international_prefix)
        return international_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_international_prefix()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.international_prefix)
        clear_has_international_prefix();
        return international_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_international_prefix(::std::string* international_prefix)
    {
        if (international_prefix != NULL) {
            set_has_international_prefix();
        } else {
            clear_has_international_prefix();
        }
        international_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), international_prefix);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.international_prefix)
    }

    // optional string preferred_international_prefix = 17;
    bool PhoneMetadata::has_preferred_international_prefix() const
    {
        return (_has_bits_[0] & 0x00080000u) != 0;
    }
    void PhoneMetadata::set_has_preferred_international_prefix()
    {
        _has_bits_[0] |= 0x00080000u;
    }
    void PhoneMetadata::clear_has_preferred_international_prefix()
    {
        _has_bits_[0] &= ~0x00080000u;
    }
    void PhoneMetadata::clear_preferred_international_prefix()
    {
        preferred_international_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_preferred_international_prefix();
    }
    const ::std::string& PhoneMetadata::preferred_international_prefix() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
        return preferred_international_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_preferred_international_prefix(const ::std::string& value)
    {
        set_has_preferred_international_prefix();
        preferred_international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
    }
    void PhoneMetadata::set_preferred_international_prefix(const char* value)
    {
        set_has_preferred_international_prefix();
        preferred_international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
    }
    void PhoneMetadata::set_preferred_international_prefix(const char* value, size_t size)
    {
        set_has_preferred_international_prefix();
        preferred_international_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
    }
    ::std::string* PhoneMetadata::mutable_preferred_international_prefix()
    {
        set_has_preferred_international_prefix();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
        return preferred_international_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_preferred_international_prefix()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
        clear_has_preferred_international_prefix();
        return preferred_international_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_preferred_international_prefix(::std::string* preferred_international_prefix)
    {
        if (preferred_international_prefix != NULL) {
            set_has_preferred_international_prefix();
        } else {
            clear_has_preferred_international_prefix();
        }
        preferred_international_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_international_prefix);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_international_prefix)
    }

    // optional string national_prefix = 12;
    bool PhoneMetadata::has_national_prefix() const
    {
        return (_has_bits_[0] & 0x00100000u) != 0;
    }
    void PhoneMetadata::set_has_national_prefix()
    {
        _has_bits_[0] |= 0x00100000u;
    }
    void PhoneMetadata::clear_has_national_prefix()
    {
        _has_bits_[0] &= ~0x00100000u;
    }
    void PhoneMetadata::clear_national_prefix()
    {
        national_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_national_prefix();
    }
    const ::std::string& PhoneMetadata::national_prefix() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix)
        return national_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_national_prefix(const ::std::string& value)
    {
        set_has_national_prefix();
        national_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix)
    }
    void PhoneMetadata::set_national_prefix(const char* value)
    {
        set_has_national_prefix();
        national_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.national_prefix)
    }
    void PhoneMetadata::set_national_prefix(const char* value, size_t size)
    {
        set_has_national_prefix();
        national_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.national_prefix)
    }
    ::std::string* PhoneMetadata::mutable_national_prefix()
    {
        set_has_national_prefix();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix)
        return national_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_national_prefix()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix)
        clear_has_national_prefix();
        return national_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_national_prefix(::std::string* national_prefix)
    {
        if (national_prefix != NULL) {
            set_has_national_prefix();
        } else {
            clear_has_national_prefix();
        }
        national_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix)
    }

    // optional string preferred_extn_prefix = 13;
    bool PhoneMetadata::has_preferred_extn_prefix() const
    {
        return (_has_bits_[0] & 0x00200000u) != 0;
    }
    void PhoneMetadata::set_has_preferred_extn_prefix()
    {
        _has_bits_[0] |= 0x00200000u;
    }
    void PhoneMetadata::clear_has_preferred_extn_prefix()
    {
        _has_bits_[0] &= ~0x00200000u;
    }
    void PhoneMetadata::clear_preferred_extn_prefix()
    {
        preferred_extn_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_preferred_extn_prefix();
    }
    const ::std::string& PhoneMetadata::preferred_extn_prefix() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
        return preferred_extn_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_preferred_extn_prefix(const ::std::string& value)
    {
        set_has_preferred_extn_prefix();
        preferred_extn_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
    }
    void PhoneMetadata::set_preferred_extn_prefix(const char* value)
    {
        set_has_preferred_extn_prefix();
        preferred_extn_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
    }
    void PhoneMetadata::set_preferred_extn_prefix(const char* value, size_t size)
    {
        set_has_preferred_extn_prefix();
        preferred_extn_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
    }
    ::std::string* PhoneMetadata::mutable_preferred_extn_prefix()
    {
        set_has_preferred_extn_prefix();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
        return preferred_extn_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_preferred_extn_prefix()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
        clear_has_preferred_extn_prefix();
        return preferred_extn_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_preferred_extn_prefix(::std::string* preferred_extn_prefix)
    {
        if (preferred_extn_prefix != NULL) {
            set_has_preferred_extn_prefix();
        } else {
            clear_has_preferred_extn_prefix();
        }
        preferred_extn_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_extn_prefix);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.preferred_extn_prefix)
    }

    // optional string national_prefix_for_parsing = 15;
    bool PhoneMetadata::has_national_prefix_for_parsing() const
    {
        return (_has_bits_[0] & 0x00400000u) != 0;
    }
    void PhoneMetadata::set_has_national_prefix_for_parsing()
    {
        _has_bits_[0] |= 0x00400000u;
    }
    void PhoneMetadata::clear_has_national_prefix_for_parsing()
    {
        _has_bits_[0] &= ~0x00400000u;
    }
    void PhoneMetadata::clear_national_prefix_for_parsing()
    {
        national_prefix_for_parsing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_national_prefix_for_parsing();
    }
    const ::std::string& PhoneMetadata::national_prefix_for_parsing() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
        return national_prefix_for_parsing_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_national_prefix_for_parsing(const ::std::string& value)
    {
        set_has_national_prefix_for_parsing();
        national_prefix_for_parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
    }
    void PhoneMetadata::set_national_prefix_for_parsing(const char* value)
    {
        set_has_national_prefix_for_parsing();
        national_prefix_for_parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
    }
    void PhoneMetadata::set_national_prefix_for_parsing(const char* value, size_t size)
    {
        set_has_national_prefix_for_parsing();
        national_prefix_for_parsing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
    }
    ::std::string* PhoneMetadata::mutable_national_prefix_for_parsing()
    {
        set_has_national_prefix_for_parsing();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
        return national_prefix_for_parsing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_national_prefix_for_parsing()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
        clear_has_national_prefix_for_parsing();
        return national_prefix_for_parsing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_national_prefix_for_parsing(::std::string* national_prefix_for_parsing)
    {
        if (national_prefix_for_parsing != NULL) {
            set_has_national_prefix_for_parsing();
        } else {
            clear_has_national_prefix_for_parsing();
        }
        national_prefix_for_parsing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix_for_parsing);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_for_parsing)
    }

    // optional string national_prefix_transform_rule = 16;
    bool PhoneMetadata::has_national_prefix_transform_rule() const
    {
        return (_has_bits_[0] & 0x00800000u) != 0;
    }
    void PhoneMetadata::set_has_national_prefix_transform_rule()
    {
        _has_bits_[0] |= 0x00800000u;
    }
    void PhoneMetadata::clear_has_national_prefix_transform_rule()
    {
        _has_bits_[0] &= ~0x00800000u;
    }
    void PhoneMetadata::clear_national_prefix_transform_rule()
    {
        national_prefix_transform_rule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_national_prefix_transform_rule();
    }
    const ::std::string& PhoneMetadata::national_prefix_transform_rule() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
        return national_prefix_transform_rule_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_national_prefix_transform_rule(const ::std::string& value)
    {
        set_has_national_prefix_transform_rule();
        national_prefix_transform_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
    }
    void PhoneMetadata::set_national_prefix_transform_rule(const char* value)
    {
        set_has_national_prefix_transform_rule();
        national_prefix_transform_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
    }
    void PhoneMetadata::set_national_prefix_transform_rule(const char* value, size_t size)
    {
        set_has_national_prefix_transform_rule();
        national_prefix_transform_rule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
    }
    ::std::string* PhoneMetadata::mutable_national_prefix_transform_rule()
    {
        set_has_national_prefix_transform_rule();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
        return national_prefix_transform_rule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_national_prefix_transform_rule()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
        clear_has_national_prefix_transform_rule();
        return national_prefix_transform_rule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_national_prefix_transform_rule(::std::string* national_prefix_transform_rule)
    {
        if (national_prefix_transform_rule != NULL) {
            set_has_national_prefix_transform_rule();
        } else {
            clear_has_national_prefix_transform_rule();
        }
        national_prefix_transform_rule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national_prefix_transform_rule);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.national_prefix_transform_rule)
    }

    // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
    bool PhoneMetadata::has_same_mobile_and_fixed_line_pattern() const
    {
        return (_has_bits_[0] & 0x01000000u) != 0;
    }
    void PhoneMetadata::set_has_same_mobile_and_fixed_line_pattern()
    {
        _has_bits_[0] |= 0x01000000u;
    }
    void PhoneMetadata::clear_has_same_mobile_and_fixed_line_pattern()
    {
        _has_bits_[0] &= ~0x01000000u;
    }
    void PhoneMetadata::clear_same_mobile_and_fixed_line_pattern()
    {
        same_mobile_and_fixed_line_pattern_ = false;
        clear_has_same_mobile_and_fixed_line_pattern();
    }
    bool PhoneMetadata::same_mobile_and_fixed_line_pattern() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
        return same_mobile_and_fixed_line_pattern_;
    }
    void PhoneMetadata::set_same_mobile_and_fixed_line_pattern(bool value)
    {
        set_has_same_mobile_and_fixed_line_pattern();
        same_mobile_and_fixed_line_pattern_ = value;
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.same_mobile_and_fixed_line_pattern)
    }

    // repeated .i18n.phonenumbers.NumberFormat number_format = 19;
    int PhoneMetadata::number_format_size() const
    {
        return number_format_.size();
    }
    void PhoneMetadata::clear_number_format()
    {
        number_format_.Clear();
    }
    const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::number_format(int index) const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.number_format)
        return number_format_.Get(index);
    }
    ::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_number_format(int index)
    {
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.number_format)
        return number_format_.Mutable(index);
    }
    ::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_number_format()
    {
        // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.number_format)
        return number_format_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>*
    PhoneMetadata::mutable_number_format()
    {
        // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.number_format)
        return &number_format_;
    }
    const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>&
    PhoneMetadata::number_format() const
    {
        // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.number_format)
        return number_format_;
    }

    // repeated .i18n.phonenumbers.NumberFormat intl_number_format = 20;
    int PhoneMetadata::intl_number_format_size() const
    {
        return intl_number_format_.size();
    }
    void PhoneMetadata::clear_intl_number_format()
    {
        intl_number_format_.Clear();
    }
    const ::i18n::phonenumbers::NumberFormat& PhoneMetadata::intl_number_format(int index) const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.intl_number_format)
        return intl_number_format_.Get(index);
    }
    ::i18n::phonenumbers::NumberFormat* PhoneMetadata::mutable_intl_number_format(int index)
    {
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.intl_number_format)
        return intl_number_format_.Mutable(index);
    }
    ::i18n::phonenumbers::NumberFormat* PhoneMetadata::add_intl_number_format()
    {
        // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadata.intl_number_format)
        return intl_number_format_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>*
    PhoneMetadata::mutable_intl_number_format()
    {
        // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
        return &intl_number_format_;
    }
    const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::NumberFormat>&
    PhoneMetadata::intl_number_format() const
    {
        // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadata.intl_number_format)
        return intl_number_format_;
    }

    // optional bool main_country_for_code = 22 [default = false];
    bool PhoneMetadata::has_main_country_for_code() const
    {
        return (_has_bits_[0] & 0x08000000u) != 0;
    }
    void PhoneMetadata::set_has_main_country_for_code()
    {
        _has_bits_[0] |= 0x08000000u;
    }
    void PhoneMetadata::clear_has_main_country_for_code()
    {
        _has_bits_[0] &= ~0x08000000u;
    }
    void PhoneMetadata::clear_main_country_for_code()
    {
        main_country_for_code_ = false;
        clear_has_main_country_for_code();
    }
    bool PhoneMetadata::main_country_for_code() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
        return main_country_for_code_;
    }
    void PhoneMetadata::set_main_country_for_code(bool value)
    {
        set_has_main_country_for_code();
        main_country_for_code_ = value;
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.main_country_for_code)
    }

    // optional string leading_digits = 23;
    bool PhoneMetadata::has_leading_digits() const
    {
        return (_has_bits_[0] & 0x10000000u) != 0;
    }
    void PhoneMetadata::set_has_leading_digits()
    {
        _has_bits_[0] |= 0x10000000u;
    }
    void PhoneMetadata::clear_has_leading_digits()
    {
        _has_bits_[0] &= ~0x10000000u;
    }
    void PhoneMetadata::clear_leading_digits()
    {
        leading_digits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_leading_digits();
    }
    const ::std::string& PhoneMetadata::leading_digits() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_digits)
        return leading_digits_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_leading_digits(const ::std::string& value)
    {
        set_has_leading_digits();
        leading_digits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_digits)
    }
    void PhoneMetadata::set_leading_digits(const char* value)
    {
        set_has_leading_digits();
        leading_digits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:i18n.phonenumbers.PhoneMetadata.leading_digits)
    }
    void PhoneMetadata::set_leading_digits(const char* value, size_t size)
    {
        set_has_leading_digits();
        leading_digits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:i18n.phonenumbers.PhoneMetadata.leading_digits)
    }
    ::std::string* PhoneMetadata::mutable_leading_digits()
    {
        set_has_leading_digits();
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadata.leading_digits)
        return leading_digits_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* PhoneMetadata::release_leading_digits()
    {
        // @@protoc_insertion_point(field_release:i18n.phonenumbers.PhoneMetadata.leading_digits)
        clear_has_leading_digits();
        return leading_digits_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void PhoneMetadata::set_allocated_leading_digits(::std::string* leading_digits)
    {
        if (leading_digits != NULL) {
            set_has_leading_digits();
        } else {
            clear_has_leading_digits();
        }
        leading_digits_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leading_digits);
        // @@protoc_insertion_point(field_set_allocated:i18n.phonenumbers.PhoneMetadata.leading_digits)
    }

    // optional bool leading_zero_possible = 26 [default = false];
    bool PhoneMetadata::has_leading_zero_possible() const
    {
        return (_has_bits_[0] & 0x20000000u) != 0;
    }
    void PhoneMetadata::set_has_leading_zero_possible()
    {
        _has_bits_[0] |= 0x20000000u;
    }
    void PhoneMetadata::clear_has_leading_zero_possible()
    {
        _has_bits_[0] &= ~0x20000000u;
    }
    void PhoneMetadata::clear_leading_zero_possible()
    {
        leading_zero_possible_ = false;
        clear_has_leading_zero_possible();
    }
    bool PhoneMetadata::leading_zero_possible() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.leading_zero_possible)
        return leading_zero_possible_;
    }
    void PhoneMetadata::set_leading_zero_possible(bool value)
    {
        set_has_leading_zero_possible();
        leading_zero_possible_ = value;
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.leading_zero_possible)
    }

    // optional bool mobile_number_portable_region = 32 [default = false];
    bool PhoneMetadata::has_mobile_number_portable_region() const
    {
        return (_has_bits_[0] & 0x40000000u) != 0;
    }
    void PhoneMetadata::set_has_mobile_number_portable_region()
    {
        _has_bits_[0] |= 0x40000000u;
    }
    void PhoneMetadata::clear_has_mobile_number_portable_region()
    {
        _has_bits_[0] &= ~0x40000000u;
    }
    void PhoneMetadata::clear_mobile_number_portable_region()
    {
        mobile_number_portable_region_ = false;
        clear_has_mobile_number_portable_region();
    }
    bool PhoneMetadata::mobile_number_portable_region() const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
        return mobile_number_portable_region_;
    }
    void PhoneMetadata::set_mobile_number_portable_region(bool value)
    {
        set_has_mobile_number_portable_region();
        mobile_number_portable_region_ = value;
        // @@protoc_insertion_point(field_set:i18n.phonenumbers.PhoneMetadata.mobile_number_portable_region)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForPhoneMetadataCollection(
        PhoneMetadataCollection* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int PhoneMetadataCollection::kMetadataFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    PhoneMetadataCollection::PhoneMetadataCollection()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:i18n.phonenumbers.PhoneMetadataCollection)
    }

    void PhoneMetadataCollection::InitAsDefaultInstance()
    {
    }

    PhoneMetadataCollection::PhoneMetadataCollection(const PhoneMetadataCollection& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:i18n.phonenumbers.PhoneMetadataCollection)
    }

    void PhoneMetadataCollection::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    PhoneMetadataCollection::~PhoneMetadataCollection()
    {
        // @@protoc_insertion_point(destructor:i18n.phonenumbers.PhoneMetadataCollection)
        SharedDtor();
    }

    void PhoneMetadataCollection::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void PhoneMetadataCollection::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const PhoneMetadataCollection& PhoneMetadataCollection::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_phonemetadata_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_phonemetadata_2eproto();
#endif
        return *default_instance_;
    }

    PhoneMetadataCollection* PhoneMetadataCollection::default_instance_ = NULL;

    PhoneMetadataCollection* PhoneMetadataCollection::New(::google::protobuf::Arena* arena) const
    {
        PhoneMetadataCollection* n = new PhoneMetadataCollection;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void PhoneMetadataCollection::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:i18n.phonenumbers.PhoneMetadataCollection)
        metadata_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool PhoneMetadataCollection::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForPhoneMetadataCollection, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:i18n.phonenumbers.PhoneMetadataCollection)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
            case 1: {
                if (tag == 10) {
                    DO_(input->IncrementRecursionDepth());
                parse_loop_metadata:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_metadata()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(10))
                    goto parse_loop_metadata;
                input->UnsafeDecrementRecursionDepth();
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:i18n.phonenumbers.PhoneMetadataCollection)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:i18n.phonenumbers.PhoneMetadataCollection)
        return false;
#undef DO_
    }

    void PhoneMetadataCollection::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:i18n.phonenumbers.PhoneMetadataCollection)
        // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
        for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                1, this->metadata(i), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:i18n.phonenumbers.PhoneMetadataCollection)
    }

    int PhoneMetadataCollection::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:i18n.phonenumbers.PhoneMetadataCollection)
        int total_size = 0;

        // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
        total_size += 1 * this->metadata_size();
        for (int i = 0; i < this->metadata_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->metadata(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void PhoneMetadataCollection::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const PhoneMetadataCollection*>(&from));
    }

    void PhoneMetadataCollection::MergeFrom(const PhoneMetadataCollection& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:i18n.phonenumbers.PhoneMetadataCollection)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        metadata_.MergeFrom(from.metadata_);
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void PhoneMetadataCollection::CopyFrom(const PhoneMetadataCollection& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:i18n.phonenumbers.PhoneMetadataCollection)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool PhoneMetadataCollection::IsInitialized() const
    {

        if (!::google::protobuf::internal::AllAreInitialized(this->metadata()))
            return false;
        return true;
    }

    void PhoneMetadataCollection::Swap(PhoneMetadataCollection* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void PhoneMetadataCollection::InternalSwap(PhoneMetadataCollection* other)
    {
        metadata_.UnsafeArenaSwap(&other->metadata_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string PhoneMetadataCollection::GetTypeName() const
    {
        return "i18n.phonenumbers.PhoneMetadataCollection";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // PhoneMetadataCollection

    // repeated .i18n.phonenumbers.PhoneMetadata metadata = 1;
    int PhoneMetadataCollection::metadata_size() const
    {
        return metadata_.size();
    }
    void PhoneMetadataCollection::clear_metadata()
    {
        metadata_.Clear();
    }
    const ::i18n::phonenumbers::PhoneMetadata& PhoneMetadataCollection::metadata(int index) const
    {
        // @@protoc_insertion_point(field_get:i18n.phonenumbers.PhoneMetadataCollection.metadata)
        return metadata_.Get(index);
    }
    ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::mutable_metadata(int index)
    {
        // @@protoc_insertion_point(field_mutable:i18n.phonenumbers.PhoneMetadataCollection.metadata)
        return metadata_.Mutable(index);
    }
    ::i18n::phonenumbers::PhoneMetadata* PhoneMetadataCollection::add_metadata()
    {
        // @@protoc_insertion_point(field_add:i18n.phonenumbers.PhoneMetadataCollection.metadata)
        return metadata_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>*
    PhoneMetadataCollection::mutable_metadata()
    {
        // @@protoc_insertion_point(field_mutable_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
        return &metadata_;
    }
    const ::google::protobuf::RepeatedPtrField<::i18n::phonenumbers::PhoneMetadata>&
    PhoneMetadataCollection::metadata() const
    {
        // @@protoc_insertion_point(field_list:i18n.phonenumbers.PhoneMetadataCollection.metadata)
        return metadata_;
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace phonenumbers
} // namespace i18n

// @@protoc_insertion_point(global_scope)
