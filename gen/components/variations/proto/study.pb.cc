// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: study.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "study.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace variations {

void protobuf_ShutdownFile_study_2eproto()
{
    delete Study::default_instance_;
    delete Study_Experiment::default_instance_;
    delete Study_Experiment_Param::default_instance_;
    delete Study_Experiment_FeatureAssociation::default_instance_;
    delete Study_Experiment_OverrideUIString::default_instance_;
    delete Study_Filter::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_study_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_study_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    Study::default_instance_ = new Study();
    Study_Experiment::default_instance_ = new Study_Experiment();
    Study_Experiment_Param::default_instance_ = new Study_Experiment_Param();
    Study_Experiment_FeatureAssociation::default_instance_ = new Study_Experiment_FeatureAssociation();
    Study_Experiment_OverrideUIString::default_instance_ = new Study_Experiment_OverrideUIString();
    Study_Filter::default_instance_ = new Study_Filter();
    Study::default_instance_->InitAsDefaultInstance();
    Study_Experiment::default_instance_->InitAsDefaultInstance();
    Study_Experiment_Param::default_instance_->InitAsDefaultInstance();
    Study_Experiment_FeatureAssociation::default_instance_->InitAsDefaultInstance();
    Study_Experiment_OverrideUIString::default_instance_->InitAsDefaultInstance();
    Study_Filter::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_study_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_study_2eproto_once_);
void protobuf_AddDesc_study_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_study_2eproto_once_,
        &protobuf_AddDesc_study_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_study_2eproto {
    StaticDescriptorInitializer_study_2eproto()
    {
        protobuf_AddDesc_study_2eproto();
    }
} static_descriptor_initializer_study_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForStudy(
    Study* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool Study_Consistency_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Consistency Study::SESSION;
const Study_Consistency Study::PERMANENT;
const Study_Consistency Study::Consistency_MIN;
const Study_Consistency Study::Consistency_MAX;
const int Study::Consistency_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Study_Channel_IsValid(int value)
{
    switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Channel Study::UNKNOWN;
const Study_Channel Study::CANARY;
const Study_Channel Study::DEV;
const Study_Channel Study::BETA;
const Study_Channel Study::STABLE;
const Study_Channel Study::Channel_MIN;
const Study_Channel Study::Channel_MAX;
const int Study::Channel_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Study_Platform_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Platform Study::PLATFORM_WINDOWS;
const Study_Platform Study::PLATFORM_MAC;
const Study_Platform Study::PLATFORM_LINUX;
const Study_Platform Study::PLATFORM_CHROMEOS;
const Study_Platform Study::PLATFORM_ANDROID;
const Study_Platform Study::PLATFORM_IOS;
const Study_Platform Study::Platform_MIN;
const Study_Platform Study::Platform_MAX;
const int Study::Platform_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Study_FormFactor_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_FormFactor Study::DESKTOP;
const Study_FormFactor Study::PHONE;
const Study_FormFactor Study::TABLET;
const Study_FormFactor Study::FormFactor_MIN;
const Study_FormFactor Study::FormFactor_MAX;
const int Study::FormFactor_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Study_ActivationType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_ActivationType Study::ACTIVATION_EXPLICIT;
const Study_ActivationType Study::ACTIVATION_AUTO;
const Study_ActivationType Study::ActivationType_MIN;
const Study_ActivationType Study::ActivationType_MAX;
const int Study::ActivationType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForStudy_Experiment(
    Study_Experiment* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool Study_Experiment_Type_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Study_Experiment_Type Study_Experiment::NORMAL;
const Study_Experiment_Type Study_Experiment::IGNORE_CHANGE;
const Study_Experiment_Type Study_Experiment::KILL_BEST_EFFORT;
const Study_Experiment_Type Study_Experiment::KILL_CRITICAL;
const Study_Experiment_Type Study_Experiment::Type_MIN;
const Study_Experiment_Type Study_Experiment::Type_MAX;
const int Study_Experiment::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForStudy_Experiment_Param(
    Study_Experiment_Param* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment_Param::kNameFieldNumber;
const int Study_Experiment_Param::kValueFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Study_Experiment_Param::Study_Experiment_Param()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:variations.Study.Experiment.Param)
}

void Study_Experiment_Param::InitAsDefaultInstance()
{
}

Study_Experiment_Param::Study_Experiment_Param(const Study_Experiment_Param& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:variations.Study.Experiment.Param)
}

void Study_Experiment_Param::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment_Param::~Study_Experiment_Param()
{
    // @@protoc_insertion_point(destructor:variations.Study.Experiment.Param)
    SharedDtor();
}

void Study_Experiment_Param::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void Study_Experiment_Param::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment_Param& Study_Experiment_Param::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_study_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_study_2eproto();
#endif
    return *default_instance_;
}

Study_Experiment_Param* Study_Experiment_Param::default_instance_ = NULL;

Study_Experiment_Param* Study_Experiment_Param::New(::google::protobuf::Arena* arena) const
{
    Study_Experiment_Param* n = new Study_Experiment_Param;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Study_Experiment_Param::Clear()
{
    // @@protoc_insertion_point(message_clear_start:variations.Study.Experiment.Param)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_value()) {
            value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Study_Experiment_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForStudy_Experiment_Param, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:variations.Study.Experiment.Param)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_value;
            break;
        }

        // optional string value = 2;
        case 2: {
            if (tag == 18) {
            parse_value:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_value()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:variations.Study.Experiment.Param)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:variations.Study.Experiment.Param)
    return false;
#undef DO_
}

void Study_Experiment_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:variations.Study.Experiment.Param)
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->name(), output);
    }

    // optional string value = 2;
    if (has_value()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->value(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:variations.Study.Experiment.Param)
}

int Study_Experiment_Param::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:variations.Study.Experiment.Param)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
        }

        // optional string value = 2;
        if (has_value()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->value());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Study_Experiment_Param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const Study_Experiment_Param*>(&from));
}

void Study_Experiment_Param::MergeFrom(const Study_Experiment_Param& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:variations.Study.Experiment.Param)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_value()) {
            set_has_value();
            value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void Study_Experiment_Param::CopyFrom(const Study_Experiment_Param& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:variations.Study.Experiment.Param)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Study_Experiment_Param::IsInitialized() const
{

    return true;
}

void Study_Experiment_Param::Swap(Study_Experiment_Param* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Study_Experiment_Param::InternalSwap(Study_Experiment_Param* other)
{
    name_.Swap(&other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string Study_Experiment_Param::GetTypeName() const
{
    return "variations.Study.Experiment.Param";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForStudy_Experiment_FeatureAssociation(
    Study_Experiment_FeatureAssociation* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment_FeatureAssociation::kEnableFeatureFieldNumber;
const int Study_Experiment_FeatureAssociation::kDisableFeatureFieldNumber;
const int Study_Experiment_FeatureAssociation::kForcingFeatureOnFieldNumber;
const int Study_Experiment_FeatureAssociation::kForcingFeatureOffFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Study_Experiment_FeatureAssociation::Study_Experiment_FeatureAssociation()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:variations.Study.Experiment.FeatureAssociation)
}

void Study_Experiment_FeatureAssociation::InitAsDefaultInstance()
{
}

Study_Experiment_FeatureAssociation::Study_Experiment_FeatureAssociation(const Study_Experiment_FeatureAssociation& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:variations.Study.Experiment.FeatureAssociation)
}

void Study_Experiment_FeatureAssociation::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    forcing_feature_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    forcing_feature_off_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment_FeatureAssociation::~Study_Experiment_FeatureAssociation()
{
    // @@protoc_insertion_point(destructor:variations.Study.Experiment.FeatureAssociation)
    SharedDtor();
}

void Study_Experiment_FeatureAssociation::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    forcing_feature_on_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    forcing_feature_off_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void Study_Experiment_FeatureAssociation::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment_FeatureAssociation& Study_Experiment_FeatureAssociation::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_study_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_study_2eproto();
#endif
    return *default_instance_;
}

Study_Experiment_FeatureAssociation* Study_Experiment_FeatureAssociation::default_instance_ = NULL;

Study_Experiment_FeatureAssociation* Study_Experiment_FeatureAssociation::New(::google::protobuf::Arena* arena) const
{
    Study_Experiment_FeatureAssociation* n = new Study_Experiment_FeatureAssociation;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Study_Experiment_FeatureAssociation::Clear()
{
    // @@protoc_insertion_point(message_clear_start:variations.Study.Experiment.FeatureAssociation)
    if (_has_bits_[0 / 32] & 12u) {
        if (has_forcing_feature_on()) {
            forcing_feature_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_forcing_feature_off()) {
            forcing_feature_off_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    enable_feature_.Clear();
    disable_feature_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Study_Experiment_FeatureAssociation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForStudy_Experiment_FeatureAssociation, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:variations.Study.Experiment.FeatureAssociation)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated string enable_feature = 1;
        case 1: {
            if (tag == 10) {
            parse_enable_feature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_enable_feature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_enable_feature;
            if (input->ExpectTag(18))
                goto parse_disable_feature;
            break;
        }

        // repeated string disable_feature = 2;
        case 2: {
            if (tag == 18) {
            parse_disable_feature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_disable_feature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_disable_feature;
            if (input->ExpectTag(26))
                goto parse_forcing_feature_on;
            break;
        }

        // optional string forcing_feature_on = 3;
        case 3: {
            if (tag == 26) {
            parse_forcing_feature_on:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_forcing_feature_on()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_forcing_feature_off;
            break;
        }

        // optional string forcing_feature_off = 4;
        case 4: {
            if (tag == 34) {
            parse_forcing_feature_off:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_forcing_feature_off()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:variations.Study.Experiment.FeatureAssociation)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:variations.Study.Experiment.FeatureAssociation)
    return false;
#undef DO_
}

void Study_Experiment_FeatureAssociation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:variations.Study.Experiment.FeatureAssociation)
    // repeated string enable_feature = 1;
    for (int i = 0; i < this->enable_feature_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->enable_feature(i), output);
    }

    // repeated string disable_feature = 2;
    for (int i = 0; i < this->disable_feature_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            2, this->disable_feature(i), output);
    }

    // optional string forcing_feature_on = 3;
    if (has_forcing_feature_on()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->forcing_feature_on(), output);
    }

    // optional string forcing_feature_off = 4;
    if (has_forcing_feature_off()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->forcing_feature_off(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:variations.Study.Experiment.FeatureAssociation)
}

int Study_Experiment_FeatureAssociation::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:variations.Study.Experiment.FeatureAssociation)
    int total_size = 0;

    if (_has_bits_[2 / 32] & 12u) {
        // optional string forcing_feature_on = 3;
        if (has_forcing_feature_on()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->forcing_feature_on());
        }

        // optional string forcing_feature_off = 4;
        if (has_forcing_feature_off()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->forcing_feature_off());
        }
    }
    // repeated string enable_feature = 1;
    total_size += 1 * this->enable_feature_size();
    for (int i = 0; i < this->enable_feature_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->enable_feature(i));
    }

    // repeated string disable_feature = 2;
    total_size += 1 * this->disable_feature_size();
    for (int i = 0; i < this->disable_feature_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->disable_feature(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Study_Experiment_FeatureAssociation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const Study_Experiment_FeatureAssociation*>(&from));
}

void Study_Experiment_FeatureAssociation::MergeFrom(const Study_Experiment_FeatureAssociation& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:variations.Study.Experiment.FeatureAssociation)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    enable_feature_.MergeFrom(from.enable_feature_);
    disable_feature_.MergeFrom(from.disable_feature_);
    if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
        if (from.has_forcing_feature_on()) {
            set_has_forcing_feature_on();
            forcing_feature_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forcing_feature_on_);
        }
        if (from.has_forcing_feature_off()) {
            set_has_forcing_feature_off();
            forcing_feature_off_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forcing_feature_off_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void Study_Experiment_FeatureAssociation::CopyFrom(const Study_Experiment_FeatureAssociation& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:variations.Study.Experiment.FeatureAssociation)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Study_Experiment_FeatureAssociation::IsInitialized() const
{

    return true;
}

void Study_Experiment_FeatureAssociation::Swap(Study_Experiment_FeatureAssociation* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Study_Experiment_FeatureAssociation::InternalSwap(Study_Experiment_FeatureAssociation* other)
{
    enable_feature_.UnsafeArenaSwap(&other->enable_feature_);
    disable_feature_.UnsafeArenaSwap(&other->disable_feature_);
    forcing_feature_on_.Swap(&other->forcing_feature_on_);
    forcing_feature_off_.Swap(&other->forcing_feature_off_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string Study_Experiment_FeatureAssociation::GetTypeName() const
{
    return "variations.Study.Experiment.FeatureAssociation";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForStudy_Experiment_OverrideUIString(
    Study_Experiment_OverrideUIString* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment_OverrideUIString::kNameHashFieldNumber;
const int Study_Experiment_OverrideUIString::kValueFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Study_Experiment_OverrideUIString::Study_Experiment_OverrideUIString()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:variations.Study.Experiment.OverrideUIString)
}

void Study_Experiment_OverrideUIString::InitAsDefaultInstance()
{
}

Study_Experiment_OverrideUIString::Study_Experiment_OverrideUIString(const Study_Experiment_OverrideUIString& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:variations.Study.Experiment.OverrideUIString)
}

void Study_Experiment_OverrideUIString::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_hash_ = 0u;
    value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment_OverrideUIString::~Study_Experiment_OverrideUIString()
{
    // @@protoc_insertion_point(destructor:variations.Study.Experiment.OverrideUIString)
    SharedDtor();
}

void Study_Experiment_OverrideUIString::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void Study_Experiment_OverrideUIString::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment_OverrideUIString& Study_Experiment_OverrideUIString::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_study_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_study_2eproto();
#endif
    return *default_instance_;
}

Study_Experiment_OverrideUIString* Study_Experiment_OverrideUIString::default_instance_ = NULL;

Study_Experiment_OverrideUIString* Study_Experiment_OverrideUIString::New(::google::protobuf::Arena* arena) const
{
    Study_Experiment_OverrideUIString* n = new Study_Experiment_OverrideUIString;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Study_Experiment_OverrideUIString::Clear()
{
    // @@protoc_insertion_point(message_clear_start:variations.Study.Experiment.OverrideUIString)
    if (_has_bits_[0 / 32] & 3u) {
        name_hash_ = 0u;
        if (has_value()) {
            value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Study_Experiment_OverrideUIString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForStudy_Experiment_OverrideUIString, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:variations.Study.Experiment.OverrideUIString)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional fixed32 name_hash = 1;
        case 1: {
            if (tag == 13) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &name_hash_)));
                set_has_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_value;
            break;
        }

        // optional string value = 2;
        case 2: {
            if (tag == 18) {
            parse_value:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_value()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:variations.Study.Experiment.OverrideUIString)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:variations.Study.Experiment.OverrideUIString)
    return false;
#undef DO_
}

void Study_Experiment_OverrideUIString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:variations.Study.Experiment.OverrideUIString)
    // optional fixed32 name_hash = 1;
    if (has_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_hash(), output);
    }

    // optional string value = 2;
    if (has_value()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->value(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:variations.Study.Experiment.OverrideUIString)
}

int Study_Experiment_OverrideUIString::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:variations.Study.Experiment.OverrideUIString)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional fixed32 name_hash = 1;
        if (has_name_hash()) {
            total_size += 1 + 4;
        }

        // optional string value = 2;
        if (has_value()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->value());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Study_Experiment_OverrideUIString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const Study_Experiment_OverrideUIString*>(&from));
}

void Study_Experiment_OverrideUIString::MergeFrom(const Study_Experiment_OverrideUIString& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:variations.Study.Experiment.OverrideUIString)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name_hash()) {
            set_name_hash(from.name_hash());
        }
        if (from.has_value()) {
            set_has_value();
            value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void Study_Experiment_OverrideUIString::CopyFrom(const Study_Experiment_OverrideUIString& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:variations.Study.Experiment.OverrideUIString)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Study_Experiment_OverrideUIString::IsInitialized() const
{

    return true;
}

void Study_Experiment_OverrideUIString::Swap(Study_Experiment_OverrideUIString* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Study_Experiment_OverrideUIString::InternalSwap(Study_Experiment_OverrideUIString* other)
{
    std::swap(name_hash_, other->name_hash_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string Study_Experiment_OverrideUIString::GetTypeName() const
{
    return "variations.Study.Experiment.OverrideUIString";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Experiment::kNameFieldNumber;
const int Study_Experiment::kProbabilityWeightFieldNumber;
const int Study_Experiment::kGoogleWebExperimentIdFieldNumber;
const int Study_Experiment::kGoogleWebTriggerExperimentIdFieldNumber;
const int Study_Experiment::kChromeSyncExperimentIdFieldNumber;
const int Study_Experiment::kFeatureAssociationFieldNumber;
const int Study_Experiment::kForcingFlagFieldNumber;
const int Study_Experiment::kParamFieldNumber;
const int Study_Experiment::kTypeFieldNumber;
const int Study_Experiment::kOverrideUiStringFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Study_Experiment::Study_Experiment()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:variations.Study.Experiment)
}

void Study_Experiment::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    feature_association_ = const_cast<::variations::Study_Experiment_FeatureAssociation*>(
        ::variations::Study_Experiment_FeatureAssociation::internal_default_instance());
#else
    feature_association_ = const_cast<::variations::Study_Experiment_FeatureAssociation*>(&::variations::Study_Experiment_FeatureAssociation::default_instance());
#endif
}

Study_Experiment::Study_Experiment(const Study_Experiment& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:variations.Study.Experiment)
}

void Study_Experiment::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    probability_weight_ = 0u;
    google_web_experiment_id_ = GOOGLE_ULONGLONG(0);
    google_web_trigger_experiment_id_ = GOOGLE_ULONGLONG(0);
    chrome_sync_experiment_id_ = GOOGLE_ULONGLONG(0);
    feature_association_ = NULL;
    forcing_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Experiment::~Study_Experiment()
{
    // @@protoc_insertion_point(destructor:variations.Study.Experiment)
    SharedDtor();
}

void Study_Experiment::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    forcing_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete feature_association_;
    }
}

void Study_Experiment::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Experiment& Study_Experiment::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_study_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_study_2eproto();
#endif
    return *default_instance_;
}

Study_Experiment* Study_Experiment::default_instance_ = NULL;

Study_Experiment* Study_Experiment::New(::google::protobuf::Arena* arena) const
{
    Study_Experiment* n = new Study_Experiment;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Study_Experiment::Clear()
{
// @@protoc_insertion_point(message_clear_start:variations.Study.Experiment)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                      \
    _Pragma("clang diagnostic push")                                                                       \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Study_Experiment, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Study_Experiment*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 127u) {
        ZR_(google_web_experiment_id_, probability_weight_);
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_feature_association()) {
            if (feature_association_ != NULL)
                feature_association_->::variations::Study_Experiment_FeatureAssociation::Clear();
        }
        if (has_forcing_flag()) {
            forcing_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    type_ = 0;

#undef ZR_HELPER_
#undef ZR_

    param_.Clear();
    override_ui_string_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Study_Experiment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForStudy_Experiment, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:variations.Study.Experiment)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required string name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_probability_weight;
            break;
        }

        // required uint32 probability_weight = 2;
        case 2: {
            if (tag == 16) {
            parse_probability_weight:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &probability_weight_)));
                set_has_probability_weight();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_google_web_experiment_id;
            break;
        }

        // optional uint64 google_web_experiment_id = 3;
        case 3: {
            if (tag == 24) {
            parse_google_web_experiment_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &google_web_experiment_id_)));
                set_has_google_web_experiment_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_forcing_flag;
            break;
        }

        // optional string forcing_flag = 5;
        case 5: {
            if (tag == 42) {
            parse_forcing_flag:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_forcing_flag()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_param;
            break;
        }

        // repeated .variations.Study.Experiment.Param param = 6;
        case 6: {
            if (tag == 50) {
            parse_param:
                DO_(input->IncrementRecursionDepth());
            parse_loop_param:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_param()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_loop_param;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(56))
                goto parse_type;
            break;
        }

        // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
        case 7: {
            if (tag == 56) {
            parse_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::variations::Study_Experiment_Type_IsValid(value)) {
                    set_type(static_cast<::variations::Study_Experiment_Type>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(56);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_google_web_trigger_experiment_id;
            break;
        }

        // optional uint64 google_web_trigger_experiment_id = 8;
        case 8: {
            if (tag == 64) {
            parse_google_web_trigger_experiment_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &google_web_trigger_experiment_id_)));
                set_has_google_web_trigger_experiment_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_override_ui_string;
            break;
        }

        // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
        case 9: {
            if (tag == 74) {
            parse_override_ui_string:
                DO_(input->IncrementRecursionDepth());
            parse_loop_override_ui_string:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_override_ui_string()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_loop_override_ui_string;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(80))
                goto parse_chrome_sync_experiment_id;
            break;
        }

        // optional uint64 chrome_sync_experiment_id = 10;
        case 10: {
            if (tag == 80) {
            parse_chrome_sync_experiment_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &chrome_sync_experiment_id_)));
                set_has_chrome_sync_experiment_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_feature_association;
            break;
        }

        // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
        case 12: {
            if (tag == 98) {
            parse_feature_association:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_feature_association()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:variations.Study.Experiment)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:variations.Study.Experiment)
    return false;
#undef DO_
}

void Study_Experiment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:variations.Study.Experiment)
    // required string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->name(), output);
    }

    // required uint32 probability_weight = 2;
    if (has_probability_weight()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->probability_weight(), output);
    }

    // optional uint64 google_web_experiment_id = 3;
    if (has_google_web_experiment_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->google_web_experiment_id(), output);
    }

    // optional string forcing_flag = 5;
    if (has_forcing_flag()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->forcing_flag(), output);
    }

    // repeated .variations.Study.Experiment.Param param = 6;
    for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, this->param(i), output);
    }

    // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            7, this->type(), output);
    }

    // optional uint64 google_web_trigger_experiment_id = 8;
    if (has_google_web_trigger_experiment_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->google_web_trigger_experiment_id(), output);
    }

    // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
    for (unsigned int i = 0, n = this->override_ui_string_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, this->override_ui_string(i), output);
    }

    // optional uint64 chrome_sync_experiment_id = 10;
    if (has_chrome_sync_experiment_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->chrome_sync_experiment_id(), output);
    }

    // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
    if (has_feature_association()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *this->feature_association_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:variations.Study.Experiment)
}

int Study_Experiment::RequiredFieldsByteSizeFallback() const
{
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:variations.Study.Experiment)
    int total_size = 0;

    if (has_name()) {
        // required string name = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
    }

    if (has_probability_weight()) {
        // required uint32 probability_weight = 2;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->probability_weight());
    }

    return total_size;
}
int Study_Experiment::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:variations.Study.Experiment)
    int total_size = 0;

    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) { // All required fields are present.
        // required string name = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());

        // required uint32 probability_weight = 2;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->probability_weight());

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    if (_has_bits_[2 / 32] & 124u) {
        // optional uint64 google_web_experiment_id = 3;
        if (has_google_web_experiment_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->google_web_experiment_id());
        }

        // optional uint64 google_web_trigger_experiment_id = 8;
        if (has_google_web_trigger_experiment_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->google_web_trigger_experiment_id());
        }

        // optional uint64 chrome_sync_experiment_id = 10;
        if (has_chrome_sync_experiment_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->chrome_sync_experiment_id());
        }

        // optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
        if (has_feature_association()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->feature_association_);
        }

        // optional string forcing_flag = 5;
        if (has_forcing_flag()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->forcing_flag());
        }
    }
    // optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
    if (has_type()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // repeated .variations.Study.Experiment.Param param = 6;
    total_size += 1 * this->param_size();
    for (int i = 0; i < this->param_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->param(i));
    }

    // repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
    total_size += 1 * this->override_ui_string_size();
    for (int i = 0; i < this->override_ui_string_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->override_ui_string(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Study_Experiment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const Study_Experiment*>(&from));
}

void Study_Experiment::MergeFrom(const Study_Experiment& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:variations.Study.Experiment)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    param_.MergeFrom(from.param_);
    override_ui_string_.MergeFrom(from.override_ui_string_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_probability_weight()) {
            set_probability_weight(from.probability_weight());
        }
        if (from.has_google_web_experiment_id()) {
            set_google_web_experiment_id(from.google_web_experiment_id());
        }
        if (from.has_google_web_trigger_experiment_id()) {
            set_google_web_trigger_experiment_id(from.google_web_trigger_experiment_id());
        }
        if (from.has_chrome_sync_experiment_id()) {
            set_chrome_sync_experiment_id(from.chrome_sync_experiment_id());
        }
        if (from.has_feature_association()) {
            mutable_feature_association()->::variations::Study_Experiment_FeatureAssociation::MergeFrom(from.feature_association());
        }
        if (from.has_forcing_flag()) {
            set_has_forcing_flag();
            forcing_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forcing_flag_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_type()) {
            set_type(from.type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void Study_Experiment::CopyFrom(const Study_Experiment& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:variations.Study.Experiment)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Study_Experiment::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
        return false;

    return true;
}

void Study_Experiment::Swap(Study_Experiment* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Study_Experiment::InternalSwap(Study_Experiment* other)
{
    name_.Swap(&other->name_);
    std::swap(probability_weight_, other->probability_weight_);
    std::swap(google_web_experiment_id_, other->google_web_experiment_id_);
    std::swap(google_web_trigger_experiment_id_, other->google_web_trigger_experiment_id_);
    std::swap(chrome_sync_experiment_id_, other->chrome_sync_experiment_id_);
    std::swap(feature_association_, other->feature_association_);
    forcing_flag_.Swap(&other->forcing_flag_);
    param_.UnsafeArenaSwap(&other->param_);
    std::swap(type_, other->type_);
    override_ui_string_.UnsafeArenaSwap(&other->override_ui_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string Study_Experiment::GetTypeName() const
{
    return "variations.Study.Experiment";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForStudy_Filter(
    Study_Filter* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study_Filter::kStartDateFieldNumber;
const int Study_Filter::kEndDateFieldNumber;
const int Study_Filter::kMinVersionFieldNumber;
const int Study_Filter::kMaxVersionFieldNumber;
const int Study_Filter::kChannelFieldNumber;
const int Study_Filter::kPlatformFieldNumber;
const int Study_Filter::kLocaleFieldNumber;
const int Study_Filter::kExcludeLocaleFieldNumber;
const int Study_Filter::kFormFactorFieldNumber;
const int Study_Filter::kHardwareClassFieldNumber;
const int Study_Filter::kExcludeHardwareClassFieldNumber;
const int Study_Filter::kCountryFieldNumber;
const int Study_Filter::kExcludeCountryFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Study_Filter::Study_Filter()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:variations.Study.Filter)
}

void Study_Filter::InitAsDefaultInstance()
{
}

Study_Filter::Study_Filter(const Study_Filter& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:variations.Study.Filter)
}

void Study_Filter::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    start_date_ = GOOGLE_LONGLONG(0);
    end_date_ = GOOGLE_LONGLONG(0);
    min_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    max_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study_Filter::~Study_Filter()
{
    // @@protoc_insertion_point(destructor:variations.Study.Filter)
    SharedDtor();
}

void Study_Filter::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    min_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    max_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void Study_Filter::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study_Filter& Study_Filter::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_study_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_study_2eproto();
#endif
    return *default_instance_;
}

Study_Filter* Study_Filter::default_instance_ = NULL;

Study_Filter* Study_Filter::New(::google::protobuf::Arena* arena) const
{
    Study_Filter* n = new Study_Filter;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Study_Filter::Clear()
{
// @@protoc_insertion_point(message_clear_start:variations.Study.Filter)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                  \
    _Pragma("clang diagnostic push")                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Study_Filter, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Study_Filter*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 15u) {
        ZR_(start_date_, end_date_);
        if (has_min_version()) {
            min_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_max_version()) {
            max_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    channel_.Clear();
    platform_.Clear();
    locale_.Clear();
    exclude_locale_.Clear();
    form_factor_.Clear();
    hardware_class_.Clear();
    exclude_hardware_class_.Clear();
    country_.Clear();
    exclude_country_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Study_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForStudy_Filter, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:variations.Study.Filter)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 start_date = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &start_date_)));
                set_has_start_date();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_min_version;
            break;
        }

        // optional string min_version = 2;
        case 2: {
            if (tag == 18) {
            parse_min_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_min_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_max_version;
            break;
        }

        // optional string max_version = 3;
        case 3: {
            if (tag == 26) {
            parse_max_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_max_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_channel;
            break;
        }

        // repeated .variations.Study.Channel channel = 4;
        case 4: {
            if (tag == 32) {
            parse_channel:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::variations::Study_Channel_IsValid(value)) {
                    add_channel(static_cast<::variations::Study_Channel>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(tag);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else if (tag == 34) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                    input,
                    4,
                    ::variations::Study_Channel_IsValid,
                    &unknown_fields_stream,
                    this->mutable_channel())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_channel;
            if (input->ExpectTag(40))
                goto parse_platform;
            break;
        }

        // repeated .variations.Study.Platform platform = 5;
        case 5: {
            if (tag == 40) {
            parse_platform:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::variations::Study_Platform_IsValid(value)) {
                    add_platform(static_cast<::variations::Study_Platform>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(tag);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else if (tag == 42) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                    input,
                    5,
                    ::variations::Study_Platform_IsValid,
                    &unknown_fields_stream,
                    this->mutable_platform())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_platform;
            if (input->ExpectTag(50))
                goto parse_locale;
            break;
        }

        // repeated string locale = 6;
        case 6: {
            if (tag == 50) {
            parse_locale:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_locale()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_locale;
            if (input->ExpectTag(56))
                goto parse_form_factor;
            break;
        }

        // repeated .variations.Study.FormFactor form_factor = 7;
        case 7: {
            if (tag == 56) {
            parse_form_factor:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::variations::Study_FormFactor_IsValid(value)) {
                    add_form_factor(static_cast<::variations::Study_FormFactor>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(tag);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else if (tag == 58) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                    input,
                    7,
                    ::variations::Study_FormFactor_IsValid,
                    &unknown_fields_stream,
                    this->mutable_form_factor())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_form_factor;
            if (input->ExpectTag(66))
                goto parse_hardware_class;
            break;
        }

        // repeated string hardware_class = 8;
        case 8: {
            if (tag == 66) {
            parse_hardware_class:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_hardware_class()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_hardware_class;
            if (input->ExpectTag(74))
                goto parse_exclude_hardware_class;
            break;
        }

        // repeated string exclude_hardware_class = 9;
        case 9: {
            if (tag == 74) {
            parse_exclude_hardware_class:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_exclude_hardware_class()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_exclude_hardware_class;
            if (input->ExpectTag(82))
                goto parse_country;
            break;
        }

        // repeated string country = 10;
        case 10: {
            if (tag == 82) {
            parse_country:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_country()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_country;
            if (input->ExpectTag(90))
                goto parse_exclude_country;
            break;
        }

        // repeated string exclude_country = 11;
        case 11: {
            if (tag == 90) {
            parse_exclude_country:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_exclude_country()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_exclude_country;
            if (input->ExpectTag(98))
                goto parse_exclude_locale;
            break;
        }

        // repeated string exclude_locale = 12;
        case 12: {
            if (tag == 98) {
            parse_exclude_locale:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_exclude_locale()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_exclude_locale;
            if (input->ExpectTag(104))
                goto parse_end_date;
            break;
        }

        // optional int64 end_date = 13;
        case 13: {
            if (tag == 104) {
            parse_end_date:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &end_date_)));
                set_has_end_date();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:variations.Study.Filter)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:variations.Study.Filter)
    return false;
#undef DO_
}

void Study_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:variations.Study.Filter)
    // optional int64 start_date = 1;
    if (has_start_date()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_date(), output);
    }

    // optional string min_version = 2;
    if (has_min_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->min_version(), output);
    }

    // optional string max_version = 3;
    if (has_max_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->max_version(), output);
    }

    // repeated .variations.Study.Channel channel = 4;
    for (int i = 0; i < this->channel_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            4, this->channel(i), output);
    }

    // repeated .variations.Study.Platform platform = 5;
    for (int i = 0; i < this->platform_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            5, this->platform(i), output);
    }

    // repeated string locale = 6;
    for (int i = 0; i < this->locale_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            6, this->locale(i), output);
    }

    // repeated .variations.Study.FormFactor form_factor = 7;
    for (int i = 0; i < this->form_factor_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            7, this->form_factor(i), output);
    }

    // repeated string hardware_class = 8;
    for (int i = 0; i < this->hardware_class_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            8, this->hardware_class(i), output);
    }

    // repeated string exclude_hardware_class = 9;
    for (int i = 0; i < this->exclude_hardware_class_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            9, this->exclude_hardware_class(i), output);
    }

    // repeated string country = 10;
    for (int i = 0; i < this->country_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            10, this->country(i), output);
    }

    // repeated string exclude_country = 11;
    for (int i = 0; i < this->exclude_country_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            11, this->exclude_country(i), output);
    }

    // repeated string exclude_locale = 12;
    for (int i = 0; i < this->exclude_locale_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            12, this->exclude_locale(i), output);
    }

    // optional int64 end_date = 13;
    if (has_end_date()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->end_date(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:variations.Study.Filter)
}

int Study_Filter::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:variations.Study.Filter)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional int64 start_date = 1;
        if (has_start_date()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->start_date());
        }

        // optional int64 end_date = 13;
        if (has_end_date()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->end_date());
        }

        // optional string min_version = 2;
        if (has_min_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->min_version());
        }

        // optional string max_version = 3;
        if (has_max_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->max_version());
        }
    }
    // repeated .variations.Study.Channel channel = 4;
    {
        int data_size = 0;
        for (int i = 0; i < this->channel_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
                this->channel(i));
        }
        total_size += 1 * this->channel_size() + data_size;
    }

    // repeated .variations.Study.Platform platform = 5;
    {
        int data_size = 0;
        for (int i = 0; i < this->platform_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
                this->platform(i));
        }
        total_size += 1 * this->platform_size() + data_size;
    }

    // repeated string locale = 6;
    total_size += 1 * this->locale_size();
    for (int i = 0; i < this->locale_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->locale(i));
    }

    // repeated string exclude_locale = 12;
    total_size += 1 * this->exclude_locale_size();
    for (int i = 0; i < this->exclude_locale_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->exclude_locale(i));
    }

    // repeated .variations.Study.FormFactor form_factor = 7;
    {
        int data_size = 0;
        for (int i = 0; i < this->form_factor_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
                this->form_factor(i));
        }
        total_size += 1 * this->form_factor_size() + data_size;
    }

    // repeated string hardware_class = 8;
    total_size += 1 * this->hardware_class_size();
    for (int i = 0; i < this->hardware_class_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->hardware_class(i));
    }

    // repeated string exclude_hardware_class = 9;
    total_size += 1 * this->exclude_hardware_class_size();
    for (int i = 0; i < this->exclude_hardware_class_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->exclude_hardware_class(i));
    }

    // repeated string country = 10;
    total_size += 1 * this->country_size();
    for (int i = 0; i < this->country_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->country(i));
    }

    // repeated string exclude_country = 11;
    total_size += 1 * this->exclude_country_size();
    for (int i = 0; i < this->exclude_country_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->exclude_country(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Study_Filter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const Study_Filter*>(&from));
}

void Study_Filter::MergeFrom(const Study_Filter& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:variations.Study.Filter)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    channel_.MergeFrom(from.channel_);
    platform_.MergeFrom(from.platform_);
    locale_.MergeFrom(from.locale_);
    exclude_locale_.MergeFrom(from.exclude_locale_);
    form_factor_.MergeFrom(from.form_factor_);
    hardware_class_.MergeFrom(from.hardware_class_);
    exclude_hardware_class_.MergeFrom(from.exclude_hardware_class_);
    country_.MergeFrom(from.country_);
    exclude_country_.MergeFrom(from.exclude_country_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_start_date()) {
            set_start_date(from.start_date());
        }
        if (from.has_end_date()) {
            set_end_date(from.end_date());
        }
        if (from.has_min_version()) {
            set_has_min_version();
            min_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.min_version_);
        }
        if (from.has_max_version()) {
            set_has_max_version();
            max_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_version_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void Study_Filter::CopyFrom(const Study_Filter& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:variations.Study.Filter)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Study_Filter::IsInitialized() const
{

    return true;
}

void Study_Filter::Swap(Study_Filter* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Study_Filter::InternalSwap(Study_Filter* other)
{
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    min_version_.Swap(&other->min_version_);
    max_version_.Swap(&other->max_version_);
    channel_.UnsafeArenaSwap(&other->channel_);
    platform_.UnsafeArenaSwap(&other->platform_);
    locale_.UnsafeArenaSwap(&other->locale_);
    exclude_locale_.UnsafeArenaSwap(&other->exclude_locale_);
    form_factor_.UnsafeArenaSwap(&other->form_factor_);
    hardware_class_.UnsafeArenaSwap(&other->hardware_class_);
    exclude_hardware_class_.UnsafeArenaSwap(&other->exclude_hardware_class_);
    country_.UnsafeArenaSwap(&other->country_);
    exclude_country_.UnsafeArenaSwap(&other->exclude_country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string Study_Filter::GetTypeName() const
{
    return "variations.Study.Filter";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Study::kNameFieldNumber;
const int Study::kExpiryDateFieldNumber;
const int Study::kConsistencyFieldNumber;
const int Study::kDefaultExperimentNameFieldNumber;
const int Study::kExperimentFieldNumber;
const int Study::kFilterFieldNumber;
const int Study::kRandomizationSeedFieldNumber;
const int Study::kActivationTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Study::Study()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:variations.Study)
}

void Study::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    filter_ = const_cast<::variations::Study_Filter*>(
        ::variations::Study_Filter::internal_default_instance());
#else
    filter_ = const_cast<::variations::Study_Filter*>(&::variations::Study_Filter::default_instance());
#endif
}

Study::Study(const Study& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:variations.Study)
}

void Study::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    expiry_date_ = GOOGLE_LONGLONG(0);
    consistency_ = 0;
    default_experiment_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    filter_ = NULL;
    randomization_seed_ = 0u;
    activation_type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Study::~Study()
{
    // @@protoc_insertion_point(destructor:variations.Study)
    SharedDtor();
}

void Study::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    default_experiment_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete filter_;
    }
}

void Study::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Study& Study::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_study_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_study_2eproto();
#endif
    return *default_instance_;
}

Study* Study::default_instance_ = NULL;

Study* Study::New(::google::protobuf::Arena* arena) const
{
    Study* n = new Study;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void Study::Clear()
{
// @@protoc_insertion_point(message_clear_start:variations.Study)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                           \
    _Pragma("clang diagnostic push")                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Study, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Study*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 239u) {
        ZR_(consistency_, randomization_seed_);
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        expiry_date_ = GOOGLE_LONGLONG(0);
        if (has_default_experiment_name()) {
            default_experiment_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_filter()) {
            if (filter_ != NULL)
                filter_->::variations::Study_Filter::Clear();
        }
        activation_type_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    experiment_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForStudy, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:variations.Study)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required string name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_expiry_date;
            break;
        }

        // optional int64 expiry_date = 3;
        case 3: {
            if (tag == 24) {
            parse_expiry_date:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &expiry_date_)));
                set_has_expiry_date();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_consistency;
            break;
        }

        // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
        case 7: {
            if (tag == 56) {
            parse_consistency:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::variations::Study_Consistency_IsValid(value)) {
                    set_consistency(static_cast<::variations::Study_Consistency>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(56);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_default_experiment_name;
            break;
        }

        // optional string default_experiment_name = 8;
        case 8: {
            if (tag == 66) {
            parse_default_experiment_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_default_experiment_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_experiment;
            break;
        }

        // repeated .variations.Study.Experiment experiment = 9;
        case 9: {
            if (tag == 74) {
            parse_experiment:
                DO_(input->IncrementRecursionDepth());
            parse_loop_experiment:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_experiment()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_loop_experiment;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(82))
                goto parse_filter;
            break;
        }

        // optional .variations.Study.Filter filter = 10;
        case 10: {
            if (tag == 82) {
            parse_filter:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_filter()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_randomization_seed;
            break;
        }

        // optional uint32 randomization_seed = 11;
        case 11: {
            if (tag == 88) {
            parse_randomization_seed:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &randomization_seed_)));
                set_has_randomization_seed();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_activation_type;
            break;
        }

        // optional .variations.Study.ActivationType activation_type = 12;
        case 12: {
            if (tag == 96) {
            parse_activation_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::variations::Study_ActivationType_IsValid(value)) {
                    set_activation_type(static_cast<::variations::Study_ActivationType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(96);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:variations.Study)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:variations.Study)
    return false;
#undef DO_
}

void Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:variations.Study)
    // required string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->name(), output);
    }

    // optional int64 expiry_date = 3;
    if (has_expiry_date()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expiry_date(), output);
    }

    // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
    if (has_consistency()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            7, this->consistency(), output);
    }

    // optional string default_experiment_name = 8;
    if (has_default_experiment_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->default_experiment_name(), output);
    }

    // repeated .variations.Study.Experiment experiment = 9;
    for (unsigned int i = 0, n = this->experiment_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, this->experiment(i), output);
    }

    // optional .variations.Study.Filter filter = 10;
    if (has_filter()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            10, *this->filter_, output);
    }

    // optional uint32 randomization_seed = 11;
    if (has_randomization_seed()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->randomization_seed(), output);
    }

    // optional .variations.Study.ActivationType activation_type = 12;
    if (has_activation_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            12, this->activation_type(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:variations.Study)
}

int Study::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:variations.Study)
    int total_size = 0;

    // required string name = 1;
    if (has_name()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
    }
    if (_has_bits_[1 / 32] & 238u) {
        // optional int64 expiry_date = 3;
        if (has_expiry_date()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->expiry_date());
        }

        // optional .variations.Study.Consistency consistency = 7 [default = SESSION];
        if (has_consistency()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->consistency());
        }

        // optional string default_experiment_name = 8;
        if (has_default_experiment_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->default_experiment_name());
        }

        // optional .variations.Study.Filter filter = 10;
        if (has_filter()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->filter_);
        }

        // optional uint32 randomization_seed = 11;
        if (has_randomization_seed()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->randomization_seed());
        }

        // optional .variations.Study.ActivationType activation_type = 12;
        if (has_activation_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->activation_type());
        }
    }
    // repeated .variations.Study.Experiment experiment = 9;
    total_size += 1 * this->experiment_size();
    for (int i = 0; i < this->experiment_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->experiment(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Study::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const Study*>(&from));
}

void Study::MergeFrom(const Study& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:variations.Study)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    experiment_.MergeFrom(from.experiment_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_expiry_date()) {
            set_expiry_date(from.expiry_date());
        }
        if (from.has_consistency()) {
            set_consistency(from.consistency());
        }
        if (from.has_default_experiment_name()) {
            set_has_default_experiment_name();
            default_experiment_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_experiment_name_);
        }
        if (from.has_filter()) {
            mutable_filter()->::variations::Study_Filter::MergeFrom(from.filter());
        }
        if (from.has_randomization_seed()) {
            set_randomization_seed(from.randomization_seed());
        }
        if (from.has_activation_type()) {
            set_activation_type(from.activation_type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void Study::CopyFrom(const Study& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:variations.Study)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Study::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    if (!::google::protobuf::internal::AllAreInitialized(this->experiment()))
        return false;
    return true;
}

void Study::Swap(Study* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Study::InternalSwap(Study* other)
{
    name_.Swap(&other->name_);
    std::swap(expiry_date_, other->expiry_date_);
    std::swap(consistency_, other->consistency_);
    default_experiment_name_.Swap(&other->default_experiment_name_);
    experiment_.UnsafeArenaSwap(&other->experiment_);
    std::swap(filter_, other->filter_);
    std::swap(randomization_seed_, other->randomization_seed_);
    std::swap(activation_type_, other->activation_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string Study::GetTypeName() const
{
    return "variations.Study";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Study_Experiment_Param

// optional string name = 1;
bool Study_Experiment_Param::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void Study_Experiment_Param::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void Study_Experiment_Param::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void Study_Experiment_Param::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& Study_Experiment_Param::name() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.Param.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_Param::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.Param.name)
}
void Study_Experiment_Param::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.Param.name)
}
void Study_Experiment_Param::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.Param.name)
}
::std::string* Study_Experiment_Param::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.Param.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment_Param::release_name()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.Param.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_Param::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.Param.name)
}

// optional string value = 2;
bool Study_Experiment_Param::has_value() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void Study_Experiment_Param::set_has_value()
{
    _has_bits_[0] |= 0x00000002u;
}
void Study_Experiment_Param::clear_has_value()
{
    _has_bits_[0] &= ~0x00000002u;
}
void Study_Experiment_Param::clear_value()
{
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
}
const ::std::string& Study_Experiment_Param::value() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.Param.value)
    return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_Param::set_value(const ::std::string& value)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.Param.value)
}
void Study_Experiment_Param::set_value(const char* value)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.Param.value)
}
void Study_Experiment_Param::set_value(const char* value, size_t size)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.Param.value)
}
::std::string* Study_Experiment_Param::mutable_value()
{
    set_has_value();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.Param.value)
    return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment_Param::release_value()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.Param.value)
    clear_has_value();
    return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_Param::set_allocated_value(::std::string* value)
{
    if (value != NULL) {
        set_has_value();
    } else {
        clear_has_value();
    }
    value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.Param.value)
}

// -------------------------------------------------------------------

// Study_Experiment_FeatureAssociation

// repeated string enable_feature = 1;
int Study_Experiment_FeatureAssociation::enable_feature_size() const
{
    return enable_feature_.size();
}
void Study_Experiment_FeatureAssociation::clear_enable_feature()
{
    enable_feature_.Clear();
}
const ::std::string& Study_Experiment_FeatureAssociation::enable_feature(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.FeatureAssociation.enable_feature)
    return enable_feature_.Get(index);
}
::std::string* Study_Experiment_FeatureAssociation::mutable_enable_feature(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.FeatureAssociation.enable_feature)
    return enable_feature_.Mutable(index);
}
void Study_Experiment_FeatureAssociation::set_enable_feature(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.FeatureAssociation.enable_feature)
    enable_feature_.Mutable(index)->assign(value);
}
void Study_Experiment_FeatureAssociation::set_enable_feature(int index, const char* value)
{
    enable_feature_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.FeatureAssociation.enable_feature)
}
void Study_Experiment_FeatureAssociation::set_enable_feature(int index, const char* value, size_t size)
{
    enable_feature_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.FeatureAssociation.enable_feature)
}
::std::string* Study_Experiment_FeatureAssociation::add_enable_feature()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Experiment.FeatureAssociation.enable_feature)
    return enable_feature_.Add();
}
void Study_Experiment_FeatureAssociation::add_enable_feature(const ::std::string& value)
{
    enable_feature_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Experiment.FeatureAssociation.enable_feature)
}
void Study_Experiment_FeatureAssociation::add_enable_feature(const char* value)
{
    enable_feature_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Experiment.FeatureAssociation.enable_feature)
}
void Study_Experiment_FeatureAssociation::add_enable_feature(const char* value, size_t size)
{
    enable_feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Experiment.FeatureAssociation.enable_feature)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Experiment_FeatureAssociation::enable_feature() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Experiment.FeatureAssociation.enable_feature)
    return enable_feature_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Experiment_FeatureAssociation::mutable_enable_feature()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Experiment.FeatureAssociation.enable_feature)
    return &enable_feature_;
}

// repeated string disable_feature = 2;
int Study_Experiment_FeatureAssociation::disable_feature_size() const
{
    return disable_feature_.size();
}
void Study_Experiment_FeatureAssociation::clear_disable_feature()
{
    disable_feature_.Clear();
}
const ::std::string& Study_Experiment_FeatureAssociation::disable_feature(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.FeatureAssociation.disable_feature)
    return disable_feature_.Get(index);
}
::std::string* Study_Experiment_FeatureAssociation::mutable_disable_feature(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.FeatureAssociation.disable_feature)
    return disable_feature_.Mutable(index);
}
void Study_Experiment_FeatureAssociation::set_disable_feature(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.FeatureAssociation.disable_feature)
    disable_feature_.Mutable(index)->assign(value);
}
void Study_Experiment_FeatureAssociation::set_disable_feature(int index, const char* value)
{
    disable_feature_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.FeatureAssociation.disable_feature)
}
void Study_Experiment_FeatureAssociation::set_disable_feature(int index, const char* value, size_t size)
{
    disable_feature_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.FeatureAssociation.disable_feature)
}
::std::string* Study_Experiment_FeatureAssociation::add_disable_feature()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Experiment.FeatureAssociation.disable_feature)
    return disable_feature_.Add();
}
void Study_Experiment_FeatureAssociation::add_disable_feature(const ::std::string& value)
{
    disable_feature_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Experiment.FeatureAssociation.disable_feature)
}
void Study_Experiment_FeatureAssociation::add_disable_feature(const char* value)
{
    disable_feature_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Experiment.FeatureAssociation.disable_feature)
}
void Study_Experiment_FeatureAssociation::add_disable_feature(const char* value, size_t size)
{
    disable_feature_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Experiment.FeatureAssociation.disable_feature)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Experiment_FeatureAssociation::disable_feature() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Experiment.FeatureAssociation.disable_feature)
    return disable_feature_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Experiment_FeatureAssociation::mutable_disable_feature()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Experiment.FeatureAssociation.disable_feature)
    return &disable_feature_;
}

// optional string forcing_feature_on = 3;
bool Study_Experiment_FeatureAssociation::has_forcing_feature_on() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void Study_Experiment_FeatureAssociation::set_has_forcing_feature_on()
{
    _has_bits_[0] |= 0x00000004u;
}
void Study_Experiment_FeatureAssociation::clear_has_forcing_feature_on()
{
    _has_bits_[0] &= ~0x00000004u;
}
void Study_Experiment_FeatureAssociation::clear_forcing_feature_on()
{
    forcing_feature_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_forcing_feature_on();
}
const ::std::string& Study_Experiment_FeatureAssociation::forcing_feature_on() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
    return forcing_feature_on_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_FeatureAssociation::set_forcing_feature_on(const ::std::string& value)
{
    set_has_forcing_feature_on();
    forcing_feature_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
}
void Study_Experiment_FeatureAssociation::set_forcing_feature_on(const char* value)
{
    set_has_forcing_feature_on();
    forcing_feature_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
}
void Study_Experiment_FeatureAssociation::set_forcing_feature_on(const char* value, size_t size)
{
    set_has_forcing_feature_on();
    forcing_feature_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
}
::std::string* Study_Experiment_FeatureAssociation::mutable_forcing_feature_on()
{
    set_has_forcing_feature_on();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
    return forcing_feature_on_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment_FeatureAssociation::release_forcing_feature_on()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
    clear_has_forcing_feature_on();
    return forcing_feature_on_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_FeatureAssociation::set_allocated_forcing_feature_on(::std::string* forcing_feature_on)
{
    if (forcing_feature_on != NULL) {
        set_has_forcing_feature_on();
    } else {
        clear_has_forcing_feature_on();
    }
    forcing_feature_on_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forcing_feature_on);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.FeatureAssociation.forcing_feature_on)
}

// optional string forcing_feature_off = 4;
bool Study_Experiment_FeatureAssociation::has_forcing_feature_off() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void Study_Experiment_FeatureAssociation::set_has_forcing_feature_off()
{
    _has_bits_[0] |= 0x00000008u;
}
void Study_Experiment_FeatureAssociation::clear_has_forcing_feature_off()
{
    _has_bits_[0] &= ~0x00000008u;
}
void Study_Experiment_FeatureAssociation::clear_forcing_feature_off()
{
    forcing_feature_off_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_forcing_feature_off();
}
const ::std::string& Study_Experiment_FeatureAssociation::forcing_feature_off() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
    return forcing_feature_off_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_FeatureAssociation::set_forcing_feature_off(const ::std::string& value)
{
    set_has_forcing_feature_off();
    forcing_feature_off_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
}
void Study_Experiment_FeatureAssociation::set_forcing_feature_off(const char* value)
{
    set_has_forcing_feature_off();
    forcing_feature_off_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
}
void Study_Experiment_FeatureAssociation::set_forcing_feature_off(const char* value, size_t size)
{
    set_has_forcing_feature_off();
    forcing_feature_off_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
}
::std::string* Study_Experiment_FeatureAssociation::mutable_forcing_feature_off()
{
    set_has_forcing_feature_off();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
    return forcing_feature_off_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment_FeatureAssociation::release_forcing_feature_off()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
    clear_has_forcing_feature_off();
    return forcing_feature_off_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_FeatureAssociation::set_allocated_forcing_feature_off(::std::string* forcing_feature_off)
{
    if (forcing_feature_off != NULL) {
        set_has_forcing_feature_off();
    } else {
        clear_has_forcing_feature_off();
    }
    forcing_feature_off_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forcing_feature_off);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.FeatureAssociation.forcing_feature_off)
}

// -------------------------------------------------------------------

// Study_Experiment_OverrideUIString

// optional fixed32 name_hash = 1;
bool Study_Experiment_OverrideUIString::has_name_hash() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void Study_Experiment_OverrideUIString::set_has_name_hash()
{
    _has_bits_[0] |= 0x00000001u;
}
void Study_Experiment_OverrideUIString::clear_has_name_hash()
{
    _has_bits_[0] &= ~0x00000001u;
}
void Study_Experiment_OverrideUIString::clear_name_hash()
{
    name_hash_ = 0u;
    clear_has_name_hash();
}
::google::protobuf::uint32 Study_Experiment_OverrideUIString::name_hash() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.OverrideUIString.name_hash)
    return name_hash_;
}
void Study_Experiment_OverrideUIString::set_name_hash(::google::protobuf::uint32 value)
{
    set_has_name_hash();
    name_hash_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.OverrideUIString.name_hash)
}

// optional string value = 2;
bool Study_Experiment_OverrideUIString::has_value() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void Study_Experiment_OverrideUIString::set_has_value()
{
    _has_bits_[0] |= 0x00000002u;
}
void Study_Experiment_OverrideUIString::clear_has_value()
{
    _has_bits_[0] &= ~0x00000002u;
}
void Study_Experiment_OverrideUIString::clear_value()
{
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
}
const ::std::string& Study_Experiment_OverrideUIString::value() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.OverrideUIString.value)
    return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_OverrideUIString::set_value(const ::std::string& value)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.OverrideUIString.value)
}
void Study_Experiment_OverrideUIString::set_value(const char* value)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.OverrideUIString.value)
}
void Study_Experiment_OverrideUIString::set_value(const char* value, size_t size)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.OverrideUIString.value)
}
::std::string* Study_Experiment_OverrideUIString::mutable_value()
{
    set_has_value();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.OverrideUIString.value)
    return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment_OverrideUIString::release_value()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.OverrideUIString.value)
    clear_has_value();
    return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment_OverrideUIString::set_allocated_value(::std::string* value)
{
    if (value != NULL) {
        set_has_value();
    } else {
        clear_has_value();
    }
    value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.OverrideUIString.value)
}

// -------------------------------------------------------------------

// Study_Experiment

// required string name = 1;
bool Study_Experiment::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void Study_Experiment::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void Study_Experiment::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void Study_Experiment::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& Study_Experiment::name() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.name)
}
void Study_Experiment::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.name)
}
void Study_Experiment::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.name)
}
::std::string* Study_Experiment::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment::release_name()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.name)
}

// required uint32 probability_weight = 2;
bool Study_Experiment::has_probability_weight() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void Study_Experiment::set_has_probability_weight()
{
    _has_bits_[0] |= 0x00000002u;
}
void Study_Experiment::clear_has_probability_weight()
{
    _has_bits_[0] &= ~0x00000002u;
}
void Study_Experiment::clear_probability_weight()
{
    probability_weight_ = 0u;
    clear_has_probability_weight();
}
::google::protobuf::uint32 Study_Experiment::probability_weight() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.probability_weight)
    return probability_weight_;
}
void Study_Experiment::set_probability_weight(::google::protobuf::uint32 value)
{
    set_has_probability_weight();
    probability_weight_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.probability_weight)
}

// optional uint64 google_web_experiment_id = 3;
bool Study_Experiment::has_google_web_experiment_id() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void Study_Experiment::set_has_google_web_experiment_id()
{
    _has_bits_[0] |= 0x00000004u;
}
void Study_Experiment::clear_has_google_web_experiment_id()
{
    _has_bits_[0] &= ~0x00000004u;
}
void Study_Experiment::clear_google_web_experiment_id()
{
    google_web_experiment_id_ = GOOGLE_ULONGLONG(0);
    clear_has_google_web_experiment_id();
}
::google::protobuf::uint64 Study_Experiment::google_web_experiment_id() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.google_web_experiment_id)
    return google_web_experiment_id_;
}
void Study_Experiment::set_google_web_experiment_id(::google::protobuf::uint64 value)
{
    set_has_google_web_experiment_id();
    google_web_experiment_id_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.google_web_experiment_id)
}

// optional uint64 google_web_trigger_experiment_id = 8;
bool Study_Experiment::has_google_web_trigger_experiment_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void Study_Experiment::set_has_google_web_trigger_experiment_id()
{
    _has_bits_[0] |= 0x00000008u;
}
void Study_Experiment::clear_has_google_web_trigger_experiment_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
void Study_Experiment::clear_google_web_trigger_experiment_id()
{
    google_web_trigger_experiment_id_ = GOOGLE_ULONGLONG(0);
    clear_has_google_web_trigger_experiment_id();
}
::google::protobuf::uint64 Study_Experiment::google_web_trigger_experiment_id() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.google_web_trigger_experiment_id)
    return google_web_trigger_experiment_id_;
}
void Study_Experiment::set_google_web_trigger_experiment_id(::google::protobuf::uint64 value)
{
    set_has_google_web_trigger_experiment_id();
    google_web_trigger_experiment_id_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.google_web_trigger_experiment_id)
}

// optional uint64 chrome_sync_experiment_id = 10;
bool Study_Experiment::has_chrome_sync_experiment_id() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void Study_Experiment::set_has_chrome_sync_experiment_id()
{
    _has_bits_[0] |= 0x00000010u;
}
void Study_Experiment::clear_has_chrome_sync_experiment_id()
{
    _has_bits_[0] &= ~0x00000010u;
}
void Study_Experiment::clear_chrome_sync_experiment_id()
{
    chrome_sync_experiment_id_ = GOOGLE_ULONGLONG(0);
    clear_has_chrome_sync_experiment_id();
}
::google::protobuf::uint64 Study_Experiment::chrome_sync_experiment_id() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.chrome_sync_experiment_id)
    return chrome_sync_experiment_id_;
}
void Study_Experiment::set_chrome_sync_experiment_id(::google::protobuf::uint64 value)
{
    set_has_chrome_sync_experiment_id();
    chrome_sync_experiment_id_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.chrome_sync_experiment_id)
}

// optional .variations.Study.Experiment.FeatureAssociation feature_association = 12;
bool Study_Experiment::has_feature_association() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void Study_Experiment::set_has_feature_association()
{
    _has_bits_[0] |= 0x00000020u;
}
void Study_Experiment::clear_has_feature_association()
{
    _has_bits_[0] &= ~0x00000020u;
}
void Study_Experiment::clear_feature_association()
{
    if (feature_association_ != NULL)
        feature_association_->::variations::Study_Experiment_FeatureAssociation::Clear();
    clear_has_feature_association();
}
const ::variations::Study_Experiment_FeatureAssociation& Study_Experiment::feature_association() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.feature_association)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return feature_association_ != NULL ? *feature_association_ : *default_instance().feature_association_;
#else
    return feature_association_ != NULL ? *feature_association_ : *default_instance_->feature_association_;
#endif
}
::variations::Study_Experiment_FeatureAssociation* Study_Experiment::mutable_feature_association()
{
    set_has_feature_association();
    if (feature_association_ == NULL) {
        feature_association_ = new ::variations::Study_Experiment_FeatureAssociation;
    }
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.feature_association)
    return feature_association_;
}
::variations::Study_Experiment_FeatureAssociation* Study_Experiment::release_feature_association()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.feature_association)
    clear_has_feature_association();
    ::variations::Study_Experiment_FeatureAssociation* temp = feature_association_;
    feature_association_ = NULL;
    return temp;
}
void Study_Experiment::set_allocated_feature_association(::variations::Study_Experiment_FeatureAssociation* feature_association)
{
    delete feature_association_;
    feature_association_ = feature_association;
    if (feature_association) {
        set_has_feature_association();
    } else {
        clear_has_feature_association();
    }
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.feature_association)
}

// optional string forcing_flag = 5;
bool Study_Experiment::has_forcing_flag() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void Study_Experiment::set_has_forcing_flag()
{
    _has_bits_[0] |= 0x00000040u;
}
void Study_Experiment::clear_has_forcing_flag()
{
    _has_bits_[0] &= ~0x00000040u;
}
void Study_Experiment::clear_forcing_flag()
{
    forcing_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_forcing_flag();
}
const ::std::string& Study_Experiment::forcing_flag() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.forcing_flag)
    return forcing_flag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment::set_forcing_flag(const ::std::string& value)
{
    set_has_forcing_flag();
    forcing_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.forcing_flag)
}
void Study_Experiment::set_forcing_flag(const char* value)
{
    set_has_forcing_flag();
    forcing_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Experiment.forcing_flag)
}
void Study_Experiment::set_forcing_flag(const char* value, size_t size)
{
    set_has_forcing_flag();
    forcing_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Experiment.forcing_flag)
}
::std::string* Study_Experiment::mutable_forcing_flag()
{
    set_has_forcing_flag();
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.forcing_flag)
    return forcing_flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Experiment::release_forcing_flag()
{
    // @@protoc_insertion_point(field_release:variations.Study.Experiment.forcing_flag)
    clear_has_forcing_flag();
    return forcing_flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Experiment::set_allocated_forcing_flag(::std::string* forcing_flag)
{
    if (forcing_flag != NULL) {
        set_has_forcing_flag();
    } else {
        clear_has_forcing_flag();
    }
    forcing_flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forcing_flag);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Experiment.forcing_flag)
}

// repeated .variations.Study.Experiment.Param param = 6;
int Study_Experiment::param_size() const
{
    return param_.size();
}
void Study_Experiment::clear_param()
{
    param_.Clear();
}
const ::variations::Study_Experiment_Param& Study_Experiment::param(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.param)
    return param_.Get(index);
}
::variations::Study_Experiment_Param* Study_Experiment::mutable_param(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.param)
    return param_.Mutable(index);
}
::variations::Study_Experiment_Param* Study_Experiment::add_param()
{
    // @@protoc_insertion_point(field_add:variations.Study.Experiment.param)
    return param_.Add();
}
::google::protobuf::RepeatedPtrField<::variations::Study_Experiment_Param>*
Study_Experiment::mutable_param()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Experiment.param)
    return &param_;
}
const ::google::protobuf::RepeatedPtrField<::variations::Study_Experiment_Param>&
Study_Experiment::param() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Experiment.param)
    return param_;
}

// optional .variations.Study.Experiment.Type type = 7 [default = NORMAL];
bool Study_Experiment::has_type() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void Study_Experiment::set_has_type()
{
    _has_bits_[0] |= 0x00000100u;
}
void Study_Experiment::clear_has_type()
{
    _has_bits_[0] &= ~0x00000100u;
}
void Study_Experiment::clear_type()
{
    type_ = 0;
    clear_has_type();
}
::variations::Study_Experiment_Type Study_Experiment::type() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.type)
    return static_cast<::variations::Study_Experiment_Type>(type_);
}
void Study_Experiment::set_type(::variations::Study_Experiment_Type value)
{
    assert(::variations::Study_Experiment_Type_IsValid(value));
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Experiment.type)
}

// repeated .variations.Study.Experiment.OverrideUIString override_ui_string = 9;
int Study_Experiment::override_ui_string_size() const
{
    return override_ui_string_.size();
}
void Study_Experiment::clear_override_ui_string()
{
    override_ui_string_.Clear();
}
const ::variations::Study_Experiment_OverrideUIString& Study_Experiment::override_ui_string(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Experiment.override_ui_string)
    return override_ui_string_.Get(index);
}
::variations::Study_Experiment_OverrideUIString* Study_Experiment::mutable_override_ui_string(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Experiment.override_ui_string)
    return override_ui_string_.Mutable(index);
}
::variations::Study_Experiment_OverrideUIString* Study_Experiment::add_override_ui_string()
{
    // @@protoc_insertion_point(field_add:variations.Study.Experiment.override_ui_string)
    return override_ui_string_.Add();
}
::google::protobuf::RepeatedPtrField<::variations::Study_Experiment_OverrideUIString>*
Study_Experiment::mutable_override_ui_string()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Experiment.override_ui_string)
    return &override_ui_string_;
}
const ::google::protobuf::RepeatedPtrField<::variations::Study_Experiment_OverrideUIString>&
Study_Experiment::override_ui_string() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Experiment.override_ui_string)
    return override_ui_string_;
}

// -------------------------------------------------------------------

// Study_Filter

// optional int64 start_date = 1;
bool Study_Filter::has_start_date() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void Study_Filter::set_has_start_date()
{
    _has_bits_[0] |= 0x00000001u;
}
void Study_Filter::clear_has_start_date()
{
    _has_bits_[0] &= ~0x00000001u;
}
void Study_Filter::clear_start_date()
{
    start_date_ = GOOGLE_LONGLONG(0);
    clear_has_start_date();
}
::google::protobuf::int64 Study_Filter::start_date() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.start_date)
    return start_date_;
}
void Study_Filter::set_start_date(::google::protobuf::int64 value)
{
    set_has_start_date();
    start_date_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Filter.start_date)
}

// optional int64 end_date = 13;
bool Study_Filter::has_end_date() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void Study_Filter::set_has_end_date()
{
    _has_bits_[0] |= 0x00000002u;
}
void Study_Filter::clear_has_end_date()
{
    _has_bits_[0] &= ~0x00000002u;
}
void Study_Filter::clear_end_date()
{
    end_date_ = GOOGLE_LONGLONG(0);
    clear_has_end_date();
}
::google::protobuf::int64 Study_Filter::end_date() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.end_date)
    return end_date_;
}
void Study_Filter::set_end_date(::google::protobuf::int64 value)
{
    set_has_end_date();
    end_date_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.Filter.end_date)
}

// optional string min_version = 2;
bool Study_Filter::has_min_version() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void Study_Filter::set_has_min_version()
{
    _has_bits_[0] |= 0x00000004u;
}
void Study_Filter::clear_has_min_version()
{
    _has_bits_[0] &= ~0x00000004u;
}
void Study_Filter::clear_min_version()
{
    min_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_min_version();
}
const ::std::string& Study_Filter::min_version() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.min_version)
    return min_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Filter::set_min_version(const ::std::string& value)
{
    set_has_min_version();
    min_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Filter.min_version)
}
void Study_Filter::set_min_version(const char* value)
{
    set_has_min_version();
    min_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.min_version)
}
void Study_Filter::set_min_version(const char* value, size_t size)
{
    set_has_min_version();
    min_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.min_version)
}
::std::string* Study_Filter::mutable_min_version()
{
    set_has_min_version();
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.min_version)
    return min_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Filter::release_min_version()
{
    // @@protoc_insertion_point(field_release:variations.Study.Filter.min_version)
    clear_has_min_version();
    return min_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Filter::set_allocated_min_version(::std::string* min_version)
{
    if (min_version != NULL) {
        set_has_min_version();
    } else {
        clear_has_min_version();
    }
    min_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), min_version);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Filter.min_version)
}

// optional string max_version = 3;
bool Study_Filter::has_max_version() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void Study_Filter::set_has_max_version()
{
    _has_bits_[0] |= 0x00000008u;
}
void Study_Filter::clear_has_max_version()
{
    _has_bits_[0] &= ~0x00000008u;
}
void Study_Filter::clear_max_version()
{
    max_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_max_version();
}
const ::std::string& Study_Filter::max_version() const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.max_version)
    return max_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Filter::set_max_version(const ::std::string& value)
{
    set_has_max_version();
    max_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.Filter.max_version)
}
void Study_Filter::set_max_version(const char* value)
{
    set_has_max_version();
    max_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.max_version)
}
void Study_Filter::set_max_version(const char* value, size_t size)
{
    set_has_max_version();
    max_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.max_version)
}
::std::string* Study_Filter::mutable_max_version()
{
    set_has_max_version();
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.max_version)
    return max_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study_Filter::release_max_version()
{
    // @@protoc_insertion_point(field_release:variations.Study.Filter.max_version)
    clear_has_max_version();
    return max_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study_Filter::set_allocated_max_version(::std::string* max_version)
{
    if (max_version != NULL) {
        set_has_max_version();
    } else {
        clear_has_max_version();
    }
    max_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_version);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.Filter.max_version)
}

// repeated .variations.Study.Channel channel = 4;
int Study_Filter::channel_size() const
{
    return channel_.size();
}
void Study_Filter::clear_channel()
{
    channel_.Clear();
}
::variations::Study_Channel Study_Filter::channel(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.channel)
    return static_cast<::variations::Study_Channel>(channel_.Get(index));
}
void Study_Filter::set_channel(int index, ::variations::Study_Channel value)
{
    assert(::variations::Study_Channel_IsValid(value));
    channel_.Set(index, value);
    // @@protoc_insertion_point(field_set:variations.Study.Filter.channel)
}
void Study_Filter::add_channel(::variations::Study_Channel value)
{
    assert(::variations::Study_Channel_IsValid(value));
    channel_.Add(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.channel)
}
const ::google::protobuf::RepeatedField<int>&
Study_Filter::channel() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.channel)
    return channel_;
}
::google::protobuf::RepeatedField<int>*
Study_Filter::mutable_channel()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.channel)
    return &channel_;
}

// repeated .variations.Study.Platform platform = 5;
int Study_Filter::platform_size() const
{
    return platform_.size();
}
void Study_Filter::clear_platform()
{
    platform_.Clear();
}
::variations::Study_Platform Study_Filter::platform(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.platform)
    return static_cast<::variations::Study_Platform>(platform_.Get(index));
}
void Study_Filter::set_platform(int index, ::variations::Study_Platform value)
{
    assert(::variations::Study_Platform_IsValid(value));
    platform_.Set(index, value);
    // @@protoc_insertion_point(field_set:variations.Study.Filter.platform)
}
void Study_Filter::add_platform(::variations::Study_Platform value)
{
    assert(::variations::Study_Platform_IsValid(value));
    platform_.Add(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.platform)
}
const ::google::protobuf::RepeatedField<int>&
Study_Filter::platform() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.platform)
    return platform_;
}
::google::protobuf::RepeatedField<int>*
Study_Filter::mutable_platform()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.platform)
    return &platform_;
}

// repeated string locale = 6;
int Study_Filter::locale_size() const
{
    return locale_.size();
}
void Study_Filter::clear_locale()
{
    locale_.Clear();
}
const ::std::string& Study_Filter::locale(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.locale)
    return locale_.Get(index);
}
::std::string* Study_Filter::mutable_locale(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.locale)
    return locale_.Mutable(index);
}
void Study_Filter::set_locale(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Filter.locale)
    locale_.Mutable(index)->assign(value);
}
void Study_Filter::set_locale(int index, const char* value)
{
    locale_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.locale)
}
void Study_Filter::set_locale(int index, const char* value, size_t size)
{
    locale_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.locale)
}
::std::string* Study_Filter::add_locale()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Filter.locale)
    return locale_.Add();
}
void Study_Filter::add_locale(const ::std::string& value)
{
    locale_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.locale)
}
void Study_Filter::add_locale(const char* value)
{
    locale_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Filter.locale)
}
void Study_Filter::add_locale(const char* value, size_t size)
{
    locale_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Filter.locale)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Filter::locale() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.locale)
    return locale_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Filter::mutable_locale()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.locale)
    return &locale_;
}

// repeated string exclude_locale = 12;
int Study_Filter::exclude_locale_size() const
{
    return exclude_locale_.size();
}
void Study_Filter::clear_exclude_locale()
{
    exclude_locale_.Clear();
}
const ::std::string& Study_Filter::exclude_locale(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.exclude_locale)
    return exclude_locale_.Get(index);
}
::std::string* Study_Filter::mutable_exclude_locale(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.exclude_locale)
    return exclude_locale_.Mutable(index);
}
void Study_Filter::set_exclude_locale(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Filter.exclude_locale)
    exclude_locale_.Mutable(index)->assign(value);
}
void Study_Filter::set_exclude_locale(int index, const char* value)
{
    exclude_locale_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.exclude_locale)
}
void Study_Filter::set_exclude_locale(int index, const char* value, size_t size)
{
    exclude_locale_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.exclude_locale)
}
::std::string* Study_Filter::add_exclude_locale()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Filter.exclude_locale)
    return exclude_locale_.Add();
}
void Study_Filter::add_exclude_locale(const ::std::string& value)
{
    exclude_locale_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.exclude_locale)
}
void Study_Filter::add_exclude_locale(const char* value)
{
    exclude_locale_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Filter.exclude_locale)
}
void Study_Filter::add_exclude_locale(const char* value, size_t size)
{
    exclude_locale_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Filter.exclude_locale)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Filter::exclude_locale() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.exclude_locale)
    return exclude_locale_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Filter::mutable_exclude_locale()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.exclude_locale)
    return &exclude_locale_;
}

// repeated .variations.Study.FormFactor form_factor = 7;
int Study_Filter::form_factor_size() const
{
    return form_factor_.size();
}
void Study_Filter::clear_form_factor()
{
    form_factor_.Clear();
}
::variations::Study_FormFactor Study_Filter::form_factor(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.form_factor)
    return static_cast<::variations::Study_FormFactor>(form_factor_.Get(index));
}
void Study_Filter::set_form_factor(int index, ::variations::Study_FormFactor value)
{
    assert(::variations::Study_FormFactor_IsValid(value));
    form_factor_.Set(index, value);
    // @@protoc_insertion_point(field_set:variations.Study.Filter.form_factor)
}
void Study_Filter::add_form_factor(::variations::Study_FormFactor value)
{
    assert(::variations::Study_FormFactor_IsValid(value));
    form_factor_.Add(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.form_factor)
}
const ::google::protobuf::RepeatedField<int>&
Study_Filter::form_factor() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.form_factor)
    return form_factor_;
}
::google::protobuf::RepeatedField<int>*
Study_Filter::mutable_form_factor()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.form_factor)
    return &form_factor_;
}

// repeated string hardware_class = 8;
int Study_Filter::hardware_class_size() const
{
    return hardware_class_.size();
}
void Study_Filter::clear_hardware_class()
{
    hardware_class_.Clear();
}
const ::std::string& Study_Filter::hardware_class(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.hardware_class)
    return hardware_class_.Get(index);
}
::std::string* Study_Filter::mutable_hardware_class(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.hardware_class)
    return hardware_class_.Mutable(index);
}
void Study_Filter::set_hardware_class(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Filter.hardware_class)
    hardware_class_.Mutable(index)->assign(value);
}
void Study_Filter::set_hardware_class(int index, const char* value)
{
    hardware_class_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.hardware_class)
}
void Study_Filter::set_hardware_class(int index, const char* value, size_t size)
{
    hardware_class_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.hardware_class)
}
::std::string* Study_Filter::add_hardware_class()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Filter.hardware_class)
    return hardware_class_.Add();
}
void Study_Filter::add_hardware_class(const ::std::string& value)
{
    hardware_class_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.hardware_class)
}
void Study_Filter::add_hardware_class(const char* value)
{
    hardware_class_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Filter.hardware_class)
}
void Study_Filter::add_hardware_class(const char* value, size_t size)
{
    hardware_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Filter.hardware_class)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Filter::hardware_class() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.hardware_class)
    return hardware_class_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Filter::mutable_hardware_class()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.hardware_class)
    return &hardware_class_;
}

// repeated string exclude_hardware_class = 9;
int Study_Filter::exclude_hardware_class_size() const
{
    return exclude_hardware_class_.size();
}
void Study_Filter::clear_exclude_hardware_class()
{
    exclude_hardware_class_.Clear();
}
const ::std::string& Study_Filter::exclude_hardware_class(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.exclude_hardware_class)
    return exclude_hardware_class_.Get(index);
}
::std::string* Study_Filter::mutable_exclude_hardware_class(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.exclude_hardware_class)
    return exclude_hardware_class_.Mutable(index);
}
void Study_Filter::set_exclude_hardware_class(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Filter.exclude_hardware_class)
    exclude_hardware_class_.Mutable(index)->assign(value);
}
void Study_Filter::set_exclude_hardware_class(int index, const char* value)
{
    exclude_hardware_class_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.exclude_hardware_class)
}
void Study_Filter::set_exclude_hardware_class(int index, const char* value, size_t size)
{
    exclude_hardware_class_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.exclude_hardware_class)
}
::std::string* Study_Filter::add_exclude_hardware_class()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Filter.exclude_hardware_class)
    return exclude_hardware_class_.Add();
}
void Study_Filter::add_exclude_hardware_class(const ::std::string& value)
{
    exclude_hardware_class_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.exclude_hardware_class)
}
void Study_Filter::add_exclude_hardware_class(const char* value)
{
    exclude_hardware_class_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Filter.exclude_hardware_class)
}
void Study_Filter::add_exclude_hardware_class(const char* value, size_t size)
{
    exclude_hardware_class_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Filter.exclude_hardware_class)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Filter::exclude_hardware_class() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.exclude_hardware_class)
    return exclude_hardware_class_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Filter::mutable_exclude_hardware_class()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.exclude_hardware_class)
    return &exclude_hardware_class_;
}

// repeated string country = 10;
int Study_Filter::country_size() const
{
    return country_.size();
}
void Study_Filter::clear_country()
{
    country_.Clear();
}
const ::std::string& Study_Filter::country(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.country)
    return country_.Get(index);
}
::std::string* Study_Filter::mutable_country(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.country)
    return country_.Mutable(index);
}
void Study_Filter::set_country(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Filter.country)
    country_.Mutable(index)->assign(value);
}
void Study_Filter::set_country(int index, const char* value)
{
    country_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.country)
}
void Study_Filter::set_country(int index, const char* value, size_t size)
{
    country_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.country)
}
::std::string* Study_Filter::add_country()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Filter.country)
    return country_.Add();
}
void Study_Filter::add_country(const ::std::string& value)
{
    country_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.country)
}
void Study_Filter::add_country(const char* value)
{
    country_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Filter.country)
}
void Study_Filter::add_country(const char* value, size_t size)
{
    country_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Filter.country)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Filter::country() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.country)
    return country_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Filter::mutable_country()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.country)
    return &country_;
}

// repeated string exclude_country = 11;
int Study_Filter::exclude_country_size() const
{
    return exclude_country_.size();
}
void Study_Filter::clear_exclude_country()
{
    exclude_country_.Clear();
}
const ::std::string& Study_Filter::exclude_country(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.Filter.exclude_country)
    return exclude_country_.Get(index);
}
::std::string* Study_Filter::mutable_exclude_country(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.Filter.exclude_country)
    return exclude_country_.Mutable(index);
}
void Study_Filter::set_exclude_country(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:variations.Study.Filter.exclude_country)
    exclude_country_.Mutable(index)->assign(value);
}
void Study_Filter::set_exclude_country(int index, const char* value)
{
    exclude_country_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:variations.Study.Filter.exclude_country)
}
void Study_Filter::set_exclude_country(int index, const char* value, size_t size)
{
    exclude_country_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:variations.Study.Filter.exclude_country)
}
::std::string* Study_Filter::add_exclude_country()
{
    // @@protoc_insertion_point(field_add_mutable:variations.Study.Filter.exclude_country)
    return exclude_country_.Add();
}
void Study_Filter::add_exclude_country(const ::std::string& value)
{
    exclude_country_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:variations.Study.Filter.exclude_country)
}
void Study_Filter::add_exclude_country(const char* value)
{
    exclude_country_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:variations.Study.Filter.exclude_country)
}
void Study_Filter::add_exclude_country(const char* value, size_t size)
{
    exclude_country_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:variations.Study.Filter.exclude_country)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
Study_Filter::exclude_country() const
{
    // @@protoc_insertion_point(field_list:variations.Study.Filter.exclude_country)
    return exclude_country_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
Study_Filter::mutable_exclude_country()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.Filter.exclude_country)
    return &exclude_country_;
}

// -------------------------------------------------------------------

// Study

// required string name = 1;
bool Study::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void Study::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void Study::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void Study::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& Study::name() const
{
    // @@protoc_insertion_point(field_get:variations.Study.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.name)
}
void Study::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.name)
}
void Study::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.name)
}
::std::string* Study::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:variations.Study.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study::release_name()
{
    // @@protoc_insertion_point(field_release:variations.Study.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.name)
}

// optional int64 expiry_date = 3;
bool Study::has_expiry_date() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void Study::set_has_expiry_date()
{
    _has_bits_[0] |= 0x00000002u;
}
void Study::clear_has_expiry_date()
{
    _has_bits_[0] &= ~0x00000002u;
}
void Study::clear_expiry_date()
{
    expiry_date_ = GOOGLE_LONGLONG(0);
    clear_has_expiry_date();
}
::google::protobuf::int64 Study::expiry_date() const
{
    // @@protoc_insertion_point(field_get:variations.Study.expiry_date)
    return expiry_date_;
}
void Study::set_expiry_date(::google::protobuf::int64 value)
{
    set_has_expiry_date();
    expiry_date_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.expiry_date)
}

// optional .variations.Study.Consistency consistency = 7 [default = SESSION];
bool Study::has_consistency() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void Study::set_has_consistency()
{
    _has_bits_[0] |= 0x00000004u;
}
void Study::clear_has_consistency()
{
    _has_bits_[0] &= ~0x00000004u;
}
void Study::clear_consistency()
{
    consistency_ = 0;
    clear_has_consistency();
}
::variations::Study_Consistency Study::consistency() const
{
    // @@protoc_insertion_point(field_get:variations.Study.consistency)
    return static_cast<::variations::Study_Consistency>(consistency_);
}
void Study::set_consistency(::variations::Study_Consistency value)
{
    assert(::variations::Study_Consistency_IsValid(value));
    set_has_consistency();
    consistency_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.consistency)
}

// optional string default_experiment_name = 8;
bool Study::has_default_experiment_name() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void Study::set_has_default_experiment_name()
{
    _has_bits_[0] |= 0x00000008u;
}
void Study::clear_has_default_experiment_name()
{
    _has_bits_[0] &= ~0x00000008u;
}
void Study::clear_default_experiment_name()
{
    default_experiment_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_default_experiment_name();
}
const ::std::string& Study::default_experiment_name() const
{
    // @@protoc_insertion_point(field_get:variations.Study.default_experiment_name)
    return default_experiment_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study::set_default_experiment_name(const ::std::string& value)
{
    set_has_default_experiment_name();
    default_experiment_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:variations.Study.default_experiment_name)
}
void Study::set_default_experiment_name(const char* value)
{
    set_has_default_experiment_name();
    default_experiment_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:variations.Study.default_experiment_name)
}
void Study::set_default_experiment_name(const char* value, size_t size)
{
    set_has_default_experiment_name();
    default_experiment_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:variations.Study.default_experiment_name)
}
::std::string* Study::mutable_default_experiment_name()
{
    set_has_default_experiment_name();
    // @@protoc_insertion_point(field_mutable:variations.Study.default_experiment_name)
    return default_experiment_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Study::release_default_experiment_name()
{
    // @@protoc_insertion_point(field_release:variations.Study.default_experiment_name)
    clear_has_default_experiment_name();
    return default_experiment_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Study::set_allocated_default_experiment_name(::std::string* default_experiment_name)
{
    if (default_experiment_name != NULL) {
        set_has_default_experiment_name();
    } else {
        clear_has_default_experiment_name();
    }
    default_experiment_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_experiment_name);
    // @@protoc_insertion_point(field_set_allocated:variations.Study.default_experiment_name)
}

// repeated .variations.Study.Experiment experiment = 9;
int Study::experiment_size() const
{
    return experiment_.size();
}
void Study::clear_experiment()
{
    experiment_.Clear();
}
const ::variations::Study_Experiment& Study::experiment(int index) const
{
    // @@protoc_insertion_point(field_get:variations.Study.experiment)
    return experiment_.Get(index);
}
::variations::Study_Experiment* Study::mutable_experiment(int index)
{
    // @@protoc_insertion_point(field_mutable:variations.Study.experiment)
    return experiment_.Mutable(index);
}
::variations::Study_Experiment* Study::add_experiment()
{
    // @@protoc_insertion_point(field_add:variations.Study.experiment)
    return experiment_.Add();
}
::google::protobuf::RepeatedPtrField<::variations::Study_Experiment>*
Study::mutable_experiment()
{
    // @@protoc_insertion_point(field_mutable_list:variations.Study.experiment)
    return &experiment_;
}
const ::google::protobuf::RepeatedPtrField<::variations::Study_Experiment>&
Study::experiment() const
{
    // @@protoc_insertion_point(field_list:variations.Study.experiment)
    return experiment_;
}

// optional .variations.Study.Filter filter = 10;
bool Study::has_filter() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void Study::set_has_filter()
{
    _has_bits_[0] |= 0x00000020u;
}
void Study::clear_has_filter()
{
    _has_bits_[0] &= ~0x00000020u;
}
void Study::clear_filter()
{
    if (filter_ != NULL)
        filter_->::variations::Study_Filter::Clear();
    clear_has_filter();
}
const ::variations::Study_Filter& Study::filter() const
{
    // @@protoc_insertion_point(field_get:variations.Study.filter)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return filter_ != NULL ? *filter_ : *default_instance().filter_;
#else
    return filter_ != NULL ? *filter_ : *default_instance_->filter_;
#endif
}
::variations::Study_Filter* Study::mutable_filter()
{
    set_has_filter();
    if (filter_ == NULL) {
        filter_ = new ::variations::Study_Filter;
    }
    // @@protoc_insertion_point(field_mutable:variations.Study.filter)
    return filter_;
}
::variations::Study_Filter* Study::release_filter()
{
    // @@protoc_insertion_point(field_release:variations.Study.filter)
    clear_has_filter();
    ::variations::Study_Filter* temp = filter_;
    filter_ = NULL;
    return temp;
}
void Study::set_allocated_filter(::variations::Study_Filter* filter)
{
    delete filter_;
    filter_ = filter;
    if (filter) {
        set_has_filter();
    } else {
        clear_has_filter();
    }
    // @@protoc_insertion_point(field_set_allocated:variations.Study.filter)
}

// optional uint32 randomization_seed = 11;
bool Study::has_randomization_seed() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void Study::set_has_randomization_seed()
{
    _has_bits_[0] |= 0x00000040u;
}
void Study::clear_has_randomization_seed()
{
    _has_bits_[0] &= ~0x00000040u;
}
void Study::clear_randomization_seed()
{
    randomization_seed_ = 0u;
    clear_has_randomization_seed();
}
::google::protobuf::uint32 Study::randomization_seed() const
{
    // @@protoc_insertion_point(field_get:variations.Study.randomization_seed)
    return randomization_seed_;
}
void Study::set_randomization_seed(::google::protobuf::uint32 value)
{
    set_has_randomization_seed();
    randomization_seed_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.randomization_seed)
}

// optional .variations.Study.ActivationType activation_type = 12;
bool Study::has_activation_type() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void Study::set_has_activation_type()
{
    _has_bits_[0] |= 0x00000080u;
}
void Study::clear_has_activation_type()
{
    _has_bits_[0] &= ~0x00000080u;
}
void Study::clear_activation_type()
{
    activation_type_ = 0;
    clear_has_activation_type();
}
::variations::Study_ActivationType Study::activation_type() const
{
    // @@protoc_insertion_point(field_get:variations.Study.activation_type)
    return static_cast<::variations::Study_ActivationType>(activation_type_);
}
void Study::set_activation_type(::variations::Study_ActivationType value)
{
    assert(::variations::Study_ActivationType_IsValid(value));
    set_has_activation_type();
    activation_type_ = value;
    // @@protoc_insertion_point(field_set:variations.Study.activation_type)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace variations

// @@protoc_insertion_point(global_scope)
