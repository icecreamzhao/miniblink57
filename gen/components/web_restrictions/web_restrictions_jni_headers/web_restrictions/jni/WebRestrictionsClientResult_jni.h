// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/components/webrestrictions/browser/WebRestrictionsClientResult

#ifndef org_chromium_components_webrestrictions_browser_WebRestrictionsClientResult_JNI
#define org_chromium_components_webrestrictions_browser_WebRestrictionsClientResult_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebRestrictionsClientResultClassPath[] = "org/chromium/components/webrestrictions/browser/WebRestrictionsClientResult";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebRestrictionsClientResult_clazz
    __attribute__((unused))
    = 0;
#define WebRestrictionsClientResult_clazz(env) base::android::LazyGetClass(env, kWebRestrictionsClientResultClassPath, &g_WebRestrictionsClientResult_clazz)

} // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_WebRestrictionsClientResult_shouldProceed = 0;
static jboolean Java_WebRestrictionsClientResult_shouldProceed(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClientResult_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClientResult_clazz(env),
        "shouldProceed",
        "("
        ")"
        "Z",
        &g_WebRestrictionsClientResult_shouldProceed);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebRestrictionsClientResult_getInt = 0;
static jint Java_WebRestrictionsClientResult_getInt(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper column)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClientResult_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClientResult_clazz(env),
        "getInt",
        "("
        "I"
        ")"
        "I",
        &g_WebRestrictionsClientResult_getInt);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id, as_jint(column));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebRestrictionsClientResult_getString = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_WebRestrictionsClientResult_getString(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper column)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClientResult_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClientResult_clazz(env),
        "getString",
        "("
        "I"
        ")"
        "Ljava/lang/String;",
        &g_WebRestrictionsClientResult_getString);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id, as_jint(column)));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_WebRestrictionsClientResult_getColumnName = 0;
static base::android::ScopedJavaLocalRef<jstring>
Java_WebRestrictionsClientResult_getColumnName(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper column)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClientResult_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClientResult_clazz(env),
        "getColumnName",
        "("
        "I"
        ")"
        "Ljava/lang/String;",
        &g_WebRestrictionsClientResult_getColumnName);

    jstring ret = static_cast<jstring>(env->CallObjectMethod(obj.obj(),
        method_id, as_jint(column)));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_WebRestrictionsClientResult_getColumnCount = 0;
static jint Java_WebRestrictionsClientResult_getColumnCount(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClientResult_clazz(env), 0);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClientResult_clazz(env),
        "getColumnCount",
        "("
        ")"
        "I",
        &g_WebRestrictionsClientResult_getColumnCount);

    jint ret = env->CallIntMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebRestrictionsClientResult_isString = 0;
static jboolean Java_WebRestrictionsClientResult_isString(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper column)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClientResult_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClientResult_clazz(env),
        "isString",
        "("
        "I"
        ")"
        "Z",
        &g_WebRestrictionsClientResult_isString);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(column));
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

#endif // org_chromium_components_webrestrictions_browser_WebRestrictionsClientResult_JNI
