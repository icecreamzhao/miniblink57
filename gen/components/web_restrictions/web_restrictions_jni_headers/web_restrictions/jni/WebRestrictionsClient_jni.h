// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/webrestrictions/browser/WebRestrictionsClient

#ifndef org_chromium_components_webrestrictions_browser_WebRestrictionsClient_JNI
#define org_chromium_components_webrestrictions_browser_WebRestrictionsClient_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebRestrictionsClientClassPath[] = "org/chromium/components/webrestrictions/browser/WebRestrictionsClient";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebRestrictionsClient_clazz __attribute__((unused)) = 0;
#define WebRestrictionsClient_clazz(env) base::android::LazyGetClass(env, kWebRestrictionsClientClassPath, &g_WebRestrictionsClient_clazz)

} // namespace

namespace web_restrictions {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_components_webrestrictions_browser_WebRestrictionsClient_nativeOnWebRestrictionsChanged(JNIEnv*
                                                                                                              env,
    jobject jcaller,
    jlong nativeWebRestrictionsClient)
{
    WebRestrictionsClient* native = reinterpret_cast<WebRestrictionsClient*>(nativeWebRestrictionsClient);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnWebRestrictionsChanged");
    return native->OnWebRestrictionsChanged(env,
        base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::subtle::AtomicWord g_WebRestrictionsClient_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebRestrictionsClient_create(JNIEnv* env, const base::android::JavaRefOrBare<jstring>& authority,
    jlong nativeProvider)
{
    CHECK_CLAZZ(env, WebRestrictionsClient_clazz(env),
        WebRestrictionsClient_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, WebRestrictionsClient_clazz(env),
        "create",
        "("
        "Ljava/lang/String;"
        "J"
        ")"
        "Lorg/chromium/components/webrestrictions/browser/WebRestrictionsClient;",
        &g_WebRestrictionsClient_create);

    jobject ret = env->CallStaticObjectMethod(WebRestrictionsClient_clazz(env),
        method_id, authority.obj(), nativeProvider);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebRestrictionsClient_supportsRequest = 0;
static jboolean Java_WebRestrictionsClient_supportsRequest(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClient_clazz(env),
        "supportsRequest",
        "("
        ")"
        "Z",
        &g_WebRestrictionsClient_supportsRequest);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebRestrictionsClient_onDestroy = 0;
static void Java_WebRestrictionsClient_onDestroy(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClient_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClient_clazz(env),
        "onDestroy",
        "("
        ")"
        "V",
        &g_WebRestrictionsClient_onDestroy);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebRestrictionsClient_shouldProceed = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebRestrictionsClient_shouldProceed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClient_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClient_clazz(env),
        "shouldProceed",
        "("
        "Ljava/lang/String;"
        ")"
        "Lorg/chromium/components/webrestrictions/browser/WebRestrictionsClientResult;",
        &g_WebRestrictionsClient_shouldProceed);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id, url.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_WebRestrictionsClient_requestPermission = 0;
static jboolean Java_WebRestrictionsClient_requestPermission(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebRestrictionsClient_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebRestrictionsClient_clazz(env),
        "requestPermission",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WebRestrictionsClient_requestPermission);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, url.obj());
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsWebRestrictionsClient[] = {
    { "nativeOnWebRestrictionsChanged",
        "("
        "J"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_components_webrestrictions_browser_WebRestrictionsClient_nativeOnWebRestrictionsChanged) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsWebRestrictionsClientSize = arraysize(kMethodsWebRestrictionsClient);

    if (env->RegisterNatives(WebRestrictionsClient_clazz(env),
            kMethodsWebRestrictionsClient,
            kMethodsWebRestrictionsClientSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, WebRestrictionsClient_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace web_restrictions

#endif // org_chromium_components_webrestrictions_browser_WebRestrictionsClient_JNI
