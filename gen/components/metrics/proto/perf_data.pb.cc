// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perf_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_perf_5fdata_2eproto()
{
    delete PerfDataProto::default_instance_;
    delete PerfDataProto_PerfEventAttr::default_instance_;
    delete PerfDataProto_PerfFileAttr::default_instance_;
    delete PerfDataProto_SampleInfo::default_instance_;
    delete PerfDataProto_CommEvent::default_instance_;
    delete PerfDataProto_MMapEvent::default_instance_;
    delete PerfDataProto_BranchStackEntry::default_instance_;
    delete PerfDataProto_SampleEvent::default_instance_;
    delete PerfDataProto_ForkEvent::default_instance_;
    delete PerfDataProto_EventHeader::default_instance_;
    delete PerfDataProto_PerfEvent::default_instance_;
    delete PerfDataProto_PerfEventStats::default_instance_;
    delete PerfDataProto_PerfBuildID::default_instance_;
    delete PerfDataProto_StringMetadata::default_instance_;
    delete PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_perf_5fdata_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_perf_5fdata_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    PerfDataProto::default_instance_ = new PerfDataProto();
    PerfDataProto_PerfEventAttr::default_instance_ = new PerfDataProto_PerfEventAttr();
    PerfDataProto_PerfFileAttr::default_instance_ = new PerfDataProto_PerfFileAttr();
    PerfDataProto_SampleInfo::default_instance_ = new PerfDataProto_SampleInfo();
    PerfDataProto_CommEvent::default_instance_ = new PerfDataProto_CommEvent();
    PerfDataProto_MMapEvent::default_instance_ = new PerfDataProto_MMapEvent();
    PerfDataProto_BranchStackEntry::default_instance_ = new PerfDataProto_BranchStackEntry();
    PerfDataProto_SampleEvent::default_instance_ = new PerfDataProto_SampleEvent();
    PerfDataProto_ForkEvent::default_instance_ = new PerfDataProto_ForkEvent();
    PerfDataProto_EventHeader::default_instance_ = new PerfDataProto_EventHeader();
    PerfDataProto_PerfEvent::default_instance_ = new PerfDataProto_PerfEvent();
    PerfDataProto_PerfEventStats::default_instance_ = new PerfDataProto_PerfEventStats();
    PerfDataProto_PerfBuildID::default_instance_ = new PerfDataProto_PerfBuildID();
    PerfDataProto_StringMetadata::default_instance_ = new PerfDataProto_StringMetadata();
    PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance_ = new PerfDataProto_StringMetadata_StringAndMd5sumPrefix();
    PerfDataProto::default_instance_->InitAsDefaultInstance();
    PerfDataProto_PerfEventAttr::default_instance_->InitAsDefaultInstance();
    PerfDataProto_PerfFileAttr::default_instance_->InitAsDefaultInstance();
    PerfDataProto_SampleInfo::default_instance_->InitAsDefaultInstance();
    PerfDataProto_CommEvent::default_instance_->InitAsDefaultInstance();
    PerfDataProto_MMapEvent::default_instance_->InitAsDefaultInstance();
    PerfDataProto_BranchStackEntry::default_instance_->InitAsDefaultInstance();
    PerfDataProto_SampleEvent::default_instance_->InitAsDefaultInstance();
    PerfDataProto_ForkEvent::default_instance_->InitAsDefaultInstance();
    PerfDataProto_EventHeader::default_instance_->InitAsDefaultInstance();
    PerfDataProto_PerfEvent::default_instance_->InitAsDefaultInstance();
    PerfDataProto_PerfEventStats::default_instance_->InitAsDefaultInstance();
    PerfDataProto_PerfBuildID::default_instance_->InitAsDefaultInstance();
    PerfDataProto_StringMetadata::default_instance_->InitAsDefaultInstance();
    PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perf_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_perf_5fdata_2eproto_once_);
void protobuf_AddDesc_perf_5fdata_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_perf_5fdata_2eproto_once_,
        &protobuf_AddDesc_perf_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perf_5fdata_2eproto {
    StaticDescriptorInitializer_perf_5fdata_2eproto()
    {
        protobuf_AddDesc_perf_5fdata_2eproto();
    }
} static_descriptor_initializer_perf_5fdata_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForPerfDataProto(
    PerfDataProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForPerfDataProto_PerfEventAttr(
    PerfDataProto_PerfEventAttr* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEventAttr::kTypeFieldNumber;
const int PerfDataProto_PerfEventAttr::kSizeFieldNumber;
const int PerfDataProto_PerfEventAttr::kConfigFieldNumber;
const int PerfDataProto_PerfEventAttr::kSamplePeriodFieldNumber;
const int PerfDataProto_PerfEventAttr::kSampleFreqFieldNumber;
const int PerfDataProto_PerfEventAttr::kSampleTypeFieldNumber;
const int PerfDataProto_PerfEventAttr::kReadFormatFieldNumber;
const int PerfDataProto_PerfEventAttr::kDisabledFieldNumber;
const int PerfDataProto_PerfEventAttr::kInheritFieldNumber;
const int PerfDataProto_PerfEventAttr::kPinnedFieldNumber;
const int PerfDataProto_PerfEventAttr::kExclusiveFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeUserFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeKernelFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeHvFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeIdleFieldNumber;
const int PerfDataProto_PerfEventAttr::kMmapFieldNumber;
const int PerfDataProto_PerfEventAttr::kCommFieldNumber;
const int PerfDataProto_PerfEventAttr::kFreqFieldNumber;
const int PerfDataProto_PerfEventAttr::kInheritStatFieldNumber;
const int PerfDataProto_PerfEventAttr::kEnableOnExecFieldNumber;
const int PerfDataProto_PerfEventAttr::kTaskFieldNumber;
const int PerfDataProto_PerfEventAttr::kWatermarkFieldNumber;
const int PerfDataProto_PerfEventAttr::kPreciseIpFieldNumber;
const int PerfDataProto_PerfEventAttr::kMmapDataFieldNumber;
const int PerfDataProto_PerfEventAttr::kSampleIdAllFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeHostFieldNumber;
const int PerfDataProto_PerfEventAttr::kExcludeGuestFieldNumber;
const int PerfDataProto_PerfEventAttr::kWakeupEventsFieldNumber;
const int PerfDataProto_PerfEventAttr::kWakeupWatermarkFieldNumber;
const int PerfDataProto_PerfEventAttr::kBpTypeFieldNumber;
const int PerfDataProto_PerfEventAttr::kBpAddrFieldNumber;
const int PerfDataProto_PerfEventAttr::kConfig1FieldNumber;
const int PerfDataProto_PerfEventAttr::kBpLenFieldNumber;
const int PerfDataProto_PerfEventAttr::kConfig2FieldNumber;
const int PerfDataProto_PerfEventAttr::kBranchSampleTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEventAttr)
}

void PerfDataProto_PerfEventAttr::InitAsDefaultInstance()
{
}

PerfDataProto_PerfEventAttr::PerfDataProto_PerfEventAttr(const PerfDataProto_PerfEventAttr& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventAttr)
}

void PerfDataProto_PerfEventAttr::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = 0u;
    size_ = 0u;
    config_ = GOOGLE_ULONGLONG(0);
    sample_period_ = GOOGLE_ULONGLONG(0);
    sample_freq_ = GOOGLE_ULONGLONG(0);
    sample_type_ = GOOGLE_ULONGLONG(0);
    read_format_ = GOOGLE_ULONGLONG(0);
    disabled_ = false;
    inherit_ = false;
    pinned_ = false;
    exclusive_ = false;
    exclude_user_ = false;
    exclude_kernel_ = false;
    exclude_hv_ = false;
    exclude_idle_ = false;
    mmap_ = false;
    comm_ = false;
    freq_ = false;
    inherit_stat_ = false;
    enable_on_exec_ = false;
    task_ = false;
    watermark_ = false;
    precise_ip_ = 0u;
    mmap_data_ = false;
    sample_id_all_ = false;
    exclude_host_ = false;
    exclude_guest_ = false;
    wakeup_events_ = 0u;
    wakeup_watermark_ = 0u;
    bp_type_ = 0u;
    bp_addr_ = GOOGLE_ULONGLONG(0);
    config1_ = GOOGLE_ULONGLONG(0);
    bp_len_ = GOOGLE_ULONGLONG(0);
    config2_ = GOOGLE_ULONGLONG(0);
    branch_sample_type_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_PerfEventAttr::~PerfDataProto_PerfEventAttr()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventAttr)
    SharedDtor();
}

void PerfDataProto_PerfEventAttr::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_PerfEventAttr::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_PerfEventAttr& PerfDataProto_PerfEventAttr::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_PerfEventAttr* PerfDataProto_PerfEventAttr::default_instance_ = NULL;

PerfDataProto_PerfEventAttr* PerfDataProto_PerfEventAttr::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_PerfEventAttr* n = new PerfDataProto_PerfEventAttr;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_PerfEventAttr::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventAttr)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                 \
    _Pragma("clang diagnostic push")                                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_PerfEventAttr, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_PerfEventAttr*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(type_, disabled_);
    }
    if (_has_bits_[8 / 32] & 65280u) {
        ZR_(inherit_, mmap_);
    }
    if (_has_bits_[16 / 32] & 16711680u) {
        ZR_(comm_, precise_ip_);
    }
    if (_has_bits_[24 / 32] & 4278190080u) {
        ZR_(sample_id_all_, config1_);
        bp_type_ = 0u;
    }
    ZR_(bp_len_, branch_sample_type_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_PerfEventAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_PerfEventAttr, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEventAttr)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 type = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &type_)));
                set_has_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_size;
            break;
        }

        // optional uint32 size = 2;
        case 2: {
            if (tag == 16) {
            parse_size:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &size_)));
                set_has_size();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_config;
            break;
        }

        // optional uint64 config = 3;
        case 3: {
            if (tag == 24) {
            parse_config:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &config_)));
                set_has_config();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_sample_period;
            break;
        }

        // optional uint64 sample_period = 4;
        case 4: {
            if (tag == 32) {
            parse_sample_period:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &sample_period_)));
                set_has_sample_period();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_sample_freq;
            break;
        }

        // optional uint64 sample_freq = 5;
        case 5: {
            if (tag == 40) {
            parse_sample_freq:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &sample_freq_)));
                set_has_sample_freq();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_sample_type;
            break;
        }

        // optional uint64 sample_type = 6;
        case 6: {
            if (tag == 48) {
            parse_sample_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &sample_type_)));
                set_has_sample_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_read_format;
            break;
        }

        // optional uint64 read_format = 7;
        case 7: {
            if (tag == 56) {
            parse_read_format:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &read_format_)));
                set_has_read_format();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_disabled;
            break;
        }

        // optional bool disabled = 8;
        case 8: {
            if (tag == 64) {
            parse_disabled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &disabled_)));
                set_has_disabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_inherit;
            break;
        }

        // optional bool inherit = 9;
        case 9: {
            if (tag == 72) {
            parse_inherit:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &inherit_)));
                set_has_inherit();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(80))
                goto parse_pinned;
            break;
        }

        // optional bool pinned = 10;
        case 10: {
            if (tag == 80) {
            parse_pinned:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &pinned_)));
                set_has_pinned();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_exclusive;
            break;
        }

        // optional bool exclusive = 11;
        case 11: {
            if (tag == 88) {
            parse_exclusive:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclusive_)));
                set_has_exclusive();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_exclude_user;
            break;
        }

        // optional bool exclude_user = 12;
        case 12: {
            if (tag == 96) {
            parse_exclude_user:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclude_user_)));
                set_has_exclude_user();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(104))
                goto parse_exclude_kernel;
            break;
        }

        // optional bool exclude_kernel = 13;
        case 13: {
            if (tag == 104) {
            parse_exclude_kernel:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclude_kernel_)));
                set_has_exclude_kernel();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(112))
                goto parse_exclude_hv;
            break;
        }

        // optional bool exclude_hv = 14;
        case 14: {
            if (tag == 112) {
            parse_exclude_hv:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclude_hv_)));
                set_has_exclude_hv();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_exclude_idle;
            break;
        }

        // optional bool exclude_idle = 15;
        case 15: {
            if (tag == 120) {
            parse_exclude_idle:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclude_idle_)));
                set_has_exclude_idle();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_mmap;
            break;
        }

        // optional bool mmap = 16;
        case 16: {
            if (tag == 128) {
            parse_mmap:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &mmap_)));
                set_has_mmap();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(136))
                goto parse_comm;
            break;
        }

        // optional bool comm = 17;
        case 17: {
            if (tag == 136) {
            parse_comm:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &comm_)));
                set_has_comm();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_freq;
            break;
        }

        // optional bool freq = 18;
        case 18: {
            if (tag == 144) {
            parse_freq:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &freq_)));
                set_has_freq();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(152))
                goto parse_inherit_stat;
            break;
        }

        // optional bool inherit_stat = 19;
        case 19: {
            if (tag == 152) {
            parse_inherit_stat:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &inherit_stat_)));
                set_has_inherit_stat();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(160))
                goto parse_enable_on_exec;
            break;
        }

        // optional bool enable_on_exec = 20;
        case 20: {
            if (tag == 160) {
            parse_enable_on_exec:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enable_on_exec_)));
                set_has_enable_on_exec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(168))
                goto parse_task;
            break;
        }

        // optional bool task = 21;
        case 21: {
            if (tag == 168) {
            parse_task:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &task_)));
                set_has_task();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(176))
                goto parse_watermark;
            break;
        }

        // optional bool watermark = 22;
        case 22: {
            if (tag == 176) {
            parse_watermark:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &watermark_)));
                set_has_watermark();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(184))
                goto parse_precise_ip;
            break;
        }

        // optional uint32 precise_ip = 23;
        case 23: {
            if (tag == 184) {
            parse_precise_ip:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &precise_ip_)));
                set_has_precise_ip();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(192))
                goto parse_mmap_data;
            break;
        }

        // optional bool mmap_data = 24;
        case 24: {
            if (tag == 192) {
            parse_mmap_data:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &mmap_data_)));
                set_has_mmap_data();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(200))
                goto parse_sample_id_all;
            break;
        }

        // optional bool sample_id_all = 25;
        case 25: {
            if (tag == 200) {
            parse_sample_id_all:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &sample_id_all_)));
                set_has_sample_id_all();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(208))
                goto parse_exclude_host;
            break;
        }

        // optional bool exclude_host = 26;
        case 26: {
            if (tag == 208) {
            parse_exclude_host:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclude_host_)));
                set_has_exclude_host();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(216))
                goto parse_exclude_guest;
            break;
        }

        // optional bool exclude_guest = 27;
        case 27: {
            if (tag == 216) {
            parse_exclude_guest:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &exclude_guest_)));
                set_has_exclude_guest();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(224))
                goto parse_wakeup_events;
            break;
        }

        // optional uint32 wakeup_events = 28;
        case 28: {
            if (tag == 224) {
            parse_wakeup_events:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &wakeup_events_)));
                set_has_wakeup_events();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(232))
                goto parse_wakeup_watermark;
            break;
        }

        // optional uint32 wakeup_watermark = 29;
        case 29: {
            if (tag == 232) {
            parse_wakeup_watermark:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &wakeup_watermark_)));
                set_has_wakeup_watermark();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(240))
                goto parse_bp_type;
            break;
        }

        // optional uint32 bp_type = 30;
        case 30: {
            if (tag == 240) {
            parse_bp_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &bp_type_)));
                set_has_bp_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(248))
                goto parse_bp_addr;
            break;
        }

        // optional uint64 bp_addr = 31;
        case 31: {
            if (tag == 248) {
            parse_bp_addr:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &bp_addr_)));
                set_has_bp_addr();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(256))
                goto parse_config1;
            break;
        }

        // optional uint64 config1 = 32;
        case 32: {
            if (tag == 256) {
            parse_config1:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &config1_)));
                set_has_config1();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(264))
                goto parse_bp_len;
            break;
        }

        // optional uint64 bp_len = 33;
        case 33: {
            if (tag == 264) {
            parse_bp_len:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &bp_len_)));
                set_has_bp_len();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(272))
                goto parse_config2;
            break;
        }

        // optional uint64 config2 = 34;
        case 34: {
            if (tag == 272) {
            parse_config2:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &config2_)));
                set_has_config2();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(280))
                goto parse_branch_sample_type;
            break;
        }

        // optional uint64 branch_sample_type = 35;
        case 35: {
            if (tag == 280) {
            parse_branch_sample_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &branch_sample_type_)));
                set_has_branch_sample_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEventAttr)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEventAttr)
    return false;
#undef DO_
}

void PerfDataProto_PerfEventAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEventAttr)
    // optional uint32 type = 1;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
    }

    // optional uint32 size = 2;
    if (has_size()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
    }

    // optional uint64 config = 3;
    if (has_config()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->config(), output);
    }

    // optional uint64 sample_period = 4;
    if (has_sample_period()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sample_period(), output);
    }

    // optional uint64 sample_freq = 5;
    if (has_sample_freq()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sample_freq(), output);
    }

    // optional uint64 sample_type = 6;
    if (has_sample_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sample_type(), output);
    }

    // optional uint64 read_format = 7;
    if (has_read_format()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->read_format(), output);
    }

    // optional bool disabled = 8;
    if (has_disabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->disabled(), output);
    }

    // optional bool inherit = 9;
    if (has_inherit()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->inherit(), output);
    }

    // optional bool pinned = 10;
    if (has_pinned()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->pinned(), output);
    }

    // optional bool exclusive = 11;
    if (has_exclusive()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->exclusive(), output);
    }

    // optional bool exclude_user = 12;
    if (has_exclude_user()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->exclude_user(), output);
    }

    // optional bool exclude_kernel = 13;
    if (has_exclude_kernel()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->exclude_kernel(), output);
    }

    // optional bool exclude_hv = 14;
    if (has_exclude_hv()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->exclude_hv(), output);
    }

    // optional bool exclude_idle = 15;
    if (has_exclude_idle()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->exclude_idle(), output);
    }

    // optional bool mmap = 16;
    if (has_mmap()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->mmap(), output);
    }

    // optional bool comm = 17;
    if (has_comm()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->comm(), output);
    }

    // optional bool freq = 18;
    if (has_freq()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->freq(), output);
    }

    // optional bool inherit_stat = 19;
    if (has_inherit_stat()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->inherit_stat(), output);
    }

    // optional bool enable_on_exec = 20;
    if (has_enable_on_exec()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->enable_on_exec(), output);
    }

    // optional bool task = 21;
    if (has_task()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->task(), output);
    }

    // optional bool watermark = 22;
    if (has_watermark()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->watermark(), output);
    }

    // optional uint32 precise_ip = 23;
    if (has_precise_ip()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->precise_ip(), output);
    }

    // optional bool mmap_data = 24;
    if (has_mmap_data()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->mmap_data(), output);
    }

    // optional bool sample_id_all = 25;
    if (has_sample_id_all()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->sample_id_all(), output);
    }

    // optional bool exclude_host = 26;
    if (has_exclude_host()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->exclude_host(), output);
    }

    // optional bool exclude_guest = 27;
    if (has_exclude_guest()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->exclude_guest(), output);
    }

    // optional uint32 wakeup_events = 28;
    if (has_wakeup_events()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->wakeup_events(), output);
    }

    // optional uint32 wakeup_watermark = 29;
    if (has_wakeup_watermark()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->wakeup_watermark(), output);
    }

    // optional uint32 bp_type = 30;
    if (has_bp_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->bp_type(), output);
    }

    // optional uint64 bp_addr = 31;
    if (has_bp_addr()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->bp_addr(), output);
    }

    // optional uint64 config1 = 32;
    if (has_config1()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->config1(), output);
    }

    // optional uint64 bp_len = 33;
    if (has_bp_len()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->bp_len(), output);
    }

    // optional uint64 config2 = 34;
    if (has_config2()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->config2(), output);
    }

    // optional uint64 branch_sample_type = 35;
    if (has_branch_sample_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->branch_sample_type(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEventAttr)
}

int PerfDataProto_PerfEventAttr::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventAttr)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional uint32 type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->type());
        }

        // optional uint32 size = 2;
        if (has_size()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->size());
        }

        // optional uint64 config = 3;
        if (has_config()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->config());
        }

        // optional uint64 sample_period = 4;
        if (has_sample_period()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->sample_period());
        }

        // optional uint64 sample_freq = 5;
        if (has_sample_freq()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->sample_freq());
        }

        // optional uint64 sample_type = 6;
        if (has_sample_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->sample_type());
        }

        // optional uint64 read_format = 7;
        if (has_read_format()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->read_format());
        }

        // optional bool disabled = 8;
        if (has_disabled()) {
            total_size += 1 + 1;
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        // optional bool inherit = 9;
        if (has_inherit()) {
            total_size += 1 + 1;
        }

        // optional bool pinned = 10;
        if (has_pinned()) {
            total_size += 1 + 1;
        }

        // optional bool exclusive = 11;
        if (has_exclusive()) {
            total_size += 1 + 1;
        }

        // optional bool exclude_user = 12;
        if (has_exclude_user()) {
            total_size += 1 + 1;
        }

        // optional bool exclude_kernel = 13;
        if (has_exclude_kernel()) {
            total_size += 1 + 1;
        }

        // optional bool exclude_hv = 14;
        if (has_exclude_hv()) {
            total_size += 1 + 1;
        }

        // optional bool exclude_idle = 15;
        if (has_exclude_idle()) {
            total_size += 1 + 1;
        }

        // optional bool mmap = 16;
        if (has_mmap()) {
            total_size += 2 + 1;
        }
    }
    if (_has_bits_[16 / 32] & 16711680u) {
        // optional bool comm = 17;
        if (has_comm()) {
            total_size += 2 + 1;
        }

        // optional bool freq = 18;
        if (has_freq()) {
            total_size += 2 + 1;
        }

        // optional bool inherit_stat = 19;
        if (has_inherit_stat()) {
            total_size += 2 + 1;
        }

        // optional bool enable_on_exec = 20;
        if (has_enable_on_exec()) {
            total_size += 2 + 1;
        }

        // optional bool task = 21;
        if (has_task()) {
            total_size += 2 + 1;
        }

        // optional bool watermark = 22;
        if (has_watermark()) {
            total_size += 2 + 1;
        }

        // optional uint32 precise_ip = 23;
        if (has_precise_ip()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->precise_ip());
        }

        // optional bool mmap_data = 24;
        if (has_mmap_data()) {
            total_size += 2 + 1;
        }
    }
    if (_has_bits_[24 / 32] & 4278190080u) {
        // optional bool sample_id_all = 25;
        if (has_sample_id_all()) {
            total_size += 2 + 1;
        }

        // optional bool exclude_host = 26;
        if (has_exclude_host()) {
            total_size += 2 + 1;
        }

        // optional bool exclude_guest = 27;
        if (has_exclude_guest()) {
            total_size += 2 + 1;
        }

        // optional uint32 wakeup_events = 28;
        if (has_wakeup_events()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->wakeup_events());
        }

        // optional uint32 wakeup_watermark = 29;
        if (has_wakeup_watermark()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->wakeup_watermark());
        }

        // optional uint32 bp_type = 30;
        if (has_bp_type()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->bp_type());
        }

        // optional uint64 bp_addr = 31;
        if (has_bp_addr()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->bp_addr());
        }

        // optional uint64 config1 = 32;
        if (has_config1()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->config1());
        }
    }
    if (_has_bits_[32 / 32] & 7u) {
        // optional uint64 bp_len = 33;
        if (has_bp_len()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->bp_len());
        }

        // optional uint64 config2 = 34;
        if (has_config2()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->config2());
        }

        // optional uint64 branch_sample_type = 35;
        if (has_branch_sample_type()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->branch_sample_type());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_PerfEventAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEventAttr*>(&from));
}

void PerfDataProto_PerfEventAttr::MergeFrom(const PerfDataProto_PerfEventAttr& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventAttr)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_size()) {
            set_size(from.size());
        }
        if (from.has_config()) {
            set_config(from.config());
        }
        if (from.has_sample_period()) {
            set_sample_period(from.sample_period());
        }
        if (from.has_sample_freq()) {
            set_sample_freq(from.sample_freq());
        }
        if (from.has_sample_type()) {
            set_sample_type(from.sample_type());
        }
        if (from.has_read_format()) {
            set_read_format(from.read_format());
        }
        if (from.has_disabled()) {
            set_disabled(from.disabled());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_inherit()) {
            set_inherit(from.inherit());
        }
        if (from.has_pinned()) {
            set_pinned(from.pinned());
        }
        if (from.has_exclusive()) {
            set_exclusive(from.exclusive());
        }
        if (from.has_exclude_user()) {
            set_exclude_user(from.exclude_user());
        }
        if (from.has_exclude_kernel()) {
            set_exclude_kernel(from.exclude_kernel());
        }
        if (from.has_exclude_hv()) {
            set_exclude_hv(from.exclude_hv());
        }
        if (from.has_exclude_idle()) {
            set_exclude_idle(from.exclude_idle());
        }
        if (from.has_mmap()) {
            set_mmap(from.mmap());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_comm()) {
            set_comm(from.comm());
        }
        if (from.has_freq()) {
            set_freq(from.freq());
        }
        if (from.has_inherit_stat()) {
            set_inherit_stat(from.inherit_stat());
        }
        if (from.has_enable_on_exec()) {
            set_enable_on_exec(from.enable_on_exec());
        }
        if (from.has_task()) {
            set_task(from.task());
        }
        if (from.has_watermark()) {
            set_watermark(from.watermark());
        }
        if (from.has_precise_ip()) {
            set_precise_ip(from.precise_ip());
        }
        if (from.has_mmap_data()) {
            set_mmap_data(from.mmap_data());
        }
    }
    if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
        if (from.has_sample_id_all()) {
            set_sample_id_all(from.sample_id_all());
        }
        if (from.has_exclude_host()) {
            set_exclude_host(from.exclude_host());
        }
        if (from.has_exclude_guest()) {
            set_exclude_guest(from.exclude_guest());
        }
        if (from.has_wakeup_events()) {
            set_wakeup_events(from.wakeup_events());
        }
        if (from.has_wakeup_watermark()) {
            set_wakeup_watermark(from.wakeup_watermark());
        }
        if (from.has_bp_type()) {
            set_bp_type(from.bp_type());
        }
        if (from.has_bp_addr()) {
            set_bp_addr(from.bp_addr());
        }
        if (from.has_config1()) {
            set_config1(from.config1());
        }
    }
    if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
        if (from.has_bp_len()) {
            set_bp_len(from.bp_len());
        }
        if (from.has_config2()) {
            set_config2(from.config2());
        }
        if (from.has_branch_sample_type()) {
            set_branch_sample_type(from.branch_sample_type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_PerfEventAttr::CopyFrom(const PerfDataProto_PerfEventAttr& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventAttr)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_PerfEventAttr::IsInitialized() const
{

    return true;
}

void PerfDataProto_PerfEventAttr::Swap(PerfDataProto_PerfEventAttr* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_PerfEventAttr::InternalSwap(PerfDataProto_PerfEventAttr* other)
{
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(config_, other->config_);
    std::swap(sample_period_, other->sample_period_);
    std::swap(sample_freq_, other->sample_freq_);
    std::swap(sample_type_, other->sample_type_);
    std::swap(read_format_, other->read_format_);
    std::swap(disabled_, other->disabled_);
    std::swap(inherit_, other->inherit_);
    std::swap(pinned_, other->pinned_);
    std::swap(exclusive_, other->exclusive_);
    std::swap(exclude_user_, other->exclude_user_);
    std::swap(exclude_kernel_, other->exclude_kernel_);
    std::swap(exclude_hv_, other->exclude_hv_);
    std::swap(exclude_idle_, other->exclude_idle_);
    std::swap(mmap_, other->mmap_);
    std::swap(comm_, other->comm_);
    std::swap(freq_, other->freq_);
    std::swap(inherit_stat_, other->inherit_stat_);
    std::swap(enable_on_exec_, other->enable_on_exec_);
    std::swap(task_, other->task_);
    std::swap(watermark_, other->watermark_);
    std::swap(precise_ip_, other->precise_ip_);
    std::swap(mmap_data_, other->mmap_data_);
    std::swap(sample_id_all_, other->sample_id_all_);
    std::swap(exclude_host_, other->exclude_host_);
    std::swap(exclude_guest_, other->exclude_guest_);
    std::swap(wakeup_events_, other->wakeup_events_);
    std::swap(wakeup_watermark_, other->wakeup_watermark_);
    std::swap(bp_type_, other->bp_type_);
    std::swap(bp_addr_, other->bp_addr_);
    std::swap(config1_, other->config1_);
    std::swap(bp_len_, other->bp_len_);
    std::swap(config2_, other->config2_);
    std::swap(branch_sample_type_, other->branch_sample_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_PerfEventAttr::GetTypeName() const
{
    return "metrics.PerfDataProto.PerfEventAttr";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_PerfFileAttr(
    PerfDataProto_PerfFileAttr* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfFileAttr::kAttrFieldNumber;
const int PerfDataProto_PerfFileAttr::kIdsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfFileAttr)
}

void PerfDataProto_PerfFileAttr::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    attr_ = const_cast<::metrics::PerfDataProto_PerfEventAttr*>(
        ::metrics::PerfDataProto_PerfEventAttr::internal_default_instance());
#else
    attr_ = const_cast<::metrics::PerfDataProto_PerfEventAttr*>(&::metrics::PerfDataProto_PerfEventAttr::default_instance());
#endif
}

PerfDataProto_PerfFileAttr::PerfDataProto_PerfFileAttr(const PerfDataProto_PerfFileAttr& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfFileAttr)
}

void PerfDataProto_PerfFileAttr::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    attr_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_PerfFileAttr::~PerfDataProto_PerfFileAttr()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfFileAttr)
    SharedDtor();
}

void PerfDataProto_PerfFileAttr::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete attr_;
    }
}

void PerfDataProto_PerfFileAttr::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_PerfFileAttr& PerfDataProto_PerfFileAttr::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_PerfFileAttr* PerfDataProto_PerfFileAttr::default_instance_ = NULL;

PerfDataProto_PerfFileAttr* PerfDataProto_PerfFileAttr::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_PerfFileAttr* n = new PerfDataProto_PerfFileAttr;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_PerfFileAttr::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfFileAttr)
    if (has_attr()) {
        if (attr_ != NULL)
            attr_->::metrics::PerfDataProto_PerfEventAttr::Clear();
    }
    ids_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_PerfFileAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_PerfFileAttr, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfFileAttr)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_attr()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_ids;
            break;
        }

        // repeated uint64 ids = 2;
        case 2: {
            if (tag == 16) {
            parse_ids:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    1, 16, input, this->mutable_ids())));
            } else if (tag == 18) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, this->mutable_ids())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_ids;
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfFileAttr)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfFileAttr)
    return false;
#undef DO_
}

void PerfDataProto_PerfFileAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfFileAttr)
    // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
    if (has_attr()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->attr_, output);
    }

    // repeated uint64 ids = 2;
    for (int i = 0; i < this->ids_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(
            2, this->ids(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfFileAttr)
}

int PerfDataProto_PerfFileAttr::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfFileAttr)
    int total_size = 0;

    // optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
    if (has_attr()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->attr_);
    }

    // repeated uint64 ids = 2;
    {
        int data_size = 0;
        for (int i = 0; i < this->ids_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                UInt64Size(this->ids(i));
        }
        total_size += 1 * this->ids_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_PerfFileAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfFileAttr*>(&from));
}

void PerfDataProto_PerfFileAttr::MergeFrom(const PerfDataProto_PerfFileAttr& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfFileAttr)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    ids_.MergeFrom(from.ids_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_attr()) {
            mutable_attr()->::metrics::PerfDataProto_PerfEventAttr::MergeFrom(from.attr());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_PerfFileAttr::CopyFrom(const PerfDataProto_PerfFileAttr& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfFileAttr)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_PerfFileAttr::IsInitialized() const
{

    return true;
}

void PerfDataProto_PerfFileAttr::Swap(PerfDataProto_PerfFileAttr* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_PerfFileAttr::InternalSwap(PerfDataProto_PerfFileAttr* other)
{
    std::swap(attr_, other->attr_);
    ids_.UnsafeArenaSwap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_PerfFileAttr::GetTypeName() const
{
    return "metrics.PerfDataProto.PerfFileAttr";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_SampleInfo(
    PerfDataProto_SampleInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_SampleInfo::kPidFieldNumber;
const int PerfDataProto_SampleInfo::kTidFieldNumber;
const int PerfDataProto_SampleInfo::kSampleTimeNsFieldNumber;
const int PerfDataProto_SampleInfo::kIdFieldNumber;
const int PerfDataProto_SampleInfo::kCpuFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_SampleInfo::PerfDataProto_SampleInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.SampleInfo)
}

void PerfDataProto_SampleInfo::InitAsDefaultInstance()
{
}

PerfDataProto_SampleInfo::PerfDataProto_SampleInfo(const PerfDataProto_SampleInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.SampleInfo)
}

void PerfDataProto_SampleInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pid_ = 0u;
    tid_ = 0u;
    sample_time_ns_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
    cpu_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_SampleInfo::~PerfDataProto_SampleInfo()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.SampleInfo)
    SharedDtor();
}

void PerfDataProto_SampleInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_SampleInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_SampleInfo& PerfDataProto_SampleInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_SampleInfo* PerfDataProto_SampleInfo::default_instance_ = NULL;

PerfDataProto_SampleInfo* PerfDataProto_SampleInfo::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_SampleInfo* n = new PerfDataProto_SampleInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_SampleInfo::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.SampleInfo)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                              \
    _Pragma("clang diagnostic push")                                                                               \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_SampleInfo, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_SampleInfo*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(pid_, cpu_);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_SampleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_SampleInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.SampleInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 pid = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &pid_)));
                set_has_pid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_tid;
            break;
        }

        // optional uint32 tid = 2;
        case 2: {
            if (tag == 16) {
            parse_tid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &tid_)));
                set_has_tid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_sample_time_ns;
            break;
        }

        // optional uint64 sample_time_ns = 3;
        case 3: {
            if (tag == 24) {
            parse_sample_time_ns:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &sample_time_ns_)));
                set_has_sample_time_ns();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_id;
            break;
        }

        // optional uint64 id = 4;
        case 4: {
            if (tag == 32) {
            parse_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &id_)));
                set_has_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_cpu;
            break;
        }

        // optional uint32 cpu = 5;
        case 5: {
            if (tag == 40) {
            parse_cpu:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &cpu_)));
                set_has_cpu();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.SampleInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.SampleInfo)
    return false;
#undef DO_
}

void PerfDataProto_SampleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.SampleInfo)
    // optional uint32 pid = 1;
    if (has_pid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
    }

    // optional uint64 sample_time_ns = 3;
    if (has_sample_time_ns()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sample_time_ns(), output);
    }

    // optional uint64 id = 4;
    if (has_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
    }

    // optional uint32 cpu = 5;
    if (has_cpu()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cpu(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.SampleInfo)
}

int PerfDataProto_SampleInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.SampleInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional uint32 pid = 1;
        if (has_pid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->pid());
        }

        // optional uint32 tid = 2;
        if (has_tid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->tid());
        }

        // optional uint64 sample_time_ns = 3;
        if (has_sample_time_ns()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->sample_time_ns());
        }

        // optional uint64 id = 4;
        if (has_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->id());
        }

        // optional uint32 cpu = 5;
        if (has_cpu()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->cpu());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_SampleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_SampleInfo*>(&from));
}

void PerfDataProto_SampleInfo::MergeFrom(const PerfDataProto_SampleInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.SampleInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_pid()) {
            set_pid(from.pid());
        }
        if (from.has_tid()) {
            set_tid(from.tid());
        }
        if (from.has_sample_time_ns()) {
            set_sample_time_ns(from.sample_time_ns());
        }
        if (from.has_id()) {
            set_id(from.id());
        }
        if (from.has_cpu()) {
            set_cpu(from.cpu());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_SampleInfo::CopyFrom(const PerfDataProto_SampleInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.SampleInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_SampleInfo::IsInitialized() const
{

    return true;
}

void PerfDataProto_SampleInfo::Swap(PerfDataProto_SampleInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_SampleInfo::InternalSwap(PerfDataProto_SampleInfo* other)
{
    std::swap(pid_, other->pid_);
    std::swap(tid_, other->tid_);
    std::swap(sample_time_ns_, other->sample_time_ns_);
    std::swap(id_, other->id_);
    std::swap(cpu_, other->cpu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_SampleInfo::GetTypeName() const
{
    return "metrics.PerfDataProto.SampleInfo";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_CommEvent(
    PerfDataProto_CommEvent* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_CommEvent::kPidFieldNumber;
const int PerfDataProto_CommEvent::kTidFieldNumber;
const int PerfDataProto_CommEvent::kCommMd5PrefixFieldNumber;
const int PerfDataProto_CommEvent::kSampleTimeFieldNumber;
const int PerfDataProto_CommEvent::kSampleInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_CommEvent::PerfDataProto_CommEvent()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.CommEvent)
}

void PerfDataProto_CommEvent::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    sample_info_ = const_cast<::metrics::PerfDataProto_SampleInfo*>(
        ::metrics::PerfDataProto_SampleInfo::internal_default_instance());
#else
    sample_info_ = const_cast<::metrics::PerfDataProto_SampleInfo*>(&::metrics::PerfDataProto_SampleInfo::default_instance());
#endif
}

PerfDataProto_CommEvent::PerfDataProto_CommEvent(const PerfDataProto_CommEvent& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.CommEvent)
}

void PerfDataProto_CommEvent::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pid_ = 0u;
    tid_ = 0u;
    comm_md5_prefix_ = GOOGLE_ULONGLONG(0);
    sample_time_ = GOOGLE_ULONGLONG(0);
    sample_info_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_CommEvent::~PerfDataProto_CommEvent()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.CommEvent)
    SharedDtor();
}

void PerfDataProto_CommEvent::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete sample_info_;
    }
}

void PerfDataProto_CommEvent::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_CommEvent& PerfDataProto_CommEvent::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_CommEvent* PerfDataProto_CommEvent::default_instance_ = NULL;

PerfDataProto_CommEvent* PerfDataProto_CommEvent::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_CommEvent* n = new PerfDataProto_CommEvent;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_CommEvent::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.CommEvent)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                             \
    _Pragma("clang diagnostic push")                                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_CommEvent, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_CommEvent*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(pid_, sample_time_);
        if (has_sample_info()) {
            if (sample_info_ != NULL)
                sample_info_->::metrics::PerfDataProto_SampleInfo::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_CommEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_CommEvent, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.CommEvent)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 pid = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &pid_)));
                set_has_pid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_tid;
            break;
        }

        // optional uint32 tid = 2;
        case 2: {
            if (tag == 16) {
            parse_tid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &tid_)));
                set_has_tid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_comm_md5_prefix;
            break;
        }

        // optional uint64 comm_md5_prefix = 4;
        case 4: {
            if (tag == 32) {
            parse_comm_md5_prefix:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &comm_md5_prefix_)));
                set_has_comm_md5_prefix();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_sample_time;
            break;
        }

        // optional uint64 sample_time = 5 [deprecated = true];
        case 5: {
            if (tag == 40) {
            parse_sample_time:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &sample_time_)));
                set_has_sample_time();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_sample_info;
            break;
        }

        // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
        case 6: {
            if (tag == 50) {
            parse_sample_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_sample_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.CommEvent)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.CommEvent)
    return false;
#undef DO_
}

void PerfDataProto_CommEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.CommEvent)
    // optional uint32 pid = 1;
    if (has_pid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
    }

    // optional uint64 comm_md5_prefix = 4;
    if (has_comm_md5_prefix()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->comm_md5_prefix(), output);
    }

    // optional uint64 sample_time = 5 [deprecated = true];
    if (has_sample_time()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sample_time(), output);
    }

    // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
    if (has_sample_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *this->sample_info_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.CommEvent)
}

int PerfDataProto_CommEvent::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.CommEvent)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional uint32 pid = 1;
        if (has_pid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->pid());
        }

        // optional uint32 tid = 2;
        if (has_tid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->tid());
        }

        // optional uint64 comm_md5_prefix = 4;
        if (has_comm_md5_prefix()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->comm_md5_prefix());
        }

        // optional uint64 sample_time = 5 [deprecated = true];
        if (has_sample_time()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->sample_time());
        }

        // optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
        if (has_sample_info()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->sample_info_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_CommEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_CommEvent*>(&from));
}

void PerfDataProto_CommEvent::MergeFrom(const PerfDataProto_CommEvent& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.CommEvent)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_pid()) {
            set_pid(from.pid());
        }
        if (from.has_tid()) {
            set_tid(from.tid());
        }
        if (from.has_comm_md5_prefix()) {
            set_comm_md5_prefix(from.comm_md5_prefix());
        }
        if (from.has_sample_time()) {
            set_sample_time(from.sample_time());
        }
        if (from.has_sample_info()) {
            mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from.sample_info());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_CommEvent::CopyFrom(const PerfDataProto_CommEvent& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.CommEvent)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_CommEvent::IsInitialized() const
{

    return true;
}

void PerfDataProto_CommEvent::Swap(PerfDataProto_CommEvent* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_CommEvent::InternalSwap(PerfDataProto_CommEvent* other)
{
    std::swap(pid_, other->pid_);
    std::swap(tid_, other->tid_);
    std::swap(comm_md5_prefix_, other->comm_md5_prefix_);
    std::swap(sample_time_, other->sample_time_);
    std::swap(sample_info_, other->sample_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_CommEvent::GetTypeName() const
{
    return "metrics.PerfDataProto.CommEvent";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_MMapEvent(
    PerfDataProto_MMapEvent* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_MMapEvent::kPidFieldNumber;
const int PerfDataProto_MMapEvent::kTidFieldNumber;
const int PerfDataProto_MMapEvent::kStartFieldNumber;
const int PerfDataProto_MMapEvent::kLenFieldNumber;
const int PerfDataProto_MMapEvent::kPgoffFieldNumber;
const int PerfDataProto_MMapEvent::kFilenameMd5PrefixFieldNumber;
const int PerfDataProto_MMapEvent::kSampleInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_MMapEvent::PerfDataProto_MMapEvent()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.MMapEvent)
}

void PerfDataProto_MMapEvent::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    sample_info_ = const_cast<::metrics::PerfDataProto_SampleInfo*>(
        ::metrics::PerfDataProto_SampleInfo::internal_default_instance());
#else
    sample_info_ = const_cast<::metrics::PerfDataProto_SampleInfo*>(&::metrics::PerfDataProto_SampleInfo::default_instance());
#endif
}

PerfDataProto_MMapEvent::PerfDataProto_MMapEvent(const PerfDataProto_MMapEvent& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.MMapEvent)
}

void PerfDataProto_MMapEvent::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pid_ = 0u;
    tid_ = 0u;
    start_ = GOOGLE_ULONGLONG(0);
    len_ = GOOGLE_ULONGLONG(0);
    pgoff_ = GOOGLE_ULONGLONG(0);
    filename_md5_prefix_ = GOOGLE_ULONGLONG(0);
    sample_info_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_MMapEvent::~PerfDataProto_MMapEvent()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.MMapEvent)
    SharedDtor();
}

void PerfDataProto_MMapEvent::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete sample_info_;
    }
}

void PerfDataProto_MMapEvent::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_MMapEvent& PerfDataProto_MMapEvent::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_MMapEvent* PerfDataProto_MMapEvent::default_instance_ = NULL;

PerfDataProto_MMapEvent* PerfDataProto_MMapEvent::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_MMapEvent* n = new PerfDataProto_MMapEvent;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_MMapEvent::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.MMapEvent)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                             \
    _Pragma("clang diagnostic push")                                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_MMapEvent, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_MMapEvent*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 127u) {
        ZR_(pid_, filename_md5_prefix_);
        if (has_sample_info()) {
            if (sample_info_ != NULL)
                sample_info_->::metrics::PerfDataProto_SampleInfo::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_MMapEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_MMapEvent, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.MMapEvent)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 pid = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &pid_)));
                set_has_pid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_tid;
            break;
        }

        // optional uint32 tid = 2;
        case 2: {
            if (tag == 16) {
            parse_tid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &tid_)));
                set_has_tid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_start;
            break;
        }

        // optional uint64 start = 3;
        case 3: {
            if (tag == 24) {
            parse_start:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &start_)));
                set_has_start();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_len;
            break;
        }

        // optional uint64 len = 4;
        case 4: {
            if (tag == 32) {
            parse_len:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &len_)));
                set_has_len();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_pgoff;
            break;
        }

        // optional uint64 pgoff = 5;
        case 5: {
            if (tag == 40) {
            parse_pgoff:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &pgoff_)));
                set_has_pgoff();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_filename_md5_prefix;
            break;
        }

        // optional uint64 filename_md5_prefix = 7;
        case 7: {
            if (tag == 56) {
            parse_filename_md5_prefix:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &filename_md5_prefix_)));
                set_has_filename_md5_prefix();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_sample_info;
            break;
        }

        // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
        case 8: {
            if (tag == 66) {
            parse_sample_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_sample_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.MMapEvent)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.MMapEvent)
    return false;
#undef DO_
}

void PerfDataProto_MMapEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.MMapEvent)
    // optional uint32 pid = 1;
    if (has_pid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
    }

    // optional uint64 start = 3;
    if (has_start()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start(), output);
    }

    // optional uint64 len = 4;
    if (has_len()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->len(), output);
    }

    // optional uint64 pgoff = 5;
    if (has_pgoff()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pgoff(), output);
    }

    // optional uint64 filename_md5_prefix = 7;
    if (has_filename_md5_prefix()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->filename_md5_prefix(), output);
    }

    // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
    if (has_sample_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->sample_info_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.MMapEvent)
}

int PerfDataProto_MMapEvent::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.MMapEvent)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 127u) {
        // optional uint32 pid = 1;
        if (has_pid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->pid());
        }

        // optional uint32 tid = 2;
        if (has_tid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->tid());
        }

        // optional uint64 start = 3;
        if (has_start()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->start());
        }

        // optional uint64 len = 4;
        if (has_len()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->len());
        }

        // optional uint64 pgoff = 5;
        if (has_pgoff()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->pgoff());
        }

        // optional uint64 filename_md5_prefix = 7;
        if (has_filename_md5_prefix()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->filename_md5_prefix());
        }

        // optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
        if (has_sample_info()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->sample_info_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_MMapEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_MMapEvent*>(&from));
}

void PerfDataProto_MMapEvent::MergeFrom(const PerfDataProto_MMapEvent& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.MMapEvent)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_pid()) {
            set_pid(from.pid());
        }
        if (from.has_tid()) {
            set_tid(from.tid());
        }
        if (from.has_start()) {
            set_start(from.start());
        }
        if (from.has_len()) {
            set_len(from.len());
        }
        if (from.has_pgoff()) {
            set_pgoff(from.pgoff());
        }
        if (from.has_filename_md5_prefix()) {
            set_filename_md5_prefix(from.filename_md5_prefix());
        }
        if (from.has_sample_info()) {
            mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from.sample_info());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_MMapEvent::CopyFrom(const PerfDataProto_MMapEvent& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.MMapEvent)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_MMapEvent::IsInitialized() const
{

    return true;
}

void PerfDataProto_MMapEvent::Swap(PerfDataProto_MMapEvent* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_MMapEvent::InternalSwap(PerfDataProto_MMapEvent* other)
{
    std::swap(pid_, other->pid_);
    std::swap(tid_, other->tid_);
    std::swap(start_, other->start_);
    std::swap(len_, other->len_);
    std::swap(pgoff_, other->pgoff_);
    std::swap(filename_md5_prefix_, other->filename_md5_prefix_);
    std::swap(sample_info_, other->sample_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_MMapEvent::GetTypeName() const
{
    return "metrics.PerfDataProto.MMapEvent";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_BranchStackEntry(
    PerfDataProto_BranchStackEntry* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_BranchStackEntry::kFromIpFieldNumber;
const int PerfDataProto_BranchStackEntry::kToIpFieldNumber;
const int PerfDataProto_BranchStackEntry::kMispredictedFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.BranchStackEntry)
}

void PerfDataProto_BranchStackEntry::InitAsDefaultInstance()
{
}

PerfDataProto_BranchStackEntry::PerfDataProto_BranchStackEntry(const PerfDataProto_BranchStackEntry& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.BranchStackEntry)
}

void PerfDataProto_BranchStackEntry::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    from_ip_ = GOOGLE_ULONGLONG(0);
    to_ip_ = GOOGLE_ULONGLONG(0);
    mispredicted_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_BranchStackEntry::~PerfDataProto_BranchStackEntry()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.BranchStackEntry)
    SharedDtor();
}

void PerfDataProto_BranchStackEntry::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_BranchStackEntry::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_BranchStackEntry& PerfDataProto_BranchStackEntry::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_BranchStackEntry* PerfDataProto_BranchStackEntry::default_instance_ = NULL;

PerfDataProto_BranchStackEntry* PerfDataProto_BranchStackEntry::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_BranchStackEntry* n = new PerfDataProto_BranchStackEntry;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_BranchStackEntry::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.BranchStackEntry)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                    \
    _Pragma("clang diagnostic push")                                                                                     \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_BranchStackEntry, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_BranchStackEntry*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(from_ip_, mispredicted_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_BranchStackEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_BranchStackEntry, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.BranchStackEntry)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint64 from_ip = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &from_ip_)));
                set_has_from_ip();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_to_ip;
            break;
        }

        // optional uint64 to_ip = 2;
        case 2: {
            if (tag == 16) {
            parse_to_ip:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &to_ip_)));
                set_has_to_ip();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_mispredicted;
            break;
        }

        // optional bool mispredicted = 3;
        case 3: {
            if (tag == 24) {
            parse_mispredicted:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &mispredicted_)));
                set_has_mispredicted();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.BranchStackEntry)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.BranchStackEntry)
    return false;
#undef DO_
}

void PerfDataProto_BranchStackEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.BranchStackEntry)
    // optional uint64 from_ip = 1;
    if (has_from_ip()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_ip(), output);
    }

    // optional uint64 to_ip = 2;
    if (has_to_ip()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_ip(), output);
    }

    // optional bool mispredicted = 3;
    if (has_mispredicted()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mispredicted(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.BranchStackEntry)
}

int PerfDataProto_BranchStackEntry::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.BranchStackEntry)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional uint64 from_ip = 1;
        if (has_from_ip()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->from_ip());
        }

        // optional uint64 to_ip = 2;
        if (has_to_ip()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->to_ip());
        }

        // optional bool mispredicted = 3;
        if (has_mispredicted()) {
            total_size += 1 + 1;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_BranchStackEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_BranchStackEntry*>(&from));
}

void PerfDataProto_BranchStackEntry::MergeFrom(const PerfDataProto_BranchStackEntry& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.BranchStackEntry)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_from_ip()) {
            set_from_ip(from.from_ip());
        }
        if (from.has_to_ip()) {
            set_to_ip(from.to_ip());
        }
        if (from.has_mispredicted()) {
            set_mispredicted(from.mispredicted());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_BranchStackEntry::CopyFrom(const PerfDataProto_BranchStackEntry& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.BranchStackEntry)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_BranchStackEntry::IsInitialized() const
{

    return true;
}

void PerfDataProto_BranchStackEntry::Swap(PerfDataProto_BranchStackEntry* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_BranchStackEntry::InternalSwap(PerfDataProto_BranchStackEntry* other)
{
    std::swap(from_ip_, other->from_ip_);
    std::swap(to_ip_, other->to_ip_);
    std::swap(mispredicted_, other->mispredicted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_BranchStackEntry::GetTypeName() const
{
    return "metrics.PerfDataProto.BranchStackEntry";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_SampleEvent(
    PerfDataProto_SampleEvent* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_SampleEvent::kIpFieldNumber;
const int PerfDataProto_SampleEvent::kPidFieldNumber;
const int PerfDataProto_SampleEvent::kTidFieldNumber;
const int PerfDataProto_SampleEvent::kSampleTimeNsFieldNumber;
const int PerfDataProto_SampleEvent::kAddrFieldNumber;
const int PerfDataProto_SampleEvent::kIdFieldNumber;
const int PerfDataProto_SampleEvent::kStreamIdFieldNumber;
const int PerfDataProto_SampleEvent::kPeriodFieldNumber;
const int PerfDataProto_SampleEvent::kCpuFieldNumber;
const int PerfDataProto_SampleEvent::kRawSizeFieldNumber;
const int PerfDataProto_SampleEvent::kCallchainFieldNumber;
const int PerfDataProto_SampleEvent::kBranchStackFieldNumber;
const int PerfDataProto_SampleEvent::kWeightFieldNumber;
const int PerfDataProto_SampleEvent::kDataSrcFieldNumber;
const int PerfDataProto_SampleEvent::kTransactionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_SampleEvent::PerfDataProto_SampleEvent()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.SampleEvent)
}

void PerfDataProto_SampleEvent::InitAsDefaultInstance()
{
}

PerfDataProto_SampleEvent::PerfDataProto_SampleEvent(const PerfDataProto_SampleEvent& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.SampleEvent)
}

void PerfDataProto_SampleEvent::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ip_ = GOOGLE_ULONGLONG(0);
    pid_ = 0u;
    tid_ = 0u;
    sample_time_ns_ = GOOGLE_ULONGLONG(0);
    addr_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
    stream_id_ = GOOGLE_ULONGLONG(0);
    period_ = GOOGLE_ULONGLONG(0);
    cpu_ = 0u;
    raw_size_ = 0u;
    weight_ = GOOGLE_ULONGLONG(0);
    data_src_ = GOOGLE_ULONGLONG(0);
    transaction_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_SampleEvent::~PerfDataProto_SampleEvent()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.SampleEvent)
    SharedDtor();
}

void PerfDataProto_SampleEvent::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_SampleEvent::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_SampleEvent& PerfDataProto_SampleEvent::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_SampleEvent* PerfDataProto_SampleEvent::default_instance_ = NULL;

PerfDataProto_SampleEvent* PerfDataProto_SampleEvent::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_SampleEvent* n = new PerfDataProto_SampleEvent;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_SampleEvent::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.SampleEvent)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                               \
    _Pragma("clang diagnostic push")                                                                                \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_SampleEvent, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_SampleEvent*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(ip_, period_);
    }
    if (_has_bits_[8 / 32] & 29440u) {
        ZR_(cpu_, raw_size_);
        ZR_(weight_, transaction_);
    }

#undef ZR_HELPER_
#undef ZR_

    callchain_.Clear();
    branch_stack_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_SampleEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_SampleEvent, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.SampleEvent)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint64 ip = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &ip_)));
                set_has_ip();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_pid;
            break;
        }

        // optional uint32 pid = 2;
        case 2: {
            if (tag == 16) {
            parse_pid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &pid_)));
                set_has_pid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_tid;
            break;
        }

        // optional uint32 tid = 3;
        case 3: {
            if (tag == 24) {
            parse_tid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &tid_)));
                set_has_tid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_sample_time_ns;
            break;
        }

        // optional uint64 sample_time_ns = 4;
        case 4: {
            if (tag == 32) {
            parse_sample_time_ns:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &sample_time_ns_)));
                set_has_sample_time_ns();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_addr;
            break;
        }

        // optional uint64 addr = 5;
        case 5: {
            if (tag == 40) {
            parse_addr:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &addr_)));
                set_has_addr();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_id;
            break;
        }

        // optional uint64 id = 6;
        case 6: {
            if (tag == 48) {
            parse_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &id_)));
                set_has_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_stream_id;
            break;
        }

        // optional uint64 stream_id = 7;
        case 7: {
            if (tag == 56) {
            parse_stream_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &stream_id_)));
                set_has_stream_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_period;
            break;
        }

        // optional uint64 period = 8;
        case 8: {
            if (tag == 64) {
            parse_period:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &period_)));
                set_has_period();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_cpu;
            break;
        }

        // optional uint32 cpu = 9;
        case 9: {
            if (tag == 72) {
            parse_cpu:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &cpu_)));
                set_has_cpu();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(80))
                goto parse_raw_size;
            break;
        }

        // optional uint32 raw_size = 10;
        case 10: {
            if (tag == 80) {
            parse_raw_size:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &raw_size_)));
                set_has_raw_size();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_callchain;
            break;
        }

        // repeated uint64 callchain = 11;
        case 11: {
            if (tag == 88) {
            parse_callchain:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    1, 88, input, this->mutable_callchain())));
            } else if (tag == 90) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, this->mutable_callchain())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_callchain;
            if (input->ExpectTag(98))
                goto parse_branch_stack;
            break;
        }

        // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
        case 12: {
            if (tag == 98) {
            parse_branch_stack:
                DO_(input->IncrementRecursionDepth());
            parse_loop_branch_stack:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_branch_stack()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_loop_branch_stack;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(120))
                goto parse_weight;
            break;
        }

        // optional uint64 weight = 15;
        case 15: {
            if (tag == 120) {
            parse_weight:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &weight_)));
                set_has_weight();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_data_src;
            break;
        }

        // optional uint64 data_src = 16;
        case 16: {
            if (tag == 128) {
            parse_data_src:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &data_src_)));
                set_has_data_src();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(136))
                goto parse_transaction;
            break;
        }

        // optional uint64 transaction = 17;
        case 17: {
            if (tag == 136) {
            parse_transaction:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &transaction_)));
                set_has_transaction();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.SampleEvent)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.SampleEvent)
    return false;
#undef DO_
}

void PerfDataProto_SampleEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.SampleEvent)
    // optional uint64 ip = 1;
    if (has_ip()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ip(), output);
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
    }

    // optional uint32 tid = 3;
    if (has_tid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tid(), output);
    }

    // optional uint64 sample_time_ns = 4;
    if (has_sample_time_ns()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sample_time_ns(), output);
    }

    // optional uint64 addr = 5;
    if (has_addr()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->addr(), output);
    }

    // optional uint64 id = 6;
    if (has_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
    }

    // optional uint64 stream_id = 7;
    if (has_stream_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->stream_id(), output);
    }

    // optional uint64 period = 8;
    if (has_period()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->period(), output);
    }

    // optional uint32 cpu = 9;
    if (has_cpu()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cpu(), output);
    }

    // optional uint32 raw_size = 10;
    if (has_raw_size()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->raw_size(), output);
    }

    // repeated uint64 callchain = 11;
    for (int i = 0; i < this->callchain_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(
            11, this->callchain(i), output);
    }

    // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
    for (unsigned int i = 0, n = this->branch_stack_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, this->branch_stack(i), output);
    }

    // optional uint64 weight = 15;
    if (has_weight()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->weight(), output);
    }

    // optional uint64 data_src = 16;
    if (has_data_src()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->data_src(), output);
    }

    // optional uint64 transaction = 17;
    if (has_transaction()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->transaction(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.SampleEvent)
}

int PerfDataProto_SampleEvent::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.SampleEvent)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional uint64 ip = 1;
        if (has_ip()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->ip());
        }

        // optional uint32 pid = 2;
        if (has_pid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->pid());
        }

        // optional uint32 tid = 3;
        if (has_tid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->tid());
        }

        // optional uint64 sample_time_ns = 4;
        if (has_sample_time_ns()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->sample_time_ns());
        }

        // optional uint64 addr = 5;
        if (has_addr()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->addr());
        }

        // optional uint64 id = 6;
        if (has_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->id());
        }

        // optional uint64 stream_id = 7;
        if (has_stream_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->stream_id());
        }

        // optional uint64 period = 8;
        if (has_period()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->period());
        }
    }
    if (_has_bits_[8 / 32] & 29440u) {
        // optional uint32 cpu = 9;
        if (has_cpu()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->cpu());
        }

        // optional uint32 raw_size = 10;
        if (has_raw_size()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->raw_size());
        }

        // optional uint64 weight = 15;
        if (has_weight()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->weight());
        }

        // optional uint64 data_src = 16;
        if (has_data_src()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->data_src());
        }

        // optional uint64 transaction = 17;
        if (has_transaction()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->transaction());
        }
    }
    // repeated uint64 callchain = 11;
    {
        int data_size = 0;
        for (int i = 0; i < this->callchain_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                UInt64Size(this->callchain(i));
        }
        total_size += 1 * this->callchain_size() + data_size;
    }

    // repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
    total_size += 1 * this->branch_stack_size();
    for (int i = 0; i < this->branch_stack_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->branch_stack(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_SampleEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_SampleEvent*>(&from));
}

void PerfDataProto_SampleEvent::MergeFrom(const PerfDataProto_SampleEvent& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.SampleEvent)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    callchain_.MergeFrom(from.callchain_);
    branch_stack_.MergeFrom(from.branch_stack_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_ip()) {
            set_ip(from.ip());
        }
        if (from.has_pid()) {
            set_pid(from.pid());
        }
        if (from.has_tid()) {
            set_tid(from.tid());
        }
        if (from.has_sample_time_ns()) {
            set_sample_time_ns(from.sample_time_ns());
        }
        if (from.has_addr()) {
            set_addr(from.addr());
        }
        if (from.has_id()) {
            set_id(from.id());
        }
        if (from.has_stream_id()) {
            set_stream_id(from.stream_id());
        }
        if (from.has_period()) {
            set_period(from.period());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_cpu()) {
            set_cpu(from.cpu());
        }
        if (from.has_raw_size()) {
            set_raw_size(from.raw_size());
        }
        if (from.has_weight()) {
            set_weight(from.weight());
        }
        if (from.has_data_src()) {
            set_data_src(from.data_src());
        }
        if (from.has_transaction()) {
            set_transaction(from.transaction());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_SampleEvent::CopyFrom(const PerfDataProto_SampleEvent& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.SampleEvent)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_SampleEvent::IsInitialized() const
{

    return true;
}

void PerfDataProto_SampleEvent::Swap(PerfDataProto_SampleEvent* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_SampleEvent::InternalSwap(PerfDataProto_SampleEvent* other)
{
    std::swap(ip_, other->ip_);
    std::swap(pid_, other->pid_);
    std::swap(tid_, other->tid_);
    std::swap(sample_time_ns_, other->sample_time_ns_);
    std::swap(addr_, other->addr_);
    std::swap(id_, other->id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(period_, other->period_);
    std::swap(cpu_, other->cpu_);
    std::swap(raw_size_, other->raw_size_);
    callchain_.UnsafeArenaSwap(&other->callchain_);
    branch_stack_.UnsafeArenaSwap(&other->branch_stack_);
    std::swap(weight_, other->weight_);
    std::swap(data_src_, other->data_src_);
    std::swap(transaction_, other->transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_SampleEvent::GetTypeName() const
{
    return "metrics.PerfDataProto.SampleEvent";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_ForkEvent(
    PerfDataProto_ForkEvent* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_ForkEvent::kPidFieldNumber;
const int PerfDataProto_ForkEvent::kPpidFieldNumber;
const int PerfDataProto_ForkEvent::kTidFieldNumber;
const int PerfDataProto_ForkEvent::kPtidFieldNumber;
const int PerfDataProto_ForkEvent::kForkTimeNsFieldNumber;
const int PerfDataProto_ForkEvent::kSampleInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_ForkEvent::PerfDataProto_ForkEvent()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.ForkEvent)
}

void PerfDataProto_ForkEvent::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    sample_info_ = const_cast<::metrics::PerfDataProto_SampleInfo*>(
        ::metrics::PerfDataProto_SampleInfo::internal_default_instance());
#else
    sample_info_ = const_cast<::metrics::PerfDataProto_SampleInfo*>(&::metrics::PerfDataProto_SampleInfo::default_instance());
#endif
}

PerfDataProto_ForkEvent::PerfDataProto_ForkEvent(const PerfDataProto_ForkEvent& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.ForkEvent)
}

void PerfDataProto_ForkEvent::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pid_ = 0u;
    ppid_ = 0u;
    tid_ = 0u;
    ptid_ = 0u;
    fork_time_ns_ = GOOGLE_ULONGLONG(0);
    sample_info_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_ForkEvent::~PerfDataProto_ForkEvent()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.ForkEvent)
    SharedDtor();
}

void PerfDataProto_ForkEvent::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete sample_info_;
    }
}

void PerfDataProto_ForkEvent::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_ForkEvent& PerfDataProto_ForkEvent::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_ForkEvent* PerfDataProto_ForkEvent::default_instance_ = NULL;

PerfDataProto_ForkEvent* PerfDataProto_ForkEvent::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_ForkEvent* n = new PerfDataProto_ForkEvent;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_ForkEvent::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.ForkEvent)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                             \
    _Pragma("clang diagnostic push")                                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_ForkEvent, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_ForkEvent*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 63u) {
        ZR_(pid_, fork_time_ns_);
        if (has_sample_info()) {
            if (sample_info_ != NULL)
                sample_info_->::metrics::PerfDataProto_SampleInfo::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_ForkEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_ForkEvent, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.ForkEvent)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 pid = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &pid_)));
                set_has_pid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_ppid;
            break;
        }

        // optional uint32 ppid = 2;
        case 2: {
            if (tag == 16) {
            parse_ppid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &ppid_)));
                set_has_ppid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_tid;
            break;
        }

        // optional uint32 tid = 3;
        case 3: {
            if (tag == 24) {
            parse_tid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &tid_)));
                set_has_tid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_ptid;
            break;
        }

        // optional uint32 ptid = 4;
        case 4: {
            if (tag == 32) {
            parse_ptid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &ptid_)));
                set_has_ptid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_fork_time_ns;
            break;
        }

        // optional uint64 fork_time_ns = 5;
        case 5: {
            if (tag == 40) {
            parse_fork_time_ns:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &fork_time_ns_)));
                set_has_fork_time_ns();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_sample_info;
            break;
        }

        // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
        case 11: {
            if (tag == 90) {
            parse_sample_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_sample_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.ForkEvent)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.ForkEvent)
    return false;
#undef DO_
}

void PerfDataProto_ForkEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.ForkEvent)
    // optional uint32 pid = 1;
    if (has_pid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
    }

    // optional uint32 ppid = 2;
    if (has_ppid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ppid(), output);
    }

    // optional uint32 tid = 3;
    if (has_tid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tid(), output);
    }

    // optional uint32 ptid = 4;
    if (has_ptid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ptid(), output);
    }

    // optional uint64 fork_time_ns = 5;
    if (has_fork_time_ns()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fork_time_ns(), output);
    }

    // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
    if (has_sample_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *this->sample_info_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.ForkEvent)
}

int PerfDataProto_ForkEvent::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.ForkEvent)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 63u) {
        // optional uint32 pid = 1;
        if (has_pid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->pid());
        }

        // optional uint32 ppid = 2;
        if (has_ppid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->ppid());
        }

        // optional uint32 tid = 3;
        if (has_tid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->tid());
        }

        // optional uint32 ptid = 4;
        if (has_ptid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->ptid());
        }

        // optional uint64 fork_time_ns = 5;
        if (has_fork_time_ns()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->fork_time_ns());
        }

        // optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
        if (has_sample_info()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->sample_info_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_ForkEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_ForkEvent*>(&from));
}

void PerfDataProto_ForkEvent::MergeFrom(const PerfDataProto_ForkEvent& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.ForkEvent)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_pid()) {
            set_pid(from.pid());
        }
        if (from.has_ppid()) {
            set_ppid(from.ppid());
        }
        if (from.has_tid()) {
            set_tid(from.tid());
        }
        if (from.has_ptid()) {
            set_ptid(from.ptid());
        }
        if (from.has_fork_time_ns()) {
            set_fork_time_ns(from.fork_time_ns());
        }
        if (from.has_sample_info()) {
            mutable_sample_info()->::metrics::PerfDataProto_SampleInfo::MergeFrom(from.sample_info());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_ForkEvent::CopyFrom(const PerfDataProto_ForkEvent& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.ForkEvent)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_ForkEvent::IsInitialized() const
{

    return true;
}

void PerfDataProto_ForkEvent::Swap(PerfDataProto_ForkEvent* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_ForkEvent::InternalSwap(PerfDataProto_ForkEvent* other)
{
    std::swap(pid_, other->pid_);
    std::swap(ppid_, other->ppid_);
    std::swap(tid_, other->tid_);
    std::swap(ptid_, other->ptid_);
    std::swap(fork_time_ns_, other->fork_time_ns_);
    std::swap(sample_info_, other->sample_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_ForkEvent::GetTypeName() const
{
    return "metrics.PerfDataProto.ForkEvent";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_EventHeader(
    PerfDataProto_EventHeader* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_EventHeader::kTypeFieldNumber;
const int PerfDataProto_EventHeader::kMiscFieldNumber;
const int PerfDataProto_EventHeader::kSizeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_EventHeader::PerfDataProto_EventHeader()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.EventHeader)
}

void PerfDataProto_EventHeader::InitAsDefaultInstance()
{
}

PerfDataProto_EventHeader::PerfDataProto_EventHeader(const PerfDataProto_EventHeader& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.EventHeader)
}

void PerfDataProto_EventHeader::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = 0u;
    misc_ = 0u;
    size_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_EventHeader::~PerfDataProto_EventHeader()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.EventHeader)
    SharedDtor();
}

void PerfDataProto_EventHeader::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_EventHeader::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_EventHeader& PerfDataProto_EventHeader::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_EventHeader* PerfDataProto_EventHeader::default_instance_ = NULL;

PerfDataProto_EventHeader* PerfDataProto_EventHeader::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_EventHeader* n = new PerfDataProto_EventHeader;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_EventHeader::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.EventHeader)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                               \
    _Pragma("clang diagnostic push")                                                                                \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_EventHeader, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_EventHeader*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(type_, size_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_EventHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_EventHeader, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.EventHeader)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 type = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &type_)));
                set_has_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_misc;
            break;
        }

        // optional uint32 misc = 2;
        case 2: {
            if (tag == 16) {
            parse_misc:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &misc_)));
                set_has_misc();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_size;
            break;
        }

        // optional uint32 size = 3;
        case 3: {
            if (tag == 24) {
            parse_size:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &size_)));
                set_has_size();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.EventHeader)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.EventHeader)
    return false;
#undef DO_
}

void PerfDataProto_EventHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.EventHeader)
    // optional uint32 type = 1;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
    }

    // optional uint32 misc = 2;
    if (has_misc()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->misc(), output);
    }

    // optional uint32 size = 3;
    if (has_size()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.EventHeader)
}

int PerfDataProto_EventHeader::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.EventHeader)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional uint32 type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->type());
        }

        // optional uint32 misc = 2;
        if (has_misc()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->misc());
        }

        // optional uint32 size = 3;
        if (has_size()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->size());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_EventHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_EventHeader*>(&from));
}

void PerfDataProto_EventHeader::MergeFrom(const PerfDataProto_EventHeader& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.EventHeader)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_misc()) {
            set_misc(from.misc());
        }
        if (from.has_size()) {
            set_size(from.size());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_EventHeader::CopyFrom(const PerfDataProto_EventHeader& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.EventHeader)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_EventHeader::IsInitialized() const
{

    return true;
}

void PerfDataProto_EventHeader::Swap(PerfDataProto_EventHeader* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_EventHeader::InternalSwap(PerfDataProto_EventHeader* other)
{
    std::swap(type_, other->type_);
    std::swap(misc_, other->misc_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_EventHeader::GetTypeName() const
{
    return "metrics.PerfDataProto.EventHeader";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_PerfEvent(
    PerfDataProto_PerfEvent* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEvent::kHeaderFieldNumber;
const int PerfDataProto_PerfEvent::kMmapEventFieldNumber;
const int PerfDataProto_PerfEvent::kSampleEventFieldNumber;
const int PerfDataProto_PerfEvent::kCommEventFieldNumber;
const int PerfDataProto_PerfEvent::kForkEventFieldNumber;
const int PerfDataProto_PerfEvent::kExitEventFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEvent::PerfDataProto_PerfEvent()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEvent)
}

void PerfDataProto_PerfEvent::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    header_ = const_cast<::metrics::PerfDataProto_EventHeader*>(
        ::metrics::PerfDataProto_EventHeader::internal_default_instance());
#else
    header_ = const_cast<::metrics::PerfDataProto_EventHeader*>(&::metrics::PerfDataProto_EventHeader::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    mmap_event_ = const_cast<::metrics::PerfDataProto_MMapEvent*>(
        ::metrics::PerfDataProto_MMapEvent::internal_default_instance());
#else
    mmap_event_ = const_cast<::metrics::PerfDataProto_MMapEvent*>(&::metrics::PerfDataProto_MMapEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    sample_event_ = const_cast<::metrics::PerfDataProto_SampleEvent*>(
        ::metrics::PerfDataProto_SampleEvent::internal_default_instance());
#else
    sample_event_ = const_cast<::metrics::PerfDataProto_SampleEvent*>(&::metrics::PerfDataProto_SampleEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    comm_event_ = const_cast<::metrics::PerfDataProto_CommEvent*>(
        ::metrics::PerfDataProto_CommEvent::internal_default_instance());
#else
    comm_event_ = const_cast<::metrics::PerfDataProto_CommEvent*>(&::metrics::PerfDataProto_CommEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    fork_event_ = const_cast<::metrics::PerfDataProto_ForkEvent*>(
        ::metrics::PerfDataProto_ForkEvent::internal_default_instance());
#else
    fork_event_ = const_cast<::metrics::PerfDataProto_ForkEvent*>(&::metrics::PerfDataProto_ForkEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    exit_event_ = const_cast<::metrics::PerfDataProto_ForkEvent*>(
        ::metrics::PerfDataProto_ForkEvent::internal_default_instance());
#else
    exit_event_ = const_cast<::metrics::PerfDataProto_ForkEvent*>(&::metrics::PerfDataProto_ForkEvent::default_instance());
#endif
}

PerfDataProto_PerfEvent::PerfDataProto_PerfEvent(const PerfDataProto_PerfEvent& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEvent)
}

void PerfDataProto_PerfEvent::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    header_ = NULL;
    mmap_event_ = NULL;
    sample_event_ = NULL;
    comm_event_ = NULL;
    fork_event_ = NULL;
    exit_event_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_PerfEvent::~PerfDataProto_PerfEvent()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEvent)
    SharedDtor();
}

void PerfDataProto_PerfEvent::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete header_;
        delete mmap_event_;
        delete sample_event_;
        delete comm_event_;
        delete fork_event_;
        delete exit_event_;
    }
}

void PerfDataProto_PerfEvent::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_PerfEvent& PerfDataProto_PerfEvent::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_PerfEvent* PerfDataProto_PerfEvent::default_instance_ = NULL;

PerfDataProto_PerfEvent* PerfDataProto_PerfEvent::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_PerfEvent* n = new PerfDataProto_PerfEvent;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_PerfEvent::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEvent)
    if (_has_bits_[0 / 32] & 63u) {
        if (has_header()) {
            if (header_ != NULL)
                header_->::metrics::PerfDataProto_EventHeader::Clear();
        }
        if (has_mmap_event()) {
            if (mmap_event_ != NULL)
                mmap_event_->::metrics::PerfDataProto_MMapEvent::Clear();
        }
        if (has_sample_event()) {
            if (sample_event_ != NULL)
                sample_event_->::metrics::PerfDataProto_SampleEvent::Clear();
        }
        if (has_comm_event()) {
            if (comm_event_ != NULL)
                comm_event_->::metrics::PerfDataProto_CommEvent::Clear();
        }
        if (has_fork_event()) {
            if (fork_event_ != NULL)
                fork_event_->::metrics::PerfDataProto_ForkEvent::Clear();
        }
        if (has_exit_event()) {
            if (exit_event_ != NULL)
                exit_event_->::metrics::PerfDataProto_ForkEvent::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_PerfEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_PerfEvent, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEvent)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.PerfDataProto.EventHeader header = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_header()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_mmap_event;
            break;
        }

        // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
        case 2: {
            if (tag == 18) {
            parse_mmap_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_mmap_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_sample_event;
            break;
        }

        // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
        case 3: {
            if (tag == 26) {
            parse_sample_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_sample_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_comm_event;
            break;
        }

        // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
        case 4: {
            if (tag == 34) {
            parse_comm_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_comm_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_fork_event;
            break;
        }

        // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
        case 5: {
            if (tag == 42) {
            parse_fork_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_fork_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_exit_event;
            break;
        }

        // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
        case 9: {
            if (tag == 74) {
            parse_exit_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_exit_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEvent)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEvent)
    return false;
#undef DO_
}

void PerfDataProto_PerfEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEvent)
    // optional .metrics.PerfDataProto.EventHeader header = 1;
    if (has_header()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->header_, output);
    }

    // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
    if (has_mmap_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->mmap_event_, output);
    }

    // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
    if (has_sample_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->sample_event_, output);
    }

    // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
    if (has_comm_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->comm_event_, output);
    }

    // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
    if (has_fork_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->fork_event_, output);
    }

    // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
    if (has_exit_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, *this->exit_event_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEvent)
}

int PerfDataProto_PerfEvent::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEvent)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 63u) {
        // optional .metrics.PerfDataProto.EventHeader header = 1;
        if (has_header()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->header_);
        }

        // optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
        if (has_mmap_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->mmap_event_);
        }

        // optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
        if (has_sample_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->sample_event_);
        }

        // optional .metrics.PerfDataProto.CommEvent comm_event = 4;
        if (has_comm_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->comm_event_);
        }

        // optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
        if (has_fork_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->fork_event_);
        }

        // optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
        if (has_exit_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->exit_event_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_PerfEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEvent*>(&from));
}

void PerfDataProto_PerfEvent::MergeFrom(const PerfDataProto_PerfEvent& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEvent)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_header()) {
            mutable_header()->::metrics::PerfDataProto_EventHeader::MergeFrom(from.header());
        }
        if (from.has_mmap_event()) {
            mutable_mmap_event()->::metrics::PerfDataProto_MMapEvent::MergeFrom(from.mmap_event());
        }
        if (from.has_sample_event()) {
            mutable_sample_event()->::metrics::PerfDataProto_SampleEvent::MergeFrom(from.sample_event());
        }
        if (from.has_comm_event()) {
            mutable_comm_event()->::metrics::PerfDataProto_CommEvent::MergeFrom(from.comm_event());
        }
        if (from.has_fork_event()) {
            mutable_fork_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from.fork_event());
        }
        if (from.has_exit_event()) {
            mutable_exit_event()->::metrics::PerfDataProto_ForkEvent::MergeFrom(from.exit_event());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_PerfEvent::CopyFrom(const PerfDataProto_PerfEvent& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEvent)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_PerfEvent::IsInitialized() const
{

    return true;
}

void PerfDataProto_PerfEvent::Swap(PerfDataProto_PerfEvent* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_PerfEvent::InternalSwap(PerfDataProto_PerfEvent* other)
{
    std::swap(header_, other->header_);
    std::swap(mmap_event_, other->mmap_event_);
    std::swap(sample_event_, other->sample_event_);
    std::swap(comm_event_, other->comm_event_);
    std::swap(fork_event_, other->fork_event_);
    std::swap(exit_event_, other->exit_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_PerfEvent::GetTypeName() const
{
    return "metrics.PerfDataProto.PerfEvent";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_PerfEventStats(
    PerfDataProto_PerfEventStats* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfEventStats::kNumEventsReadFieldNumber;
const int PerfDataProto_PerfEventStats::kNumSampleEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumMmapEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumForkEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumExitEventsFieldNumber;
const int PerfDataProto_PerfEventStats::kNumSampleEventsMappedFieldNumber;
const int PerfDataProto_PerfEventStats::kDidRemapFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfEventStats)
}

void PerfDataProto_PerfEventStats::InitAsDefaultInstance()
{
}

PerfDataProto_PerfEventStats::PerfDataProto_PerfEventStats(const PerfDataProto_PerfEventStats& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfEventStats)
}

void PerfDataProto_PerfEventStats::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    num_events_read_ = 0u;
    num_sample_events_ = 0u;
    num_mmap_events_ = 0u;
    num_fork_events_ = 0u;
    num_exit_events_ = 0u;
    num_sample_events_mapped_ = 0u;
    did_remap_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_PerfEventStats::~PerfDataProto_PerfEventStats()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfEventStats)
    SharedDtor();
}

void PerfDataProto_PerfEventStats::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_PerfEventStats::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_PerfEventStats& PerfDataProto_PerfEventStats::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_PerfEventStats* PerfDataProto_PerfEventStats::default_instance_ = NULL;

PerfDataProto_PerfEventStats* PerfDataProto_PerfEventStats::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_PerfEventStats* n = new PerfDataProto_PerfEventStats;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_PerfEventStats::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfEventStats)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_PerfEventStats, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_PerfEventStats*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 127u) {
        ZR_(num_events_read_, did_remap_);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_PerfEventStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_PerfEventStats, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfEventStats)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 num_events_read = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_events_read_)));
                set_has_num_events_read();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_num_sample_events;
            break;
        }

        // optional uint32 num_sample_events = 2;
        case 2: {
            if (tag == 16) {
            parse_num_sample_events:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_sample_events_)));
                set_has_num_sample_events();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_num_mmap_events;
            break;
        }

        // optional uint32 num_mmap_events = 3;
        case 3: {
            if (tag == 24) {
            parse_num_mmap_events:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_mmap_events_)));
                set_has_num_mmap_events();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_num_fork_events;
            break;
        }

        // optional uint32 num_fork_events = 4;
        case 4: {
            if (tag == 32) {
            parse_num_fork_events:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_fork_events_)));
                set_has_num_fork_events();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_num_exit_events;
            break;
        }

        // optional uint32 num_exit_events = 5;
        case 5: {
            if (tag == 40) {
            parse_num_exit_events:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_exit_events_)));
                set_has_num_exit_events();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_num_sample_events_mapped;
            break;
        }

        // optional uint32 num_sample_events_mapped = 6;
        case 6: {
            if (tag == 48) {
            parse_num_sample_events_mapped:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_sample_events_mapped_)));
                set_has_num_sample_events_mapped();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_did_remap;
            break;
        }

        // optional bool did_remap = 7;
        case 7: {
            if (tag == 56) {
            parse_did_remap:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &did_remap_)));
                set_has_did_remap();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfEventStats)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfEventStats)
    return false;
#undef DO_
}

void PerfDataProto_PerfEventStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfEventStats)
    // optional uint32 num_events_read = 1;
    if (has_num_events_read()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_events_read(), output);
    }

    // optional uint32 num_sample_events = 2;
    if (has_num_sample_events()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_sample_events(), output);
    }

    // optional uint32 num_mmap_events = 3;
    if (has_num_mmap_events()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_mmap_events(), output);
    }

    // optional uint32 num_fork_events = 4;
    if (has_num_fork_events()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_fork_events(), output);
    }

    // optional uint32 num_exit_events = 5;
    if (has_num_exit_events()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_exit_events(), output);
    }

    // optional uint32 num_sample_events_mapped = 6;
    if (has_num_sample_events_mapped()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_sample_events_mapped(), output);
    }

    // optional bool did_remap = 7;
    if (has_did_remap()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->did_remap(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfEventStats)
}

int PerfDataProto_PerfEventStats::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfEventStats)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 127u) {
        // optional uint32 num_events_read = 1;
        if (has_num_events_read()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_events_read());
        }

        // optional uint32 num_sample_events = 2;
        if (has_num_sample_events()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_sample_events());
        }

        // optional uint32 num_mmap_events = 3;
        if (has_num_mmap_events()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_mmap_events());
        }

        // optional uint32 num_fork_events = 4;
        if (has_num_fork_events()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_fork_events());
        }

        // optional uint32 num_exit_events = 5;
        if (has_num_exit_events()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_exit_events());
        }

        // optional uint32 num_sample_events_mapped = 6;
        if (has_num_sample_events_mapped()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_sample_events_mapped());
        }

        // optional bool did_remap = 7;
        if (has_did_remap()) {
            total_size += 1 + 1;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_PerfEventStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfEventStats*>(&from));
}

void PerfDataProto_PerfEventStats::MergeFrom(const PerfDataProto_PerfEventStats& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfEventStats)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_num_events_read()) {
            set_num_events_read(from.num_events_read());
        }
        if (from.has_num_sample_events()) {
            set_num_sample_events(from.num_sample_events());
        }
        if (from.has_num_mmap_events()) {
            set_num_mmap_events(from.num_mmap_events());
        }
        if (from.has_num_fork_events()) {
            set_num_fork_events(from.num_fork_events());
        }
        if (from.has_num_exit_events()) {
            set_num_exit_events(from.num_exit_events());
        }
        if (from.has_num_sample_events_mapped()) {
            set_num_sample_events_mapped(from.num_sample_events_mapped());
        }
        if (from.has_did_remap()) {
            set_did_remap(from.did_remap());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_PerfEventStats::CopyFrom(const PerfDataProto_PerfEventStats& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfEventStats)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_PerfEventStats::IsInitialized() const
{

    return true;
}

void PerfDataProto_PerfEventStats::Swap(PerfDataProto_PerfEventStats* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_PerfEventStats::InternalSwap(PerfDataProto_PerfEventStats* other)
{
    std::swap(num_events_read_, other->num_events_read_);
    std::swap(num_sample_events_, other->num_sample_events_);
    std::swap(num_mmap_events_, other->num_mmap_events_);
    std::swap(num_fork_events_, other->num_fork_events_);
    std::swap(num_exit_events_, other->num_exit_events_);
    std::swap(num_sample_events_mapped_, other->num_sample_events_mapped_);
    std::swap(did_remap_, other->did_remap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_PerfEventStats::GetTypeName() const
{
    return "metrics.PerfDataProto.PerfEventStats";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_PerfBuildID(
    PerfDataProto_PerfBuildID* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_PerfBuildID::kMiscFieldNumber;
const int PerfDataProto_PerfBuildID::kPidFieldNumber;
const int PerfDataProto_PerfBuildID::kBuildHashFieldNumber;
const int PerfDataProto_PerfBuildID::kFilenameMd5PrefixFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.PerfBuildID)
}

void PerfDataProto_PerfBuildID::InitAsDefaultInstance()
{
}

PerfDataProto_PerfBuildID::PerfDataProto_PerfBuildID(const PerfDataProto_PerfBuildID& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.PerfBuildID)
}

void PerfDataProto_PerfBuildID::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    misc_ = 0u;
    pid_ = 0u;
    build_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    filename_md5_prefix_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_PerfBuildID::~PerfDataProto_PerfBuildID()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.PerfBuildID)
    SharedDtor();
}

void PerfDataProto_PerfBuildID::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    build_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_PerfBuildID::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_PerfBuildID& PerfDataProto_PerfBuildID::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_PerfBuildID* PerfDataProto_PerfBuildID::default_instance_ = NULL;

PerfDataProto_PerfBuildID* PerfDataProto_PerfBuildID::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_PerfBuildID* n = new PerfDataProto_PerfBuildID;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_PerfBuildID::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.PerfBuildID)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                               \
    _Pragma("clang diagnostic push")                                                                                \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfDataProto_PerfBuildID, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfDataProto_PerfBuildID*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 15u) {
        ZR_(misc_, pid_);
        if (has_build_hash()) {
            build_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        filename_md5_prefix_ = GOOGLE_ULONGLONG(0);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_PerfBuildID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_PerfBuildID, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.PerfBuildID)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 misc = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &misc_)));
                set_has_misc();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_pid;
            break;
        }

        // optional uint32 pid = 2;
        case 2: {
            if (tag == 16) {
            parse_pid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &pid_)));
                set_has_pid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_build_hash;
            break;
        }

        // optional bytes build_hash = 3;
        case 3: {
            if (tag == 26) {
            parse_build_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_build_hash()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_filename_md5_prefix;
            break;
        }

        // optional uint64 filename_md5_prefix = 5;
        case 5: {
            if (tag == 40) {
            parse_filename_md5_prefix:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &filename_md5_prefix_)));
                set_has_filename_md5_prefix();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.PerfBuildID)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.PerfBuildID)
    return false;
#undef DO_
}

void PerfDataProto_PerfBuildID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.PerfBuildID)
    // optional uint32 misc = 1;
    if (has_misc()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->misc(), output);
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
    }

    // optional bytes build_hash = 3;
    if (has_build_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            3, this->build_hash(), output);
    }

    // optional uint64 filename_md5_prefix = 5;
    if (has_filename_md5_prefix()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filename_md5_prefix(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.PerfBuildID)
}

int PerfDataProto_PerfBuildID::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.PerfBuildID)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional uint32 misc = 1;
        if (has_misc()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->misc());
        }

        // optional uint32 pid = 2;
        if (has_pid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->pid());
        }

        // optional bytes build_hash = 3;
        if (has_build_hash()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->build_hash());
        }

        // optional uint64 filename_md5_prefix = 5;
        if (has_filename_md5_prefix()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->filename_md5_prefix());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_PerfBuildID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_PerfBuildID*>(&from));
}

void PerfDataProto_PerfBuildID::MergeFrom(const PerfDataProto_PerfBuildID& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.PerfBuildID)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_misc()) {
            set_misc(from.misc());
        }
        if (from.has_pid()) {
            set_pid(from.pid());
        }
        if (from.has_build_hash()) {
            set_has_build_hash();
            build_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_hash_);
        }
        if (from.has_filename_md5_prefix()) {
            set_filename_md5_prefix(from.filename_md5_prefix());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_PerfBuildID::CopyFrom(const PerfDataProto_PerfBuildID& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.PerfBuildID)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_PerfBuildID::IsInitialized() const
{

    return true;
}

void PerfDataProto_PerfBuildID::Swap(PerfDataProto_PerfBuildID* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_PerfBuildID::InternalSwap(PerfDataProto_PerfBuildID* other)
{
    std::swap(misc_, other->misc_);
    std::swap(pid_, other->pid_);
    build_hash_.Swap(&other->build_hash_);
    std::swap(filename_md5_prefix_, other->filename_md5_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_PerfBuildID::GetTypeName() const
{
    return "metrics.PerfDataProto.PerfBuildID";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForPerfDataProto_StringMetadata(
    PerfDataProto_StringMetadata* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForPerfDataProto_StringMetadata_StringAndMd5sumPrefix(
    PerfDataProto_StringMetadata_StringAndMd5sumPrefix* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_StringMetadata_StringAndMd5sumPrefix::kValueMd5PrefixFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::InitAsDefaultInstance()
{
}

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::PerfDataProto_StringMetadata_StringAndMd5sumPrefix(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    value_md5_prefix_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_StringMetadata_StringAndMd5sumPrefix::~PerfDataProto_StringMetadata_StringAndMd5sumPrefix()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    SharedDtor();
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance_ = NULL;

PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata_StringAndMd5sumPrefix::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_StringMetadata_StringAndMd5sumPrefix* n = new PerfDataProto_StringMetadata_StringAndMd5sumPrefix;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    value_md5_prefix_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_StringMetadata_StringAndMd5sumPrefix, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint64 value_md5_prefix = 2;
        case 2: {
            if (tag == 16) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &value_md5_prefix_)));
                set_has_value_md5_prefix();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    return false;
#undef DO_
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    // optional uint64 value_md5_prefix = 2;
    if (has_value_md5_prefix()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value_md5_prefix(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
}

int PerfDataProto_StringMetadata_StringAndMd5sumPrefix::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    int total_size = 0;

    // optional uint64 value_md5_prefix = 2;
    if (has_value_md5_prefix()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->value_md5_prefix());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(&from));
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergeFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_value_md5_prefix()) {
            set_value_md5_prefix(from.value_md5_prefix());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::CopyFrom(const PerfDataProto_StringMetadata_StringAndMd5sumPrefix& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::IsInitialized() const
{

    return true;
}

void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Swap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::InternalSwap(PerfDataProto_StringMetadata_StringAndMd5sumPrefix* other)
{
    std::swap(value_md5_prefix_, other->value_md5_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_StringMetadata_StringAndMd5sumPrefix::GetTypeName() const
{
    return "metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto_StringMetadata::kPerfCommandLineWholeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto_StringMetadata::PerfDataProto_StringMetadata()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto.StringMetadata)
}

void PerfDataProto_StringMetadata::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    perf_command_line_whole_ = const_cast<::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(
        ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::internal_default_instance());
#else
    perf_command_line_whole_ = const_cast<::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix*>(&::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::default_instance());
#endif
}

PerfDataProto_StringMetadata::PerfDataProto_StringMetadata(const PerfDataProto_StringMetadata& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto.StringMetadata)
}

void PerfDataProto_StringMetadata::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    perf_command_line_whole_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto_StringMetadata::~PerfDataProto_StringMetadata()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto.StringMetadata)
    SharedDtor();
}

void PerfDataProto_StringMetadata::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete perf_command_line_whole_;
    }
}

void PerfDataProto_StringMetadata::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto_StringMetadata& PerfDataProto_StringMetadata::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto_StringMetadata* PerfDataProto_StringMetadata::default_instance_ = NULL;

PerfDataProto_StringMetadata* PerfDataProto_StringMetadata::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto_StringMetadata* n = new PerfDataProto_StringMetadata;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto_StringMetadata::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto.StringMetadata)
    if (has_perf_command_line_whole()) {
        if (perf_command_line_whole_ != NULL)
            perf_command_line_whole_->::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Clear();
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto_StringMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto_StringMetadata, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto.StringMetadata)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
        case 8: {
            if (tag == 66) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_perf_command_line_whole()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto.StringMetadata)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto.StringMetadata)
    return false;
#undef DO_
}

void PerfDataProto_StringMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto.StringMetadata)
    // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
    if (has_perf_command_line_whole()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->perf_command_line_whole_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto.StringMetadata)
}

int PerfDataProto_StringMetadata::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto.StringMetadata)
    int total_size = 0;

    // optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
    if (has_perf_command_line_whole()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->perf_command_line_whole_);
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto_StringMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto_StringMetadata*>(&from));
}

void PerfDataProto_StringMetadata::MergeFrom(const PerfDataProto_StringMetadata& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto.StringMetadata)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_perf_command_line_whole()) {
            mutable_perf_command_line_whole()->::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::MergeFrom(from.perf_command_line_whole());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto_StringMetadata::CopyFrom(const PerfDataProto_StringMetadata& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto.StringMetadata)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto_StringMetadata::IsInitialized() const
{

    return true;
}

void PerfDataProto_StringMetadata::Swap(PerfDataProto_StringMetadata* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto_StringMetadata::InternalSwap(PerfDataProto_StringMetadata* other)
{
    std::swap(perf_command_line_whole_, other->perf_command_line_whole_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto_StringMetadata::GetTypeName() const
{
    return "metrics.PerfDataProto.StringMetadata";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfDataProto::kFileAttrsFieldNumber;
const int PerfDataProto::kEventsFieldNumber;
const int PerfDataProto::kTimestampSecFieldNumber;
const int PerfDataProto::kStatsFieldNumber;
const int PerfDataProto::kBuildIdsFieldNumber;
const int PerfDataProto::kStringMetadataFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfDataProto::PerfDataProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfDataProto)
}

void PerfDataProto::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    stats_ = const_cast<::metrics::PerfDataProto_PerfEventStats*>(
        ::metrics::PerfDataProto_PerfEventStats::internal_default_instance());
#else
    stats_ = const_cast<::metrics::PerfDataProto_PerfEventStats*>(&::metrics::PerfDataProto_PerfEventStats::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    string_metadata_ = const_cast<::metrics::PerfDataProto_StringMetadata*>(
        ::metrics::PerfDataProto_StringMetadata::internal_default_instance());
#else
    string_metadata_ = const_cast<::metrics::PerfDataProto_StringMetadata*>(&::metrics::PerfDataProto_StringMetadata::default_instance());
#endif
}

PerfDataProto::PerfDataProto(const PerfDataProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfDataProto)
}

void PerfDataProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    timestamp_sec_ = GOOGLE_ULONGLONG(0);
    stats_ = NULL;
    string_metadata_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfDataProto::~PerfDataProto()
{
    // @@protoc_insertion_point(destructor:metrics.PerfDataProto)
    SharedDtor();
}

void PerfDataProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete stats_;
        delete string_metadata_;
    }
}

void PerfDataProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfDataProto& PerfDataProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fdata_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fdata_2eproto();
#endif
    return *default_instance_;
}

PerfDataProto* PerfDataProto::default_instance_ = NULL;

PerfDataProto* PerfDataProto::New(::google::protobuf::Arena* arena) const
{
    PerfDataProto* n = new PerfDataProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfDataProto::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.PerfDataProto)
    if (_has_bits_[0 / 32] & 44u) {
        timestamp_sec_ = GOOGLE_ULONGLONG(0);
        if (has_stats()) {
            if (stats_ != NULL)
                stats_->::metrics::PerfDataProto_PerfEventStats::Clear();
        }
        if (has_string_metadata()) {
            if (string_metadata_ != NULL)
                string_metadata_->::metrics::PerfDataProto_StringMetadata::Clear();
        }
    }
    file_attrs_.Clear();
    events_.Clear();
    build_ids_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfDataProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfDataProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
        case 1: {
            if (tag == 10) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_file_attrs:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_file_attrs()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_loop_file_attrs;
            if (input->ExpectTag(18))
                goto parse_loop_events;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .metrics.PerfDataProto.PerfEvent events = 2;
        case 2: {
            if (tag == 18) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_events:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_events()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_loop_events;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(24))
                goto parse_timestamp_sec;
            break;
        }

        // optional uint64 timestamp_sec = 3;
        case 3: {
            if (tag == 24) {
            parse_timestamp_sec:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &timestamp_sec_)));
                set_has_timestamp_sec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_stats;
            break;
        }

        // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
        case 4: {
            if (tag == 34) {
            parse_stats:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_stats()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_build_ids;
            break;
        }

        // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
        case 7: {
            if (tag == 58) {
            parse_build_ids:
                DO_(input->IncrementRecursionDepth());
            parse_loop_build_ids:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_build_ids()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_loop_build_ids;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(106))
                goto parse_string_metadata;
            break;
        }

        // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
        case 13: {
            if (tag == 106) {
            parse_string_metadata:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_string_metadata()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfDataProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfDataProto)
    return false;
#undef DO_
}

void PerfDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfDataProto)
    // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
    for (unsigned int i = 0, n = this->file_attrs_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, this->file_attrs(i), output);
    }

    // repeated .metrics.PerfDataProto.PerfEvent events = 2;
    for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, this->events(i), output);
    }

    // optional uint64 timestamp_sec = 3;
    if (has_timestamp_sec()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_sec(), output);
    }

    // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
    if (has_stats()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->stats_, output);
    }

    // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
    for (unsigned int i = 0, n = this->build_ids_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, this->build_ids(i), output);
    }

    // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
    if (has_string_metadata()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *this->string_metadata_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfDataProto)
}

int PerfDataProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfDataProto)
    int total_size = 0;

    if (_has_bits_[2 / 32] & 44u) {
        // optional uint64 timestamp_sec = 3;
        if (has_timestamp_sec()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->timestamp_sec());
        }

        // optional .metrics.PerfDataProto.PerfEventStats stats = 4;
        if (has_stats()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->stats_);
        }

        // optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
        if (has_string_metadata()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->string_metadata_);
        }
    }
    // repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
    total_size += 1 * this->file_attrs_size();
    for (int i = 0; i < this->file_attrs_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->file_attrs(i));
    }

    // repeated .metrics.PerfDataProto.PerfEvent events = 2;
    total_size += 1 * this->events_size();
    for (int i = 0; i < this->events_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->events(i));
    }

    // repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
    total_size += 1 * this->build_ids_size();
    for (int i = 0; i < this->build_ids_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->build_ids(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfDataProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfDataProto*>(&from));
}

void PerfDataProto::MergeFrom(const PerfDataProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfDataProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    file_attrs_.MergeFrom(from.file_attrs_);
    events_.MergeFrom(from.events_);
    build_ids_.MergeFrom(from.build_ids_);
    if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
        if (from.has_timestamp_sec()) {
            set_timestamp_sec(from.timestamp_sec());
        }
        if (from.has_stats()) {
            mutable_stats()->::metrics::PerfDataProto_PerfEventStats::MergeFrom(from.stats());
        }
        if (from.has_string_metadata()) {
            mutable_string_metadata()->::metrics::PerfDataProto_StringMetadata::MergeFrom(from.string_metadata());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfDataProto::CopyFrom(const PerfDataProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfDataProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfDataProto::IsInitialized() const
{

    return true;
}

void PerfDataProto::Swap(PerfDataProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfDataProto::InternalSwap(PerfDataProto* other)
{
    file_attrs_.UnsafeArenaSwap(&other->file_attrs_);
    events_.UnsafeArenaSwap(&other->events_);
    std::swap(timestamp_sec_, other->timestamp_sec_);
    std::swap(stats_, other->stats_);
    build_ids_.UnsafeArenaSwap(&other->build_ids_);
    std::swap(string_metadata_, other->string_metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfDataProto::GetTypeName() const
{
    return "metrics.PerfDataProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerfDataProto_PerfEventAttr

// optional uint32 type = 1;
bool PerfDataProto_PerfEventAttr::has_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_PerfEventAttr::clear_has_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_PerfEventAttr::clear_type()
{
    type_ = 0u;
    clear_has_type();
}
::google::protobuf::uint32 PerfDataProto_PerfEventAttr::type() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.type)
    return type_;
}
void PerfDataProto_PerfEventAttr::set_type(::google::protobuf::uint32 value)
{
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.type)
}

// optional uint32 size = 2;
bool PerfDataProto_PerfEventAttr::has_size() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_size()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_PerfEventAttr::clear_has_size()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_PerfEventAttr::clear_size()
{
    size_ = 0u;
    clear_has_size();
}
::google::protobuf::uint32 PerfDataProto_PerfEventAttr::size() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.size)
    return size_;
}
void PerfDataProto_PerfEventAttr::set_size(::google::protobuf::uint32 value)
{
    set_has_size();
    size_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.size)
}

// optional uint64 config = 3;
bool PerfDataProto_PerfEventAttr::has_config() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_config()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_PerfEventAttr::clear_has_config()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_PerfEventAttr::clear_config()
{
    config_ = GOOGLE_ULONGLONG(0);
    clear_has_config();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::config() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config)
    return config_;
}
void PerfDataProto_PerfEventAttr::set_config(::google::protobuf::uint64 value)
{
    set_has_config();
    config_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config)
}

// optional uint64 sample_period = 4;
bool PerfDataProto_PerfEventAttr::has_sample_period() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_sample_period()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_PerfEventAttr::clear_has_sample_period()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_PerfEventAttr::clear_sample_period()
{
    sample_period_ = GOOGLE_ULONGLONG(0);
    clear_has_sample_period();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::sample_period() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_period)
    return sample_period_;
}
void PerfDataProto_PerfEventAttr::set_sample_period(::google::protobuf::uint64 value)
{
    set_has_sample_period();
    sample_period_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_period)
}

// optional uint64 sample_freq = 5;
bool PerfDataProto_PerfEventAttr::has_sample_freq() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_sample_freq()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_PerfEventAttr::clear_has_sample_freq()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_PerfEventAttr::clear_sample_freq()
{
    sample_freq_ = GOOGLE_ULONGLONG(0);
    clear_has_sample_freq();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::sample_freq() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_freq)
    return sample_freq_;
}
void PerfDataProto_PerfEventAttr::set_sample_freq(::google::protobuf::uint64 value)
{
    set_has_sample_freq();
    sample_freq_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_freq)
}

// optional uint64 sample_type = 6;
bool PerfDataProto_PerfEventAttr::has_sample_type() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_sample_type()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto_PerfEventAttr::clear_has_sample_type()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto_PerfEventAttr::clear_sample_type()
{
    sample_type_ = GOOGLE_ULONGLONG(0);
    clear_has_sample_type();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::sample_type() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_type)
    return sample_type_;
}
void PerfDataProto_PerfEventAttr::set_sample_type(::google::protobuf::uint64 value)
{
    set_has_sample_type();
    sample_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_type)
}

// optional uint64 read_format = 7;
bool PerfDataProto_PerfEventAttr::has_read_format() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_read_format()
{
    _has_bits_[0] |= 0x00000040u;
}
void PerfDataProto_PerfEventAttr::clear_has_read_format()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PerfDataProto_PerfEventAttr::clear_read_format()
{
    read_format_ = GOOGLE_ULONGLONG(0);
    clear_has_read_format();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::read_format() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.read_format)
    return read_format_;
}
void PerfDataProto_PerfEventAttr::set_read_format(::google::protobuf::uint64 value)
{
    set_has_read_format();
    read_format_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.read_format)
}

// optional bool disabled = 8;
bool PerfDataProto_PerfEventAttr::has_disabled() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_disabled()
{
    _has_bits_[0] |= 0x00000080u;
}
void PerfDataProto_PerfEventAttr::clear_has_disabled()
{
    _has_bits_[0] &= ~0x00000080u;
}
void PerfDataProto_PerfEventAttr::clear_disabled()
{
    disabled_ = false;
    clear_has_disabled();
}
bool PerfDataProto_PerfEventAttr::disabled() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.disabled)
    return disabled_;
}
void PerfDataProto_PerfEventAttr::set_disabled(bool value)
{
    set_has_disabled();
    disabled_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.disabled)
}

// optional bool inherit = 9;
bool PerfDataProto_PerfEventAttr::has_inherit() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_inherit()
{
    _has_bits_[0] |= 0x00000100u;
}
void PerfDataProto_PerfEventAttr::clear_has_inherit()
{
    _has_bits_[0] &= ~0x00000100u;
}
void PerfDataProto_PerfEventAttr::clear_inherit()
{
    inherit_ = false;
    clear_has_inherit();
}
bool PerfDataProto_PerfEventAttr::inherit() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.inherit)
    return inherit_;
}
void PerfDataProto_PerfEventAttr::set_inherit(bool value)
{
    set_has_inherit();
    inherit_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.inherit)
}

// optional bool pinned = 10;
bool PerfDataProto_PerfEventAttr::has_pinned() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_pinned()
{
    _has_bits_[0] |= 0x00000200u;
}
void PerfDataProto_PerfEventAttr::clear_has_pinned()
{
    _has_bits_[0] &= ~0x00000200u;
}
void PerfDataProto_PerfEventAttr::clear_pinned()
{
    pinned_ = false;
    clear_has_pinned();
}
bool PerfDataProto_PerfEventAttr::pinned() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.pinned)
    return pinned_;
}
void PerfDataProto_PerfEventAttr::set_pinned(bool value)
{
    set_has_pinned();
    pinned_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.pinned)
}

// optional bool exclusive = 11;
bool PerfDataProto_PerfEventAttr::has_exclusive() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclusive()
{
    _has_bits_[0] |= 0x00000400u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclusive()
{
    _has_bits_[0] &= ~0x00000400u;
}
void PerfDataProto_PerfEventAttr::clear_exclusive()
{
    exclusive_ = false;
    clear_has_exclusive();
}
bool PerfDataProto_PerfEventAttr::exclusive() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclusive)
    return exclusive_;
}
void PerfDataProto_PerfEventAttr::set_exclusive(bool value)
{
    set_has_exclusive();
    exclusive_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclusive)
}

// optional bool exclude_user = 12;
bool PerfDataProto_PerfEventAttr::has_exclude_user() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclude_user()
{
    _has_bits_[0] |= 0x00000800u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclude_user()
{
    _has_bits_[0] &= ~0x00000800u;
}
void PerfDataProto_PerfEventAttr::clear_exclude_user()
{
    exclude_user_ = false;
    clear_has_exclude_user();
}
bool PerfDataProto_PerfEventAttr::exclude_user() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_user)
    return exclude_user_;
}
void PerfDataProto_PerfEventAttr::set_exclude_user(bool value)
{
    set_has_exclude_user();
    exclude_user_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_user)
}

// optional bool exclude_kernel = 13;
bool PerfDataProto_PerfEventAttr::has_exclude_kernel() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclude_kernel()
{
    _has_bits_[0] |= 0x00001000u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclude_kernel()
{
    _has_bits_[0] &= ~0x00001000u;
}
void PerfDataProto_PerfEventAttr::clear_exclude_kernel()
{
    exclude_kernel_ = false;
    clear_has_exclude_kernel();
}
bool PerfDataProto_PerfEventAttr::exclude_kernel() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_kernel)
    return exclude_kernel_;
}
void PerfDataProto_PerfEventAttr::set_exclude_kernel(bool value)
{
    set_has_exclude_kernel();
    exclude_kernel_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_kernel)
}

// optional bool exclude_hv = 14;
bool PerfDataProto_PerfEventAttr::has_exclude_hv() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclude_hv()
{
    _has_bits_[0] |= 0x00002000u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclude_hv()
{
    _has_bits_[0] &= ~0x00002000u;
}
void PerfDataProto_PerfEventAttr::clear_exclude_hv()
{
    exclude_hv_ = false;
    clear_has_exclude_hv();
}
bool PerfDataProto_PerfEventAttr::exclude_hv() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_hv)
    return exclude_hv_;
}
void PerfDataProto_PerfEventAttr::set_exclude_hv(bool value)
{
    set_has_exclude_hv();
    exclude_hv_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_hv)
}

// optional bool exclude_idle = 15;
bool PerfDataProto_PerfEventAttr::has_exclude_idle() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclude_idle()
{
    _has_bits_[0] |= 0x00004000u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclude_idle()
{
    _has_bits_[0] &= ~0x00004000u;
}
void PerfDataProto_PerfEventAttr::clear_exclude_idle()
{
    exclude_idle_ = false;
    clear_has_exclude_idle();
}
bool PerfDataProto_PerfEventAttr::exclude_idle() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_idle)
    return exclude_idle_;
}
void PerfDataProto_PerfEventAttr::set_exclude_idle(bool value)
{
    set_has_exclude_idle();
    exclude_idle_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_idle)
}

// optional bool mmap = 16;
bool PerfDataProto_PerfEventAttr::has_mmap() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_mmap()
{
    _has_bits_[0] |= 0x00008000u;
}
void PerfDataProto_PerfEventAttr::clear_has_mmap()
{
    _has_bits_[0] &= ~0x00008000u;
}
void PerfDataProto_PerfEventAttr::clear_mmap()
{
    mmap_ = false;
    clear_has_mmap();
}
bool PerfDataProto_PerfEventAttr::mmap() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.mmap)
    return mmap_;
}
void PerfDataProto_PerfEventAttr::set_mmap(bool value)
{
    set_has_mmap();
    mmap_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.mmap)
}

// optional bool comm = 17;
bool PerfDataProto_PerfEventAttr::has_comm() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_comm()
{
    _has_bits_[0] |= 0x00010000u;
}
void PerfDataProto_PerfEventAttr::clear_has_comm()
{
    _has_bits_[0] &= ~0x00010000u;
}
void PerfDataProto_PerfEventAttr::clear_comm()
{
    comm_ = false;
    clear_has_comm();
}
bool PerfDataProto_PerfEventAttr::comm() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.comm)
    return comm_;
}
void PerfDataProto_PerfEventAttr::set_comm(bool value)
{
    set_has_comm();
    comm_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.comm)
}

// optional bool freq = 18;
bool PerfDataProto_PerfEventAttr::has_freq() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_freq()
{
    _has_bits_[0] |= 0x00020000u;
}
void PerfDataProto_PerfEventAttr::clear_has_freq()
{
    _has_bits_[0] &= ~0x00020000u;
}
void PerfDataProto_PerfEventAttr::clear_freq()
{
    freq_ = false;
    clear_has_freq();
}
bool PerfDataProto_PerfEventAttr::freq() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.freq)
    return freq_;
}
void PerfDataProto_PerfEventAttr::set_freq(bool value)
{
    set_has_freq();
    freq_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.freq)
}

// optional bool inherit_stat = 19;
bool PerfDataProto_PerfEventAttr::has_inherit_stat() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_inherit_stat()
{
    _has_bits_[0] |= 0x00040000u;
}
void PerfDataProto_PerfEventAttr::clear_has_inherit_stat()
{
    _has_bits_[0] &= ~0x00040000u;
}
void PerfDataProto_PerfEventAttr::clear_inherit_stat()
{
    inherit_stat_ = false;
    clear_has_inherit_stat();
}
bool PerfDataProto_PerfEventAttr::inherit_stat() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.inherit_stat)
    return inherit_stat_;
}
void PerfDataProto_PerfEventAttr::set_inherit_stat(bool value)
{
    set_has_inherit_stat();
    inherit_stat_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.inherit_stat)
}

// optional bool enable_on_exec = 20;
bool PerfDataProto_PerfEventAttr::has_enable_on_exec() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_enable_on_exec()
{
    _has_bits_[0] |= 0x00080000u;
}
void PerfDataProto_PerfEventAttr::clear_has_enable_on_exec()
{
    _has_bits_[0] &= ~0x00080000u;
}
void PerfDataProto_PerfEventAttr::clear_enable_on_exec()
{
    enable_on_exec_ = false;
    clear_has_enable_on_exec();
}
bool PerfDataProto_PerfEventAttr::enable_on_exec() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.enable_on_exec)
    return enable_on_exec_;
}
void PerfDataProto_PerfEventAttr::set_enable_on_exec(bool value)
{
    set_has_enable_on_exec();
    enable_on_exec_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.enable_on_exec)
}

// optional bool task = 21;
bool PerfDataProto_PerfEventAttr::has_task() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_task()
{
    _has_bits_[0] |= 0x00100000u;
}
void PerfDataProto_PerfEventAttr::clear_has_task()
{
    _has_bits_[0] &= ~0x00100000u;
}
void PerfDataProto_PerfEventAttr::clear_task()
{
    task_ = false;
    clear_has_task();
}
bool PerfDataProto_PerfEventAttr::task() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.task)
    return task_;
}
void PerfDataProto_PerfEventAttr::set_task(bool value)
{
    set_has_task();
    task_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.task)
}

// optional bool watermark = 22;
bool PerfDataProto_PerfEventAttr::has_watermark() const
{
    return (_has_bits_[0] & 0x00200000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_watermark()
{
    _has_bits_[0] |= 0x00200000u;
}
void PerfDataProto_PerfEventAttr::clear_has_watermark()
{
    _has_bits_[0] &= ~0x00200000u;
}
void PerfDataProto_PerfEventAttr::clear_watermark()
{
    watermark_ = false;
    clear_has_watermark();
}
bool PerfDataProto_PerfEventAttr::watermark() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.watermark)
    return watermark_;
}
void PerfDataProto_PerfEventAttr::set_watermark(bool value)
{
    set_has_watermark();
    watermark_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.watermark)
}

// optional uint32 precise_ip = 23;
bool PerfDataProto_PerfEventAttr::has_precise_ip() const
{
    return (_has_bits_[0] & 0x00400000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_precise_ip()
{
    _has_bits_[0] |= 0x00400000u;
}
void PerfDataProto_PerfEventAttr::clear_has_precise_ip()
{
    _has_bits_[0] &= ~0x00400000u;
}
void PerfDataProto_PerfEventAttr::clear_precise_ip()
{
    precise_ip_ = 0u;
    clear_has_precise_ip();
}
::google::protobuf::uint32 PerfDataProto_PerfEventAttr::precise_ip() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.precise_ip)
    return precise_ip_;
}
void PerfDataProto_PerfEventAttr::set_precise_ip(::google::protobuf::uint32 value)
{
    set_has_precise_ip();
    precise_ip_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.precise_ip)
}

// optional bool mmap_data = 24;
bool PerfDataProto_PerfEventAttr::has_mmap_data() const
{
    return (_has_bits_[0] & 0x00800000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_mmap_data()
{
    _has_bits_[0] |= 0x00800000u;
}
void PerfDataProto_PerfEventAttr::clear_has_mmap_data()
{
    _has_bits_[0] &= ~0x00800000u;
}
void PerfDataProto_PerfEventAttr::clear_mmap_data()
{
    mmap_data_ = false;
    clear_has_mmap_data();
}
bool PerfDataProto_PerfEventAttr::mmap_data() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.mmap_data)
    return mmap_data_;
}
void PerfDataProto_PerfEventAttr::set_mmap_data(bool value)
{
    set_has_mmap_data();
    mmap_data_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.mmap_data)
}

// optional bool sample_id_all = 25;
bool PerfDataProto_PerfEventAttr::has_sample_id_all() const
{
    return (_has_bits_[0] & 0x01000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_sample_id_all()
{
    _has_bits_[0] |= 0x01000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_sample_id_all()
{
    _has_bits_[0] &= ~0x01000000u;
}
void PerfDataProto_PerfEventAttr::clear_sample_id_all()
{
    sample_id_all_ = false;
    clear_has_sample_id_all();
}
bool PerfDataProto_PerfEventAttr::sample_id_all() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.sample_id_all)
    return sample_id_all_;
}
void PerfDataProto_PerfEventAttr::set_sample_id_all(bool value)
{
    set_has_sample_id_all();
    sample_id_all_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.sample_id_all)
}

// optional bool exclude_host = 26;
bool PerfDataProto_PerfEventAttr::has_exclude_host() const
{
    return (_has_bits_[0] & 0x02000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclude_host()
{
    _has_bits_[0] |= 0x02000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclude_host()
{
    _has_bits_[0] &= ~0x02000000u;
}
void PerfDataProto_PerfEventAttr::clear_exclude_host()
{
    exclude_host_ = false;
    clear_has_exclude_host();
}
bool PerfDataProto_PerfEventAttr::exclude_host() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_host)
    return exclude_host_;
}
void PerfDataProto_PerfEventAttr::set_exclude_host(bool value)
{
    set_has_exclude_host();
    exclude_host_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_host)
}

// optional bool exclude_guest = 27;
bool PerfDataProto_PerfEventAttr::has_exclude_guest() const
{
    return (_has_bits_[0] & 0x04000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_exclude_guest()
{
    _has_bits_[0] |= 0x04000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_exclude_guest()
{
    _has_bits_[0] &= ~0x04000000u;
}
void PerfDataProto_PerfEventAttr::clear_exclude_guest()
{
    exclude_guest_ = false;
    clear_has_exclude_guest();
}
bool PerfDataProto_PerfEventAttr::exclude_guest() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.exclude_guest)
    return exclude_guest_;
}
void PerfDataProto_PerfEventAttr::set_exclude_guest(bool value)
{
    set_has_exclude_guest();
    exclude_guest_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.exclude_guest)
}

// optional uint32 wakeup_events = 28;
bool PerfDataProto_PerfEventAttr::has_wakeup_events() const
{
    return (_has_bits_[0] & 0x08000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_wakeup_events()
{
    _has_bits_[0] |= 0x08000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_wakeup_events()
{
    _has_bits_[0] &= ~0x08000000u;
}
void PerfDataProto_PerfEventAttr::clear_wakeup_events()
{
    wakeup_events_ = 0u;
    clear_has_wakeup_events();
}
::google::protobuf::uint32 PerfDataProto_PerfEventAttr::wakeup_events() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.wakeup_events)
    return wakeup_events_;
}
void PerfDataProto_PerfEventAttr::set_wakeup_events(::google::protobuf::uint32 value)
{
    set_has_wakeup_events();
    wakeup_events_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.wakeup_events)
}

// optional uint32 wakeup_watermark = 29;
bool PerfDataProto_PerfEventAttr::has_wakeup_watermark() const
{
    return (_has_bits_[0] & 0x10000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_wakeup_watermark()
{
    _has_bits_[0] |= 0x10000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_wakeup_watermark()
{
    _has_bits_[0] &= ~0x10000000u;
}
void PerfDataProto_PerfEventAttr::clear_wakeup_watermark()
{
    wakeup_watermark_ = 0u;
    clear_has_wakeup_watermark();
}
::google::protobuf::uint32 PerfDataProto_PerfEventAttr::wakeup_watermark() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.wakeup_watermark)
    return wakeup_watermark_;
}
void PerfDataProto_PerfEventAttr::set_wakeup_watermark(::google::protobuf::uint32 value)
{
    set_has_wakeup_watermark();
    wakeup_watermark_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.wakeup_watermark)
}

// optional uint32 bp_type = 30;
bool PerfDataProto_PerfEventAttr::has_bp_type() const
{
    return (_has_bits_[0] & 0x20000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_bp_type()
{
    _has_bits_[0] |= 0x20000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_bp_type()
{
    _has_bits_[0] &= ~0x20000000u;
}
void PerfDataProto_PerfEventAttr::clear_bp_type()
{
    bp_type_ = 0u;
    clear_has_bp_type();
}
::google::protobuf::uint32 PerfDataProto_PerfEventAttr::bp_type() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_type)
    return bp_type_;
}
void PerfDataProto_PerfEventAttr::set_bp_type(::google::protobuf::uint32 value)
{
    set_has_bp_type();
    bp_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_type)
}

// optional uint64 bp_addr = 31;
bool PerfDataProto_PerfEventAttr::has_bp_addr() const
{
    return (_has_bits_[0] & 0x40000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_bp_addr()
{
    _has_bits_[0] |= 0x40000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_bp_addr()
{
    _has_bits_[0] &= ~0x40000000u;
}
void PerfDataProto_PerfEventAttr::clear_bp_addr()
{
    bp_addr_ = GOOGLE_ULONGLONG(0);
    clear_has_bp_addr();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::bp_addr() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_addr)
    return bp_addr_;
}
void PerfDataProto_PerfEventAttr::set_bp_addr(::google::protobuf::uint64 value)
{
    set_has_bp_addr();
    bp_addr_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_addr)
}

// optional uint64 config1 = 32;
bool PerfDataProto_PerfEventAttr::has_config1() const
{
    return (_has_bits_[0] & 0x80000000u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_config1()
{
    _has_bits_[0] |= 0x80000000u;
}
void PerfDataProto_PerfEventAttr::clear_has_config1()
{
    _has_bits_[0] &= ~0x80000000u;
}
void PerfDataProto_PerfEventAttr::clear_config1()
{
    config1_ = GOOGLE_ULONGLONG(0);
    clear_has_config1();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::config1() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config1)
    return config1_;
}
void PerfDataProto_PerfEventAttr::set_config1(::google::protobuf::uint64 value)
{
    set_has_config1();
    config1_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config1)
}

// optional uint64 bp_len = 33;
bool PerfDataProto_PerfEventAttr::has_bp_len() const
{
    return (_has_bits_[1] & 0x00000001u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_bp_len()
{
    _has_bits_[1] |= 0x00000001u;
}
void PerfDataProto_PerfEventAttr::clear_has_bp_len()
{
    _has_bits_[1] &= ~0x00000001u;
}
void PerfDataProto_PerfEventAttr::clear_bp_len()
{
    bp_len_ = GOOGLE_ULONGLONG(0);
    clear_has_bp_len();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::bp_len() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.bp_len)
    return bp_len_;
}
void PerfDataProto_PerfEventAttr::set_bp_len(::google::protobuf::uint64 value)
{
    set_has_bp_len();
    bp_len_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.bp_len)
}

// optional uint64 config2 = 34;
bool PerfDataProto_PerfEventAttr::has_config2() const
{
    return (_has_bits_[1] & 0x00000002u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_config2()
{
    _has_bits_[1] |= 0x00000002u;
}
void PerfDataProto_PerfEventAttr::clear_has_config2()
{
    _has_bits_[1] &= ~0x00000002u;
}
void PerfDataProto_PerfEventAttr::clear_config2()
{
    config2_ = GOOGLE_ULONGLONG(0);
    clear_has_config2();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::config2() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.config2)
    return config2_;
}
void PerfDataProto_PerfEventAttr::set_config2(::google::protobuf::uint64 value)
{
    set_has_config2();
    config2_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.config2)
}

// optional uint64 branch_sample_type = 35;
bool PerfDataProto_PerfEventAttr::has_branch_sample_type() const
{
    return (_has_bits_[1] & 0x00000004u) != 0;
}
void PerfDataProto_PerfEventAttr::set_has_branch_sample_type()
{
    _has_bits_[1] |= 0x00000004u;
}
void PerfDataProto_PerfEventAttr::clear_has_branch_sample_type()
{
    _has_bits_[1] &= ~0x00000004u;
}
void PerfDataProto_PerfEventAttr::clear_branch_sample_type()
{
    branch_sample_type_ = GOOGLE_ULONGLONG(0);
    clear_has_branch_sample_type();
}
::google::protobuf::uint64 PerfDataProto_PerfEventAttr::branch_sample_type() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventAttr.branch_sample_type)
    return branch_sample_type_;
}
void PerfDataProto_PerfEventAttr::set_branch_sample_type(::google::protobuf::uint64 value)
{
    set_has_branch_sample_type();
    branch_sample_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventAttr.branch_sample_type)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfFileAttr

// optional .metrics.PerfDataProto.PerfEventAttr attr = 1;
bool PerfDataProto_PerfFileAttr::has_attr() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_PerfFileAttr::set_has_attr()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_PerfFileAttr::clear_has_attr()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_PerfFileAttr::clear_attr()
{
    if (attr_ != NULL)
        attr_->::metrics::PerfDataProto_PerfEventAttr::Clear();
    clear_has_attr();
}
const ::metrics::PerfDataProto_PerfEventAttr& PerfDataProto_PerfFileAttr::attr() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfFileAttr.attr)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return attr_ != NULL ? *attr_ : *default_instance().attr_;
#else
    return attr_ != NULL ? *attr_ : *default_instance_->attr_;
#endif
}
::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::mutable_attr()
{
    set_has_attr();
    if (attr_ == NULL) {
        attr_ = new ::metrics::PerfDataProto_PerfEventAttr;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfFileAttr.attr)
    return attr_;
}
::metrics::PerfDataProto_PerfEventAttr* PerfDataProto_PerfFileAttr::release_attr()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfFileAttr.attr)
    clear_has_attr();
    ::metrics::PerfDataProto_PerfEventAttr* temp = attr_;
    attr_ = NULL;
    return temp;
}
void PerfDataProto_PerfFileAttr::set_allocated_attr(::metrics::PerfDataProto_PerfEventAttr* attr)
{
    delete attr_;
    attr_ = attr;
    if (attr) {
        set_has_attr();
    } else {
        clear_has_attr();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfFileAttr.attr)
}

// repeated uint64 ids = 2;
int PerfDataProto_PerfFileAttr::ids_size() const
{
    return ids_.size();
}
void PerfDataProto_PerfFileAttr::clear_ids()
{
    ids_.Clear();
}
::google::protobuf::uint64 PerfDataProto_PerfFileAttr::ids(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfFileAttr.ids)
    return ids_.Get(index);
}
void PerfDataProto_PerfFileAttr::set_ids(int index, ::google::protobuf::uint64 value)
{
    ids_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfFileAttr.ids)
}
void PerfDataProto_PerfFileAttr::add_ids(::google::protobuf::uint64 value)
{
    ids_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.PerfDataProto.PerfFileAttr.ids)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint64>&
PerfDataProto_PerfFileAttr::ids() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfDataProto.PerfFileAttr.ids)
    return ids_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint64>*
PerfDataProto_PerfFileAttr::mutable_ids()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.PerfFileAttr.ids)
    return &ids_;
}

// -------------------------------------------------------------------

// PerfDataProto_SampleInfo

// optional uint32 pid = 1;
bool PerfDataProto_SampleInfo::has_pid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_SampleInfo::set_has_pid()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_SampleInfo::clear_has_pid()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_SampleInfo::clear_pid()
{
    pid_ = 0u;
    clear_has_pid();
}
::google::protobuf::uint32 PerfDataProto_SampleInfo::pid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.pid)
    return pid_;
}
void PerfDataProto_SampleInfo::set_pid(::google::protobuf::uint32 value)
{
    set_has_pid();
    pid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.pid)
}

// optional uint32 tid = 2;
bool PerfDataProto_SampleInfo::has_tid() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_SampleInfo::set_has_tid()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_SampleInfo::clear_has_tid()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_SampleInfo::clear_tid()
{
    tid_ = 0u;
    clear_has_tid();
}
::google::protobuf::uint32 PerfDataProto_SampleInfo::tid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.tid)
    return tid_;
}
void PerfDataProto_SampleInfo::set_tid(::google::protobuf::uint32 value)
{
    set_has_tid();
    tid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.tid)
}

// optional uint64 sample_time_ns = 3;
bool PerfDataProto_SampleInfo::has_sample_time_ns() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_SampleInfo::set_has_sample_time_ns()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_SampleInfo::clear_has_sample_time_ns()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_SampleInfo::clear_sample_time_ns()
{
    sample_time_ns_ = GOOGLE_ULONGLONG(0);
    clear_has_sample_time_ns();
}
::google::protobuf::uint64 PerfDataProto_SampleInfo::sample_time_ns() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.sample_time_ns)
    return sample_time_ns_;
}
void PerfDataProto_SampleInfo::set_sample_time_ns(::google::protobuf::uint64 value)
{
    set_has_sample_time_ns();
    sample_time_ns_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.sample_time_ns)
}

// optional uint64 id = 4;
bool PerfDataProto_SampleInfo::has_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_SampleInfo::set_has_id()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_SampleInfo::clear_has_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_SampleInfo::clear_id()
{
    id_ = GOOGLE_ULONGLONG(0);
    clear_has_id();
}
::google::protobuf::uint64 PerfDataProto_SampleInfo::id() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.id)
    return id_;
}
void PerfDataProto_SampleInfo::set_id(::google::protobuf::uint64 value)
{
    set_has_id();
    id_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.id)
}

// optional uint32 cpu = 5;
bool PerfDataProto_SampleInfo::has_cpu() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_SampleInfo::set_has_cpu()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_SampleInfo::clear_has_cpu()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_SampleInfo::clear_cpu()
{
    cpu_ = 0u;
    clear_has_cpu();
}
::google::protobuf::uint32 PerfDataProto_SampleInfo::cpu() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleInfo.cpu)
    return cpu_;
}
void PerfDataProto_SampleInfo::set_cpu(::google::protobuf::uint32 value)
{
    set_has_cpu();
    cpu_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleInfo.cpu)
}

// -------------------------------------------------------------------

// PerfDataProto_CommEvent

// optional uint32 pid = 1;
bool PerfDataProto_CommEvent::has_pid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_CommEvent::set_has_pid()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_CommEvent::clear_has_pid()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_CommEvent::clear_pid()
{
    pid_ = 0u;
    clear_has_pid();
}
::google::protobuf::uint32 PerfDataProto_CommEvent::pid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.pid)
    return pid_;
}
void PerfDataProto_CommEvent::set_pid(::google::protobuf::uint32 value)
{
    set_has_pid();
    pid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.pid)
}

// optional uint32 tid = 2;
bool PerfDataProto_CommEvent::has_tid() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_CommEvent::set_has_tid()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_CommEvent::clear_has_tid()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_CommEvent::clear_tid()
{
    tid_ = 0u;
    clear_has_tid();
}
::google::protobuf::uint32 PerfDataProto_CommEvent::tid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.tid)
    return tid_;
}
void PerfDataProto_CommEvent::set_tid(::google::protobuf::uint32 value)
{
    set_has_tid();
    tid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.tid)
}

// optional uint64 comm_md5_prefix = 4;
bool PerfDataProto_CommEvent::has_comm_md5_prefix() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_CommEvent::set_has_comm_md5_prefix()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_CommEvent::clear_has_comm_md5_prefix()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_CommEvent::clear_comm_md5_prefix()
{
    comm_md5_prefix_ = GOOGLE_ULONGLONG(0);
    clear_has_comm_md5_prefix();
}
::google::protobuf::uint64 PerfDataProto_CommEvent::comm_md5_prefix() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.comm_md5_prefix)
    return comm_md5_prefix_;
}
void PerfDataProto_CommEvent::set_comm_md5_prefix(::google::protobuf::uint64 value)
{
    set_has_comm_md5_prefix();
    comm_md5_prefix_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.comm_md5_prefix)
}

// optional uint64 sample_time = 5 [deprecated = true];
bool PerfDataProto_CommEvent::has_sample_time() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_CommEvent::set_has_sample_time()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_CommEvent::clear_has_sample_time()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_CommEvent::clear_sample_time()
{
    sample_time_ = GOOGLE_ULONGLONG(0);
    clear_has_sample_time();
}
::google::protobuf::uint64 PerfDataProto_CommEvent::sample_time() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.sample_time)
    return sample_time_;
}
void PerfDataProto_CommEvent::set_sample_time(::google::protobuf::uint64 value)
{
    set_has_sample_time();
    sample_time_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.CommEvent.sample_time)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 6;
bool PerfDataProto_CommEvent::has_sample_info() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_CommEvent::set_has_sample_info()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_CommEvent::clear_has_sample_info()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_CommEvent::clear_sample_info()
{
    if (sample_info_ != NULL)
        sample_info_->::metrics::PerfDataProto_SampleInfo::Clear();
    clear_has_sample_info();
}
const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_CommEvent::sample_info() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.CommEvent.sample_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return sample_info_ != NULL ? *sample_info_ : *default_instance().sample_info_;
#else
    return sample_info_ != NULL ? *sample_info_ : *default_instance_->sample_info_;
#endif
}
::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::mutable_sample_info()
{
    set_has_sample_info();
    if (sample_info_ == NULL) {
        sample_info_ = new ::metrics::PerfDataProto_SampleInfo;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.CommEvent.sample_info)
    return sample_info_;
}
::metrics::PerfDataProto_SampleInfo* PerfDataProto_CommEvent::release_sample_info()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.CommEvent.sample_info)
    clear_has_sample_info();
    ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
    sample_info_ = NULL;
    return temp;
}
void PerfDataProto_CommEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info)
{
    delete sample_info_;
    sample_info_ = sample_info;
    if (sample_info) {
        set_has_sample_info();
    } else {
        clear_has_sample_info();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.CommEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_MMapEvent

// optional uint32 pid = 1;
bool PerfDataProto_MMapEvent::has_pid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_MMapEvent::set_has_pid()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_MMapEvent::clear_has_pid()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_MMapEvent::clear_pid()
{
    pid_ = 0u;
    clear_has_pid();
}
::google::protobuf::uint32 PerfDataProto_MMapEvent::pid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.pid)
    return pid_;
}
void PerfDataProto_MMapEvent::set_pid(::google::protobuf::uint32 value)
{
    set_has_pid();
    pid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.pid)
}

// optional uint32 tid = 2;
bool PerfDataProto_MMapEvent::has_tid() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_MMapEvent::set_has_tid()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_MMapEvent::clear_has_tid()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_MMapEvent::clear_tid()
{
    tid_ = 0u;
    clear_has_tid();
}
::google::protobuf::uint32 PerfDataProto_MMapEvent::tid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.tid)
    return tid_;
}
void PerfDataProto_MMapEvent::set_tid(::google::protobuf::uint32 value)
{
    set_has_tid();
    tid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.tid)
}

// optional uint64 start = 3;
bool PerfDataProto_MMapEvent::has_start() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_MMapEvent::set_has_start()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_MMapEvent::clear_has_start()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_MMapEvent::clear_start()
{
    start_ = GOOGLE_ULONGLONG(0);
    clear_has_start();
}
::google::protobuf::uint64 PerfDataProto_MMapEvent::start() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.start)
    return start_;
}
void PerfDataProto_MMapEvent::set_start(::google::protobuf::uint64 value)
{
    set_has_start();
    start_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.start)
}

// optional uint64 len = 4;
bool PerfDataProto_MMapEvent::has_len() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_MMapEvent::set_has_len()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_MMapEvent::clear_has_len()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_MMapEvent::clear_len()
{
    len_ = GOOGLE_ULONGLONG(0);
    clear_has_len();
}
::google::protobuf::uint64 PerfDataProto_MMapEvent::len() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.len)
    return len_;
}
void PerfDataProto_MMapEvent::set_len(::google::protobuf::uint64 value)
{
    set_has_len();
    len_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.len)
}

// optional uint64 pgoff = 5;
bool PerfDataProto_MMapEvent::has_pgoff() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_MMapEvent::set_has_pgoff()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_MMapEvent::clear_has_pgoff()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_MMapEvent::clear_pgoff()
{
    pgoff_ = GOOGLE_ULONGLONG(0);
    clear_has_pgoff();
}
::google::protobuf::uint64 PerfDataProto_MMapEvent::pgoff() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.pgoff)
    return pgoff_;
}
void PerfDataProto_MMapEvent::set_pgoff(::google::protobuf::uint64 value)
{
    set_has_pgoff();
    pgoff_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.pgoff)
}

// optional uint64 filename_md5_prefix = 7;
bool PerfDataProto_MMapEvent::has_filename_md5_prefix() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto_MMapEvent::set_has_filename_md5_prefix()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto_MMapEvent::clear_has_filename_md5_prefix()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto_MMapEvent::clear_filename_md5_prefix()
{
    filename_md5_prefix_ = GOOGLE_ULONGLONG(0);
    clear_has_filename_md5_prefix();
}
::google::protobuf::uint64 PerfDataProto_MMapEvent::filename_md5_prefix() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.filename_md5_prefix)
    return filename_md5_prefix_;
}
void PerfDataProto_MMapEvent::set_filename_md5_prefix(::google::protobuf::uint64 value)
{
    set_has_filename_md5_prefix();
    filename_md5_prefix_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.MMapEvent.filename_md5_prefix)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 8;
bool PerfDataProto_MMapEvent::has_sample_info() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerfDataProto_MMapEvent::set_has_sample_info()
{
    _has_bits_[0] |= 0x00000040u;
}
void PerfDataProto_MMapEvent::clear_has_sample_info()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PerfDataProto_MMapEvent::clear_sample_info()
{
    if (sample_info_ != NULL)
        sample_info_->::metrics::PerfDataProto_SampleInfo::Clear();
    clear_has_sample_info();
}
const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_MMapEvent::sample_info() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.MMapEvent.sample_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return sample_info_ != NULL ? *sample_info_ : *default_instance().sample_info_;
#else
    return sample_info_ != NULL ? *sample_info_ : *default_instance_->sample_info_;
#endif
}
::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::mutable_sample_info()
{
    set_has_sample_info();
    if (sample_info_ == NULL) {
        sample_info_ = new ::metrics::PerfDataProto_SampleInfo;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.MMapEvent.sample_info)
    return sample_info_;
}
::metrics::PerfDataProto_SampleInfo* PerfDataProto_MMapEvent::release_sample_info()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.MMapEvent.sample_info)
    clear_has_sample_info();
    ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
    sample_info_ = NULL;
    return temp;
}
void PerfDataProto_MMapEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info)
{
    delete sample_info_;
    sample_info_ = sample_info;
    if (sample_info) {
        set_has_sample_info();
    } else {
        clear_has_sample_info();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.MMapEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_BranchStackEntry

// optional uint64 from_ip = 1;
bool PerfDataProto_BranchStackEntry::has_from_ip() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_BranchStackEntry::set_has_from_ip()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_BranchStackEntry::clear_has_from_ip()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_BranchStackEntry::clear_from_ip()
{
    from_ip_ = GOOGLE_ULONGLONG(0);
    clear_has_from_ip();
}
::google::protobuf::uint64 PerfDataProto_BranchStackEntry::from_ip() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.from_ip)
    return from_ip_;
}
void PerfDataProto_BranchStackEntry::set_from_ip(::google::protobuf::uint64 value)
{
    set_has_from_ip();
    from_ip_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.from_ip)
}

// optional uint64 to_ip = 2;
bool PerfDataProto_BranchStackEntry::has_to_ip() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_BranchStackEntry::set_has_to_ip()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_BranchStackEntry::clear_has_to_ip()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_BranchStackEntry::clear_to_ip()
{
    to_ip_ = GOOGLE_ULONGLONG(0);
    clear_has_to_ip();
}
::google::protobuf::uint64 PerfDataProto_BranchStackEntry::to_ip() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.to_ip)
    return to_ip_;
}
void PerfDataProto_BranchStackEntry::set_to_ip(::google::protobuf::uint64 value)
{
    set_has_to_ip();
    to_ip_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.to_ip)
}

// optional bool mispredicted = 3;
bool PerfDataProto_BranchStackEntry::has_mispredicted() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_BranchStackEntry::set_has_mispredicted()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_BranchStackEntry::clear_has_mispredicted()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_BranchStackEntry::clear_mispredicted()
{
    mispredicted_ = false;
    clear_has_mispredicted();
}
bool PerfDataProto_BranchStackEntry::mispredicted() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.BranchStackEntry.mispredicted)
    return mispredicted_;
}
void PerfDataProto_BranchStackEntry::set_mispredicted(bool value)
{
    set_has_mispredicted();
    mispredicted_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.BranchStackEntry.mispredicted)
}

// -------------------------------------------------------------------

// PerfDataProto_SampleEvent

// optional uint64 ip = 1;
bool PerfDataProto_SampleEvent::has_ip() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_SampleEvent::set_has_ip()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_SampleEvent::clear_has_ip()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_SampleEvent::clear_ip()
{
    ip_ = GOOGLE_ULONGLONG(0);
    clear_has_ip();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::ip() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.ip)
    return ip_;
}
void PerfDataProto_SampleEvent::set_ip(::google::protobuf::uint64 value)
{
    set_has_ip();
    ip_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.ip)
}

// optional uint32 pid = 2;
bool PerfDataProto_SampleEvent::has_pid() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_SampleEvent::set_has_pid()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_SampleEvent::clear_has_pid()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_SampleEvent::clear_pid()
{
    pid_ = 0u;
    clear_has_pid();
}
::google::protobuf::uint32 PerfDataProto_SampleEvent::pid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.pid)
    return pid_;
}
void PerfDataProto_SampleEvent::set_pid(::google::protobuf::uint32 value)
{
    set_has_pid();
    pid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.pid)
}

// optional uint32 tid = 3;
bool PerfDataProto_SampleEvent::has_tid() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_SampleEvent::set_has_tid()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_SampleEvent::clear_has_tid()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_SampleEvent::clear_tid()
{
    tid_ = 0u;
    clear_has_tid();
}
::google::protobuf::uint32 PerfDataProto_SampleEvent::tid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.tid)
    return tid_;
}
void PerfDataProto_SampleEvent::set_tid(::google::protobuf::uint32 value)
{
    set_has_tid();
    tid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.tid)
}

// optional uint64 sample_time_ns = 4;
bool PerfDataProto_SampleEvent::has_sample_time_ns() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_SampleEvent::set_has_sample_time_ns()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_SampleEvent::clear_has_sample_time_ns()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_SampleEvent::clear_sample_time_ns()
{
    sample_time_ns_ = GOOGLE_ULONGLONG(0);
    clear_has_sample_time_ns();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::sample_time_ns() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.sample_time_ns)
    return sample_time_ns_;
}
void PerfDataProto_SampleEvent::set_sample_time_ns(::google::protobuf::uint64 value)
{
    set_has_sample_time_ns();
    sample_time_ns_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.sample_time_ns)
}

// optional uint64 addr = 5;
bool PerfDataProto_SampleEvent::has_addr() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_SampleEvent::set_has_addr()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_SampleEvent::clear_has_addr()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_SampleEvent::clear_addr()
{
    addr_ = GOOGLE_ULONGLONG(0);
    clear_has_addr();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::addr() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.addr)
    return addr_;
}
void PerfDataProto_SampleEvent::set_addr(::google::protobuf::uint64 value)
{
    set_has_addr();
    addr_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.addr)
}

// optional uint64 id = 6;
bool PerfDataProto_SampleEvent::has_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto_SampleEvent::set_has_id()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto_SampleEvent::clear_has_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto_SampleEvent::clear_id()
{
    id_ = GOOGLE_ULONGLONG(0);
    clear_has_id();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::id() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.id)
    return id_;
}
void PerfDataProto_SampleEvent::set_id(::google::protobuf::uint64 value)
{
    set_has_id();
    id_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.id)
}

// optional uint64 stream_id = 7;
bool PerfDataProto_SampleEvent::has_stream_id() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerfDataProto_SampleEvent::set_has_stream_id()
{
    _has_bits_[0] |= 0x00000040u;
}
void PerfDataProto_SampleEvent::clear_has_stream_id()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PerfDataProto_SampleEvent::clear_stream_id()
{
    stream_id_ = GOOGLE_ULONGLONG(0);
    clear_has_stream_id();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::stream_id() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.stream_id)
    return stream_id_;
}
void PerfDataProto_SampleEvent::set_stream_id(::google::protobuf::uint64 value)
{
    set_has_stream_id();
    stream_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.stream_id)
}

// optional uint64 period = 8;
bool PerfDataProto_SampleEvent::has_period() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void PerfDataProto_SampleEvent::set_has_period()
{
    _has_bits_[0] |= 0x00000080u;
}
void PerfDataProto_SampleEvent::clear_has_period()
{
    _has_bits_[0] &= ~0x00000080u;
}
void PerfDataProto_SampleEvent::clear_period()
{
    period_ = GOOGLE_ULONGLONG(0);
    clear_has_period();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::period() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.period)
    return period_;
}
void PerfDataProto_SampleEvent::set_period(::google::protobuf::uint64 value)
{
    set_has_period();
    period_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.period)
}

// optional uint32 cpu = 9;
bool PerfDataProto_SampleEvent::has_cpu() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void PerfDataProto_SampleEvent::set_has_cpu()
{
    _has_bits_[0] |= 0x00000100u;
}
void PerfDataProto_SampleEvent::clear_has_cpu()
{
    _has_bits_[0] &= ~0x00000100u;
}
void PerfDataProto_SampleEvent::clear_cpu()
{
    cpu_ = 0u;
    clear_has_cpu();
}
::google::protobuf::uint32 PerfDataProto_SampleEvent::cpu() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.cpu)
    return cpu_;
}
void PerfDataProto_SampleEvent::set_cpu(::google::protobuf::uint32 value)
{
    set_has_cpu();
    cpu_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.cpu)
}

// optional uint32 raw_size = 10;
bool PerfDataProto_SampleEvent::has_raw_size() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void PerfDataProto_SampleEvent::set_has_raw_size()
{
    _has_bits_[0] |= 0x00000200u;
}
void PerfDataProto_SampleEvent::clear_has_raw_size()
{
    _has_bits_[0] &= ~0x00000200u;
}
void PerfDataProto_SampleEvent::clear_raw_size()
{
    raw_size_ = 0u;
    clear_has_raw_size();
}
::google::protobuf::uint32 PerfDataProto_SampleEvent::raw_size() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.raw_size)
    return raw_size_;
}
void PerfDataProto_SampleEvent::set_raw_size(::google::protobuf::uint32 value)
{
    set_has_raw_size();
    raw_size_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.raw_size)
}

// repeated uint64 callchain = 11;
int PerfDataProto_SampleEvent::callchain_size() const
{
    return callchain_.size();
}
void PerfDataProto_SampleEvent::clear_callchain()
{
    callchain_.Clear();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::callchain(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.callchain)
    return callchain_.Get(index);
}
void PerfDataProto_SampleEvent::set_callchain(int index, ::google::protobuf::uint64 value)
{
    callchain_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.callchain)
}
void PerfDataProto_SampleEvent::add_callchain(::google::protobuf::uint64 value)
{
    callchain_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.PerfDataProto.SampleEvent.callchain)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint64>&
PerfDataProto_SampleEvent::callchain() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfDataProto.SampleEvent.callchain)
    return callchain_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint64>*
PerfDataProto_SampleEvent::mutable_callchain()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.SampleEvent.callchain)
    return &callchain_;
}

// repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;
int PerfDataProto_SampleEvent::branch_stack_size() const
{
    return branch_stack_.size();
}
void PerfDataProto_SampleEvent::clear_branch_stack()
{
    branch_stack_.Clear();
}
const ::metrics::PerfDataProto_BranchStackEntry& PerfDataProto_SampleEvent::branch_stack(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.branch_stack)
    return branch_stack_.Get(index);
}
::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::mutable_branch_stack(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.SampleEvent.branch_stack)
    return branch_stack_.Mutable(index);
}
::metrics::PerfDataProto_BranchStackEntry* PerfDataProto_SampleEvent::add_branch_stack()
{
    // @@protoc_insertion_point(field_add:metrics.PerfDataProto.SampleEvent.branch_stack)
    return branch_stack_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_BranchStackEntry>*
PerfDataProto_SampleEvent::mutable_branch_stack()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.SampleEvent.branch_stack)
    return &branch_stack_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_BranchStackEntry>&
PerfDataProto_SampleEvent::branch_stack() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfDataProto.SampleEvent.branch_stack)
    return branch_stack_;
}

// optional uint64 weight = 15;
bool PerfDataProto_SampleEvent::has_weight() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void PerfDataProto_SampleEvent::set_has_weight()
{
    _has_bits_[0] |= 0x00001000u;
}
void PerfDataProto_SampleEvent::clear_has_weight()
{
    _has_bits_[0] &= ~0x00001000u;
}
void PerfDataProto_SampleEvent::clear_weight()
{
    weight_ = GOOGLE_ULONGLONG(0);
    clear_has_weight();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::weight() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.weight)
    return weight_;
}
void PerfDataProto_SampleEvent::set_weight(::google::protobuf::uint64 value)
{
    set_has_weight();
    weight_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.weight)
}

// optional uint64 data_src = 16;
bool PerfDataProto_SampleEvent::has_data_src() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void PerfDataProto_SampleEvent::set_has_data_src()
{
    _has_bits_[0] |= 0x00002000u;
}
void PerfDataProto_SampleEvent::clear_has_data_src()
{
    _has_bits_[0] &= ~0x00002000u;
}
void PerfDataProto_SampleEvent::clear_data_src()
{
    data_src_ = GOOGLE_ULONGLONG(0);
    clear_has_data_src();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::data_src() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.data_src)
    return data_src_;
}
void PerfDataProto_SampleEvent::set_data_src(::google::protobuf::uint64 value)
{
    set_has_data_src();
    data_src_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.data_src)
}

// optional uint64 transaction = 17;
bool PerfDataProto_SampleEvent::has_transaction() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void PerfDataProto_SampleEvent::set_has_transaction()
{
    _has_bits_[0] |= 0x00004000u;
}
void PerfDataProto_SampleEvent::clear_has_transaction()
{
    _has_bits_[0] &= ~0x00004000u;
}
void PerfDataProto_SampleEvent::clear_transaction()
{
    transaction_ = GOOGLE_ULONGLONG(0);
    clear_has_transaction();
}
::google::protobuf::uint64 PerfDataProto_SampleEvent::transaction() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.SampleEvent.transaction)
    return transaction_;
}
void PerfDataProto_SampleEvent::set_transaction(::google::protobuf::uint64 value)
{
    set_has_transaction();
    transaction_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.SampleEvent.transaction)
}

// -------------------------------------------------------------------

// PerfDataProto_ForkEvent

// optional uint32 pid = 1;
bool PerfDataProto_ForkEvent::has_pid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_ForkEvent::set_has_pid()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_ForkEvent::clear_has_pid()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_ForkEvent::clear_pid()
{
    pid_ = 0u;
    clear_has_pid();
}
::google::protobuf::uint32 PerfDataProto_ForkEvent::pid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.pid)
    return pid_;
}
void PerfDataProto_ForkEvent::set_pid(::google::protobuf::uint32 value)
{
    set_has_pid();
    pid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.pid)
}

// optional uint32 ppid = 2;
bool PerfDataProto_ForkEvent::has_ppid() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_ForkEvent::set_has_ppid()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_ForkEvent::clear_has_ppid()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_ForkEvent::clear_ppid()
{
    ppid_ = 0u;
    clear_has_ppid();
}
::google::protobuf::uint32 PerfDataProto_ForkEvent::ppid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.ppid)
    return ppid_;
}
void PerfDataProto_ForkEvent::set_ppid(::google::protobuf::uint32 value)
{
    set_has_ppid();
    ppid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.ppid)
}

// optional uint32 tid = 3;
bool PerfDataProto_ForkEvent::has_tid() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_ForkEvent::set_has_tid()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_ForkEvent::clear_has_tid()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_ForkEvent::clear_tid()
{
    tid_ = 0u;
    clear_has_tid();
}
::google::protobuf::uint32 PerfDataProto_ForkEvent::tid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.tid)
    return tid_;
}
void PerfDataProto_ForkEvent::set_tid(::google::protobuf::uint32 value)
{
    set_has_tid();
    tid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.tid)
}

// optional uint32 ptid = 4;
bool PerfDataProto_ForkEvent::has_ptid() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_ForkEvent::set_has_ptid()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_ForkEvent::clear_has_ptid()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_ForkEvent::clear_ptid()
{
    ptid_ = 0u;
    clear_has_ptid();
}
::google::protobuf::uint32 PerfDataProto_ForkEvent::ptid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.ptid)
    return ptid_;
}
void PerfDataProto_ForkEvent::set_ptid(::google::protobuf::uint32 value)
{
    set_has_ptid();
    ptid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.ptid)
}

// optional uint64 fork_time_ns = 5;
bool PerfDataProto_ForkEvent::has_fork_time_ns() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_ForkEvent::set_has_fork_time_ns()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_ForkEvent::clear_has_fork_time_ns()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_ForkEvent::clear_fork_time_ns()
{
    fork_time_ns_ = GOOGLE_ULONGLONG(0);
    clear_has_fork_time_ns();
}
::google::protobuf::uint64 PerfDataProto_ForkEvent::fork_time_ns() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.fork_time_ns)
    return fork_time_ns_;
}
void PerfDataProto_ForkEvent::set_fork_time_ns(::google::protobuf::uint64 value)
{
    set_has_fork_time_ns();
    fork_time_ns_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.ForkEvent.fork_time_ns)
}

// optional .metrics.PerfDataProto.SampleInfo sample_info = 11;
bool PerfDataProto_ForkEvent::has_sample_info() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto_ForkEvent::set_has_sample_info()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto_ForkEvent::clear_has_sample_info()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto_ForkEvent::clear_sample_info()
{
    if (sample_info_ != NULL)
        sample_info_->::metrics::PerfDataProto_SampleInfo::Clear();
    clear_has_sample_info();
}
const ::metrics::PerfDataProto_SampleInfo& PerfDataProto_ForkEvent::sample_info() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.ForkEvent.sample_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return sample_info_ != NULL ? *sample_info_ : *default_instance().sample_info_;
#else
    return sample_info_ != NULL ? *sample_info_ : *default_instance_->sample_info_;
#endif
}
::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::mutable_sample_info()
{
    set_has_sample_info();
    if (sample_info_ == NULL) {
        sample_info_ = new ::metrics::PerfDataProto_SampleInfo;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.ForkEvent.sample_info)
    return sample_info_;
}
::metrics::PerfDataProto_SampleInfo* PerfDataProto_ForkEvent::release_sample_info()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.ForkEvent.sample_info)
    clear_has_sample_info();
    ::metrics::PerfDataProto_SampleInfo* temp = sample_info_;
    sample_info_ = NULL;
    return temp;
}
void PerfDataProto_ForkEvent::set_allocated_sample_info(::metrics::PerfDataProto_SampleInfo* sample_info)
{
    delete sample_info_;
    sample_info_ = sample_info;
    if (sample_info) {
        set_has_sample_info();
    } else {
        clear_has_sample_info();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.ForkEvent.sample_info)
}

// -------------------------------------------------------------------

// PerfDataProto_EventHeader

// optional uint32 type = 1;
bool PerfDataProto_EventHeader::has_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_EventHeader::set_has_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_EventHeader::clear_has_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_EventHeader::clear_type()
{
    type_ = 0u;
    clear_has_type();
}
::google::protobuf::uint32 PerfDataProto_EventHeader::type() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.type)
    return type_;
}
void PerfDataProto_EventHeader::set_type(::google::protobuf::uint32 value)
{
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.type)
}

// optional uint32 misc = 2;
bool PerfDataProto_EventHeader::has_misc() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_EventHeader::set_has_misc()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_EventHeader::clear_has_misc()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_EventHeader::clear_misc()
{
    misc_ = 0u;
    clear_has_misc();
}
::google::protobuf::uint32 PerfDataProto_EventHeader::misc() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.misc)
    return misc_;
}
void PerfDataProto_EventHeader::set_misc(::google::protobuf::uint32 value)
{
    set_has_misc();
    misc_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.misc)
}

// optional uint32 size = 3;
bool PerfDataProto_EventHeader::has_size() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_EventHeader::set_has_size()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_EventHeader::clear_has_size()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_EventHeader::clear_size()
{
    size_ = 0u;
    clear_has_size();
}
::google::protobuf::uint32 PerfDataProto_EventHeader::size() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.EventHeader.size)
    return size_;
}
void PerfDataProto_EventHeader::set_size(::google::protobuf::uint32 value)
{
    set_has_size();
    size_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.EventHeader.size)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEvent

// optional .metrics.PerfDataProto.EventHeader header = 1;
bool PerfDataProto_PerfEvent::has_header() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_PerfEvent::set_has_header()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_PerfEvent::clear_has_header()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_PerfEvent::clear_header()
{
    if (header_ != NULL)
        header_->::metrics::PerfDataProto_EventHeader::Clear();
    clear_has_header();
}
const ::metrics::PerfDataProto_EventHeader& PerfDataProto_PerfEvent::header() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.header)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return header_ != NULL ? *header_ : *default_instance().header_;
#else
    return header_ != NULL ? *header_ : *default_instance_->header_;
#endif
}
::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::mutable_header()
{
    set_has_header();
    if (header_ == NULL) {
        header_ = new ::metrics::PerfDataProto_EventHeader;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.header)
    return header_;
}
::metrics::PerfDataProto_EventHeader* PerfDataProto_PerfEvent::release_header()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.header)
    clear_has_header();
    ::metrics::PerfDataProto_EventHeader* temp = header_;
    header_ = NULL;
    return temp;
}
void PerfDataProto_PerfEvent::set_allocated_header(::metrics::PerfDataProto_EventHeader* header)
{
    delete header_;
    header_ = header;
    if (header) {
        set_has_header();
    } else {
        clear_has_header();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.header)
}

// optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;
bool PerfDataProto_PerfEvent::has_mmap_event() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_PerfEvent::set_has_mmap_event()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_PerfEvent::clear_has_mmap_event()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_PerfEvent::clear_mmap_event()
{
    if (mmap_event_ != NULL)
        mmap_event_->::metrics::PerfDataProto_MMapEvent::Clear();
    clear_has_mmap_event();
}
const ::metrics::PerfDataProto_MMapEvent& PerfDataProto_PerfEvent::mmap_event() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.mmap_event)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return mmap_event_ != NULL ? *mmap_event_ : *default_instance().mmap_event_;
#else
    return mmap_event_ != NULL ? *mmap_event_ : *default_instance_->mmap_event_;
#endif
}
::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::mutable_mmap_event()
{
    set_has_mmap_event();
    if (mmap_event_ == NULL) {
        mmap_event_ = new ::metrics::PerfDataProto_MMapEvent;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.mmap_event)
    return mmap_event_;
}
::metrics::PerfDataProto_MMapEvent* PerfDataProto_PerfEvent::release_mmap_event()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.mmap_event)
    clear_has_mmap_event();
    ::metrics::PerfDataProto_MMapEvent* temp = mmap_event_;
    mmap_event_ = NULL;
    return temp;
}
void PerfDataProto_PerfEvent::set_allocated_mmap_event(::metrics::PerfDataProto_MMapEvent* mmap_event)
{
    delete mmap_event_;
    mmap_event_ = mmap_event;
    if (mmap_event) {
        set_has_mmap_event();
    } else {
        clear_has_mmap_event();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.mmap_event)
}

// optional .metrics.PerfDataProto.SampleEvent sample_event = 3;
bool PerfDataProto_PerfEvent::has_sample_event() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_PerfEvent::set_has_sample_event()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_PerfEvent::clear_has_sample_event()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_PerfEvent::clear_sample_event()
{
    if (sample_event_ != NULL)
        sample_event_->::metrics::PerfDataProto_SampleEvent::Clear();
    clear_has_sample_event();
}
const ::metrics::PerfDataProto_SampleEvent& PerfDataProto_PerfEvent::sample_event() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.sample_event)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return sample_event_ != NULL ? *sample_event_ : *default_instance().sample_event_;
#else
    return sample_event_ != NULL ? *sample_event_ : *default_instance_->sample_event_;
#endif
}
::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::mutable_sample_event()
{
    set_has_sample_event();
    if (sample_event_ == NULL) {
        sample_event_ = new ::metrics::PerfDataProto_SampleEvent;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.sample_event)
    return sample_event_;
}
::metrics::PerfDataProto_SampleEvent* PerfDataProto_PerfEvent::release_sample_event()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.sample_event)
    clear_has_sample_event();
    ::metrics::PerfDataProto_SampleEvent* temp = sample_event_;
    sample_event_ = NULL;
    return temp;
}
void PerfDataProto_PerfEvent::set_allocated_sample_event(::metrics::PerfDataProto_SampleEvent* sample_event)
{
    delete sample_event_;
    sample_event_ = sample_event;
    if (sample_event) {
        set_has_sample_event();
    } else {
        clear_has_sample_event();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.sample_event)
}

// optional .metrics.PerfDataProto.CommEvent comm_event = 4;
bool PerfDataProto_PerfEvent::has_comm_event() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_PerfEvent::set_has_comm_event()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_PerfEvent::clear_has_comm_event()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_PerfEvent::clear_comm_event()
{
    if (comm_event_ != NULL)
        comm_event_->::metrics::PerfDataProto_CommEvent::Clear();
    clear_has_comm_event();
}
const ::metrics::PerfDataProto_CommEvent& PerfDataProto_PerfEvent::comm_event() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.comm_event)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return comm_event_ != NULL ? *comm_event_ : *default_instance().comm_event_;
#else
    return comm_event_ != NULL ? *comm_event_ : *default_instance_->comm_event_;
#endif
}
::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::mutable_comm_event()
{
    set_has_comm_event();
    if (comm_event_ == NULL) {
        comm_event_ = new ::metrics::PerfDataProto_CommEvent;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.comm_event)
    return comm_event_;
}
::metrics::PerfDataProto_CommEvent* PerfDataProto_PerfEvent::release_comm_event()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.comm_event)
    clear_has_comm_event();
    ::metrics::PerfDataProto_CommEvent* temp = comm_event_;
    comm_event_ = NULL;
    return temp;
}
void PerfDataProto_PerfEvent::set_allocated_comm_event(::metrics::PerfDataProto_CommEvent* comm_event)
{
    delete comm_event_;
    comm_event_ = comm_event;
    if (comm_event) {
        set_has_comm_event();
    } else {
        clear_has_comm_event();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.comm_event)
}

// optional .metrics.PerfDataProto.ForkEvent fork_event = 5;
bool PerfDataProto_PerfEvent::has_fork_event() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_PerfEvent::set_has_fork_event()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_PerfEvent::clear_has_fork_event()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_PerfEvent::clear_fork_event()
{
    if (fork_event_ != NULL)
        fork_event_->::metrics::PerfDataProto_ForkEvent::Clear();
    clear_has_fork_event();
}
const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::fork_event() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.fork_event)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return fork_event_ != NULL ? *fork_event_ : *default_instance().fork_event_;
#else
    return fork_event_ != NULL ? *fork_event_ : *default_instance_->fork_event_;
#endif
}
::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::mutable_fork_event()
{
    set_has_fork_event();
    if (fork_event_ == NULL) {
        fork_event_ = new ::metrics::PerfDataProto_ForkEvent;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.fork_event)
    return fork_event_;
}
::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::release_fork_event()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.fork_event)
    clear_has_fork_event();
    ::metrics::PerfDataProto_ForkEvent* temp = fork_event_;
    fork_event_ = NULL;
    return temp;
}
void PerfDataProto_PerfEvent::set_allocated_fork_event(::metrics::PerfDataProto_ForkEvent* fork_event)
{
    delete fork_event_;
    fork_event_ = fork_event;
    if (fork_event) {
        set_has_fork_event();
    } else {
        clear_has_fork_event();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.fork_event)
}

// optional .metrics.PerfDataProto.ForkEvent exit_event = 9;
bool PerfDataProto_PerfEvent::has_exit_event() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto_PerfEvent::set_has_exit_event()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto_PerfEvent::clear_has_exit_event()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto_PerfEvent::clear_exit_event()
{
    if (exit_event_ != NULL)
        exit_event_->::metrics::PerfDataProto_ForkEvent::Clear();
    clear_has_exit_event();
}
const ::metrics::PerfDataProto_ForkEvent& PerfDataProto_PerfEvent::exit_event() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEvent.exit_event)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return exit_event_ != NULL ? *exit_event_ : *default_instance().exit_event_;
#else
    return exit_event_ != NULL ? *exit_event_ : *default_instance_->exit_event_;
#endif
}
::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::mutable_exit_event()
{
    set_has_exit_event();
    if (exit_event_ == NULL) {
        exit_event_ = new ::metrics::PerfDataProto_ForkEvent;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfEvent.exit_event)
    return exit_event_;
}
::metrics::PerfDataProto_ForkEvent* PerfDataProto_PerfEvent::release_exit_event()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfEvent.exit_event)
    clear_has_exit_event();
    ::metrics::PerfDataProto_ForkEvent* temp = exit_event_;
    exit_event_ = NULL;
    return temp;
}
void PerfDataProto_PerfEvent::set_allocated_exit_event(::metrics::PerfDataProto_ForkEvent* exit_event)
{
    delete exit_event_;
    exit_event_ = exit_event;
    if (exit_event) {
        set_has_exit_event();
    } else {
        clear_has_exit_event();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfEvent.exit_event)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfEventStats

// optional uint32 num_events_read = 1;
bool PerfDataProto_PerfEventStats::has_num_events_read() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_num_events_read()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_PerfEventStats::clear_has_num_events_read()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_PerfEventStats::clear_num_events_read()
{
    num_events_read_ = 0u;
    clear_has_num_events_read();
}
::google::protobuf::uint32 PerfDataProto_PerfEventStats::num_events_read() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_events_read)
    return num_events_read_;
}
void PerfDataProto_PerfEventStats::set_num_events_read(::google::protobuf::uint32 value)
{
    set_has_num_events_read();
    num_events_read_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_events_read)
}

// optional uint32 num_sample_events = 2;
bool PerfDataProto_PerfEventStats::has_num_sample_events() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_num_sample_events()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_PerfEventStats::clear_has_num_sample_events()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_PerfEventStats::clear_num_sample_events()
{
    num_sample_events_ = 0u;
    clear_has_num_sample_events();
}
::google::protobuf::uint32 PerfDataProto_PerfEventStats::num_sample_events() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_sample_events)
    return num_sample_events_;
}
void PerfDataProto_PerfEventStats::set_num_sample_events(::google::protobuf::uint32 value)
{
    set_has_num_sample_events();
    num_sample_events_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_sample_events)
}

// optional uint32 num_mmap_events = 3;
bool PerfDataProto_PerfEventStats::has_num_mmap_events() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_num_mmap_events()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_PerfEventStats::clear_has_num_mmap_events()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_PerfEventStats::clear_num_mmap_events()
{
    num_mmap_events_ = 0u;
    clear_has_num_mmap_events();
}
::google::protobuf::uint32 PerfDataProto_PerfEventStats::num_mmap_events() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_mmap_events)
    return num_mmap_events_;
}
void PerfDataProto_PerfEventStats::set_num_mmap_events(::google::protobuf::uint32 value)
{
    set_has_num_mmap_events();
    num_mmap_events_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_mmap_events)
}

// optional uint32 num_fork_events = 4;
bool PerfDataProto_PerfEventStats::has_num_fork_events() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_num_fork_events()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_PerfEventStats::clear_has_num_fork_events()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_PerfEventStats::clear_num_fork_events()
{
    num_fork_events_ = 0u;
    clear_has_num_fork_events();
}
::google::protobuf::uint32 PerfDataProto_PerfEventStats::num_fork_events() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_fork_events)
    return num_fork_events_;
}
void PerfDataProto_PerfEventStats::set_num_fork_events(::google::protobuf::uint32 value)
{
    set_has_num_fork_events();
    num_fork_events_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_fork_events)
}

// optional uint32 num_exit_events = 5;
bool PerfDataProto_PerfEventStats::has_num_exit_events() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_num_exit_events()
{
    _has_bits_[0] |= 0x00000010u;
}
void PerfDataProto_PerfEventStats::clear_has_num_exit_events()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PerfDataProto_PerfEventStats::clear_num_exit_events()
{
    num_exit_events_ = 0u;
    clear_has_num_exit_events();
}
::google::protobuf::uint32 PerfDataProto_PerfEventStats::num_exit_events() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_exit_events)
    return num_exit_events_;
}
void PerfDataProto_PerfEventStats::set_num_exit_events(::google::protobuf::uint32 value)
{
    set_has_num_exit_events();
    num_exit_events_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_exit_events)
}

// optional uint32 num_sample_events_mapped = 6;
bool PerfDataProto_PerfEventStats::has_num_sample_events_mapped() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_num_sample_events_mapped()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto_PerfEventStats::clear_has_num_sample_events_mapped()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto_PerfEventStats::clear_num_sample_events_mapped()
{
    num_sample_events_mapped_ = 0u;
    clear_has_num_sample_events_mapped();
}
::google::protobuf::uint32 PerfDataProto_PerfEventStats::num_sample_events_mapped() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.num_sample_events_mapped)
    return num_sample_events_mapped_;
}
void PerfDataProto_PerfEventStats::set_num_sample_events_mapped(::google::protobuf::uint32 value)
{
    set_has_num_sample_events_mapped();
    num_sample_events_mapped_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.num_sample_events_mapped)
}

// optional bool did_remap = 7;
bool PerfDataProto_PerfEventStats::has_did_remap() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerfDataProto_PerfEventStats::set_has_did_remap()
{
    _has_bits_[0] |= 0x00000040u;
}
void PerfDataProto_PerfEventStats::clear_has_did_remap()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PerfDataProto_PerfEventStats::clear_did_remap()
{
    did_remap_ = false;
    clear_has_did_remap();
}
bool PerfDataProto_PerfEventStats::did_remap() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfEventStats.did_remap)
    return did_remap_;
}
void PerfDataProto_PerfEventStats::set_did_remap(bool value)
{
    set_has_did_remap();
    did_remap_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfEventStats.did_remap)
}

// -------------------------------------------------------------------

// PerfDataProto_PerfBuildID

// optional uint32 misc = 1;
bool PerfDataProto_PerfBuildID::has_misc() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_PerfBuildID::set_has_misc()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_PerfBuildID::clear_has_misc()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_PerfBuildID::clear_misc()
{
    misc_ = 0u;
    clear_has_misc();
}
::google::protobuf::uint32 PerfDataProto_PerfBuildID::misc() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.misc)
    return misc_;
}
void PerfDataProto_PerfBuildID::set_misc(::google::protobuf::uint32 value)
{
    set_has_misc();
    misc_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.misc)
}

// optional uint32 pid = 2;
bool PerfDataProto_PerfBuildID::has_pid() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfDataProto_PerfBuildID::set_has_pid()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfDataProto_PerfBuildID::clear_has_pid()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfDataProto_PerfBuildID::clear_pid()
{
    pid_ = 0u;
    clear_has_pid();
}
::google::protobuf::uint32 PerfDataProto_PerfBuildID::pid() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.pid)
    return pid_;
}
void PerfDataProto_PerfBuildID::set_pid(::google::protobuf::uint32 value)
{
    set_has_pid();
    pid_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.pid)
}

// optional bytes build_hash = 3;
bool PerfDataProto_PerfBuildID::has_build_hash() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto_PerfBuildID::set_has_build_hash()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto_PerfBuildID::clear_has_build_hash()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto_PerfBuildID::clear_build_hash()
{
    build_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_build_hash();
}
const ::std::string& PerfDataProto_PerfBuildID::build_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.build_hash)
    return build_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfDataProto_PerfBuildID::set_build_hash(const ::std::string& value)
{
    set_has_build_hash();
    build_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.build_hash)
}
void PerfDataProto_PerfBuildID::set_build_hash(const char* value)
{
    set_has_build_hash();
    build_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.PerfDataProto.PerfBuildID.build_hash)
}
void PerfDataProto_PerfBuildID::set_build_hash(const void* value, size_t size)
{
    set_has_build_hash();
    build_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.PerfDataProto.PerfBuildID.build_hash)
}
::std::string* PerfDataProto_PerfBuildID::mutable_build_hash()
{
    set_has_build_hash();
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.PerfBuildID.build_hash)
    return build_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PerfDataProto_PerfBuildID::release_build_hash()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.PerfBuildID.build_hash)
    clear_has_build_hash();
    return build_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfDataProto_PerfBuildID::set_allocated_build_hash(::std::string* build_hash)
{
    if (build_hash != NULL) {
        set_has_build_hash();
    } else {
        clear_has_build_hash();
    }
    build_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_hash);
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.PerfBuildID.build_hash)
}

// optional uint64 filename_md5_prefix = 5;
bool PerfDataProto_PerfBuildID::has_filename_md5_prefix() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto_PerfBuildID::set_has_filename_md5_prefix()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto_PerfBuildID::clear_has_filename_md5_prefix()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto_PerfBuildID::clear_filename_md5_prefix()
{
    filename_md5_prefix_ = GOOGLE_ULONGLONG(0);
    clear_has_filename_md5_prefix();
}
::google::protobuf::uint64 PerfDataProto_PerfBuildID::filename_md5_prefix() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.PerfBuildID.filename_md5_prefix)
    return filename_md5_prefix_;
}
void PerfDataProto_PerfBuildID::set_filename_md5_prefix(::google::protobuf::uint64 value)
{
    set_has_filename_md5_prefix();
    filename_md5_prefix_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.PerfBuildID.filename_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_StringMetadata_StringAndMd5sumPrefix

// optional uint64 value_md5_prefix = 2;
bool PerfDataProto_StringMetadata_StringAndMd5sumPrefix::has_value_md5_prefix() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::set_has_value_md5_prefix()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::clear_has_value_md5_prefix()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::clear_value_md5_prefix()
{
    value_md5_prefix_ = GOOGLE_ULONGLONG(0);
    clear_has_value_md5_prefix();
}
::google::protobuf::uint64 PerfDataProto_StringMetadata_StringAndMd5sumPrefix::value_md5_prefix() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.value_md5_prefix)
    return value_md5_prefix_;
}
void PerfDataProto_StringMetadata_StringAndMd5sumPrefix::set_value_md5_prefix(::google::protobuf::uint64 value)
{
    set_has_value_md5_prefix();
    value_md5_prefix_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.value_md5_prefix)
}

// -------------------------------------------------------------------

// PerfDataProto_StringMetadata

// optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;
bool PerfDataProto_StringMetadata::has_perf_command_line_whole() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfDataProto_StringMetadata::set_has_perf_command_line_whole()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfDataProto_StringMetadata::clear_has_perf_command_line_whole()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfDataProto_StringMetadata::clear_perf_command_line_whole()
{
    if (perf_command_line_whole_ != NULL)
        perf_command_line_whole_->::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix::Clear();
    clear_has_perf_command_line_whole();
}
const ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix& PerfDataProto_StringMetadata::perf_command_line_whole() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return perf_command_line_whole_ != NULL ? *perf_command_line_whole_ : *default_instance().perf_command_line_whole_;
#else
    return perf_command_line_whole_ != NULL ? *perf_command_line_whole_ : *default_instance_->perf_command_line_whole_;
#endif
}
::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::mutable_perf_command_line_whole()
{
    set_has_perf_command_line_whole();
    if (perf_command_line_whole_ == NULL) {
        perf_command_line_whole_ = new ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
    return perf_command_line_whole_;
}
::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* PerfDataProto_StringMetadata::release_perf_command_line_whole()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
    clear_has_perf_command_line_whole();
    ::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* temp = perf_command_line_whole_;
    perf_command_line_whole_ = NULL;
    return temp;
}
void PerfDataProto_StringMetadata::set_allocated_perf_command_line_whole(::metrics::PerfDataProto_StringMetadata_StringAndMd5sumPrefix* perf_command_line_whole)
{
    delete perf_command_line_whole_;
    perf_command_line_whole_ = perf_command_line_whole;
    if (perf_command_line_whole) {
        set_has_perf_command_line_whole();
    } else {
        clear_has_perf_command_line_whole();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.StringMetadata.perf_command_line_whole)
}

// -------------------------------------------------------------------

// PerfDataProto

// repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;
int PerfDataProto::file_attrs_size() const
{
    return file_attrs_.size();
}
void PerfDataProto::clear_file_attrs()
{
    file_attrs_.Clear();
}
const ::metrics::PerfDataProto_PerfFileAttr& PerfDataProto::file_attrs(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.file_attrs)
    return file_attrs_.Get(index);
}
::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::mutable_file_attrs(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.file_attrs)
    return file_attrs_.Mutable(index);
}
::metrics::PerfDataProto_PerfFileAttr* PerfDataProto::add_file_attrs()
{
    // @@protoc_insertion_point(field_add:metrics.PerfDataProto.file_attrs)
    return file_attrs_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_PerfFileAttr>*
PerfDataProto::mutable_file_attrs()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.file_attrs)
    return &file_attrs_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_PerfFileAttr>&
PerfDataProto::file_attrs() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfDataProto.file_attrs)
    return file_attrs_;
}

// repeated .metrics.PerfDataProto.PerfEvent events = 2;
int PerfDataProto::events_size() const
{
    return events_.size();
}
void PerfDataProto::clear_events()
{
    events_.Clear();
}
const ::metrics::PerfDataProto_PerfEvent& PerfDataProto::events(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.events)
    return events_.Get(index);
}
::metrics::PerfDataProto_PerfEvent* PerfDataProto::mutable_events(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.events)
    return events_.Mutable(index);
}
::metrics::PerfDataProto_PerfEvent* PerfDataProto::add_events()
{
    // @@protoc_insertion_point(field_add:metrics.PerfDataProto.events)
    return events_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_PerfEvent>*
PerfDataProto::mutable_events()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.events)
    return &events_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_PerfEvent>&
PerfDataProto::events() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfDataProto.events)
    return events_;
}

// optional uint64 timestamp_sec = 3;
bool PerfDataProto::has_timestamp_sec() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfDataProto::set_has_timestamp_sec()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfDataProto::clear_has_timestamp_sec()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfDataProto::clear_timestamp_sec()
{
    timestamp_sec_ = GOOGLE_ULONGLONG(0);
    clear_has_timestamp_sec();
}
::google::protobuf::uint64 PerfDataProto::timestamp_sec() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.timestamp_sec)
    return timestamp_sec_;
}
void PerfDataProto::set_timestamp_sec(::google::protobuf::uint64 value)
{
    set_has_timestamp_sec();
    timestamp_sec_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfDataProto.timestamp_sec)
}

// optional .metrics.PerfDataProto.PerfEventStats stats = 4;
bool PerfDataProto::has_stats() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerfDataProto::set_has_stats()
{
    _has_bits_[0] |= 0x00000008u;
}
void PerfDataProto::clear_has_stats()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PerfDataProto::clear_stats()
{
    if (stats_ != NULL)
        stats_->::metrics::PerfDataProto_PerfEventStats::Clear();
    clear_has_stats();
}
const ::metrics::PerfDataProto_PerfEventStats& PerfDataProto::stats() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.stats)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return stats_ != NULL ? *stats_ : *default_instance().stats_;
#else
    return stats_ != NULL ? *stats_ : *default_instance_->stats_;
#endif
}
::metrics::PerfDataProto_PerfEventStats* PerfDataProto::mutable_stats()
{
    set_has_stats();
    if (stats_ == NULL) {
        stats_ = new ::metrics::PerfDataProto_PerfEventStats;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.stats)
    return stats_;
}
::metrics::PerfDataProto_PerfEventStats* PerfDataProto::release_stats()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.stats)
    clear_has_stats();
    ::metrics::PerfDataProto_PerfEventStats* temp = stats_;
    stats_ = NULL;
    return temp;
}
void PerfDataProto::set_allocated_stats(::metrics::PerfDataProto_PerfEventStats* stats)
{
    delete stats_;
    stats_ = stats;
    if (stats) {
        set_has_stats();
    } else {
        clear_has_stats();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.stats)
}

// repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;
int PerfDataProto::build_ids_size() const
{
    return build_ids_.size();
}
void PerfDataProto::clear_build_ids()
{
    build_ids_.Clear();
}
const ::metrics::PerfDataProto_PerfBuildID& PerfDataProto::build_ids(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.build_ids)
    return build_ids_.Get(index);
}
::metrics::PerfDataProto_PerfBuildID* PerfDataProto::mutable_build_ids(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.build_ids)
    return build_ids_.Mutable(index);
}
::metrics::PerfDataProto_PerfBuildID* PerfDataProto::add_build_ids()
{
    // @@protoc_insertion_point(field_add:metrics.PerfDataProto.build_ids)
    return build_ids_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_PerfBuildID>*
PerfDataProto::mutable_build_ids()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfDataProto.build_ids)
    return &build_ids_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto_PerfBuildID>&
PerfDataProto::build_ids() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfDataProto.build_ids)
    return build_ids_;
}

// optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;
bool PerfDataProto::has_string_metadata() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerfDataProto::set_has_string_metadata()
{
    _has_bits_[0] |= 0x00000020u;
}
void PerfDataProto::clear_has_string_metadata()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PerfDataProto::clear_string_metadata()
{
    if (string_metadata_ != NULL)
        string_metadata_->::metrics::PerfDataProto_StringMetadata::Clear();
    clear_has_string_metadata();
}
const ::metrics::PerfDataProto_StringMetadata& PerfDataProto::string_metadata() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfDataProto.string_metadata)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return string_metadata_ != NULL ? *string_metadata_ : *default_instance().string_metadata_;
#else
    return string_metadata_ != NULL ? *string_metadata_ : *default_instance_->string_metadata_;
#endif
}
::metrics::PerfDataProto_StringMetadata* PerfDataProto::mutable_string_metadata()
{
    set_has_string_metadata();
    if (string_metadata_ == NULL) {
        string_metadata_ = new ::metrics::PerfDataProto_StringMetadata;
    }
    // @@protoc_insertion_point(field_mutable:metrics.PerfDataProto.string_metadata)
    return string_metadata_;
}
::metrics::PerfDataProto_StringMetadata* PerfDataProto::release_string_metadata()
{
    // @@protoc_insertion_point(field_release:metrics.PerfDataProto.string_metadata)
    clear_has_string_metadata();
    ::metrics::PerfDataProto_StringMetadata* temp = string_metadata_;
    string_metadata_ = NULL;
    return temp;
}
void PerfDataProto::set_allocated_string_metadata(::metrics::PerfDataProto_StringMetadata* string_metadata)
{
    delete string_metadata_;
    string_metadata_ = string_metadata;
    if (string_metadata) {
        set_has_string_metadata();
    } else {
        clear_has_string_metadata();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfDataProto.string_metadata)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
