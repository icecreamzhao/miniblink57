// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_stat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perf_stat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_perf_5fstat_2eproto()
{
    delete PerfStatProto::default_instance_;
    delete PerfStatProto_PerfStatLine::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_perf_5fstat_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_perf_5fstat_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    PerfStatProto::default_instance_ = new PerfStatProto();
    PerfStatProto_PerfStatLine::default_instance_ = new PerfStatProto_PerfStatLine();
    PerfStatProto::default_instance_->InitAsDefaultInstance();
    PerfStatProto_PerfStatLine::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perf_5fstat_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_perf_5fstat_2eproto_once_);
void protobuf_AddDesc_perf_5fstat_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_perf_5fstat_2eproto_once_,
        &protobuf_AddDesc_perf_5fstat_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perf_5fstat_2eproto {
    StaticDescriptorInitializer_perf_5fstat_2eproto()
    {
        protobuf_AddDesc_perf_5fstat_2eproto();
    }
} static_descriptor_initializer_perf_5fstat_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForPerfStatProto(
    PerfStatProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForPerfStatProto_PerfStatLine(
    PerfStatProto_PerfStatLine* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfStatProto_PerfStatLine::kTimeMsFieldNumber;
const int PerfStatProto_PerfStatLine::kCountFieldNumber;
const int PerfStatProto_PerfStatLine::kEventFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfStatProto_PerfStatLine::PerfStatProto_PerfStatLine()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfStatProto.PerfStatLine)
}

void PerfStatProto_PerfStatLine::InitAsDefaultInstance()
{
}

PerfStatProto_PerfStatLine::PerfStatProto_PerfStatLine(const PerfStatProto_PerfStatLine& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfStatProto.PerfStatLine)
}

void PerfStatProto_PerfStatLine::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    time_ms_ = GOOGLE_ULONGLONG(0);
    count_ = GOOGLE_ULONGLONG(0);
    event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfStatProto_PerfStatLine::~PerfStatProto_PerfStatLine()
{
    // @@protoc_insertion_point(destructor:metrics.PerfStatProto.PerfStatLine)
    SharedDtor();
}

void PerfStatProto_PerfStatLine::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfStatProto_PerfStatLine::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfStatProto_PerfStatLine& PerfStatProto_PerfStatLine::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fstat_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fstat_2eproto();
#endif
    return *default_instance_;
}

PerfStatProto_PerfStatLine* PerfStatProto_PerfStatLine::default_instance_ = NULL;

PerfStatProto_PerfStatLine* PerfStatProto_PerfStatLine::New(::google::protobuf::Arena* arena) const
{
    PerfStatProto_PerfStatLine* n = new PerfStatProto_PerfStatLine;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfStatProto_PerfStatLine::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.PerfStatProto.PerfStatLine)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                \
    _Pragma("clang diagnostic push")                                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PerfStatProto_PerfStatLine, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PerfStatProto_PerfStatLine*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 7u) {
        ZR_(time_ms_, count_);
        if (has_event()) {
            event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfStatProto_PerfStatLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfStatProto_PerfStatLine, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfStatProto.PerfStatLine)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint64 time_ms = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &time_ms_)));
                set_has_time_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_count;
            break;
        }

        // optional uint64 count = 2;
        case 2: {
            if (tag == 16) {
            parse_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &count_)));
                set_has_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_event;
            break;
        }

        // optional string event = 3;
        case 3: {
            if (tag == 26) {
            parse_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfStatProto.PerfStatLine)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfStatProto.PerfStatLine)
    return false;
#undef DO_
}

void PerfStatProto_PerfStatLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfStatProto.PerfStatLine)
    // optional uint64 time_ms = 1;
    if (has_time_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_ms(), output);
    }

    // optional uint64 count = 2;
    if (has_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
    }

    // optional string event = 3;
    if (has_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->event(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfStatProto.PerfStatLine)
}

int PerfStatProto_PerfStatLine::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfStatProto.PerfStatLine)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional uint64 time_ms = 1;
        if (has_time_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->time_ms());
        }

        // optional uint64 count = 2;
        if (has_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->count());
        }

        // optional string event = 3;
        if (has_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->event());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfStatProto_PerfStatLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfStatProto_PerfStatLine*>(&from));
}

void PerfStatProto_PerfStatLine::MergeFrom(const PerfStatProto_PerfStatLine& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfStatProto.PerfStatLine)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_time_ms()) {
            set_time_ms(from.time_ms());
        }
        if (from.has_count()) {
            set_count(from.count());
        }
        if (from.has_event()) {
            set_has_event();
            event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfStatProto_PerfStatLine::CopyFrom(const PerfStatProto_PerfStatLine& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfStatProto.PerfStatLine)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfStatProto_PerfStatLine::IsInitialized() const
{

    return true;
}

void PerfStatProto_PerfStatLine::Swap(PerfStatProto_PerfStatLine* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfStatProto_PerfStatLine::InternalSwap(PerfStatProto_PerfStatLine* other)
{
    std::swap(time_ms_, other->time_ms_);
    std::swap(count_, other->count_);
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfStatProto_PerfStatLine::GetTypeName() const
{
    return "metrics.PerfStatProto.PerfStatLine";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfStatProto::kLineFieldNumber;
const int PerfStatProto::kCommandLineFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfStatProto::PerfStatProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.PerfStatProto)
}

void PerfStatProto::InitAsDefaultInstance()
{
}

PerfStatProto::PerfStatProto(const PerfStatProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.PerfStatProto)
}

void PerfStatProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    command_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfStatProto::~PerfStatProto()
{
    // @@protoc_insertion_point(destructor:metrics.PerfStatProto)
    SharedDtor();
}

void PerfStatProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    command_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PerfStatProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerfStatProto& PerfStatProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_perf_5fstat_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_perf_5fstat_2eproto();
#endif
    return *default_instance_;
}

PerfStatProto* PerfStatProto::default_instance_ = NULL;

PerfStatProto* PerfStatProto::New(::google::protobuf::Arena* arena) const
{
    PerfStatProto* n = new PerfStatProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PerfStatProto::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.PerfStatProto)
    if (has_command_line()) {
        command_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    line_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PerfStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPerfStatProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.PerfStatProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .metrics.PerfStatProto.PerfStatLine line = 1;
        case 1: {
            if (tag == 10) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_line:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_line()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_loop_line;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(18))
                goto parse_command_line;
            break;
        }

        // optional string command_line = 2;
        case 2: {
            if (tag == 18) {
            parse_command_line:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_command_line()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.PerfStatProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.PerfStatProto)
    return false;
#undef DO_
}

void PerfStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.PerfStatProto)
    // repeated .metrics.PerfStatProto.PerfStatLine line = 1;
    for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, this->line(i), output);
    }

    // optional string command_line = 2;
    if (has_command_line()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->command_line(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.PerfStatProto)
}

int PerfStatProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.PerfStatProto)
    int total_size = 0;

    // optional string command_line = 2;
    if (has_command_line()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->command_line());
    }

    // repeated .metrics.PerfStatProto.PerfStatLine line = 1;
    total_size += 1 * this->line_size();
    for (int i = 0; i < this->line_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->line(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PerfStatProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PerfStatProto*>(&from));
}

void PerfStatProto::MergeFrom(const PerfStatProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.PerfStatProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    line_.MergeFrom(from.line_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
        if (from.has_command_line()) {
            set_has_command_line();
            command_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_line_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PerfStatProto::CopyFrom(const PerfStatProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.PerfStatProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PerfStatProto::IsInitialized() const
{

    return true;
}

void PerfStatProto::Swap(PerfStatProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PerfStatProto::InternalSwap(PerfStatProto* other)
{
    line_.UnsafeArenaSwap(&other->line_);
    command_line_.Swap(&other->command_line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerfStatProto::GetTypeName() const
{
    return "metrics.PerfStatProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerfStatProto_PerfStatLine

// optional uint64 time_ms = 1;
bool PerfStatProto_PerfStatLine::has_time_ms() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerfStatProto_PerfStatLine::set_has_time_ms()
{
    _has_bits_[0] |= 0x00000001u;
}
void PerfStatProto_PerfStatLine::clear_has_time_ms()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PerfStatProto_PerfStatLine::clear_time_ms()
{
    time_ms_ = GOOGLE_ULONGLONG(0);
    clear_has_time_ms();
}
::google::protobuf::uint64 PerfStatProto_PerfStatLine::time_ms() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfStatProto.PerfStatLine.time_ms)
    return time_ms_;
}
void PerfStatProto_PerfStatLine::set_time_ms(::google::protobuf::uint64 value)
{
    set_has_time_ms();
    time_ms_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfStatProto.PerfStatLine.time_ms)
}

// optional uint64 count = 2;
bool PerfStatProto_PerfStatLine::has_count() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfStatProto_PerfStatLine::set_has_count()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfStatProto_PerfStatLine::clear_has_count()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfStatProto_PerfStatLine::clear_count()
{
    count_ = GOOGLE_ULONGLONG(0);
    clear_has_count();
}
::google::protobuf::uint64 PerfStatProto_PerfStatLine::count() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfStatProto.PerfStatLine.count)
    return count_;
}
void PerfStatProto_PerfStatLine::set_count(::google::protobuf::uint64 value)
{
    set_has_count();
    count_ = value;
    // @@protoc_insertion_point(field_set:metrics.PerfStatProto.PerfStatLine.count)
}

// optional string event = 3;
bool PerfStatProto_PerfStatLine::has_event() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerfStatProto_PerfStatLine::set_has_event()
{
    _has_bits_[0] |= 0x00000004u;
}
void PerfStatProto_PerfStatLine::clear_has_event()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PerfStatProto_PerfStatLine::clear_event()
{
    event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_event();
}
const ::std::string& PerfStatProto_PerfStatLine::event() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfStatProto.PerfStatLine.event)
    return event_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfStatProto_PerfStatLine::set_event(const ::std::string& value)
{
    set_has_event();
    event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.PerfStatProto.PerfStatLine.event)
}
void PerfStatProto_PerfStatLine::set_event(const char* value)
{
    set_has_event();
    event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.PerfStatProto.PerfStatLine.event)
}
void PerfStatProto_PerfStatLine::set_event(const char* value, size_t size)
{
    set_has_event();
    event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.PerfStatProto.PerfStatLine.event)
}
::std::string* PerfStatProto_PerfStatLine::mutable_event()
{
    set_has_event();
    // @@protoc_insertion_point(field_mutable:metrics.PerfStatProto.PerfStatLine.event)
    return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PerfStatProto_PerfStatLine::release_event()
{
    // @@protoc_insertion_point(field_release:metrics.PerfStatProto.PerfStatLine.event)
    clear_has_event();
    return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfStatProto_PerfStatLine::set_allocated_event(::std::string* event)
{
    if (event != NULL) {
        set_has_event();
    } else {
        clear_has_event();
    }
    event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfStatProto.PerfStatLine.event)
}

// -------------------------------------------------------------------

// PerfStatProto

// repeated .metrics.PerfStatProto.PerfStatLine line = 1;
int PerfStatProto::line_size() const
{
    return line_.size();
}
void PerfStatProto::clear_line()
{
    line_.Clear();
}
const ::metrics::PerfStatProto_PerfStatLine& PerfStatProto::line(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.PerfStatProto.line)
    return line_.Get(index);
}
::metrics::PerfStatProto_PerfStatLine* PerfStatProto::mutable_line(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.PerfStatProto.line)
    return line_.Mutable(index);
}
::metrics::PerfStatProto_PerfStatLine* PerfStatProto::add_line()
{
    // @@protoc_insertion_point(field_add:metrics.PerfStatProto.line)
    return line_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::PerfStatProto_PerfStatLine>*
PerfStatProto::mutable_line()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.PerfStatProto.line)
    return &line_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::PerfStatProto_PerfStatLine>&
PerfStatProto::line() const
{
    // @@protoc_insertion_point(field_list:metrics.PerfStatProto.line)
    return line_;
}

// optional string command_line = 2;
bool PerfStatProto::has_command_line() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerfStatProto::set_has_command_line()
{
    _has_bits_[0] |= 0x00000002u;
}
void PerfStatProto::clear_has_command_line()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PerfStatProto::clear_command_line()
{
    command_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_command_line();
}
const ::std::string& PerfStatProto::command_line() const
{
    // @@protoc_insertion_point(field_get:metrics.PerfStatProto.command_line)
    return command_line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfStatProto::set_command_line(const ::std::string& value)
{
    set_has_command_line();
    command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.PerfStatProto.command_line)
}
void PerfStatProto::set_command_line(const char* value)
{
    set_has_command_line();
    command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.PerfStatProto.command_line)
}
void PerfStatProto::set_command_line(const char* value, size_t size)
{
    set_has_command_line();
    command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.PerfStatProto.command_line)
}
::std::string* PerfStatProto::mutable_command_line()
{
    set_has_command_line();
    // @@protoc_insertion_point(field_mutable:metrics.PerfStatProto.command_line)
    return command_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PerfStatProto::release_command_line()
{
    // @@protoc_insertion_point(field_release:metrics.PerfStatProto.command_line)
    clear_has_command_line();
    return command_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfStatProto::set_allocated_command_line(::std::string* command_line)
{
    if (command_line != NULL) {
        set_has_command_line();
    } else {
        clear_has_command_line();
    }
    command_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_line);
    // @@protoc_insertion_point(field_set_allocated:metrics.PerfStatProto.command_line)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
