// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_user_metrics_extension.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chrome_user_metrics_extension.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_chrome_5fuser_5fmetrics_5fextension_2eproto()
{
    delete ChromeUserMetricsExtension::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ::metrics::protobuf_AddDesc_cast_5flogs_2eproto();
    ::metrics::protobuf_AddDesc_histogram_5fevent_2eproto();
    ::metrics::protobuf_AddDesc_memory_5fleak_5freport_2eproto();
    ::metrics::protobuf_AddDesc_omnibox_5fevent_2eproto();
    ::metrics::protobuf_AddDesc_profiler_5fevent_2eproto();
    ::metrics::protobuf_AddDesc_system_5fprofile_2eproto();
    ::metrics::protobuf_AddDesc_translate_5fevent_2eproto();
    ::metrics::protobuf_AddDesc_user_5faction_5fevent_2eproto();
    ::metrics::protobuf_AddDesc_perf_5fdata_2eproto();
    ::metrics::protobuf_AddDesc_sampled_5fprofile_2eproto();
    ChromeUserMetricsExtension::default_instance_ = new ChromeUserMetricsExtension();
    ChromeUserMetricsExtension::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chrome_5fuser_5fmetrics_5fextension_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto_once_);
void protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto_once_,
        &protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chrome_5fuser_5fmetrics_5fextension_2eproto {
    StaticDescriptorInitializer_chrome_5fuser_5fmetrics_5fextension_2eproto()
    {
        protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto();
    }
} static_descriptor_initializer_chrome_5fuser_5fmetrics_5fextension_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForChromeUserMetricsExtension(
    ChromeUserMetricsExtension* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool ChromeUserMetricsExtension_Product_IsValid(int value)
{
    switch (value) {
    case 0:
    case 20:
    case 35:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CHROME;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::ANDROID_WEBVIEW;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::CAST;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::Product_MIN;
const ChromeUserMetricsExtension_Product ChromeUserMetricsExtension::Product_MAX;
const int ChromeUserMetricsExtension::Product_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChromeUserMetricsExtension::kProductFieldNumber;
const int ChromeUserMetricsExtension::kClientIdFieldNumber;
const int ChromeUserMetricsExtension::kSessionIdFieldNumber;
const int ChromeUserMetricsExtension::kSystemProfileFieldNumber;
const int ChromeUserMetricsExtension::kUserActionEventFieldNumber;
const int ChromeUserMetricsExtension::kOmniboxEventFieldNumber;
const int ChromeUserMetricsExtension::kHistogramEventFieldNumber;
const int ChromeUserMetricsExtension::kProfilerEventFieldNumber;
const int ChromeUserMetricsExtension::kTranslateEventFieldNumber;
const int ChromeUserMetricsExtension::kPerfDataFieldNumber;
const int ChromeUserMetricsExtension::kSampledProfileFieldNumber;
const int ChromeUserMetricsExtension::kCastLogsFieldNumber;
const int ChromeUserMetricsExtension::kMemoryLeakReportFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ChromeUserMetricsExtension::ChromeUserMetricsExtension()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.ChromeUserMetricsExtension)
}

void ChromeUserMetricsExtension::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    system_profile_ = const_cast<::metrics::SystemProfileProto*>(
        ::metrics::SystemProfileProto::internal_default_instance());
#else
    system_profile_ = const_cast<::metrics::SystemProfileProto*>(&::metrics::SystemProfileProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    cast_logs_ = const_cast<::metrics::CastLogsProto*>(
        ::metrics::CastLogsProto::internal_default_instance());
#else
    cast_logs_ = const_cast<::metrics::CastLogsProto*>(&::metrics::CastLogsProto::default_instance());
#endif
}

ChromeUserMetricsExtension::ChromeUserMetricsExtension(const ChromeUserMetricsExtension& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.ChromeUserMetricsExtension)
}

void ChromeUserMetricsExtension::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_ = 0;
    client_id_ = GOOGLE_ULONGLONG(0);
    session_id_ = 0;
    system_profile_ = NULL;
    cast_logs_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChromeUserMetricsExtension::~ChromeUserMetricsExtension()
{
    // @@protoc_insertion_point(destructor:metrics.ChromeUserMetricsExtension)
    SharedDtor();
}

void ChromeUserMetricsExtension::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete system_profile_;
        delete cast_logs_;
    }
}

void ChromeUserMetricsExtension::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromeUserMetricsExtension& ChromeUserMetricsExtension::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_chrome_5fuser_5fmetrics_5fextension_2eproto();
#endif
    return *default_instance_;
}

ChromeUserMetricsExtension* ChromeUserMetricsExtension::default_instance_ = NULL;

ChromeUserMetricsExtension* ChromeUserMetricsExtension::New(::google::protobuf::Arena* arena) const
{
    ChromeUserMetricsExtension* n = new ChromeUserMetricsExtension;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ChromeUserMetricsExtension::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.ChromeUserMetricsExtension)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                \
    _Pragma("clang diagnostic push")                                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(ChromeUserMetricsExtension, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<ChromeUserMetricsExtension*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 15u) {
        ZR_(client_id_, session_id_);
        if (has_system_profile()) {
            if (system_profile_ != NULL)
                system_profile_->::metrics::SystemProfileProto::Clear();
        }
    }
    if (has_cast_logs()) {
        if (cast_logs_ != NULL)
            cast_logs_->::metrics::CastLogsProto::Clear();
    }

#undef ZR_HELPER_
#undef ZR_

    user_action_event_.Clear();
    omnibox_event_.Clear();
    histogram_event_.Clear();
    profiler_event_.Clear();
    translate_event_.Clear();
    perf_data_.Clear();
    sampled_profile_.Clear();
    memory_leak_report_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChromeUserMetricsExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForChromeUserMetricsExtension, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.ChromeUserMetricsExtension)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional fixed64 client_id = 1;
        case 1: {
            if (tag == 9) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &client_id_)));
                set_has_client_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_session_id;
            break;
        }

        // optional int32 session_id = 2;
        case 2: {
            if (tag == 16) {
            parse_session_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &session_id_)));
                set_has_session_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_system_profile;
            break;
        }

        // optional .metrics.SystemProfileProto system_profile = 3;
        case 3: {
            if (tag == 26) {
            parse_system_profile:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_system_profile()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_user_action_event;
            break;
        }

        // repeated .metrics.UserActionEventProto user_action_event = 4;
        case 4: {
            if (tag == 34) {
            parse_user_action_event:
                DO_(input->IncrementRecursionDepth());
            parse_loop_user_action_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_user_action_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_loop_user_action_event;
            if (input->ExpectTag(42))
                goto parse_loop_omnibox_event;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .metrics.OmniboxEventProto omnibox_event = 5;
        case 5: {
            if (tag == 42) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_omnibox_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_omnibox_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_loop_omnibox_event;
            if (input->ExpectTag(50))
                goto parse_loop_histogram_event;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .metrics.HistogramEventProto histogram_event = 6;
        case 6: {
            if (tag == 50) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_histogram_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_histogram_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_loop_histogram_event;
            if (input->ExpectTag(58))
                goto parse_loop_profiler_event;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .metrics.ProfilerEventProto profiler_event = 7;
        case 7: {
            if (tag == 58) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_profiler_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_profiler_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_loop_profiler_event;
            if (input->ExpectTag(66))
                goto parse_loop_perf_data;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
        case 8: {
            if (tag == 66) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_perf_data:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_perf_data()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_loop_perf_data;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(80))
                goto parse_product;
            break;
        }

        // optional int32 product = 10 [default = 0];
        case 10: {
            if (tag == 80) {
            parse_product:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &product_)));
                set_has_product();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_sampled_profile;
            break;
        }

        // repeated .metrics.SampledProfile sampled_profile = 11;
        case 11: {
            if (tag == 90) {
            parse_sampled_profile:
                DO_(input->IncrementRecursionDepth());
            parse_loop_sampled_profile:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_sampled_profile()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_loop_sampled_profile;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(98))
                goto parse_cast_logs;
            break;
        }

        // optional .metrics.CastLogsProto cast_logs = 12;
        case 12: {
            if (tag == 98) {
            parse_cast_logs:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_cast_logs()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_memory_leak_report;
            break;
        }

        // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
        case 13: {
            if (tag == 106) {
            parse_memory_leak_report:
                DO_(input->IncrementRecursionDepth());
            parse_loop_memory_leak_report:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_memory_leak_report()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_loop_memory_leak_report;
            if (input->ExpectTag(122))
                goto parse_loop_translate_event;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .metrics.TranslateEventProto translate_event = 15;
        case 15: {
            if (tag == 122) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_translate_event:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_translate_event()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_loop_translate_event;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.ChromeUserMetricsExtension)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.ChromeUserMetricsExtension)
    return false;
#undef DO_
}

void ChromeUserMetricsExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.ChromeUserMetricsExtension)
    // optional fixed64 client_id = 1;
    if (has_client_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_id(), output);
    }

    // optional int32 session_id = 2;
    if (has_session_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
    }

    // optional .metrics.SystemProfileProto system_profile = 3;
    if (has_system_profile()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->system_profile_, output);
    }

    // repeated .metrics.UserActionEventProto user_action_event = 4;
    for (unsigned int i = 0, n = this->user_action_event_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, this->user_action_event(i), output);
    }

    // repeated .metrics.OmniboxEventProto omnibox_event = 5;
    for (unsigned int i = 0, n = this->omnibox_event_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, this->omnibox_event(i), output);
    }

    // repeated .metrics.HistogramEventProto histogram_event = 6;
    for (unsigned int i = 0, n = this->histogram_event_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, this->histogram_event(i), output);
    }

    // repeated .metrics.ProfilerEventProto profiler_event = 7;
    for (unsigned int i = 0, n = this->profiler_event_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, this->profiler_event(i), output);
    }

    // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
    for (unsigned int i = 0, n = this->perf_data_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, this->perf_data(i), output);
    }

    // optional int32 product = 10 [default = 0];
    if (has_product()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->product(), output);
    }

    // repeated .metrics.SampledProfile sampled_profile = 11;
    for (unsigned int i = 0, n = this->sampled_profile_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, this->sampled_profile(i), output);
    }

    // optional .metrics.CastLogsProto cast_logs = 12;
    if (has_cast_logs()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *this->cast_logs_, output);
    }

    // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
    for (unsigned int i = 0, n = this->memory_leak_report_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, this->memory_leak_report(i), output);
    }

    // repeated .metrics.TranslateEventProto translate_event = 15;
    for (unsigned int i = 0, n = this->translate_event_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            15, this->translate_event(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.ChromeUserMetricsExtension)
}

int ChromeUserMetricsExtension::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.ChromeUserMetricsExtension)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional int32 product = 10 [default = 0];
        if (has_product()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->product());
        }

        // optional fixed64 client_id = 1;
        if (has_client_id()) {
            total_size += 1 + 8;
        }

        // optional int32 session_id = 2;
        if (has_session_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->session_id());
        }

        // optional .metrics.SystemProfileProto system_profile = 3;
        if (has_system_profile()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->system_profile_);
        }
    }
    // optional .metrics.CastLogsProto cast_logs = 12;
    if (has_cast_logs()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->cast_logs_);
    }

    // repeated .metrics.UserActionEventProto user_action_event = 4;
    total_size += 1 * this->user_action_event_size();
    for (int i = 0; i < this->user_action_event_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->user_action_event(i));
    }

    // repeated .metrics.OmniboxEventProto omnibox_event = 5;
    total_size += 1 * this->omnibox_event_size();
    for (int i = 0; i < this->omnibox_event_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->omnibox_event(i));
    }

    // repeated .metrics.HistogramEventProto histogram_event = 6;
    total_size += 1 * this->histogram_event_size();
    for (int i = 0; i < this->histogram_event_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->histogram_event(i));
    }

    // repeated .metrics.ProfilerEventProto profiler_event = 7;
    total_size += 1 * this->profiler_event_size();
    for (int i = 0; i < this->profiler_event_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->profiler_event(i));
    }

    // repeated .metrics.TranslateEventProto translate_event = 15;
    total_size += 1 * this->translate_event_size();
    for (int i = 0; i < this->translate_event_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->translate_event(i));
    }

    // repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
    total_size += 1 * this->perf_data_size();
    for (int i = 0; i < this->perf_data_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->perf_data(i));
    }

    // repeated .metrics.SampledProfile sampled_profile = 11;
    total_size += 1 * this->sampled_profile_size();
    for (int i = 0; i < this->sampled_profile_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->sampled_profile(i));
    }

    // repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
    total_size += 1 * this->memory_leak_report_size();
    for (int i = 0; i < this->memory_leak_report_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->memory_leak_report(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ChromeUserMetricsExtension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ChromeUserMetricsExtension*>(&from));
}

void ChromeUserMetricsExtension::MergeFrom(const ChromeUserMetricsExtension& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.ChromeUserMetricsExtension)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    user_action_event_.MergeFrom(from.user_action_event_);
    omnibox_event_.MergeFrom(from.omnibox_event_);
    histogram_event_.MergeFrom(from.histogram_event_);
    profiler_event_.MergeFrom(from.profiler_event_);
    translate_event_.MergeFrom(from.translate_event_);
    perf_data_.MergeFrom(from.perf_data_);
    sampled_profile_.MergeFrom(from.sampled_profile_);
    memory_leak_report_.MergeFrom(from.memory_leak_report_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_product()) {
            set_product(from.product());
        }
        if (from.has_client_id()) {
            set_client_id(from.client_id());
        }
        if (from.has_session_id()) {
            set_session_id(from.session_id());
        }
        if (from.has_system_profile()) {
            mutable_system_profile()->::metrics::SystemProfileProto::MergeFrom(from.system_profile());
        }
    }
    if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
        if (from.has_cast_logs()) {
            mutable_cast_logs()->::metrics::CastLogsProto::MergeFrom(from.cast_logs());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ChromeUserMetricsExtension::CopyFrom(const ChromeUserMetricsExtension& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.ChromeUserMetricsExtension)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ChromeUserMetricsExtension::IsInitialized() const
{

    return true;
}

void ChromeUserMetricsExtension::Swap(ChromeUserMetricsExtension* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ChromeUserMetricsExtension::InternalSwap(ChromeUserMetricsExtension* other)
{
    std::swap(product_, other->product_);
    std::swap(client_id_, other->client_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(system_profile_, other->system_profile_);
    user_action_event_.UnsafeArenaSwap(&other->user_action_event_);
    omnibox_event_.UnsafeArenaSwap(&other->omnibox_event_);
    histogram_event_.UnsafeArenaSwap(&other->histogram_event_);
    profiler_event_.UnsafeArenaSwap(&other->profiler_event_);
    translate_event_.UnsafeArenaSwap(&other->translate_event_);
    perf_data_.UnsafeArenaSwap(&other->perf_data_);
    sampled_profile_.UnsafeArenaSwap(&other->sampled_profile_);
    std::swap(cast_logs_, other->cast_logs_);
    memory_leak_report_.UnsafeArenaSwap(&other->memory_leak_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChromeUserMetricsExtension::GetTypeName() const
{
    return "metrics.ChromeUserMetricsExtension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromeUserMetricsExtension

// optional int32 product = 10 [default = 0];
bool ChromeUserMetricsExtension::has_product() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChromeUserMetricsExtension::set_has_product()
{
    _has_bits_[0] |= 0x00000001u;
}
void ChromeUserMetricsExtension::clear_has_product()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ChromeUserMetricsExtension::clear_product()
{
    product_ = 0;
    clear_has_product();
}
::google::protobuf::int32 ChromeUserMetricsExtension::product() const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.product)
    return product_;
}
void ChromeUserMetricsExtension::set_product(::google::protobuf::int32 value)
{
    set_has_product();
    product_ = value;
    // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.product)
}

// optional fixed64 client_id = 1;
bool ChromeUserMetricsExtension::has_client_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChromeUserMetricsExtension::set_has_client_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void ChromeUserMetricsExtension::clear_has_client_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ChromeUserMetricsExtension::clear_client_id()
{
    client_id_ = GOOGLE_ULONGLONG(0);
    clear_has_client_id();
}
::google::protobuf::uint64 ChromeUserMetricsExtension::client_id() const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.client_id)
    return client_id_;
}
void ChromeUserMetricsExtension::set_client_id(::google::protobuf::uint64 value)
{
    set_has_client_id();
    client_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.client_id)
}

// optional int32 session_id = 2;
bool ChromeUserMetricsExtension::has_session_id() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChromeUserMetricsExtension::set_has_session_id()
{
    _has_bits_[0] |= 0x00000004u;
}
void ChromeUserMetricsExtension::clear_has_session_id()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ChromeUserMetricsExtension::clear_session_id()
{
    session_id_ = 0;
    clear_has_session_id();
}
::google::protobuf::int32 ChromeUserMetricsExtension::session_id() const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.session_id)
    return session_id_;
}
void ChromeUserMetricsExtension::set_session_id(::google::protobuf::int32 value)
{
    set_has_session_id();
    session_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.ChromeUserMetricsExtension.session_id)
}

// optional .metrics.SystemProfileProto system_profile = 3;
bool ChromeUserMetricsExtension::has_system_profile() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChromeUserMetricsExtension::set_has_system_profile()
{
    _has_bits_[0] |= 0x00000008u;
}
void ChromeUserMetricsExtension::clear_has_system_profile()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ChromeUserMetricsExtension::clear_system_profile()
{
    if (system_profile_ != NULL)
        system_profile_->::metrics::SystemProfileProto::Clear();
    clear_has_system_profile();
}
const ::metrics::SystemProfileProto& ChromeUserMetricsExtension::system_profile() const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.system_profile)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return system_profile_ != NULL ? *system_profile_ : *default_instance().system_profile_;
#else
    return system_profile_ != NULL ? *system_profile_ : *default_instance_->system_profile_;
#endif
}
::metrics::SystemProfileProto* ChromeUserMetricsExtension::mutable_system_profile()
{
    set_has_system_profile();
    if (system_profile_ == NULL) {
        system_profile_ = new ::metrics::SystemProfileProto;
    }
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.system_profile)
    return system_profile_;
}
::metrics::SystemProfileProto* ChromeUserMetricsExtension::release_system_profile()
{
    // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.system_profile)
    clear_has_system_profile();
    ::metrics::SystemProfileProto* temp = system_profile_;
    system_profile_ = NULL;
    return temp;
}
void ChromeUserMetricsExtension::set_allocated_system_profile(::metrics::SystemProfileProto* system_profile)
{
    delete system_profile_;
    system_profile_ = system_profile;
    if (system_profile) {
        set_has_system_profile();
    } else {
        clear_has_system_profile();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.system_profile)
}

// repeated .metrics.UserActionEventProto user_action_event = 4;
int ChromeUserMetricsExtension::user_action_event_size() const
{
    return user_action_event_.size();
}
void ChromeUserMetricsExtension::clear_user_action_event()
{
    user_action_event_.Clear();
}
const ::metrics::UserActionEventProto& ChromeUserMetricsExtension::user_action_event(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.user_action_event)
    return user_action_event_.Get(index);
}
::metrics::UserActionEventProto* ChromeUserMetricsExtension::mutable_user_action_event(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.user_action_event)
    return user_action_event_.Mutable(index);
}
::metrics::UserActionEventProto* ChromeUserMetricsExtension::add_user_action_event()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.user_action_event)
    return user_action_event_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::UserActionEventProto>*
ChromeUserMetricsExtension::mutable_user_action_event()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.user_action_event)
    return &user_action_event_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::UserActionEventProto>&
ChromeUserMetricsExtension::user_action_event() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.user_action_event)
    return user_action_event_;
}

// repeated .metrics.OmniboxEventProto omnibox_event = 5;
int ChromeUserMetricsExtension::omnibox_event_size() const
{
    return omnibox_event_.size();
}
void ChromeUserMetricsExtension::clear_omnibox_event()
{
    omnibox_event_.Clear();
}
const ::metrics::OmniboxEventProto& ChromeUserMetricsExtension::omnibox_event(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.omnibox_event)
    return omnibox_event_.Get(index);
}
::metrics::OmniboxEventProto* ChromeUserMetricsExtension::mutable_omnibox_event(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.omnibox_event)
    return omnibox_event_.Mutable(index);
}
::metrics::OmniboxEventProto* ChromeUserMetricsExtension::add_omnibox_event()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.omnibox_event)
    return omnibox_event_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::OmniboxEventProto>*
ChromeUserMetricsExtension::mutable_omnibox_event()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.omnibox_event)
    return &omnibox_event_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::OmniboxEventProto>&
ChromeUserMetricsExtension::omnibox_event() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.omnibox_event)
    return omnibox_event_;
}

// repeated .metrics.HistogramEventProto histogram_event = 6;
int ChromeUserMetricsExtension::histogram_event_size() const
{
    return histogram_event_.size();
}
void ChromeUserMetricsExtension::clear_histogram_event()
{
    histogram_event_.Clear();
}
const ::metrics::HistogramEventProto& ChromeUserMetricsExtension::histogram_event(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.histogram_event)
    return histogram_event_.Get(index);
}
::metrics::HistogramEventProto* ChromeUserMetricsExtension::mutable_histogram_event(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.histogram_event)
    return histogram_event_.Mutable(index);
}
::metrics::HistogramEventProto* ChromeUserMetricsExtension::add_histogram_event()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.histogram_event)
    return histogram_event_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::HistogramEventProto>*
ChromeUserMetricsExtension::mutable_histogram_event()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.histogram_event)
    return &histogram_event_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::HistogramEventProto>&
ChromeUserMetricsExtension::histogram_event() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.histogram_event)
    return histogram_event_;
}

// repeated .metrics.ProfilerEventProto profiler_event = 7;
int ChromeUserMetricsExtension::profiler_event_size() const
{
    return profiler_event_.size();
}
void ChromeUserMetricsExtension::clear_profiler_event()
{
    profiler_event_.Clear();
}
const ::metrics::ProfilerEventProto& ChromeUserMetricsExtension::profiler_event(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.profiler_event)
    return profiler_event_.Get(index);
}
::metrics::ProfilerEventProto* ChromeUserMetricsExtension::mutable_profiler_event(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.profiler_event)
    return profiler_event_.Mutable(index);
}
::metrics::ProfilerEventProto* ChromeUserMetricsExtension::add_profiler_event()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.profiler_event)
    return profiler_event_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::ProfilerEventProto>*
ChromeUserMetricsExtension::mutable_profiler_event()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.profiler_event)
    return &profiler_event_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::ProfilerEventProto>&
ChromeUserMetricsExtension::profiler_event() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.profiler_event)
    return profiler_event_;
}

// repeated .metrics.TranslateEventProto translate_event = 15;
int ChromeUserMetricsExtension::translate_event_size() const
{
    return translate_event_.size();
}
void ChromeUserMetricsExtension::clear_translate_event()
{
    translate_event_.Clear();
}
const ::metrics::TranslateEventProto& ChromeUserMetricsExtension::translate_event(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.translate_event)
    return translate_event_.Get(index);
}
::metrics::TranslateEventProto* ChromeUserMetricsExtension::mutable_translate_event(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.translate_event)
    return translate_event_.Mutable(index);
}
::metrics::TranslateEventProto* ChromeUserMetricsExtension::add_translate_event()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.translate_event)
    return translate_event_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::TranslateEventProto>*
ChromeUserMetricsExtension::mutable_translate_event()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.translate_event)
    return &translate_event_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::TranslateEventProto>&
ChromeUserMetricsExtension::translate_event() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.translate_event)
    return translate_event_;
}

// repeated .metrics.PerfDataProto perf_data = 8 [deprecated = true];
int ChromeUserMetricsExtension::perf_data_size() const
{
    return perf_data_.size();
}
void ChromeUserMetricsExtension::clear_perf_data()
{
    perf_data_.Clear();
}
const ::metrics::PerfDataProto& ChromeUserMetricsExtension::perf_data(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.perf_data)
    return perf_data_.Get(index);
}
::metrics::PerfDataProto* ChromeUserMetricsExtension::mutable_perf_data(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.perf_data)
    return perf_data_.Mutable(index);
}
::metrics::PerfDataProto* ChromeUserMetricsExtension::add_perf_data()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.perf_data)
    return perf_data_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto>*
ChromeUserMetricsExtension::mutable_perf_data()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.perf_data)
    return &perf_data_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::PerfDataProto>&
ChromeUserMetricsExtension::perf_data() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.perf_data)
    return perf_data_;
}

// repeated .metrics.SampledProfile sampled_profile = 11;
int ChromeUserMetricsExtension::sampled_profile_size() const
{
    return sampled_profile_.size();
}
void ChromeUserMetricsExtension::clear_sampled_profile()
{
    sampled_profile_.Clear();
}
const ::metrics::SampledProfile& ChromeUserMetricsExtension::sampled_profile(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.sampled_profile)
    return sampled_profile_.Get(index);
}
::metrics::SampledProfile* ChromeUserMetricsExtension::mutable_sampled_profile(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.sampled_profile)
    return sampled_profile_.Mutable(index);
}
::metrics::SampledProfile* ChromeUserMetricsExtension::add_sampled_profile()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.sampled_profile)
    return sampled_profile_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SampledProfile>*
ChromeUserMetricsExtension::mutable_sampled_profile()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.sampled_profile)
    return &sampled_profile_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SampledProfile>&
ChromeUserMetricsExtension::sampled_profile() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.sampled_profile)
    return sampled_profile_;
}

// optional .metrics.CastLogsProto cast_logs = 12;
bool ChromeUserMetricsExtension::has_cast_logs() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChromeUserMetricsExtension::set_has_cast_logs()
{
    _has_bits_[0] |= 0x00000800u;
}
void ChromeUserMetricsExtension::clear_has_cast_logs()
{
    _has_bits_[0] &= ~0x00000800u;
}
void ChromeUserMetricsExtension::clear_cast_logs()
{
    if (cast_logs_ != NULL)
        cast_logs_->::metrics::CastLogsProto::Clear();
    clear_has_cast_logs();
}
const ::metrics::CastLogsProto& ChromeUserMetricsExtension::cast_logs() const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.cast_logs)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return cast_logs_ != NULL ? *cast_logs_ : *default_instance().cast_logs_;
#else
    return cast_logs_ != NULL ? *cast_logs_ : *default_instance_->cast_logs_;
#endif
}
::metrics::CastLogsProto* ChromeUserMetricsExtension::mutable_cast_logs()
{
    set_has_cast_logs();
    if (cast_logs_ == NULL) {
        cast_logs_ = new ::metrics::CastLogsProto;
    }
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.cast_logs)
    return cast_logs_;
}
::metrics::CastLogsProto* ChromeUserMetricsExtension::release_cast_logs()
{
    // @@protoc_insertion_point(field_release:metrics.ChromeUserMetricsExtension.cast_logs)
    clear_has_cast_logs();
    ::metrics::CastLogsProto* temp = cast_logs_;
    cast_logs_ = NULL;
    return temp;
}
void ChromeUserMetricsExtension::set_allocated_cast_logs(::metrics::CastLogsProto* cast_logs)
{
    delete cast_logs_;
    cast_logs_ = cast_logs;
    if (cast_logs) {
        set_has_cast_logs();
    } else {
        clear_has_cast_logs();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.ChromeUserMetricsExtension.cast_logs)
}

// repeated .metrics.MemoryLeakReportProto memory_leak_report = 13;
int ChromeUserMetricsExtension::memory_leak_report_size() const
{
    return memory_leak_report_.size();
}
void ChromeUserMetricsExtension::clear_memory_leak_report()
{
    memory_leak_report_.Clear();
}
const ::metrics::MemoryLeakReportProto& ChromeUserMetricsExtension::memory_leak_report(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ChromeUserMetricsExtension.memory_leak_report)
    return memory_leak_report_.Get(index);
}
::metrics::MemoryLeakReportProto* ChromeUserMetricsExtension::mutable_memory_leak_report(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ChromeUserMetricsExtension.memory_leak_report)
    return memory_leak_report_.Mutable(index);
}
::metrics::MemoryLeakReportProto* ChromeUserMetricsExtension::add_memory_leak_report()
{
    // @@protoc_insertion_point(field_add:metrics.ChromeUserMetricsExtension.memory_leak_report)
    return memory_leak_report_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::MemoryLeakReportProto>*
ChromeUserMetricsExtension::mutable_memory_leak_report()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ChromeUserMetricsExtension.memory_leak_report)
    return &memory_leak_report_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::MemoryLeakReportProto>&
ChromeUserMetricsExtension::memory_leak_report() const
{
    // @@protoc_insertion_point(field_list:metrics.ChromeUserMetricsExtension.memory_leak_report)
    return memory_leak_report_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
