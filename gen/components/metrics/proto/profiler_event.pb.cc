// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profiler_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "profiler_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_profiler_5fevent_2eproto()
{
    delete ProfilerEventProto::default_instance_;
    delete ProfilerEventProto_TrackedObject::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_profiler_5fevent_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_profiler_5fevent_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ProfilerEventProto::default_instance_ = new ProfilerEventProto();
    ProfilerEventProto_TrackedObject::default_instance_ = new ProfilerEventProto_TrackedObject();
    ProfilerEventProto::default_instance_->InitAsDefaultInstance();
    ProfilerEventProto_TrackedObject::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_profiler_5fevent_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_profiler_5fevent_2eproto_once_);
void protobuf_AddDesc_profiler_5fevent_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_profiler_5fevent_2eproto_once_,
        &protobuf_AddDesc_profiler_5fevent_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_profiler_5fevent_2eproto {
    StaticDescriptorInitializer_profiler_5fevent_2eproto()
    {
        protobuf_AddDesc_profiler_5fevent_2eproto();
    }
} static_descriptor_initializer_profiler_5fevent_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForProfilerEventProto(
    ProfilerEventProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool ProfilerEventProto_ProfileVersion_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfilerEventProto_ProfileVersion ProfilerEventProto::VERSION_UNKNOWN;
const ProfilerEventProto_ProfileVersion ProfilerEventProto::VERSION_STARTUP_PROFILE;
const ProfilerEventProto_ProfileVersion ProfilerEventProto::VERSION_SPLIT_PROFILE;
const ProfilerEventProto_ProfileVersion ProfilerEventProto::ProfileVersion_MIN;
const ProfilerEventProto_ProfileVersion ProfilerEventProto::ProfileVersion_MAX;
const int ProfilerEventProto::ProfileVersion_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ProfilerEventProto_TimeSource_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfilerEventProto_TimeSource ProfilerEventProto::UNKNOWN_TIME_SOURCE;
const ProfilerEventProto_TimeSource ProfilerEventProto::WALL_CLOCK_TIME;
const ProfilerEventProto_TimeSource ProfilerEventProto::TimeSource_MIN;
const ProfilerEventProto_TimeSource ProfilerEventProto::TimeSource_MAX;
const int ProfilerEventProto::TimeSource_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ProfilerEventProto_ProfilerEvent_IsValid(int value)
{
    switch (value) {
    case 0:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfilerEventProto_ProfilerEvent ProfilerEventProto::EVENT_FIRST_NONEMPTY_PAINT;
const ProfilerEventProto_ProfilerEvent ProfilerEventProto::ProfilerEvent_MIN;
const ProfilerEventProto_ProfilerEvent ProfilerEventProto::ProfilerEvent_MAX;
const int ProfilerEventProto::ProfilerEvent_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForProfilerEventProto_TrackedObject(
    ProfilerEventProto_TrackedObject* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool ProfilerEventProto_TrackedObject_ProcessType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::UNKNOWN;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::BROWSER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::RENDERER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::PLUGIN;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::WORKER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::NACL_LOADER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::UTILITY;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::PROFILE_IMPORT;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::ZYGOTE;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::SANDBOX_HELPER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::NACL_BROKER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::GPU;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::PPAPI_PLUGIN;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::PPAPI_BROKER;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::ProcessType_MIN;
const ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::ProcessType_MAX;
const int ProfilerEventProto_TrackedObject::ProcessType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfilerEventProto_TrackedObject::kBirthThreadNameHashFieldNumber;
const int ProfilerEventProto_TrackedObject::kExecThreadNameHashFieldNumber;
const int ProfilerEventProto_TrackedObject::kSourceFileNameHashFieldNumber;
const int ProfilerEventProto_TrackedObject::kSourceFunctionNameHashFieldNumber;
const int ProfilerEventProto_TrackedObject::kSourceLineNumberFieldNumber;
const int ProfilerEventProto_TrackedObject::kExecCountFieldNumber;
const int ProfilerEventProto_TrackedObject::kExecTimeTotalFieldNumber;
const int ProfilerEventProto_TrackedObject::kExecTimeSampledFieldNumber;
const int ProfilerEventProto_TrackedObject::kQueueTimeTotalFieldNumber;
const int ProfilerEventProto_TrackedObject::kQueueTimeSampledFieldNumber;
const int ProfilerEventProto_TrackedObject::kProcessTypeFieldNumber;
const int ProfilerEventProto_TrackedObject::kProcessIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfilerEventProto_TrackedObject::ProfilerEventProto_TrackedObject()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.ProfilerEventProto.TrackedObject)
}

void ProfilerEventProto_TrackedObject::InitAsDefaultInstance()
{
}

ProfilerEventProto_TrackedObject::ProfilerEventProto_TrackedObject(const ProfilerEventProto_TrackedObject& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.ProfilerEventProto.TrackedObject)
}

void ProfilerEventProto_TrackedObject::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    birth_thread_name_hash_ = GOOGLE_ULONGLONG(0);
    exec_thread_name_hash_ = GOOGLE_ULONGLONG(0);
    source_file_name_hash_ = GOOGLE_ULONGLONG(0);
    source_function_name_hash_ = GOOGLE_ULONGLONG(0);
    source_line_number_ = 0;
    exec_count_ = 0;
    exec_time_total_ = 0;
    exec_time_sampled_ = 0;
    queue_time_total_ = 0;
    queue_time_sampled_ = 0;
    process_type_ = 0;
    process_id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfilerEventProto_TrackedObject::~ProfilerEventProto_TrackedObject()
{
    // @@protoc_insertion_point(destructor:metrics.ProfilerEventProto.TrackedObject)
    SharedDtor();
}

void ProfilerEventProto_TrackedObject::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ProfilerEventProto_TrackedObject::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProfilerEventProto_TrackedObject& ProfilerEventProto_TrackedObject::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_profiler_5fevent_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_profiler_5fevent_2eproto();
#endif
    return *default_instance_;
}

ProfilerEventProto_TrackedObject* ProfilerEventProto_TrackedObject::default_instance_ = NULL;

ProfilerEventProto_TrackedObject* ProfilerEventProto_TrackedObject::New(::google::protobuf::Arena* arena) const
{
    ProfilerEventProto_TrackedObject* n = new ProfilerEventProto_TrackedObject;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ProfilerEventProto_TrackedObject::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.ProfilerEventProto.TrackedObject)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                      \
    _Pragma("clang diagnostic push")                                                                                       \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(ProfilerEventProto_TrackedObject, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<ProfilerEventProto_TrackedObject*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(birth_thread_name_hash_, exec_time_sampled_);
    }
    ZR_(queue_time_total_, process_id_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProfilerEventProto_TrackedObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForProfilerEventProto_TrackedObject, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.ProfilerEventProto.TrackedObject)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional fixed64 birth_thread_name_hash = 1;
        case 1: {
            if (tag == 9) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &birth_thread_name_hash_)));
                set_has_birth_thread_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(17))
                goto parse_exec_thread_name_hash;
            break;
        }

        // optional fixed64 exec_thread_name_hash = 2;
        case 2: {
            if (tag == 17) {
            parse_exec_thread_name_hash:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &exec_thread_name_hash_)));
                set_has_exec_thread_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(25))
                goto parse_source_file_name_hash;
            break;
        }

        // optional fixed64 source_file_name_hash = 3;
        case 3: {
            if (tag == 25) {
            parse_source_file_name_hash:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &source_file_name_hash_)));
                set_has_source_file_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(33))
                goto parse_source_function_name_hash;
            break;
        }

        // optional fixed64 source_function_name_hash = 4;
        case 4: {
            if (tag == 33) {
            parse_source_function_name_hash:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &source_function_name_hash_)));
                set_has_source_function_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_source_line_number;
            break;
        }

        // optional int32 source_line_number = 5;
        case 5: {
            if (tag == 40) {
            parse_source_line_number:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &source_line_number_)));
                set_has_source_line_number();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_exec_count;
            break;
        }

        // optional int32 exec_count = 6;
        case 6: {
            if (tag == 48) {
            parse_exec_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &exec_count_)));
                set_has_exec_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_exec_time_total;
            break;
        }

        // optional int32 exec_time_total = 7;
        case 7: {
            if (tag == 56) {
            parse_exec_time_total:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &exec_time_total_)));
                set_has_exec_time_total();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_exec_time_sampled;
            break;
        }

        // optional int32 exec_time_sampled = 8;
        case 8: {
            if (tag == 64) {
            parse_exec_time_sampled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &exec_time_sampled_)));
                set_has_exec_time_sampled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_queue_time_total;
            break;
        }

        // optional int32 queue_time_total = 9;
        case 9: {
            if (tag == 72) {
            parse_queue_time_total:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &queue_time_total_)));
                set_has_queue_time_total();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(80))
                goto parse_queue_time_sampled;
            break;
        }

        // optional int32 queue_time_sampled = 10;
        case 10: {
            if (tag == 80) {
            parse_queue_time_sampled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &queue_time_sampled_)));
                set_has_queue_time_sampled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_process_type;
            break;
        }

        // optional .metrics.ProfilerEventProto.TrackedObject.ProcessType process_type = 11;
        case 11: {
            if (tag == 88) {
            parse_process_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::ProfilerEventProto_TrackedObject_ProcessType_IsValid(value)) {
                    set_process_type(static_cast<::metrics::ProfilerEventProto_TrackedObject_ProcessType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(88);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_process_id;
            break;
        }

        // optional uint32 process_id = 12;
        case 12: {
            if (tag == 96) {
            parse_process_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &process_id_)));
                set_has_process_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.ProfilerEventProto.TrackedObject)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.ProfilerEventProto.TrackedObject)
    return false;
#undef DO_
}

void ProfilerEventProto_TrackedObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.ProfilerEventProto.TrackedObject)
    // optional fixed64 birth_thread_name_hash = 1;
    if (has_birth_thread_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->birth_thread_name_hash(), output);
    }

    // optional fixed64 exec_thread_name_hash = 2;
    if (has_exec_thread_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->exec_thread_name_hash(), output);
    }

    // optional fixed64 source_file_name_hash = 3;
    if (has_source_file_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->source_file_name_hash(), output);
    }

    // optional fixed64 source_function_name_hash = 4;
    if (has_source_function_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->source_function_name_hash(), output);
    }

    // optional int32 source_line_number = 5;
    if (has_source_line_number()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->source_line_number(), output);
    }

    // optional int32 exec_count = 6;
    if (has_exec_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exec_count(), output);
    }

    // optional int32 exec_time_total = 7;
    if (has_exec_time_total()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exec_time_total(), output);
    }

    // optional int32 exec_time_sampled = 8;
    if (has_exec_time_sampled()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exec_time_sampled(), output);
    }

    // optional int32 queue_time_total = 9;
    if (has_queue_time_total()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->queue_time_total(), output);
    }

    // optional int32 queue_time_sampled = 10;
    if (has_queue_time_sampled()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->queue_time_sampled(), output);
    }

    // optional .metrics.ProfilerEventProto.TrackedObject.ProcessType process_type = 11;
    if (has_process_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            11, this->process_type(), output);
    }

    // optional uint32 process_id = 12;
    if (has_process_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->process_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.ProfilerEventProto.TrackedObject)
}

int ProfilerEventProto_TrackedObject::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.ProfilerEventProto.TrackedObject)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional fixed64 birth_thread_name_hash = 1;
        if (has_birth_thread_name_hash()) {
            total_size += 1 + 8;
        }

        // optional fixed64 exec_thread_name_hash = 2;
        if (has_exec_thread_name_hash()) {
            total_size += 1 + 8;
        }

        // optional fixed64 source_file_name_hash = 3;
        if (has_source_file_name_hash()) {
            total_size += 1 + 8;
        }

        // optional fixed64 source_function_name_hash = 4;
        if (has_source_function_name_hash()) {
            total_size += 1 + 8;
        }

        // optional int32 source_line_number = 5;
        if (has_source_line_number()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->source_line_number());
        }

        // optional int32 exec_count = 6;
        if (has_exec_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->exec_count());
        }

        // optional int32 exec_time_total = 7;
        if (has_exec_time_total()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->exec_time_total());
        }

        // optional int32 exec_time_sampled = 8;
        if (has_exec_time_sampled()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->exec_time_sampled());
        }
    }
    if (_has_bits_[8 / 32] & 3840u) {
        // optional int32 queue_time_total = 9;
        if (has_queue_time_total()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->queue_time_total());
        }

        // optional int32 queue_time_sampled = 10;
        if (has_queue_time_sampled()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->queue_time_sampled());
        }

        // optional .metrics.ProfilerEventProto.TrackedObject.ProcessType process_type = 11;
        if (has_process_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->process_type());
        }

        // optional uint32 process_id = 12;
        if (has_process_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->process_id());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ProfilerEventProto_TrackedObject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ProfilerEventProto_TrackedObject*>(&from));
}

void ProfilerEventProto_TrackedObject::MergeFrom(const ProfilerEventProto_TrackedObject& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.ProfilerEventProto.TrackedObject)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_birth_thread_name_hash()) {
            set_birth_thread_name_hash(from.birth_thread_name_hash());
        }
        if (from.has_exec_thread_name_hash()) {
            set_exec_thread_name_hash(from.exec_thread_name_hash());
        }
        if (from.has_source_file_name_hash()) {
            set_source_file_name_hash(from.source_file_name_hash());
        }
        if (from.has_source_function_name_hash()) {
            set_source_function_name_hash(from.source_function_name_hash());
        }
        if (from.has_source_line_number()) {
            set_source_line_number(from.source_line_number());
        }
        if (from.has_exec_count()) {
            set_exec_count(from.exec_count());
        }
        if (from.has_exec_time_total()) {
            set_exec_time_total(from.exec_time_total());
        }
        if (from.has_exec_time_sampled()) {
            set_exec_time_sampled(from.exec_time_sampled());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_queue_time_total()) {
            set_queue_time_total(from.queue_time_total());
        }
        if (from.has_queue_time_sampled()) {
            set_queue_time_sampled(from.queue_time_sampled());
        }
        if (from.has_process_type()) {
            set_process_type(from.process_type());
        }
        if (from.has_process_id()) {
            set_process_id(from.process_id());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ProfilerEventProto_TrackedObject::CopyFrom(const ProfilerEventProto_TrackedObject& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.ProfilerEventProto.TrackedObject)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ProfilerEventProto_TrackedObject::IsInitialized() const
{

    return true;
}

void ProfilerEventProto_TrackedObject::Swap(ProfilerEventProto_TrackedObject* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ProfilerEventProto_TrackedObject::InternalSwap(ProfilerEventProto_TrackedObject* other)
{
    std::swap(birth_thread_name_hash_, other->birth_thread_name_hash_);
    std::swap(exec_thread_name_hash_, other->exec_thread_name_hash_);
    std::swap(source_file_name_hash_, other->source_file_name_hash_);
    std::swap(source_function_name_hash_, other->source_function_name_hash_);
    std::swap(source_line_number_, other->source_line_number_);
    std::swap(exec_count_, other->exec_count_);
    std::swap(exec_time_total_, other->exec_time_total_);
    std::swap(exec_time_sampled_, other->exec_time_sampled_);
    std::swap(queue_time_total_, other->queue_time_total_);
    std::swap(queue_time_sampled_, other->queue_time_sampled_);
    std::swap(process_type_, other->process_type_);
    std::swap(process_id_, other->process_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProfilerEventProto_TrackedObject::GetTypeName() const
{
    return "metrics.ProfilerEventProto.TrackedObject";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfilerEventProto::kProfileVersionFieldNumber;
const int ProfilerEventProto::kTimeSourceFieldNumber;
const int ProfilerEventProto::kPastSessionEventFieldNumber;
const int ProfilerEventProto::kProfilingStartMsFieldNumber;
const int ProfilerEventProto::kProfilingFinishMsFieldNumber;
const int ProfilerEventProto::kTrackedObjectFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfilerEventProto::ProfilerEventProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.ProfilerEventProto)
}

void ProfilerEventProto::InitAsDefaultInstance()
{
}

ProfilerEventProto::ProfilerEventProto(const ProfilerEventProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.ProfilerEventProto)
}

void ProfilerEventProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    profile_version_ = 0;
    time_source_ = 0;
    profiling_start_ms_ = GOOGLE_LONGLONG(0);
    profiling_finish_ms_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfilerEventProto::~ProfilerEventProto()
{
    // @@protoc_insertion_point(destructor:metrics.ProfilerEventProto)
    SharedDtor();
}

void ProfilerEventProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ProfilerEventProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProfilerEventProto& ProfilerEventProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_profiler_5fevent_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_profiler_5fevent_2eproto();
#endif
    return *default_instance_;
}

ProfilerEventProto* ProfilerEventProto::default_instance_ = NULL;

ProfilerEventProto* ProfilerEventProto::New(::google::protobuf::Arena* arena) const
{
    ProfilerEventProto* n = new ProfilerEventProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ProfilerEventProto::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.ProfilerEventProto)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                        \
    _Pragma("clang diagnostic push")                                                                         \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(ProfilerEventProto, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<ProfilerEventProto*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(profile_version_, time_source_);
    ZR_(profiling_start_ms_, profiling_finish_ms_);

#undef ZR_HELPER_
#undef ZR_

    past_session_event_.Clear();
    tracked_object_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProfilerEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForProfilerEventProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.ProfilerEventProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.ProfilerEventProto.ProfileVersion profile_version = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::ProfilerEventProto_ProfileVersion_IsValid(value)) {
                    set_profile_version(static_cast<::metrics::ProfilerEventProto_ProfileVersion>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_time_source;
            break;
        }

        // optional .metrics.ProfilerEventProto.TimeSource time_source = 2;
        case 2: {
            if (tag == 16) {
            parse_time_source:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::ProfilerEventProto_TimeSource_IsValid(value)) {
                    set_time_source(static_cast<::metrics::ProfilerEventProto_TimeSource>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_tracked_object;
            break;
        }

        // repeated .metrics.ProfilerEventProto.TrackedObject tracked_object = 3;
        case 3: {
            if (tag == 26) {
            parse_tracked_object:
                DO_(input->IncrementRecursionDepth());
            parse_loop_tracked_object:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_tracked_object()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_loop_tracked_object;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(32))
                goto parse_past_session_event;
            break;
        }

        // repeated .metrics.ProfilerEventProto.ProfilerEvent past_session_event = 4;
        case 4: {
            if (tag == 32) {
            parse_past_session_event:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::ProfilerEventProto_ProfilerEvent_IsValid(value)) {
                    add_past_session_event(static_cast<::metrics::ProfilerEventProto_ProfilerEvent>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(tag);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else if (tag == 34) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                    input,
                    4,
                    ::metrics::ProfilerEventProto_ProfilerEvent_IsValid,
                    &unknown_fields_stream,
                    this->mutable_past_session_event())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_past_session_event;
            if (input->ExpectTag(40))
                goto parse_profiling_start_ms;
            break;
        }

        // optional int64 profiling_start_ms = 5;
        case 5: {
            if (tag == 40) {
            parse_profiling_start_ms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &profiling_start_ms_)));
                set_has_profiling_start_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_profiling_finish_ms;
            break;
        }

        // optional int64 profiling_finish_ms = 6;
        case 6: {
            if (tag == 48) {
            parse_profiling_finish_ms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &profiling_finish_ms_)));
                set_has_profiling_finish_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.ProfilerEventProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.ProfilerEventProto)
    return false;
#undef DO_
}

void ProfilerEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.ProfilerEventProto)
    // optional .metrics.ProfilerEventProto.ProfileVersion profile_version = 1;
    if (has_profile_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->profile_version(), output);
    }

    // optional .metrics.ProfilerEventProto.TimeSource time_source = 2;
    if (has_time_source()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->time_source(), output);
    }

    // repeated .metrics.ProfilerEventProto.TrackedObject tracked_object = 3;
    for (unsigned int i = 0, n = this->tracked_object_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, this->tracked_object(i), output);
    }

    // repeated .metrics.ProfilerEventProto.ProfilerEvent past_session_event = 4;
    for (int i = 0; i < this->past_session_event_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            4, this->past_session_event(i), output);
    }

    // optional int64 profiling_start_ms = 5;
    if (has_profiling_start_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->profiling_start_ms(), output);
    }

    // optional int64 profiling_finish_ms = 6;
    if (has_profiling_finish_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->profiling_finish_ms(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.ProfilerEventProto)
}

int ProfilerEventProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.ProfilerEventProto)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 27u) {
        // optional .metrics.ProfilerEventProto.ProfileVersion profile_version = 1;
        if (has_profile_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->profile_version());
        }

        // optional .metrics.ProfilerEventProto.TimeSource time_source = 2;
        if (has_time_source()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_source());
        }

        // optional int64 profiling_start_ms = 5;
        if (has_profiling_start_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->profiling_start_ms());
        }

        // optional int64 profiling_finish_ms = 6;
        if (has_profiling_finish_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->profiling_finish_ms());
        }
    }
    // repeated .metrics.ProfilerEventProto.ProfilerEvent past_session_event = 4;
    {
        int data_size = 0;
        for (int i = 0; i < this->past_session_event_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
                this->past_session_event(i));
        }
        total_size += 1 * this->past_session_event_size() + data_size;
    }

    // repeated .metrics.ProfilerEventProto.TrackedObject tracked_object = 3;
    total_size += 1 * this->tracked_object_size();
    for (int i = 0; i < this->tracked_object_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->tracked_object(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ProfilerEventProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ProfilerEventProto*>(&from));
}

void ProfilerEventProto::MergeFrom(const ProfilerEventProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.ProfilerEventProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    past_session_event_.MergeFrom(from.past_session_event_);
    tracked_object_.MergeFrom(from.tracked_object_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_profile_version()) {
            set_profile_version(from.profile_version());
        }
        if (from.has_time_source()) {
            set_time_source(from.time_source());
        }
        if (from.has_profiling_start_ms()) {
            set_profiling_start_ms(from.profiling_start_ms());
        }
        if (from.has_profiling_finish_ms()) {
            set_profiling_finish_ms(from.profiling_finish_ms());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ProfilerEventProto::CopyFrom(const ProfilerEventProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.ProfilerEventProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ProfilerEventProto::IsInitialized() const
{

    return true;
}

void ProfilerEventProto::Swap(ProfilerEventProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ProfilerEventProto::InternalSwap(ProfilerEventProto* other)
{
    std::swap(profile_version_, other->profile_version_);
    std::swap(time_source_, other->time_source_);
    past_session_event_.UnsafeArenaSwap(&other->past_session_event_);
    std::swap(profiling_start_ms_, other->profiling_start_ms_);
    std::swap(profiling_finish_ms_, other->profiling_finish_ms_);
    tracked_object_.UnsafeArenaSwap(&other->tracked_object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProfilerEventProto::GetTypeName() const
{
    return "metrics.ProfilerEventProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfilerEventProto_TrackedObject

// optional fixed64 birth_thread_name_hash = 1;
bool ProfilerEventProto_TrackedObject::has_birth_thread_name_hash() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_birth_thread_name_hash()
{
    _has_bits_[0] |= 0x00000001u;
}
void ProfilerEventProto_TrackedObject::clear_has_birth_thread_name_hash()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ProfilerEventProto_TrackedObject::clear_birth_thread_name_hash()
{
    birth_thread_name_hash_ = GOOGLE_ULONGLONG(0);
    clear_has_birth_thread_name_hash();
}
::google::protobuf::uint64 ProfilerEventProto_TrackedObject::birth_thread_name_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.birth_thread_name_hash)
    return birth_thread_name_hash_;
}
void ProfilerEventProto_TrackedObject::set_birth_thread_name_hash(::google::protobuf::uint64 value)
{
    set_has_birth_thread_name_hash();
    birth_thread_name_hash_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.birth_thread_name_hash)
}

// optional fixed64 exec_thread_name_hash = 2;
bool ProfilerEventProto_TrackedObject::has_exec_thread_name_hash() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_exec_thread_name_hash()
{
    _has_bits_[0] |= 0x00000002u;
}
void ProfilerEventProto_TrackedObject::clear_has_exec_thread_name_hash()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ProfilerEventProto_TrackedObject::clear_exec_thread_name_hash()
{
    exec_thread_name_hash_ = GOOGLE_ULONGLONG(0);
    clear_has_exec_thread_name_hash();
}
::google::protobuf::uint64 ProfilerEventProto_TrackedObject::exec_thread_name_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.exec_thread_name_hash)
    return exec_thread_name_hash_;
}
void ProfilerEventProto_TrackedObject::set_exec_thread_name_hash(::google::protobuf::uint64 value)
{
    set_has_exec_thread_name_hash();
    exec_thread_name_hash_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.exec_thread_name_hash)
}

// optional fixed64 source_file_name_hash = 3;
bool ProfilerEventProto_TrackedObject::has_source_file_name_hash() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_source_file_name_hash()
{
    _has_bits_[0] |= 0x00000004u;
}
void ProfilerEventProto_TrackedObject::clear_has_source_file_name_hash()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ProfilerEventProto_TrackedObject::clear_source_file_name_hash()
{
    source_file_name_hash_ = GOOGLE_ULONGLONG(0);
    clear_has_source_file_name_hash();
}
::google::protobuf::uint64 ProfilerEventProto_TrackedObject::source_file_name_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.source_file_name_hash)
    return source_file_name_hash_;
}
void ProfilerEventProto_TrackedObject::set_source_file_name_hash(::google::protobuf::uint64 value)
{
    set_has_source_file_name_hash();
    source_file_name_hash_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.source_file_name_hash)
}

// optional fixed64 source_function_name_hash = 4;
bool ProfilerEventProto_TrackedObject::has_source_function_name_hash() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_source_function_name_hash()
{
    _has_bits_[0] |= 0x00000008u;
}
void ProfilerEventProto_TrackedObject::clear_has_source_function_name_hash()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ProfilerEventProto_TrackedObject::clear_source_function_name_hash()
{
    source_function_name_hash_ = GOOGLE_ULONGLONG(0);
    clear_has_source_function_name_hash();
}
::google::protobuf::uint64 ProfilerEventProto_TrackedObject::source_function_name_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.source_function_name_hash)
    return source_function_name_hash_;
}
void ProfilerEventProto_TrackedObject::set_source_function_name_hash(::google::protobuf::uint64 value)
{
    set_has_source_function_name_hash();
    source_function_name_hash_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.source_function_name_hash)
}

// optional int32 source_line_number = 5;
bool ProfilerEventProto_TrackedObject::has_source_line_number() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_source_line_number()
{
    _has_bits_[0] |= 0x00000010u;
}
void ProfilerEventProto_TrackedObject::clear_has_source_line_number()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ProfilerEventProto_TrackedObject::clear_source_line_number()
{
    source_line_number_ = 0;
    clear_has_source_line_number();
}
::google::protobuf::int32 ProfilerEventProto_TrackedObject::source_line_number() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.source_line_number)
    return source_line_number_;
}
void ProfilerEventProto_TrackedObject::set_source_line_number(::google::protobuf::int32 value)
{
    set_has_source_line_number();
    source_line_number_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.source_line_number)
}

// optional int32 exec_count = 6;
bool ProfilerEventProto_TrackedObject::has_exec_count() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_exec_count()
{
    _has_bits_[0] |= 0x00000020u;
}
void ProfilerEventProto_TrackedObject::clear_has_exec_count()
{
    _has_bits_[0] &= ~0x00000020u;
}
void ProfilerEventProto_TrackedObject::clear_exec_count()
{
    exec_count_ = 0;
    clear_has_exec_count();
}
::google::protobuf::int32 ProfilerEventProto_TrackedObject::exec_count() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.exec_count)
    return exec_count_;
}
void ProfilerEventProto_TrackedObject::set_exec_count(::google::protobuf::int32 value)
{
    set_has_exec_count();
    exec_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.exec_count)
}

// optional int32 exec_time_total = 7;
bool ProfilerEventProto_TrackedObject::has_exec_time_total() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_exec_time_total()
{
    _has_bits_[0] |= 0x00000040u;
}
void ProfilerEventProto_TrackedObject::clear_has_exec_time_total()
{
    _has_bits_[0] &= ~0x00000040u;
}
void ProfilerEventProto_TrackedObject::clear_exec_time_total()
{
    exec_time_total_ = 0;
    clear_has_exec_time_total();
}
::google::protobuf::int32 ProfilerEventProto_TrackedObject::exec_time_total() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.exec_time_total)
    return exec_time_total_;
}
void ProfilerEventProto_TrackedObject::set_exec_time_total(::google::protobuf::int32 value)
{
    set_has_exec_time_total();
    exec_time_total_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.exec_time_total)
}

// optional int32 exec_time_sampled = 8;
bool ProfilerEventProto_TrackedObject::has_exec_time_sampled() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_exec_time_sampled()
{
    _has_bits_[0] |= 0x00000080u;
}
void ProfilerEventProto_TrackedObject::clear_has_exec_time_sampled()
{
    _has_bits_[0] &= ~0x00000080u;
}
void ProfilerEventProto_TrackedObject::clear_exec_time_sampled()
{
    exec_time_sampled_ = 0;
    clear_has_exec_time_sampled();
}
::google::protobuf::int32 ProfilerEventProto_TrackedObject::exec_time_sampled() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.exec_time_sampled)
    return exec_time_sampled_;
}
void ProfilerEventProto_TrackedObject::set_exec_time_sampled(::google::protobuf::int32 value)
{
    set_has_exec_time_sampled();
    exec_time_sampled_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.exec_time_sampled)
}

// optional int32 queue_time_total = 9;
bool ProfilerEventProto_TrackedObject::has_queue_time_total() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_queue_time_total()
{
    _has_bits_[0] |= 0x00000100u;
}
void ProfilerEventProto_TrackedObject::clear_has_queue_time_total()
{
    _has_bits_[0] &= ~0x00000100u;
}
void ProfilerEventProto_TrackedObject::clear_queue_time_total()
{
    queue_time_total_ = 0;
    clear_has_queue_time_total();
}
::google::protobuf::int32 ProfilerEventProto_TrackedObject::queue_time_total() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.queue_time_total)
    return queue_time_total_;
}
void ProfilerEventProto_TrackedObject::set_queue_time_total(::google::protobuf::int32 value)
{
    set_has_queue_time_total();
    queue_time_total_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.queue_time_total)
}

// optional int32 queue_time_sampled = 10;
bool ProfilerEventProto_TrackedObject::has_queue_time_sampled() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_queue_time_sampled()
{
    _has_bits_[0] |= 0x00000200u;
}
void ProfilerEventProto_TrackedObject::clear_has_queue_time_sampled()
{
    _has_bits_[0] &= ~0x00000200u;
}
void ProfilerEventProto_TrackedObject::clear_queue_time_sampled()
{
    queue_time_sampled_ = 0;
    clear_has_queue_time_sampled();
}
::google::protobuf::int32 ProfilerEventProto_TrackedObject::queue_time_sampled() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.queue_time_sampled)
    return queue_time_sampled_;
}
void ProfilerEventProto_TrackedObject::set_queue_time_sampled(::google::protobuf::int32 value)
{
    set_has_queue_time_sampled();
    queue_time_sampled_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.queue_time_sampled)
}

// optional .metrics.ProfilerEventProto.TrackedObject.ProcessType process_type = 11;
bool ProfilerEventProto_TrackedObject::has_process_type() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_process_type()
{
    _has_bits_[0] |= 0x00000400u;
}
void ProfilerEventProto_TrackedObject::clear_has_process_type()
{
    _has_bits_[0] &= ~0x00000400u;
}
void ProfilerEventProto_TrackedObject::clear_process_type()
{
    process_type_ = 0;
    clear_has_process_type();
}
::metrics::ProfilerEventProto_TrackedObject_ProcessType ProfilerEventProto_TrackedObject::process_type() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.process_type)
    return static_cast<::metrics::ProfilerEventProto_TrackedObject_ProcessType>(process_type_);
}
void ProfilerEventProto_TrackedObject::set_process_type(::metrics::ProfilerEventProto_TrackedObject_ProcessType value)
{
    assert(::metrics::ProfilerEventProto_TrackedObject_ProcessType_IsValid(value));
    set_has_process_type();
    process_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.process_type)
}

// optional uint32 process_id = 12;
bool ProfilerEventProto_TrackedObject::has_process_id() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void ProfilerEventProto_TrackedObject::set_has_process_id()
{
    _has_bits_[0] |= 0x00000800u;
}
void ProfilerEventProto_TrackedObject::clear_has_process_id()
{
    _has_bits_[0] &= ~0x00000800u;
}
void ProfilerEventProto_TrackedObject::clear_process_id()
{
    process_id_ = 0u;
    clear_has_process_id();
}
::google::protobuf::uint32 ProfilerEventProto_TrackedObject::process_id() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.TrackedObject.process_id)
    return process_id_;
}
void ProfilerEventProto_TrackedObject::set_process_id(::google::protobuf::uint32 value)
{
    set_has_process_id();
    process_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.TrackedObject.process_id)
}

// -------------------------------------------------------------------

// ProfilerEventProto

// optional .metrics.ProfilerEventProto.ProfileVersion profile_version = 1;
bool ProfilerEventProto::has_profile_version() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfilerEventProto::set_has_profile_version()
{
    _has_bits_[0] |= 0x00000001u;
}
void ProfilerEventProto::clear_has_profile_version()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ProfilerEventProto::clear_profile_version()
{
    profile_version_ = 0;
    clear_has_profile_version();
}
::metrics::ProfilerEventProto_ProfileVersion ProfilerEventProto::profile_version() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.profile_version)
    return static_cast<::metrics::ProfilerEventProto_ProfileVersion>(profile_version_);
}
void ProfilerEventProto::set_profile_version(::metrics::ProfilerEventProto_ProfileVersion value)
{
    assert(::metrics::ProfilerEventProto_ProfileVersion_IsValid(value));
    set_has_profile_version();
    profile_version_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.profile_version)
}

// optional .metrics.ProfilerEventProto.TimeSource time_source = 2;
bool ProfilerEventProto::has_time_source() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfilerEventProto::set_has_time_source()
{
    _has_bits_[0] |= 0x00000002u;
}
void ProfilerEventProto::clear_has_time_source()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ProfilerEventProto::clear_time_source()
{
    time_source_ = 0;
    clear_has_time_source();
}
::metrics::ProfilerEventProto_TimeSource ProfilerEventProto::time_source() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.time_source)
    return static_cast<::metrics::ProfilerEventProto_TimeSource>(time_source_);
}
void ProfilerEventProto::set_time_source(::metrics::ProfilerEventProto_TimeSource value)
{
    assert(::metrics::ProfilerEventProto_TimeSource_IsValid(value));
    set_has_time_source();
    time_source_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.time_source)
}

// repeated .metrics.ProfilerEventProto.ProfilerEvent past_session_event = 4;
int ProfilerEventProto::past_session_event_size() const
{
    return past_session_event_.size();
}
void ProfilerEventProto::clear_past_session_event()
{
    past_session_event_.Clear();
}
::metrics::ProfilerEventProto_ProfilerEvent ProfilerEventProto::past_session_event(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.past_session_event)
    return static_cast<::metrics::ProfilerEventProto_ProfilerEvent>(past_session_event_.Get(index));
}
void ProfilerEventProto::set_past_session_event(int index, ::metrics::ProfilerEventProto_ProfilerEvent value)
{
    assert(::metrics::ProfilerEventProto_ProfilerEvent_IsValid(value));
    past_session_event_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.past_session_event)
}
void ProfilerEventProto::add_past_session_event(::metrics::ProfilerEventProto_ProfilerEvent value)
{
    assert(::metrics::ProfilerEventProto_ProfilerEvent_IsValid(value));
    past_session_event_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.ProfilerEventProto.past_session_event)
}
const ::google::protobuf::RepeatedField<int>&
ProfilerEventProto::past_session_event() const
{
    // @@protoc_insertion_point(field_list:metrics.ProfilerEventProto.past_session_event)
    return past_session_event_;
}
::google::protobuf::RepeatedField<int>*
ProfilerEventProto::mutable_past_session_event()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ProfilerEventProto.past_session_event)
    return &past_session_event_;
}

// optional int64 profiling_start_ms = 5;
bool ProfilerEventProto::has_profiling_start_ms() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProfilerEventProto::set_has_profiling_start_ms()
{
    _has_bits_[0] |= 0x00000008u;
}
void ProfilerEventProto::clear_has_profiling_start_ms()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ProfilerEventProto::clear_profiling_start_ms()
{
    profiling_start_ms_ = GOOGLE_LONGLONG(0);
    clear_has_profiling_start_ms();
}
::google::protobuf::int64 ProfilerEventProto::profiling_start_ms() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.profiling_start_ms)
    return profiling_start_ms_;
}
void ProfilerEventProto::set_profiling_start_ms(::google::protobuf::int64 value)
{
    set_has_profiling_start_ms();
    profiling_start_ms_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.profiling_start_ms)
}

// optional int64 profiling_finish_ms = 6;
bool ProfilerEventProto::has_profiling_finish_ms() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProfilerEventProto::set_has_profiling_finish_ms()
{
    _has_bits_[0] |= 0x00000010u;
}
void ProfilerEventProto::clear_has_profiling_finish_ms()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ProfilerEventProto::clear_profiling_finish_ms()
{
    profiling_finish_ms_ = GOOGLE_LONGLONG(0);
    clear_has_profiling_finish_ms();
}
::google::protobuf::int64 ProfilerEventProto::profiling_finish_ms() const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.profiling_finish_ms)
    return profiling_finish_ms_;
}
void ProfilerEventProto::set_profiling_finish_ms(::google::protobuf::int64 value)
{
    set_has_profiling_finish_ms();
    profiling_finish_ms_ = value;
    // @@protoc_insertion_point(field_set:metrics.ProfilerEventProto.profiling_finish_ms)
}

// repeated .metrics.ProfilerEventProto.TrackedObject tracked_object = 3;
int ProfilerEventProto::tracked_object_size() const
{
    return tracked_object_.size();
}
void ProfilerEventProto::clear_tracked_object()
{
    tracked_object_.Clear();
}
const ::metrics::ProfilerEventProto_TrackedObject& ProfilerEventProto::tracked_object(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.ProfilerEventProto.tracked_object)
    return tracked_object_.Get(index);
}
::metrics::ProfilerEventProto_TrackedObject* ProfilerEventProto::mutable_tracked_object(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.ProfilerEventProto.tracked_object)
    return tracked_object_.Mutable(index);
}
::metrics::ProfilerEventProto_TrackedObject* ProfilerEventProto::add_tracked_object()
{
    // @@protoc_insertion_point(field_add:metrics.ProfilerEventProto.tracked_object)
    return tracked_object_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::ProfilerEventProto_TrackedObject>*
ProfilerEventProto::mutable_tracked_object()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.ProfilerEventProto.tracked_object)
    return &tracked_object_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::ProfilerEventProto_TrackedObject>&
ProfilerEventProto::tracked_object() const
{
    // @@protoc_insertion_point(field_list:metrics.ProfilerEventProto.tracked_object)
    return tracked_object_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
