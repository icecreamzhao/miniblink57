// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampled_profile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sampled_profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_sampled_5fprofile_2eproto()
{
    delete SampledProfile::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sampled_5fprofile_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sampled_5fprofile_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ::metrics::protobuf_AddDesc_call_5fstack_5fprofile_2eproto();
    ::metrics::protobuf_AddDesc_execution_5fcontext_2eproto();
    ::metrics::protobuf_AddDesc_perf_5fdata_2eproto();
    ::metrics::protobuf_AddDesc_perf_5fstat_2eproto();
    SampledProfile::default_instance_ = new SampledProfile();
    SampledProfile::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sampled_5fprofile_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sampled_5fprofile_2eproto_once_);
void protobuf_AddDesc_sampled_5fprofile_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sampled_5fprofile_2eproto_once_,
        &protobuf_AddDesc_sampled_5fprofile_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sampled_5fprofile_2eproto {
    StaticDescriptorInitializer_sampled_5fprofile_2eproto()
    {
        protobuf_AddDesc_sampled_5fprofile_2eproto();
    }
} static_descriptor_initializer_sampled_5fprofile_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForSampledProfile(
    SampledProfile* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SampledProfile_TriggerEvent_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SampledProfile_TriggerEvent SampledProfile::UNKNOWN_TRIGGER_EVENT;
const SampledProfile_TriggerEvent SampledProfile::PERIODIC_COLLECTION;
const SampledProfile_TriggerEvent SampledProfile::RESUME_FROM_SUSPEND;
const SampledProfile_TriggerEvent SampledProfile::RESTORE_SESSION;
const SampledProfile_TriggerEvent SampledProfile::PROCESS_STARTUP;
const SampledProfile_TriggerEvent SampledProfile::JANKY_TASK;
const SampledProfile_TriggerEvent SampledProfile::THREAD_HUNG;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MIN;
const SampledProfile_TriggerEvent SampledProfile::TriggerEvent_MAX;
const int SampledProfile::TriggerEvent_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampledProfile::kTriggerEventFieldNumber;
const int SampledProfile::kProcessFieldNumber;
const int SampledProfile::kThreadFieldNumber;
const int SampledProfile::kMsAfterBootFieldNumber;
const int SampledProfile::kMsAfterLoginFieldNumber;
const int SampledProfile::kSuspendDurationMsFieldNumber;
const int SampledProfile::kMsAfterResumeFieldNumber;
const int SampledProfile::kNumTabsRestoredFieldNumber;
const int SampledProfile::kMsAfterRestoreFieldNumber;
const int SampledProfile::kPerfDataFieldNumber;
const int SampledProfile::kCallStackProfileFieldNumber;
const int SampledProfile::kPerfStatFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SampledProfile::SampledProfile()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SampledProfile)
}

void SampledProfile::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    perf_data_ = const_cast<::metrics::PerfDataProto*>(
        ::metrics::PerfDataProto::internal_default_instance());
#else
    perf_data_ = const_cast<::metrics::PerfDataProto*>(&::metrics::PerfDataProto::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    call_stack_profile_ = const_cast<::metrics::CallStackProfile*>(
        ::metrics::CallStackProfile::internal_default_instance());
#else
    call_stack_profile_ = const_cast<::metrics::CallStackProfile*>(&::metrics::CallStackProfile::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    perf_stat_ = const_cast<::metrics::PerfStatProto*>(
        ::metrics::PerfStatProto::internal_default_instance());
#else
    perf_stat_ = const_cast<::metrics::PerfStatProto*>(&::metrics::PerfStatProto::default_instance());
#endif
}

SampledProfile::SampledProfile(const SampledProfile& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SampledProfile)
}

void SampledProfile::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    trigger_event_ = 0;
    process_ = 0;
    thread_ = 0;
    ms_after_boot_ = GOOGLE_LONGLONG(0);
    ms_after_login_ = GOOGLE_LONGLONG(0);
    suspend_duration_ms_ = GOOGLE_LONGLONG(0);
    ms_after_resume_ = GOOGLE_LONGLONG(0);
    num_tabs_restored_ = 0;
    ms_after_restore_ = GOOGLE_LONGLONG(0);
    perf_data_ = NULL;
    call_stack_profile_ = NULL;
    perf_stat_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampledProfile::~SampledProfile()
{
    // @@protoc_insertion_point(destructor:metrics.SampledProfile)
    SharedDtor();
}

void SampledProfile::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete perf_data_;
        delete call_stack_profile_;
        delete perf_stat_;
    }
}

void SampledProfile::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SampledProfile& SampledProfile::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_sampled_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_sampled_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SampledProfile* SampledProfile::default_instance_ = NULL;

SampledProfile* SampledProfile::New(::google::protobuf::Arena* arena) const
{
    SampledProfile* n = new SampledProfile;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SampledProfile::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SampledProfile)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                    \
    _Pragma("clang diagnostic push")                                                                     \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SampledProfile, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SampledProfile*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(trigger_event_, ms_after_resume_);
    }
    if (_has_bits_[8 / 32] & 3840u) {
        ms_after_restore_ = GOOGLE_LONGLONG(0);
        if (has_perf_data()) {
            if (perf_data_ != NULL)
                perf_data_->::metrics::PerfDataProto::Clear();
        }
        if (has_call_stack_profile()) {
            if (call_stack_profile_ != NULL)
                call_stack_profile_->::metrics::CallStackProfile::Clear();
        }
        if (has_perf_stat()) {
            if (perf_stat_ != NULL)
                perf_stat_->::metrics::PerfStatProto::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SampledProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSampledProfile, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SampledProfile)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SampledProfile_TriggerEvent_IsValid(value)) {
                    set_trigger_event(static_cast<::metrics::SampledProfile_TriggerEvent>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_ms_after_boot;
            break;
        }

        // optional int64 ms_after_boot = 2;
        case 2: {
            if (tag == 16) {
            parse_ms_after_boot:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &ms_after_boot_)));
                set_has_ms_after_boot();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_ms_after_login;
            break;
        }

        // optional int64 ms_after_login = 3;
        case 3: {
            if (tag == 24) {
            parse_ms_after_login:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &ms_after_login_)));
                set_has_ms_after_login();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_perf_data;
            break;
        }

        // optional .metrics.PerfDataProto perf_data = 4;
        case 4: {
            if (tag == 34) {
            parse_perf_data:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_perf_data()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_suspend_duration_ms;
            break;
        }

        // optional int64 suspend_duration_ms = 5;
        case 5: {
            if (tag == 40) {
            parse_suspend_duration_ms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &suspend_duration_ms_)));
                set_has_suspend_duration_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_ms_after_resume;
            break;
        }

        // optional int64 ms_after_resume = 6;
        case 6: {
            if (tag == 48) {
            parse_ms_after_resume:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &ms_after_resume_)));
                set_has_ms_after_resume();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_num_tabs_restored;
            break;
        }

        // optional int32 num_tabs_restored = 7;
        case 7: {
            if (tag == 56) {
            parse_num_tabs_restored:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_tabs_restored_)));
                set_has_num_tabs_restored();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_ms_after_restore;
            break;
        }

        // optional int64 ms_after_restore = 8;
        case 8: {
            if (tag == 64) {
            parse_ms_after_restore:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &ms_after_restore_)));
                set_has_ms_after_restore();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_call_stack_profile;
            break;
        }

        // optional .metrics.CallStackProfile call_stack_profile = 9;
        case 9: {
            if (tag == 74) {
            parse_call_stack_profile:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_call_stack_profile()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_perf_stat;
            break;
        }

        // optional .metrics.PerfStatProto perf_stat = 10;
        case 10: {
            if (tag == 82) {
            parse_perf_stat:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_perf_stat()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_process;
            break;
        }

        // optional .metrics.Process process = 11;
        case 11: {
            if (tag == 88) {
            parse_process:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::Process_IsValid(value)) {
                    set_process(static_cast<::metrics::Process>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(88);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_thread;
            break;
        }

        // optional .metrics.Thread thread = 12;
        case 12: {
            if (tag == 96) {
            parse_thread:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::Thread_IsValid(value)) {
                    set_thread(static_cast<::metrics::Thread>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(96);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SampledProfile)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SampledProfile)
    return false;
#undef DO_
}

void SampledProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SampledProfile)
    // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
    if (has_trigger_event()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->trigger_event(), output);
    }

    // optional int64 ms_after_boot = 2;
    if (has_ms_after_boot()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ms_after_boot(), output);
    }

    // optional int64 ms_after_login = 3;
    if (has_ms_after_login()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ms_after_login(), output);
    }

    // optional .metrics.PerfDataProto perf_data = 4;
    if (has_perf_data()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->perf_data_, output);
    }

    // optional int64 suspend_duration_ms = 5;
    if (has_suspend_duration_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->suspend_duration_ms(), output);
    }

    // optional int64 ms_after_resume = 6;
    if (has_ms_after_resume()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ms_after_resume(), output);
    }

    // optional int32 num_tabs_restored = 7;
    if (has_num_tabs_restored()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_tabs_restored(), output);
    }

    // optional int64 ms_after_restore = 8;
    if (has_ms_after_restore()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ms_after_restore(), output);
    }

    // optional .metrics.CallStackProfile call_stack_profile = 9;
    if (has_call_stack_profile()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, *this->call_stack_profile_, output);
    }

    // optional .metrics.PerfStatProto perf_stat = 10;
    if (has_perf_stat()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            10, *this->perf_stat_, output);
    }

    // optional .metrics.Process process = 11;
    if (has_process()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            11, this->process(), output);
    }

    // optional .metrics.Thread thread = 12;
    if (has_thread()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            12, this->thread(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SampledProfile)
}

int SampledProfile::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SampledProfile)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
        if (has_trigger_event()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_event());
        }

        // optional .metrics.Process process = 11;
        if (has_process()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->process());
        }

        // optional .metrics.Thread thread = 12;
        if (has_thread()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->thread());
        }

        // optional int64 ms_after_boot = 2;
        if (has_ms_after_boot()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->ms_after_boot());
        }

        // optional int64 ms_after_login = 3;
        if (has_ms_after_login()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->ms_after_login());
        }

        // optional int64 suspend_duration_ms = 5;
        if (has_suspend_duration_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->suspend_duration_ms());
        }

        // optional int64 ms_after_resume = 6;
        if (has_ms_after_resume()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->ms_after_resume());
        }

        // optional int32 num_tabs_restored = 7;
        if (has_num_tabs_restored()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_tabs_restored());
        }
    }
    if (_has_bits_[8 / 32] & 3840u) {
        // optional int64 ms_after_restore = 8;
        if (has_ms_after_restore()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->ms_after_restore());
        }

        // optional .metrics.PerfDataProto perf_data = 4;
        if (has_perf_data()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->perf_data_);
        }

        // optional .metrics.CallStackProfile call_stack_profile = 9;
        if (has_call_stack_profile()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->call_stack_profile_);
        }

        // optional .metrics.PerfStatProto perf_stat = 10;
        if (has_perf_stat()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->perf_stat_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SampledProfile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SampledProfile*>(&from));
}

void SampledProfile::MergeFrom(const SampledProfile& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SampledProfile)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_trigger_event()) {
            set_trigger_event(from.trigger_event());
        }
        if (from.has_process()) {
            set_process(from.process());
        }
        if (from.has_thread()) {
            set_thread(from.thread());
        }
        if (from.has_ms_after_boot()) {
            set_ms_after_boot(from.ms_after_boot());
        }
        if (from.has_ms_after_login()) {
            set_ms_after_login(from.ms_after_login());
        }
        if (from.has_suspend_duration_ms()) {
            set_suspend_duration_ms(from.suspend_duration_ms());
        }
        if (from.has_ms_after_resume()) {
            set_ms_after_resume(from.ms_after_resume());
        }
        if (from.has_num_tabs_restored()) {
            set_num_tabs_restored(from.num_tabs_restored());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_ms_after_restore()) {
            set_ms_after_restore(from.ms_after_restore());
        }
        if (from.has_perf_data()) {
            mutable_perf_data()->::metrics::PerfDataProto::MergeFrom(from.perf_data());
        }
        if (from.has_call_stack_profile()) {
            mutable_call_stack_profile()->::metrics::CallStackProfile::MergeFrom(from.call_stack_profile());
        }
        if (from.has_perf_stat()) {
            mutable_perf_stat()->::metrics::PerfStatProto::MergeFrom(from.perf_stat());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SampledProfile::CopyFrom(const SampledProfile& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SampledProfile)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SampledProfile::IsInitialized() const
{

    return true;
}

void SampledProfile::Swap(SampledProfile* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SampledProfile::InternalSwap(SampledProfile* other)
{
    std::swap(trigger_event_, other->trigger_event_);
    std::swap(process_, other->process_);
    std::swap(thread_, other->thread_);
    std::swap(ms_after_boot_, other->ms_after_boot_);
    std::swap(ms_after_login_, other->ms_after_login_);
    std::swap(suspend_duration_ms_, other->suspend_duration_ms_);
    std::swap(ms_after_resume_, other->ms_after_resume_);
    std::swap(num_tabs_restored_, other->num_tabs_restored_);
    std::swap(ms_after_restore_, other->ms_after_restore_);
    std::swap(perf_data_, other->perf_data_);
    std::swap(call_stack_profile_, other->call_stack_profile_);
    std::swap(perf_stat_, other->perf_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SampledProfile::GetTypeName() const
{
    return "metrics.SampledProfile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampledProfile

// optional .metrics.SampledProfile.TriggerEvent trigger_event = 1;
bool SampledProfile::has_trigger_event() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SampledProfile::set_has_trigger_event()
{
    _has_bits_[0] |= 0x00000001u;
}
void SampledProfile::clear_has_trigger_event()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SampledProfile::clear_trigger_event()
{
    trigger_event_ = 0;
    clear_has_trigger_event();
}
::metrics::SampledProfile_TriggerEvent SampledProfile::trigger_event() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.trigger_event)
    return static_cast<::metrics::SampledProfile_TriggerEvent>(trigger_event_);
}
void SampledProfile::set_trigger_event(::metrics::SampledProfile_TriggerEvent value)
{
    assert(::metrics::SampledProfile_TriggerEvent_IsValid(value));
    set_has_trigger_event();
    trigger_event_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.trigger_event)
}

// optional .metrics.Process process = 11;
bool SampledProfile::has_process() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SampledProfile::set_has_process()
{
    _has_bits_[0] |= 0x00000002u;
}
void SampledProfile::clear_has_process()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SampledProfile::clear_process()
{
    process_ = 0;
    clear_has_process();
}
::metrics::Process SampledProfile::process() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.process)
    return static_cast<::metrics::Process>(process_);
}
void SampledProfile::set_process(::metrics::Process value)
{
    assert(::metrics::Process_IsValid(value));
    set_has_process();
    process_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.process)
}

// optional .metrics.Thread thread = 12;
bool SampledProfile::has_thread() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SampledProfile::set_has_thread()
{
    _has_bits_[0] |= 0x00000004u;
}
void SampledProfile::clear_has_thread()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SampledProfile::clear_thread()
{
    thread_ = 0;
    clear_has_thread();
}
::metrics::Thread SampledProfile::thread() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.thread)
    return static_cast<::metrics::Thread>(thread_);
}
void SampledProfile::set_thread(::metrics::Thread value)
{
    assert(::metrics::Thread_IsValid(value));
    set_has_thread();
    thread_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.thread)
}

// optional int64 ms_after_boot = 2;
bool SampledProfile::has_ms_after_boot() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SampledProfile::set_has_ms_after_boot()
{
    _has_bits_[0] |= 0x00000008u;
}
void SampledProfile::clear_has_ms_after_boot()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SampledProfile::clear_ms_after_boot()
{
    ms_after_boot_ = GOOGLE_LONGLONG(0);
    clear_has_ms_after_boot();
}
::google::protobuf::int64 SampledProfile::ms_after_boot() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_boot)
    return ms_after_boot_;
}
void SampledProfile::set_ms_after_boot(::google::protobuf::int64 value)
{
    set_has_ms_after_boot();
    ms_after_boot_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_boot)
}

// optional int64 ms_after_login = 3;
bool SampledProfile::has_ms_after_login() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SampledProfile::set_has_ms_after_login()
{
    _has_bits_[0] |= 0x00000010u;
}
void SampledProfile::clear_has_ms_after_login()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SampledProfile::clear_ms_after_login()
{
    ms_after_login_ = GOOGLE_LONGLONG(0);
    clear_has_ms_after_login();
}
::google::protobuf::int64 SampledProfile::ms_after_login() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_login)
    return ms_after_login_;
}
void SampledProfile::set_ms_after_login(::google::protobuf::int64 value)
{
    set_has_ms_after_login();
    ms_after_login_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_login)
}

// optional int64 suspend_duration_ms = 5;
bool SampledProfile::has_suspend_duration_ms() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SampledProfile::set_has_suspend_duration_ms()
{
    _has_bits_[0] |= 0x00000020u;
}
void SampledProfile::clear_has_suspend_duration_ms()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SampledProfile::clear_suspend_duration_ms()
{
    suspend_duration_ms_ = GOOGLE_LONGLONG(0);
    clear_has_suspend_duration_ms();
}
::google::protobuf::int64 SampledProfile::suspend_duration_ms() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.suspend_duration_ms)
    return suspend_duration_ms_;
}
void SampledProfile::set_suspend_duration_ms(::google::protobuf::int64 value)
{
    set_has_suspend_duration_ms();
    suspend_duration_ms_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.suspend_duration_ms)
}

// optional int64 ms_after_resume = 6;
bool SampledProfile::has_ms_after_resume() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SampledProfile::set_has_ms_after_resume()
{
    _has_bits_[0] |= 0x00000040u;
}
void SampledProfile::clear_has_ms_after_resume()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SampledProfile::clear_ms_after_resume()
{
    ms_after_resume_ = GOOGLE_LONGLONG(0);
    clear_has_ms_after_resume();
}
::google::protobuf::int64 SampledProfile::ms_after_resume() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_resume)
    return ms_after_resume_;
}
void SampledProfile::set_ms_after_resume(::google::protobuf::int64 value)
{
    set_has_ms_after_resume();
    ms_after_resume_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_resume)
}

// optional int32 num_tabs_restored = 7;
bool SampledProfile::has_num_tabs_restored() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void SampledProfile::set_has_num_tabs_restored()
{
    _has_bits_[0] |= 0x00000080u;
}
void SampledProfile::clear_has_num_tabs_restored()
{
    _has_bits_[0] &= ~0x00000080u;
}
void SampledProfile::clear_num_tabs_restored()
{
    num_tabs_restored_ = 0;
    clear_has_num_tabs_restored();
}
::google::protobuf::int32 SampledProfile::num_tabs_restored() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.num_tabs_restored)
    return num_tabs_restored_;
}
void SampledProfile::set_num_tabs_restored(::google::protobuf::int32 value)
{
    set_has_num_tabs_restored();
    num_tabs_restored_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.num_tabs_restored)
}

// optional int64 ms_after_restore = 8;
bool SampledProfile::has_ms_after_restore() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void SampledProfile::set_has_ms_after_restore()
{
    _has_bits_[0] |= 0x00000100u;
}
void SampledProfile::clear_has_ms_after_restore()
{
    _has_bits_[0] &= ~0x00000100u;
}
void SampledProfile::clear_ms_after_restore()
{
    ms_after_restore_ = GOOGLE_LONGLONG(0);
    clear_has_ms_after_restore();
}
::google::protobuf::int64 SampledProfile::ms_after_restore() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.ms_after_restore)
    return ms_after_restore_;
}
void SampledProfile::set_ms_after_restore(::google::protobuf::int64 value)
{
    set_has_ms_after_restore();
    ms_after_restore_ = value;
    // @@protoc_insertion_point(field_set:metrics.SampledProfile.ms_after_restore)
}

// optional .metrics.PerfDataProto perf_data = 4;
bool SampledProfile::has_perf_data() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void SampledProfile::set_has_perf_data()
{
    _has_bits_[0] |= 0x00000200u;
}
void SampledProfile::clear_has_perf_data()
{
    _has_bits_[0] &= ~0x00000200u;
}
void SampledProfile::clear_perf_data()
{
    if (perf_data_ != NULL)
        perf_data_->::metrics::PerfDataProto::Clear();
    clear_has_perf_data();
}
const ::metrics::PerfDataProto& SampledProfile::perf_data() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return perf_data_ != NULL ? *perf_data_ : *default_instance().perf_data_;
#else
    return perf_data_ != NULL ? *perf_data_ : *default_instance_->perf_data_;
#endif
}
::metrics::PerfDataProto* SampledProfile::mutable_perf_data()
{
    set_has_perf_data();
    if (perf_data_ == NULL) {
        perf_data_ = new ::metrics::PerfDataProto;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_data)
    return perf_data_;
}
::metrics::PerfDataProto* SampledProfile::release_perf_data()
{
    // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_data)
    clear_has_perf_data();
    ::metrics::PerfDataProto* temp = perf_data_;
    perf_data_ = NULL;
    return temp;
}
void SampledProfile::set_allocated_perf_data(::metrics::PerfDataProto* perf_data)
{
    delete perf_data_;
    perf_data_ = perf_data;
    if (perf_data) {
        set_has_perf_data();
    } else {
        clear_has_perf_data();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_data)
}

// optional .metrics.CallStackProfile call_stack_profile = 9;
bool SampledProfile::has_call_stack_profile() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void SampledProfile::set_has_call_stack_profile()
{
    _has_bits_[0] |= 0x00000400u;
}
void SampledProfile::clear_has_call_stack_profile()
{
    _has_bits_[0] &= ~0x00000400u;
}
void SampledProfile::clear_call_stack_profile()
{
    if (call_stack_profile_ != NULL)
        call_stack_profile_->::metrics::CallStackProfile::Clear();
    clear_has_call_stack_profile();
}
const ::metrics::CallStackProfile& SampledProfile::call_stack_profile() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.call_stack_profile)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return call_stack_profile_ != NULL ? *call_stack_profile_ : *default_instance().call_stack_profile_;
#else
    return call_stack_profile_ != NULL ? *call_stack_profile_ : *default_instance_->call_stack_profile_;
#endif
}
::metrics::CallStackProfile* SampledProfile::mutable_call_stack_profile()
{
    set_has_call_stack_profile();
    if (call_stack_profile_ == NULL) {
        call_stack_profile_ = new ::metrics::CallStackProfile;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.call_stack_profile)
    return call_stack_profile_;
}
::metrics::CallStackProfile* SampledProfile::release_call_stack_profile()
{
    // @@protoc_insertion_point(field_release:metrics.SampledProfile.call_stack_profile)
    clear_has_call_stack_profile();
    ::metrics::CallStackProfile* temp = call_stack_profile_;
    call_stack_profile_ = NULL;
    return temp;
}
void SampledProfile::set_allocated_call_stack_profile(::metrics::CallStackProfile* call_stack_profile)
{
    delete call_stack_profile_;
    call_stack_profile_ = call_stack_profile;
    if (call_stack_profile) {
        set_has_call_stack_profile();
    } else {
        clear_has_call_stack_profile();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.call_stack_profile)
}

// optional .metrics.PerfStatProto perf_stat = 10;
bool SampledProfile::has_perf_stat() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void SampledProfile::set_has_perf_stat()
{
    _has_bits_[0] |= 0x00000800u;
}
void SampledProfile::clear_has_perf_stat()
{
    _has_bits_[0] &= ~0x00000800u;
}
void SampledProfile::clear_perf_stat()
{
    if (perf_stat_ != NULL)
        perf_stat_->::metrics::PerfStatProto::Clear();
    clear_has_perf_stat();
}
const ::metrics::PerfStatProto& SampledProfile::perf_stat() const
{
    // @@protoc_insertion_point(field_get:metrics.SampledProfile.perf_stat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return perf_stat_ != NULL ? *perf_stat_ : *default_instance().perf_stat_;
#else
    return perf_stat_ != NULL ? *perf_stat_ : *default_instance_->perf_stat_;
#endif
}
::metrics::PerfStatProto* SampledProfile::mutable_perf_stat()
{
    set_has_perf_stat();
    if (perf_stat_ == NULL) {
        perf_stat_ = new ::metrics::PerfStatProto;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SampledProfile.perf_stat)
    return perf_stat_;
}
::metrics::PerfStatProto* SampledProfile::release_perf_stat()
{
    // @@protoc_insertion_point(field_release:metrics.SampledProfile.perf_stat)
    clear_has_perf_stat();
    ::metrics::PerfStatProto* temp = perf_stat_;
    perf_stat_ = NULL;
    return temp;
}
void SampledProfile::set_allocated_perf_stat(::metrics::PerfStatProto* perf_stat)
{
    delete perf_stat_;
    perf_stat_ = perf_stat;
    if (perf_stat) {
        set_has_perf_stat();
    } else {
        clear_has_perf_stat();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SampledProfile.perf_stat)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
