// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: memory_leak_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "memory_leak_report.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_memory_5fleak_5freport_2eproto()
{
    delete MemoryLeakReportProto::default_instance_;
    delete MemoryLeakReportProto_Params::default_instance_;
    delete MemoryLeakReportProto_AllocationBreakdown::default_instance_;
    delete MemoryLeakReportProto_MemoryUsageInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_memory_5fleak_5freport_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_memory_5fleak_5freport_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    MemoryLeakReportProto::default_instance_ = new MemoryLeakReportProto();
    MemoryLeakReportProto_Params::default_instance_ = new MemoryLeakReportProto_Params();
    MemoryLeakReportProto_AllocationBreakdown::default_instance_ = new MemoryLeakReportProto_AllocationBreakdown();
    MemoryLeakReportProto_MemoryUsageInfo::default_instance_ = new MemoryLeakReportProto_MemoryUsageInfo();
    MemoryLeakReportProto::default_instance_->InitAsDefaultInstance();
    MemoryLeakReportProto_Params::default_instance_->InitAsDefaultInstance();
    MemoryLeakReportProto_AllocationBreakdown::default_instance_->InitAsDefaultInstance();
    MemoryLeakReportProto_MemoryUsageInfo::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_memory_5fleak_5freport_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_memory_5fleak_5freport_2eproto_once_);
void protobuf_AddDesc_memory_5fleak_5freport_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_memory_5fleak_5freport_2eproto_once_,
        &protobuf_AddDesc_memory_5fleak_5freport_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_memory_5fleak_5freport_2eproto {
    StaticDescriptorInitializer_memory_5fleak_5freport_2eproto()
    {
        protobuf_AddDesc_memory_5fleak_5freport_2eproto();
    }
} static_descriptor_initializer_memory_5fleak_5freport_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForMemoryLeakReportProto(
    MemoryLeakReportProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool MemoryLeakReportProto_ProcessType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::UNKNOWN_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::BROWSER_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::RENDERER_PROCESS;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MIN;
const MemoryLeakReportProto_ProcessType MemoryLeakReportProto::ProcessType_MAX;
const int MemoryLeakReportProto::ProcessType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForMemoryLeakReportProto_Params(
    MemoryLeakReportProto_Params* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_Params::kSamplingRateFieldNumber;
const int MemoryLeakReportProto_Params::kMaxStackDepthFieldNumber;
const int MemoryLeakReportProto_Params::kAnalysisIntervalBytesFieldNumber;
const int MemoryLeakReportProto_Params::kSizeSuspicionThresholdFieldNumber;
const int MemoryLeakReportProto_Params::kCallStackSuspicionThresholdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_Params::MemoryLeakReportProto_Params()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.Params)
}

void MemoryLeakReportProto_Params::InitAsDefaultInstance()
{
}

MemoryLeakReportProto_Params::MemoryLeakReportProto_Params(const MemoryLeakReportProto_Params& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.Params)
}

void MemoryLeakReportProto_Params::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    sampling_rate_ = 0;
    max_stack_depth_ = 0u;
    analysis_interval_bytes_ = GOOGLE_ULONGLONG(0);
    size_suspicion_threshold_ = 0u;
    call_stack_suspicion_threshold_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryLeakReportProto_Params::~MemoryLeakReportProto_Params()
{
    // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.Params)
    SharedDtor();
}

void MemoryLeakReportProto_Params::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void MemoryLeakReportProto_Params::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto_Params& MemoryLeakReportProto_Params::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#endif
    return *default_instance_;
}

MemoryLeakReportProto_Params* MemoryLeakReportProto_Params::default_instance_ = NULL;

MemoryLeakReportProto_Params* MemoryLeakReportProto_Params::New(::google::protobuf::Arena* arena) const
{
    MemoryLeakReportProto_Params* n = new MemoryLeakReportProto_Params;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MemoryLeakReportProto_Params::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.Params)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(MemoryLeakReportProto_Params, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<MemoryLeakReportProto_Params*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(sampling_rate_, call_stack_suspicion_threshold_);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MemoryLeakReportProto_Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForMemoryLeakReportProto_Params, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.Params)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional float sampling_rate = 1;
        case 1: {
            if (tag == 13) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &sampling_rate_)));
                set_has_sampling_rate();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_max_stack_depth;
            break;
        }

        // optional uint32 max_stack_depth = 2;
        case 2: {
            if (tag == 16) {
            parse_max_stack_depth:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &max_stack_depth_)));
                set_has_max_stack_depth();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_analysis_interval_bytes;
            break;
        }

        // optional uint64 analysis_interval_bytes = 3;
        case 3: {
            if (tag == 24) {
            parse_analysis_interval_bytes:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &analysis_interval_bytes_)));
                set_has_analysis_interval_bytes();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_size_suspicion_threshold;
            break;
        }

        // optional uint32 size_suspicion_threshold = 4;
        case 4: {
            if (tag == 32) {
            parse_size_suspicion_threshold:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &size_suspicion_threshold_)));
                set_has_size_suspicion_threshold();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_call_stack_suspicion_threshold;
            break;
        }

        // optional uint32 call_stack_suspicion_threshold = 5;
        case 5: {
            if (tag == 40) {
            parse_call_stack_suspicion_threshold:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &call_stack_suspicion_threshold_)));
                set_has_call_stack_suspicion_threshold();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.Params)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.Params)
    return false;
#undef DO_
}

void MemoryLeakReportProto_Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.Params)
    // optional float sampling_rate = 1;
    if (has_sampling_rate()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sampling_rate(), output);
    }

    // optional uint32 max_stack_depth = 2;
    if (has_max_stack_depth()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_stack_depth(), output);
    }

    // optional uint64 analysis_interval_bytes = 3;
    if (has_analysis_interval_bytes()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->analysis_interval_bytes(), output);
    }

    // optional uint32 size_suspicion_threshold = 4;
    if (has_size_suspicion_threshold()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size_suspicion_threshold(), output);
    }

    // optional uint32 call_stack_suspicion_threshold = 5;
    if (has_call_stack_suspicion_threshold()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->call_stack_suspicion_threshold(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.Params)
}

int MemoryLeakReportProto_Params::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.Params)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional float sampling_rate = 1;
        if (has_sampling_rate()) {
            total_size += 1 + 4;
        }

        // optional uint32 max_stack_depth = 2;
        if (has_max_stack_depth()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->max_stack_depth());
        }

        // optional uint64 analysis_interval_bytes = 3;
        if (has_analysis_interval_bytes()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->analysis_interval_bytes());
        }

        // optional uint32 size_suspicion_threshold = 4;
        if (has_size_suspicion_threshold()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->size_suspicion_threshold());
        }

        // optional uint32 call_stack_suspicion_threshold = 5;
        if (has_call_stack_suspicion_threshold()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->call_stack_suspicion_threshold());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MemoryLeakReportProto_Params::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_Params*>(&from));
}

void MemoryLeakReportProto_Params::MergeFrom(const MemoryLeakReportProto_Params& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.Params)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_sampling_rate()) {
            set_sampling_rate(from.sampling_rate());
        }
        if (from.has_max_stack_depth()) {
            set_max_stack_depth(from.max_stack_depth());
        }
        if (from.has_analysis_interval_bytes()) {
            set_analysis_interval_bytes(from.analysis_interval_bytes());
        }
        if (from.has_size_suspicion_threshold()) {
            set_size_suspicion_threshold(from.size_suspicion_threshold());
        }
        if (from.has_call_stack_suspicion_threshold()) {
            set_call_stack_suspicion_threshold(from.call_stack_suspicion_threshold());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void MemoryLeakReportProto_Params::CopyFrom(const MemoryLeakReportProto_Params& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.Params)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MemoryLeakReportProto_Params::IsInitialized() const
{

    return true;
}

void MemoryLeakReportProto_Params::Swap(MemoryLeakReportProto_Params* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void MemoryLeakReportProto_Params::InternalSwap(MemoryLeakReportProto_Params* other)
{
    std::swap(sampling_rate_, other->sampling_rate_);
    std::swap(max_stack_depth_, other->max_stack_depth_);
    std::swap(analysis_interval_bytes_, other->analysis_interval_bytes_);
    std::swap(size_suspicion_threshold_, other->size_suspicion_threshold_);
    std::swap(call_stack_suspicion_threshold_, other->call_stack_suspicion_threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto_Params::GetTypeName() const
{
    return "metrics.MemoryLeakReportProto.Params";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForMemoryLeakReportProto_AllocationBreakdown(
    MemoryLeakReportProto_AllocationBreakdown* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_AllocationBreakdown::kCountsBySizeFieldNumber;
const int MemoryLeakReportProto_AllocationBreakdown::kCountForCallStackFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

void MemoryLeakReportProto_AllocationBreakdown::InitAsDefaultInstance()
{
}

MemoryLeakReportProto_AllocationBreakdown::MemoryLeakReportProto_AllocationBreakdown(const MemoryLeakReportProto_AllocationBreakdown& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

void MemoryLeakReportProto_AllocationBreakdown::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    count_for_call_stack_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryLeakReportProto_AllocationBreakdown::~MemoryLeakReportProto_AllocationBreakdown()
{
    // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.AllocationBreakdown)
    SharedDtor();
}

void MemoryLeakReportProto_AllocationBreakdown::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void MemoryLeakReportProto_AllocationBreakdown::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto_AllocationBreakdown::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#endif
    return *default_instance_;
}

MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto_AllocationBreakdown::default_instance_ = NULL;

MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto_AllocationBreakdown::New(::google::protobuf::Arena* arena) const
{
    MemoryLeakReportProto_AllocationBreakdown* n = new MemoryLeakReportProto_AllocationBreakdown;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MemoryLeakReportProto_AllocationBreakdown::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
    count_for_call_stack_ = 0u;
    counts_by_size_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MemoryLeakReportProto_AllocationBreakdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForMemoryLeakReportProto_AllocationBreakdown, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated uint32 counts_by_size = 1;
        case 1: {
            if (tag == 8) {
            parse_counts_by_size:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    1, 8, input, this->mutable_counts_by_size())));
            } else if (tag == 10) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, this->mutable_counts_by_size())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(8))
                goto parse_counts_by_size;
            if (input->ExpectTag(16))
                goto parse_count_for_call_stack;
            break;
        }

        // optional uint32 count_for_call_stack = 2;
        case 2: {
            if (tag == 16) {
            parse_count_for_call_stack:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &count_for_call_stack_)));
                set_has_count_for_call_stack();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.AllocationBreakdown)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.AllocationBreakdown)
    return false;
#undef DO_
}

void MemoryLeakReportProto_AllocationBreakdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
    // repeated uint32 counts_by_size = 1;
    for (int i = 0; i < this->counts_by_size_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
            1, this->counts_by_size(i), output);
    }

    // optional uint32 count_for_call_stack = 2;
    if (has_count_for_call_stack()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_for_call_stack(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.AllocationBreakdown)
}

int MemoryLeakReportProto_AllocationBreakdown::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
    int total_size = 0;

    // optional uint32 count_for_call_stack = 2;
    if (has_count_for_call_stack()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->count_for_call_stack());
    }

    // repeated uint32 counts_by_size = 1;
    {
        int data_size = 0;
        for (int i = 0; i < this->counts_by_size_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                UInt32Size(this->counts_by_size(i));
        }
        total_size += 1 * this->counts_by_size_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MemoryLeakReportProto_AllocationBreakdown::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_AllocationBreakdown*>(&from));
}

void MemoryLeakReportProto_AllocationBreakdown::MergeFrom(const MemoryLeakReportProto_AllocationBreakdown& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    counts_by_size_.MergeFrom(from.counts_by_size_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
        if (from.has_count_for_call_stack()) {
            set_count_for_call_stack(from.count_for_call_stack());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void MemoryLeakReportProto_AllocationBreakdown::CopyFrom(const MemoryLeakReportProto_AllocationBreakdown& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.AllocationBreakdown)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MemoryLeakReportProto_AllocationBreakdown::IsInitialized() const
{

    return true;
}

void MemoryLeakReportProto_AllocationBreakdown::Swap(MemoryLeakReportProto_AllocationBreakdown* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void MemoryLeakReportProto_AllocationBreakdown::InternalSwap(MemoryLeakReportProto_AllocationBreakdown* other)
{
    counts_by_size_.UnsafeArenaSwap(&other->counts_by_size_);
    std::swap(count_for_call_stack_, other->count_for_call_stack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto_AllocationBreakdown::GetTypeName() const
{
    return "metrics.MemoryLeakReportProto.AllocationBreakdown";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForMemoryLeakReportProto_MemoryUsageInfo(
    MemoryLeakReportProto_MemoryUsageInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto_MemoryUsageInfo::kAvailableRamMbFieldNumber;
const int MemoryLeakReportProto_MemoryUsageInfo::kChromeRamUsageMbFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

void MemoryLeakReportProto_MemoryUsageInfo::InitAsDefaultInstance()
{
}

MemoryLeakReportProto_MemoryUsageInfo::MemoryLeakReportProto_MemoryUsageInfo(const MemoryLeakReportProto_MemoryUsageInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    available_ram_mb_ = GOOGLE_ULONGLONG(0);
    chrome_ram_usage_mb_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryLeakReportProto_MemoryUsageInfo::~MemoryLeakReportProto_MemoryUsageInfo()
{
    // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    SharedDtor();
}

void MemoryLeakReportProto_MemoryUsageInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void MemoryLeakReportProto_MemoryUsageInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto_MemoryUsageInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#endif
    return *default_instance_;
}

MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto_MemoryUsageInfo::default_instance_ = NULL;

MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto_MemoryUsageInfo::New(::google::protobuf::Arena* arena) const
{
    MemoryLeakReportProto_MemoryUsageInfo* n = new MemoryLeakReportProto_MemoryUsageInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MemoryLeakReportProto_MemoryUsageInfo::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                           \
    _Pragma("clang diagnostic push")                                                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(MemoryLeakReportProto_MemoryUsageInfo, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<MemoryLeakReportProto_MemoryUsageInfo*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(available_ram_mb_, chrome_ram_usage_mb_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MemoryLeakReportProto_MemoryUsageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForMemoryLeakReportProto_MemoryUsageInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint64 available_ram_mb = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &available_ram_mb_)));
                set_has_available_ram_mb();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_chrome_ram_usage_mb;
            break;
        }

        // optional uint64 chrome_ram_usage_mb = 2;
        case 2: {
            if (tag == 16) {
            parse_chrome_ram_usage_mb:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &chrome_ram_usage_mb_)));
                set_has_chrome_ram_usage_mb();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    return false;
#undef DO_
}

void MemoryLeakReportProto_MemoryUsageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    // optional uint64 available_ram_mb = 1;
    if (has_available_ram_mb()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->available_ram_mb(), output);
    }

    // optional uint64 chrome_ram_usage_mb = 2;
    if (has_chrome_ram_usage_mb()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chrome_ram_usage_mb(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto.MemoryUsageInfo)
}

int MemoryLeakReportProto_MemoryUsageInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional uint64 available_ram_mb = 1;
        if (has_available_ram_mb()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->available_ram_mb());
        }

        // optional uint64 chrome_ram_usage_mb = 2;
        if (has_chrome_ram_usage_mb()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->chrome_ram_usage_mb());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MemoryLeakReportProto_MemoryUsageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto_MemoryUsageInfo*>(&from));
}

void MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(const MemoryLeakReportProto_MemoryUsageInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_available_ram_mb()) {
            set_available_ram_mb(from.available_ram_mb());
        }
        if (from.has_chrome_ram_usage_mb()) {
            set_chrome_ram_usage_mb(from.chrome_ram_usage_mb());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void MemoryLeakReportProto_MemoryUsageInfo::CopyFrom(const MemoryLeakReportProto_MemoryUsageInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto.MemoryUsageInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MemoryLeakReportProto_MemoryUsageInfo::IsInitialized() const
{

    return true;
}

void MemoryLeakReportProto_MemoryUsageInfo::Swap(MemoryLeakReportProto_MemoryUsageInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void MemoryLeakReportProto_MemoryUsageInfo::InternalSwap(MemoryLeakReportProto_MemoryUsageInfo* other)
{
    std::swap(available_ram_mb_, other->available_ram_mb_);
    std::swap(chrome_ram_usage_mb_, other->chrome_ram_usage_mb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto_MemoryUsageInfo::GetTypeName() const
{
    return "metrics.MemoryLeakReportProto.MemoryUsageInfo";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLeakReportProto::kCallStackFieldNumber;
const int MemoryLeakReportProto::kSizeBytesFieldNumber;
const int MemoryLeakReportProto::kParamsFieldNumber;
const int MemoryLeakReportProto::kSourceProcessFieldNumber;
const int MemoryLeakReportProto::kBuildIdFieldNumber;
const int MemoryLeakReportProto::kAllocBreakdownHistoryFieldNumber;
const int MemoryLeakReportProto::kNumRisingIntervalsFieldNumber;
const int MemoryLeakReportProto::kNumAllocsIncreaseFieldNumber;
const int MemoryLeakReportProto::kMemoryUsageInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLeakReportProto::MemoryLeakReportProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.MemoryLeakReportProto)
}

void MemoryLeakReportProto::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    params_ = const_cast<::metrics::MemoryLeakReportProto_Params*>(
        ::metrics::MemoryLeakReportProto_Params::internal_default_instance());
#else
    params_ = const_cast<::metrics::MemoryLeakReportProto_Params*>(&::metrics::MemoryLeakReportProto_Params::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    memory_usage_info_ = const_cast<::metrics::MemoryLeakReportProto_MemoryUsageInfo*>(
        ::metrics::MemoryLeakReportProto_MemoryUsageInfo::internal_default_instance());
#else
    memory_usage_info_ = const_cast<::metrics::MemoryLeakReportProto_MemoryUsageInfo*>(&::metrics::MemoryLeakReportProto_MemoryUsageInfo::default_instance());
#endif
}

MemoryLeakReportProto::MemoryLeakReportProto(const MemoryLeakReportProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.MemoryLeakReportProto)
}

void MemoryLeakReportProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    size_bytes_ = 0u;
    params_ = NULL;
    source_process_ = 0;
    build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    num_rising_intervals_ = 0u;
    num_allocs_increase_ = 0u;
    memory_usage_info_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryLeakReportProto::~MemoryLeakReportProto()
{
    // @@protoc_insertion_point(destructor:metrics.MemoryLeakReportProto)
    SharedDtor();
}

void MemoryLeakReportProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    build_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete params_;
        delete memory_usage_info_;
    }
}

void MemoryLeakReportProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MemoryLeakReportProto& MemoryLeakReportProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_memory_5fleak_5freport_2eproto();
#endif
    return *default_instance_;
}

MemoryLeakReportProto* MemoryLeakReportProto::default_instance_ = NULL;

MemoryLeakReportProto* MemoryLeakReportProto::New(::google::protobuf::Arena* arena) const
{
    MemoryLeakReportProto* n = new MemoryLeakReportProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MemoryLeakReportProto::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.MemoryLeakReportProto)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                           \
    _Pragma("clang diagnostic push")                                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(MemoryLeakReportProto, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<MemoryLeakReportProto*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 222u) {
        ZR_(size_bytes_, source_process_);
        ZR_(num_rising_intervals_, num_allocs_increase_);
        if (has_params()) {
            if (params_ != NULL)
                params_->::metrics::MemoryLeakReportProto_Params::Clear();
        }
        if (has_build_id()) {
            build_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (has_memory_usage_info()) {
        if (memory_usage_info_ != NULL)
            memory_usage_info_->::metrics::MemoryLeakReportProto_MemoryUsageInfo::Clear();
    }

#undef ZR_HELPER_
#undef ZR_

    call_stack_.Clear();
    alloc_breakdown_history_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MemoryLeakReportProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForMemoryLeakReportProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.MemoryLeakReportProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated uint64 call_stack = 1;
        case 1: {
            if (tag == 8) {
            parse_call_stack:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    1, 8, input, this->mutable_call_stack())));
            } else if (tag == 10) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, this->mutable_call_stack())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(8))
                goto parse_call_stack;
            if (input->ExpectTag(16))
                goto parse_size_bytes;
            break;
        }

        // optional uint32 size_bytes = 2;
        case 2: {
            if (tag == 16) {
            parse_size_bytes:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &size_bytes_)));
                set_has_size_bytes();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_params;
            break;
        }

        // optional .metrics.MemoryLeakReportProto.Params params = 3;
        case 3: {
            if (tag == 26) {
            parse_params:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_params()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_alloc_breakdown_history;
            break;
        }

        // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
        case 4: {
            if (tag == 34) {
            parse_alloc_breakdown_history:
                DO_(input->IncrementRecursionDepth());
            parse_loop_alloc_breakdown_history:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_alloc_breakdown_history()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_loop_alloc_breakdown_history;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(40))
                goto parse_source_process;
            break;
        }

        // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
        case 5: {
            if (tag == 40) {
            parse_source_process:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::MemoryLeakReportProto_ProcessType_IsValid(value)) {
                    set_source_process(static_cast<::metrics::MemoryLeakReportProto_ProcessType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(40);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_build_id;
            break;
        }

        // optional bytes build_id = 6;
        case 6: {
            if (tag == 50) {
            parse_build_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_build_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_num_rising_intervals;
            break;
        }

        // optional uint32 num_rising_intervals = 7;
        case 7: {
            if (tag == 56) {
            parse_num_rising_intervals:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_rising_intervals_)));
                set_has_num_rising_intervals();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_num_allocs_increase;
            break;
        }

        // optional uint32 num_allocs_increase = 8;
        case 8: {
            if (tag == 64) {
            parse_num_allocs_increase:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_allocs_increase_)));
                set_has_num_allocs_increase();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_memory_usage_info;
            break;
        }

        // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
        case 9: {
            if (tag == 74) {
            parse_memory_usage_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_memory_usage_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.MemoryLeakReportProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.MemoryLeakReportProto)
    return false;
#undef DO_
}

void MemoryLeakReportProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.MemoryLeakReportProto)
    // repeated uint64 call_stack = 1;
    for (int i = 0; i < this->call_stack_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(
            1, this->call_stack(i), output);
    }

    // optional uint32 size_bytes = 2;
    if (has_size_bytes()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size_bytes(), output);
    }

    // optional .metrics.MemoryLeakReportProto.Params params = 3;
    if (has_params()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->params_, output);
    }

    // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
    for (unsigned int i = 0, n = this->alloc_breakdown_history_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, this->alloc_breakdown_history(i), output);
    }

    // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
    if (has_source_process()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            5, this->source_process(), output);
    }

    // optional bytes build_id = 6;
    if (has_build_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            6, this->build_id(), output);
    }

    // optional uint32 num_rising_intervals = 7;
    if (has_num_rising_intervals()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_rising_intervals(), output);
    }

    // optional uint32 num_allocs_increase = 8;
    if (has_num_allocs_increase()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_allocs_increase(), output);
    }

    // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
    if (has_memory_usage_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, *this->memory_usage_info_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.MemoryLeakReportProto)
}

int MemoryLeakReportProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.MemoryLeakReportProto)
    int total_size = 0;

    if (_has_bits_[1 / 32] & 222u) {
        // optional uint32 size_bytes = 2;
        if (has_size_bytes()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->size_bytes());
        }

        // optional .metrics.MemoryLeakReportProto.Params params = 3;
        if (has_params()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->params_);
        }

        // optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
        if (has_source_process()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_process());
        }

        // optional bytes build_id = 6;
        if (has_build_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->build_id());
        }

        // optional uint32 num_rising_intervals = 7;
        if (has_num_rising_intervals()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_rising_intervals());
        }

        // optional uint32 num_allocs_increase = 8;
        if (has_num_allocs_increase()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_allocs_increase());
        }
    }
    // optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
    if (has_memory_usage_info()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->memory_usage_info_);
    }

    // repeated uint64 call_stack = 1;
    {
        int data_size = 0;
        for (int i = 0; i < this->call_stack_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                UInt64Size(this->call_stack(i));
        }
        total_size += 1 * this->call_stack_size() + data_size;
    }

    // repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
    total_size += 1 * this->alloc_breakdown_history_size();
    for (int i = 0; i < this->alloc_breakdown_history_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->alloc_breakdown_history(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MemoryLeakReportProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const MemoryLeakReportProto*>(&from));
}

void MemoryLeakReportProto::MergeFrom(const MemoryLeakReportProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.MemoryLeakReportProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    call_stack_.MergeFrom(from.call_stack_);
    alloc_breakdown_history_.MergeFrom(from.alloc_breakdown_history_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
        if (from.has_size_bytes()) {
            set_size_bytes(from.size_bytes());
        }
        if (from.has_params()) {
            mutable_params()->::metrics::MemoryLeakReportProto_Params::MergeFrom(from.params());
        }
        if (from.has_source_process()) {
            set_source_process(from.source_process());
        }
        if (from.has_build_id()) {
            set_has_build_id();
            build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
        }
        if (from.has_num_rising_intervals()) {
            set_num_rising_intervals(from.num_rising_intervals());
        }
        if (from.has_num_allocs_increase()) {
            set_num_allocs_increase(from.num_allocs_increase());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_memory_usage_info()) {
            mutable_memory_usage_info()->::metrics::MemoryLeakReportProto_MemoryUsageInfo::MergeFrom(from.memory_usage_info());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void MemoryLeakReportProto::CopyFrom(const MemoryLeakReportProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.MemoryLeakReportProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MemoryLeakReportProto::IsInitialized() const
{

    return true;
}

void MemoryLeakReportProto::Swap(MemoryLeakReportProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void MemoryLeakReportProto::InternalSwap(MemoryLeakReportProto* other)
{
    call_stack_.UnsafeArenaSwap(&other->call_stack_);
    std::swap(size_bytes_, other->size_bytes_);
    std::swap(params_, other->params_);
    std::swap(source_process_, other->source_process_);
    build_id_.Swap(&other->build_id_);
    alloc_breakdown_history_.UnsafeArenaSwap(&other->alloc_breakdown_history_);
    std::swap(num_rising_intervals_, other->num_rising_intervals_);
    std::swap(num_allocs_increase_, other->num_allocs_increase_);
    std::swap(memory_usage_info_, other->memory_usage_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string MemoryLeakReportProto::GetTypeName() const
{
    return "metrics.MemoryLeakReportProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLeakReportProto_Params

// optional float sampling_rate = 1;
bool MemoryLeakReportProto_Params::has_sampling_rate() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLeakReportProto_Params::set_has_sampling_rate()
{
    _has_bits_[0] |= 0x00000001u;
}
void MemoryLeakReportProto_Params::clear_has_sampling_rate()
{
    _has_bits_[0] &= ~0x00000001u;
}
void MemoryLeakReportProto_Params::clear_sampling_rate()
{
    sampling_rate_ = 0;
    clear_has_sampling_rate();
}
float MemoryLeakReportProto_Params::sampling_rate() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.sampling_rate)
    return sampling_rate_;
}
void MemoryLeakReportProto_Params::set_sampling_rate(float value)
{
    set_has_sampling_rate();
    sampling_rate_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.sampling_rate)
}

// optional uint32 max_stack_depth = 2;
bool MemoryLeakReportProto_Params::has_max_stack_depth() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto_Params::set_has_max_stack_depth()
{
    _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto_Params::clear_has_max_stack_depth()
{
    _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto_Params::clear_max_stack_depth()
{
    max_stack_depth_ = 0u;
    clear_has_max_stack_depth();
}
::google::protobuf::uint32 MemoryLeakReportProto_Params::max_stack_depth() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.max_stack_depth)
    return max_stack_depth_;
}
void MemoryLeakReportProto_Params::set_max_stack_depth(::google::protobuf::uint32 value)
{
    set_has_max_stack_depth();
    max_stack_depth_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.max_stack_depth)
}

// optional uint64 analysis_interval_bytes = 3;
bool MemoryLeakReportProto_Params::has_analysis_interval_bytes() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryLeakReportProto_Params::set_has_analysis_interval_bytes()
{
    _has_bits_[0] |= 0x00000004u;
}
void MemoryLeakReportProto_Params::clear_has_analysis_interval_bytes()
{
    _has_bits_[0] &= ~0x00000004u;
}
void MemoryLeakReportProto_Params::clear_analysis_interval_bytes()
{
    analysis_interval_bytes_ = GOOGLE_ULONGLONG(0);
    clear_has_analysis_interval_bytes();
}
::google::protobuf::uint64 MemoryLeakReportProto_Params::analysis_interval_bytes() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.analysis_interval_bytes)
    return analysis_interval_bytes_;
}
void MemoryLeakReportProto_Params::set_analysis_interval_bytes(::google::protobuf::uint64 value)
{
    set_has_analysis_interval_bytes();
    analysis_interval_bytes_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.analysis_interval_bytes)
}

// optional uint32 size_suspicion_threshold = 4;
bool MemoryLeakReportProto_Params::has_size_suspicion_threshold() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryLeakReportProto_Params::set_has_size_suspicion_threshold()
{
    _has_bits_[0] |= 0x00000008u;
}
void MemoryLeakReportProto_Params::clear_has_size_suspicion_threshold()
{
    _has_bits_[0] &= ~0x00000008u;
}
void MemoryLeakReportProto_Params::clear_size_suspicion_threshold()
{
    size_suspicion_threshold_ = 0u;
    clear_has_size_suspicion_threshold();
}
::google::protobuf::uint32 MemoryLeakReportProto_Params::size_suspicion_threshold() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.size_suspicion_threshold)
    return size_suspicion_threshold_;
}
void MemoryLeakReportProto_Params::set_size_suspicion_threshold(::google::protobuf::uint32 value)
{
    set_has_size_suspicion_threshold();
    size_suspicion_threshold_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.size_suspicion_threshold)
}

// optional uint32 call_stack_suspicion_threshold = 5;
bool MemoryLeakReportProto_Params::has_call_stack_suspicion_threshold() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemoryLeakReportProto_Params::set_has_call_stack_suspicion_threshold()
{
    _has_bits_[0] |= 0x00000010u;
}
void MemoryLeakReportProto_Params::clear_has_call_stack_suspicion_threshold()
{
    _has_bits_[0] &= ~0x00000010u;
}
void MemoryLeakReportProto_Params::clear_call_stack_suspicion_threshold()
{
    call_stack_suspicion_threshold_ = 0u;
    clear_has_call_stack_suspicion_threshold();
}
::google::protobuf::uint32 MemoryLeakReportProto_Params::call_stack_suspicion_threshold() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.Params.call_stack_suspicion_threshold)
    return call_stack_suspicion_threshold_;
}
void MemoryLeakReportProto_Params::set_call_stack_suspicion_threshold(::google::protobuf::uint32 value)
{
    set_has_call_stack_suspicion_threshold();
    call_stack_suspicion_threshold_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.Params.call_stack_suspicion_threshold)
}

// -------------------------------------------------------------------

// MemoryLeakReportProto_AllocationBreakdown

// repeated uint32 counts_by_size = 1;
int MemoryLeakReportProto_AllocationBreakdown::counts_by_size_size() const
{
    return counts_by_size_.size();
}
void MemoryLeakReportProto_AllocationBreakdown::clear_counts_by_size()
{
    counts_by_size_.Clear();
}
::google::protobuf::uint32 MemoryLeakReportProto_AllocationBreakdown::counts_by_size(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
    return counts_by_size_.Get(index);
}
void MemoryLeakReportProto_AllocationBreakdown::set_counts_by_size(int index, ::google::protobuf::uint32 value)
{
    counts_by_size_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
}
void MemoryLeakReportProto_AllocationBreakdown::add_counts_by_size(::google::protobuf::uint32 value)
{
    counts_by_size_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint32>&
MemoryLeakReportProto_AllocationBreakdown::counts_by_size() const
{
    // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
    return counts_by_size_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint32>*
MemoryLeakReportProto_AllocationBreakdown::mutable_counts_by_size()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.AllocationBreakdown.counts_by_size)
    return &counts_by_size_;
}

// optional uint32 count_for_call_stack = 2;
bool MemoryLeakReportProto_AllocationBreakdown::has_count_for_call_stack() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto_AllocationBreakdown::set_has_count_for_call_stack()
{
    _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto_AllocationBreakdown::clear_has_count_for_call_stack()
{
    _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto_AllocationBreakdown::clear_count_for_call_stack()
{
    count_for_call_stack_ = 0u;
    clear_has_count_for_call_stack();
}
::google::protobuf::uint32 MemoryLeakReportProto_AllocationBreakdown::count_for_call_stack() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.AllocationBreakdown.count_for_call_stack)
    return count_for_call_stack_;
}
void MemoryLeakReportProto_AllocationBreakdown::set_count_for_call_stack(::google::protobuf::uint32 value)
{
    set_has_count_for_call_stack();
    count_for_call_stack_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.AllocationBreakdown.count_for_call_stack)
}

// -------------------------------------------------------------------

// MemoryLeakReportProto_MemoryUsageInfo

// optional uint64 available_ram_mb = 1;
bool MemoryLeakReportProto_MemoryUsageInfo::has_available_ram_mb() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_has_available_ram_mb()
{
    _has_bits_[0] |= 0x00000001u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_has_available_ram_mb()
{
    _has_bits_[0] &= ~0x00000001u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_available_ram_mb()
{
    available_ram_mb_ = GOOGLE_ULONGLONG(0);
    clear_has_available_ram_mb();
}
::google::protobuf::uint64 MemoryLeakReportProto_MemoryUsageInfo::available_ram_mb() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.MemoryUsageInfo.available_ram_mb)
    return available_ram_mb_;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_available_ram_mb(::google::protobuf::uint64 value)
{
    set_has_available_ram_mb();
    available_ram_mb_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.MemoryUsageInfo.available_ram_mb)
}

// optional uint64 chrome_ram_usage_mb = 2;
bool MemoryLeakReportProto_MemoryUsageInfo::has_chrome_ram_usage_mb() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_has_chrome_ram_usage_mb()
{
    _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_has_chrome_ram_usage_mb()
{
    _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto_MemoryUsageInfo::clear_chrome_ram_usage_mb()
{
    chrome_ram_usage_mb_ = GOOGLE_ULONGLONG(0);
    clear_has_chrome_ram_usage_mb();
}
::google::protobuf::uint64 MemoryLeakReportProto_MemoryUsageInfo::chrome_ram_usage_mb() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.MemoryUsageInfo.chrome_ram_usage_mb)
    return chrome_ram_usage_mb_;
}
void MemoryLeakReportProto_MemoryUsageInfo::set_chrome_ram_usage_mb(::google::protobuf::uint64 value)
{
    set_has_chrome_ram_usage_mb();
    chrome_ram_usage_mb_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.MemoryUsageInfo.chrome_ram_usage_mb)
}

// -------------------------------------------------------------------

// MemoryLeakReportProto

// repeated uint64 call_stack = 1;
int MemoryLeakReportProto::call_stack_size() const
{
    return call_stack_.size();
}
void MemoryLeakReportProto::clear_call_stack()
{
    call_stack_.Clear();
}
::google::protobuf::uint64 MemoryLeakReportProto::call_stack(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.call_stack)
    return call_stack_.Get(index);
}
void MemoryLeakReportProto::set_call_stack(int index, ::google::protobuf::uint64 value)
{
    call_stack_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.call_stack)
}
void MemoryLeakReportProto::add_call_stack(::google::protobuf::uint64 value)
{
    call_stack_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.call_stack)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint64>&
MemoryLeakReportProto::call_stack() const
{
    // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.call_stack)
    return call_stack_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint64>*
MemoryLeakReportProto::mutable_call_stack()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.call_stack)
    return &call_stack_;
}

// optional uint32 size_bytes = 2;
bool MemoryLeakReportProto::has_size_bytes() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLeakReportProto::set_has_size_bytes()
{
    _has_bits_[0] |= 0x00000002u;
}
void MemoryLeakReportProto::clear_has_size_bytes()
{
    _has_bits_[0] &= ~0x00000002u;
}
void MemoryLeakReportProto::clear_size_bytes()
{
    size_bytes_ = 0u;
    clear_has_size_bytes();
}
::google::protobuf::uint32 MemoryLeakReportProto::size_bytes() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.size_bytes)
    return size_bytes_;
}
void MemoryLeakReportProto::set_size_bytes(::google::protobuf::uint32 value)
{
    set_has_size_bytes();
    size_bytes_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.size_bytes)
}

// optional .metrics.MemoryLeakReportProto.Params params = 3;
bool MemoryLeakReportProto::has_params() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryLeakReportProto::set_has_params()
{
    _has_bits_[0] |= 0x00000004u;
}
void MemoryLeakReportProto::clear_has_params()
{
    _has_bits_[0] &= ~0x00000004u;
}
void MemoryLeakReportProto::clear_params()
{
    if (params_ != NULL)
        params_->::metrics::MemoryLeakReportProto_Params::Clear();
    clear_has_params();
}
const ::metrics::MemoryLeakReportProto_Params& MemoryLeakReportProto::params() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.params)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return params_ != NULL ? *params_ : *default_instance().params_;
#else
    return params_ != NULL ? *params_ : *default_instance_->params_;
#endif
}
::metrics::MemoryLeakReportProto_Params* MemoryLeakReportProto::mutable_params()
{
    set_has_params();
    if (params_ == NULL) {
        params_ = new ::metrics::MemoryLeakReportProto_Params;
    }
    // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.params)
    return params_;
}
::metrics::MemoryLeakReportProto_Params* MemoryLeakReportProto::release_params()
{
    // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.params)
    clear_has_params();
    ::metrics::MemoryLeakReportProto_Params* temp = params_;
    params_ = NULL;
    return temp;
}
void MemoryLeakReportProto::set_allocated_params(::metrics::MemoryLeakReportProto_Params* params)
{
    delete params_;
    params_ = params;
    if (params) {
        set_has_params();
    } else {
        clear_has_params();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.params)
}

// optional .metrics.MemoryLeakReportProto.ProcessType source_process = 5;
bool MemoryLeakReportProto::has_source_process() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryLeakReportProto::set_has_source_process()
{
    _has_bits_[0] |= 0x00000008u;
}
void MemoryLeakReportProto::clear_has_source_process()
{
    _has_bits_[0] &= ~0x00000008u;
}
void MemoryLeakReportProto::clear_source_process()
{
    source_process_ = 0;
    clear_has_source_process();
}
::metrics::MemoryLeakReportProto_ProcessType MemoryLeakReportProto::source_process() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.source_process)
    return static_cast<::metrics::MemoryLeakReportProto_ProcessType>(source_process_);
}
void MemoryLeakReportProto::set_source_process(::metrics::MemoryLeakReportProto_ProcessType value)
{
    assert(::metrics::MemoryLeakReportProto_ProcessType_IsValid(value));
    set_has_source_process();
    source_process_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.source_process)
}

// optional bytes build_id = 6;
bool MemoryLeakReportProto::has_build_id() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemoryLeakReportProto::set_has_build_id()
{
    _has_bits_[0] |= 0x00000010u;
}
void MemoryLeakReportProto::clear_has_build_id()
{
    _has_bits_[0] &= ~0x00000010u;
}
void MemoryLeakReportProto::clear_build_id()
{
    build_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_build_id();
}
const ::std::string& MemoryLeakReportProto::build_id() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.build_id)
    return build_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemoryLeakReportProto::set_build_id(const ::std::string& value)
{
    set_has_build_id();
    build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.build_id)
}
void MemoryLeakReportProto::set_build_id(const char* value)
{
    set_has_build_id();
    build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.MemoryLeakReportProto.build_id)
}
void MemoryLeakReportProto::set_build_id(const void* value, size_t size)
{
    set_has_build_id();
    build_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.MemoryLeakReportProto.build_id)
}
::std::string* MemoryLeakReportProto::mutable_build_id()
{
    set_has_build_id();
    // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.build_id)
    return build_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemoryLeakReportProto::release_build_id()
{
    // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.build_id)
    clear_has_build_id();
    return build_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemoryLeakReportProto::set_allocated_build_id(::std::string* build_id)
{
    if (build_id != NULL) {
        set_has_build_id();
    } else {
        clear_has_build_id();
    }
    build_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_id);
    // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.build_id)
}

// repeated .metrics.MemoryLeakReportProto.AllocationBreakdown alloc_breakdown_history = 4;
int MemoryLeakReportProto::alloc_breakdown_history_size() const
{
    return alloc_breakdown_history_.size();
}
void MemoryLeakReportProto::clear_alloc_breakdown_history()
{
    alloc_breakdown_history_.Clear();
}
const ::metrics::MemoryLeakReportProto_AllocationBreakdown& MemoryLeakReportProto::alloc_breakdown_history(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.alloc_breakdown_history)
    return alloc_breakdown_history_.Get(index);
}
::metrics::MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto::mutable_alloc_breakdown_history(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.alloc_breakdown_history)
    return alloc_breakdown_history_.Mutable(index);
}
::metrics::MemoryLeakReportProto_AllocationBreakdown* MemoryLeakReportProto::add_alloc_breakdown_history()
{
    // @@protoc_insertion_point(field_add:metrics.MemoryLeakReportProto.alloc_breakdown_history)
    return alloc_breakdown_history_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::MemoryLeakReportProto_AllocationBreakdown>*
MemoryLeakReportProto::mutable_alloc_breakdown_history()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.MemoryLeakReportProto.alloc_breakdown_history)
    return &alloc_breakdown_history_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::MemoryLeakReportProto_AllocationBreakdown>&
MemoryLeakReportProto::alloc_breakdown_history() const
{
    // @@protoc_insertion_point(field_list:metrics.MemoryLeakReportProto.alloc_breakdown_history)
    return alloc_breakdown_history_;
}

// optional uint32 num_rising_intervals = 7;
bool MemoryLeakReportProto::has_num_rising_intervals() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void MemoryLeakReportProto::set_has_num_rising_intervals()
{
    _has_bits_[0] |= 0x00000040u;
}
void MemoryLeakReportProto::clear_has_num_rising_intervals()
{
    _has_bits_[0] &= ~0x00000040u;
}
void MemoryLeakReportProto::clear_num_rising_intervals()
{
    num_rising_intervals_ = 0u;
    clear_has_num_rising_intervals();
}
::google::protobuf::uint32 MemoryLeakReportProto::num_rising_intervals() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.num_rising_intervals)
    return num_rising_intervals_;
}
void MemoryLeakReportProto::set_num_rising_intervals(::google::protobuf::uint32 value)
{
    set_has_num_rising_intervals();
    num_rising_intervals_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.num_rising_intervals)
}

// optional uint32 num_allocs_increase = 8;
bool MemoryLeakReportProto::has_num_allocs_increase() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void MemoryLeakReportProto::set_has_num_allocs_increase()
{
    _has_bits_[0] |= 0x00000080u;
}
void MemoryLeakReportProto::clear_has_num_allocs_increase()
{
    _has_bits_[0] &= ~0x00000080u;
}
void MemoryLeakReportProto::clear_num_allocs_increase()
{
    num_allocs_increase_ = 0u;
    clear_has_num_allocs_increase();
}
::google::protobuf::uint32 MemoryLeakReportProto::num_allocs_increase() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.num_allocs_increase)
    return num_allocs_increase_;
}
void MemoryLeakReportProto::set_num_allocs_increase(::google::protobuf::uint32 value)
{
    set_has_num_allocs_increase();
    num_allocs_increase_ = value;
    // @@protoc_insertion_point(field_set:metrics.MemoryLeakReportProto.num_allocs_increase)
}

// optional .metrics.MemoryLeakReportProto.MemoryUsageInfo memory_usage_info = 9;
bool MemoryLeakReportProto::has_memory_usage_info() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void MemoryLeakReportProto::set_has_memory_usage_info()
{
    _has_bits_[0] |= 0x00000100u;
}
void MemoryLeakReportProto::clear_has_memory_usage_info()
{
    _has_bits_[0] &= ~0x00000100u;
}
void MemoryLeakReportProto::clear_memory_usage_info()
{
    if (memory_usage_info_ != NULL)
        memory_usage_info_->::metrics::MemoryLeakReportProto_MemoryUsageInfo::Clear();
    clear_has_memory_usage_info();
}
const ::metrics::MemoryLeakReportProto_MemoryUsageInfo& MemoryLeakReportProto::memory_usage_info() const
{
    // @@protoc_insertion_point(field_get:metrics.MemoryLeakReportProto.memory_usage_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return memory_usage_info_ != NULL ? *memory_usage_info_ : *default_instance().memory_usage_info_;
#else
    return memory_usage_info_ != NULL ? *memory_usage_info_ : *default_instance_->memory_usage_info_;
#endif
}
::metrics::MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto::mutable_memory_usage_info()
{
    set_has_memory_usage_info();
    if (memory_usage_info_ == NULL) {
        memory_usage_info_ = new ::metrics::MemoryLeakReportProto_MemoryUsageInfo;
    }
    // @@protoc_insertion_point(field_mutable:metrics.MemoryLeakReportProto.memory_usage_info)
    return memory_usage_info_;
}
::metrics::MemoryLeakReportProto_MemoryUsageInfo* MemoryLeakReportProto::release_memory_usage_info()
{
    // @@protoc_insertion_point(field_release:metrics.MemoryLeakReportProto.memory_usage_info)
    clear_has_memory_usage_info();
    ::metrics::MemoryLeakReportProto_MemoryUsageInfo* temp = memory_usage_info_;
    memory_usage_info_ = NULL;
    return temp;
}
void MemoryLeakReportProto::set_allocated_memory_usage_info(::metrics::MemoryLeakReportProto_MemoryUsageInfo* memory_usage_info)
{
    delete memory_usage_info_;
    memory_usage_info_ = memory_usage_info;
    if (memory_usage_info) {
        set_has_memory_usage_info();
    } else {
        clear_has_memory_usage_info();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.MemoryLeakReportProto.memory_usage_info)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
