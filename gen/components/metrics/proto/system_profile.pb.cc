// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_profile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system_profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_system_5fprofile_2eproto()
{
    delete SystemProfileProto::default_instance_;
    delete SystemProfileProto_OS::default_instance_;
    delete SystemProfileProto_Hardware::default_instance_;
    delete SystemProfileProto_Hardware_CPU::default_instance_;
    delete SystemProfileProto_Hardware_Graphics::default_instance_;
    delete SystemProfileProto_Hardware_Bluetooth::default_instance_;
    delete SystemProfileProto_Hardware_Bluetooth_PairedDevice::default_instance_;
    delete SystemProfileProto_Hardware_TouchScreen::default_instance_;
    delete SystemProfileProto_Hardware_Drive::default_instance_;
    delete SystemProfileProto_Network::default_instance_;
    delete SystemProfileProto_Network_WifiAccessPoint::default_instance_;
    delete SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance_;
    delete SystemProfileProto_GoogleUpdate::default_instance_;
    delete SystemProfileProto_GoogleUpdate_ProductInfo::default_instance_;
    delete SystemProfileProto_Plugin::default_instance_;
    delete SystemProfileProto_Stability::default_instance_;
    delete SystemProfileProto_Stability_PluginStability::default_instance_;
    delete SystemProfileProto_FieldTrial::default_instance_;
    delete SystemProfileProto_ExternalAudioVideoDevice::default_instance_;
    delete SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::default_instance_;
    delete SystemProfileProto_ExternalAudioVideoDevice_CECCommand::default_instance_;
    delete SystemProfileProto_ExternalAccessPoint::default_instance_;
    delete SystemProfileProto_AntiVirusProduct::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_system_5fprofile_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_system_5fprofile_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    SystemProfileProto::default_instance_ = new SystemProfileProto();
    SystemProfileProto_OS::default_instance_ = new SystemProfileProto_OS();
    SystemProfileProto_Hardware::default_instance_ = new SystemProfileProto_Hardware();
    SystemProfileProto_Hardware_CPU::default_instance_ = new SystemProfileProto_Hardware_CPU();
    SystemProfileProto_Hardware_Graphics::default_instance_ = new SystemProfileProto_Hardware_Graphics();
    SystemProfileProto_Hardware_Bluetooth::default_instance_ = new SystemProfileProto_Hardware_Bluetooth();
    SystemProfileProto_Hardware_Bluetooth_PairedDevice::default_instance_ = new SystemProfileProto_Hardware_Bluetooth_PairedDevice();
    SystemProfileProto_Hardware_TouchScreen::default_instance_ = new SystemProfileProto_Hardware_TouchScreen();
    SystemProfileProto_Hardware_Drive::default_instance_ = new SystemProfileProto_Hardware_Drive();
    SystemProfileProto_Network::default_instance_ = new SystemProfileProto_Network();
    SystemProfileProto_Network_WifiAccessPoint::default_instance_ = new SystemProfileProto_Network_WifiAccessPoint();
    SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance_ = new SystemProfileProto_Network_WifiAccessPoint_VendorInformation();
    SystemProfileProto_GoogleUpdate::default_instance_ = new SystemProfileProto_GoogleUpdate();
    SystemProfileProto_GoogleUpdate_ProductInfo::default_instance_ = new SystemProfileProto_GoogleUpdate_ProductInfo();
    SystemProfileProto_Plugin::default_instance_ = new SystemProfileProto_Plugin();
    SystemProfileProto_Stability::default_instance_ = new SystemProfileProto_Stability();
    SystemProfileProto_Stability_PluginStability::default_instance_ = new SystemProfileProto_Stability_PluginStability();
    SystemProfileProto_FieldTrial::default_instance_ = new SystemProfileProto_FieldTrial();
    SystemProfileProto_ExternalAudioVideoDevice::default_instance_ = new SystemProfileProto_ExternalAudioVideoDevice();
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::default_instance_ = new SystemProfileProto_ExternalAudioVideoDevice_AudioDescription();
    SystemProfileProto_ExternalAudioVideoDevice_CECCommand::default_instance_ = new SystemProfileProto_ExternalAudioVideoDevice_CECCommand();
    SystemProfileProto_ExternalAccessPoint::default_instance_ = new SystemProfileProto_ExternalAccessPoint();
    SystemProfileProto_AntiVirusProduct::default_instance_ = new SystemProfileProto_AntiVirusProduct();
    SystemProfileProto::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_OS::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware_CPU::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware_Graphics::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware_Bluetooth::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware_Bluetooth_PairedDevice::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware_TouchScreen::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Hardware_Drive::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Network::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Network_WifiAccessPoint::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_GoogleUpdate::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_GoogleUpdate_ProductInfo::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Plugin::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Stability::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_Stability_PluginStability::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_FieldTrial::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_ExternalAudioVideoDevice::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_ExternalAudioVideoDevice_CECCommand::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_ExternalAccessPoint::default_instance_->InitAsDefaultInstance();
    SystemProfileProto_AntiVirusProduct::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_5fprofile_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_system_5fprofile_2eproto_once_);
void protobuf_AddDesc_system_5fprofile_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_system_5fprofile_2eproto_once_,
        &protobuf_AddDesc_system_5fprofile_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_5fprofile_2eproto {
    StaticDescriptorInitializer_system_5fprofile_2eproto()
    {
        protobuf_AddDesc_system_5fprofile_2eproto();
    }
} static_descriptor_initializer_system_5fprofile_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForSystemProfileProto(
    SystemProfileProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_Channel_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_UNKNOWN;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_CANARY;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_DEV;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_BETA;
const SystemProfileProto_Channel SystemProfileProto::CHANNEL_STABLE;
const SystemProfileProto_Channel SystemProfileProto::Channel_MIN;
const SystemProfileProto_Channel SystemProfileProto::Channel_MAX;
const int SystemProfileProto::Channel_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExtensionsState_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExtensionsState SystemProfileProto::NO_EXTENSIONS;
const SystemProfileProto_ExtensionsState SystemProfileProto::NO_OFFSTORE_VERIFIED;
const SystemProfileProto_ExtensionsState SystemProfileProto::NO_OFFSTORE_UNVERIFIED;
const SystemProfileProto_ExtensionsState SystemProfileProto::HAS_OFFSTORE;
const SystemProfileProto_ExtensionsState SystemProfileProto::ExtensionsState_MIN;
const SystemProfileProto_ExtensionsState SystemProfileProto::ExtensionsState_MAX;
const int SystemProfileProto::ExtensionsState_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_UmaDefaultState_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_UmaDefaultState SystemProfileProto::OPT_IN;
const SystemProfileProto_UmaDefaultState SystemProfileProto::OPT_OUT;
const SystemProfileProto_UmaDefaultState SystemProfileProto::POLICY_FORCED_ENABLED;
const SystemProfileProto_UmaDefaultState SystemProfileProto::UmaDefaultState_MIN;
const SystemProfileProto_UmaDefaultState SystemProfileProto::UmaDefaultState_MAX;
const int SystemProfileProto::UmaDefaultState_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_AntiVirusState_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_ON;
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_OFF;
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_SNOOZED;
const SystemProfileProto_AntiVirusState SystemProfileProto::STATE_EXPIRED;
const SystemProfileProto_AntiVirusState SystemProfileProto::AntiVirusState_MIN;
const SystemProfileProto_AntiVirusState SystemProfileProto::AntiVirusState_MAX;
const int SystemProfileProto::AntiVirusState_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForSystemProfileProto_OS(
    SystemProfileProto_OS* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_OS::kNameFieldNumber;
const int SystemProfileProto_OS::kVersionFieldNumber;
const int SystemProfileProto_OS::kFingerprintFieldNumber;
const int SystemProfileProto_OS::kIsJailbrokenFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_OS::SystemProfileProto_OS()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.OS)
}

void SystemProfileProto_OS::InitAsDefaultInstance()
{
}

SystemProfileProto_OS::SystemProfileProto_OS(const SystemProfileProto_OS& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.OS)
}

void SystemProfileProto_OS::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    is_jailbroken_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_OS::~SystemProfileProto_OS()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.OS)
    SharedDtor();
}

void SystemProfileProto_OS::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_OS::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_OS& SystemProfileProto_OS::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_OS* SystemProfileProto_OS::default_instance_ = NULL;

SystemProfileProto_OS* SystemProfileProto_OS::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_OS* n = new SystemProfileProto_OS;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_OS::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.OS)
    if (_has_bits_[0 / 32] & 15u) {
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_version()) {
            version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_fingerprint()) {
            fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        is_jailbroken_ = false;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_OS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_OS, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.OS)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_version;
            break;
        }

        // optional string version = 2;
        case 2: {
            if (tag == 18) {
            parse_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_fingerprint;
            break;
        }

        // optional string fingerprint = 3;
        case 3: {
            if (tag == 26) {
            parse_fingerprint:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_fingerprint()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_is_jailbroken;
            break;
        }

        // optional bool is_jailbroken = 4;
        case 4: {
            if (tag == 32) {
            parse_is_jailbroken:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_jailbroken_)));
                set_has_is_jailbroken();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.OS)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.OS)
    return false;
#undef DO_
}

void SystemProfileProto_OS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.OS)
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->name(), output);
    }

    // optional string version = 2;
    if (has_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->version(), output);
    }

    // optional string fingerprint = 3;
    if (has_fingerprint()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->fingerprint(), output);
    }

    // optional bool is_jailbroken = 4;
    if (has_is_jailbroken()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_jailbroken(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.OS)
}

int SystemProfileProto_OS::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.OS)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
        }

        // optional string version = 2;
        if (has_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->version());
        }

        // optional string fingerprint = 3;
        if (has_fingerprint()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->fingerprint());
        }

        // optional bool is_jailbroken = 4;
        if (has_is_jailbroken()) {
            total_size += 1 + 1;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_OS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_OS*>(&from));
}

void SystemProfileProto_OS::MergeFrom(const SystemProfileProto_OS& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.OS)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_version()) {
            set_has_version();
            version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
        }
        if (from.has_fingerprint()) {
            set_has_fingerprint();
            fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_);
        }
        if (from.has_is_jailbroken()) {
            set_is_jailbroken(from.is_jailbroken());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_OS::CopyFrom(const SystemProfileProto_OS& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.OS)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_OS::IsInitialized() const
{

    return true;
}

void SystemProfileProto_OS::Swap(SystemProfileProto_OS* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_OS::InternalSwap(SystemProfileProto_OS* other)
{
    name_.Swap(&other->name_);
    version_.Swap(&other->version_);
    fingerprint_.Swap(&other->fingerprint_);
    std::swap(is_jailbroken_, other->is_jailbroken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_OS::GetTypeName() const
{
    return "metrics.SystemProfileProto.OS";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware(
    SystemProfileProto_Hardware* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware_CPU(
    SystemProfileProto_Hardware_CPU* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_CPU::kVendorNameFieldNumber;
const int SystemProfileProto_Hardware_CPU::kSignatureFieldNumber;
const int SystemProfileProto_Hardware_CPU::kNumCoresFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_CPU::SystemProfileProto_Hardware_CPU()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.CPU)
}

void SystemProfileProto_Hardware_CPU::InitAsDefaultInstance()
{
}

SystemProfileProto_Hardware_CPU::SystemProfileProto_Hardware_CPU(const SystemProfileProto_Hardware_CPU& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.CPU)
}

void SystemProfileProto_Hardware_CPU::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    vendor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signature_ = 0u;
    num_cores_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware_CPU::~SystemProfileProto_Hardware_CPU()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.CPU)
    SharedDtor();
}

void SystemProfileProto_Hardware_CPU::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    vendor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Hardware_CPU::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware_CPU& SystemProfileProto_Hardware_CPU::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware_CPU* SystemProfileProto_Hardware_CPU::default_instance_ = NULL;

SystemProfileProto_Hardware_CPU* SystemProfileProto_Hardware_CPU::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware_CPU* n = new SystemProfileProto_Hardware_CPU;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware_CPU::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.CPU)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                     \
    _Pragma("clang diagnostic push")                                                                                      \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Hardware_CPU, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Hardware_CPU*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 7u) {
        ZR_(signature_, num_cores_);
        if (has_vendor_name()) {
            vendor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware_CPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware_CPU, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.CPU)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string vendor_name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_vendor_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_signature;
            break;
        }

        // optional uint32 signature = 2;
        case 2: {
            if (tag == 16) {
            parse_signature:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &signature_)));
                set_has_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_num_cores;
            break;
        }

        // optional uint32 num_cores = 3;
        case 3: {
            if (tag == 24) {
            parse_num_cores:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &num_cores_)));
                set_has_num_cores();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.CPU)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.CPU)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware_CPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.CPU)
    // optional string vendor_name = 1;
    if (has_vendor_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->vendor_name(), output);
    }

    // optional uint32 signature = 2;
    if (has_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signature(), output);
    }

    // optional uint32 num_cores = 3;
    if (has_num_cores()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_cores(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.CPU)
}

int SystemProfileProto_Hardware_CPU::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.CPU)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional string vendor_name = 1;
        if (has_vendor_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->vendor_name());
        }

        // optional uint32 signature = 2;
        if (has_signature()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->signature());
        }

        // optional uint32 num_cores = 3;
        if (has_num_cores()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->num_cores());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware_CPU::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_CPU*>(&from));
}

void SystemProfileProto_Hardware_CPU::MergeFrom(const SystemProfileProto_Hardware_CPU& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.CPU)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_vendor_name()) {
            set_has_vendor_name();
            vendor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
        }
        if (from.has_signature()) {
            set_signature(from.signature());
        }
        if (from.has_num_cores()) {
            set_num_cores(from.num_cores());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware_CPU::CopyFrom(const SystemProfileProto_Hardware_CPU& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.CPU)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware_CPU::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware_CPU::Swap(SystemProfileProto_Hardware_CPU* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware_CPU::InternalSwap(SystemProfileProto_Hardware_CPU* other)
{
    vendor_name_.Swap(&other->vendor_name_);
    std::swap(signature_, other->signature_);
    std::swap(num_cores_, other->num_cores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware_CPU::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware.CPU";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware_Graphics(
    SystemProfileProto_Hardware_Graphics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Graphics::kVendorIdFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kDeviceIdFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kDriverVersionFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kDriverDateFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kGlVendorFieldNumber;
const int SystemProfileProto_Hardware_Graphics::kGlRendererFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Graphics::SystemProfileProto_Hardware_Graphics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Graphics)
}

void SystemProfileProto_Hardware_Graphics::InitAsDefaultInstance()
{
}

SystemProfileProto_Hardware_Graphics::SystemProfileProto_Hardware_Graphics(const SystemProfileProto_Hardware_Graphics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Graphics)
}

void SystemProfileProto_Hardware_Graphics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    vendor_id_ = 0u;
    device_id_ = 0u;
    driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    driver_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gl_vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gl_renderer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware_Graphics::~SystemProfileProto_Hardware_Graphics()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Graphics)
    SharedDtor();
}

void SystemProfileProto_Hardware_Graphics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    driver_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    driver_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gl_vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gl_renderer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Hardware_Graphics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware_Graphics& SystemProfileProto_Hardware_Graphics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware_Graphics* SystemProfileProto_Hardware_Graphics::default_instance_ = NULL;

SystemProfileProto_Hardware_Graphics* SystemProfileProto_Hardware_Graphics::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware_Graphics* n = new SystemProfileProto_Hardware_Graphics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware_Graphics::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Graphics)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                          \
    _Pragma("clang diagnostic push")                                                                                           \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Hardware_Graphics, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Hardware_Graphics*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 63u) {
        ZR_(vendor_id_, device_id_);
        if (has_driver_version()) {
            driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_driver_date()) {
            driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_gl_vendor()) {
            gl_vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_gl_renderer()) {
            gl_renderer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware_Graphics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware_Graphics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Graphics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 vendor_id = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &vendor_id_)));
                set_has_vendor_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_device_id;
            break;
        }

        // optional uint32 device_id = 2;
        case 2: {
            if (tag == 16) {
            parse_device_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &device_id_)));
                set_has_device_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_driver_version;
            break;
        }

        // optional string driver_version = 3;
        case 3: {
            if (tag == 26) {
            parse_driver_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_driver_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_driver_date;
            break;
        }

        // optional string driver_date = 4;
        case 4: {
            if (tag == 34) {
            parse_driver_date:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_driver_date()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_gl_vendor;
            break;
        }

        // optional string gl_vendor = 6;
        case 6: {
            if (tag == 50) {
            parse_gl_vendor:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_gl_vendor()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_gl_renderer;
            break;
        }

        // optional string gl_renderer = 7;
        case 7: {
            if (tag == 58) {
            parse_gl_renderer:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_gl_renderer()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Graphics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Graphics)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware_Graphics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Graphics)
    // optional uint32 vendor_id = 1;
    if (has_vendor_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
    }

    // optional uint32 device_id = 2;
    if (has_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_id(), output);
    }

    // optional string driver_version = 3;
    if (has_driver_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->driver_version(), output);
    }

    // optional string driver_date = 4;
    if (has_driver_date()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->driver_date(), output);
    }

    // optional string gl_vendor = 6;
    if (has_gl_vendor()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            6, this->gl_vendor(), output);
    }

    // optional string gl_renderer = 7;
    if (has_gl_renderer()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            7, this->gl_renderer(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Graphics)
}

int SystemProfileProto_Hardware_Graphics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Graphics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 63u) {
        // optional uint32 vendor_id = 1;
        if (has_vendor_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->vendor_id());
        }

        // optional uint32 device_id = 2;
        if (has_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->device_id());
        }

        // optional string driver_version = 3;
        if (has_driver_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->driver_version());
        }

        // optional string driver_date = 4;
        if (has_driver_date()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->driver_date());
        }

        // optional string gl_vendor = 6;
        if (has_gl_vendor()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->gl_vendor());
        }

        // optional string gl_renderer = 7;
        if (has_gl_renderer()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->gl_renderer());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware_Graphics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Graphics*>(&from));
}

void SystemProfileProto_Hardware_Graphics::MergeFrom(const SystemProfileProto_Hardware_Graphics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Graphics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_vendor_id()) {
            set_vendor_id(from.vendor_id());
        }
        if (from.has_device_id()) {
            set_device_id(from.device_id());
        }
        if (from.has_driver_version()) {
            set_has_driver_version();
            driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
        }
        if (from.has_driver_date()) {
            set_has_driver_date();
            driver_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
        }
        if (from.has_gl_vendor()) {
            set_has_gl_vendor();
            gl_vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gl_vendor_);
        }
        if (from.has_gl_renderer()) {
            set_has_gl_renderer();
            gl_renderer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gl_renderer_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware_Graphics::CopyFrom(const SystemProfileProto_Hardware_Graphics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Graphics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware_Graphics::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware_Graphics::Swap(SystemProfileProto_Hardware_Graphics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware_Graphics::InternalSwap(SystemProfileProto_Hardware_Graphics* other)
{
    std::swap(vendor_id_, other->vendor_id_);
    std::swap(device_id_, other->device_id_);
    driver_version_.Swap(&other->driver_version_);
    driver_date_.Swap(&other->driver_date_);
    gl_vendor_.Swap(&other->gl_vendor_);
    gl_renderer_.Swap(&other->gl_renderer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware_Graphics::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware.Graphics";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware_Bluetooth(
    SystemProfileProto_Hardware_Bluetooth* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware_Bluetooth_PairedDevice(
    SystemProfileProto_Hardware_Bluetooth_PairedDevice* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_UNKNOWN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_COMPUTER;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_PHONE;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_MODEM;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_AUDIO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_CAR_AUDIO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_VIDEO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_PERIPHERAL;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_JOYSTICK;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_GAMEPAD;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_KEYBOARD;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_MOUSE;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_TABLET;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::DEVICE_KEYBOARD_MOUSE_COMBO;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::Type_MIN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::Type_MAX;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VENDOR_ID_UNKNOWN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VENDOR_ID_BLUETOOTH;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VENDOR_ID_USB;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VendorIDSource_MIN;
const SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::VendorIDSource_MAX;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::VendorIDSource_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kBluetoothClassFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kTypeFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kVendorPrefixFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kVendorIdSourceFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kVendorIdFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kProductIdFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth_PairedDevice::kDeviceIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Bluetooth_PairedDevice::SystemProfileProto_Hardware_Bluetooth_PairedDevice()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::InitAsDefaultInstance()
{
}

SystemProfileProto_Hardware_Bluetooth_PairedDevice::SystemProfileProto_Hardware_Bluetooth_PairedDevice(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    bluetooth_class_ = 0u;
    type_ = 0;
    vendor_prefix_ = 0u;
    vendor_id_source_ = 0;
    vendor_id_ = 0u;
    product_id_ = 0u;
    device_id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware_Bluetooth_PairedDevice::~SystemProfileProto_Hardware_Bluetooth_PairedDevice()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    SharedDtor();
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware_Bluetooth_PairedDevice& SystemProfileProto_Hardware_Bluetooth_PairedDevice::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware_Bluetooth_PairedDevice* SystemProfileProto_Hardware_Bluetooth_PairedDevice::default_instance_ = NULL;

SystemProfileProto_Hardware_Bluetooth_PairedDevice* SystemProfileProto_Hardware_Bluetooth_PairedDevice::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware_Bluetooth_PairedDevice* n = new SystemProfileProto_Hardware_Bluetooth_PairedDevice;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                        \
    _Pragma("clang diagnostic push")                                                                                                         \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Hardware_Bluetooth_PairedDevice, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Hardware_Bluetooth_PairedDevice*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 127u) {
        ZR_(bluetooth_class_, device_id_);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware_Bluetooth_PairedDevice, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 bluetooth_class = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &bluetooth_class_)));
                set_has_bluetooth_class();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_type;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
        case 2: {
            if (tag == 16) {
            parse_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(value)) {
                    set_type(static_cast<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_vendor_prefix;
            break;
        }

        // optional uint32 vendor_prefix = 4;
        case 4: {
            if (tag == 32) {
            parse_vendor_prefix:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &vendor_prefix_)));
                set_has_vendor_prefix();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_vendor_id;
            break;
        }

        // optional uint32 vendor_id = 5;
        case 5: {
            if (tag == 40) {
            parse_vendor_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &vendor_id_)));
                set_has_vendor_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_product_id;
            break;
        }

        // optional uint32 product_id = 6;
        case 6: {
            if (tag == 48) {
            parse_product_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &product_id_)));
                set_has_product_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_device_id;
            break;
        }

        // optional uint32 device_id = 7;
        case 7: {
            if (tag == 56) {
            parse_device_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &device_id_)));
                set_has_device_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_vendor_id_source;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
        case 8: {
            if (tag == 64) {
            parse_vendor_id_source:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(value)) {
                    set_vendor_id_source(static_cast<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(64);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    // optional uint32 bluetooth_class = 1;
    if (has_bluetooth_class()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bluetooth_class(), output);
    }

    // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->type(), output);
    }

    // optional uint32 vendor_prefix = 4;
    if (has_vendor_prefix()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vendor_prefix(), output);
    }

    // optional uint32 vendor_id = 5;
    if (has_vendor_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vendor_id(), output);
    }

    // optional uint32 product_id = 6;
    if (has_product_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->product_id(), output);
    }

    // optional uint32 device_id = 7;
    if (has_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->device_id(), output);
    }

    // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
    if (has_vendor_id_source()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            8, this->vendor_id_source(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
}

int SystemProfileProto_Hardware_Bluetooth_PairedDevice::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 127u) {
        // optional uint32 bluetooth_class = 1;
        if (has_bluetooth_class()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->bluetooth_class());
        }

        // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        // optional uint32 vendor_prefix = 4;
        if (has_vendor_prefix()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->vendor_prefix());
        }

        // optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
        if (has_vendor_id_source()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->vendor_id_source());
        }

        // optional uint32 vendor_id = 5;
        if (has_vendor_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->vendor_id());
        }

        // optional uint32 product_id = 6;
        if (has_product_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->product_id());
        }

        // optional uint32 device_id = 7;
        if (has_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->device_id());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Bluetooth_PairedDevice*>(&from));
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::MergeFrom(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_bluetooth_class()) {
            set_bluetooth_class(from.bluetooth_class());
        }
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_vendor_prefix()) {
            set_vendor_prefix(from.vendor_prefix());
        }
        if (from.has_vendor_id_source()) {
            set_vendor_id_source(from.vendor_id_source());
        }
        if (from.has_vendor_id()) {
            set_vendor_id(from.vendor_id());
        }
        if (from.has_product_id()) {
            set_product_id(from.product_id());
        }
        if (from.has_device_id()) {
            set_device_id(from.device_id());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::CopyFrom(const SystemProfileProto_Hardware_Bluetooth_PairedDevice& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware_Bluetooth_PairedDevice::Swap(SystemProfileProto_Hardware_Bluetooth_PairedDevice* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::InternalSwap(SystemProfileProto_Hardware_Bluetooth_PairedDevice* other)
{
    std::swap(bluetooth_class_, other->bluetooth_class_);
    std::swap(type_, other->type_);
    std::swap(vendor_prefix_, other->vendor_prefix_);
    std::swap(vendor_id_source_, other->vendor_id_source_);
    std::swap(vendor_id_, other->vendor_id_);
    std::swap(product_id_, other->product_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware_Bluetooth_PairedDevice::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Bluetooth::kIsPresentFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth::kIsEnabledFieldNumber;
const int SystemProfileProto_Hardware_Bluetooth::kPairedDeviceFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Bluetooth::SystemProfileProto_Hardware_Bluetooth()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Bluetooth)
}

void SystemProfileProto_Hardware_Bluetooth::InitAsDefaultInstance()
{
}

SystemProfileProto_Hardware_Bluetooth::SystemProfileProto_Hardware_Bluetooth(const SystemProfileProto_Hardware_Bluetooth& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Bluetooth)
}

void SystemProfileProto_Hardware_Bluetooth::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    is_present_ = false;
    is_enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware_Bluetooth::~SystemProfileProto_Hardware_Bluetooth()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Bluetooth)
    SharedDtor();
}

void SystemProfileProto_Hardware_Bluetooth::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Hardware_Bluetooth::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware_Bluetooth& SystemProfileProto_Hardware_Bluetooth::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware_Bluetooth* SystemProfileProto_Hardware_Bluetooth::default_instance_ = NULL;

SystemProfileProto_Hardware_Bluetooth* SystemProfileProto_Hardware_Bluetooth::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware_Bluetooth* n = new SystemProfileProto_Hardware_Bluetooth;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware_Bluetooth::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Bluetooth)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                           \
    _Pragma("clang diagnostic push")                                                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Hardware_Bluetooth, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Hardware_Bluetooth*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(is_present_, is_enabled_);

#undef ZR_HELPER_
#undef ZR_

    paired_device_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware_Bluetooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware_Bluetooth, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Bluetooth)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool is_present = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_present_)));
                set_has_is_present();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_is_enabled;
            break;
        }

        // optional bool is_enabled = 2;
        case 2: {
            if (tag == 16) {
            parse_is_enabled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_enabled_)));
                set_has_is_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_paired_device;
            break;
        }

        // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
        case 3: {
            if (tag == 26) {
            parse_paired_device:
                DO_(input->IncrementRecursionDepth());
            parse_loop_paired_device:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_paired_device()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_loop_paired_device;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Bluetooth)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Bluetooth)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware_Bluetooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Bluetooth)
    // optional bool is_present = 1;
    if (has_is_present()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_present(), output);
    }

    // optional bool is_enabled = 2;
    if (has_is_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
    }

    // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
    for (unsigned int i = 0, n = this->paired_device_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, this->paired_device(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Bluetooth)
}

int SystemProfileProto_Hardware_Bluetooth::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Bluetooth)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional bool is_present = 1;
        if (has_is_present()) {
            total_size += 1 + 1;
        }

        // optional bool is_enabled = 2;
        if (has_is_enabled()) {
            total_size += 1 + 1;
        }
    }
    // repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
    total_size += 1 * this->paired_device_size();
    for (int i = 0; i < this->paired_device_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->paired_device(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware_Bluetooth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Bluetooth*>(&from));
}

void SystemProfileProto_Hardware_Bluetooth::MergeFrom(const SystemProfileProto_Hardware_Bluetooth& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Bluetooth)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    paired_device_.MergeFrom(from.paired_device_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_is_present()) {
            set_is_present(from.is_present());
        }
        if (from.has_is_enabled()) {
            set_is_enabled(from.is_enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware_Bluetooth::CopyFrom(const SystemProfileProto_Hardware_Bluetooth& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Bluetooth)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware_Bluetooth::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware_Bluetooth::Swap(SystemProfileProto_Hardware_Bluetooth* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware_Bluetooth::InternalSwap(SystemProfileProto_Hardware_Bluetooth* other)
{
    std::swap(is_present_, other->is_present_);
    std::swap(is_enabled_, other->is_enabled_);
    paired_device_.UnsafeArenaSwap(&other->paired_device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware_Bluetooth::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware.Bluetooth";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware_TouchScreen(
    SystemProfileProto_Hardware_TouchScreen* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_TouchScreen::kVendorIdFieldNumber;
const int SystemProfileProto_Hardware_TouchScreen::kProductIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_TouchScreen::SystemProfileProto_Hardware_TouchScreen()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.TouchScreen)
}

void SystemProfileProto_Hardware_TouchScreen::InitAsDefaultInstance()
{
}

SystemProfileProto_Hardware_TouchScreen::SystemProfileProto_Hardware_TouchScreen(const SystemProfileProto_Hardware_TouchScreen& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.TouchScreen)
}

void SystemProfileProto_Hardware_TouchScreen::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    vendor_id_ = 0u;
    product_id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware_TouchScreen::~SystemProfileProto_Hardware_TouchScreen()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.TouchScreen)
    SharedDtor();
}

void SystemProfileProto_Hardware_TouchScreen::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Hardware_TouchScreen::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware_TouchScreen& SystemProfileProto_Hardware_TouchScreen::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware_TouchScreen* SystemProfileProto_Hardware_TouchScreen::default_instance_ = NULL;

SystemProfileProto_Hardware_TouchScreen* SystemProfileProto_Hardware_TouchScreen::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware_TouchScreen* n = new SystemProfileProto_Hardware_TouchScreen;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware_TouchScreen::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.TouchScreen)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                             \
    _Pragma("clang diagnostic push")                                                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Hardware_TouchScreen, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Hardware_TouchScreen*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(vendor_id_, product_id_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware_TouchScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware_TouchScreen, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.TouchScreen)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 vendor_id = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &vendor_id_)));
                set_has_vendor_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_product_id;
            break;
        }

        // optional uint32 product_id = 2;
        case 2: {
            if (tag == 16) {
            parse_product_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &product_id_)));
                set_has_product_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.TouchScreen)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.TouchScreen)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware_TouchScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.TouchScreen)
    // optional uint32 vendor_id = 1;
    if (has_vendor_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
    }

    // optional uint32 product_id = 2;
    if (has_product_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->product_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.TouchScreen)
}

int SystemProfileProto_Hardware_TouchScreen::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.TouchScreen)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional uint32 vendor_id = 1;
        if (has_vendor_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->vendor_id());
        }

        // optional uint32 product_id = 2;
        if (has_product_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->product_id());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware_TouchScreen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_TouchScreen*>(&from));
}

void SystemProfileProto_Hardware_TouchScreen::MergeFrom(const SystemProfileProto_Hardware_TouchScreen& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.TouchScreen)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_vendor_id()) {
            set_vendor_id(from.vendor_id());
        }
        if (from.has_product_id()) {
            set_product_id(from.product_id());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware_TouchScreen::CopyFrom(const SystemProfileProto_Hardware_TouchScreen& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.TouchScreen)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware_TouchScreen::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware_TouchScreen::Swap(SystemProfileProto_Hardware_TouchScreen* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware_TouchScreen::InternalSwap(SystemProfileProto_Hardware_TouchScreen* other)
{
    std::swap(vendor_id_, other->vendor_id_);
    std::swap(product_id_, other->product_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware_TouchScreen::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware.TouchScreen";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Hardware_Drive(
    SystemProfileProto_Hardware_Drive* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware_Drive::kHasSeekPenaltyFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware_Drive::SystemProfileProto_Hardware_Drive()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware.Drive)
}

void SystemProfileProto_Hardware_Drive::InitAsDefaultInstance()
{
}

SystemProfileProto_Hardware_Drive::SystemProfileProto_Hardware_Drive(const SystemProfileProto_Hardware_Drive& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware.Drive)
}

void SystemProfileProto_Hardware_Drive::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    has_seek_penalty_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware_Drive::~SystemProfileProto_Hardware_Drive()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware.Drive)
    SharedDtor();
}

void SystemProfileProto_Hardware_Drive::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Hardware_Drive::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware_Drive& SystemProfileProto_Hardware_Drive::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware_Drive::default_instance_ = NULL;

SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware_Drive::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware_Drive* n = new SystemProfileProto_Hardware_Drive;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware_Drive::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware.Drive)
    has_seek_penalty_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware_Drive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware_Drive, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware.Drive)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool has_seek_penalty = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &has_seek_penalty_)));
                set_has_has_seek_penalty();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware.Drive)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware.Drive)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware_Drive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware.Drive)
    // optional bool has_seek_penalty = 1;
    if (has_has_seek_penalty()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_seek_penalty(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware.Drive)
}

int SystemProfileProto_Hardware_Drive::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware.Drive)
    int total_size = 0;

    // optional bool has_seek_penalty = 1;
    if (has_has_seek_penalty()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware_Drive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware_Drive*>(&from));
}

void SystemProfileProto_Hardware_Drive::MergeFrom(const SystemProfileProto_Hardware_Drive& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware.Drive)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_has_seek_penalty()) {
            set_has_seek_penalty(from.has_seek_penalty());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware_Drive::CopyFrom(const SystemProfileProto_Hardware_Drive& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware.Drive)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware_Drive::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware_Drive::Swap(SystemProfileProto_Hardware_Drive* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware_Drive::InternalSwap(SystemProfileProto_Hardware_Drive* other)
{
    std::swap(has_seek_penalty_, other->has_seek_penalty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware_Drive::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware.Drive";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Hardware::kCpuArchitectureFieldNumber;
const int SystemProfileProto_Hardware::kSystemRamMbFieldNumber;
const int SystemProfileProto_Hardware::kDllBaseFieldNumber;
const int SystemProfileProto_Hardware::kHardwareClassFieldNumber;
const int SystemProfileProto_Hardware::kScreenCountFieldNumber;
const int SystemProfileProto_Hardware::kPrimaryScreenWidthFieldNumber;
const int SystemProfileProto_Hardware::kPrimaryScreenHeightFieldNumber;
const int SystemProfileProto_Hardware::kPrimaryScreenScaleFactorFieldNumber;
const int SystemProfileProto_Hardware::kMaxDpiXFieldNumber;
const int SystemProfileProto_Hardware::kMaxDpiYFieldNumber;
const int SystemProfileProto_Hardware::kCpuFieldNumber;
const int SystemProfileProto_Hardware::kGpuFieldNumber;
const int SystemProfileProto_Hardware::kBluetoothFieldNumber;
const int SystemProfileProto_Hardware::kInternalDisplaySupportsTouchFieldNumber;
const int SystemProfileProto_Hardware::kExternalTouchscreenFieldNumber;
const int SystemProfileProto_Hardware::kAppDriveFieldNumber;
const int SystemProfileProto_Hardware::kUserDataDriveFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Hardware::SystemProfileProto_Hardware()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Hardware)
}

void SystemProfileProto_Hardware::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    cpu_ = const_cast<::metrics::SystemProfileProto_Hardware_CPU*>(
        ::metrics::SystemProfileProto_Hardware_CPU::internal_default_instance());
#else
    cpu_ = const_cast<::metrics::SystemProfileProto_Hardware_CPU*>(&::metrics::SystemProfileProto_Hardware_CPU::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    gpu_ = const_cast<::metrics::SystemProfileProto_Hardware_Graphics*>(
        ::metrics::SystemProfileProto_Hardware_Graphics::internal_default_instance());
#else
    gpu_ = const_cast<::metrics::SystemProfileProto_Hardware_Graphics*>(&::metrics::SystemProfileProto_Hardware_Graphics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    bluetooth_ = const_cast<::metrics::SystemProfileProto_Hardware_Bluetooth*>(
        ::metrics::SystemProfileProto_Hardware_Bluetooth::internal_default_instance());
#else
    bluetooth_ = const_cast<::metrics::SystemProfileProto_Hardware_Bluetooth*>(&::metrics::SystemProfileProto_Hardware_Bluetooth::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    app_drive_ = const_cast<::metrics::SystemProfileProto_Hardware_Drive*>(
        ::metrics::SystemProfileProto_Hardware_Drive::internal_default_instance());
#else
    app_drive_ = const_cast<::metrics::SystemProfileProto_Hardware_Drive*>(&::metrics::SystemProfileProto_Hardware_Drive::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    user_data_drive_ = const_cast<::metrics::SystemProfileProto_Hardware_Drive*>(
        ::metrics::SystemProfileProto_Hardware_Drive::internal_default_instance());
#else
    user_data_drive_ = const_cast<::metrics::SystemProfileProto_Hardware_Drive*>(&::metrics::SystemProfileProto_Hardware_Drive::default_instance());
#endif
}

SystemProfileProto_Hardware::SystemProfileProto_Hardware(const SystemProfileProto_Hardware& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Hardware)
}

void SystemProfileProto_Hardware::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cpu_architecture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    system_ram_mb_ = GOOGLE_LONGLONG(0);
    dll_base_ = GOOGLE_LONGLONG(0);
    hardware_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    screen_count_ = 0;
    primary_screen_width_ = 0;
    primary_screen_height_ = 0;
    primary_screen_scale_factor_ = 0;
    max_dpi_x_ = 0;
    max_dpi_y_ = 0;
    cpu_ = NULL;
    gpu_ = NULL;
    bluetooth_ = NULL;
    internal_display_supports_touch_ = false;
    app_drive_ = NULL;
    user_data_drive_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Hardware::~SystemProfileProto_Hardware()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Hardware)
    SharedDtor();
}

void SystemProfileProto_Hardware::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cpu_architecture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    hardware_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete cpu_;
        delete gpu_;
        delete bluetooth_;
        delete app_drive_;
        delete user_data_drive_;
    }
}

void SystemProfileProto_Hardware::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Hardware& SystemProfileProto_Hardware::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Hardware* SystemProfileProto_Hardware::default_instance_ = NULL;

SystemProfileProto_Hardware* SystemProfileProto_Hardware::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Hardware* n = new SystemProfileProto_Hardware;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Hardware::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Hardware)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                 \
    _Pragma("clang diagnostic push")                                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Hardware, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Hardware*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(system_ram_mb_, dll_base_);
        ZR_(screen_count_, primary_screen_scale_factor_);
        if (has_cpu_architecture()) {
            cpu_architecture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_hardware_class()) {
            hardware_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (_has_bits_[8 / 32] & 48896u) {
        ZR_(max_dpi_x_, max_dpi_y_);
        if (has_cpu()) {
            if (cpu_ != NULL)
                cpu_->::metrics::SystemProfileProto_Hardware_CPU::Clear();
        }
        if (has_gpu()) {
            if (gpu_ != NULL)
                gpu_->::metrics::SystemProfileProto_Hardware_Graphics::Clear();
        }
        if (has_bluetooth()) {
            if (bluetooth_ != NULL)
                bluetooth_->::metrics::SystemProfileProto_Hardware_Bluetooth::Clear();
        }
        internal_display_supports_touch_ = false;
        if (has_app_drive()) {
            if (app_drive_ != NULL)
                app_drive_->::metrics::SystemProfileProto_Hardware_Drive::Clear();
        }
    }
    if (has_user_data_drive()) {
        if (user_data_drive_ != NULL)
            user_data_drive_->::metrics::SystemProfileProto_Hardware_Drive::Clear();
    }

#undef ZR_HELPER_
#undef ZR_

    external_touchscreen_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Hardware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Hardware, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Hardware)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string cpu_architecture = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_cpu_architecture()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_system_ram_mb;
            break;
        }

        // optional int64 system_ram_mb = 2;
        case 2: {
            if (tag == 16) {
            parse_system_ram_mb:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &system_ram_mb_)));
                set_has_system_ram_mb();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_dll_base;
            break;
        }

        // optional int64 dll_base = 3;
        case 3: {
            if (tag == 24) {
            parse_dll_base:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &dll_base_)));
                set_has_dll_base();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_hardware_class;
            break;
        }

        // optional string hardware_class = 4;
        case 4: {
            if (tag == 34) {
            parse_hardware_class:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_hardware_class()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_screen_count;
            break;
        }

        // optional int32 screen_count = 5;
        case 5: {
            if (tag == 40) {
            parse_screen_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &screen_count_)));
                set_has_screen_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_primary_screen_width;
            break;
        }

        // optional int32 primary_screen_width = 6;
        case 6: {
            if (tag == 48) {
            parse_primary_screen_width:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &primary_screen_width_)));
                set_has_primary_screen_width();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_primary_screen_height;
            break;
        }

        // optional int32 primary_screen_height = 7;
        case 7: {
            if (tag == 56) {
            parse_primary_screen_height:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &primary_screen_height_)));
                set_has_primary_screen_height();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_gpu;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
        case 8: {
            if (tag == 66) {
            parse_gpu:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_gpu()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(77))
                goto parse_max_dpi_x;
            break;
        }

        // optional float max_dpi_x = 9;
        case 9: {
            if (tag == 77) {
            parse_max_dpi_x:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &max_dpi_x_)));
                set_has_max_dpi_x();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(85))
                goto parse_max_dpi_y;
            break;
        }

        // optional float max_dpi_y = 10;
        case 10: {
            if (tag == 85) {
            parse_max_dpi_y:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &max_dpi_y_)));
                set_has_max_dpi_y();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_bluetooth;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
        case 11: {
            if (tag == 90) {
            parse_bluetooth:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_bluetooth()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(101))
                goto parse_primary_screen_scale_factor;
            break;
        }

        // optional float primary_screen_scale_factor = 12;
        case 12: {
            if (tag == 101) {
            parse_primary_screen_scale_factor:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                    input, &primary_screen_scale_factor_)));
                set_has_primary_screen_scale_factor();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_cpu;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
        case 13: {
            if (tag == 106) {
            parse_cpu:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_cpu()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(112))
                goto parse_internal_display_supports_touch;
            break;
        }

        // optional bool internal_display_supports_touch = 14;
        case 14: {
            if (tag == 112) {
            parse_internal_display_supports_touch:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &internal_display_supports_touch_)));
                set_has_internal_display_supports_touch();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_external_touchscreen;
            break;
        }

        // repeated .metrics.SystemProfileProto.Hardware.TouchScreen external_touchscreen = 15;
        case 15: {
            if (tag == 122) {
            parse_external_touchscreen:
                DO_(input->IncrementRecursionDepth());
            parse_loop_external_touchscreen:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_external_touchscreen()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_loop_external_touchscreen;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(130))
                goto parse_app_drive;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
        case 16: {
            if (tag == 130) {
            parse_app_drive:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_app_drive()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(138))
                goto parse_user_data_drive;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
        case 17: {
            if (tag == 138) {
            parse_user_data_drive:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_user_data_drive()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Hardware)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Hardware)
    return false;
#undef DO_
}

void SystemProfileProto_Hardware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Hardware)
    // optional string cpu_architecture = 1;
    if (has_cpu_architecture()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->cpu_architecture(), output);
    }

    // optional int64 system_ram_mb = 2;
    if (has_system_ram_mb()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->system_ram_mb(), output);
    }

    // optional int64 dll_base = 3;
    if (has_dll_base()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->dll_base(), output);
    }

    // optional string hardware_class = 4;
    if (has_hardware_class()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->hardware_class(), output);
    }

    // optional int32 screen_count = 5;
    if (has_screen_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->screen_count(), output);
    }

    // optional int32 primary_screen_width = 6;
    if (has_primary_screen_width()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->primary_screen_width(), output);
    }

    // optional int32 primary_screen_height = 7;
    if (has_primary_screen_height()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->primary_screen_height(), output);
    }

    // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
    if (has_gpu()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->gpu_, output);
    }

    // optional float max_dpi_x = 9;
    if (has_max_dpi_x()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_dpi_x(), output);
    }

    // optional float max_dpi_y = 10;
    if (has_max_dpi_y()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->max_dpi_y(), output);
    }

    // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
    if (has_bluetooth()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *this->bluetooth_, output);
    }

    // optional float primary_screen_scale_factor = 12;
    if (has_primary_screen_scale_factor()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->primary_screen_scale_factor(), output);
    }

    // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
    if (has_cpu()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *this->cpu_, output);
    }

    // optional bool internal_display_supports_touch = 14;
    if (has_internal_display_supports_touch()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->internal_display_supports_touch(), output);
    }

    // repeated .metrics.SystemProfileProto.Hardware.TouchScreen external_touchscreen = 15;
    for (unsigned int i = 0, n = this->external_touchscreen_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            15, this->external_touchscreen(i), output);
    }

    // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
    if (has_app_drive()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            16, *this->app_drive_, output);
    }

    // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
    if (has_user_data_drive()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            17, *this->user_data_drive_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Hardware)
}

int SystemProfileProto_Hardware::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Hardware)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional string cpu_architecture = 1;
        if (has_cpu_architecture()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->cpu_architecture());
        }

        // optional int64 system_ram_mb = 2;
        if (has_system_ram_mb()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->system_ram_mb());
        }

        // optional int64 dll_base = 3;
        if (has_dll_base()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->dll_base());
        }

        // optional string hardware_class = 4;
        if (has_hardware_class()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->hardware_class());
        }

        // optional int32 screen_count = 5;
        if (has_screen_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->screen_count());
        }

        // optional int32 primary_screen_width = 6;
        if (has_primary_screen_width()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->primary_screen_width());
        }

        // optional int32 primary_screen_height = 7;
        if (has_primary_screen_height()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->primary_screen_height());
        }

        // optional float primary_screen_scale_factor = 12;
        if (has_primary_screen_scale_factor()) {
            total_size += 1 + 4;
        }
    }
    if (_has_bits_[8 / 32] & 48896u) {
        // optional float max_dpi_x = 9;
        if (has_max_dpi_x()) {
            total_size += 1 + 4;
        }

        // optional float max_dpi_y = 10;
        if (has_max_dpi_y()) {
            total_size += 1 + 4;
        }

        // optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
        if (has_cpu()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->cpu_);
        }

        // optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
        if (has_gpu()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->gpu_);
        }

        // optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
        if (has_bluetooth()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->bluetooth_);
        }

        // optional bool internal_display_supports_touch = 14;
        if (has_internal_display_supports_touch()) {
            total_size += 1 + 1;
        }

        // optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
        if (has_app_drive()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->app_drive_);
        }
    }
    // optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
    if (has_user_data_drive()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->user_data_drive_);
    }

    // repeated .metrics.SystemProfileProto.Hardware.TouchScreen external_touchscreen = 15;
    total_size += 1 * this->external_touchscreen_size();
    for (int i = 0; i < this->external_touchscreen_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->external_touchscreen(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Hardware::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Hardware*>(&from));
}

void SystemProfileProto_Hardware::MergeFrom(const SystemProfileProto_Hardware& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Hardware)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    external_touchscreen_.MergeFrom(from.external_touchscreen_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_cpu_architecture()) {
            set_has_cpu_architecture();
            cpu_architecture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_architecture_);
        }
        if (from.has_system_ram_mb()) {
            set_system_ram_mb(from.system_ram_mb());
        }
        if (from.has_dll_base()) {
            set_dll_base(from.dll_base());
        }
        if (from.has_hardware_class()) {
            set_has_hardware_class();
            hardware_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_class_);
        }
        if (from.has_screen_count()) {
            set_screen_count(from.screen_count());
        }
        if (from.has_primary_screen_width()) {
            set_primary_screen_width(from.primary_screen_width());
        }
        if (from.has_primary_screen_height()) {
            set_primary_screen_height(from.primary_screen_height());
        }
        if (from.has_primary_screen_scale_factor()) {
            set_primary_screen_scale_factor(from.primary_screen_scale_factor());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_max_dpi_x()) {
            set_max_dpi_x(from.max_dpi_x());
        }
        if (from.has_max_dpi_y()) {
            set_max_dpi_y(from.max_dpi_y());
        }
        if (from.has_cpu()) {
            mutable_cpu()->::metrics::SystemProfileProto_Hardware_CPU::MergeFrom(from.cpu());
        }
        if (from.has_gpu()) {
            mutable_gpu()->::metrics::SystemProfileProto_Hardware_Graphics::MergeFrom(from.gpu());
        }
        if (from.has_bluetooth()) {
            mutable_bluetooth()->::metrics::SystemProfileProto_Hardware_Bluetooth::MergeFrom(from.bluetooth());
        }
        if (from.has_internal_display_supports_touch()) {
            set_internal_display_supports_touch(from.internal_display_supports_touch());
        }
        if (from.has_app_drive()) {
            mutable_app_drive()->::metrics::SystemProfileProto_Hardware_Drive::MergeFrom(from.app_drive());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_user_data_drive()) {
            mutable_user_data_drive()->::metrics::SystemProfileProto_Hardware_Drive::MergeFrom(from.user_data_drive());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Hardware::CopyFrom(const SystemProfileProto_Hardware& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Hardware)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Hardware::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Hardware::Swap(SystemProfileProto_Hardware* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Hardware::InternalSwap(SystemProfileProto_Hardware* other)
{
    cpu_architecture_.Swap(&other->cpu_architecture_);
    std::swap(system_ram_mb_, other->system_ram_mb_);
    std::swap(dll_base_, other->dll_base_);
    hardware_class_.Swap(&other->hardware_class_);
    std::swap(screen_count_, other->screen_count_);
    std::swap(primary_screen_width_, other->primary_screen_width_);
    std::swap(primary_screen_height_, other->primary_screen_height_);
    std::swap(primary_screen_scale_factor_, other->primary_screen_scale_factor_);
    std::swap(max_dpi_x_, other->max_dpi_x_);
    std::swap(max_dpi_y_, other->max_dpi_y_);
    std::swap(cpu_, other->cpu_);
    std::swap(gpu_, other->gpu_);
    std::swap(bluetooth_, other->bluetooth_);
    std::swap(internal_display_supports_touch_, other->internal_display_supports_touch_);
    external_touchscreen_.UnsafeArenaSwap(&other->external_touchscreen_);
    std::swap(app_drive_, other->app_drive_);
    std::swap(user_data_drive_, other->user_data_drive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Hardware::GetTypeName() const
{
    return "metrics.SystemProfileProto.Hardware";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Network(
    SystemProfileProto_Network* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_Network_ConnectionType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_UNKNOWN;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_ETHERNET;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_WIFI;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_2G;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_3G;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_4G;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_BLUETOOTH;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_NONE;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::CONNECTION_AMBIGUOUS;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::ConnectionType_MIN;
const SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::ConnectionType_MAX;
const int SystemProfileProto_Network::ConnectionType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_NONE;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_ANCIENT;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_A;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_B;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_G;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_N;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WIFI_PHY_LAYER_PROTOCOL_UNKNOWN;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WifiPHYLayerProtocol_MIN;
const SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::WifiPHYLayerProtocol_MAX;
const int SystemProfileProto_Network::WifiPHYLayerProtocol_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_Network_EffectiveConnectionType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_AMBIGUOUS;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_OFFLINE;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_SLOW_2G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_2G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_3G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EFFECTIVE_CONNECTION_TYPE_4G;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EffectiveConnectionType_MIN;
const SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::EffectiveConnectionType_MAX;
const int SystemProfileProto_Network::EffectiveConnectionType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForSystemProfileProto_Network_WifiAccessPoint(
    SystemProfileProto_Network_WifiAccessPoint* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_UNKNOWN;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_WPA;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_WEP;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_RSN;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_802_1X;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_PSK;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SECURITY_NONE;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SecurityMode_MIN;
const SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::SecurityMode_MAX;
const int SystemProfileProto_Network_WifiAccessPoint::SecurityMode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForSystemProfileProto_Network_WifiAccessPoint_VendorInformation(
    SystemProfileProto_Network_WifiAccessPoint_VendorInformation* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kModelNumberFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kModelNameFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kDeviceNameFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::kElementIdentifierFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SystemProfileProto_Network_WifiAccessPoint_VendorInformation()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::InitAsDefaultInstance()
{
}

SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SystemProfileProto_Network_WifiAccessPoint_VendorInformation(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Network_WifiAccessPoint_VendorInformation::~SystemProfileProto_Network_WifiAccessPoint_VendorInformation()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    SharedDtor();
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Network_WifiAccessPoint_VendorInformation* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance_ = NULL;

SystemProfileProto_Network_WifiAccessPoint_VendorInformation* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Network_WifiAccessPoint_VendorInformation* n = new SystemProfileProto_Network_WifiAccessPoint_VendorInformation;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    if (_has_bits_[0 / 32] & 7u) {
        if (has_model_number()) {
            model_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_model_name()) {
            model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_device_name()) {
            device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    element_identifier_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Network_WifiAccessPoint_VendorInformation, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string model_number = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_model_number()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_model_name;
            break;
        }

        // optional string model_name = 2;
        case 2: {
            if (tag == 18) {
            parse_model_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_model_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_device_name;
            break;
        }

        // optional string device_name = 3;
        case 3: {
            if (tag == 26) {
            parse_device_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_element_identifier;
            break;
        }

        // repeated uint32 element_identifier = 4;
        case 4: {
            if (tag == 32) {
            parse_element_identifier:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    1, 32, input, this->mutable_element_identifier())));
            } else if (tag == 34) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, this->mutable_element_identifier())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_element_identifier;
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    return false;
#undef DO_
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    // optional string model_number = 1;
    if (has_model_number()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->model_number(), output);
    }

    // optional string model_name = 2;
    if (has_model_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->model_name(), output);
    }

    // optional string device_name = 3;
    if (has_device_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->device_name(), output);
    }

    // repeated uint32 element_identifier = 4;
    for (int i = 0; i < this->element_identifier_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
            4, this->element_identifier(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
}

int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional string model_number = 1;
        if (has_model_number()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->model_number());
        }

        // optional string model_name = 2;
        if (has_model_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->model_name());
        }

        // optional string device_name = 3;
        if (has_device_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_name());
        }
    }
    // repeated uint32 element_identifier = 4;
    {
        int data_size = 0;
        for (int i = 0; i < this->element_identifier_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                UInt32Size(this->element_identifier(i));
        }
        total_size += 1 * this->element_identifier_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(&from));
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::MergeFrom(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    element_identifier_.MergeFrom(from.element_identifier_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_model_number()) {
            set_has_model_number();
            model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
        }
        if (from.has_model_name()) {
            set_has_model_name();
            model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
        }
        if (from.has_device_name()) {
            set_has_device_name();
            device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::CopyFrom(const SystemProfileProto_Network_WifiAccessPoint_VendorInformation& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::Swap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::InternalSwap(SystemProfileProto_Network_WifiAccessPoint_VendorInformation* other)
{
    model_number_.Swap(&other->model_number_);
    model_name_.Swap(&other->model_name_);
    device_name_.Swap(&other->device_name_);
    element_identifier_.UnsafeArenaSwap(&other->element_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Network_WifiAccessPoint_VendorInformation::GetTypeName() const
{
    return "metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Network_WifiAccessPoint::kVendorPrefixFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint::kSecurityModeFieldNumber;
const int SystemProfileProto_Network_WifiAccessPoint::kVendorInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Network_WifiAccessPoint::SystemProfileProto_Network_WifiAccessPoint()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Network.WifiAccessPoint)
}

void SystemProfileProto_Network_WifiAccessPoint::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    vendor_info_ = const_cast<::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(
        ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::internal_default_instance());
#else
    vendor_info_ = const_cast<::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation*>(&::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::default_instance());
#endif
}

SystemProfileProto_Network_WifiAccessPoint::SystemProfileProto_Network_WifiAccessPoint(const SystemProfileProto_Network_WifiAccessPoint& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Network.WifiAccessPoint)
}

void SystemProfileProto_Network_WifiAccessPoint::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    vendor_prefix_ = 0u;
    security_mode_ = 0;
    vendor_info_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Network_WifiAccessPoint::~SystemProfileProto_Network_WifiAccessPoint()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Network.WifiAccessPoint)
    SharedDtor();
}

void SystemProfileProto_Network_WifiAccessPoint::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete vendor_info_;
    }
}

void SystemProfileProto_Network_WifiAccessPoint::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Network_WifiAccessPoint& SystemProfileProto_Network_WifiAccessPoint::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Network_WifiAccessPoint* SystemProfileProto_Network_WifiAccessPoint::default_instance_ = NULL;

SystemProfileProto_Network_WifiAccessPoint* SystemProfileProto_Network_WifiAccessPoint::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Network_WifiAccessPoint* n = new SystemProfileProto_Network_WifiAccessPoint;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Network_WifiAccessPoint::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                \
    _Pragma("clang diagnostic push")                                                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Network_WifiAccessPoint, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Network_WifiAccessPoint*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 7u) {
        ZR_(vendor_prefix_, security_mode_);
        if (has_vendor_info()) {
            if (vendor_info_ != NULL)
                vendor_info_->::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Network_WifiAccessPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Network_WifiAccessPoint, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional uint32 vendor_prefix = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &vendor_prefix_)));
                set_has_vendor_prefix();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_security_mode;
            break;
        }

        // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
        case 2: {
            if (tag == 16) {
            parse_security_mode:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(value)) {
                    set_security_mode(static_cast<::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_vendor_info;
            break;
        }

        // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
        case 3: {
            if (tag == 26) {
            parse_vendor_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_vendor_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Network.WifiAccessPoint)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Network.WifiAccessPoint)
    return false;
#undef DO_
}

void SystemProfileProto_Network_WifiAccessPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
    // optional uint32 vendor_prefix = 1;
    if (has_vendor_prefix()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_prefix(), output);
    }

    // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
    if (has_security_mode()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->security_mode(), output);
    }

    // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
    if (has_vendor_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->vendor_info_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Network.WifiAccessPoint)
}

int SystemProfileProto_Network_WifiAccessPoint::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional uint32 vendor_prefix = 1;
        if (has_vendor_prefix()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->vendor_prefix());
        }

        // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
        if (has_security_mode()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_mode());
        }

        // optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
        if (has_vendor_info()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->vendor_info_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Network_WifiAccessPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Network_WifiAccessPoint*>(&from));
}

void SystemProfileProto_Network_WifiAccessPoint::MergeFrom(const SystemProfileProto_Network_WifiAccessPoint& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_vendor_prefix()) {
            set_vendor_prefix(from.vendor_prefix());
        }
        if (from.has_security_mode()) {
            set_security_mode(from.security_mode());
        }
        if (from.has_vendor_info()) {
            mutable_vendor_info()->::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::MergeFrom(from.vendor_info());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Network_WifiAccessPoint::CopyFrom(const SystemProfileProto_Network_WifiAccessPoint& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Network.WifiAccessPoint)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Network_WifiAccessPoint::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Network_WifiAccessPoint::Swap(SystemProfileProto_Network_WifiAccessPoint* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Network_WifiAccessPoint::InternalSwap(SystemProfileProto_Network_WifiAccessPoint* other)
{
    std::swap(vendor_prefix_, other->vendor_prefix_);
    std::swap(security_mode_, other->security_mode_);
    std::swap(vendor_info_, other->vendor_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Network_WifiAccessPoint::GetTypeName() const
{
    return "metrics.SystemProfileProto.Network.WifiAccessPoint";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Network::kConnectionTypeIsAmbiguousFieldNumber;
const int SystemProfileProto_Network::kConnectionTypeFieldNumber;
const int SystemProfileProto_Network::kWifiPhyLayerProtocolIsAmbiguousFieldNumber;
const int SystemProfileProto_Network::kWifiPhyLayerProtocolFieldNumber;
const int SystemProfileProto_Network::kAccessPointInfoFieldNumber;
const int SystemProfileProto_Network::kEffectiveConnectionTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Network::SystemProfileProto_Network()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Network)
}

void SystemProfileProto_Network::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    access_point_info_ = const_cast<::metrics::SystemProfileProto_Network_WifiAccessPoint*>(
        ::metrics::SystemProfileProto_Network_WifiAccessPoint::internal_default_instance());
#else
    access_point_info_ = const_cast<::metrics::SystemProfileProto_Network_WifiAccessPoint*>(&::metrics::SystemProfileProto_Network_WifiAccessPoint::default_instance());
#endif
}

SystemProfileProto_Network::SystemProfileProto_Network(const SystemProfileProto_Network& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Network)
}

void SystemProfileProto_Network::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    connection_type_is_ambiguous_ = false;
    connection_type_ = 0;
    wifi_phy_layer_protocol_is_ambiguous_ = false;
    wifi_phy_layer_protocol_ = 0;
    access_point_info_ = NULL;
    effective_connection_type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Network::~SystemProfileProto_Network()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Network)
    SharedDtor();
}

void SystemProfileProto_Network::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete access_point_info_;
    }
}

void SystemProfileProto_Network::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Network& SystemProfileProto_Network::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Network* SystemProfileProto_Network::default_instance_ = NULL;

SystemProfileProto_Network* SystemProfileProto_Network::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Network* n = new SystemProfileProto_Network;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Network::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Network)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                \
    _Pragma("clang diagnostic push")                                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Network, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Network*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 63u) {
        ZR_(connection_type_, wifi_phy_layer_protocol_is_ambiguous_);
        ZR_(wifi_phy_layer_protocol_, effective_connection_type_);
        if (has_access_point_info()) {
            if (access_point_info_ != NULL)
                access_point_info_->::metrics::SystemProfileProto_Network_WifiAccessPoint::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Network, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Network)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool connection_type_is_ambiguous = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &connection_type_is_ambiguous_)));
                set_has_connection_type_is_ambiguous();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_connection_type;
            break;
        }

        // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
        case 2: {
            if (tag == 16) {
            parse_connection_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Network_ConnectionType_IsValid(value)) {
                    set_connection_type(static_cast<::metrics::SystemProfileProto_Network_ConnectionType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_wifi_phy_layer_protocol_is_ambiguous;
            break;
        }

        // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
        case 3: {
            if (tag == 24) {
            parse_wifi_phy_layer_protocol_is_ambiguous:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &wifi_phy_layer_protocol_is_ambiguous_)));
                set_has_wifi_phy_layer_protocol_is_ambiguous();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_wifi_phy_layer_protocol;
            break;
        }

        // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
        case 4: {
            if (tag == 32) {
            parse_wifi_phy_layer_protocol:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(value)) {
                    set_wifi_phy_layer_protocol(static_cast<::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(32);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_access_point_info;
            break;
        }

        // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
        case 5: {
            if (tag == 42) {
            parse_access_point_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_access_point_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_effective_connection_type;
            break;
        }

        // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType effective_connection_type = 6;
        case 6: {
            if (tag == 48) {
            parse_effective_connection_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value)) {
                    set_effective_connection_type(static_cast<::metrics::SystemProfileProto_Network_EffectiveConnectionType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(48);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Network)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Network)
    return false;
#undef DO_
}

void SystemProfileProto_Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Network)
    // optional bool connection_type_is_ambiguous = 1;
    if (has_connection_type_is_ambiguous()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connection_type_is_ambiguous(), output);
    }

    // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
    if (has_connection_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->connection_type(), output);
    }

    // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
    if (has_wifi_phy_layer_protocol_is_ambiguous()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wifi_phy_layer_protocol_is_ambiguous(), output);
    }

    // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
    if (has_wifi_phy_layer_protocol()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            4, this->wifi_phy_layer_protocol(), output);
    }

    // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
    if (has_access_point_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->access_point_info_, output);
    }

    // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType effective_connection_type = 6;
    if (has_effective_connection_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            6, this->effective_connection_type(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Network)
}

int SystemProfileProto_Network::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Network)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 63u) {
        // optional bool connection_type_is_ambiguous = 1;
        if (has_connection_type_is_ambiguous()) {
            total_size += 1 + 1;
        }

        // optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
        if (has_connection_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
        }

        // optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
        if (has_wifi_phy_layer_protocol_is_ambiguous()) {
            total_size += 1 + 1;
        }

        // optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
        if (has_wifi_phy_layer_protocol()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->wifi_phy_layer_protocol());
        }

        // optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
        if (has_access_point_info()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->access_point_info_);
        }

        // optional .metrics.SystemProfileProto.Network.EffectiveConnectionType effective_connection_type = 6;
        if (has_effective_connection_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->effective_connection_type());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Network::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Network*>(&from));
}

void SystemProfileProto_Network::MergeFrom(const SystemProfileProto_Network& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Network)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_connection_type_is_ambiguous()) {
            set_connection_type_is_ambiguous(from.connection_type_is_ambiguous());
        }
        if (from.has_connection_type()) {
            set_connection_type(from.connection_type());
        }
        if (from.has_wifi_phy_layer_protocol_is_ambiguous()) {
            set_wifi_phy_layer_protocol_is_ambiguous(from.wifi_phy_layer_protocol_is_ambiguous());
        }
        if (from.has_wifi_phy_layer_protocol()) {
            set_wifi_phy_layer_protocol(from.wifi_phy_layer_protocol());
        }
        if (from.has_access_point_info()) {
            mutable_access_point_info()->::metrics::SystemProfileProto_Network_WifiAccessPoint::MergeFrom(from.access_point_info());
        }
        if (from.has_effective_connection_type()) {
            set_effective_connection_type(from.effective_connection_type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Network::CopyFrom(const SystemProfileProto_Network& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Network)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Network::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Network::Swap(SystemProfileProto_Network* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Network::InternalSwap(SystemProfileProto_Network* other)
{
    std::swap(connection_type_is_ambiguous_, other->connection_type_is_ambiguous_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(wifi_phy_layer_protocol_is_ambiguous_, other->wifi_phy_layer_protocol_is_ambiguous_);
    std::swap(wifi_phy_layer_protocol_, other->wifi_phy_layer_protocol_);
    std::swap(access_point_info_, other->access_point_info_);
    std::swap(effective_connection_type_, other->effective_connection_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Network::GetTypeName() const
{
    return "metrics.SystemProfileProto.Network";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_GoogleUpdate(
    SystemProfileProto_GoogleUpdate* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSystemProfileProto_GoogleUpdate_ProductInfo(
    SystemProfileProto_GoogleUpdate_ProductInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_SUCCESS;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_FAILED_CUSTOM_ERROR;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_FAILED_MSI_ERROR;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_FAILED_SYSTEM_ERROR;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::INSTALL_RESULT_EXIT_CODE;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::InstallResult_MIN;
const SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::InstallResult_MAX;
const int SystemProfileProto_GoogleUpdate_ProductInfo::InstallResult_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_GoogleUpdate_ProductInfo::kVersionFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastUpdateSuccessTimestampFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastResultFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastErrorFieldNumber;
const int SystemProfileProto_GoogleUpdate_ProductInfo::kLastExtraErrorFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_GoogleUpdate_ProductInfo::SystemProfileProto_GoogleUpdate_ProductInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
}

void SystemProfileProto_GoogleUpdate_ProductInfo::InitAsDefaultInstance()
{
}

SystemProfileProto_GoogleUpdate_ProductInfo::SystemProfileProto_GoogleUpdate_ProductInfo(const SystemProfileProto_GoogleUpdate_ProductInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    last_update_success_timestamp_ = GOOGLE_LONGLONG(0);
    last_result_ = 0;
    last_error_ = 0;
    last_extra_error_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_GoogleUpdate_ProductInfo::~SystemProfileProto_GoogleUpdate_ProductInfo()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    SharedDtor();
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_GoogleUpdate_ProductInfo& SystemProfileProto_GoogleUpdate_ProductInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate_ProductInfo::default_instance_ = NULL;

SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate_ProductInfo::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_GoogleUpdate_ProductInfo* n = new SystemProfileProto_GoogleUpdate_ProductInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_GoogleUpdate_ProductInfo::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                 \
    _Pragma("clang diagnostic push")                                                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_GoogleUpdate_ProductInfo, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_GoogleUpdate_ProductInfo*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(last_update_success_timestamp_, last_extra_error_);
        if (has_version()) {
            version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_GoogleUpdate_ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_GoogleUpdate_ProductInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string version = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_last_update_success_timestamp;
            break;
        }

        // optional int64 last_update_success_timestamp = 2;
        case 2: {
            if (tag == 16) {
            parse_last_update_success_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &last_update_success_timestamp_)));
                set_has_last_update_success_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_last_result;
            break;
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
        case 3: {
            if (tag == 24) {
            parse_last_result:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(value)) {
                    set_last_result(static_cast<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(24);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_last_error;
            break;
        }

        // optional int32 last_error = 4;
        case 4: {
            if (tag == 32) {
            parse_last_error:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &last_error_)));
                set_has_last_error();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_last_extra_error;
            break;
        }

        // optional int32 last_extra_error = 5;
        case 5: {
            if (tag == 40) {
            parse_last_extra_error:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &last_extra_error_)));
                set_has_last_extra_error();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    return false;
#undef DO_
}

void SystemProfileProto_GoogleUpdate_ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    // optional string version = 1;
    if (has_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->version(), output);
    }

    // optional int64 last_update_success_timestamp = 2;
    if (has_last_update_success_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_update_success_timestamp(), output);
    }

    // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
    if (has_last_result()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            3, this->last_result(), output);
    }

    // optional int32 last_error = 4;
    if (has_last_error()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_error(), output);
    }

    // optional int32 last_extra_error = 5;
    if (has_last_extra_error()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->last_extra_error(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
}

int SystemProfileProto_GoogleUpdate_ProductInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string version = 1;
        if (has_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->version());
        }

        // optional int64 last_update_success_timestamp = 2;
        if (has_last_update_success_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_update_success_timestamp());
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
        if (has_last_result()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_result());
        }

        // optional int32 last_error = 4;
        if (has_last_error()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->last_error());
        }

        // optional int32 last_extra_error = 5;
        if (has_last_extra_error()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->last_extra_error());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_GoogleUpdate_ProductInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_GoogleUpdate_ProductInfo*>(&from));
}

void SystemProfileProto_GoogleUpdate_ProductInfo::MergeFrom(const SystemProfileProto_GoogleUpdate_ProductInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_version()) {
            set_has_version();
            version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
        }
        if (from.has_last_update_success_timestamp()) {
            set_last_update_success_timestamp(from.last_update_success_timestamp());
        }
        if (from.has_last_result()) {
            set_last_result(from.last_result());
        }
        if (from.has_last_error()) {
            set_last_error(from.last_error());
        }
        if (from.has_last_extra_error()) {
            set_last_extra_error(from.last_extra_error());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_GoogleUpdate_ProductInfo::CopyFrom(const SystemProfileProto_GoogleUpdate_ProductInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.GoogleUpdate.ProductInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_GoogleUpdate_ProductInfo::IsInitialized() const
{

    return true;
}

void SystemProfileProto_GoogleUpdate_ProductInfo::Swap(SystemProfileProto_GoogleUpdate_ProductInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_GoogleUpdate_ProductInfo::InternalSwap(SystemProfileProto_GoogleUpdate_ProductInfo* other)
{
    version_.Swap(&other->version_);
    std::swap(last_update_success_timestamp_, other->last_update_success_timestamp_);
    std::swap(last_result_, other->last_result_);
    std::swap(last_error_, other->last_error_);
    std::swap(last_extra_error_, other->last_extra_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_GoogleUpdate_ProductInfo::GetTypeName() const
{
    return "metrics.SystemProfileProto.GoogleUpdate.ProductInfo";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_GoogleUpdate::kIsSystemInstallFieldNumber;
const int SystemProfileProto_GoogleUpdate::kLastAutomaticStartTimestampFieldNumber;
const int SystemProfileProto_GoogleUpdate::kLastUpdateCheckTimestampFieldNumber;
const int SystemProfileProto_GoogleUpdate::kGoogleUpdateStatusFieldNumber;
const int SystemProfileProto_GoogleUpdate::kClientStatusFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_GoogleUpdate::SystemProfileProto_GoogleUpdate()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.GoogleUpdate)
}

void SystemProfileProto_GoogleUpdate::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    google_update_status_ = const_cast<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(
        ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::internal_default_instance());
#else
    google_update_status_ = const_cast<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(&::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    client_status_ = const_cast<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(
        ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::internal_default_instance());
#else
    client_status_ = const_cast<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo*>(&::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::default_instance());
#endif
}

SystemProfileProto_GoogleUpdate::SystemProfileProto_GoogleUpdate(const SystemProfileProto_GoogleUpdate& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.GoogleUpdate)
}

void SystemProfileProto_GoogleUpdate::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    is_system_install_ = false;
    last_automatic_start_timestamp_ = GOOGLE_LONGLONG(0);
    last_update_check_timestamp_ = GOOGLE_LONGLONG(0);
    google_update_status_ = NULL;
    client_status_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_GoogleUpdate::~SystemProfileProto_GoogleUpdate()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.GoogleUpdate)
    SharedDtor();
}

void SystemProfileProto_GoogleUpdate::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete google_update_status_;
        delete client_status_;
    }
}

void SystemProfileProto_GoogleUpdate::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_GoogleUpdate& SystemProfileProto_GoogleUpdate::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_GoogleUpdate* SystemProfileProto_GoogleUpdate::default_instance_ = NULL;

SystemProfileProto_GoogleUpdate* SystemProfileProto_GoogleUpdate::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_GoogleUpdate* n = new SystemProfileProto_GoogleUpdate;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_GoogleUpdate::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.GoogleUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                     \
    _Pragma("clang diagnostic push")                                                                                      \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_GoogleUpdate, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_GoogleUpdate*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(last_automatic_start_timestamp_, last_update_check_timestamp_);
        is_system_install_ = false;
        if (has_google_update_status()) {
            if (google_update_status_ != NULL)
                google_update_status_->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::Clear();
        }
        if (has_client_status()) {
            if (client_status_ != NULL)
                client_status_->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_GoogleUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_GoogleUpdate, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.GoogleUpdate)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool is_system_install = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_system_install_)));
                set_has_is_system_install();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_last_automatic_start_timestamp;
            break;
        }

        // optional int64 last_automatic_start_timestamp = 2;
        case 2: {
            if (tag == 16) {
            parse_last_automatic_start_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &last_automatic_start_timestamp_)));
                set_has_last_automatic_start_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_last_update_check_timestamp;
            break;
        }

        // optional int64 last_update_check_timestamp = 3;
        case 3: {
            if (tag == 24) {
            parse_last_update_check_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &last_update_check_timestamp_)));
                set_has_last_update_check_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_google_update_status;
            break;
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
        case 4: {
            if (tag == 34) {
            parse_google_update_status:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_google_update_status()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_client_status;
            break;
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
        case 5: {
            if (tag == 42) {
            parse_client_status:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_client_status()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.GoogleUpdate)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.GoogleUpdate)
    return false;
#undef DO_
}

void SystemProfileProto_GoogleUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.GoogleUpdate)
    // optional bool is_system_install = 1;
    if (has_is_system_install()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_system_install(), output);
    }

    // optional int64 last_automatic_start_timestamp = 2;
    if (has_last_automatic_start_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_automatic_start_timestamp(), output);
    }

    // optional int64 last_update_check_timestamp = 3;
    if (has_last_update_check_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_update_check_timestamp(), output);
    }

    // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
    if (has_google_update_status()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->google_update_status_, output);
    }

    // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
    if (has_client_status()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->client_status_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.GoogleUpdate)
}

int SystemProfileProto_GoogleUpdate::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.GoogleUpdate)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional bool is_system_install = 1;
        if (has_is_system_install()) {
            total_size += 1 + 1;
        }

        // optional int64 last_automatic_start_timestamp = 2;
        if (has_last_automatic_start_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_automatic_start_timestamp());
        }

        // optional int64 last_update_check_timestamp = 3;
        if (has_last_update_check_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_update_check_timestamp());
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
        if (has_google_update_status()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->google_update_status_);
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
        if (has_client_status()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->client_status_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_GoogleUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_GoogleUpdate*>(&from));
}

void SystemProfileProto_GoogleUpdate::MergeFrom(const SystemProfileProto_GoogleUpdate& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.GoogleUpdate)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_is_system_install()) {
            set_is_system_install(from.is_system_install());
        }
        if (from.has_last_automatic_start_timestamp()) {
            set_last_automatic_start_timestamp(from.last_automatic_start_timestamp());
        }
        if (from.has_last_update_check_timestamp()) {
            set_last_update_check_timestamp(from.last_update_check_timestamp());
        }
        if (from.has_google_update_status()) {
            mutable_google_update_status()->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::MergeFrom(from.google_update_status());
        }
        if (from.has_client_status()) {
            mutable_client_status()->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::MergeFrom(from.client_status());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_GoogleUpdate::CopyFrom(const SystemProfileProto_GoogleUpdate& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.GoogleUpdate)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_GoogleUpdate::IsInitialized() const
{

    return true;
}

void SystemProfileProto_GoogleUpdate::Swap(SystemProfileProto_GoogleUpdate* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_GoogleUpdate::InternalSwap(SystemProfileProto_GoogleUpdate* other)
{
    std::swap(is_system_install_, other->is_system_install_);
    std::swap(last_automatic_start_timestamp_, other->last_automatic_start_timestamp_);
    std::swap(last_update_check_timestamp_, other->last_update_check_timestamp_);
    std::swap(google_update_status_, other->google_update_status_);
    std::swap(client_status_, other->client_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_GoogleUpdate::GetTypeName() const
{
    return "metrics.SystemProfileProto.GoogleUpdate";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Plugin(
    SystemProfileProto_Plugin* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Plugin::kNameFieldNumber;
const int SystemProfileProto_Plugin::kFilenameFieldNumber;
const int SystemProfileProto_Plugin::kVersionFieldNumber;
const int SystemProfileProto_Plugin::kIsDisabledFieldNumber;
const int SystemProfileProto_Plugin::kIsPepperFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Plugin::SystemProfileProto_Plugin()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Plugin)
}

void SystemProfileProto_Plugin::InitAsDefaultInstance()
{
}

SystemProfileProto_Plugin::SystemProfileProto_Plugin(const SystemProfileProto_Plugin& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Plugin)
}

void SystemProfileProto_Plugin::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    is_disabled_ = false;
    is_pepper_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Plugin::~SystemProfileProto_Plugin()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Plugin)
    SharedDtor();
}

void SystemProfileProto_Plugin::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Plugin::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Plugin& SystemProfileProto_Plugin::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Plugin* SystemProfileProto_Plugin::default_instance_ = NULL;

SystemProfileProto_Plugin* SystemProfileProto_Plugin::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Plugin* n = new SystemProfileProto_Plugin;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Plugin::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Plugin)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                               \
    _Pragma("clang diagnostic push")                                                                                \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Plugin, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Plugin*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(is_disabled_, is_pepper_);
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_filename()) {
            filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_version()) {
            version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Plugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Plugin, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Plugin)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_filename;
            break;
        }

        // optional string filename = 2;
        case 2: {
            if (tag == 18) {
            parse_filename:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_filename()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_version;
            break;
        }

        // optional string version = 3;
        case 3: {
            if (tag == 26) {
            parse_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_is_disabled;
            break;
        }

        // optional bool is_disabled = 4;
        case 4: {
            if (tag == 32) {
            parse_is_disabled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_disabled_)));
                set_has_is_disabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_is_pepper;
            break;
        }

        // optional bool is_pepper = 5;
        case 5: {
            if (tag == 40) {
            parse_is_pepper:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_pepper_)));
                set_has_is_pepper();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Plugin)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Plugin)
    return false;
#undef DO_
}

void SystemProfileProto_Plugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Plugin)
    // optional string name = 1;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->name(), output);
    }

    // optional string filename = 2;
    if (has_filename()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->filename(), output);
    }

    // optional string version = 3;
    if (has_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->version(), output);
    }

    // optional bool is_disabled = 4;
    if (has_is_disabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_disabled(), output);
    }

    // optional bool is_pepper = 5;
    if (has_is_pepper()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_pepper(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Plugin)
}

int SystemProfileProto_Plugin::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Plugin)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string name = 1;
        if (has_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
        }

        // optional string filename = 2;
        if (has_filename()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->filename());
        }

        // optional string version = 3;
        if (has_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->version());
        }

        // optional bool is_disabled = 4;
        if (has_is_disabled()) {
            total_size += 1 + 1;
        }

        // optional bool is_pepper = 5;
        if (has_is_pepper()) {
            total_size += 1 + 1;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Plugin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Plugin*>(&from));
}

void SystemProfileProto_Plugin::MergeFrom(const SystemProfileProto_Plugin& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Plugin)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_filename()) {
            set_has_filename();
            filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
        }
        if (from.has_version()) {
            set_has_version();
            version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
        }
        if (from.has_is_disabled()) {
            set_is_disabled(from.is_disabled());
        }
        if (from.has_is_pepper()) {
            set_is_pepper(from.is_pepper());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Plugin::CopyFrom(const SystemProfileProto_Plugin& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Plugin)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Plugin::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Plugin::Swap(SystemProfileProto_Plugin* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Plugin::InternalSwap(SystemProfileProto_Plugin* other)
{
    name_.Swap(&other->name_);
    filename_.Swap(&other->filename_);
    version_.Swap(&other->version_);
    std::swap(is_disabled_, other->is_disabled_);
    std::swap(is_pepper_, other->is_pepper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Plugin::GetTypeName() const
{
    return "metrics.SystemProfileProto.Plugin";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Stability(
    SystemProfileProto_Stability* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForSystemProfileProto_Stability_PluginStability(
    SystemProfileProto_Stability_PluginStability* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Stability_PluginStability::kPluginFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kLaunchCountFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kInstanceCountFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kCrashCountFieldNumber;
const int SystemProfileProto_Stability_PluginStability::kLoadingErrorCountFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Stability_PluginStability::SystemProfileProto_Stability_PluginStability()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Stability.PluginStability)
}

void SystemProfileProto_Stability_PluginStability::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    plugin_ = const_cast<::metrics::SystemProfileProto_Plugin*>(
        ::metrics::SystemProfileProto_Plugin::internal_default_instance());
#else
    plugin_ = const_cast<::metrics::SystemProfileProto_Plugin*>(&::metrics::SystemProfileProto_Plugin::default_instance());
#endif
}

SystemProfileProto_Stability_PluginStability::SystemProfileProto_Stability_PluginStability(const SystemProfileProto_Stability_PluginStability& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Stability.PluginStability)
}

void SystemProfileProto_Stability_PluginStability::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    plugin_ = NULL;
    launch_count_ = 0;
    instance_count_ = 0;
    crash_count_ = 0;
    loading_error_count_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Stability_PluginStability::~SystemProfileProto_Stability_PluginStability()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Stability.PluginStability)
    SharedDtor();
}

void SystemProfileProto_Stability_PluginStability::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete plugin_;
    }
}

void SystemProfileProto_Stability_PluginStability::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Stability_PluginStability& SystemProfileProto_Stability_PluginStability::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Stability_PluginStability* SystemProfileProto_Stability_PluginStability::default_instance_ = NULL;

SystemProfileProto_Stability_PluginStability* SystemProfileProto_Stability_PluginStability::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Stability_PluginStability* n = new SystemProfileProto_Stability_PluginStability;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Stability_PluginStability::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Stability.PluginStability)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Stability_PluginStability, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Stability_PluginStability*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(launch_count_, loading_error_count_);
        if (has_plugin()) {
            if (plugin_ != NULL)
                plugin_->::metrics::SystemProfileProto_Plugin::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Stability_PluginStability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Stability_PluginStability, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Stability.PluginStability)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.SystemProfileProto.Plugin plugin = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_plugin()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_launch_count;
            break;
        }

        // optional int32 launch_count = 2;
        case 2: {
            if (tag == 16) {
            parse_launch_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &launch_count_)));
                set_has_launch_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_instance_count;
            break;
        }

        // optional int32 instance_count = 3;
        case 3: {
            if (tag == 24) {
            parse_instance_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &instance_count_)));
                set_has_instance_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_crash_count;
            break;
        }

        // optional int32 crash_count = 4;
        case 4: {
            if (tag == 32) {
            parse_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &crash_count_)));
                set_has_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_loading_error_count;
            break;
        }

        // optional int32 loading_error_count = 5;
        case 5: {
            if (tag == 40) {
            parse_loading_error_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &loading_error_count_)));
                set_has_loading_error_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Stability.PluginStability)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Stability.PluginStability)
    return false;
#undef DO_
}

void SystemProfileProto_Stability_PluginStability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Stability.PluginStability)
    // optional .metrics.SystemProfileProto.Plugin plugin = 1;
    if (has_plugin()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->plugin_, output);
    }

    // optional int32 launch_count = 2;
    if (has_launch_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->launch_count(), output);
    }

    // optional int32 instance_count = 3;
    if (has_instance_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance_count(), output);
    }

    // optional int32 crash_count = 4;
    if (has_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->crash_count(), output);
    }

    // optional int32 loading_error_count = 5;
    if (has_loading_error_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->loading_error_count(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Stability.PluginStability)
}

int SystemProfileProto_Stability_PluginStability::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Stability.PluginStability)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional .metrics.SystemProfileProto.Plugin plugin = 1;
        if (has_plugin()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->plugin_);
        }

        // optional int32 launch_count = 2;
        if (has_launch_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->launch_count());
        }

        // optional int32 instance_count = 3;
        if (has_instance_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->instance_count());
        }

        // optional int32 crash_count = 4;
        if (has_crash_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->crash_count());
        }

        // optional int32 loading_error_count = 5;
        if (has_loading_error_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->loading_error_count());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Stability_PluginStability::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Stability_PluginStability*>(&from));
}

void SystemProfileProto_Stability_PluginStability::MergeFrom(const SystemProfileProto_Stability_PluginStability& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Stability.PluginStability)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_plugin()) {
            mutable_plugin()->::metrics::SystemProfileProto_Plugin::MergeFrom(from.plugin());
        }
        if (from.has_launch_count()) {
            set_launch_count(from.launch_count());
        }
        if (from.has_instance_count()) {
            set_instance_count(from.instance_count());
        }
        if (from.has_crash_count()) {
            set_crash_count(from.crash_count());
        }
        if (from.has_loading_error_count()) {
            set_loading_error_count(from.loading_error_count());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Stability_PluginStability::CopyFrom(const SystemProfileProto_Stability_PluginStability& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Stability.PluginStability)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Stability_PluginStability::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Stability_PluginStability::Swap(SystemProfileProto_Stability_PluginStability* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Stability_PluginStability::InternalSwap(SystemProfileProto_Stability_PluginStability* other)
{
    std::swap(plugin_, other->plugin_);
    std::swap(launch_count_, other->launch_count_);
    std::swap(instance_count_, other->instance_count_);
    std::swap(crash_count_, other->crash_count_);
    std::swap(loading_error_count_, other->loading_error_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Stability_PluginStability::GetTypeName() const
{
    return "metrics.SystemProfileProto.Stability.PluginStability";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_Stability::kIncrementalUptimeSecFieldNumber;
const int SystemProfileProto_Stability::kUptimeSecFieldNumber;
const int SystemProfileProto_Stability::kPageLoadCountFieldNumber;
const int SystemProfileProto_Stability::kRendererCrashCountFieldNumber;
const int SystemProfileProto_Stability::kRendererHangCountFieldNumber;
const int SystemProfileProto_Stability::kRendererFailedLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kRendererLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kExtensionRendererCrashCountFieldNumber;
const int SystemProfileProto_Stability::kExtensionRendererFailedLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kExtensionRendererLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kChildProcessCrashCountFieldNumber;
const int SystemProfileProto_Stability::kOtherUserCrashCountFieldNumber;
const int SystemProfileProto_Stability::kKernelCrashCountFieldNumber;
const int SystemProfileProto_Stability::kUncleanSystemShutdownCountFieldNumber;
const int SystemProfileProto_Stability::kLaunchCountFieldNumber;
const int SystemProfileProto_Stability::kCrashCountFieldNumber;
const int SystemProfileProto_Stability::kIncompleteShutdownCountFieldNumber;
const int SystemProfileProto_Stability::kBreakpadRegistrationSuccessCountFieldNumber;
const int SystemProfileProto_Stability::kBreakpadRegistrationFailureCountFieldNumber;
const int SystemProfileProto_Stability::kDebuggerPresentCountFieldNumber;
const int SystemProfileProto_Stability::kDebuggerNotPresentCountFieldNumber;
const int SystemProfileProto_Stability::kPluginStabilityFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_Stability::SystemProfileProto_Stability()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.Stability)
}

void SystemProfileProto_Stability::InitAsDefaultInstance()
{
}

SystemProfileProto_Stability::SystemProfileProto_Stability(const SystemProfileProto_Stability& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.Stability)
}

void SystemProfileProto_Stability::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    incremental_uptime_sec_ = GOOGLE_LONGLONG(0);
    uptime_sec_ = GOOGLE_LONGLONG(0);
    page_load_count_ = 0;
    renderer_crash_count_ = 0;
    renderer_hang_count_ = 0;
    renderer_failed_launch_count_ = 0;
    renderer_launch_count_ = 0;
    extension_renderer_crash_count_ = 0;
    extension_renderer_failed_launch_count_ = 0;
    extension_renderer_launch_count_ = 0;
    child_process_crash_count_ = 0;
    other_user_crash_count_ = 0;
    kernel_crash_count_ = 0;
    unclean_system_shutdown_count_ = 0;
    launch_count_ = 0;
    crash_count_ = 0;
    incomplete_shutdown_count_ = 0;
    breakpad_registration_success_count_ = 0;
    breakpad_registration_failure_count_ = 0;
    debugger_present_count_ = 0;
    debugger_not_present_count_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_Stability::~SystemProfileProto_Stability()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.Stability)
    SharedDtor();
}

void SystemProfileProto_Stability::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_Stability::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_Stability& SystemProfileProto_Stability::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_Stability* SystemProfileProto_Stability::default_instance_ = NULL;

SystemProfileProto_Stability* SystemProfileProto_Stability::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_Stability* n = new SystemProfileProto_Stability;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_Stability::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.Stability)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_Stability, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_Stability*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(incremental_uptime_sec_, extension_renderer_crash_count_);
    }
    if (_has_bits_[8 / 32] & 65280u) {
        ZR_(extension_renderer_failed_launch_count_, crash_count_);
    }
    if (_has_bits_[16 / 32] & 2031616u) {
        ZR_(incomplete_shutdown_count_, debugger_present_count_);
        debugger_not_present_count_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    plugin_stability_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_Stability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_Stability, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.Stability)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 incremental_uptime_sec = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &incremental_uptime_sec_)));
                set_has_incremental_uptime_sec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_page_load_count;
            break;
        }

        // optional int32 page_load_count = 2;
        case 2: {
            if (tag == 16) {
            parse_page_load_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &page_load_count_)));
                set_has_page_load_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_renderer_crash_count;
            break;
        }

        // optional int32 renderer_crash_count = 3;
        case 3: {
            if (tag == 24) {
            parse_renderer_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &renderer_crash_count_)));
                set_has_renderer_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_renderer_hang_count;
            break;
        }

        // optional int32 renderer_hang_count = 4;
        case 4: {
            if (tag == 32) {
            parse_renderer_hang_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &renderer_hang_count_)));
                set_has_renderer_hang_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_extension_renderer_crash_count;
            break;
        }

        // optional int32 extension_renderer_crash_count = 5;
        case 5: {
            if (tag == 40) {
            parse_extension_renderer_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &extension_renderer_crash_count_)));
                set_has_extension_renderer_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_child_process_crash_count;
            break;
        }

        // optional int32 child_process_crash_count = 6;
        case 6: {
            if (tag == 48) {
            parse_child_process_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &child_process_crash_count_)));
                set_has_child_process_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_other_user_crash_count;
            break;
        }

        // optional int32 other_user_crash_count = 7;
        case 7: {
            if (tag == 56) {
            parse_other_user_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &other_user_crash_count_)));
                set_has_other_user_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_kernel_crash_count;
            break;
        }

        // optional int32 kernel_crash_count = 8;
        case 8: {
            if (tag == 64) {
            parse_kernel_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &kernel_crash_count_)));
                set_has_kernel_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_unclean_system_shutdown_count;
            break;
        }

        // optional int32 unclean_system_shutdown_count = 9;
        case 9: {
            if (tag == 72) {
            parse_unclean_system_shutdown_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &unclean_system_shutdown_count_)));
                set_has_unclean_system_shutdown_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_launch_count;
            break;
        }

        // optional int32 launch_count = 15;
        case 15: {
            if (tag == 120) {
            parse_launch_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &launch_count_)));
                set_has_launch_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_crash_count;
            break;
        }

        // optional int32 crash_count = 16;
        case 16: {
            if (tag == 128) {
            parse_crash_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &crash_count_)));
                set_has_crash_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(136))
                goto parse_incomplete_shutdown_count;
            break;
        }

        // optional int32 incomplete_shutdown_count = 17;
        case 17: {
            if (tag == 136) {
            parse_incomplete_shutdown_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &incomplete_shutdown_count_)));
                set_has_incomplete_shutdown_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_breakpad_registration_success_count;
            break;
        }

        // optional int32 breakpad_registration_success_count = 18;
        case 18: {
            if (tag == 144) {
            parse_breakpad_registration_success_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &breakpad_registration_success_count_)));
                set_has_breakpad_registration_success_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(152))
                goto parse_breakpad_registration_failure_count;
            break;
        }

        // optional int32 breakpad_registration_failure_count = 19;
        case 19: {
            if (tag == 152) {
            parse_breakpad_registration_failure_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &breakpad_registration_failure_count_)));
                set_has_breakpad_registration_failure_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(160))
                goto parse_debugger_present_count;
            break;
        }

        // optional int32 debugger_present_count = 20;
        case 20: {
            if (tag == 160) {
            parse_debugger_present_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &debugger_present_count_)));
                set_has_debugger_present_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(168))
                goto parse_debugger_not_present_count;
            break;
        }

        // optional int32 debugger_not_present_count = 21;
        case 21: {
            if (tag == 168) {
            parse_debugger_not_present_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &debugger_not_present_count_)));
                set_has_debugger_not_present_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(178))
                goto parse_plugin_stability;
            break;
        }

        // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
        case 22: {
            if (tag == 178) {
            parse_plugin_stability:
                DO_(input->IncrementRecursionDepth());
            parse_loop_plugin_stability:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_plugin_stability()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(178))
                goto parse_loop_plugin_stability;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(184))
                goto parse_uptime_sec;
            break;
        }

        // optional int64 uptime_sec = 23;
        case 23: {
            if (tag == 184) {
            parse_uptime_sec:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &uptime_sec_)));
                set_has_uptime_sec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(192))
                goto parse_renderer_failed_launch_count;
            break;
        }

        // optional int32 renderer_failed_launch_count = 24;
        case 24: {
            if (tag == 192) {
            parse_renderer_failed_launch_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &renderer_failed_launch_count_)));
                set_has_renderer_failed_launch_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(200))
                goto parse_extension_renderer_failed_launch_count;
            break;
        }

        // optional int32 extension_renderer_failed_launch_count = 25;
        case 25: {
            if (tag == 200) {
            parse_extension_renderer_failed_launch_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &extension_renderer_failed_launch_count_)));
                set_has_extension_renderer_failed_launch_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(208))
                goto parse_renderer_launch_count;
            break;
        }

        // optional int32 renderer_launch_count = 26;
        case 26: {
            if (tag == 208) {
            parse_renderer_launch_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &renderer_launch_count_)));
                set_has_renderer_launch_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(216))
                goto parse_extension_renderer_launch_count;
            break;
        }

        // optional int32 extension_renderer_launch_count = 27;
        case 27: {
            if (tag == 216) {
            parse_extension_renderer_launch_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &extension_renderer_launch_count_)));
                set_has_extension_renderer_launch_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.Stability)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.Stability)
    return false;
#undef DO_
}

void SystemProfileProto_Stability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.Stability)
    // optional int64 incremental_uptime_sec = 1;
    if (has_incremental_uptime_sec()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->incremental_uptime_sec(), output);
    }

    // optional int32 page_load_count = 2;
    if (has_page_load_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_load_count(), output);
    }

    // optional int32 renderer_crash_count = 3;
    if (has_renderer_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->renderer_crash_count(), output);
    }

    // optional int32 renderer_hang_count = 4;
    if (has_renderer_hang_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->renderer_hang_count(), output);
    }

    // optional int32 extension_renderer_crash_count = 5;
    if (has_extension_renderer_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->extension_renderer_crash_count(), output);
    }

    // optional int32 child_process_crash_count = 6;
    if (has_child_process_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->child_process_crash_count(), output);
    }

    // optional int32 other_user_crash_count = 7;
    if (has_other_user_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->other_user_crash_count(), output);
    }

    // optional int32 kernel_crash_count = 8;
    if (has_kernel_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->kernel_crash_count(), output);
    }

    // optional int32 unclean_system_shutdown_count = 9;
    if (has_unclean_system_shutdown_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->unclean_system_shutdown_count(), output);
    }

    // optional int32 launch_count = 15;
    if (has_launch_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->launch_count(), output);
    }

    // optional int32 crash_count = 16;
    if (has_crash_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->crash_count(), output);
    }

    // optional int32 incomplete_shutdown_count = 17;
    if (has_incomplete_shutdown_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->incomplete_shutdown_count(), output);
    }

    // optional int32 breakpad_registration_success_count = 18;
    if (has_breakpad_registration_success_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->breakpad_registration_success_count(), output);
    }

    // optional int32 breakpad_registration_failure_count = 19;
    if (has_breakpad_registration_failure_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->breakpad_registration_failure_count(), output);
    }

    // optional int32 debugger_present_count = 20;
    if (has_debugger_present_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->debugger_present_count(), output);
    }

    // optional int32 debugger_not_present_count = 21;
    if (has_debugger_not_present_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->debugger_not_present_count(), output);
    }

    // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
    for (unsigned int i = 0, n = this->plugin_stability_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            22, this->plugin_stability(i), output);
    }

    // optional int64 uptime_sec = 23;
    if (has_uptime_sec()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->uptime_sec(), output);
    }

    // optional int32 renderer_failed_launch_count = 24;
    if (has_renderer_failed_launch_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->renderer_failed_launch_count(), output);
    }

    // optional int32 extension_renderer_failed_launch_count = 25;
    if (has_extension_renderer_failed_launch_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->extension_renderer_failed_launch_count(), output);
    }

    // optional int32 renderer_launch_count = 26;
    if (has_renderer_launch_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->renderer_launch_count(), output);
    }

    // optional int32 extension_renderer_launch_count = 27;
    if (has_extension_renderer_launch_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->extension_renderer_launch_count(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.Stability)
}

int SystemProfileProto_Stability::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.Stability)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional int64 incremental_uptime_sec = 1;
        if (has_incremental_uptime_sec()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->incremental_uptime_sec());
        }

        // optional int64 uptime_sec = 23;
        if (has_uptime_sec()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->uptime_sec());
        }

        // optional int32 page_load_count = 2;
        if (has_page_load_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->page_load_count());
        }

        // optional int32 renderer_crash_count = 3;
        if (has_renderer_crash_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->renderer_crash_count());
        }

        // optional int32 renderer_hang_count = 4;
        if (has_renderer_hang_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->renderer_hang_count());
        }

        // optional int32 renderer_failed_launch_count = 24;
        if (has_renderer_failed_launch_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->renderer_failed_launch_count());
        }

        // optional int32 renderer_launch_count = 26;
        if (has_renderer_launch_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->renderer_launch_count());
        }

        // optional int32 extension_renderer_crash_count = 5;
        if (has_extension_renderer_crash_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->extension_renderer_crash_count());
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        // optional int32 extension_renderer_failed_launch_count = 25;
        if (has_extension_renderer_failed_launch_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->extension_renderer_failed_launch_count());
        }

        // optional int32 extension_renderer_launch_count = 27;
        if (has_extension_renderer_launch_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->extension_renderer_launch_count());
        }

        // optional int32 child_process_crash_count = 6;
        if (has_child_process_crash_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->child_process_crash_count());
        }

        // optional int32 other_user_crash_count = 7;
        if (has_other_user_crash_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->other_user_crash_count());
        }

        // optional int32 kernel_crash_count = 8;
        if (has_kernel_crash_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->kernel_crash_count());
        }

        // optional int32 unclean_system_shutdown_count = 9;
        if (has_unclean_system_shutdown_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->unclean_system_shutdown_count());
        }

        // optional int32 launch_count = 15;
        if (has_launch_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->launch_count());
        }

        // optional int32 crash_count = 16;
        if (has_crash_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->crash_count());
        }
    }
    if (_has_bits_[16 / 32] & 2031616u) {
        // optional int32 incomplete_shutdown_count = 17;
        if (has_incomplete_shutdown_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->incomplete_shutdown_count());
        }

        // optional int32 breakpad_registration_success_count = 18;
        if (has_breakpad_registration_success_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->breakpad_registration_success_count());
        }

        // optional int32 breakpad_registration_failure_count = 19;
        if (has_breakpad_registration_failure_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->breakpad_registration_failure_count());
        }

        // optional int32 debugger_present_count = 20;
        if (has_debugger_present_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->debugger_present_count());
        }

        // optional int32 debugger_not_present_count = 21;
        if (has_debugger_not_present_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->debugger_not_present_count());
        }
    }
    // repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
    total_size += 2 * this->plugin_stability_size();
    for (int i = 0; i < this->plugin_stability_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->plugin_stability(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_Stability::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_Stability*>(&from));
}

void SystemProfileProto_Stability::MergeFrom(const SystemProfileProto_Stability& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.Stability)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    plugin_stability_.MergeFrom(from.plugin_stability_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_incremental_uptime_sec()) {
            set_incremental_uptime_sec(from.incremental_uptime_sec());
        }
        if (from.has_uptime_sec()) {
            set_uptime_sec(from.uptime_sec());
        }
        if (from.has_page_load_count()) {
            set_page_load_count(from.page_load_count());
        }
        if (from.has_renderer_crash_count()) {
            set_renderer_crash_count(from.renderer_crash_count());
        }
        if (from.has_renderer_hang_count()) {
            set_renderer_hang_count(from.renderer_hang_count());
        }
        if (from.has_renderer_failed_launch_count()) {
            set_renderer_failed_launch_count(from.renderer_failed_launch_count());
        }
        if (from.has_renderer_launch_count()) {
            set_renderer_launch_count(from.renderer_launch_count());
        }
        if (from.has_extension_renderer_crash_count()) {
            set_extension_renderer_crash_count(from.extension_renderer_crash_count());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_extension_renderer_failed_launch_count()) {
            set_extension_renderer_failed_launch_count(from.extension_renderer_failed_launch_count());
        }
        if (from.has_extension_renderer_launch_count()) {
            set_extension_renderer_launch_count(from.extension_renderer_launch_count());
        }
        if (from.has_child_process_crash_count()) {
            set_child_process_crash_count(from.child_process_crash_count());
        }
        if (from.has_other_user_crash_count()) {
            set_other_user_crash_count(from.other_user_crash_count());
        }
        if (from.has_kernel_crash_count()) {
            set_kernel_crash_count(from.kernel_crash_count());
        }
        if (from.has_unclean_system_shutdown_count()) {
            set_unclean_system_shutdown_count(from.unclean_system_shutdown_count());
        }
        if (from.has_launch_count()) {
            set_launch_count(from.launch_count());
        }
        if (from.has_crash_count()) {
            set_crash_count(from.crash_count());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_incomplete_shutdown_count()) {
            set_incomplete_shutdown_count(from.incomplete_shutdown_count());
        }
        if (from.has_breakpad_registration_success_count()) {
            set_breakpad_registration_success_count(from.breakpad_registration_success_count());
        }
        if (from.has_breakpad_registration_failure_count()) {
            set_breakpad_registration_failure_count(from.breakpad_registration_failure_count());
        }
        if (from.has_debugger_present_count()) {
            set_debugger_present_count(from.debugger_present_count());
        }
        if (from.has_debugger_not_present_count()) {
            set_debugger_not_present_count(from.debugger_not_present_count());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_Stability::CopyFrom(const SystemProfileProto_Stability& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.Stability)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_Stability::IsInitialized() const
{

    return true;
}

void SystemProfileProto_Stability::Swap(SystemProfileProto_Stability* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_Stability::InternalSwap(SystemProfileProto_Stability* other)
{
    std::swap(incremental_uptime_sec_, other->incremental_uptime_sec_);
    std::swap(uptime_sec_, other->uptime_sec_);
    std::swap(page_load_count_, other->page_load_count_);
    std::swap(renderer_crash_count_, other->renderer_crash_count_);
    std::swap(renderer_hang_count_, other->renderer_hang_count_);
    std::swap(renderer_failed_launch_count_, other->renderer_failed_launch_count_);
    std::swap(renderer_launch_count_, other->renderer_launch_count_);
    std::swap(extension_renderer_crash_count_, other->extension_renderer_crash_count_);
    std::swap(extension_renderer_failed_launch_count_, other->extension_renderer_failed_launch_count_);
    std::swap(extension_renderer_launch_count_, other->extension_renderer_launch_count_);
    std::swap(child_process_crash_count_, other->child_process_crash_count_);
    std::swap(other_user_crash_count_, other->other_user_crash_count_);
    std::swap(kernel_crash_count_, other->kernel_crash_count_);
    std::swap(unclean_system_shutdown_count_, other->unclean_system_shutdown_count_);
    std::swap(launch_count_, other->launch_count_);
    std::swap(crash_count_, other->crash_count_);
    std::swap(incomplete_shutdown_count_, other->incomplete_shutdown_count_);
    std::swap(breakpad_registration_success_count_, other->breakpad_registration_success_count_);
    std::swap(breakpad_registration_failure_count_, other->breakpad_registration_failure_count_);
    std::swap(debugger_present_count_, other->debugger_present_count_);
    std::swap(debugger_not_present_count_, other->debugger_not_present_count_);
    plugin_stability_.UnsafeArenaSwap(&other->plugin_stability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_Stability::GetTypeName() const
{
    return "metrics.SystemProfileProto.Stability";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_FieldTrial(
    SystemProfileProto_FieldTrial* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_FieldTrial::kNameIdFieldNumber;
const int SystemProfileProto_FieldTrial::kGroupIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_FieldTrial::SystemProfileProto_FieldTrial()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.FieldTrial)
}

void SystemProfileProto_FieldTrial::InitAsDefaultInstance()
{
}

SystemProfileProto_FieldTrial::SystemProfileProto_FieldTrial(const SystemProfileProto_FieldTrial& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.FieldTrial)
}

void SystemProfileProto_FieldTrial::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_id_ = 0u;
    group_id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_FieldTrial::~SystemProfileProto_FieldTrial()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.FieldTrial)
    SharedDtor();
}

void SystemProfileProto_FieldTrial::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_FieldTrial::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_FieldTrial& SystemProfileProto_FieldTrial::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_FieldTrial* SystemProfileProto_FieldTrial::default_instance_ = NULL;

SystemProfileProto_FieldTrial* SystemProfileProto_FieldTrial::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_FieldTrial* n = new SystemProfileProto_FieldTrial;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_FieldTrial::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.FieldTrial)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                   \
    _Pragma("clang diagnostic push")                                                                                    \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_FieldTrial, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_FieldTrial*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(name_id_, group_id_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_FieldTrial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_FieldTrial, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.FieldTrial)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional fixed32 name_id = 1;
        case 1: {
            if (tag == 13) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &name_id_)));
                set_has_name_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(21))
                goto parse_group_id;
            break;
        }

        // optional fixed32 group_id = 2;
        case 2: {
            if (tag == 21) {
            parse_group_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &group_id_)));
                set_has_group_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.FieldTrial)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.FieldTrial)
    return false;
#undef DO_
}

void SystemProfileProto_FieldTrial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.FieldTrial)
    // optional fixed32 name_id = 1;
    if (has_name_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_id(), output);
    }

    // optional fixed32 group_id = 2;
    if (has_group_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->group_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.FieldTrial)
}

int SystemProfileProto_FieldTrial::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.FieldTrial)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional fixed32 name_id = 1;
        if (has_name_id()) {
            total_size += 1 + 4;
        }

        // optional fixed32 group_id = 2;
        if (has_group_id()) {
            total_size += 1 + 4;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_FieldTrial::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_FieldTrial*>(&from));
}

void SystemProfileProto_FieldTrial::MergeFrom(const SystemProfileProto_FieldTrial& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.FieldTrial)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name_id()) {
            set_name_id(from.name_id());
        }
        if (from.has_group_id()) {
            set_group_id(from.group_id());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_FieldTrial::CopyFrom(const SystemProfileProto_FieldTrial& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.FieldTrial)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_FieldTrial::IsInitialized() const
{

    return true;
}

void SystemProfileProto_FieldTrial::Swap(SystemProfileProto_FieldTrial* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_FieldTrial::InternalSwap(SystemProfileProto_FieldTrial* other)
{
    std::swap(name_id_, other->name_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_FieldTrial::GetTypeName() const
{
    return "metrics.SystemProfileProto.FieldTrial";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_ExternalAudioVideoDevice(
    SystemProfileProto_ExternalAudioVideoDevice* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_UNKNOWN;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_TV;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_RECORDER;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_TUNER;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_PLAYER;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AV_DEVICE_TYPE_AUDIO_SYSTEM;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AVDeviceType_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::AVDeviceType_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice::AVDeviceType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_UNKNOWN;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_RGB;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_YUV444;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_YUV422;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::COLOR_ENCODING_YUV420;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::ColorEncoding_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::ColorEncoding_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice::ColorEncoding_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForSystemProfileProto_ExternalAudioVideoDevice_AudioDescription(
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_UNKNOWN;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_LPCM;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_AC_3;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MPEG1;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MP3;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MPEG2;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_AAC;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DTS;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_ATRAC;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_ONE_BIT;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DD_PLUS;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DTS_HD;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MLP_DOLBY_TRUEHD;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_DST_AUDIO;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AUDIO_FORMAT_MICROSOFT_WMA_PRO;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AudioFormat_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AudioFormat_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::AudioFormat_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::ANALOG;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::DIGITAL;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::OutputMode_MIN;
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::OutputMode_MAX;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::OutputMode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kAudioFormatFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kNumChannelsFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kSampleFrequencyHzFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kMaxBitRatePerSecondFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kBitDepthFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::kOutputModeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::InitAsDefaultInstance()
{
}

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    audio_format_ = 0;
    num_channels_ = 0;
    max_bit_rate_per_second_ = 0;
    bit_depth_ = 0;
    output_mode_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::~SystemProfileProto_ExternalAudioVideoDevice_AudioDescription()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    SharedDtor();
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::default_instance_ = NULL;

SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* n = new SystemProfileProto_ExternalAudioVideoDevice_AudioDescription;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_ExternalAudioVideoDevice_AudioDescription*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 59u) {
        ZR_(audio_format_, num_channels_);
        ZR_(max_bit_rate_per_second_, output_mode_);
    }

#undef ZR_HELPER_
#undef ZR_

    sample_frequency_hz_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_ExternalAudioVideoDevice_AudioDescription, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(value)) {
                    set_audio_format(static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_num_channels;
            break;
        }

        // optional int32 num_channels = 2;
        case 2: {
            if (tag == 16) {
            parse_num_channels:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_channels_)));
                set_has_num_channels();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_sample_frequency_hz;
            break;
        }

        // repeated int32 sample_frequency_hz = 3;
        case 3: {
            if (tag == 24) {
            parse_sample_frequency_hz:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    1, 24, input, this->mutable_sample_frequency_hz())));
            } else if (tag == 26) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, this->mutable_sample_frequency_hz())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_sample_frequency_hz;
            if (input->ExpectTag(32))
                goto parse_max_bit_rate_per_second;
            break;
        }

        // optional int32 max_bit_rate_per_second = 4;
        case 4: {
            if (tag == 32) {
            parse_max_bit_rate_per_second:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &max_bit_rate_per_second_)));
                set_has_max_bit_rate_per_second();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_bit_depth;
            break;
        }

        // optional int32 bit_depth = 5;
        case 5: {
            if (tag == 40) {
            parse_bit_depth:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &bit_depth_)));
                set_has_bit_depth();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_output_mode;
            break;
        }

        // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
        case 6: {
            if (tag == 48) {
            parse_output_mode:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(value)) {
                    set_output_mode(static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(48);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    return false;
#undef DO_
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
    if (has_audio_format()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->audio_format(), output);
    }

    // optional int32 num_channels = 2;
    if (has_num_channels()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_channels(), output);
    }

    // repeated int32 sample_frequency_hz = 3;
    for (int i = 0; i < this->sample_frequency_hz_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
            3, this->sample_frequency_hz(i), output);
    }

    // optional int32 max_bit_rate_per_second = 4;
    if (has_max_bit_rate_per_second()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_bit_rate_per_second(), output);
    }

    // optional int32 bit_depth = 5;
    if (has_bit_depth()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bit_depth(), output);
    }

    // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
    if (has_output_mode()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            6, this->output_mode(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
}

int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 59u) {
        // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
        if (has_audio_format()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_format());
        }

        // optional int32 num_channels = 2;
        if (has_num_channels()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_channels());
        }

        // optional int32 max_bit_rate_per_second = 4;
        if (has_max_bit_rate_per_second()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->max_bit_rate_per_second());
        }

        // optional int32 bit_depth = 5;
        if (has_bit_depth()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->bit_depth());
        }

        // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
        if (has_output_mode()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_mode());
        }
    }
    // repeated int32 sample_frequency_hz = 3;
    {
        int data_size = 0;
        for (int i = 0; i < this->sample_frequency_hz_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int32Size(this->sample_frequency_hz(i));
        }
        total_size += 1 * this->sample_frequency_hz_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription*>(&from));
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    sample_frequency_hz_.MergeFrom(from.sample_frequency_hz_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_audio_format()) {
            set_audio_format(from.audio_format());
        }
        if (from.has_num_channels()) {
            set_num_channels(from.num_channels());
        }
        if (from.has_max_bit_rate_per_second()) {
            set_max_bit_rate_per_second(from.max_bit_rate_per_second());
        }
        if (from.has_bit_depth()) {
            set_bit_depth(from.bit_depth());
        }
        if (from.has_output_mode()) {
            set_output_mode(from.output_mode());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::IsInitialized() const
{

    return true;
}

void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::Swap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::InternalSwap(SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* other)
{
    std::swap(audio_format_, other->audio_format_);
    std::swap(num_channels_, other->num_channels_);
    sample_frequency_hz_.UnsafeArenaSwap(&other->sample_frequency_hz_);
    std::swap(max_bit_rate_per_second_, other->max_bit_rate_per_second_);
    std::swap(bit_depth_, other->bit_depth_);
    std::swap(output_mode_, other->output_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::GetTypeName() const
{
    return "metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_ExternalAudioVideoDevice_CECCommand(
    SystemProfileProto_ExternalAudioVideoDevice_CECCommand* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kOpcodeFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumReceivedDirectFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumReceivedBroadcastFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumSentDirectFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumSentBroadcastFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumAbortedUnknownReasonFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::kNumAbortedUnrecognizedFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SystemProfileProto_ExternalAudioVideoDevice_CECCommand()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::InitAsDefaultInstance()
{
}

SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SystemProfileProto_ExternalAudioVideoDevice_CECCommand(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    opcode_ = 0;
    num_received_direct_ = 0;
    num_received_broadcast_ = 0;
    num_sent_direct_ = 0;
    num_sent_broadcast_ = 0;
    num_aborted_unknown_reason_ = 0;
    num_aborted_unrecognized_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_ExternalAudioVideoDevice_CECCommand::~SystemProfileProto_ExternalAudioVideoDevice_CECCommand()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    SharedDtor();
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& SystemProfileProto_ExternalAudioVideoDevice_CECCommand::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_ExternalAudioVideoDevice_CECCommand* SystemProfileProto_ExternalAudioVideoDevice_CECCommand::default_instance_ = NULL;

SystemProfileProto_ExternalAudioVideoDevice_CECCommand* SystemProfileProto_ExternalAudioVideoDevice_CECCommand::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_ExternalAudioVideoDevice_CECCommand* n = new SystemProfileProto_ExternalAudioVideoDevice_CECCommand;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                            \
    _Pragma("clang diagnostic push")                                                                                                             \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_ExternalAudioVideoDevice_CECCommand, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_ExternalAudioVideoDevice_CECCommand*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 127u) {
        ZR_(opcode_, num_aborted_unrecognized_);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_ExternalAudioVideoDevice_CECCommand, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 opcode = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &opcode_)));
                set_has_opcode();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_num_received_direct;
            break;
        }

        // optional int32 num_received_direct = 2;
        case 2: {
            if (tag == 16) {
            parse_num_received_direct:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_received_direct_)));
                set_has_num_received_direct();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_num_received_broadcast;
            break;
        }

        // optional int32 num_received_broadcast = 3;
        case 3: {
            if (tag == 24) {
            parse_num_received_broadcast:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_received_broadcast_)));
                set_has_num_received_broadcast();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_num_sent_direct;
            break;
        }

        // optional int32 num_sent_direct = 4;
        case 4: {
            if (tag == 32) {
            parse_num_sent_direct:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_sent_direct_)));
                set_has_num_sent_direct();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_num_sent_broadcast;
            break;
        }

        // optional int32 num_sent_broadcast = 5;
        case 5: {
            if (tag == 40) {
            parse_num_sent_broadcast:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_sent_broadcast_)));
                set_has_num_sent_broadcast();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_num_aborted_unknown_reason;
            break;
        }

        // optional int32 num_aborted_unknown_reason = 6;
        case 6: {
            if (tag == 48) {
            parse_num_aborted_unknown_reason:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_aborted_unknown_reason_)));
                set_has_num_aborted_unknown_reason();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_num_aborted_unrecognized;
            break;
        }

        // optional int32 num_aborted_unrecognized = 7;
        case 7: {
            if (tag == 56) {
            parse_num_aborted_unrecognized:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_aborted_unrecognized_)));
                set_has_num_aborted_unrecognized();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    return false;
#undef DO_
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    // optional int32 opcode = 1;
    if (has_opcode()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
    }

    // optional int32 num_received_direct = 2;
    if (has_num_received_direct()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_received_direct(), output);
    }

    // optional int32 num_received_broadcast = 3;
    if (has_num_received_broadcast()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_received_broadcast(), output);
    }

    // optional int32 num_sent_direct = 4;
    if (has_num_sent_direct()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_sent_direct(), output);
    }

    // optional int32 num_sent_broadcast = 5;
    if (has_num_sent_broadcast()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_sent_broadcast(), output);
    }

    // optional int32 num_aborted_unknown_reason = 6;
    if (has_num_aborted_unknown_reason()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_aborted_unknown_reason(), output);
    }

    // optional int32 num_aborted_unrecognized = 7;
    if (has_num_aborted_unrecognized()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_aborted_unrecognized(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
}

int SystemProfileProto_ExternalAudioVideoDevice_CECCommand::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 127u) {
        // optional int32 opcode = 1;
        if (has_opcode()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->opcode());
        }

        // optional int32 num_received_direct = 2;
        if (has_num_received_direct()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_received_direct());
        }

        // optional int32 num_received_broadcast = 3;
        if (has_num_received_broadcast()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_received_broadcast());
        }

        // optional int32 num_sent_direct = 4;
        if (has_num_sent_direct()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_sent_direct());
        }

        // optional int32 num_sent_broadcast = 5;
        if (has_num_sent_broadcast()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_sent_broadcast());
        }

        // optional int32 num_aborted_unknown_reason = 6;
        if (has_num_aborted_unknown_reason()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_aborted_unknown_reason());
        }

        // optional int32 num_aborted_unrecognized = 7;
        if (has_num_aborted_unrecognized()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_aborted_unrecognized());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAudioVideoDevice_CECCommand*>(&from));
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_opcode()) {
            set_opcode(from.opcode());
        }
        if (from.has_num_received_direct()) {
            set_num_received_direct(from.num_received_direct());
        }
        if (from.has_num_received_broadcast()) {
            set_num_received_broadcast(from.num_received_broadcast());
        }
        if (from.has_num_sent_direct()) {
            set_num_sent_direct(from.num_sent_direct());
        }
        if (from.has_num_sent_broadcast()) {
            set_num_sent_broadcast(from.num_sent_broadcast());
        }
        if (from.has_num_aborted_unknown_reason()) {
            set_num_aborted_unknown_reason(from.num_aborted_unknown_reason());
        }
        if (from.has_num_aborted_unrecognized()) {
            set_num_aborted_unrecognized(from.num_aborted_unrecognized());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice_CECCommand& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::IsInitialized() const
{

    return true;
}

void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::Swap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::InternalSwap(SystemProfileProto_ExternalAudioVideoDevice_CECCommand* other)
{
    std::swap(opcode_, other->opcode_);
    std::swap(num_received_direct_, other->num_received_direct_);
    std::swap(num_received_broadcast_, other->num_received_broadcast_);
    std::swap(num_sent_direct_, other->num_sent_direct_);
    std::swap(num_sent_broadcast_, other->num_sent_broadcast_);
    std::swap(num_aborted_unknown_reason_, other->num_aborted_unknown_reason_);
    std::swap(num_aborted_unrecognized_, other->num_aborted_unrecognized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_ExternalAudioVideoDevice_CECCommand::GetTypeName() const
{
    return "metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAudioVideoDevice::kManufacturerNameFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kModelNameFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kProductCodeFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kAvDeviceTypeFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kManufactureYearFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kManufactureWeekFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kHorizontalResolutionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kVerticalResolutionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kAudioDescriptionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kPositionInSetupFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kIsInPathToTvFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kCecVersionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kCecCommandFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kFrameRateFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kColorEncodingFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kBitDepthFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kTmdsFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kHdr10SupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kDolbyVisionSupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kEotfSupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kYuvSupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kYuv420SupportFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kMaximumSupportedHdcpVersionFieldNumber;
const int SystemProfileProto_ExternalAudioVideoDevice::kCurrentHdcpVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAudioVideoDevice::SystemProfileProto_ExternalAudioVideoDevice()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice)
}

void SystemProfileProto_ExternalAudioVideoDevice::InitAsDefaultInstance()
{
}

SystemProfileProto_ExternalAudioVideoDevice::SystemProfileProto_ExternalAudioVideoDevice(const SystemProfileProto_ExternalAudioVideoDevice& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAudioVideoDevice)
}

void SystemProfileProto_ExternalAudioVideoDevice::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    manufacturer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    manufacture_year_ = 0;
    manufacture_week_ = 0;
    horizontal_resolution_ = 0;
    vertical_resolution_ = 0;
    position_in_setup_ = 0;
    is_in_path_to_tv_ = false;
    cec_version_ = 0;
    frame_rate_ = 0;
    color_encoding_ = 0;
    bit_depth_ = 0;
    tmds_ = 0;
    hdr10_support_ = false;
    dolby_vision_support_ = false;
    eotf_support_ = 0;
    yuv_support_ = false;
    yuv_420_support_ = false;
    maximum_supported_hdcp_version_ = 0;
    current_hdcp_version_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_ExternalAudioVideoDevice::~SystemProfileProto_ExternalAudioVideoDevice()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    SharedDtor();
}

void SystemProfileProto_ExternalAudioVideoDevice::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    manufacturer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_ExternalAudioVideoDevice::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_ExternalAudioVideoDevice& SystemProfileProto_ExternalAudioVideoDevice::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_ExternalAudioVideoDevice* SystemProfileProto_ExternalAudioVideoDevice::default_instance_ = NULL;

SystemProfileProto_ExternalAudioVideoDevice* SystemProfileProto_ExternalAudioVideoDevice::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_ExternalAudioVideoDevice* n = new SystemProfileProto_ExternalAudioVideoDevice;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_ExternalAudioVideoDevice::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                 \
    _Pragma("clang diagnostic push")                                                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_ExternalAudioVideoDevice, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_ExternalAudioVideoDevice*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 247u) {
        ZR_(manufacture_year_, vertical_resolution_);
        if (has_manufacturer_name()) {
            manufacturer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_model_name()) {
            model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_product_code()) {
            product_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (_has_bits_[8 / 32] & 60928u) {
        ZR_(position_in_setup_, cec_version_);
        ZR_(frame_rate_, bit_depth_);
        is_in_path_to_tv_ = false;
    }
    if (_has_bits_[16 / 32] & 16711680u) {
        ZR_(hdr10_support_, current_hdcp_version_);
        tmds_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    av_device_type_.Clear();
    audio_description_.Clear();
    cec_command_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_ExternalAudioVideoDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_ExternalAudioVideoDevice, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string manufacturer_name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_manufacturer_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_model_name;
            break;
        }

        // optional string model_name = 2;
        case 2: {
            if (tag == 18) {
            parse_model_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_model_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_product_code;
            break;
        }

        // optional string product_code = 3;
        case 3: {
            if (tag == 26) {
            parse_product_code:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_product_code()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_av_device_type;
            break;
        }

        // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
        case 4: {
            if (tag == 32) {
            parse_av_device_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value)) {
                    add_av_device_type(static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(tag);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else if (tag == 34) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                    input,
                    4,
                    ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid,
                    &unknown_fields_stream,
                    this->mutable_av_device_type())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_av_device_type;
            if (input->ExpectTag(40))
                goto parse_manufacture_year;
            break;
        }

        // optional int32 manufacture_year = 5;
        case 5: {
            if (tag == 40) {
            parse_manufacture_year:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &manufacture_year_)));
                set_has_manufacture_year();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_manufacture_week;
            break;
        }

        // optional int32 manufacture_week = 6;
        case 6: {
            if (tag == 48) {
            parse_manufacture_week:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &manufacture_week_)));
                set_has_manufacture_week();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_horizontal_resolution;
            break;
        }

        // optional int32 horizontal_resolution = 7;
        case 7: {
            if (tag == 56) {
            parse_horizontal_resolution:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &horizontal_resolution_)));
                set_has_horizontal_resolution();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_vertical_resolution;
            break;
        }

        // optional int32 vertical_resolution = 8;
        case 8: {
            if (tag == 64) {
            parse_vertical_resolution:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &vertical_resolution_)));
                set_has_vertical_resolution();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_audio_description;
            break;
        }

        // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
        case 9: {
            if (tag == 74) {
            parse_audio_description:
                DO_(input->IncrementRecursionDepth());
            parse_loop_audio_description:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_audio_description()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_loop_audio_description;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(80))
                goto parse_position_in_setup;
            break;
        }

        // optional int32 position_in_setup = 10;
        case 10: {
            if (tag == 80) {
            parse_position_in_setup:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &position_in_setup_)));
                set_has_position_in_setup();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_is_in_path_to_tv;
            break;
        }

        // optional bool is_in_path_to_tv = 11;
        case 11: {
            if (tag == 88) {
            parse_is_in_path_to_tv:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_in_path_to_tv_)));
                set_has_is_in_path_to_tv();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_cec_version;
            break;
        }

        // optional int32 cec_version = 12;
        case 12: {
            if (tag == 96) {
            parse_cec_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &cec_version_)));
                set_has_cec_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_cec_command;
            break;
        }

        // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
        case 13: {
            if (tag == 106) {
            parse_cec_command:
                DO_(input->IncrementRecursionDepth());
            parse_loop_cec_command:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_cec_command()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_loop_cec_command;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(112))
                goto parse_frame_rate;
            break;
        }

        // optional int32 frame_rate = 14;
        case 14: {
            if (tag == 112) {
            parse_frame_rate:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &frame_rate_)));
                set_has_frame_rate();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_color_encoding;
            break;
        }

        // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
        case 15: {
            if (tag == 120) {
            parse_color_encoding:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(value)) {
                    set_color_encoding(static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(120);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_bit_depth;
            break;
        }

        // optional int32 bit_depth = 16;
        case 16: {
            if (tag == 128) {
            parse_bit_depth:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &bit_depth_)));
                set_has_bit_depth();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(136))
                goto parse_tmds;
            break;
        }

        // optional int32 tmds = 17;
        case 17: {
            if (tag == 136) {
            parse_tmds:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &tmds_)));
                set_has_tmds();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_hdr10_support;
            break;
        }

        // optional bool hdr10_support = 18;
        case 18: {
            if (tag == 144) {
            parse_hdr10_support:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &hdr10_support_)));
                set_has_hdr10_support();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(152))
                goto parse_dolby_vision_support;
            break;
        }

        // optional bool dolby_vision_support = 19;
        case 19: {
            if (tag == 152) {
            parse_dolby_vision_support:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &dolby_vision_support_)));
                set_has_dolby_vision_support();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(160))
                goto parse_eotf_support;
            break;
        }

        // optional int32 eotf_support = 20;
        case 20: {
            if (tag == 160) {
            parse_eotf_support:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &eotf_support_)));
                set_has_eotf_support();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(168))
                goto parse_yuv_support;
            break;
        }

        // optional bool yuv_support = 21;
        case 21: {
            if (tag == 168) {
            parse_yuv_support:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &yuv_support_)));
                set_has_yuv_support();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(176))
                goto parse_yuv_420_support;
            break;
        }

        // optional bool yuv_420_support = 22;
        case 22: {
            if (tag == 176) {
            parse_yuv_420_support:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &yuv_420_support_)));
                set_has_yuv_420_support();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(184))
                goto parse_maximum_supported_hdcp_version;
            break;
        }

        // optional int32 maximum_supported_hdcp_version = 23;
        case 23: {
            if (tag == 184) {
            parse_maximum_supported_hdcp_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &maximum_supported_hdcp_version_)));
                set_has_maximum_supported_hdcp_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(192))
                goto parse_current_hdcp_version;
            break;
        }

        // optional int32 current_hdcp_version = 24;
        case 24: {
            if (tag == 192) {
            parse_current_hdcp_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &current_hdcp_version_)));
                set_has_current_hdcp_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    return false;
#undef DO_
}

void SystemProfileProto_ExternalAudioVideoDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    // optional string manufacturer_name = 1;
    if (has_manufacturer_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->manufacturer_name(), output);
    }

    // optional string model_name = 2;
    if (has_model_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->model_name(), output);
    }

    // optional string product_code = 3;
    if (has_product_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->product_code(), output);
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
    for (int i = 0; i < this->av_device_type_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            4, this->av_device_type(i), output);
    }

    // optional int32 manufacture_year = 5;
    if (has_manufacture_year()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->manufacture_year(), output);
    }

    // optional int32 manufacture_week = 6;
    if (has_manufacture_week()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->manufacture_week(), output);
    }

    // optional int32 horizontal_resolution = 7;
    if (has_horizontal_resolution()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->horizontal_resolution(), output);
    }

    // optional int32 vertical_resolution = 8;
    if (has_vertical_resolution()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vertical_resolution(), output);
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
    for (unsigned int i = 0, n = this->audio_description_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, this->audio_description(i), output);
    }

    // optional int32 position_in_setup = 10;
    if (has_position_in_setup()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->position_in_setup(), output);
    }

    // optional bool is_in_path_to_tv = 11;
    if (has_is_in_path_to_tv()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_in_path_to_tv(), output);
    }

    // optional int32 cec_version = 12;
    if (has_cec_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cec_version(), output);
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
    for (unsigned int i = 0, n = this->cec_command_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, this->cec_command(i), output);
    }

    // optional int32 frame_rate = 14;
    if (has_frame_rate()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->frame_rate(), output);
    }

    // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
    if (has_color_encoding()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            15, this->color_encoding(), output);
    }

    // optional int32 bit_depth = 16;
    if (has_bit_depth()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bit_depth(), output);
    }

    // optional int32 tmds = 17;
    if (has_tmds()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tmds(), output);
    }

    // optional bool hdr10_support = 18;
    if (has_hdr10_support()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->hdr10_support(), output);
    }

    // optional bool dolby_vision_support = 19;
    if (has_dolby_vision_support()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->dolby_vision_support(), output);
    }

    // optional int32 eotf_support = 20;
    if (has_eotf_support()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->eotf_support(), output);
    }

    // optional bool yuv_support = 21;
    if (has_yuv_support()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->yuv_support(), output);
    }

    // optional bool yuv_420_support = 22;
    if (has_yuv_420_support()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->yuv_420_support(), output);
    }

    // optional int32 maximum_supported_hdcp_version = 23;
    if (has_maximum_supported_hdcp_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->maximum_supported_hdcp_version(), output);
    }

    // optional int32 current_hdcp_version = 24;
    if (has_current_hdcp_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->current_hdcp_version(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAudioVideoDevice)
}

int SystemProfileProto_ExternalAudioVideoDevice::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 247u) {
        // optional string manufacturer_name = 1;
        if (has_manufacturer_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->manufacturer_name());
        }

        // optional string model_name = 2;
        if (has_model_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->model_name());
        }

        // optional string product_code = 3;
        if (has_product_code()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->product_code());
        }

        // optional int32 manufacture_year = 5;
        if (has_manufacture_year()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->manufacture_year());
        }

        // optional int32 manufacture_week = 6;
        if (has_manufacture_week()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->manufacture_week());
        }

        // optional int32 horizontal_resolution = 7;
        if (has_horizontal_resolution()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->horizontal_resolution());
        }

        // optional int32 vertical_resolution = 8;
        if (has_vertical_resolution()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->vertical_resolution());
        }
    }
    if (_has_bits_[9 / 32] & 60928u) {
        // optional int32 position_in_setup = 10;
        if (has_position_in_setup()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->position_in_setup());
        }

        // optional bool is_in_path_to_tv = 11;
        if (has_is_in_path_to_tv()) {
            total_size += 1 + 1;
        }

        // optional int32 cec_version = 12;
        if (has_cec_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cec_version());
        }

        // optional int32 frame_rate = 14;
        if (has_frame_rate()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->frame_rate());
        }

        // optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
        if (has_color_encoding()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->color_encoding());
        }

        // optional int32 bit_depth = 16;
        if (has_bit_depth()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->bit_depth());
        }
    }
    if (_has_bits_[16 / 32] & 16711680u) {
        // optional int32 tmds = 17;
        if (has_tmds()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->tmds());
        }

        // optional bool hdr10_support = 18;
        if (has_hdr10_support()) {
            total_size += 2 + 1;
        }

        // optional bool dolby_vision_support = 19;
        if (has_dolby_vision_support()) {
            total_size += 2 + 1;
        }

        // optional int32 eotf_support = 20;
        if (has_eotf_support()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->eotf_support());
        }

        // optional bool yuv_support = 21;
        if (has_yuv_support()) {
            total_size += 2 + 1;
        }

        // optional bool yuv_420_support = 22;
        if (has_yuv_420_support()) {
            total_size += 2 + 1;
        }

        // optional int32 maximum_supported_hdcp_version = 23;
        if (has_maximum_supported_hdcp_version()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->maximum_supported_hdcp_version());
        }

        // optional int32 current_hdcp_version = 24;
        if (has_current_hdcp_version()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->current_hdcp_version());
        }
    }
    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
    {
        int data_size = 0;
        for (int i = 0; i < this->av_device_type_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
                this->av_device_type(i));
        }
        total_size += 1 * this->av_device_type_size() + data_size;
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
    total_size += 1 * this->audio_description_size();
    for (int i = 0; i < this->audio_description_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->audio_description(i));
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
    total_size += 1 * this->cec_command_size();
    for (int i = 0; i < this->cec_command_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->cec_command(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_ExternalAudioVideoDevice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAudioVideoDevice*>(&from));
}

void SystemProfileProto_ExternalAudioVideoDevice::MergeFrom(const SystemProfileProto_ExternalAudioVideoDevice& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    av_device_type_.MergeFrom(from.av_device_type_);
    audio_description_.MergeFrom(from.audio_description_);
    cec_command_.MergeFrom(from.cec_command_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_manufacturer_name()) {
            set_has_manufacturer_name();
            manufacturer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_name_);
        }
        if (from.has_model_name()) {
            set_has_model_name();
            model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
        }
        if (from.has_product_code()) {
            set_has_product_code();
            product_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_code_);
        }
        if (from.has_manufacture_year()) {
            set_manufacture_year(from.manufacture_year());
        }
        if (from.has_manufacture_week()) {
            set_manufacture_week(from.manufacture_week());
        }
        if (from.has_horizontal_resolution()) {
            set_horizontal_resolution(from.horizontal_resolution());
        }
        if (from.has_vertical_resolution()) {
            set_vertical_resolution(from.vertical_resolution());
        }
    }
    if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
        if (from.has_position_in_setup()) {
            set_position_in_setup(from.position_in_setup());
        }
        if (from.has_is_in_path_to_tv()) {
            set_is_in_path_to_tv(from.is_in_path_to_tv());
        }
        if (from.has_cec_version()) {
            set_cec_version(from.cec_version());
        }
        if (from.has_frame_rate()) {
            set_frame_rate(from.frame_rate());
        }
        if (from.has_color_encoding()) {
            set_color_encoding(from.color_encoding());
        }
        if (from.has_bit_depth()) {
            set_bit_depth(from.bit_depth());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_tmds()) {
            set_tmds(from.tmds());
        }
        if (from.has_hdr10_support()) {
            set_hdr10_support(from.hdr10_support());
        }
        if (from.has_dolby_vision_support()) {
            set_dolby_vision_support(from.dolby_vision_support());
        }
        if (from.has_eotf_support()) {
            set_eotf_support(from.eotf_support());
        }
        if (from.has_yuv_support()) {
            set_yuv_support(from.yuv_support());
        }
        if (from.has_yuv_420_support()) {
            set_yuv_420_support(from.yuv_420_support());
        }
        if (from.has_maximum_supported_hdcp_version()) {
            set_maximum_supported_hdcp_version(from.maximum_supported_hdcp_version());
        }
        if (from.has_current_hdcp_version()) {
            set_current_hdcp_version(from.current_hdcp_version());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_ExternalAudioVideoDevice::CopyFrom(const SystemProfileProto_ExternalAudioVideoDevice& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAudioVideoDevice)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_ExternalAudioVideoDevice::IsInitialized() const
{

    return true;
}

void SystemProfileProto_ExternalAudioVideoDevice::Swap(SystemProfileProto_ExternalAudioVideoDevice* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_ExternalAudioVideoDevice::InternalSwap(SystemProfileProto_ExternalAudioVideoDevice* other)
{
    manufacturer_name_.Swap(&other->manufacturer_name_);
    model_name_.Swap(&other->model_name_);
    product_code_.Swap(&other->product_code_);
    av_device_type_.UnsafeArenaSwap(&other->av_device_type_);
    std::swap(manufacture_year_, other->manufacture_year_);
    std::swap(manufacture_week_, other->manufacture_week_);
    std::swap(horizontal_resolution_, other->horizontal_resolution_);
    std::swap(vertical_resolution_, other->vertical_resolution_);
    audio_description_.UnsafeArenaSwap(&other->audio_description_);
    std::swap(position_in_setup_, other->position_in_setup_);
    std::swap(is_in_path_to_tv_, other->is_in_path_to_tv_);
    std::swap(cec_version_, other->cec_version_);
    cec_command_.UnsafeArenaSwap(&other->cec_command_);
    std::swap(frame_rate_, other->frame_rate_);
    std::swap(color_encoding_, other->color_encoding_);
    std::swap(bit_depth_, other->bit_depth_);
    std::swap(tmds_, other->tmds_);
    std::swap(hdr10_support_, other->hdr10_support_);
    std::swap(dolby_vision_support_, other->dolby_vision_support_);
    std::swap(eotf_support_, other->eotf_support_);
    std::swap(yuv_support_, other->yuv_support_);
    std::swap(yuv_420_support_, other->yuv_420_support_);
    std::swap(maximum_supported_hdcp_version_, other->maximum_supported_hdcp_version_);
    std::swap(current_hdcp_version_, other->current_hdcp_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_ExternalAudioVideoDevice::GetTypeName() const
{
    return "metrics.SystemProfileProto.ExternalAudioVideoDevice";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_ExternalAccessPoint(
    SystemProfileProto_ExternalAccessPoint* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_ExternalAccessPoint::kManufacturerFieldNumber;
const int SystemProfileProto_ExternalAccessPoint::kModelNameFieldNumber;
const int SystemProfileProto_ExternalAccessPoint::kModelNumberFieldNumber;
const int SystemProfileProto_ExternalAccessPoint::kDeviceNameFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_ExternalAccessPoint::SystemProfileProto_ExternalAccessPoint()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.ExternalAccessPoint)
}

void SystemProfileProto_ExternalAccessPoint::InitAsDefaultInstance()
{
}

SystemProfileProto_ExternalAccessPoint::SystemProfileProto_ExternalAccessPoint(const SystemProfileProto_ExternalAccessPoint& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.ExternalAccessPoint)
}

void SystemProfileProto_ExternalAccessPoint::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_ExternalAccessPoint::~SystemProfileProto_ExternalAccessPoint()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.ExternalAccessPoint)
    SharedDtor();
}

void SystemProfileProto_ExternalAccessPoint::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    model_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_ExternalAccessPoint::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_ExternalAccessPoint& SystemProfileProto_ExternalAccessPoint::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_ExternalAccessPoint* SystemProfileProto_ExternalAccessPoint::default_instance_ = NULL;

SystemProfileProto_ExternalAccessPoint* SystemProfileProto_ExternalAccessPoint::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_ExternalAccessPoint* n = new SystemProfileProto_ExternalAccessPoint;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_ExternalAccessPoint::Clear()
{
    // @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.ExternalAccessPoint)
    if (_has_bits_[0 / 32] & 15u) {
        if (has_manufacturer()) {
            manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_model_name()) {
            model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_model_number()) {
            model_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_device_name()) {
            device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_ExternalAccessPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_ExternalAccessPoint, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.ExternalAccessPoint)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string manufacturer = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_manufacturer()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_model_name;
            break;
        }

        // optional string model_name = 2;
        case 2: {
            if (tag == 18) {
            parse_model_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_model_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_model_number;
            break;
        }

        // optional string model_number = 3;
        case 3: {
            if (tag == 26) {
            parse_model_number:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_model_number()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_device_name;
            break;
        }

        // optional string device_name = 4;
        case 4: {
            if (tag == 34) {
            parse_device_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.ExternalAccessPoint)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.ExternalAccessPoint)
    return false;
#undef DO_
}

void SystemProfileProto_ExternalAccessPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.ExternalAccessPoint)
    // optional string manufacturer = 1;
    if (has_manufacturer()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->manufacturer(), output);
    }

    // optional string model_name = 2;
    if (has_model_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->model_name(), output);
    }

    // optional string model_number = 3;
    if (has_model_number()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->model_number(), output);
    }

    // optional string device_name = 4;
    if (has_device_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->device_name(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.ExternalAccessPoint)
}

int SystemProfileProto_ExternalAccessPoint::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.ExternalAccessPoint)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional string manufacturer = 1;
        if (has_manufacturer()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->manufacturer());
        }

        // optional string model_name = 2;
        if (has_model_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->model_name());
        }

        // optional string model_number = 3;
        if (has_model_number()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->model_number());
        }

        // optional string device_name = 4;
        if (has_device_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_name());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_ExternalAccessPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_ExternalAccessPoint*>(&from));
}

void SystemProfileProto_ExternalAccessPoint::MergeFrom(const SystemProfileProto_ExternalAccessPoint& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.ExternalAccessPoint)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_manufacturer()) {
            set_has_manufacturer();
            manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
        }
        if (from.has_model_name()) {
            set_has_model_name();
            model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
        }
        if (from.has_model_number()) {
            set_has_model_number();
            model_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_number_);
        }
        if (from.has_device_name()) {
            set_has_device_name();
            device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_ExternalAccessPoint::CopyFrom(const SystemProfileProto_ExternalAccessPoint& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.ExternalAccessPoint)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_ExternalAccessPoint::IsInitialized() const
{

    return true;
}

void SystemProfileProto_ExternalAccessPoint::Swap(SystemProfileProto_ExternalAccessPoint* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_ExternalAccessPoint::InternalSwap(SystemProfileProto_ExternalAccessPoint* other)
{
    manufacturer_.Swap(&other->manufacturer_);
    model_name_.Swap(&other->model_name_);
    model_number_.Swap(&other->model_number_);
    device_name_.Swap(&other->device_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_ExternalAccessPoint::GetTypeName() const
{
    return "metrics.SystemProfileProto.ExternalAccessPoint";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForSystemProfileProto_AntiVirusProduct(
    SystemProfileProto_AntiVirusProduct* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto_AntiVirusProduct::kProductNameFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductNameHashFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductVersionFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductVersionHashFieldNumber;
const int SystemProfileProto_AntiVirusProduct::kProductStateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto_AntiVirusProduct::SystemProfileProto_AntiVirusProduct()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto.AntiVirusProduct)
}

void SystemProfileProto_AntiVirusProduct::InitAsDefaultInstance()
{
}

SystemProfileProto_AntiVirusProduct::SystemProfileProto_AntiVirusProduct(const SystemProfileProto_AntiVirusProduct& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto.AntiVirusProduct)
}

void SystemProfileProto_AntiVirusProduct::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_name_hash_ = 0u;
    product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_version_hash_ = 0u;
    product_state_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto_AntiVirusProduct::~SystemProfileProto_AntiVirusProduct()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto.AntiVirusProduct)
    SharedDtor();
}

void SystemProfileProto_AntiVirusProduct::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    product_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SystemProfileProto_AntiVirusProduct::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto_AntiVirusProduct& SystemProfileProto_AntiVirusProduct::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto_AntiVirusProduct* SystemProfileProto_AntiVirusProduct::default_instance_ = NULL;

SystemProfileProto_AntiVirusProduct* SystemProfileProto_AntiVirusProduct::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto_AntiVirusProduct* n = new SystemProfileProto_AntiVirusProduct;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto_AntiVirusProduct::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto.AntiVirusProduct)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                         \
    _Pragma("clang diagnostic push")                                                                                          \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto_AntiVirusProduct, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto_AntiVirusProduct*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(product_name_hash_, product_state_);
        if (has_product_name()) {
            product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_product_version()) {
            product_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto_AntiVirusProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto_AntiVirusProduct, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto.AntiVirusProduct)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string product_name = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_product_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(21))
                goto parse_product_name_hash;
            break;
        }

        // optional fixed32 product_name_hash = 2;
        case 2: {
            if (tag == 21) {
            parse_product_name_hash:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &product_name_hash_)));
                set_has_product_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_product_version;
            break;
        }

        // optional string product_version = 3;
        case 3: {
            if (tag == 26) {
            parse_product_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_product_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(37))
                goto parse_product_version_hash;
            break;
        }

        // optional fixed32 product_version_hash = 4;
        case 4: {
            if (tag == 37) {
            parse_product_version_hash:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &product_version_hash_)));
                set_has_product_version_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_product_state;
            break;
        }

        // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
        case 5: {
            if (tag == 40) {
            parse_product_state:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_AntiVirusState_IsValid(value)) {
                    set_product_state(static_cast<::metrics::SystemProfileProto_AntiVirusState>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(40);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto.AntiVirusProduct)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto.AntiVirusProduct)
    return false;
#undef DO_
}

void SystemProfileProto_AntiVirusProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto.AntiVirusProduct)
    // optional string product_name = 1;
    if (has_product_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->product_name(), output);
    }

    // optional fixed32 product_name_hash = 2;
    if (has_product_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->product_name_hash(), output);
    }

    // optional string product_version = 3;
    if (has_product_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->product_version(), output);
    }

    // optional fixed32 product_version_hash = 4;
    if (has_product_version_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->product_version_hash(), output);
    }

    // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
    if (has_product_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            5, this->product_state(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto.AntiVirusProduct)
}

int SystemProfileProto_AntiVirusProduct::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto.AntiVirusProduct)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string product_name = 1;
        if (has_product_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->product_name());
        }

        // optional fixed32 product_name_hash = 2;
        if (has_product_name_hash()) {
            total_size += 1 + 4;
        }

        // optional string product_version = 3;
        if (has_product_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->product_version());
        }

        // optional fixed32 product_version_hash = 4;
        if (has_product_version_hash()) {
            total_size += 1 + 4;
        }

        // optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
        if (has_product_state()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->product_state());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto_AntiVirusProduct::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto_AntiVirusProduct*>(&from));
}

void SystemProfileProto_AntiVirusProduct::MergeFrom(const SystemProfileProto_AntiVirusProduct& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto.AntiVirusProduct)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_product_name()) {
            set_has_product_name();
            product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
        }
        if (from.has_product_name_hash()) {
            set_product_name_hash(from.product_name_hash());
        }
        if (from.has_product_version()) {
            set_has_product_version();
            product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
        }
        if (from.has_product_version_hash()) {
            set_product_version_hash(from.product_version_hash());
        }
        if (from.has_product_state()) {
            set_product_state(from.product_state());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto_AntiVirusProduct::CopyFrom(const SystemProfileProto_AntiVirusProduct& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto.AntiVirusProduct)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto_AntiVirusProduct::IsInitialized() const
{

    return true;
}

void SystemProfileProto_AntiVirusProduct::Swap(SystemProfileProto_AntiVirusProduct* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto_AntiVirusProduct::InternalSwap(SystemProfileProto_AntiVirusProduct* other)
{
    product_name_.Swap(&other->product_name_);
    std::swap(product_name_hash_, other->product_name_hash_);
    product_version_.Swap(&other->product_version_);
    std::swap(product_version_hash_, other->product_version_hash_);
    std::swap(product_state_, other->product_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto_AntiVirusProduct::GetTypeName() const
{
    return "metrics.SystemProfileProto.AntiVirusProduct";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemProfileProto::kBuildTimestampFieldNumber;
const int SystemProfileProto::kAppVersionFieldNumber;
const int SystemProfileProto::kBrandCodeFieldNumber;
const int SystemProfileProto::kChannelFieldNumber;
const int SystemProfileProto::kIsAsanBuildFieldNumber;
const int SystemProfileProto::kUmaEnabledDateFieldNumber;
const int SystemProfileProto::kInstallDateFieldNumber;
const int SystemProfileProto::kApplicationLocaleFieldNumber;
const int SystemProfileProto::kOsFieldNumber;
const int SystemProfileProto::kHardwareFieldNumber;
const int SystemProfileProto::kNetworkFieldNumber;
const int SystemProfileProto::kGoogleUpdateFieldNumber;
const int SystemProfileProto::kPluginFieldNumber;
const int SystemProfileProto::kStabilityFieldNumber;
const int SystemProfileProto::kFieldTrialFieldNumber;
const int SystemProfileProto::kExternalAudioVideoDeviceFieldNumber;
const int SystemProfileProto::kExternalAccessPointFieldNumber;
const int SystemProfileProto::kMultiProfileUserCountFieldNumber;
const int SystemProfileProto::kOccupiedExtensionBucketFieldNumber;
const int SystemProfileProto::kOffstoreExtensionsStateFieldNumber;
const int SystemProfileProto::kUmaDefaultStateFieldNumber;
const int SystemProfileProto::kAntivirusProductFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemProfileProto::SystemProfileProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.SystemProfileProto)
}

void SystemProfileProto::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    os_ = const_cast<::metrics::SystemProfileProto_OS*>(
        ::metrics::SystemProfileProto_OS::internal_default_instance());
#else
    os_ = const_cast<::metrics::SystemProfileProto_OS*>(&::metrics::SystemProfileProto_OS::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    hardware_ = const_cast<::metrics::SystemProfileProto_Hardware*>(
        ::metrics::SystemProfileProto_Hardware::internal_default_instance());
#else
    hardware_ = const_cast<::metrics::SystemProfileProto_Hardware*>(&::metrics::SystemProfileProto_Hardware::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    network_ = const_cast<::metrics::SystemProfileProto_Network*>(
        ::metrics::SystemProfileProto_Network::internal_default_instance());
#else
    network_ = const_cast<::metrics::SystemProfileProto_Network*>(&::metrics::SystemProfileProto_Network::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    google_update_ = const_cast<::metrics::SystemProfileProto_GoogleUpdate*>(
        ::metrics::SystemProfileProto_GoogleUpdate::internal_default_instance());
#else
    google_update_ = const_cast<::metrics::SystemProfileProto_GoogleUpdate*>(&::metrics::SystemProfileProto_GoogleUpdate::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    stability_ = const_cast<::metrics::SystemProfileProto_Stability*>(
        ::metrics::SystemProfileProto_Stability::internal_default_instance());
#else
    stability_ = const_cast<::metrics::SystemProfileProto_Stability*>(&::metrics::SystemProfileProto_Stability::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    external_access_point_ = const_cast<::metrics::SystemProfileProto_ExternalAccessPoint*>(
        ::metrics::SystemProfileProto_ExternalAccessPoint::internal_default_instance());
#else
    external_access_point_ = const_cast<::metrics::SystemProfileProto_ExternalAccessPoint*>(&::metrics::SystemProfileProto_ExternalAccessPoint::default_instance());
#endif
}

SystemProfileProto::SystemProfileProto(const SystemProfileProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.SystemProfileProto)
}

void SystemProfileProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    build_timestamp_ = GOOGLE_LONGLONG(0);
    app_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    brand_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    channel_ = 0;
    is_asan_build_ = false;
    uma_enabled_date_ = GOOGLE_LONGLONG(0);
    install_date_ = GOOGLE_LONGLONG(0);
    application_locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    os_ = NULL;
    hardware_ = NULL;
    network_ = NULL;
    google_update_ = NULL;
    stability_ = NULL;
    external_access_point_ = NULL;
    multi_profile_user_count_ = 0u;
    offstore_extensions_state_ = 0;
    uma_default_state_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemProfileProto::~SystemProfileProto()
{
    // @@protoc_insertion_point(destructor:metrics.SystemProfileProto)
    SharedDtor();
}

void SystemProfileProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    app_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    brand_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    application_locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete os_;
        delete hardware_;
        delete network_;
        delete google_update_;
        delete stability_;
        delete external_access_point_;
    }
}

void SystemProfileProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemProfileProto& SystemProfileProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_system_5fprofile_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_system_5fprofile_2eproto();
#endif
    return *default_instance_;
}

SystemProfileProto* SystemProfileProto::default_instance_ = NULL;

SystemProfileProto* SystemProfileProto::New(::google::protobuf::Arena* arena) const
{
    SystemProfileProto* n = new SystemProfileProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SystemProfileProto::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.SystemProfileProto)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                        \
    _Pragma("clang diagnostic push")                                                                         \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(SystemProfileProto, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<SystemProfileProto*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(channel_, install_date_);
        build_timestamp_ = GOOGLE_LONGLONG(0);
        if (has_app_version()) {
            app_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_brand_code()) {
            brand_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_application_locale()) {
            application_locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (_has_bits_[8 / 32] & 12032u) {
        if (has_os()) {
            if (os_ != NULL)
                os_->::metrics::SystemProfileProto_OS::Clear();
        }
        if (has_hardware()) {
            if (hardware_ != NULL)
                hardware_->::metrics::SystemProfileProto_Hardware::Clear();
        }
        if (has_network()) {
            if (network_ != NULL)
                network_->::metrics::SystemProfileProto_Network::Clear();
        }
        if (has_google_update()) {
            if (google_update_ != NULL)
                google_update_->::metrics::SystemProfileProto_GoogleUpdate::Clear();
        }
        if (has_stability()) {
            if (stability_ != NULL)
                stability_->::metrics::SystemProfileProto_Stability::Clear();
        }
    }
    if (_has_bits_[16 / 32] & 1769472u) {
        ZR_(multi_profile_user_count_, offstore_extensions_state_);
        if (has_external_access_point()) {
            if (external_access_point_ != NULL)
                external_access_point_->::metrics::SystemProfileProto_ExternalAccessPoint::Clear();
        }
        uma_default_state_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    plugin_.Clear();
    field_trial_.Clear();
    external_audio_video_device_.Clear();
    occupied_extension_bucket_.Clear();
    antivirus_product_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SystemProfileProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSystemProfileProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.SystemProfileProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 build_timestamp = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &build_timestamp_)));
                set_has_build_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_app_version;
            break;
        }

        // optional string app_version = 2;
        case 2: {
            if (tag == 18) {
            parse_app_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_app_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_uma_enabled_date;
            break;
        }

        // optional int64 uma_enabled_date = 3;
        case 3: {
            if (tag == 24) {
            parse_uma_enabled_date:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &uma_enabled_date_)));
                set_has_uma_enabled_date();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_application_locale;
            break;
        }

        // optional string application_locale = 4;
        case 4: {
            if (tag == 34) {
            parse_application_locale:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_application_locale()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_os;
            break;
        }

        // optional .metrics.SystemProfileProto.OS os = 5;
        case 5: {
            if (tag == 42) {
            parse_os:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_os()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_hardware;
            break;
        }

        // optional .metrics.SystemProfileProto.Hardware hardware = 6;
        case 6: {
            if (tag == 50) {
            parse_hardware:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_hardware()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_plugin;
            break;
        }

        // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
        case 7: {
            if (tag == 58) {
            parse_plugin:
                DO_(input->IncrementRecursionDepth());
            parse_loop_plugin:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_plugin()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_loop_plugin;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(66))
                goto parse_stability;
            break;
        }

        // optional .metrics.SystemProfileProto.Stability stability = 8;
        case 8: {
            if (tag == 66) {
            parse_stability:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_stability()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_field_trial;
            break;
        }

        // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
        case 9: {
            if (tag == 74) {
            parse_field_trial:
                DO_(input->IncrementRecursionDepth());
            parse_loop_field_trial:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_field_trial()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_loop_field_trial;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(80))
                goto parse_channel;
            break;
        }

        // optional .metrics.SystemProfileProto.Channel channel = 10;
        case 10: {
            if (tag == 80) {
            parse_channel:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_Channel_IsValid(value)) {
                    set_channel(static_cast<::metrics::SystemProfileProto_Channel>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(80);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_google_update;
            break;
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
        case 11: {
            if (tag == 90) {
            parse_google_update:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_google_update()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_brand_code;
            break;
        }

        // optional string brand_code = 12;
        case 12: {
            if (tag == 98) {
            parse_brand_code:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_brand_code()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_network;
            break;
        }

        // optional .metrics.SystemProfileProto.Network network = 13;
        case 13: {
            if (tag == 106) {
            parse_network:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_network()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(114))
                goto parse_external_audio_video_device;
            break;
        }

        // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
        case 14: {
            if (tag == 114) {
            parse_external_audio_video_device:
                DO_(input->IncrementRecursionDepth());
            parse_loop_external_audio_video_device:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_external_audio_video_device()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(114))
                goto parse_loop_external_audio_video_device;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(122))
                goto parse_external_access_point;
            break;
        }

        // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
        case 15: {
            if (tag == 122) {
            parse_external_access_point:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_external_access_point()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_install_date;
            break;
        }

        // optional int64 install_date = 16;
        case 16: {
            if (tag == 128) {
            parse_install_date:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &install_date_)));
                set_has_install_date();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(136))
                goto parse_multi_profile_user_count;
            break;
        }

        // optional uint32 multi_profile_user_count = 17;
        case 17: {
            if (tag == 136) {
            parse_multi_profile_user_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &multi_profile_user_count_)));
                set_has_multi_profile_user_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_occupied_extension_bucket;
            break;
        }

        // repeated int32 occupied_extension_bucket = 18;
        case 18: {
            if (tag == 144) {
            parse_occupied_extension_bucket:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    2, 144, input, this->mutable_occupied_extension_bucket())));
            } else if (tag == 146) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, this->mutable_occupied_extension_bucket())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_occupied_extension_bucket;
            if (input->ExpectTag(152))
                goto parse_offstore_extensions_state;
            break;
        }

        // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
        case 19: {
            if (tag == 152) {
            parse_offstore_extensions_state:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_ExtensionsState_IsValid(value)) {
                    set_offstore_extensions_state(static_cast<::metrics::SystemProfileProto_ExtensionsState>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(152);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(160))
                goto parse_is_asan_build;
            break;
        }

        // optional bool is_asan_build = 20 [default = false];
        case 20: {
            if (tag == 160) {
            parse_is_asan_build:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_asan_build_)));
                set_has_is_asan_build();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(176))
                goto parse_uma_default_state;
            break;
        }

        // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
        case 22: {
            if (tag == 176) {
            parse_uma_default_state:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::SystemProfileProto_UmaDefaultState_IsValid(value)) {
                    set_uma_default_state(static_cast<::metrics::SystemProfileProto_UmaDefaultState>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(176);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(186))
                goto parse_antivirus_product;
            break;
        }

        // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
        case 23: {
            if (tag == 186) {
            parse_antivirus_product:
                DO_(input->IncrementRecursionDepth());
            parse_loop_antivirus_product:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_antivirus_product()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(186))
                goto parse_loop_antivirus_product;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.SystemProfileProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.SystemProfileProto)
    return false;
#undef DO_
}

void SystemProfileProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.SystemProfileProto)
    // optional int64 build_timestamp = 1;
    if (has_build_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->build_timestamp(), output);
    }

    // optional string app_version = 2;
    if (has_app_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->app_version(), output);
    }

    // optional int64 uma_enabled_date = 3;
    if (has_uma_enabled_date()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uma_enabled_date(), output);
    }

    // optional string application_locale = 4;
    if (has_application_locale()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->application_locale(), output);
    }

    // optional .metrics.SystemProfileProto.OS os = 5;
    if (has_os()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->os_, output);
    }

    // optional .metrics.SystemProfileProto.Hardware hardware = 6;
    if (has_hardware()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *this->hardware_, output);
    }

    // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
    for (unsigned int i = 0, n = this->plugin_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, this->plugin(i), output);
    }

    // optional .metrics.SystemProfileProto.Stability stability = 8;
    if (has_stability()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->stability_, output);
    }

    // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
    for (unsigned int i = 0, n = this->field_trial_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, this->field_trial(i), output);
    }

    // optional .metrics.SystemProfileProto.Channel channel = 10;
    if (has_channel()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            10, this->channel(), output);
    }

    // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
    if (has_google_update()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *this->google_update_, output);
    }

    // optional string brand_code = 12;
    if (has_brand_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            12, this->brand_code(), output);
    }

    // optional .metrics.SystemProfileProto.Network network = 13;
    if (has_network()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *this->network_, output);
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
    for (unsigned int i = 0, n = this->external_audio_video_device_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            14, this->external_audio_video_device(i), output);
    }

    // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
    if (has_external_access_point()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            15, *this->external_access_point_, output);
    }

    // optional int64 install_date = 16;
    if (has_install_date()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->install_date(), output);
    }

    // optional uint32 multi_profile_user_count = 17;
    if (has_multi_profile_user_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->multi_profile_user_count(), output);
    }

    // repeated int32 occupied_extension_bucket = 18;
    for (int i = 0; i < this->occupied_extension_bucket_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
            18, this->occupied_extension_bucket(i), output);
    }

    // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
    if (has_offstore_extensions_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            19, this->offstore_extensions_state(), output);
    }

    // optional bool is_asan_build = 20 [default = false];
    if (has_is_asan_build()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_asan_build(), output);
    }

    // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
    if (has_uma_default_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            22, this->uma_default_state(), output);
    }

    // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
    for (unsigned int i = 0, n = this->antivirus_product_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            23, this->antivirus_product(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.SystemProfileProto)
}

int SystemProfileProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.SystemProfileProto)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional int64 build_timestamp = 1;
        if (has_build_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->build_timestamp());
        }

        // optional string app_version = 2;
        if (has_app_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->app_version());
        }

        // optional string brand_code = 12;
        if (has_brand_code()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->brand_code());
        }

        // optional .metrics.SystemProfileProto.Channel channel = 10;
        if (has_channel()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
        }

        // optional bool is_asan_build = 20 [default = false];
        if (has_is_asan_build()) {
            total_size += 2 + 1;
        }

        // optional int64 uma_enabled_date = 3;
        if (has_uma_enabled_date()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->uma_enabled_date());
        }

        // optional int64 install_date = 16;
        if (has_install_date()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->install_date());
        }

        // optional string application_locale = 4;
        if (has_application_locale()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->application_locale());
        }
    }
    if (_has_bits_[8 / 32] & 12032u) {
        // optional .metrics.SystemProfileProto.OS os = 5;
        if (has_os()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->os_);
        }

        // optional .metrics.SystemProfileProto.Hardware hardware = 6;
        if (has_hardware()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->hardware_);
        }

        // optional .metrics.SystemProfileProto.Network network = 13;
        if (has_network()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->network_);
        }

        // optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
        if (has_google_update()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->google_update_);
        }

        // optional .metrics.SystemProfileProto.Stability stability = 8;
        if (has_stability()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->stability_);
        }
    }
    if (_has_bits_[16 / 32] & 1769472u) {
        // optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
        if (has_external_access_point()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->external_access_point_);
        }

        // optional uint32 multi_profile_user_count = 17;
        if (has_multi_profile_user_count()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->multi_profile_user_count());
        }

        // optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
        if (has_offstore_extensions_state()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->offstore_extensions_state());
        }

        // optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
        if (has_uma_default_state()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->uma_default_state());
        }
    }
    // repeated .metrics.SystemProfileProto.Plugin plugin = 7;
    total_size += 1 * this->plugin_size();
    for (int i = 0; i < this->plugin_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->plugin(i));
    }

    // repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
    total_size += 1 * this->field_trial_size();
    for (int i = 0; i < this->field_trial_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->field_trial(i));
    }

    // repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
    total_size += 1 * this->external_audio_video_device_size();
    for (int i = 0; i < this->external_audio_video_device_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->external_audio_video_device(i));
    }

    // repeated int32 occupied_extension_bucket = 18;
    {
        int data_size = 0;
        for (int i = 0; i < this->occupied_extension_bucket_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int32Size(this->occupied_extension_bucket(i));
        }
        total_size += 2 * this->occupied_extension_bucket_size() + data_size;
    }

    // repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
    total_size += 2 * this->antivirus_product_size();
    for (int i = 0; i < this->antivirus_product_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->antivirus_product(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SystemProfileProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SystemProfileProto*>(&from));
}

void SystemProfileProto::MergeFrom(const SystemProfileProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.SystemProfileProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    plugin_.MergeFrom(from.plugin_);
    field_trial_.MergeFrom(from.field_trial_);
    external_audio_video_device_.MergeFrom(from.external_audio_video_device_);
    occupied_extension_bucket_.MergeFrom(from.occupied_extension_bucket_);
    antivirus_product_.MergeFrom(from.antivirus_product_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_build_timestamp()) {
            set_build_timestamp(from.build_timestamp());
        }
        if (from.has_app_version()) {
            set_has_app_version();
            app_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_version_);
        }
        if (from.has_brand_code()) {
            set_has_brand_code();
            brand_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_code_);
        }
        if (from.has_channel()) {
            set_channel(from.channel());
        }
        if (from.has_is_asan_build()) {
            set_is_asan_build(from.is_asan_build());
        }
        if (from.has_uma_enabled_date()) {
            set_uma_enabled_date(from.uma_enabled_date());
        }
        if (from.has_install_date()) {
            set_install_date(from.install_date());
        }
        if (from.has_application_locale()) {
            set_has_application_locale();
            application_locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_locale_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_os()) {
            mutable_os()->::metrics::SystemProfileProto_OS::MergeFrom(from.os());
        }
        if (from.has_hardware()) {
            mutable_hardware()->::metrics::SystemProfileProto_Hardware::MergeFrom(from.hardware());
        }
        if (from.has_network()) {
            mutable_network()->::metrics::SystemProfileProto_Network::MergeFrom(from.network());
        }
        if (from.has_google_update()) {
            mutable_google_update()->::metrics::SystemProfileProto_GoogleUpdate::MergeFrom(from.google_update());
        }
        if (from.has_stability()) {
            mutable_stability()->::metrics::SystemProfileProto_Stability::MergeFrom(from.stability());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_external_access_point()) {
            mutable_external_access_point()->::metrics::SystemProfileProto_ExternalAccessPoint::MergeFrom(from.external_access_point());
        }
        if (from.has_multi_profile_user_count()) {
            set_multi_profile_user_count(from.multi_profile_user_count());
        }
        if (from.has_offstore_extensions_state()) {
            set_offstore_extensions_state(from.offstore_extensions_state());
        }
        if (from.has_uma_default_state()) {
            set_uma_default_state(from.uma_default_state());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SystemProfileProto::CopyFrom(const SystemProfileProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.SystemProfileProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SystemProfileProto::IsInitialized() const
{

    return true;
}

void SystemProfileProto::Swap(SystemProfileProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SystemProfileProto::InternalSwap(SystemProfileProto* other)
{
    std::swap(build_timestamp_, other->build_timestamp_);
    app_version_.Swap(&other->app_version_);
    brand_code_.Swap(&other->brand_code_);
    std::swap(channel_, other->channel_);
    std::swap(is_asan_build_, other->is_asan_build_);
    std::swap(uma_enabled_date_, other->uma_enabled_date_);
    std::swap(install_date_, other->install_date_);
    application_locale_.Swap(&other->application_locale_);
    std::swap(os_, other->os_);
    std::swap(hardware_, other->hardware_);
    std::swap(network_, other->network_);
    std::swap(google_update_, other->google_update_);
    plugin_.UnsafeArenaSwap(&other->plugin_);
    std::swap(stability_, other->stability_);
    field_trial_.UnsafeArenaSwap(&other->field_trial_);
    external_audio_video_device_.UnsafeArenaSwap(&other->external_audio_video_device_);
    std::swap(external_access_point_, other->external_access_point_);
    std::swap(multi_profile_user_count_, other->multi_profile_user_count_);
    occupied_extension_bucket_.UnsafeArenaSwap(&other->occupied_extension_bucket_);
    std::swap(offstore_extensions_state_, other->offstore_extensions_state_);
    std::swap(uma_default_state_, other->uma_default_state_);
    antivirus_product_.UnsafeArenaSwap(&other->antivirus_product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemProfileProto::GetTypeName() const
{
    return "metrics.SystemProfileProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemProfileProto_OS

// optional string name = 1;
bool SystemProfileProto_OS::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_OS::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_OS::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_OS::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& SystemProfileProto_OS::name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_OS::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.name)
}
void SystemProfileProto_OS::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.name)
}
void SystemProfileProto_OS::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.name)
}
::std::string* SystemProfileProto_OS::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_OS::release_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_OS::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.name)
}

// optional string version = 2;
bool SystemProfileProto_OS::has_version() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_OS::set_has_version()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_OS::clear_has_version()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_OS::clear_version()
{
    version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_version();
}
const ::std::string& SystemProfileProto_OS::version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.version)
    return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_OS::set_version(const ::std::string& value)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.version)
}
void SystemProfileProto_OS::set_version(const char* value)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.version)
}
void SystemProfileProto_OS::set_version(const char* value, size_t size)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.version)
}
::std::string* SystemProfileProto_OS::mutable_version()
{
    set_has_version();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.version)
    return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_OS::release_version()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.version)
    clear_has_version();
    return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_OS::set_allocated_version(::std::string* version)
{
    if (version != NULL) {
        set_has_version();
    } else {
        clear_has_version();
    }
    version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.version)
}

// optional string fingerprint = 3;
bool SystemProfileProto_OS::has_fingerprint() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_OS::set_has_fingerprint()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_OS::clear_has_fingerprint()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_OS::clear_fingerprint()
{
    fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_fingerprint();
}
const ::std::string& SystemProfileProto_OS::fingerprint() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.fingerprint)
    return fingerprint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_OS::set_fingerprint(const ::std::string& value)
{
    set_has_fingerprint();
    fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.fingerprint)
}
void SystemProfileProto_OS::set_fingerprint(const char* value)
{
    set_has_fingerprint();
    fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.OS.fingerprint)
}
void SystemProfileProto_OS::set_fingerprint(const char* value, size_t size)
{
    set_has_fingerprint();
    fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.OS.fingerprint)
}
::std::string* SystemProfileProto_OS::mutable_fingerprint()
{
    set_has_fingerprint();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.OS.fingerprint)
    return fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_OS::release_fingerprint()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.OS.fingerprint)
    clear_has_fingerprint();
    return fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_OS::set_allocated_fingerprint(::std::string* fingerprint)
{
    if (fingerprint != NULL) {
        set_has_fingerprint();
    } else {
        clear_has_fingerprint();
    }
    fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.OS.fingerprint)
}

// optional bool is_jailbroken = 4;
bool SystemProfileProto_OS::has_is_jailbroken() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_OS::set_has_is_jailbroken()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_OS::clear_has_is_jailbroken()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_OS::clear_is_jailbroken()
{
    is_jailbroken_ = false;
    clear_has_is_jailbroken();
}
bool SystemProfileProto_OS::is_jailbroken() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.OS.is_jailbroken)
    return is_jailbroken_;
}
void SystemProfileProto_OS::set_is_jailbroken(bool value)
{
    set_has_is_jailbroken();
    is_jailbroken_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.OS.is_jailbroken)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_CPU

// optional string vendor_name = 1;
bool SystemProfileProto_Hardware_CPU::has_vendor_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware_CPU::set_has_vendor_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware_CPU::clear_has_vendor_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware_CPU::clear_vendor_name()
{
    vendor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_vendor_name();
}
const ::std::string& SystemProfileProto_Hardware_CPU::vendor_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
    return vendor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_CPU::set_vendor_name(const ::std::string& value)
{
    set_has_vendor_name();
    vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
void SystemProfileProto_Hardware_CPU::set_vendor_name(const char* value)
{
    set_has_vendor_name();
    vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
void SystemProfileProto_Hardware_CPU::set_vendor_name(const char* value, size_t size)
{
    set_has_vendor_name();
    vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}
::std::string* SystemProfileProto_Hardware_CPU::mutable_vendor_name()
{
    set_has_vendor_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
    return vendor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware_CPU::release_vendor_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
    clear_has_vendor_name();
    return vendor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_CPU::set_allocated_vendor_name(::std::string* vendor_name)
{
    if (vendor_name != NULL) {
        set_has_vendor_name();
    } else {
        clear_has_vendor_name();
    }
    vendor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.CPU.vendor_name)
}

// optional uint32 signature = 2;
bool SystemProfileProto_Hardware_CPU::has_signature() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Hardware_CPU::set_has_signature()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Hardware_CPU::clear_has_signature()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Hardware_CPU::clear_signature()
{
    signature_ = 0u;
    clear_has_signature();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_CPU::signature() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.signature)
    return signature_;
}
void SystemProfileProto_Hardware_CPU::set_signature(::google::protobuf::uint32 value)
{
    set_has_signature();
    signature_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.signature)
}

// optional uint32 num_cores = 3;
bool SystemProfileProto_Hardware_CPU::has_num_cores() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Hardware_CPU::set_has_num_cores()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Hardware_CPU::clear_has_num_cores()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Hardware_CPU::clear_num_cores()
{
    num_cores_ = 0u;
    clear_has_num_cores();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_CPU::num_cores() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.CPU.num_cores)
    return num_cores_;
}
void SystemProfileProto_Hardware_CPU::set_num_cores(::google::protobuf::uint32 value)
{
    set_has_num_cores();
    num_cores_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.CPU.num_cores)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Graphics

// optional uint32 vendor_id = 1;
bool SystemProfileProto_Hardware_Graphics::has_vendor_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware_Graphics::set_has_vendor_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware_Graphics::clear_has_vendor_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware_Graphics::clear_vendor_id()
{
    vendor_id_ = 0u;
    clear_has_vendor_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Graphics::vendor_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.vendor_id)
    return vendor_id_;
}
void SystemProfileProto_Hardware_Graphics::set_vendor_id(::google::protobuf::uint32 value)
{
    set_has_vendor_id();
    vendor_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.vendor_id)
}

// optional uint32 device_id = 2;
bool SystemProfileProto_Hardware_Graphics::has_device_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Hardware_Graphics::set_has_device_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Hardware_Graphics::clear_has_device_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Hardware_Graphics::clear_device_id()
{
    device_id_ = 0u;
    clear_has_device_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Graphics::device_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.device_id)
    return device_id_;
}
void SystemProfileProto_Hardware_Graphics::set_device_id(::google::protobuf::uint32 value)
{
    set_has_device_id();
    device_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.device_id)
}

// optional string driver_version = 3;
bool SystemProfileProto_Hardware_Graphics::has_driver_version() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Hardware_Graphics::set_has_driver_version()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Hardware_Graphics::clear_has_driver_version()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Hardware_Graphics::clear_driver_version()
{
    driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_driver_version();
}
const ::std::string& SystemProfileProto_Hardware_Graphics::driver_version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
    return driver_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_driver_version(const ::std::string& value)
{
    set_has_driver_version();
    driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
void SystemProfileProto_Hardware_Graphics::set_driver_version(const char* value)
{
    set_has_driver_version();
    driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
void SystemProfileProto_Hardware_Graphics::set_driver_version(const char* value, size_t size)
{
    set_has_driver_version();
    driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}
::std::string* SystemProfileProto_Hardware_Graphics::mutable_driver_version()
{
    set_has_driver_version();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
    return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware_Graphics::release_driver_version()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
    clear_has_driver_version();
    return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_allocated_driver_version(::std::string* driver_version)
{
    if (driver_version != NULL) {
        set_has_driver_version();
    } else {
        clear_has_driver_version();
    }
    driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.driver_version)
}

// optional string driver_date = 4;
bool SystemProfileProto_Hardware_Graphics::has_driver_date() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Hardware_Graphics::set_has_driver_date()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Hardware_Graphics::clear_has_driver_date()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Hardware_Graphics::clear_driver_date()
{
    driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_driver_date();
}
const ::std::string& SystemProfileProto_Hardware_Graphics::driver_date() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
    return driver_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_driver_date(const ::std::string& value)
{
    set_has_driver_date();
    driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
void SystemProfileProto_Hardware_Graphics::set_driver_date(const char* value)
{
    set_has_driver_date();
    driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
void SystemProfileProto_Hardware_Graphics::set_driver_date(const char* value, size_t size)
{
    set_has_driver_date();
    driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}
::std::string* SystemProfileProto_Hardware_Graphics::mutable_driver_date()
{
    set_has_driver_date();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
    return driver_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware_Graphics::release_driver_date()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
    clear_has_driver_date();
    return driver_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_allocated_driver_date(::std::string* driver_date)
{
    if (driver_date != NULL) {
        set_has_driver_date();
    } else {
        clear_has_driver_date();
    }
    driver_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_date);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.driver_date)
}

// optional string gl_vendor = 6;
bool SystemProfileProto_Hardware_Graphics::has_gl_vendor() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Hardware_Graphics::set_has_gl_vendor()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Hardware_Graphics::clear_has_gl_vendor()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Hardware_Graphics::clear_gl_vendor()
{
    gl_vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gl_vendor();
}
const ::std::string& SystemProfileProto_Hardware_Graphics::gl_vendor() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
    return gl_vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_gl_vendor(const ::std::string& value)
{
    set_has_gl_vendor();
    gl_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
void SystemProfileProto_Hardware_Graphics::set_gl_vendor(const char* value)
{
    set_has_gl_vendor();
    gl_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
void SystemProfileProto_Hardware_Graphics::set_gl_vendor(const char* value, size_t size)
{
    set_has_gl_vendor();
    gl_vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}
::std::string* SystemProfileProto_Hardware_Graphics::mutable_gl_vendor()
{
    set_has_gl_vendor();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
    return gl_vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware_Graphics::release_gl_vendor()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
    clear_has_gl_vendor();
    return gl_vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_allocated_gl_vendor(::std::string* gl_vendor)
{
    if (gl_vendor != NULL) {
        set_has_gl_vendor();
    } else {
        clear_has_gl_vendor();
    }
    gl_vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gl_vendor);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.gl_vendor)
}

// optional string gl_renderer = 7;
bool SystemProfileProto_Hardware_Graphics::has_gl_renderer() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_Hardware_Graphics::set_has_gl_renderer()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_Hardware_Graphics::clear_has_gl_renderer()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_Hardware_Graphics::clear_gl_renderer()
{
    gl_renderer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gl_renderer();
}
const ::std::string& SystemProfileProto_Hardware_Graphics::gl_renderer() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
    return gl_renderer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_gl_renderer(const ::std::string& value)
{
    set_has_gl_renderer();
    gl_renderer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
void SystemProfileProto_Hardware_Graphics::set_gl_renderer(const char* value)
{
    set_has_gl_renderer();
    gl_renderer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
void SystemProfileProto_Hardware_Graphics::set_gl_renderer(const char* value, size_t size)
{
    set_has_gl_renderer();
    gl_renderer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}
::std::string* SystemProfileProto_Hardware_Graphics::mutable_gl_renderer()
{
    set_has_gl_renderer();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
    return gl_renderer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware_Graphics::release_gl_renderer()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
    clear_has_gl_renderer();
    return gl_renderer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware_Graphics::set_allocated_gl_renderer(::std::string* gl_renderer)
{
    if (gl_renderer != NULL) {
        set_has_gl_renderer();
    } else {
        clear_has_gl_renderer();
    }
    gl_renderer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gl_renderer);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.Graphics.gl_renderer)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Bluetooth_PairedDevice

// optional uint32 bluetooth_class = 1;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_bluetooth_class() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_bluetooth_class()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_bluetooth_class()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_bluetooth_class()
{
    bluetooth_class_ = 0u;
    clear_has_bluetooth_class();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::bluetooth_class() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.bluetooth_class)
    return bluetooth_class_;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_bluetooth_class(::google::protobuf::uint32 value)
{
    set_has_bluetooth_class();
    bluetooth_class_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.bluetooth_class)
}

// optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.Type type = 2;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_type() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_type()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_type()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_type()
{
    type_ = 0;
    clear_has_type();
}
::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type SystemProfileProto_Hardware_Bluetooth_PairedDevice::type() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.type)
    return static_cast<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type>(type_);
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_type(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type value)
{
    assert(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_Type_IsValid(value));
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.type)
}

// optional uint32 vendor_prefix = 4;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_vendor_prefix() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_vendor_prefix()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_vendor_prefix()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_vendor_prefix()
{
    vendor_prefix_ = 0u;
    clear_has_vendor_prefix();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::vendor_prefix() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_prefix)
    return vendor_prefix_;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_vendor_prefix(::google::protobuf::uint32 value)
{
    set_has_vendor_prefix();
    vendor_prefix_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_prefix)
}

// optional .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.VendorIDSource vendor_id_source = 8;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_vendor_id_source() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_vendor_id_source()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_vendor_id_source()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_vendor_id_source()
{
    vendor_id_source_ = 0;
    clear_has_vendor_id_source();
}
::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource SystemProfileProto_Hardware_Bluetooth_PairedDevice::vendor_id_source() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id_source)
    return static_cast<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource>(vendor_id_source_);
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_vendor_id_source(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource value)
{
    assert(::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice_VendorIDSource_IsValid(value));
    set_has_vendor_id_source();
    vendor_id_source_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id_source)
}

// optional uint32 vendor_id = 5;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_vendor_id() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_vendor_id()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_vendor_id()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_vendor_id()
{
    vendor_id_ = 0u;
    clear_has_vendor_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::vendor_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id)
    return vendor_id_;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_vendor_id(::google::protobuf::uint32 value)
{
    set_has_vendor_id();
    vendor_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.vendor_id)
}

// optional uint32 product_id = 6;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_product_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_product_id()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_product_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_product_id()
{
    product_id_ = 0u;
    clear_has_product_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::product_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.product_id)
    return product_id_;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_product_id(::google::protobuf::uint32 value)
{
    set_has_product_id();
    product_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.product_id)
}

// optional uint32 device_id = 7;
bool SystemProfileProto_Hardware_Bluetooth_PairedDevice::has_device_id() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_has_device_id()
{
    _has_bits_[0] |= 0x00000040u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_has_device_id()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::clear_device_id()
{
    device_id_ = 0u;
    clear_has_device_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_Bluetooth_PairedDevice::device_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.device_id)
    return device_id_;
}
void SystemProfileProto_Hardware_Bluetooth_PairedDevice::set_device_id(::google::protobuf::uint32 value)
{
    set_has_device_id();
    device_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice.device_id)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Bluetooth

// optional bool is_present = 1;
bool SystemProfileProto_Hardware_Bluetooth::has_is_present() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth::set_has_is_present()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware_Bluetooth::clear_has_is_present()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware_Bluetooth::clear_is_present()
{
    is_present_ = false;
    clear_has_is_present();
}
bool SystemProfileProto_Hardware_Bluetooth::is_present() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.is_present)
    return is_present_;
}
void SystemProfileProto_Hardware_Bluetooth::set_is_present(bool value)
{
    set_has_is_present();
    is_present_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.is_present)
}

// optional bool is_enabled = 2;
bool SystemProfileProto_Hardware_Bluetooth::has_is_enabled() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Hardware_Bluetooth::set_has_is_enabled()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Hardware_Bluetooth::clear_has_is_enabled()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Hardware_Bluetooth::clear_is_enabled()
{
    is_enabled_ = false;
    clear_has_is_enabled();
}
bool SystemProfileProto_Hardware_Bluetooth::is_enabled() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.is_enabled)
    return is_enabled_;
}
void SystemProfileProto_Hardware_Bluetooth::set_is_enabled(bool value)
{
    set_has_is_enabled();
    is_enabled_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Bluetooth.is_enabled)
}

// repeated .metrics.SystemProfileProto.Hardware.Bluetooth.PairedDevice paired_device = 3;
int SystemProfileProto_Hardware_Bluetooth::paired_device_size() const
{
    return paired_device_.size();
}
void SystemProfileProto_Hardware_Bluetooth::clear_paired_device()
{
    paired_device_.Clear();
}
const ::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice& SystemProfileProto_Hardware_Bluetooth::paired_device(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
    return paired_device_.Get(index);
}
::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* SystemProfileProto_Hardware_Bluetooth::mutable_paired_device(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
    return paired_device_.Mutable(index);
}
::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice* SystemProfileProto_Hardware_Bluetooth::add_paired_device()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
    return paired_device_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice>*
SystemProfileProto_Hardware_Bluetooth::mutable_paired_device()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
    return &paired_device_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Hardware_Bluetooth_PairedDevice>&
SystemProfileProto_Hardware_Bluetooth::paired_device() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Hardware.Bluetooth.paired_device)
    return paired_device_;
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_TouchScreen

// optional uint32 vendor_id = 1;
bool SystemProfileProto_Hardware_TouchScreen::has_vendor_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware_TouchScreen::set_has_vendor_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware_TouchScreen::clear_has_vendor_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware_TouchScreen::clear_vendor_id()
{
    vendor_id_ = 0u;
    clear_has_vendor_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_TouchScreen::vendor_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.TouchScreen.vendor_id)
    return vendor_id_;
}
void SystemProfileProto_Hardware_TouchScreen::set_vendor_id(::google::protobuf::uint32 value)
{
    set_has_vendor_id();
    vendor_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.TouchScreen.vendor_id)
}

// optional uint32 product_id = 2;
bool SystemProfileProto_Hardware_TouchScreen::has_product_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Hardware_TouchScreen::set_has_product_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Hardware_TouchScreen::clear_has_product_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Hardware_TouchScreen::clear_product_id()
{
    product_id_ = 0u;
    clear_has_product_id();
}
::google::protobuf::uint32 SystemProfileProto_Hardware_TouchScreen::product_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.TouchScreen.product_id)
    return product_id_;
}
void SystemProfileProto_Hardware_TouchScreen::set_product_id(::google::protobuf::uint32 value)
{
    set_has_product_id();
    product_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.TouchScreen.product_id)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware_Drive

// optional bool has_seek_penalty = 1;
bool SystemProfileProto_Hardware_Drive::has_has_seek_penalty() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware_Drive::set_has_has_seek_penalty()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware_Drive::clear_has_has_seek_penalty()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware_Drive::clear_has_seek_penalty()
{
    has_seek_penalty_ = false;
    clear_has_has_seek_penalty();
}
bool SystemProfileProto_Hardware_Drive::has_seek_penalty() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.Drive.has_seek_penalty)
    return has_seek_penalty_;
}
void SystemProfileProto_Hardware_Drive::set_has_seek_penalty(bool value)
{
    set_has_has_seek_penalty();
    has_seek_penalty_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.Drive.has_seek_penalty)
}

// -------------------------------------------------------------------

// SystemProfileProto_Hardware

// optional string cpu_architecture = 1;
bool SystemProfileProto_Hardware::has_cpu_architecture() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Hardware::set_has_cpu_architecture()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Hardware::clear_has_cpu_architecture()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Hardware::clear_cpu_architecture()
{
    cpu_architecture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cpu_architecture();
}
const ::std::string& SystemProfileProto_Hardware::cpu_architecture() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.cpu_architecture)
    return cpu_architecture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware::set_cpu_architecture(const ::std::string& value)
{
    set_has_cpu_architecture();
    cpu_architecture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
void SystemProfileProto_Hardware::set_cpu_architecture(const char* value)
{
    set_has_cpu_architecture();
    cpu_architecture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
void SystemProfileProto_Hardware::set_cpu_architecture(const char* value, size_t size)
{
    set_has_cpu_architecture();
    cpu_architecture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.cpu_architecture)
}
::std::string* SystemProfileProto_Hardware::mutable_cpu_architecture()
{
    set_has_cpu_architecture();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.cpu_architecture)
    return cpu_architecture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware::release_cpu_architecture()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.cpu_architecture)
    clear_has_cpu_architecture();
    return cpu_architecture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware::set_allocated_cpu_architecture(::std::string* cpu_architecture)
{
    if (cpu_architecture != NULL) {
        set_has_cpu_architecture();
    } else {
        clear_has_cpu_architecture();
    }
    cpu_architecture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_architecture);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.cpu_architecture)
}

// optional int64 system_ram_mb = 2;
bool SystemProfileProto_Hardware::has_system_ram_mb() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Hardware::set_has_system_ram_mb()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Hardware::clear_has_system_ram_mb()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Hardware::clear_system_ram_mb()
{
    system_ram_mb_ = GOOGLE_LONGLONG(0);
    clear_has_system_ram_mb();
}
::google::protobuf::int64 SystemProfileProto_Hardware::system_ram_mb() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.system_ram_mb)
    return system_ram_mb_;
}
void SystemProfileProto_Hardware::set_system_ram_mb(::google::protobuf::int64 value)
{
    set_has_system_ram_mb();
    system_ram_mb_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.system_ram_mb)
}

// optional int64 dll_base = 3;
bool SystemProfileProto_Hardware::has_dll_base() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Hardware::set_has_dll_base()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Hardware::clear_has_dll_base()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Hardware::clear_dll_base()
{
    dll_base_ = GOOGLE_LONGLONG(0);
    clear_has_dll_base();
}
::google::protobuf::int64 SystemProfileProto_Hardware::dll_base() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.dll_base)
    return dll_base_;
}
void SystemProfileProto_Hardware::set_dll_base(::google::protobuf::int64 value)
{
    set_has_dll_base();
    dll_base_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.dll_base)
}

// optional string hardware_class = 4;
bool SystemProfileProto_Hardware::has_hardware_class() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Hardware::set_has_hardware_class()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Hardware::clear_has_hardware_class()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Hardware::clear_hardware_class()
{
    hardware_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_hardware_class();
}
const ::std::string& SystemProfileProto_Hardware::hardware_class() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.hardware_class)
    return hardware_class_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware::set_hardware_class(const ::std::string& value)
{
    set_has_hardware_class();
    hardware_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.hardware_class)
}
void SystemProfileProto_Hardware::set_hardware_class(const char* value)
{
    set_has_hardware_class();
    hardware_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Hardware.hardware_class)
}
void SystemProfileProto_Hardware::set_hardware_class(const char* value, size_t size)
{
    set_has_hardware_class();
    hardware_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Hardware.hardware_class)
}
::std::string* SystemProfileProto_Hardware::mutable_hardware_class()
{
    set_has_hardware_class();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.hardware_class)
    return hardware_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Hardware::release_hardware_class()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.hardware_class)
    clear_has_hardware_class();
    return hardware_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Hardware::set_allocated_hardware_class(::std::string* hardware_class)
{
    if (hardware_class != NULL) {
        set_has_hardware_class();
    } else {
        clear_has_hardware_class();
    }
    hardware_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware_class);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.hardware_class)
}

// optional int32 screen_count = 5;
bool SystemProfileProto_Hardware::has_screen_count() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Hardware::set_has_screen_count()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Hardware::clear_has_screen_count()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Hardware::clear_screen_count()
{
    screen_count_ = 0;
    clear_has_screen_count();
}
::google::protobuf::int32 SystemProfileProto_Hardware::screen_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.screen_count)
    return screen_count_;
}
void SystemProfileProto_Hardware::set_screen_count(::google::protobuf::int32 value)
{
    set_has_screen_count();
    screen_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.screen_count)
}

// optional int32 primary_screen_width = 6;
bool SystemProfileProto_Hardware::has_primary_screen_width() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_Hardware::set_has_primary_screen_width()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_Hardware::clear_has_primary_screen_width()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_Hardware::clear_primary_screen_width()
{
    primary_screen_width_ = 0;
    clear_has_primary_screen_width();
}
::google::protobuf::int32 SystemProfileProto_Hardware::primary_screen_width() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.primary_screen_width)
    return primary_screen_width_;
}
void SystemProfileProto_Hardware::set_primary_screen_width(::google::protobuf::int32 value)
{
    set_has_primary_screen_width();
    primary_screen_width_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.primary_screen_width)
}

// optional int32 primary_screen_height = 7;
bool SystemProfileProto_Hardware::has_primary_screen_height() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SystemProfileProto_Hardware::set_has_primary_screen_height()
{
    _has_bits_[0] |= 0x00000040u;
}
void SystemProfileProto_Hardware::clear_has_primary_screen_height()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SystemProfileProto_Hardware::clear_primary_screen_height()
{
    primary_screen_height_ = 0;
    clear_has_primary_screen_height();
}
::google::protobuf::int32 SystemProfileProto_Hardware::primary_screen_height() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.primary_screen_height)
    return primary_screen_height_;
}
void SystemProfileProto_Hardware::set_primary_screen_height(::google::protobuf::int32 value)
{
    set_has_primary_screen_height();
    primary_screen_height_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.primary_screen_height)
}

// optional float primary_screen_scale_factor = 12;
bool SystemProfileProto_Hardware::has_primary_screen_scale_factor() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void SystemProfileProto_Hardware::set_has_primary_screen_scale_factor()
{
    _has_bits_[0] |= 0x00000080u;
}
void SystemProfileProto_Hardware::clear_has_primary_screen_scale_factor()
{
    _has_bits_[0] &= ~0x00000080u;
}
void SystemProfileProto_Hardware::clear_primary_screen_scale_factor()
{
    primary_screen_scale_factor_ = 0;
    clear_has_primary_screen_scale_factor();
}
float SystemProfileProto_Hardware::primary_screen_scale_factor() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.primary_screen_scale_factor)
    return primary_screen_scale_factor_;
}
void SystemProfileProto_Hardware::set_primary_screen_scale_factor(float value)
{
    set_has_primary_screen_scale_factor();
    primary_screen_scale_factor_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.primary_screen_scale_factor)
}

// optional float max_dpi_x = 9;
bool SystemProfileProto_Hardware::has_max_dpi_x() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void SystemProfileProto_Hardware::set_has_max_dpi_x()
{
    _has_bits_[0] |= 0x00000100u;
}
void SystemProfileProto_Hardware::clear_has_max_dpi_x()
{
    _has_bits_[0] &= ~0x00000100u;
}
void SystemProfileProto_Hardware::clear_max_dpi_x()
{
    max_dpi_x_ = 0;
    clear_has_max_dpi_x();
}
float SystemProfileProto_Hardware::max_dpi_x() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.max_dpi_x)
    return max_dpi_x_;
}
void SystemProfileProto_Hardware::set_max_dpi_x(float value)
{
    set_has_max_dpi_x();
    max_dpi_x_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.max_dpi_x)
}

// optional float max_dpi_y = 10;
bool SystemProfileProto_Hardware::has_max_dpi_y() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void SystemProfileProto_Hardware::set_has_max_dpi_y()
{
    _has_bits_[0] |= 0x00000200u;
}
void SystemProfileProto_Hardware::clear_has_max_dpi_y()
{
    _has_bits_[0] &= ~0x00000200u;
}
void SystemProfileProto_Hardware::clear_max_dpi_y()
{
    max_dpi_y_ = 0;
    clear_has_max_dpi_y();
}
float SystemProfileProto_Hardware::max_dpi_y() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.max_dpi_y)
    return max_dpi_y_;
}
void SystemProfileProto_Hardware::set_max_dpi_y(float value)
{
    set_has_max_dpi_y();
    max_dpi_y_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.max_dpi_y)
}

// optional .metrics.SystemProfileProto.Hardware.CPU cpu = 13;
bool SystemProfileProto_Hardware::has_cpu() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void SystemProfileProto_Hardware::set_has_cpu()
{
    _has_bits_[0] |= 0x00000400u;
}
void SystemProfileProto_Hardware::clear_has_cpu()
{
    _has_bits_[0] &= ~0x00000400u;
}
void SystemProfileProto_Hardware::clear_cpu()
{
    if (cpu_ != NULL)
        cpu_->::metrics::SystemProfileProto_Hardware_CPU::Clear();
    clear_has_cpu();
}
const ::metrics::SystemProfileProto_Hardware_CPU& SystemProfileProto_Hardware::cpu() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.cpu)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return cpu_ != NULL ? *cpu_ : *default_instance().cpu_;
#else
    return cpu_ != NULL ? *cpu_ : *default_instance_->cpu_;
#endif
}
::metrics::SystemProfileProto_Hardware_CPU* SystemProfileProto_Hardware::mutable_cpu()
{
    set_has_cpu();
    if (cpu_ == NULL) {
        cpu_ = new ::metrics::SystemProfileProto_Hardware_CPU;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.cpu)
    return cpu_;
}
::metrics::SystemProfileProto_Hardware_CPU* SystemProfileProto_Hardware::release_cpu()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.cpu)
    clear_has_cpu();
    ::metrics::SystemProfileProto_Hardware_CPU* temp = cpu_;
    cpu_ = NULL;
    return temp;
}
void SystemProfileProto_Hardware::set_allocated_cpu(::metrics::SystemProfileProto_Hardware_CPU* cpu)
{
    delete cpu_;
    cpu_ = cpu;
    if (cpu) {
        set_has_cpu();
    } else {
        clear_has_cpu();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.cpu)
}

// optional .metrics.SystemProfileProto.Hardware.Graphics gpu = 8;
bool SystemProfileProto_Hardware::has_gpu() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void SystemProfileProto_Hardware::set_has_gpu()
{
    _has_bits_[0] |= 0x00000800u;
}
void SystemProfileProto_Hardware::clear_has_gpu()
{
    _has_bits_[0] &= ~0x00000800u;
}
void SystemProfileProto_Hardware::clear_gpu()
{
    if (gpu_ != NULL)
        gpu_->::metrics::SystemProfileProto_Hardware_Graphics::Clear();
    clear_has_gpu();
}
const ::metrics::SystemProfileProto_Hardware_Graphics& SystemProfileProto_Hardware::gpu() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.gpu)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return gpu_ != NULL ? *gpu_ : *default_instance().gpu_;
#else
    return gpu_ != NULL ? *gpu_ : *default_instance_->gpu_;
#endif
}
::metrics::SystemProfileProto_Hardware_Graphics* SystemProfileProto_Hardware::mutable_gpu()
{
    set_has_gpu();
    if (gpu_ == NULL) {
        gpu_ = new ::metrics::SystemProfileProto_Hardware_Graphics;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.gpu)
    return gpu_;
}
::metrics::SystemProfileProto_Hardware_Graphics* SystemProfileProto_Hardware::release_gpu()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.gpu)
    clear_has_gpu();
    ::metrics::SystemProfileProto_Hardware_Graphics* temp = gpu_;
    gpu_ = NULL;
    return temp;
}
void SystemProfileProto_Hardware::set_allocated_gpu(::metrics::SystemProfileProto_Hardware_Graphics* gpu)
{
    delete gpu_;
    gpu_ = gpu;
    if (gpu) {
        set_has_gpu();
    } else {
        clear_has_gpu();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.gpu)
}

// optional .metrics.SystemProfileProto.Hardware.Bluetooth bluetooth = 11;
bool SystemProfileProto_Hardware::has_bluetooth() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void SystemProfileProto_Hardware::set_has_bluetooth()
{
    _has_bits_[0] |= 0x00001000u;
}
void SystemProfileProto_Hardware::clear_has_bluetooth()
{
    _has_bits_[0] &= ~0x00001000u;
}
void SystemProfileProto_Hardware::clear_bluetooth()
{
    if (bluetooth_ != NULL)
        bluetooth_->::metrics::SystemProfileProto_Hardware_Bluetooth::Clear();
    clear_has_bluetooth();
}
const ::metrics::SystemProfileProto_Hardware_Bluetooth& SystemProfileProto_Hardware::bluetooth() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.bluetooth)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return bluetooth_ != NULL ? *bluetooth_ : *default_instance().bluetooth_;
#else
    return bluetooth_ != NULL ? *bluetooth_ : *default_instance_->bluetooth_;
#endif
}
::metrics::SystemProfileProto_Hardware_Bluetooth* SystemProfileProto_Hardware::mutable_bluetooth()
{
    set_has_bluetooth();
    if (bluetooth_ == NULL) {
        bluetooth_ = new ::metrics::SystemProfileProto_Hardware_Bluetooth;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.bluetooth)
    return bluetooth_;
}
::metrics::SystemProfileProto_Hardware_Bluetooth* SystemProfileProto_Hardware::release_bluetooth()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.bluetooth)
    clear_has_bluetooth();
    ::metrics::SystemProfileProto_Hardware_Bluetooth* temp = bluetooth_;
    bluetooth_ = NULL;
    return temp;
}
void SystemProfileProto_Hardware::set_allocated_bluetooth(::metrics::SystemProfileProto_Hardware_Bluetooth* bluetooth)
{
    delete bluetooth_;
    bluetooth_ = bluetooth;
    if (bluetooth) {
        set_has_bluetooth();
    } else {
        clear_has_bluetooth();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.bluetooth)
}

// optional bool internal_display_supports_touch = 14;
bool SystemProfileProto_Hardware::has_internal_display_supports_touch() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void SystemProfileProto_Hardware::set_has_internal_display_supports_touch()
{
    _has_bits_[0] |= 0x00002000u;
}
void SystemProfileProto_Hardware::clear_has_internal_display_supports_touch()
{
    _has_bits_[0] &= ~0x00002000u;
}
void SystemProfileProto_Hardware::clear_internal_display_supports_touch()
{
    internal_display_supports_touch_ = false;
    clear_has_internal_display_supports_touch();
}
bool SystemProfileProto_Hardware::internal_display_supports_touch() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.internal_display_supports_touch)
    return internal_display_supports_touch_;
}
void SystemProfileProto_Hardware::set_internal_display_supports_touch(bool value)
{
    set_has_internal_display_supports_touch();
    internal_display_supports_touch_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Hardware.internal_display_supports_touch)
}

// repeated .metrics.SystemProfileProto.Hardware.TouchScreen external_touchscreen = 15;
int SystemProfileProto_Hardware::external_touchscreen_size() const
{
    return external_touchscreen_.size();
}
void SystemProfileProto_Hardware::clear_external_touchscreen()
{
    external_touchscreen_.Clear();
}
const ::metrics::SystemProfileProto_Hardware_TouchScreen& SystemProfileProto_Hardware::external_touchscreen(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.external_touchscreen)
    return external_touchscreen_.Get(index);
}
::metrics::SystemProfileProto_Hardware_TouchScreen* SystemProfileProto_Hardware::mutable_external_touchscreen(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.external_touchscreen)
    return external_touchscreen_.Mutable(index);
}
::metrics::SystemProfileProto_Hardware_TouchScreen* SystemProfileProto_Hardware::add_external_touchscreen()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Hardware.external_touchscreen)
    return external_touchscreen_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Hardware_TouchScreen>*
SystemProfileProto_Hardware::mutable_external_touchscreen()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Hardware.external_touchscreen)
    return &external_touchscreen_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Hardware_TouchScreen>&
SystemProfileProto_Hardware::external_touchscreen() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Hardware.external_touchscreen)
    return external_touchscreen_;
}

// optional .metrics.SystemProfileProto.Hardware.Drive app_drive = 16;
bool SystemProfileProto_Hardware::has_app_drive() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void SystemProfileProto_Hardware::set_has_app_drive()
{
    _has_bits_[0] |= 0x00008000u;
}
void SystemProfileProto_Hardware::clear_has_app_drive()
{
    _has_bits_[0] &= ~0x00008000u;
}
void SystemProfileProto_Hardware::clear_app_drive()
{
    if (app_drive_ != NULL)
        app_drive_->::metrics::SystemProfileProto_Hardware_Drive::Clear();
    clear_has_app_drive();
}
const ::metrics::SystemProfileProto_Hardware_Drive& SystemProfileProto_Hardware::app_drive() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.app_drive)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return app_drive_ != NULL ? *app_drive_ : *default_instance().app_drive_;
#else
    return app_drive_ != NULL ? *app_drive_ : *default_instance_->app_drive_;
#endif
}
::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::mutable_app_drive()
{
    set_has_app_drive();
    if (app_drive_ == NULL) {
        app_drive_ = new ::metrics::SystemProfileProto_Hardware_Drive;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.app_drive)
    return app_drive_;
}
::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::release_app_drive()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.app_drive)
    clear_has_app_drive();
    ::metrics::SystemProfileProto_Hardware_Drive* temp = app_drive_;
    app_drive_ = NULL;
    return temp;
}
void SystemProfileProto_Hardware::set_allocated_app_drive(::metrics::SystemProfileProto_Hardware_Drive* app_drive)
{
    delete app_drive_;
    app_drive_ = app_drive;
    if (app_drive) {
        set_has_app_drive();
    } else {
        clear_has_app_drive();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.app_drive)
}

// optional .metrics.SystemProfileProto.Hardware.Drive user_data_drive = 17;
bool SystemProfileProto_Hardware::has_user_data_drive() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void SystemProfileProto_Hardware::set_has_user_data_drive()
{
    _has_bits_[0] |= 0x00010000u;
}
void SystemProfileProto_Hardware::clear_has_user_data_drive()
{
    _has_bits_[0] &= ~0x00010000u;
}
void SystemProfileProto_Hardware::clear_user_data_drive()
{
    if (user_data_drive_ != NULL)
        user_data_drive_->::metrics::SystemProfileProto_Hardware_Drive::Clear();
    clear_has_user_data_drive();
}
const ::metrics::SystemProfileProto_Hardware_Drive& SystemProfileProto_Hardware::user_data_drive() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Hardware.user_data_drive)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return user_data_drive_ != NULL ? *user_data_drive_ : *default_instance().user_data_drive_;
#else
    return user_data_drive_ != NULL ? *user_data_drive_ : *default_instance_->user_data_drive_;
#endif
}
::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::mutable_user_data_drive()
{
    set_has_user_data_drive();
    if (user_data_drive_ == NULL) {
        user_data_drive_ = new ::metrics::SystemProfileProto_Hardware_Drive;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Hardware.user_data_drive)
    return user_data_drive_;
}
::metrics::SystemProfileProto_Hardware_Drive* SystemProfileProto_Hardware::release_user_data_drive()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Hardware.user_data_drive)
    clear_has_user_data_drive();
    ::metrics::SystemProfileProto_Hardware_Drive* temp = user_data_drive_;
    user_data_drive_ = NULL;
    return temp;
}
void SystemProfileProto_Hardware::set_allocated_user_data_drive(::metrics::SystemProfileProto_Hardware_Drive* user_data_drive)
{
    delete user_data_drive_;
    user_data_drive_ = user_data_drive;
    if (user_data_drive) {
        set_has_user_data_drive();
    } else {
        clear_has_user_data_drive();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Hardware.user_data_drive)
}

// -------------------------------------------------------------------

// SystemProfileProto_Network_WifiAccessPoint_VendorInformation

// optional string model_number = 1;
bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::has_model_number() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_has_model_number()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_has_model_number()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_model_number()
{
    model_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_model_number();
}
const ::std::string& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::model_number() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
    return model_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(const ::std::string& value)
{
    set_has_model_number();
    model_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(const char* value)
{
    set_has_model_number();
    model_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_number(const char* value, size_t size)
{
    set_has_model_number();
    model_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}
::std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_model_number()
{
    set_has_model_number();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
    return model_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::release_model_number()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
    clear_has_model_number();
    return model_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_allocated_model_number(::std::string* model_number)
{
    if (model_number != NULL) {
        set_has_model_number();
    } else {
        clear_has_model_number();
    }
    model_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_number);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_number)
}

// optional string model_name = 2;
bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::has_model_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_has_model_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_has_model_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_model_name()
{
    model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_model_name();
}
const ::std::string& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::model_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
    return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(const ::std::string& value)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(const char* value)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_model_name(const char* value, size_t size)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}
::std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_model_name()
{
    set_has_model_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
    return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::release_model_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
    clear_has_model_name();
    return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_allocated_model_name(::std::string* model_name)
{
    if (model_name != NULL) {
        set_has_model_name();
    } else {
        clear_has_model_name();
    }
    model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.model_name)
}

// optional string device_name = 3;
bool SystemProfileProto_Network_WifiAccessPoint_VendorInformation::has_device_name() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_has_device_name()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_has_device_name()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_device_name()
{
    device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_name();
}
const ::std::string& SystemProfileProto_Network_WifiAccessPoint_VendorInformation::device_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
    return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(const ::std::string& value)
{
    set_has_device_name();
    device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(const char* value)
{
    set_has_device_name();
    device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_device_name(const char* value, size_t size)
{
    set_has_device_name();
    device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}
::std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_device_name()
{
    set_has_device_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
    return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Network_WifiAccessPoint_VendorInformation::release_device_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
    clear_has_device_name();
    return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_allocated_device_name(::std::string* device_name)
{
    if (device_name != NULL) {
        set_has_device_name();
    } else {
        clear_has_device_name();
    }
    device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.device_name)
}

// repeated uint32 element_identifier = 4;
int SystemProfileProto_Network_WifiAccessPoint_VendorInformation::element_identifier_size() const
{
    return element_identifier_.size();
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::clear_element_identifier()
{
    element_identifier_.Clear();
}
::google::protobuf::uint32 SystemProfileProto_Network_WifiAccessPoint_VendorInformation::element_identifier(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
    return element_identifier_.Get(index);
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::set_element_identifier(int index, ::google::protobuf::uint32 value)
{
    element_identifier_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
}
void SystemProfileProto_Network_WifiAccessPoint_VendorInformation::add_element_identifier(::google::protobuf::uint32 value)
{
    element_identifier_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint32>&
SystemProfileProto_Network_WifiAccessPoint_VendorInformation::element_identifier() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
    return element_identifier_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint32>*
SystemProfileProto_Network_WifiAccessPoint_VendorInformation::mutable_element_identifier()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation.element_identifier)
    return &element_identifier_;
}

// -------------------------------------------------------------------

// SystemProfileProto_Network_WifiAccessPoint

// optional uint32 vendor_prefix = 1;
bool SystemProfileProto_Network_WifiAccessPoint::has_vendor_prefix() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Network_WifiAccessPoint::set_has_vendor_prefix()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Network_WifiAccessPoint::clear_has_vendor_prefix()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Network_WifiAccessPoint::clear_vendor_prefix()
{
    vendor_prefix_ = 0u;
    clear_has_vendor_prefix();
}
::google::protobuf::uint32 SystemProfileProto_Network_WifiAccessPoint::vendor_prefix() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_prefix)
    return vendor_prefix_;
}
void SystemProfileProto_Network_WifiAccessPoint::set_vendor_prefix(::google::protobuf::uint32 value)
{
    set_has_vendor_prefix();
    vendor_prefix_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_prefix)
}

// optional .metrics.SystemProfileProto.Network.WifiAccessPoint.SecurityMode security_mode = 2;
bool SystemProfileProto_Network_WifiAccessPoint::has_security_mode() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Network_WifiAccessPoint::set_has_security_mode()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Network_WifiAccessPoint::clear_has_security_mode()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Network_WifiAccessPoint::clear_security_mode()
{
    security_mode_ = 0;
    clear_has_security_mode();
}
::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode SystemProfileProto_Network_WifiAccessPoint::security_mode() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.security_mode)
    return static_cast<::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode>(security_mode_);
}
void SystemProfileProto_Network_WifiAccessPoint::set_security_mode(::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode value)
{
    assert(::metrics::SystemProfileProto_Network_WifiAccessPoint_SecurityMode_IsValid(value));
    set_has_security_mode();
    security_mode_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.WifiAccessPoint.security_mode)
}

// optional .metrics.SystemProfileProto.Network.WifiAccessPoint.VendorInformation vendor_info = 3;
bool SystemProfileProto_Network_WifiAccessPoint::has_vendor_info() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Network_WifiAccessPoint::set_has_vendor_info()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Network_WifiAccessPoint::clear_has_vendor_info()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Network_WifiAccessPoint::clear_vendor_info()
{
    if (vendor_info_ != NULL)
        vendor_info_->::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation::Clear();
    clear_has_vendor_info();
}
const ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation& SystemProfileProto_Network_WifiAccessPoint::vendor_info() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return vendor_info_ != NULL ? *vendor_info_ : *default_instance().vendor_info_;
#else
    return vendor_info_ != NULL ? *vendor_info_ : *default_instance_->vendor_info_;
#endif
}
::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* SystemProfileProto_Network_WifiAccessPoint::mutable_vendor_info()
{
    set_has_vendor_info();
    if (vendor_info_ == NULL) {
        vendor_info_ = new ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
    return vendor_info_;
}
::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* SystemProfileProto_Network_WifiAccessPoint::release_vendor_info()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
    clear_has_vendor_info();
    ::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* temp = vendor_info_;
    vendor_info_ = NULL;
    return temp;
}
void SystemProfileProto_Network_WifiAccessPoint::set_allocated_vendor_info(::metrics::SystemProfileProto_Network_WifiAccessPoint_VendorInformation* vendor_info)
{
    delete vendor_info_;
    vendor_info_ = vendor_info;
    if (vendor_info) {
        set_has_vendor_info();
    } else {
        clear_has_vendor_info();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.WifiAccessPoint.vendor_info)
}

// -------------------------------------------------------------------

// SystemProfileProto_Network

// optional bool connection_type_is_ambiguous = 1;
bool SystemProfileProto_Network::has_connection_type_is_ambiguous() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Network::set_has_connection_type_is_ambiguous()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Network::clear_has_connection_type_is_ambiguous()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Network::clear_connection_type_is_ambiguous()
{
    connection_type_is_ambiguous_ = false;
    clear_has_connection_type_is_ambiguous();
}
bool SystemProfileProto_Network::connection_type_is_ambiguous() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.connection_type_is_ambiguous)
    return connection_type_is_ambiguous_;
}
void SystemProfileProto_Network::set_connection_type_is_ambiguous(bool value)
{
    set_has_connection_type_is_ambiguous();
    connection_type_is_ambiguous_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.connection_type_is_ambiguous)
}

// optional .metrics.SystemProfileProto.Network.ConnectionType connection_type = 2;
bool SystemProfileProto_Network::has_connection_type() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Network::set_has_connection_type()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Network::clear_has_connection_type()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Network::clear_connection_type()
{
    connection_type_ = 0;
    clear_has_connection_type();
}
::metrics::SystemProfileProto_Network_ConnectionType SystemProfileProto_Network::connection_type() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.connection_type)
    return static_cast<::metrics::SystemProfileProto_Network_ConnectionType>(connection_type_);
}
void SystemProfileProto_Network::set_connection_type(::metrics::SystemProfileProto_Network_ConnectionType value)
{
    assert(::metrics::SystemProfileProto_Network_ConnectionType_IsValid(value));
    set_has_connection_type();
    connection_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.connection_type)
}

// optional bool wifi_phy_layer_protocol_is_ambiguous = 3;
bool SystemProfileProto_Network::has_wifi_phy_layer_protocol_is_ambiguous() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Network::set_has_wifi_phy_layer_protocol_is_ambiguous()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Network::clear_has_wifi_phy_layer_protocol_is_ambiguous()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Network::clear_wifi_phy_layer_protocol_is_ambiguous()
{
    wifi_phy_layer_protocol_is_ambiguous_ = false;
    clear_has_wifi_phy_layer_protocol_is_ambiguous();
}
bool SystemProfileProto_Network::wifi_phy_layer_protocol_is_ambiguous() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol_is_ambiguous)
    return wifi_phy_layer_protocol_is_ambiguous_;
}
void SystemProfileProto_Network::set_wifi_phy_layer_protocol_is_ambiguous(bool value)
{
    set_has_wifi_phy_layer_protocol_is_ambiguous();
    wifi_phy_layer_protocol_is_ambiguous_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol_is_ambiguous)
}

// optional .metrics.SystemProfileProto.Network.WifiPHYLayerProtocol wifi_phy_layer_protocol = 4;
bool SystemProfileProto_Network::has_wifi_phy_layer_protocol() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Network::set_has_wifi_phy_layer_protocol()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Network::clear_has_wifi_phy_layer_protocol()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Network::clear_wifi_phy_layer_protocol()
{
    wifi_phy_layer_protocol_ = 0;
    clear_has_wifi_phy_layer_protocol();
}
::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol SystemProfileProto_Network::wifi_phy_layer_protocol() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol)
    return static_cast<::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol>(wifi_phy_layer_protocol_);
}
void SystemProfileProto_Network::set_wifi_phy_layer_protocol(::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol value)
{
    assert(::metrics::SystemProfileProto_Network_WifiPHYLayerProtocol_IsValid(value));
    set_has_wifi_phy_layer_protocol();
    wifi_phy_layer_protocol_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.wifi_phy_layer_protocol)
}

// optional .metrics.SystemProfileProto.Network.WifiAccessPoint access_point_info = 5;
bool SystemProfileProto_Network::has_access_point_info() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Network::set_has_access_point_info()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Network::clear_has_access_point_info()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Network::clear_access_point_info()
{
    if (access_point_info_ != NULL)
        access_point_info_->::metrics::SystemProfileProto_Network_WifiAccessPoint::Clear();
    clear_has_access_point_info();
}
const ::metrics::SystemProfileProto_Network_WifiAccessPoint& SystemProfileProto_Network::access_point_info() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.access_point_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return access_point_info_ != NULL ? *access_point_info_ : *default_instance().access_point_info_;
#else
    return access_point_info_ != NULL ? *access_point_info_ : *default_instance_->access_point_info_;
#endif
}
::metrics::SystemProfileProto_Network_WifiAccessPoint* SystemProfileProto_Network::mutable_access_point_info()
{
    set_has_access_point_info();
    if (access_point_info_ == NULL) {
        access_point_info_ = new ::metrics::SystemProfileProto_Network_WifiAccessPoint;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Network.access_point_info)
    return access_point_info_;
}
::metrics::SystemProfileProto_Network_WifiAccessPoint* SystemProfileProto_Network::release_access_point_info()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Network.access_point_info)
    clear_has_access_point_info();
    ::metrics::SystemProfileProto_Network_WifiAccessPoint* temp = access_point_info_;
    access_point_info_ = NULL;
    return temp;
}
void SystemProfileProto_Network::set_allocated_access_point_info(::metrics::SystemProfileProto_Network_WifiAccessPoint* access_point_info)
{
    delete access_point_info_;
    access_point_info_ = access_point_info;
    if (access_point_info) {
        set_has_access_point_info();
    } else {
        clear_has_access_point_info();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Network.access_point_info)
}

// optional .metrics.SystemProfileProto.Network.EffectiveConnectionType effective_connection_type = 6;
bool SystemProfileProto_Network::has_effective_connection_type() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_Network::set_has_effective_connection_type()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_Network::clear_has_effective_connection_type()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_Network::clear_effective_connection_type()
{
    effective_connection_type_ = 0;
    clear_has_effective_connection_type();
}
::metrics::SystemProfileProto_Network_EffectiveConnectionType SystemProfileProto_Network::effective_connection_type() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Network.effective_connection_type)
    return static_cast<::metrics::SystemProfileProto_Network_EffectiveConnectionType>(effective_connection_type_);
}
void SystemProfileProto_Network::set_effective_connection_type(::metrics::SystemProfileProto_Network_EffectiveConnectionType value)
{
    assert(::metrics::SystemProfileProto_Network_EffectiveConnectionType_IsValid(value));
    set_has_effective_connection_type();
    effective_connection_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Network.effective_connection_type)
}

// -------------------------------------------------------------------

// SystemProfileProto_GoogleUpdate_ProductInfo

// optional string version = 1;
bool SystemProfileProto_GoogleUpdate_ProductInfo::has_version() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_has_version()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_has_version()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_version()
{
    version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_version();
}
const ::std::string& SystemProfileProto_GoogleUpdate_ProductInfo::version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
    return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(const ::std::string& value)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(const char* value)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_version(const char* value, size_t size)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}
::std::string* SystemProfileProto_GoogleUpdate_ProductInfo::mutable_version()
{
    set_has_version();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
    return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_GoogleUpdate_ProductInfo::release_version()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
    clear_has_version();
    return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_allocated_version(::std::string* version)
{
    if (version != NULL) {
        set_has_version();
    } else {
        clear_has_version();
    }
    version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.version)
}

// optional int64 last_update_success_timestamp = 2;
bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_update_success_timestamp() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_has_last_update_success_timestamp()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_has_last_update_success_timestamp()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_update_success_timestamp()
{
    last_update_success_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_last_update_success_timestamp();
}
::google::protobuf::int64 SystemProfileProto_GoogleUpdate_ProductInfo::last_update_success_timestamp() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_update_success_timestamp)
    return last_update_success_timestamp_;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_update_success_timestamp(::google::protobuf::int64 value)
{
    set_has_last_update_success_timestamp();
    last_update_success_timestamp_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_update_success_timestamp)
}

// optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo.InstallResult last_result = 3;
bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_result() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_has_last_result()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_has_last_result()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_result()
{
    last_result_ = 0;
    clear_has_last_result();
}
::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult SystemProfileProto_GoogleUpdate_ProductInfo::last_result() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_result)
    return static_cast<::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult>(last_result_);
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_result(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult value)
{
    assert(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo_InstallResult_IsValid(value));
    set_has_last_result();
    last_result_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_result)
}

// optional int32 last_error = 4;
bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_error() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_has_last_error()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_has_last_error()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_error()
{
    last_error_ = 0;
    clear_has_last_error();
}
::google::protobuf::int32 SystemProfileProto_GoogleUpdate_ProductInfo::last_error() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_error)
    return last_error_;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_error(::google::protobuf::int32 value)
{
    set_has_last_error();
    last_error_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_error)
}

// optional int32 last_extra_error = 5;
bool SystemProfileProto_GoogleUpdate_ProductInfo::has_last_extra_error() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_has_last_extra_error()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_has_last_extra_error()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::clear_last_extra_error()
{
    last_extra_error_ = 0;
    clear_has_last_extra_error();
}
::google::protobuf::int32 SystemProfileProto_GoogleUpdate_ProductInfo::last_extra_error() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_extra_error)
    return last_extra_error_;
}
void SystemProfileProto_GoogleUpdate_ProductInfo::set_last_extra_error(::google::protobuf::int32 value)
{
    set_has_last_extra_error();
    last_extra_error_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.ProductInfo.last_extra_error)
}

// -------------------------------------------------------------------

// SystemProfileProto_GoogleUpdate

// optional bool is_system_install = 1;
bool SystemProfileProto_GoogleUpdate::has_is_system_install() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_GoogleUpdate::set_has_is_system_install()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_GoogleUpdate::clear_has_is_system_install()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_GoogleUpdate::clear_is_system_install()
{
    is_system_install_ = false;
    clear_has_is_system_install();
}
bool SystemProfileProto_GoogleUpdate::is_system_install() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.is_system_install)
    return is_system_install_;
}
void SystemProfileProto_GoogleUpdate::set_is_system_install(bool value)
{
    set_has_is_system_install();
    is_system_install_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.is_system_install)
}

// optional int64 last_automatic_start_timestamp = 2;
bool SystemProfileProto_GoogleUpdate::has_last_automatic_start_timestamp() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_GoogleUpdate::set_has_last_automatic_start_timestamp()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_GoogleUpdate::clear_has_last_automatic_start_timestamp()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_GoogleUpdate::clear_last_automatic_start_timestamp()
{
    last_automatic_start_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_last_automatic_start_timestamp();
}
::google::protobuf::int64 SystemProfileProto_GoogleUpdate::last_automatic_start_timestamp() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.last_automatic_start_timestamp)
    return last_automatic_start_timestamp_;
}
void SystemProfileProto_GoogleUpdate::set_last_automatic_start_timestamp(::google::protobuf::int64 value)
{
    set_has_last_automatic_start_timestamp();
    last_automatic_start_timestamp_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.last_automatic_start_timestamp)
}

// optional int64 last_update_check_timestamp = 3;
bool SystemProfileProto_GoogleUpdate::has_last_update_check_timestamp() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_GoogleUpdate::set_has_last_update_check_timestamp()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_GoogleUpdate::clear_has_last_update_check_timestamp()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_GoogleUpdate::clear_last_update_check_timestamp()
{
    last_update_check_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_last_update_check_timestamp();
}
::google::protobuf::int64 SystemProfileProto_GoogleUpdate::last_update_check_timestamp() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.last_update_check_timestamp)
    return last_update_check_timestamp_;
}
void SystemProfileProto_GoogleUpdate::set_last_update_check_timestamp(::google::protobuf::int64 value)
{
    set_has_last_update_check_timestamp();
    last_update_check_timestamp_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.GoogleUpdate.last_update_check_timestamp)
}

// optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo google_update_status = 4;
bool SystemProfileProto_GoogleUpdate::has_google_update_status() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_GoogleUpdate::set_has_google_update_status()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_GoogleUpdate::clear_has_google_update_status()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_GoogleUpdate::clear_google_update_status()
{
    if (google_update_status_ != NULL)
        google_update_status_->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::Clear();
    clear_has_google_update_status();
}
const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo& SystemProfileProto_GoogleUpdate::google_update_status() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return google_update_status_ != NULL ? *google_update_status_ : *default_instance().google_update_status_;
#else
    return google_update_status_ != NULL ? *google_update_status_ : *default_instance_->google_update_status_;
#endif
}
::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::mutable_google_update_status()
{
    set_has_google_update_status();
    if (google_update_status_ == NULL) {
        google_update_status_ = new ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
    return google_update_status_;
}
::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::release_google_update_status()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
    clear_has_google_update_status();
    ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* temp = google_update_status_;
    google_update_status_ = NULL;
    return temp;
}
void SystemProfileProto_GoogleUpdate::set_allocated_google_update_status(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* google_update_status)
{
    delete google_update_status_;
    google_update_status_ = google_update_status;
    if (google_update_status) {
        set_has_google_update_status();
    } else {
        clear_has_google_update_status();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.GoogleUpdate.google_update_status)
}

// optional .metrics.SystemProfileProto.GoogleUpdate.ProductInfo client_status = 5;
bool SystemProfileProto_GoogleUpdate::has_client_status() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_GoogleUpdate::set_has_client_status()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_GoogleUpdate::clear_has_client_status()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_GoogleUpdate::clear_client_status()
{
    if (client_status_ != NULL)
        client_status_->::metrics::SystemProfileProto_GoogleUpdate_ProductInfo::Clear();
    clear_has_client_status();
}
const ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo& SystemProfileProto_GoogleUpdate::client_status() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.GoogleUpdate.client_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return client_status_ != NULL ? *client_status_ : *default_instance().client_status_;
#else
    return client_status_ != NULL ? *client_status_ : *default_instance_->client_status_;
#endif
}
::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::mutable_client_status()
{
    set_has_client_status();
    if (client_status_ == NULL) {
        client_status_ = new ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.GoogleUpdate.client_status)
    return client_status_;
}
::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* SystemProfileProto_GoogleUpdate::release_client_status()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.GoogleUpdate.client_status)
    clear_has_client_status();
    ::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* temp = client_status_;
    client_status_ = NULL;
    return temp;
}
void SystemProfileProto_GoogleUpdate::set_allocated_client_status(::metrics::SystemProfileProto_GoogleUpdate_ProductInfo* client_status)
{
    delete client_status_;
    client_status_ = client_status;
    if (client_status) {
        set_has_client_status();
    } else {
        clear_has_client_status();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.GoogleUpdate.client_status)
}

// -------------------------------------------------------------------

// SystemProfileProto_Plugin

// optional string name = 1;
bool SystemProfileProto_Plugin::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Plugin::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Plugin::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Plugin::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& SystemProfileProto_Plugin::name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Plugin::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.name)
}
void SystemProfileProto_Plugin::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Plugin.name)
}
void SystemProfileProto_Plugin::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Plugin.name)
}
::std::string* SystemProfileProto_Plugin::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Plugin.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Plugin::release_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Plugin.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Plugin::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Plugin.name)
}

// optional string filename = 2;
bool SystemProfileProto_Plugin::has_filename() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Plugin::set_has_filename()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Plugin::clear_has_filename()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Plugin::clear_filename()
{
    filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filename();
}
const ::std::string& SystemProfileProto_Plugin::filename() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.filename)
    return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Plugin::set_filename(const ::std::string& value)
{
    set_has_filename();
    filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.filename)
}
void SystemProfileProto_Plugin::set_filename(const char* value)
{
    set_has_filename();
    filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Plugin.filename)
}
void SystemProfileProto_Plugin::set_filename(const char* value, size_t size)
{
    set_has_filename();
    filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Plugin.filename)
}
::std::string* SystemProfileProto_Plugin::mutable_filename()
{
    set_has_filename();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Plugin.filename)
    return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Plugin::release_filename()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Plugin.filename)
    clear_has_filename();
    return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Plugin::set_allocated_filename(::std::string* filename)
{
    if (filename != NULL) {
        set_has_filename();
    } else {
        clear_has_filename();
    }
    filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Plugin.filename)
}

// optional string version = 3;
bool SystemProfileProto_Plugin::has_version() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Plugin::set_has_version()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Plugin::clear_has_version()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Plugin::clear_version()
{
    version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_version();
}
const ::std::string& SystemProfileProto_Plugin::version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.version)
    return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Plugin::set_version(const ::std::string& value)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.version)
}
void SystemProfileProto_Plugin::set_version(const char* value)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.Plugin.version)
}
void SystemProfileProto_Plugin::set_version(const char* value, size_t size)
{
    set_has_version();
    version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.Plugin.version)
}
::std::string* SystemProfileProto_Plugin::mutable_version()
{
    set_has_version();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Plugin.version)
    return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_Plugin::release_version()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Plugin.version)
    clear_has_version();
    return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_Plugin::set_allocated_version(::std::string* version)
{
    if (version != NULL) {
        set_has_version();
    } else {
        clear_has_version();
    }
    version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Plugin.version)
}

// optional bool is_disabled = 4;
bool SystemProfileProto_Plugin::has_is_disabled() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Plugin::set_has_is_disabled()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Plugin::clear_has_is_disabled()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Plugin::clear_is_disabled()
{
    is_disabled_ = false;
    clear_has_is_disabled();
}
bool SystemProfileProto_Plugin::is_disabled() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.is_disabled)
    return is_disabled_;
}
void SystemProfileProto_Plugin::set_is_disabled(bool value)
{
    set_has_is_disabled();
    is_disabled_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.is_disabled)
}

// optional bool is_pepper = 5;
bool SystemProfileProto_Plugin::has_is_pepper() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Plugin::set_has_is_pepper()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Plugin::clear_has_is_pepper()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Plugin::clear_is_pepper()
{
    is_pepper_ = false;
    clear_has_is_pepper();
}
bool SystemProfileProto_Plugin::is_pepper() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Plugin.is_pepper)
    return is_pepper_;
}
void SystemProfileProto_Plugin::set_is_pepper(bool value)
{
    set_has_is_pepper();
    is_pepper_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Plugin.is_pepper)
}

// -------------------------------------------------------------------

// SystemProfileProto_Stability_PluginStability

// optional .metrics.SystemProfileProto.Plugin plugin = 1;
bool SystemProfileProto_Stability_PluginStability::has_plugin() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Stability_PluginStability::set_has_plugin()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Stability_PluginStability::clear_has_plugin()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Stability_PluginStability::clear_plugin()
{
    if (plugin_ != NULL)
        plugin_->::metrics::SystemProfileProto_Plugin::Clear();
    clear_has_plugin();
}
const ::metrics::SystemProfileProto_Plugin& SystemProfileProto_Stability_PluginStability::plugin() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.plugin)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return plugin_ != NULL ? *plugin_ : *default_instance().plugin_;
#else
    return plugin_ != NULL ? *plugin_ : *default_instance_->plugin_;
#endif
}
::metrics::SystemProfileProto_Plugin* SystemProfileProto_Stability_PluginStability::mutable_plugin()
{
    set_has_plugin();
    if (plugin_ == NULL) {
        plugin_ = new ::metrics::SystemProfileProto_Plugin;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Stability.PluginStability.plugin)
    return plugin_;
}
::metrics::SystemProfileProto_Plugin* SystemProfileProto_Stability_PluginStability::release_plugin()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.Stability.PluginStability.plugin)
    clear_has_plugin();
    ::metrics::SystemProfileProto_Plugin* temp = plugin_;
    plugin_ = NULL;
    return temp;
}
void SystemProfileProto_Stability_PluginStability::set_allocated_plugin(::metrics::SystemProfileProto_Plugin* plugin)
{
    delete plugin_;
    plugin_ = plugin;
    if (plugin) {
        set_has_plugin();
    } else {
        clear_has_plugin();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.Stability.PluginStability.plugin)
}

// optional int32 launch_count = 2;
bool SystemProfileProto_Stability_PluginStability::has_launch_count() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Stability_PluginStability::set_has_launch_count()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Stability_PluginStability::clear_has_launch_count()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Stability_PluginStability::clear_launch_count()
{
    launch_count_ = 0;
    clear_has_launch_count();
}
::google::protobuf::int32 SystemProfileProto_Stability_PluginStability::launch_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.launch_count)
    return launch_count_;
}
void SystemProfileProto_Stability_PluginStability::set_launch_count(::google::protobuf::int32 value)
{
    set_has_launch_count();
    launch_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.launch_count)
}

// optional int32 instance_count = 3;
bool SystemProfileProto_Stability_PluginStability::has_instance_count() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Stability_PluginStability::set_has_instance_count()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Stability_PluginStability::clear_has_instance_count()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Stability_PluginStability::clear_instance_count()
{
    instance_count_ = 0;
    clear_has_instance_count();
}
::google::protobuf::int32 SystemProfileProto_Stability_PluginStability::instance_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.instance_count)
    return instance_count_;
}
void SystemProfileProto_Stability_PluginStability::set_instance_count(::google::protobuf::int32 value)
{
    set_has_instance_count();
    instance_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.instance_count)
}

// optional int32 crash_count = 4;
bool SystemProfileProto_Stability_PluginStability::has_crash_count() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Stability_PluginStability::set_has_crash_count()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Stability_PluginStability::clear_has_crash_count()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Stability_PluginStability::clear_crash_count()
{
    crash_count_ = 0;
    clear_has_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability_PluginStability::crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.crash_count)
    return crash_count_;
}
void SystemProfileProto_Stability_PluginStability::set_crash_count(::google::protobuf::int32 value)
{
    set_has_crash_count();
    crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.crash_count)
}

// optional int32 loading_error_count = 5;
bool SystemProfileProto_Stability_PluginStability::has_loading_error_count() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Stability_PluginStability::set_has_loading_error_count()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Stability_PluginStability::clear_has_loading_error_count()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Stability_PluginStability::clear_loading_error_count()
{
    loading_error_count_ = 0;
    clear_has_loading_error_count();
}
::google::protobuf::int32 SystemProfileProto_Stability_PluginStability::loading_error_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.PluginStability.loading_error_count)
    return loading_error_count_;
}
void SystemProfileProto_Stability_PluginStability::set_loading_error_count(::google::protobuf::int32 value)
{
    set_has_loading_error_count();
    loading_error_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.PluginStability.loading_error_count)
}

// -------------------------------------------------------------------

// SystemProfileProto_Stability

// optional int64 incremental_uptime_sec = 1;
bool SystemProfileProto_Stability::has_incremental_uptime_sec() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_Stability::set_has_incremental_uptime_sec()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_Stability::clear_has_incremental_uptime_sec()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_Stability::clear_incremental_uptime_sec()
{
    incremental_uptime_sec_ = GOOGLE_LONGLONG(0);
    clear_has_incremental_uptime_sec();
}
::google::protobuf::int64 SystemProfileProto_Stability::incremental_uptime_sec() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.incremental_uptime_sec)
    return incremental_uptime_sec_;
}
void SystemProfileProto_Stability::set_incremental_uptime_sec(::google::protobuf::int64 value)
{
    set_has_incremental_uptime_sec();
    incremental_uptime_sec_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.incremental_uptime_sec)
}

// optional int64 uptime_sec = 23;
bool SystemProfileProto_Stability::has_uptime_sec() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_Stability::set_has_uptime_sec()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_Stability::clear_has_uptime_sec()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_Stability::clear_uptime_sec()
{
    uptime_sec_ = GOOGLE_LONGLONG(0);
    clear_has_uptime_sec();
}
::google::protobuf::int64 SystemProfileProto_Stability::uptime_sec() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.uptime_sec)
    return uptime_sec_;
}
void SystemProfileProto_Stability::set_uptime_sec(::google::protobuf::int64 value)
{
    set_has_uptime_sec();
    uptime_sec_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.uptime_sec)
}

// optional int32 page_load_count = 2;
bool SystemProfileProto_Stability::has_page_load_count() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_Stability::set_has_page_load_count()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_Stability::clear_has_page_load_count()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_Stability::clear_page_load_count()
{
    page_load_count_ = 0;
    clear_has_page_load_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::page_load_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.page_load_count)
    return page_load_count_;
}
void SystemProfileProto_Stability::set_page_load_count(::google::protobuf::int32 value)
{
    set_has_page_load_count();
    page_load_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.page_load_count)
}

// optional int32 renderer_crash_count = 3;
bool SystemProfileProto_Stability::has_renderer_crash_count() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_Stability::set_has_renderer_crash_count()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_Stability::clear_has_renderer_crash_count()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_Stability::clear_renderer_crash_count()
{
    renderer_crash_count_ = 0;
    clear_has_renderer_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::renderer_crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_crash_count)
    return renderer_crash_count_;
}
void SystemProfileProto_Stability::set_renderer_crash_count(::google::protobuf::int32 value)
{
    set_has_renderer_crash_count();
    renderer_crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_crash_count)
}

// optional int32 renderer_hang_count = 4;
bool SystemProfileProto_Stability::has_renderer_hang_count() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_Stability::set_has_renderer_hang_count()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_Stability::clear_has_renderer_hang_count()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_Stability::clear_renderer_hang_count()
{
    renderer_hang_count_ = 0;
    clear_has_renderer_hang_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::renderer_hang_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_hang_count)
    return renderer_hang_count_;
}
void SystemProfileProto_Stability::set_renderer_hang_count(::google::protobuf::int32 value)
{
    set_has_renderer_hang_count();
    renderer_hang_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_hang_count)
}

// optional int32 renderer_failed_launch_count = 24;
bool SystemProfileProto_Stability::has_renderer_failed_launch_count() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_Stability::set_has_renderer_failed_launch_count()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_Stability::clear_has_renderer_failed_launch_count()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_Stability::clear_renderer_failed_launch_count()
{
    renderer_failed_launch_count_ = 0;
    clear_has_renderer_failed_launch_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::renderer_failed_launch_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_failed_launch_count)
    return renderer_failed_launch_count_;
}
void SystemProfileProto_Stability::set_renderer_failed_launch_count(::google::protobuf::int32 value)
{
    set_has_renderer_failed_launch_count();
    renderer_failed_launch_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_failed_launch_count)
}

// optional int32 renderer_launch_count = 26;
bool SystemProfileProto_Stability::has_renderer_launch_count() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SystemProfileProto_Stability::set_has_renderer_launch_count()
{
    _has_bits_[0] |= 0x00000040u;
}
void SystemProfileProto_Stability::clear_has_renderer_launch_count()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SystemProfileProto_Stability::clear_renderer_launch_count()
{
    renderer_launch_count_ = 0;
    clear_has_renderer_launch_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::renderer_launch_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.renderer_launch_count)
    return renderer_launch_count_;
}
void SystemProfileProto_Stability::set_renderer_launch_count(::google::protobuf::int32 value)
{
    set_has_renderer_launch_count();
    renderer_launch_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.renderer_launch_count)
}

// optional int32 extension_renderer_crash_count = 5;
bool SystemProfileProto_Stability::has_extension_renderer_crash_count() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void SystemProfileProto_Stability::set_has_extension_renderer_crash_count()
{
    _has_bits_[0] |= 0x00000080u;
}
void SystemProfileProto_Stability::clear_has_extension_renderer_crash_count()
{
    _has_bits_[0] &= ~0x00000080u;
}
void SystemProfileProto_Stability::clear_extension_renderer_crash_count()
{
    extension_renderer_crash_count_ = 0;
    clear_has_extension_renderer_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::extension_renderer_crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.extension_renderer_crash_count)
    return extension_renderer_crash_count_;
}
void SystemProfileProto_Stability::set_extension_renderer_crash_count(::google::protobuf::int32 value)
{
    set_has_extension_renderer_crash_count();
    extension_renderer_crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.extension_renderer_crash_count)
}

// optional int32 extension_renderer_failed_launch_count = 25;
bool SystemProfileProto_Stability::has_extension_renderer_failed_launch_count() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void SystemProfileProto_Stability::set_has_extension_renderer_failed_launch_count()
{
    _has_bits_[0] |= 0x00000100u;
}
void SystemProfileProto_Stability::clear_has_extension_renderer_failed_launch_count()
{
    _has_bits_[0] &= ~0x00000100u;
}
void SystemProfileProto_Stability::clear_extension_renderer_failed_launch_count()
{
    extension_renderer_failed_launch_count_ = 0;
    clear_has_extension_renderer_failed_launch_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::extension_renderer_failed_launch_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.extension_renderer_failed_launch_count)
    return extension_renderer_failed_launch_count_;
}
void SystemProfileProto_Stability::set_extension_renderer_failed_launch_count(::google::protobuf::int32 value)
{
    set_has_extension_renderer_failed_launch_count();
    extension_renderer_failed_launch_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.extension_renderer_failed_launch_count)
}

// optional int32 extension_renderer_launch_count = 27;
bool SystemProfileProto_Stability::has_extension_renderer_launch_count() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void SystemProfileProto_Stability::set_has_extension_renderer_launch_count()
{
    _has_bits_[0] |= 0x00000200u;
}
void SystemProfileProto_Stability::clear_has_extension_renderer_launch_count()
{
    _has_bits_[0] &= ~0x00000200u;
}
void SystemProfileProto_Stability::clear_extension_renderer_launch_count()
{
    extension_renderer_launch_count_ = 0;
    clear_has_extension_renderer_launch_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::extension_renderer_launch_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.extension_renderer_launch_count)
    return extension_renderer_launch_count_;
}
void SystemProfileProto_Stability::set_extension_renderer_launch_count(::google::protobuf::int32 value)
{
    set_has_extension_renderer_launch_count();
    extension_renderer_launch_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.extension_renderer_launch_count)
}

// optional int32 child_process_crash_count = 6;
bool SystemProfileProto_Stability::has_child_process_crash_count() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void SystemProfileProto_Stability::set_has_child_process_crash_count()
{
    _has_bits_[0] |= 0x00000400u;
}
void SystemProfileProto_Stability::clear_has_child_process_crash_count()
{
    _has_bits_[0] &= ~0x00000400u;
}
void SystemProfileProto_Stability::clear_child_process_crash_count()
{
    child_process_crash_count_ = 0;
    clear_has_child_process_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::child_process_crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.child_process_crash_count)
    return child_process_crash_count_;
}
void SystemProfileProto_Stability::set_child_process_crash_count(::google::protobuf::int32 value)
{
    set_has_child_process_crash_count();
    child_process_crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.child_process_crash_count)
}

// optional int32 other_user_crash_count = 7;
bool SystemProfileProto_Stability::has_other_user_crash_count() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void SystemProfileProto_Stability::set_has_other_user_crash_count()
{
    _has_bits_[0] |= 0x00000800u;
}
void SystemProfileProto_Stability::clear_has_other_user_crash_count()
{
    _has_bits_[0] &= ~0x00000800u;
}
void SystemProfileProto_Stability::clear_other_user_crash_count()
{
    other_user_crash_count_ = 0;
    clear_has_other_user_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::other_user_crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.other_user_crash_count)
    return other_user_crash_count_;
}
void SystemProfileProto_Stability::set_other_user_crash_count(::google::protobuf::int32 value)
{
    set_has_other_user_crash_count();
    other_user_crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.other_user_crash_count)
}

// optional int32 kernel_crash_count = 8;
bool SystemProfileProto_Stability::has_kernel_crash_count() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void SystemProfileProto_Stability::set_has_kernel_crash_count()
{
    _has_bits_[0] |= 0x00001000u;
}
void SystemProfileProto_Stability::clear_has_kernel_crash_count()
{
    _has_bits_[0] &= ~0x00001000u;
}
void SystemProfileProto_Stability::clear_kernel_crash_count()
{
    kernel_crash_count_ = 0;
    clear_has_kernel_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::kernel_crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.kernel_crash_count)
    return kernel_crash_count_;
}
void SystemProfileProto_Stability::set_kernel_crash_count(::google::protobuf::int32 value)
{
    set_has_kernel_crash_count();
    kernel_crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.kernel_crash_count)
}

// optional int32 unclean_system_shutdown_count = 9;
bool SystemProfileProto_Stability::has_unclean_system_shutdown_count() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void SystemProfileProto_Stability::set_has_unclean_system_shutdown_count()
{
    _has_bits_[0] |= 0x00002000u;
}
void SystemProfileProto_Stability::clear_has_unclean_system_shutdown_count()
{
    _has_bits_[0] &= ~0x00002000u;
}
void SystemProfileProto_Stability::clear_unclean_system_shutdown_count()
{
    unclean_system_shutdown_count_ = 0;
    clear_has_unclean_system_shutdown_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::unclean_system_shutdown_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.unclean_system_shutdown_count)
    return unclean_system_shutdown_count_;
}
void SystemProfileProto_Stability::set_unclean_system_shutdown_count(::google::protobuf::int32 value)
{
    set_has_unclean_system_shutdown_count();
    unclean_system_shutdown_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.unclean_system_shutdown_count)
}

// optional int32 launch_count = 15;
bool SystemProfileProto_Stability::has_launch_count() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void SystemProfileProto_Stability::set_has_launch_count()
{
    _has_bits_[0] |= 0x00004000u;
}
void SystemProfileProto_Stability::clear_has_launch_count()
{
    _has_bits_[0] &= ~0x00004000u;
}
void SystemProfileProto_Stability::clear_launch_count()
{
    launch_count_ = 0;
    clear_has_launch_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::launch_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.launch_count)
    return launch_count_;
}
void SystemProfileProto_Stability::set_launch_count(::google::protobuf::int32 value)
{
    set_has_launch_count();
    launch_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.launch_count)
}

// optional int32 crash_count = 16;
bool SystemProfileProto_Stability::has_crash_count() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void SystemProfileProto_Stability::set_has_crash_count()
{
    _has_bits_[0] |= 0x00008000u;
}
void SystemProfileProto_Stability::clear_has_crash_count()
{
    _has_bits_[0] &= ~0x00008000u;
}
void SystemProfileProto_Stability::clear_crash_count()
{
    crash_count_ = 0;
    clear_has_crash_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::crash_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.crash_count)
    return crash_count_;
}
void SystemProfileProto_Stability::set_crash_count(::google::protobuf::int32 value)
{
    set_has_crash_count();
    crash_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.crash_count)
}

// optional int32 incomplete_shutdown_count = 17;
bool SystemProfileProto_Stability::has_incomplete_shutdown_count() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void SystemProfileProto_Stability::set_has_incomplete_shutdown_count()
{
    _has_bits_[0] |= 0x00010000u;
}
void SystemProfileProto_Stability::clear_has_incomplete_shutdown_count()
{
    _has_bits_[0] &= ~0x00010000u;
}
void SystemProfileProto_Stability::clear_incomplete_shutdown_count()
{
    incomplete_shutdown_count_ = 0;
    clear_has_incomplete_shutdown_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::incomplete_shutdown_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.incomplete_shutdown_count)
    return incomplete_shutdown_count_;
}
void SystemProfileProto_Stability::set_incomplete_shutdown_count(::google::protobuf::int32 value)
{
    set_has_incomplete_shutdown_count();
    incomplete_shutdown_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.incomplete_shutdown_count)
}

// optional int32 breakpad_registration_success_count = 18;
bool SystemProfileProto_Stability::has_breakpad_registration_success_count() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void SystemProfileProto_Stability::set_has_breakpad_registration_success_count()
{
    _has_bits_[0] |= 0x00020000u;
}
void SystemProfileProto_Stability::clear_has_breakpad_registration_success_count()
{
    _has_bits_[0] &= ~0x00020000u;
}
void SystemProfileProto_Stability::clear_breakpad_registration_success_count()
{
    breakpad_registration_success_count_ = 0;
    clear_has_breakpad_registration_success_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::breakpad_registration_success_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.breakpad_registration_success_count)
    return breakpad_registration_success_count_;
}
void SystemProfileProto_Stability::set_breakpad_registration_success_count(::google::protobuf::int32 value)
{
    set_has_breakpad_registration_success_count();
    breakpad_registration_success_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.breakpad_registration_success_count)
}

// optional int32 breakpad_registration_failure_count = 19;
bool SystemProfileProto_Stability::has_breakpad_registration_failure_count() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
void SystemProfileProto_Stability::set_has_breakpad_registration_failure_count()
{
    _has_bits_[0] |= 0x00040000u;
}
void SystemProfileProto_Stability::clear_has_breakpad_registration_failure_count()
{
    _has_bits_[0] &= ~0x00040000u;
}
void SystemProfileProto_Stability::clear_breakpad_registration_failure_count()
{
    breakpad_registration_failure_count_ = 0;
    clear_has_breakpad_registration_failure_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::breakpad_registration_failure_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.breakpad_registration_failure_count)
    return breakpad_registration_failure_count_;
}
void SystemProfileProto_Stability::set_breakpad_registration_failure_count(::google::protobuf::int32 value)
{
    set_has_breakpad_registration_failure_count();
    breakpad_registration_failure_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.breakpad_registration_failure_count)
}

// optional int32 debugger_present_count = 20;
bool SystemProfileProto_Stability::has_debugger_present_count() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
void SystemProfileProto_Stability::set_has_debugger_present_count()
{
    _has_bits_[0] |= 0x00080000u;
}
void SystemProfileProto_Stability::clear_has_debugger_present_count()
{
    _has_bits_[0] &= ~0x00080000u;
}
void SystemProfileProto_Stability::clear_debugger_present_count()
{
    debugger_present_count_ = 0;
    clear_has_debugger_present_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::debugger_present_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.debugger_present_count)
    return debugger_present_count_;
}
void SystemProfileProto_Stability::set_debugger_present_count(::google::protobuf::int32 value)
{
    set_has_debugger_present_count();
    debugger_present_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.debugger_present_count)
}

// optional int32 debugger_not_present_count = 21;
bool SystemProfileProto_Stability::has_debugger_not_present_count() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
void SystemProfileProto_Stability::set_has_debugger_not_present_count()
{
    _has_bits_[0] |= 0x00100000u;
}
void SystemProfileProto_Stability::clear_has_debugger_not_present_count()
{
    _has_bits_[0] &= ~0x00100000u;
}
void SystemProfileProto_Stability::clear_debugger_not_present_count()
{
    debugger_not_present_count_ = 0;
    clear_has_debugger_not_present_count();
}
::google::protobuf::int32 SystemProfileProto_Stability::debugger_not_present_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.debugger_not_present_count)
    return debugger_not_present_count_;
}
void SystemProfileProto_Stability::set_debugger_not_present_count(::google::protobuf::int32 value)
{
    set_has_debugger_not_present_count();
    debugger_not_present_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.Stability.debugger_not_present_count)
}

// repeated .metrics.SystemProfileProto.Stability.PluginStability plugin_stability = 22;
int SystemProfileProto_Stability::plugin_stability_size() const
{
    return plugin_stability_.size();
}
void SystemProfileProto_Stability::clear_plugin_stability()
{
    plugin_stability_.Clear();
}
const ::metrics::SystemProfileProto_Stability_PluginStability& SystemProfileProto_Stability::plugin_stability(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.Stability.plugin_stability)
    return plugin_stability_.Get(index);
}
::metrics::SystemProfileProto_Stability_PluginStability* SystemProfileProto_Stability::mutable_plugin_stability(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.Stability.plugin_stability)
    return plugin_stability_.Mutable(index);
}
::metrics::SystemProfileProto_Stability_PluginStability* SystemProfileProto_Stability::add_plugin_stability()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.Stability.plugin_stability)
    return plugin_stability_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Stability_PluginStability>*
SystemProfileProto_Stability::mutable_plugin_stability()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.Stability.plugin_stability)
    return &plugin_stability_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Stability_PluginStability>&
SystemProfileProto_Stability::plugin_stability() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.Stability.plugin_stability)
    return plugin_stability_;
}

// -------------------------------------------------------------------

// SystemProfileProto_FieldTrial

// optional fixed32 name_id = 1;
bool SystemProfileProto_FieldTrial::has_name_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_FieldTrial::set_has_name_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_FieldTrial::clear_has_name_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_FieldTrial::clear_name_id()
{
    name_id_ = 0u;
    clear_has_name_id();
}
::google::protobuf::uint32 SystemProfileProto_FieldTrial::name_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.FieldTrial.name_id)
    return name_id_;
}
void SystemProfileProto_FieldTrial::set_name_id(::google::protobuf::uint32 value)
{
    set_has_name_id();
    name_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.FieldTrial.name_id)
}

// optional fixed32 group_id = 2;
bool SystemProfileProto_FieldTrial::has_group_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_FieldTrial::set_has_group_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_FieldTrial::clear_has_group_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_FieldTrial::clear_group_id()
{
    group_id_ = 0u;
    clear_has_group_id();
}
::google::protobuf::uint32 SystemProfileProto_FieldTrial::group_id() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.FieldTrial.group_id)
    return group_id_;
}
void SystemProfileProto_FieldTrial::set_group_id(::google::protobuf::uint32 value)
{
    set_has_group_id();
    group_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.FieldTrial.group_id)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAudioVideoDevice_AudioDescription

// optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.AudioFormat audio_format = 1;
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_audio_format() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_has_audio_format()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_has_audio_format()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_audio_format()
{
    audio_format_ = 0;
    clear_has_audio_format();
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::audio_format() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.audio_format)
    return static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat>(audio_format_);
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_audio_format(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat value)
{
    assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_AudioFormat_IsValid(value));
    set_has_audio_format();
    audio_format_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.audio_format)
}

// optional int32 num_channels = 2;
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_num_channels() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_has_num_channels()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_has_num_channels()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_num_channels()
{
    num_channels_ = 0;
    clear_has_num_channels();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::num_channels() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.num_channels)
    return num_channels_;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_num_channels(::google::protobuf::int32 value)
{
    set_has_num_channels();
    num_channels_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.num_channels)
}

// repeated int32 sample_frequency_hz = 3;
int SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::sample_frequency_hz_size() const
{
    return sample_frequency_hz_.size();
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_sample_frequency_hz()
{
    sample_frequency_hz_.Clear();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::sample_frequency_hz(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
    return sample_frequency_hz_.Get(index);
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_sample_frequency_hz(int index, ::google::protobuf::int32 value)
{
    sample_frequency_hz_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::add_sample_frequency_hz(::google::protobuf::int32 value)
{
    sample_frequency_hz_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
}
const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::sample_frequency_hz() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
    return sample_frequency_hz_;
}
::google::protobuf::RepeatedField<::google::protobuf::int32>*
SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::mutable_sample_frequency_hz()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.sample_frequency_hz)
    return &sample_frequency_hz_;
}

// optional int32 max_bit_rate_per_second = 4;
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_max_bit_rate_per_second() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_has_max_bit_rate_per_second()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_has_max_bit_rate_per_second()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_max_bit_rate_per_second()
{
    max_bit_rate_per_second_ = 0;
    clear_has_max_bit_rate_per_second();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::max_bit_rate_per_second() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.max_bit_rate_per_second)
    return max_bit_rate_per_second_;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_max_bit_rate_per_second(::google::protobuf::int32 value)
{
    set_has_max_bit_rate_per_second();
    max_bit_rate_per_second_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.max_bit_rate_per_second)
}

// optional int32 bit_depth = 5;
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_bit_depth() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_has_bit_depth()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_has_bit_depth()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_bit_depth()
{
    bit_depth_ = 0;
    clear_has_bit_depth();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::bit_depth() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.bit_depth)
    return bit_depth_;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_bit_depth(::google::protobuf::int32 value)
{
    set_has_bit_depth();
    bit_depth_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.bit_depth)
}

// optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.OutputMode output_mode = 6;
bool SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::has_output_mode() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_has_output_mode()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_has_output_mode()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::clear_output_mode()
{
    output_mode_ = 0;
    clear_has_output_mode();
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::output_mode() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.output_mode)
    return static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode>(output_mode_);
}
void SystemProfileProto_ExternalAudioVideoDevice_AudioDescription::set_output_mode(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode value)
{
    assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription_OutputMode_IsValid(value));
    set_has_output_mode();
    output_mode_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription.output_mode)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAudioVideoDevice_CECCommand

// optional int32 opcode = 1;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_opcode() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_opcode()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_opcode()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_opcode()
{
    opcode_ = 0;
    clear_has_opcode();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::opcode() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.opcode)
    return opcode_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_opcode(::google::protobuf::int32 value)
{
    set_has_opcode();
    opcode_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.opcode)
}

// optional int32 num_received_direct = 2;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_received_direct() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_num_received_direct()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_num_received_direct()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_received_direct()
{
    num_received_direct_ = 0;
    clear_has_num_received_direct();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_received_direct() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_direct)
    return num_received_direct_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_received_direct(::google::protobuf::int32 value)
{
    set_has_num_received_direct();
    num_received_direct_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_direct)
}

// optional int32 num_received_broadcast = 3;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_received_broadcast() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_num_received_broadcast()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_num_received_broadcast()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_received_broadcast()
{
    num_received_broadcast_ = 0;
    clear_has_num_received_broadcast();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_received_broadcast() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_broadcast)
    return num_received_broadcast_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_received_broadcast(::google::protobuf::int32 value)
{
    set_has_num_received_broadcast();
    num_received_broadcast_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_received_broadcast)
}

// optional int32 num_sent_direct = 4;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_sent_direct() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_num_sent_direct()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_num_sent_direct()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_sent_direct()
{
    num_sent_direct_ = 0;
    clear_has_num_sent_direct();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_sent_direct() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_direct)
    return num_sent_direct_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_sent_direct(::google::protobuf::int32 value)
{
    set_has_num_sent_direct();
    num_sent_direct_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_direct)
}

// optional int32 num_sent_broadcast = 5;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_sent_broadcast() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_num_sent_broadcast()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_num_sent_broadcast()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_sent_broadcast()
{
    num_sent_broadcast_ = 0;
    clear_has_num_sent_broadcast();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_sent_broadcast() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_broadcast)
    return num_sent_broadcast_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_sent_broadcast(::google::protobuf::int32 value)
{
    set_has_num_sent_broadcast();
    num_sent_broadcast_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_sent_broadcast)
}

// optional int32 num_aborted_unknown_reason = 6;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_aborted_unknown_reason() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_num_aborted_unknown_reason()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_num_aborted_unknown_reason()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_aborted_unknown_reason()
{
    num_aborted_unknown_reason_ = 0;
    clear_has_num_aborted_unknown_reason();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_aborted_unknown_reason() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unknown_reason)
    return num_aborted_unknown_reason_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_aborted_unknown_reason(::google::protobuf::int32 value)
{
    set_has_num_aborted_unknown_reason();
    num_aborted_unknown_reason_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unknown_reason)
}

// optional int32 num_aborted_unrecognized = 7;
bool SystemProfileProto_ExternalAudioVideoDevice_CECCommand::has_num_aborted_unrecognized() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_has_num_aborted_unrecognized()
{
    _has_bits_[0] |= 0x00000040u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_has_num_aborted_unrecognized()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::clear_num_aborted_unrecognized()
{
    num_aborted_unrecognized_ = 0;
    clear_has_num_aborted_unrecognized();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice_CECCommand::num_aborted_unrecognized() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unrecognized)
    return num_aborted_unrecognized_;
}
void SystemProfileProto_ExternalAudioVideoDevice_CECCommand::set_num_aborted_unrecognized(::google::protobuf::int32 value)
{
    set_has_num_aborted_unrecognized();
    num_aborted_unrecognized_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand.num_aborted_unrecognized)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAudioVideoDevice

// optional string manufacturer_name = 1;
bool SystemProfileProto_ExternalAudioVideoDevice::has_manufacturer_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_manufacturer_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_manufacturer_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_manufacturer_name()
{
    manufacturer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_manufacturer_name();
}
const ::std::string& SystemProfileProto_ExternalAudioVideoDevice::manufacturer_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
    return manufacturer_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(const ::std::string& value)
{
    set_has_manufacturer_name();
    manufacturer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(const char* value)
{
    set_has_manufacturer_name();
    manufacturer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
void SystemProfileProto_ExternalAudioVideoDevice::set_manufacturer_name(const char* value, size_t size)
{
    set_has_manufacturer_name();
    manufacturer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}
::std::string* SystemProfileProto_ExternalAudioVideoDevice::mutable_manufacturer_name()
{
    set_has_manufacturer_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
    return manufacturer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAudioVideoDevice::release_manufacturer_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
    clear_has_manufacturer_name();
    return manufacturer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAudioVideoDevice::set_allocated_manufacturer_name(::std::string* manufacturer_name)
{
    if (manufacturer_name != NULL) {
        set_has_manufacturer_name();
    } else {
        clear_has_manufacturer_name();
    }
    manufacturer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacturer_name)
}

// optional string model_name = 2;
bool SystemProfileProto_ExternalAudioVideoDevice::has_model_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_model_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_model_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_model_name()
{
    model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_model_name();
}
const ::std::string& SystemProfileProto_ExternalAudioVideoDevice::model_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
    return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(const ::std::string& value)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(const char* value)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
void SystemProfileProto_ExternalAudioVideoDevice::set_model_name(const char* value, size_t size)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}
::std::string* SystemProfileProto_ExternalAudioVideoDevice::mutable_model_name()
{
    set_has_model_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
    return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAudioVideoDevice::release_model_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
    clear_has_model_name();
    return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAudioVideoDevice::set_allocated_model_name(::std::string* model_name)
{
    if (model_name != NULL) {
        set_has_model_name();
    } else {
        clear_has_model_name();
    }
    model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAudioVideoDevice.model_name)
}

// optional string product_code = 3;
bool SystemProfileProto_ExternalAudioVideoDevice::has_product_code() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_product_code()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_product_code()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_product_code()
{
    product_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_product_code();
}
const ::std::string& SystemProfileProto_ExternalAudioVideoDevice::product_code() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
    return product_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(const ::std::string& value)
{
    set_has_product_code();
    product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(const char* value)
{
    set_has_product_code();
    product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
void SystemProfileProto_ExternalAudioVideoDevice::set_product_code(const char* value, size_t size)
{
    set_has_product_code();
    product_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}
::std::string* SystemProfileProto_ExternalAudioVideoDevice::mutable_product_code()
{
    set_has_product_code();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
    return product_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAudioVideoDevice::release_product_code()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
    clear_has_product_code();
    return product_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAudioVideoDevice::set_allocated_product_code(::std::string* product_code)
{
    if (product_code != NULL) {
        set_has_product_code();
    } else {
        clear_has_product_code();
    }
    product_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_code);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAudioVideoDevice.product_code)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AVDeviceType av_device_type = 4;
int SystemProfileProto_ExternalAudioVideoDevice::av_device_type_size() const
{
    return av_device_type_.size();
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_av_device_type()
{
    av_device_type_.Clear();
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType SystemProfileProto_ExternalAudioVideoDevice::av_device_type(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
    return static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType>(av_device_type_.Get(index));
}
void SystemProfileProto_ExternalAudioVideoDevice::set_av_device_type(int index, ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value)
{
    assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value));
    av_device_type_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
}
void SystemProfileProto_ExternalAudioVideoDevice::add_av_device_type(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType value)
{
    assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_AVDeviceType_IsValid(value));
    av_device_type_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
}
const ::google::protobuf::RepeatedField<int>&
SystemProfileProto_ExternalAudioVideoDevice::av_device_type() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
    return av_device_type_;
}
::google::protobuf::RepeatedField<int>*
SystemProfileProto_ExternalAudioVideoDevice::mutable_av_device_type()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.av_device_type)
    return &av_device_type_;
}

// optional int32 manufacture_year = 5;
bool SystemProfileProto_ExternalAudioVideoDevice::has_manufacture_year() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_manufacture_year()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_manufacture_year()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_manufacture_year()
{
    manufacture_year_ = 0;
    clear_has_manufacture_year();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::manufacture_year() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_year)
    return manufacture_year_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_manufacture_year(::google::protobuf::int32 value)
{
    set_has_manufacture_year();
    manufacture_year_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_year)
}

// optional int32 manufacture_week = 6;
bool SystemProfileProto_ExternalAudioVideoDevice::has_manufacture_week() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_manufacture_week()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_manufacture_week()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_manufacture_week()
{
    manufacture_week_ = 0;
    clear_has_manufacture_week();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::manufacture_week() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_week)
    return manufacture_week_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_manufacture_week(::google::protobuf::int32 value)
{
    set_has_manufacture_week();
    manufacture_week_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.manufacture_week)
}

// optional int32 horizontal_resolution = 7;
bool SystemProfileProto_ExternalAudioVideoDevice::has_horizontal_resolution() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_horizontal_resolution()
{
    _has_bits_[0] |= 0x00000040u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_horizontal_resolution()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_horizontal_resolution()
{
    horizontal_resolution_ = 0;
    clear_has_horizontal_resolution();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::horizontal_resolution() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.horizontal_resolution)
    return horizontal_resolution_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_horizontal_resolution(::google::protobuf::int32 value)
{
    set_has_horizontal_resolution();
    horizontal_resolution_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.horizontal_resolution)
}

// optional int32 vertical_resolution = 8;
bool SystemProfileProto_ExternalAudioVideoDevice::has_vertical_resolution() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_vertical_resolution()
{
    _has_bits_[0] |= 0x00000080u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_vertical_resolution()
{
    _has_bits_[0] &= ~0x00000080u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_vertical_resolution()
{
    vertical_resolution_ = 0;
    clear_has_vertical_resolution();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::vertical_resolution() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.vertical_resolution)
    return vertical_resolution_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_vertical_resolution(::google::protobuf::int32 value)
{
    set_has_vertical_resolution();
    vertical_resolution_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.vertical_resolution)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.AudioDescription audio_description = 9;
int SystemProfileProto_ExternalAudioVideoDevice::audio_description_size() const
{
    return audio_description_.size();
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_audio_description()
{
    audio_description_.Clear();
}
const ::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription& SystemProfileProto_ExternalAudioVideoDevice::audio_description(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
    return audio_description_.Get(index);
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* SystemProfileProto_ExternalAudioVideoDevice::mutable_audio_description(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
    return audio_description_.Mutable(index);
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription* SystemProfileProto_ExternalAudioVideoDevice::add_audio_description()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
    return audio_description_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription>*
SystemProfileProto_ExternalAudioVideoDevice::mutable_audio_description()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
    return &audio_description_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_ExternalAudioVideoDevice_AudioDescription>&
SystemProfileProto_ExternalAudioVideoDevice::audio_description() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.audio_description)
    return audio_description_;
}

// optional int32 position_in_setup = 10;
bool SystemProfileProto_ExternalAudioVideoDevice::has_position_in_setup() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_position_in_setup()
{
    _has_bits_[0] |= 0x00000200u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_position_in_setup()
{
    _has_bits_[0] &= ~0x00000200u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_position_in_setup()
{
    position_in_setup_ = 0;
    clear_has_position_in_setup();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::position_in_setup() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.position_in_setup)
    return position_in_setup_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_position_in_setup(::google::protobuf::int32 value)
{
    set_has_position_in_setup();
    position_in_setup_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.position_in_setup)
}

// optional bool is_in_path_to_tv = 11;
bool SystemProfileProto_ExternalAudioVideoDevice::has_is_in_path_to_tv() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_is_in_path_to_tv()
{
    _has_bits_[0] |= 0x00000400u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_is_in_path_to_tv()
{
    _has_bits_[0] &= ~0x00000400u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_is_in_path_to_tv()
{
    is_in_path_to_tv_ = false;
    clear_has_is_in_path_to_tv();
}
bool SystemProfileProto_ExternalAudioVideoDevice::is_in_path_to_tv() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.is_in_path_to_tv)
    return is_in_path_to_tv_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_is_in_path_to_tv(bool value)
{
    set_has_is_in_path_to_tv();
    is_in_path_to_tv_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.is_in_path_to_tv)
}

// optional int32 cec_version = 12;
bool SystemProfileProto_ExternalAudioVideoDevice::has_cec_version() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_cec_version()
{
    _has_bits_[0] |= 0x00000800u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_cec_version()
{
    _has_bits_[0] &= ~0x00000800u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_cec_version()
{
    cec_version_ = 0;
    clear_has_cec_version();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::cec_version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_version)
    return cec_version_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_cec_version(::google::protobuf::int32 value)
{
    set_has_cec_version();
    cec_version_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_version)
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice.CECCommand cec_command = 13;
int SystemProfileProto_ExternalAudioVideoDevice::cec_command_size() const
{
    return cec_command_.size();
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_cec_command()
{
    cec_command_.Clear();
}
const ::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand& SystemProfileProto_ExternalAudioVideoDevice::cec_command(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
    return cec_command_.Get(index);
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* SystemProfileProto_ExternalAudioVideoDevice::mutable_cec_command(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
    return cec_command_.Mutable(index);
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand* SystemProfileProto_ExternalAudioVideoDevice::add_cec_command()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
    return cec_command_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand>*
SystemProfileProto_ExternalAudioVideoDevice::mutable_cec_command()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
    return &cec_command_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_ExternalAudioVideoDevice_CECCommand>&
SystemProfileProto_ExternalAudioVideoDevice::cec_command() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.ExternalAudioVideoDevice.cec_command)
    return cec_command_;
}

// optional int32 frame_rate = 14;
bool SystemProfileProto_ExternalAudioVideoDevice::has_frame_rate() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_frame_rate()
{
    _has_bits_[0] |= 0x00002000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_frame_rate()
{
    _has_bits_[0] &= ~0x00002000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_frame_rate()
{
    frame_rate_ = 0;
    clear_has_frame_rate();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::frame_rate() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.frame_rate)
    return frame_rate_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_frame_rate(::google::protobuf::int32 value)
{
    set_has_frame_rate();
    frame_rate_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.frame_rate)
}

// optional .metrics.SystemProfileProto.ExternalAudioVideoDevice.ColorEncoding color_encoding = 15;
bool SystemProfileProto_ExternalAudioVideoDevice::has_color_encoding() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_color_encoding()
{
    _has_bits_[0] |= 0x00004000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_color_encoding()
{
    _has_bits_[0] &= ~0x00004000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_color_encoding()
{
    color_encoding_ = 0;
    clear_has_color_encoding();
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding SystemProfileProto_ExternalAudioVideoDevice::color_encoding() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.color_encoding)
    return static_cast<::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding>(color_encoding_);
}
void SystemProfileProto_ExternalAudioVideoDevice::set_color_encoding(::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding value)
{
    assert(::metrics::SystemProfileProto_ExternalAudioVideoDevice_ColorEncoding_IsValid(value));
    set_has_color_encoding();
    color_encoding_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.color_encoding)
}

// optional int32 bit_depth = 16;
bool SystemProfileProto_ExternalAudioVideoDevice::has_bit_depth() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_bit_depth()
{
    _has_bits_[0] |= 0x00008000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_bit_depth()
{
    _has_bits_[0] &= ~0x00008000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_bit_depth()
{
    bit_depth_ = 0;
    clear_has_bit_depth();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::bit_depth() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.bit_depth)
    return bit_depth_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_bit_depth(::google::protobuf::int32 value)
{
    set_has_bit_depth();
    bit_depth_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.bit_depth)
}

// optional int32 tmds = 17;
bool SystemProfileProto_ExternalAudioVideoDevice::has_tmds() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_tmds()
{
    _has_bits_[0] |= 0x00010000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_tmds()
{
    _has_bits_[0] &= ~0x00010000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_tmds()
{
    tmds_ = 0;
    clear_has_tmds();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::tmds() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.tmds)
    return tmds_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_tmds(::google::protobuf::int32 value)
{
    set_has_tmds();
    tmds_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.tmds)
}

// optional bool hdr10_support = 18;
bool SystemProfileProto_ExternalAudioVideoDevice::has_hdr10_support() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_hdr10_support()
{
    _has_bits_[0] |= 0x00020000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_hdr10_support()
{
    _has_bits_[0] &= ~0x00020000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_hdr10_support()
{
    hdr10_support_ = false;
    clear_has_hdr10_support();
}
bool SystemProfileProto_ExternalAudioVideoDevice::hdr10_support() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.hdr10_support)
    return hdr10_support_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_hdr10_support(bool value)
{
    set_has_hdr10_support();
    hdr10_support_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.hdr10_support)
}

// optional bool dolby_vision_support = 19;
bool SystemProfileProto_ExternalAudioVideoDevice::has_dolby_vision_support() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_dolby_vision_support()
{
    _has_bits_[0] |= 0x00040000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_dolby_vision_support()
{
    _has_bits_[0] &= ~0x00040000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_dolby_vision_support()
{
    dolby_vision_support_ = false;
    clear_has_dolby_vision_support();
}
bool SystemProfileProto_ExternalAudioVideoDevice::dolby_vision_support() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.dolby_vision_support)
    return dolby_vision_support_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_dolby_vision_support(bool value)
{
    set_has_dolby_vision_support();
    dolby_vision_support_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.dolby_vision_support)
}

// optional int32 eotf_support = 20;
bool SystemProfileProto_ExternalAudioVideoDevice::has_eotf_support() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_eotf_support()
{
    _has_bits_[0] |= 0x00080000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_eotf_support()
{
    _has_bits_[0] &= ~0x00080000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_eotf_support()
{
    eotf_support_ = 0;
    clear_has_eotf_support();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::eotf_support() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.eotf_support)
    return eotf_support_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_eotf_support(::google::protobuf::int32 value)
{
    set_has_eotf_support();
    eotf_support_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.eotf_support)
}

// optional bool yuv_support = 21;
bool SystemProfileProto_ExternalAudioVideoDevice::has_yuv_support() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_yuv_support()
{
    _has_bits_[0] |= 0x00100000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_yuv_support()
{
    _has_bits_[0] &= ~0x00100000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_yuv_support()
{
    yuv_support_ = false;
    clear_has_yuv_support();
}
bool SystemProfileProto_ExternalAudioVideoDevice::yuv_support() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_support)
    return yuv_support_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_yuv_support(bool value)
{
    set_has_yuv_support();
    yuv_support_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_support)
}

// optional bool yuv_420_support = 22;
bool SystemProfileProto_ExternalAudioVideoDevice::has_yuv_420_support() const
{
    return (_has_bits_[0] & 0x00200000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_yuv_420_support()
{
    _has_bits_[0] |= 0x00200000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_yuv_420_support()
{
    _has_bits_[0] &= ~0x00200000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_yuv_420_support()
{
    yuv_420_support_ = false;
    clear_has_yuv_420_support();
}
bool SystemProfileProto_ExternalAudioVideoDevice::yuv_420_support() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_420_support)
    return yuv_420_support_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_yuv_420_support(bool value)
{
    set_has_yuv_420_support();
    yuv_420_support_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.yuv_420_support)
}

// optional int32 maximum_supported_hdcp_version = 23;
bool SystemProfileProto_ExternalAudioVideoDevice::has_maximum_supported_hdcp_version() const
{
    return (_has_bits_[0] & 0x00400000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_maximum_supported_hdcp_version()
{
    _has_bits_[0] |= 0x00400000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_maximum_supported_hdcp_version()
{
    _has_bits_[0] &= ~0x00400000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_maximum_supported_hdcp_version()
{
    maximum_supported_hdcp_version_ = 0;
    clear_has_maximum_supported_hdcp_version();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::maximum_supported_hdcp_version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.maximum_supported_hdcp_version)
    return maximum_supported_hdcp_version_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_maximum_supported_hdcp_version(::google::protobuf::int32 value)
{
    set_has_maximum_supported_hdcp_version();
    maximum_supported_hdcp_version_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.maximum_supported_hdcp_version)
}

// optional int32 current_hdcp_version = 24;
bool SystemProfileProto_ExternalAudioVideoDevice::has_current_hdcp_version() const
{
    return (_has_bits_[0] & 0x00800000u) != 0;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_has_current_hdcp_version()
{
    _has_bits_[0] |= 0x00800000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_has_current_hdcp_version()
{
    _has_bits_[0] &= ~0x00800000u;
}
void SystemProfileProto_ExternalAudioVideoDevice::clear_current_hdcp_version()
{
    current_hdcp_version_ = 0;
    clear_has_current_hdcp_version();
}
::google::protobuf::int32 SystemProfileProto_ExternalAudioVideoDevice::current_hdcp_version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAudioVideoDevice.current_hdcp_version)
    return current_hdcp_version_;
}
void SystemProfileProto_ExternalAudioVideoDevice::set_current_hdcp_version(::google::protobuf::int32 value)
{
    set_has_current_hdcp_version();
    current_hdcp_version_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAudioVideoDevice.current_hdcp_version)
}

// -------------------------------------------------------------------

// SystemProfileProto_ExternalAccessPoint

// optional string manufacturer = 1;
bool SystemProfileProto_ExternalAccessPoint::has_manufacturer() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_ExternalAccessPoint::set_has_manufacturer()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_ExternalAccessPoint::clear_has_manufacturer()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_ExternalAccessPoint::clear_manufacturer()
{
    manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_manufacturer();
}
const ::std::string& SystemProfileProto_ExternalAccessPoint::manufacturer() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
    return manufacturer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_manufacturer(const ::std::string& value)
{
    set_has_manufacturer();
    manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
void SystemProfileProto_ExternalAccessPoint::set_manufacturer(const char* value)
{
    set_has_manufacturer();
    manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
void SystemProfileProto_ExternalAccessPoint::set_manufacturer(const char* value, size_t size)
{
    set_has_manufacturer();
    manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}
::std::string* SystemProfileProto_ExternalAccessPoint::mutable_manufacturer()
{
    set_has_manufacturer();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
    return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAccessPoint::release_manufacturer()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
    clear_has_manufacturer();
    return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_allocated_manufacturer(::std::string* manufacturer)
{
    if (manufacturer != NULL) {
        set_has_manufacturer();
    } else {
        clear_has_manufacturer();
    }
    manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.manufacturer)
}

// optional string model_name = 2;
bool SystemProfileProto_ExternalAccessPoint::has_model_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_ExternalAccessPoint::set_has_model_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_ExternalAccessPoint::clear_has_model_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_ExternalAccessPoint::clear_model_name()
{
    model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_model_name();
}
const ::std::string& SystemProfileProto_ExternalAccessPoint::model_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
    return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_model_name(const ::std::string& value)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
void SystemProfileProto_ExternalAccessPoint::set_model_name(const char* value)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
void SystemProfileProto_ExternalAccessPoint::set_model_name(const char* value, size_t size)
{
    set_has_model_name();
    model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}
::std::string* SystemProfileProto_ExternalAccessPoint::mutable_model_name()
{
    set_has_model_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
    return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAccessPoint::release_model_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
    clear_has_model_name();
    return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_allocated_model_name(::std::string* model_name)
{
    if (model_name != NULL) {
        set_has_model_name();
    } else {
        clear_has_model_name();
    }
    model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.model_name)
}

// optional string model_number = 3;
bool SystemProfileProto_ExternalAccessPoint::has_model_number() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_ExternalAccessPoint::set_has_model_number()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_ExternalAccessPoint::clear_has_model_number()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_ExternalAccessPoint::clear_model_number()
{
    model_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_model_number();
}
const ::std::string& SystemProfileProto_ExternalAccessPoint::model_number() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
    return model_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_model_number(const ::std::string& value)
{
    set_has_model_number();
    model_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
void SystemProfileProto_ExternalAccessPoint::set_model_number(const char* value)
{
    set_has_model_number();
    model_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
void SystemProfileProto_ExternalAccessPoint::set_model_number(const char* value, size_t size)
{
    set_has_model_number();
    model_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}
::std::string* SystemProfileProto_ExternalAccessPoint::mutable_model_number()
{
    set_has_model_number();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
    return model_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAccessPoint::release_model_number()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
    clear_has_model_number();
    return model_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_allocated_model_number(::std::string* model_number)
{
    if (model_number != NULL) {
        set_has_model_number();
    } else {
        clear_has_model_number();
    }
    model_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_number);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.model_number)
}

// optional string device_name = 4;
bool SystemProfileProto_ExternalAccessPoint::has_device_name() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_ExternalAccessPoint::set_has_device_name()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_ExternalAccessPoint::clear_has_device_name()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_ExternalAccessPoint::clear_device_name()
{
    device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_name();
}
const ::std::string& SystemProfileProto_ExternalAccessPoint::device_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
    return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_device_name(const ::std::string& value)
{
    set_has_device_name();
    device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
void SystemProfileProto_ExternalAccessPoint::set_device_name(const char* value)
{
    set_has_device_name();
    device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
void SystemProfileProto_ExternalAccessPoint::set_device_name(const char* value, size_t size)
{
    set_has_device_name();
    device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}
::std::string* SystemProfileProto_ExternalAccessPoint::mutable_device_name()
{
    set_has_device_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
    return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_ExternalAccessPoint::release_device_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
    clear_has_device_name();
    return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_ExternalAccessPoint::set_allocated_device_name(::std::string* device_name)
{
    if (device_name != NULL) {
        set_has_device_name();
    } else {
        clear_has_device_name();
    }
    device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.ExternalAccessPoint.device_name)
}

// -------------------------------------------------------------------

// SystemProfileProto_AntiVirusProduct

// optional string product_name = 1;
bool SystemProfileProto_AntiVirusProduct::has_product_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto_AntiVirusProduct::set_has_product_name()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto_AntiVirusProduct::clear_has_product_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto_AntiVirusProduct::clear_product_name()
{
    product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_product_name();
}
const ::std::string& SystemProfileProto_AntiVirusProduct::product_name() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_name)
    return product_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_AntiVirusProduct::set_product_name(const ::std::string& value)
{
    set_has_product_name();
    product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
void SystemProfileProto_AntiVirusProduct::set_product_name(const char* value)
{
    set_has_product_name();
    product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
void SystemProfileProto_AntiVirusProduct::set_product_name(const char* value, size_t size)
{
    set_has_product_name();
    product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}
::std::string* SystemProfileProto_AntiVirusProduct::mutable_product_name()
{
    set_has_product_name();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.AntiVirusProduct.product_name)
    return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_AntiVirusProduct::release_product_name()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.AntiVirusProduct.product_name)
    clear_has_product_name();
    return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_AntiVirusProduct::set_allocated_product_name(::std::string* product_name)
{
    if (product_name != NULL) {
        set_has_product_name();
    } else {
        clear_has_product_name();
    }
    product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.AntiVirusProduct.product_name)
}

// optional fixed32 product_name_hash = 2;
bool SystemProfileProto_AntiVirusProduct::has_product_name_hash() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto_AntiVirusProduct::set_has_product_name_hash()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto_AntiVirusProduct::clear_has_product_name_hash()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto_AntiVirusProduct::clear_product_name_hash()
{
    product_name_hash_ = 0u;
    clear_has_product_name_hash();
}
::google::protobuf::uint32 SystemProfileProto_AntiVirusProduct::product_name_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_name_hash)
    return product_name_hash_;
}
void SystemProfileProto_AntiVirusProduct::set_product_name_hash(::google::protobuf::uint32 value)
{
    set_has_product_name_hash();
    product_name_hash_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_name_hash)
}

// optional string product_version = 3;
bool SystemProfileProto_AntiVirusProduct::has_product_version() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto_AntiVirusProduct::set_has_product_version()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto_AntiVirusProduct::clear_has_product_version()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto_AntiVirusProduct::clear_product_version()
{
    product_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_product_version();
}
const ::std::string& SystemProfileProto_AntiVirusProduct::product_version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_version)
    return product_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_AntiVirusProduct::set_product_version(const ::std::string& value)
{
    set_has_product_version();
    product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
void SystemProfileProto_AntiVirusProduct::set_product_version(const char* value)
{
    set_has_product_version();
    product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
void SystemProfileProto_AntiVirusProduct::set_product_version(const char* value, size_t size)
{
    set_has_product_version();
    product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}
::std::string* SystemProfileProto_AntiVirusProduct::mutable_product_version()
{
    set_has_product_version();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.AntiVirusProduct.product_version)
    return product_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto_AntiVirusProduct::release_product_version()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.AntiVirusProduct.product_version)
    clear_has_product_version();
    return product_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto_AntiVirusProduct::set_allocated_product_version(::std::string* product_version)
{
    if (product_version != NULL) {
        set_has_product_version();
    } else {
        clear_has_product_version();
    }
    product_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_version);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.AntiVirusProduct.product_version)
}

// optional fixed32 product_version_hash = 4;
bool SystemProfileProto_AntiVirusProduct::has_product_version_hash() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto_AntiVirusProduct::set_has_product_version_hash()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto_AntiVirusProduct::clear_has_product_version_hash()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto_AntiVirusProduct::clear_product_version_hash()
{
    product_version_hash_ = 0u;
    clear_has_product_version_hash();
}
::google::protobuf::uint32 SystemProfileProto_AntiVirusProduct::product_version_hash() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_version_hash)
    return product_version_hash_;
}
void SystemProfileProto_AntiVirusProduct::set_product_version_hash(::google::protobuf::uint32 value)
{
    set_has_product_version_hash();
    product_version_hash_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_version_hash)
}

// optional .metrics.SystemProfileProto.AntiVirusState product_state = 5;
bool SystemProfileProto_AntiVirusProduct::has_product_state() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto_AntiVirusProduct::set_has_product_state()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto_AntiVirusProduct::clear_has_product_state()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto_AntiVirusProduct::clear_product_state()
{
    product_state_ = 0;
    clear_has_product_state();
}
::metrics::SystemProfileProto_AntiVirusState SystemProfileProto_AntiVirusProduct::product_state() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.AntiVirusProduct.product_state)
    return static_cast<::metrics::SystemProfileProto_AntiVirusState>(product_state_);
}
void SystemProfileProto_AntiVirusProduct::set_product_state(::metrics::SystemProfileProto_AntiVirusState value)
{
    assert(::metrics::SystemProfileProto_AntiVirusState_IsValid(value));
    set_has_product_state();
    product_state_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.AntiVirusProduct.product_state)
}

// -------------------------------------------------------------------

// SystemProfileProto

// optional int64 build_timestamp = 1;
bool SystemProfileProto::has_build_timestamp() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemProfileProto::set_has_build_timestamp()
{
    _has_bits_[0] |= 0x00000001u;
}
void SystemProfileProto::clear_has_build_timestamp()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SystemProfileProto::clear_build_timestamp()
{
    build_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_build_timestamp();
}
::google::protobuf::int64 SystemProfileProto::build_timestamp() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.build_timestamp)
    return build_timestamp_;
}
void SystemProfileProto::set_build_timestamp(::google::protobuf::int64 value)
{
    set_has_build_timestamp();
    build_timestamp_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.build_timestamp)
}

// optional string app_version = 2;
bool SystemProfileProto::has_app_version() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SystemProfileProto::set_has_app_version()
{
    _has_bits_[0] |= 0x00000002u;
}
void SystemProfileProto::clear_has_app_version()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SystemProfileProto::clear_app_version()
{
    app_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_app_version();
}
const ::std::string& SystemProfileProto::app_version() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.app_version)
    return app_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto::set_app_version(const ::std::string& value)
{
    set_has_app_version();
    app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.app_version)
}
void SystemProfileProto::set_app_version(const char* value)
{
    set_has_app_version();
    app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.app_version)
}
void SystemProfileProto::set_app_version(const char* value, size_t size)
{
    set_has_app_version();
    app_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.app_version)
}
::std::string* SystemProfileProto::mutable_app_version()
{
    set_has_app_version();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.app_version)
    return app_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto::release_app_version()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.app_version)
    clear_has_app_version();
    return app_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto::set_allocated_app_version(::std::string* app_version)
{
    if (app_version != NULL) {
        set_has_app_version();
    } else {
        clear_has_app_version();
    }
    app_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_version);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.app_version)
}

// optional string brand_code = 12;
bool SystemProfileProto::has_brand_code() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SystemProfileProto::set_has_brand_code()
{
    _has_bits_[0] |= 0x00000004u;
}
void SystemProfileProto::clear_has_brand_code()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SystemProfileProto::clear_brand_code()
{
    brand_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_brand_code();
}
const ::std::string& SystemProfileProto::brand_code() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.brand_code)
    return brand_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto::set_brand_code(const ::std::string& value)
{
    set_has_brand_code();
    brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.brand_code)
}
void SystemProfileProto::set_brand_code(const char* value)
{
    set_has_brand_code();
    brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.brand_code)
}
void SystemProfileProto::set_brand_code(const char* value, size_t size)
{
    set_has_brand_code();
    brand_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.brand_code)
}
::std::string* SystemProfileProto::mutable_brand_code()
{
    set_has_brand_code();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.brand_code)
    return brand_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto::release_brand_code()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.brand_code)
    clear_has_brand_code();
    return brand_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto::set_allocated_brand_code(::std::string* brand_code)
{
    if (brand_code != NULL) {
        set_has_brand_code();
    } else {
        clear_has_brand_code();
    }
    brand_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand_code);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.brand_code)
}

// optional .metrics.SystemProfileProto.Channel channel = 10;
bool SystemProfileProto::has_channel() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SystemProfileProto::set_has_channel()
{
    _has_bits_[0] |= 0x00000008u;
}
void SystemProfileProto::clear_has_channel()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SystemProfileProto::clear_channel()
{
    channel_ = 0;
    clear_has_channel();
}
::metrics::SystemProfileProto_Channel SystemProfileProto::channel() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.channel)
    return static_cast<::metrics::SystemProfileProto_Channel>(channel_);
}
void SystemProfileProto::set_channel(::metrics::SystemProfileProto_Channel value)
{
    assert(::metrics::SystemProfileProto_Channel_IsValid(value));
    set_has_channel();
    channel_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.channel)
}

// optional bool is_asan_build = 20 [default = false];
bool SystemProfileProto::has_is_asan_build() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void SystemProfileProto::set_has_is_asan_build()
{
    _has_bits_[0] |= 0x00000010u;
}
void SystemProfileProto::clear_has_is_asan_build()
{
    _has_bits_[0] &= ~0x00000010u;
}
void SystemProfileProto::clear_is_asan_build()
{
    is_asan_build_ = false;
    clear_has_is_asan_build();
}
bool SystemProfileProto::is_asan_build() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.is_asan_build)
    return is_asan_build_;
}
void SystemProfileProto::set_is_asan_build(bool value)
{
    set_has_is_asan_build();
    is_asan_build_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.is_asan_build)
}

// optional int64 uma_enabled_date = 3;
bool SystemProfileProto::has_uma_enabled_date() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void SystemProfileProto::set_has_uma_enabled_date()
{
    _has_bits_[0] |= 0x00000020u;
}
void SystemProfileProto::clear_has_uma_enabled_date()
{
    _has_bits_[0] &= ~0x00000020u;
}
void SystemProfileProto::clear_uma_enabled_date()
{
    uma_enabled_date_ = GOOGLE_LONGLONG(0);
    clear_has_uma_enabled_date();
}
::google::protobuf::int64 SystemProfileProto::uma_enabled_date() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.uma_enabled_date)
    return uma_enabled_date_;
}
void SystemProfileProto::set_uma_enabled_date(::google::protobuf::int64 value)
{
    set_has_uma_enabled_date();
    uma_enabled_date_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.uma_enabled_date)
}

// optional int64 install_date = 16;
bool SystemProfileProto::has_install_date() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SystemProfileProto::set_has_install_date()
{
    _has_bits_[0] |= 0x00000040u;
}
void SystemProfileProto::clear_has_install_date()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SystemProfileProto::clear_install_date()
{
    install_date_ = GOOGLE_LONGLONG(0);
    clear_has_install_date();
}
::google::protobuf::int64 SystemProfileProto::install_date() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.install_date)
    return install_date_;
}
void SystemProfileProto::set_install_date(::google::protobuf::int64 value)
{
    set_has_install_date();
    install_date_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.install_date)
}

// optional string application_locale = 4;
bool SystemProfileProto::has_application_locale() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void SystemProfileProto::set_has_application_locale()
{
    _has_bits_[0] |= 0x00000080u;
}
void SystemProfileProto::clear_has_application_locale()
{
    _has_bits_[0] &= ~0x00000080u;
}
void SystemProfileProto::clear_application_locale()
{
    application_locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_application_locale();
}
const ::std::string& SystemProfileProto::application_locale() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.application_locale)
    return application_locale_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto::set_application_locale(const ::std::string& value)
{
    set_has_application_locale();
    application_locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.application_locale)
}
void SystemProfileProto::set_application_locale(const char* value)
{
    set_has_application_locale();
    application_locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:metrics.SystemProfileProto.application_locale)
}
void SystemProfileProto::set_application_locale(const char* value, size_t size)
{
    set_has_application_locale();
    application_locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:metrics.SystemProfileProto.application_locale)
}
::std::string* SystemProfileProto::mutable_application_locale()
{
    set_has_application_locale();
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.application_locale)
    return application_locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemProfileProto::release_application_locale()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.application_locale)
    clear_has_application_locale();
    return application_locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemProfileProto::set_allocated_application_locale(::std::string* application_locale)
{
    if (application_locale != NULL) {
        set_has_application_locale();
    } else {
        clear_has_application_locale();
    }
    application_locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_locale);
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.application_locale)
}

// optional .metrics.SystemProfileProto.OS os = 5;
bool SystemProfileProto::has_os() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void SystemProfileProto::set_has_os()
{
    _has_bits_[0] |= 0x00000100u;
}
void SystemProfileProto::clear_has_os()
{
    _has_bits_[0] &= ~0x00000100u;
}
void SystemProfileProto::clear_os()
{
    if (os_ != NULL)
        os_->::metrics::SystemProfileProto_OS::Clear();
    clear_has_os();
}
const ::metrics::SystemProfileProto_OS& SystemProfileProto::os() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.os)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return os_ != NULL ? *os_ : *default_instance().os_;
#else
    return os_ != NULL ? *os_ : *default_instance_->os_;
#endif
}
::metrics::SystemProfileProto_OS* SystemProfileProto::mutable_os()
{
    set_has_os();
    if (os_ == NULL) {
        os_ = new ::metrics::SystemProfileProto_OS;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.os)
    return os_;
}
::metrics::SystemProfileProto_OS* SystemProfileProto::release_os()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.os)
    clear_has_os();
    ::metrics::SystemProfileProto_OS* temp = os_;
    os_ = NULL;
    return temp;
}
void SystemProfileProto::set_allocated_os(::metrics::SystemProfileProto_OS* os)
{
    delete os_;
    os_ = os;
    if (os) {
        set_has_os();
    } else {
        clear_has_os();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.os)
}

// optional .metrics.SystemProfileProto.Hardware hardware = 6;
bool SystemProfileProto::has_hardware() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void SystemProfileProto::set_has_hardware()
{
    _has_bits_[0] |= 0x00000200u;
}
void SystemProfileProto::clear_has_hardware()
{
    _has_bits_[0] &= ~0x00000200u;
}
void SystemProfileProto::clear_hardware()
{
    if (hardware_ != NULL)
        hardware_->::metrics::SystemProfileProto_Hardware::Clear();
    clear_has_hardware();
}
const ::metrics::SystemProfileProto_Hardware& SystemProfileProto::hardware() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.hardware)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return hardware_ != NULL ? *hardware_ : *default_instance().hardware_;
#else
    return hardware_ != NULL ? *hardware_ : *default_instance_->hardware_;
#endif
}
::metrics::SystemProfileProto_Hardware* SystemProfileProto::mutable_hardware()
{
    set_has_hardware();
    if (hardware_ == NULL) {
        hardware_ = new ::metrics::SystemProfileProto_Hardware;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.hardware)
    return hardware_;
}
::metrics::SystemProfileProto_Hardware* SystemProfileProto::release_hardware()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.hardware)
    clear_has_hardware();
    ::metrics::SystemProfileProto_Hardware* temp = hardware_;
    hardware_ = NULL;
    return temp;
}
void SystemProfileProto::set_allocated_hardware(::metrics::SystemProfileProto_Hardware* hardware)
{
    delete hardware_;
    hardware_ = hardware;
    if (hardware) {
        set_has_hardware();
    } else {
        clear_has_hardware();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.hardware)
}

// optional .metrics.SystemProfileProto.Network network = 13;
bool SystemProfileProto::has_network() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void SystemProfileProto::set_has_network()
{
    _has_bits_[0] |= 0x00000400u;
}
void SystemProfileProto::clear_has_network()
{
    _has_bits_[0] &= ~0x00000400u;
}
void SystemProfileProto::clear_network()
{
    if (network_ != NULL)
        network_->::metrics::SystemProfileProto_Network::Clear();
    clear_has_network();
}
const ::metrics::SystemProfileProto_Network& SystemProfileProto::network() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.network)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return network_ != NULL ? *network_ : *default_instance().network_;
#else
    return network_ != NULL ? *network_ : *default_instance_->network_;
#endif
}
::metrics::SystemProfileProto_Network* SystemProfileProto::mutable_network()
{
    set_has_network();
    if (network_ == NULL) {
        network_ = new ::metrics::SystemProfileProto_Network;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.network)
    return network_;
}
::metrics::SystemProfileProto_Network* SystemProfileProto::release_network()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.network)
    clear_has_network();
    ::metrics::SystemProfileProto_Network* temp = network_;
    network_ = NULL;
    return temp;
}
void SystemProfileProto::set_allocated_network(::metrics::SystemProfileProto_Network* network)
{
    delete network_;
    network_ = network;
    if (network) {
        set_has_network();
    } else {
        clear_has_network();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.network)
}

// optional .metrics.SystemProfileProto.GoogleUpdate google_update = 11;
bool SystemProfileProto::has_google_update() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void SystemProfileProto::set_has_google_update()
{
    _has_bits_[0] |= 0x00000800u;
}
void SystemProfileProto::clear_has_google_update()
{
    _has_bits_[0] &= ~0x00000800u;
}
void SystemProfileProto::clear_google_update()
{
    if (google_update_ != NULL)
        google_update_->::metrics::SystemProfileProto_GoogleUpdate::Clear();
    clear_has_google_update();
}
const ::metrics::SystemProfileProto_GoogleUpdate& SystemProfileProto::google_update() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.google_update)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return google_update_ != NULL ? *google_update_ : *default_instance().google_update_;
#else
    return google_update_ != NULL ? *google_update_ : *default_instance_->google_update_;
#endif
}
::metrics::SystemProfileProto_GoogleUpdate* SystemProfileProto::mutable_google_update()
{
    set_has_google_update();
    if (google_update_ == NULL) {
        google_update_ = new ::metrics::SystemProfileProto_GoogleUpdate;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.google_update)
    return google_update_;
}
::metrics::SystemProfileProto_GoogleUpdate* SystemProfileProto::release_google_update()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.google_update)
    clear_has_google_update();
    ::metrics::SystemProfileProto_GoogleUpdate* temp = google_update_;
    google_update_ = NULL;
    return temp;
}
void SystemProfileProto::set_allocated_google_update(::metrics::SystemProfileProto_GoogleUpdate* google_update)
{
    delete google_update_;
    google_update_ = google_update;
    if (google_update) {
        set_has_google_update();
    } else {
        clear_has_google_update();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.google_update)
}

// repeated .metrics.SystemProfileProto.Plugin plugin = 7;
int SystemProfileProto::plugin_size() const
{
    return plugin_.size();
}
void SystemProfileProto::clear_plugin()
{
    plugin_.Clear();
}
const ::metrics::SystemProfileProto_Plugin& SystemProfileProto::plugin(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.plugin)
    return plugin_.Get(index);
}
::metrics::SystemProfileProto_Plugin* SystemProfileProto::mutable_plugin(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.plugin)
    return plugin_.Mutable(index);
}
::metrics::SystemProfileProto_Plugin* SystemProfileProto::add_plugin()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.plugin)
    return plugin_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Plugin>*
SystemProfileProto::mutable_plugin()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.plugin)
    return &plugin_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_Plugin>&
SystemProfileProto::plugin() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.plugin)
    return plugin_;
}

// optional .metrics.SystemProfileProto.Stability stability = 8;
bool SystemProfileProto::has_stability() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void SystemProfileProto::set_has_stability()
{
    _has_bits_[0] |= 0x00002000u;
}
void SystemProfileProto::clear_has_stability()
{
    _has_bits_[0] &= ~0x00002000u;
}
void SystemProfileProto::clear_stability()
{
    if (stability_ != NULL)
        stability_->::metrics::SystemProfileProto_Stability::Clear();
    clear_has_stability();
}
const ::metrics::SystemProfileProto_Stability& SystemProfileProto::stability() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.stability)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return stability_ != NULL ? *stability_ : *default_instance().stability_;
#else
    return stability_ != NULL ? *stability_ : *default_instance_->stability_;
#endif
}
::metrics::SystemProfileProto_Stability* SystemProfileProto::mutable_stability()
{
    set_has_stability();
    if (stability_ == NULL) {
        stability_ = new ::metrics::SystemProfileProto_Stability;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.stability)
    return stability_;
}
::metrics::SystemProfileProto_Stability* SystemProfileProto::release_stability()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.stability)
    clear_has_stability();
    ::metrics::SystemProfileProto_Stability* temp = stability_;
    stability_ = NULL;
    return temp;
}
void SystemProfileProto::set_allocated_stability(::metrics::SystemProfileProto_Stability* stability)
{
    delete stability_;
    stability_ = stability;
    if (stability) {
        set_has_stability();
    } else {
        clear_has_stability();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.stability)
}

// repeated .metrics.SystemProfileProto.FieldTrial field_trial = 9;
int SystemProfileProto::field_trial_size() const
{
    return field_trial_.size();
}
void SystemProfileProto::clear_field_trial()
{
    field_trial_.Clear();
}
const ::metrics::SystemProfileProto_FieldTrial& SystemProfileProto::field_trial(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.field_trial)
    return field_trial_.Get(index);
}
::metrics::SystemProfileProto_FieldTrial* SystemProfileProto::mutable_field_trial(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.field_trial)
    return field_trial_.Mutable(index);
}
::metrics::SystemProfileProto_FieldTrial* SystemProfileProto::add_field_trial()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.field_trial)
    return field_trial_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_FieldTrial>*
SystemProfileProto::mutable_field_trial()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.field_trial)
    return &field_trial_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_FieldTrial>&
SystemProfileProto::field_trial() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.field_trial)
    return field_trial_;
}

// repeated .metrics.SystemProfileProto.ExternalAudioVideoDevice external_audio_video_device = 14;
int SystemProfileProto::external_audio_video_device_size() const
{
    return external_audio_video_device_.size();
}
void SystemProfileProto::clear_external_audio_video_device()
{
    external_audio_video_device_.Clear();
}
const ::metrics::SystemProfileProto_ExternalAudioVideoDevice& SystemProfileProto::external_audio_video_device(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.external_audio_video_device)
    return external_audio_video_device_.Get(index);
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice* SystemProfileProto::mutable_external_audio_video_device(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.external_audio_video_device)
    return external_audio_video_device_.Mutable(index);
}
::metrics::SystemProfileProto_ExternalAudioVideoDevice* SystemProfileProto::add_external_audio_video_device()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.external_audio_video_device)
    return external_audio_video_device_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_ExternalAudioVideoDevice>*
SystemProfileProto::mutable_external_audio_video_device()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.external_audio_video_device)
    return &external_audio_video_device_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_ExternalAudioVideoDevice>&
SystemProfileProto::external_audio_video_device() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.external_audio_video_device)
    return external_audio_video_device_;
}

// optional .metrics.SystemProfileProto.ExternalAccessPoint external_access_point = 15;
bool SystemProfileProto::has_external_access_point() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void SystemProfileProto::set_has_external_access_point()
{
    _has_bits_[0] |= 0x00010000u;
}
void SystemProfileProto::clear_has_external_access_point()
{
    _has_bits_[0] &= ~0x00010000u;
}
void SystemProfileProto::clear_external_access_point()
{
    if (external_access_point_ != NULL)
        external_access_point_->::metrics::SystemProfileProto_ExternalAccessPoint::Clear();
    clear_has_external_access_point();
}
const ::metrics::SystemProfileProto_ExternalAccessPoint& SystemProfileProto::external_access_point() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.external_access_point)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return external_access_point_ != NULL ? *external_access_point_ : *default_instance().external_access_point_;
#else
    return external_access_point_ != NULL ? *external_access_point_ : *default_instance_->external_access_point_;
#endif
}
::metrics::SystemProfileProto_ExternalAccessPoint* SystemProfileProto::mutable_external_access_point()
{
    set_has_external_access_point();
    if (external_access_point_ == NULL) {
        external_access_point_ = new ::metrics::SystemProfileProto_ExternalAccessPoint;
    }
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.external_access_point)
    return external_access_point_;
}
::metrics::SystemProfileProto_ExternalAccessPoint* SystemProfileProto::release_external_access_point()
{
    // @@protoc_insertion_point(field_release:metrics.SystemProfileProto.external_access_point)
    clear_has_external_access_point();
    ::metrics::SystemProfileProto_ExternalAccessPoint* temp = external_access_point_;
    external_access_point_ = NULL;
    return temp;
}
void SystemProfileProto::set_allocated_external_access_point(::metrics::SystemProfileProto_ExternalAccessPoint* external_access_point)
{
    delete external_access_point_;
    external_access_point_ = external_access_point;
    if (external_access_point) {
        set_has_external_access_point();
    } else {
        clear_has_external_access_point();
    }
    // @@protoc_insertion_point(field_set_allocated:metrics.SystemProfileProto.external_access_point)
}

// optional uint32 multi_profile_user_count = 17;
bool SystemProfileProto::has_multi_profile_user_count() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void SystemProfileProto::set_has_multi_profile_user_count()
{
    _has_bits_[0] |= 0x00020000u;
}
void SystemProfileProto::clear_has_multi_profile_user_count()
{
    _has_bits_[0] &= ~0x00020000u;
}
void SystemProfileProto::clear_multi_profile_user_count()
{
    multi_profile_user_count_ = 0u;
    clear_has_multi_profile_user_count();
}
::google::protobuf::uint32 SystemProfileProto::multi_profile_user_count() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.multi_profile_user_count)
    return multi_profile_user_count_;
}
void SystemProfileProto::set_multi_profile_user_count(::google::protobuf::uint32 value)
{
    set_has_multi_profile_user_count();
    multi_profile_user_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.multi_profile_user_count)
}

// repeated int32 occupied_extension_bucket = 18;
int SystemProfileProto::occupied_extension_bucket_size() const
{
    return occupied_extension_bucket_.size();
}
void SystemProfileProto::clear_occupied_extension_bucket()
{
    occupied_extension_bucket_.Clear();
}
::google::protobuf::int32 SystemProfileProto::occupied_extension_bucket(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.occupied_extension_bucket)
    return occupied_extension_bucket_.Get(index);
}
void SystemProfileProto::set_occupied_extension_bucket(int index, ::google::protobuf::int32 value)
{
    occupied_extension_bucket_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.occupied_extension_bucket)
}
void SystemProfileProto::add_occupied_extension_bucket(::google::protobuf::int32 value)
{
    occupied_extension_bucket_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.occupied_extension_bucket)
}
const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
SystemProfileProto::occupied_extension_bucket() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.occupied_extension_bucket)
    return occupied_extension_bucket_;
}
::google::protobuf::RepeatedField<::google::protobuf::int32>*
SystemProfileProto::mutable_occupied_extension_bucket()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.occupied_extension_bucket)
    return &occupied_extension_bucket_;
}

// optional .metrics.SystemProfileProto.ExtensionsState offstore_extensions_state = 19;
bool SystemProfileProto::has_offstore_extensions_state() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
void SystemProfileProto::set_has_offstore_extensions_state()
{
    _has_bits_[0] |= 0x00080000u;
}
void SystemProfileProto::clear_has_offstore_extensions_state()
{
    _has_bits_[0] &= ~0x00080000u;
}
void SystemProfileProto::clear_offstore_extensions_state()
{
    offstore_extensions_state_ = 0;
    clear_has_offstore_extensions_state();
}
::metrics::SystemProfileProto_ExtensionsState SystemProfileProto::offstore_extensions_state() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.offstore_extensions_state)
    return static_cast<::metrics::SystemProfileProto_ExtensionsState>(offstore_extensions_state_);
}
void SystemProfileProto::set_offstore_extensions_state(::metrics::SystemProfileProto_ExtensionsState value)
{
    assert(::metrics::SystemProfileProto_ExtensionsState_IsValid(value));
    set_has_offstore_extensions_state();
    offstore_extensions_state_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.offstore_extensions_state)
}

// optional .metrics.SystemProfileProto.UmaDefaultState uma_default_state = 22;
bool SystemProfileProto::has_uma_default_state() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
void SystemProfileProto::set_has_uma_default_state()
{
    _has_bits_[0] |= 0x00100000u;
}
void SystemProfileProto::clear_has_uma_default_state()
{
    _has_bits_[0] &= ~0x00100000u;
}
void SystemProfileProto::clear_uma_default_state()
{
    uma_default_state_ = 0;
    clear_has_uma_default_state();
}
::metrics::SystemProfileProto_UmaDefaultState SystemProfileProto::uma_default_state() const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.uma_default_state)
    return static_cast<::metrics::SystemProfileProto_UmaDefaultState>(uma_default_state_);
}
void SystemProfileProto::set_uma_default_state(::metrics::SystemProfileProto_UmaDefaultState value)
{
    assert(::metrics::SystemProfileProto_UmaDefaultState_IsValid(value));
    set_has_uma_default_state();
    uma_default_state_ = value;
    // @@protoc_insertion_point(field_set:metrics.SystemProfileProto.uma_default_state)
}

// repeated .metrics.SystemProfileProto.AntiVirusProduct antivirus_product = 23;
int SystemProfileProto::antivirus_product_size() const
{
    return antivirus_product_.size();
}
void SystemProfileProto::clear_antivirus_product()
{
    antivirus_product_.Clear();
}
const ::metrics::SystemProfileProto_AntiVirusProduct& SystemProfileProto::antivirus_product(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.SystemProfileProto.antivirus_product)
    return antivirus_product_.Get(index);
}
::metrics::SystemProfileProto_AntiVirusProduct* SystemProfileProto::mutable_antivirus_product(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.SystemProfileProto.antivirus_product)
    return antivirus_product_.Mutable(index);
}
::metrics::SystemProfileProto_AntiVirusProduct* SystemProfileProto::add_antivirus_product()
{
    // @@protoc_insertion_point(field_add:metrics.SystemProfileProto.antivirus_product)
    return antivirus_product_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_AntiVirusProduct>*
SystemProfileProto::mutable_antivirus_product()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.SystemProfileProto.antivirus_product)
    return &antivirus_product_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::SystemProfileProto_AntiVirusProduct>&
SystemProfileProto::antivirus_product() const
{
    // @@protoc_insertion_point(field_list:metrics.SystemProfileProto.antivirus_product)
    return antivirus_product_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
