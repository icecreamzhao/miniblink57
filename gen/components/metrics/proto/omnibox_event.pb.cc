// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibox_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "omnibox_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace metrics {

void protobuf_ShutdownFile_omnibox_5fevent_2eproto()
{
    delete OmniboxEventProto::default_instance_;
    delete OmniboxEventProto_Suggestion::default_instance_;
    delete OmniboxEventProto_ProviderInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_omnibox_5fevent_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_omnibox_5fevent_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ::metrics::OmniboxInputType::protobuf_AddDesc_omnibox_5finput_5ftype_2eproto();
    OmniboxEventProto::default_instance_ = new OmniboxEventProto();
    OmniboxEventProto_Suggestion::default_instance_ = new OmniboxEventProto_Suggestion();
    OmniboxEventProto_ProviderInfo::default_instance_ = new OmniboxEventProto_ProviderInfo();
    OmniboxEventProto::default_instance_->InitAsDefaultInstance();
    OmniboxEventProto_Suggestion::default_instance_->InitAsDefaultInstance();
    OmniboxEventProto_ProviderInfo::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_omnibox_5fevent_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_omnibox_5fevent_2eproto_once_);
void protobuf_AddDesc_omnibox_5fevent_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_omnibox_5fevent_2eproto_once_,
        &protobuf_AddDesc_omnibox_5fevent_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_omnibox_5fevent_2eproto {
    StaticDescriptorInitializer_omnibox_5fevent_2eproto()
    {
        protobuf_AddDesc_omnibox_5fevent_2eproto();
    }
} static_descriptor_initializer_omnibox_5fevent_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForOmniboxEventProto(
    OmniboxEventProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool OmniboxEventProto_PageClassification_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OmniboxEventProto_PageClassification OmniboxEventProto::INVALID_SPEC;
const OmniboxEventProto_PageClassification OmniboxEventProto::NTP;
const OmniboxEventProto_PageClassification OmniboxEventProto::BLANK;
const OmniboxEventProto_PageClassification OmniboxEventProto::HOME_PAGE;
const OmniboxEventProto_PageClassification OmniboxEventProto::OTHER;
const OmniboxEventProto_PageClassification OmniboxEventProto::OBSOLETE_INSTANT_NTP;
const OmniboxEventProto_PageClassification OmniboxEventProto::OBSOLETE_SEARCH_RESULT_PAGE_DOING_SEARCH_TERM_REPLACEMENT;
const OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_OMNIBOX_AS_STARTING_FOCUS;
const OmniboxEventProto_PageClassification OmniboxEventProto::INSTANT_NTP_WITH_FAKEBOX_AS_STARTING_FOCUS;
const OmniboxEventProto_PageClassification OmniboxEventProto::SEARCH_RESULT_PAGE_NO_SEARCH_TERM_REPLACEMENT;
const OmniboxEventProto_PageClassification OmniboxEventProto::APP_HOME;
const OmniboxEventProto_PageClassification OmniboxEventProto::APP_SEARCH;
const OmniboxEventProto_PageClassification OmniboxEventProto::APP_MAPS;
const OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MIN;
const OmniboxEventProto_PageClassification OmniboxEventProto::PageClassification_MAX;
const int OmniboxEventProto::PageClassification_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool OmniboxEventProto_ProviderType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OmniboxEventProto_ProviderType OmniboxEventProto::UNKNOWN_PROVIDER;
const OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_URL;
const OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_CONTENTS;
const OmniboxEventProto_ProviderType OmniboxEventProto::HISTORY_QUICK;
const OmniboxEventProto_ProviderType OmniboxEventProto::SEARCH;
const OmniboxEventProto_ProviderType OmniboxEventProto::KEYWORD;
const OmniboxEventProto_ProviderType OmniboxEventProto::BUILTIN;
const OmniboxEventProto_ProviderType OmniboxEventProto::SHORTCUTS;
const OmniboxEventProto_ProviderType OmniboxEventProto::EXTENSION_APPS;
const OmniboxEventProto_ProviderType OmniboxEventProto::CONTACT;
const OmniboxEventProto_ProviderType OmniboxEventProto::BOOKMARK;
const OmniboxEventProto_ProviderType OmniboxEventProto::ZERO_SUGGEST;
const OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE;
const OmniboxEventProto_ProviderType OmniboxEventProto::ON_DEVICE_CHROME;
const OmniboxEventProto_ProviderType OmniboxEventProto::CLIPBOARD_URL;
const OmniboxEventProto_ProviderType OmniboxEventProto::PHYSICAL_WEB;
const OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MIN;
const OmniboxEventProto_ProviderType OmniboxEventProto::ProviderType_MAX;
const int OmniboxEventProto::ProviderType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForOmniboxEventProto_Suggestion(
    OmniboxEventProto_Suggestion* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool OmniboxEventProto_Suggestion_ResultType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::UNKNOWN_RESULT_TYPE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::URL_WHAT_YOU_TYPED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_URL;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_TITLE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_BODY;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::HISTORY_KEYWORD;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_WHAT_YOU_TYPED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_HISTORY;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_OTHER_ENGINE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::EXTENSION_APP;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CONTACT;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::BOOKMARK_TITLE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ENTITY;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_TAIL;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PERSONALIZED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_PROFILE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP_RESULT;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::APP;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::LEGACY_ON_DEVICE;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::NAVSUGGEST_PERSONALIZED;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::SEARCH_SUGGEST_ANSWER;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CALCULATOR;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::CLIPBOARD;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::PHYSICAL_WEB_OVERFLOW;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MIN;
const OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::ResultType_MAX;
const int OmniboxEventProto_Suggestion::ResultType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OmniboxEventProto_Suggestion::kProviderFieldNumber;
const int OmniboxEventProto_Suggestion::kResultTypeFieldNumber;
const int OmniboxEventProto_Suggestion::kRelevanceFieldNumber;
const int OmniboxEventProto_Suggestion::kTypedCountFieldNumber;
const int OmniboxEventProto_Suggestion::kIsStarredFieldNumber;
const int OmniboxEventProto_Suggestion::kIsDisabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto.Suggestion)
}

void OmniboxEventProto_Suggestion::InitAsDefaultInstance()
{
}

OmniboxEventProto_Suggestion::OmniboxEventProto_Suggestion(const OmniboxEventProto_Suggestion& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.Suggestion)
}

void OmniboxEventProto_Suggestion::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    provider_ = 0;
    result_type_ = 0;
    relevance_ = 0;
    typed_count_ = 0;
    is_starred_ = false;
    is_disabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OmniboxEventProto_Suggestion::~OmniboxEventProto_Suggestion()
{
    // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.Suggestion)
    SharedDtor();
}

void OmniboxEventProto_Suggestion::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void OmniboxEventProto_Suggestion::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OmniboxEventProto_Suggestion& OmniboxEventProto_Suggestion::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_omnibox_5fevent_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_omnibox_5fevent_2eproto();
#endif
    return *default_instance_;
}

OmniboxEventProto_Suggestion* OmniboxEventProto_Suggestion::default_instance_ = NULL;

OmniboxEventProto_Suggestion* OmniboxEventProto_Suggestion::New(::google::protobuf::Arena* arena) const
{
    OmniboxEventProto_Suggestion* n = new OmniboxEventProto_Suggestion;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void OmniboxEventProto_Suggestion::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.Suggestion)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(OmniboxEventProto_Suggestion, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<OmniboxEventProto_Suggestion*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 63u) {
        ZR_(provider_, is_disabled_);
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OmniboxEventProto_Suggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForOmniboxEventProto_Suggestion, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto.Suggestion)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::OmniboxEventProto_ProviderType_IsValid(value)) {
                    set_provider(static_cast<::metrics::OmniboxEventProto_ProviderType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_result_type;
            break;
        }

        // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
        case 2: {
            if (tag == 16) {
            parse_result_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(value)) {
                    set_result_type(static_cast<::metrics::OmniboxEventProto_Suggestion_ResultType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_relevance;
            break;
        }

        // optional int32 relevance = 3;
        case 3: {
            if (tag == 24) {
            parse_relevance:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &relevance_)));
                set_has_relevance();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_is_starred;
            break;
        }

        // optional bool is_starred = 4 [deprecated = true];
        case 4: {
            if (tag == 32) {
            parse_is_starred:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_starred_)));
                set_has_is_starred();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_typed_count;
            break;
        }

        // optional int32 typed_count = 5;
        case 5: {
            if (tag == 40) {
            parse_typed_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &typed_count_)));
                set_has_typed_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_is_disabled;
            break;
        }

        // optional bool is_disabled = 6;
        case 6: {
            if (tag == 48) {
            parse_is_disabled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_disabled_)));
                set_has_is_disabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto.Suggestion)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto.Suggestion)
    return false;
#undef DO_
}

void OmniboxEventProto_Suggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto.Suggestion)
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (has_provider()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->provider(), output);
    }

    // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
    if (has_result_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->result_type(), output);
    }

    // optional int32 relevance = 3;
    if (has_relevance()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->relevance(), output);
    }

    // optional bool is_starred = 4 [deprecated = true];
    if (has_is_starred()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_starred(), output);
    }

    // optional int32 typed_count = 5;
    if (has_typed_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typed_count(), output);
    }

    // optional bool is_disabled = 6;
    if (has_is_disabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_disabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto.Suggestion)
}

int OmniboxEventProto_Suggestion::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.Suggestion)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 63u) {
        // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
        if (has_provider()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
        }

        // optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
        if (has_result_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
        }

        // optional int32 relevance = 3;
        if (has_relevance()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->relevance());
        }

        // optional int32 typed_count = 5;
        if (has_typed_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->typed_count());
        }

        // optional bool is_starred = 4 [deprecated = true];
        if (has_is_starred()) {
            total_size += 1 + 1;
        }

        // optional bool is_disabled = 6;
        if (has_is_disabled()) {
            total_size += 1 + 1;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void OmniboxEventProto_Suggestion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const OmniboxEventProto_Suggestion*>(&from));
}

void OmniboxEventProto_Suggestion::MergeFrom(const OmniboxEventProto_Suggestion& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.Suggestion)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_provider()) {
            set_provider(from.provider());
        }
        if (from.has_result_type()) {
            set_result_type(from.result_type());
        }
        if (from.has_relevance()) {
            set_relevance(from.relevance());
        }
        if (from.has_typed_count()) {
            set_typed_count(from.typed_count());
        }
        if (from.has_is_starred()) {
            set_is_starred(from.is_starred());
        }
        if (from.has_is_disabled()) {
            set_is_disabled(from.is_disabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void OmniboxEventProto_Suggestion::CopyFrom(const OmniboxEventProto_Suggestion& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.Suggestion)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool OmniboxEventProto_Suggestion::IsInitialized() const
{

    return true;
}

void OmniboxEventProto_Suggestion::Swap(OmniboxEventProto_Suggestion* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void OmniboxEventProto_Suggestion::InternalSwap(OmniboxEventProto_Suggestion* other)
{
    std::swap(provider_, other->provider_);
    std::swap(result_type_, other->result_type_);
    std::swap(relevance_, other->relevance_);
    std::swap(typed_count_, other->typed_count_);
    std::swap(is_starred_, other->is_starred_);
    std::swap(is_disabled_, other->is_disabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string OmniboxEventProto_Suggestion::GetTypeName() const
{
    return "metrics.OmniboxEventProto.Suggestion";
}

// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForOmniboxEventProto_ProviderInfo(
    OmniboxEventProto_ProviderInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OmniboxEventProto_ProviderInfo::kProviderFieldNumber;
const int OmniboxEventProto_ProviderInfo::kProviderDoneFieldNumber;
const int OmniboxEventProto_ProviderInfo::kFieldTrialTriggeredFieldNumber;
const int OmniboxEventProto_ProviderInfo::kFieldTrialTriggeredInSessionFieldNumber;
const int OmniboxEventProto_ProviderInfo::kTimesReturnedResultsInSessionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto.ProviderInfo)
}

void OmniboxEventProto_ProviderInfo::InitAsDefaultInstance()
{
}

OmniboxEventProto_ProviderInfo::OmniboxEventProto_ProviderInfo(const OmniboxEventProto_ProviderInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto.ProviderInfo)
}

void OmniboxEventProto_ProviderInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    provider_ = 0;
    provider_done_ = false;
    times_returned_results_in_session_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OmniboxEventProto_ProviderInfo::~OmniboxEventProto_ProviderInfo()
{
    // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto.ProviderInfo)
    SharedDtor();
}

void OmniboxEventProto_ProviderInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void OmniboxEventProto_ProviderInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OmniboxEventProto_ProviderInfo& OmniboxEventProto_ProviderInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_omnibox_5fevent_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_omnibox_5fevent_2eproto();
#endif
    return *default_instance_;
}

OmniboxEventProto_ProviderInfo* OmniboxEventProto_ProviderInfo::default_instance_ = NULL;

OmniboxEventProto_ProviderInfo* OmniboxEventProto_ProviderInfo::New(::google::protobuf::Arena* arena) const
{
    OmniboxEventProto_ProviderInfo* n = new OmniboxEventProto_ProviderInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void OmniboxEventProto_ProviderInfo::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto.ProviderInfo)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                    \
    _Pragma("clang diagnostic push")                                                                                     \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(OmniboxEventProto_ProviderInfo, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<OmniboxEventProto_ProviderInfo*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 19u) {
        ZR_(provider_, provider_done_);
        times_returned_results_in_session_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    field_trial_triggered_.Clear();
    field_trial_triggered_in_session_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OmniboxEventProto_ProviderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForOmniboxEventProto_ProviderInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto.ProviderInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::OmniboxEventProto_ProviderType_IsValid(value)) {
                    set_provider(static_cast<::metrics::OmniboxEventProto_ProviderType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_provider_done;
            break;
        }

        // optional bool provider_done = 2;
        case 2: {
            if (tag == 16) {
            parse_provider_done:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &provider_done_)));
                set_has_provider_done();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(29))
                goto parse_field_trial_triggered;
            break;
        }

        // repeated fixed32 field_trial_triggered = 3;
        case 3: {
            if (tag == 29) {
            parse_field_trial_triggered:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    1, 29, input, this->mutable_field_trial_triggered())));
            } else if (tag == 26) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, this->mutable_field_trial_triggered())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(29))
                goto parse_field_trial_triggered;
            if (input->ExpectTag(37))
                goto parse_field_trial_triggered_in_session;
            break;
        }

        // repeated fixed32 field_trial_triggered_in_session = 4;
        case 4: {
            if (tag == 37) {
            parse_field_trial_triggered_in_session:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    1, 37, input, this->mutable_field_trial_triggered_in_session())));
            } else if (tag == 34) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, this->mutable_field_trial_triggered_in_session())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(37))
                goto parse_field_trial_triggered_in_session;
            if (input->ExpectTag(40))
                goto parse_times_returned_results_in_session;
            break;
        }

        // optional int32 times_returned_results_in_session = 5;
        case 5: {
            if (tag == 40) {
            parse_times_returned_results_in_session:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &times_returned_results_in_session_)));
                set_has_times_returned_results_in_session();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto.ProviderInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto.ProviderInfo)
    return false;
#undef DO_
}

void OmniboxEventProto_ProviderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto.ProviderInfo)
    // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
    if (has_provider()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->provider(), output);
    }

    // optional bool provider_done = 2;
    if (has_provider_done()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->provider_done(), output);
    }

    // repeated fixed32 field_trial_triggered = 3;
    for (int i = 0; i < this->field_trial_triggered_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(
            3, this->field_trial_triggered(i), output);
    }

    // repeated fixed32 field_trial_triggered_in_session = 4;
    for (int i = 0; i < this->field_trial_triggered_in_session_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(
            4, this->field_trial_triggered_in_session(i), output);
    }

    // optional int32 times_returned_results_in_session = 5;
    if (has_times_returned_results_in_session()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times_returned_results_in_session(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto.ProviderInfo)
}

int OmniboxEventProto_ProviderInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto.ProviderInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 19u) {
        // optional .metrics.OmniboxEventProto.ProviderType provider = 1;
        if (has_provider()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
        }

        // optional bool provider_done = 2;
        if (has_provider_done()) {
            total_size += 1 + 1;
        }

        // optional int32 times_returned_results_in_session = 5;
        if (has_times_returned_results_in_session()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->times_returned_results_in_session());
        }
    }
    // repeated fixed32 field_trial_triggered = 3;
    {
        int data_size = 0;
        data_size = 4 * this->field_trial_triggered_size();
        total_size += 1 * this->field_trial_triggered_size() + data_size;
    }

    // repeated fixed32 field_trial_triggered_in_session = 4;
    {
        int data_size = 0;
        data_size = 4 * this->field_trial_triggered_in_session_size();
        total_size += 1 * this->field_trial_triggered_in_session_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void OmniboxEventProto_ProviderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const OmniboxEventProto_ProviderInfo*>(&from));
}

void OmniboxEventProto_ProviderInfo::MergeFrom(const OmniboxEventProto_ProviderInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto.ProviderInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    field_trial_triggered_.MergeFrom(from.field_trial_triggered_);
    field_trial_triggered_in_session_.MergeFrom(from.field_trial_triggered_in_session_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_provider()) {
            set_provider(from.provider());
        }
        if (from.has_provider_done()) {
            set_provider_done(from.provider_done());
        }
        if (from.has_times_returned_results_in_session()) {
            set_times_returned_results_in_session(from.times_returned_results_in_session());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void OmniboxEventProto_ProviderInfo::CopyFrom(const OmniboxEventProto_ProviderInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto.ProviderInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool OmniboxEventProto_ProviderInfo::IsInitialized() const
{

    return true;
}

void OmniboxEventProto_ProviderInfo::Swap(OmniboxEventProto_ProviderInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void OmniboxEventProto_ProviderInfo::InternalSwap(OmniboxEventProto_ProviderInfo* other)
{
    std::swap(provider_, other->provider_);
    std::swap(provider_done_, other->provider_done_);
    field_trial_triggered_.UnsafeArenaSwap(&other->field_trial_triggered_);
    field_trial_triggered_in_session_.UnsafeArenaSwap(&other->field_trial_triggered_in_session_);
    std::swap(times_returned_results_in_session_, other->times_returned_results_in_session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string OmniboxEventProto_ProviderInfo::GetTypeName() const
{
    return "metrics.OmniboxEventProto.ProviderInfo";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OmniboxEventProto::kTimeFieldNumber;
const int OmniboxEventProto::kTabIdFieldNumber;
const int OmniboxEventProto::kTypedLengthFieldNumber;
const int OmniboxEventProto::kJustDeletedTextFieldNumber;
const int OmniboxEventProto::kNumTypedTermsFieldNumber;
const int OmniboxEventProto::kSelectedIndexFieldNumber;
const int OmniboxEventProto::kDEPRECATEDIsTopResultHiddenInDropdownFieldNumber;
const int OmniboxEventProto::kIsPopupOpenFieldNumber;
const int OmniboxEventProto::kIsPasteAndGoFieldNumber;
const int OmniboxEventProto::kCompletedLengthFieldNumber;
const int OmniboxEventProto::kTypingDurationMsFieldNumber;
const int OmniboxEventProto::kDurationSinceLastDefaultMatchUpdateMsFieldNumber;
const int OmniboxEventProto::kCurrentPageClassificationFieldNumber;
const int OmniboxEventProto::kInputTypeFieldNumber;
const int OmniboxEventProto::kSuggestionFieldNumber;
const int OmniboxEventProto::kProviderInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

OmniboxEventProto::OmniboxEventProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:metrics.OmniboxEventProto)
}

void OmniboxEventProto::InitAsDefaultInstance()
{
}

OmniboxEventProto::OmniboxEventProto(const OmniboxEventProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:metrics.OmniboxEventProto)
}

void OmniboxEventProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    time_ = GOOGLE_LONGLONG(0);
    tab_id_ = 0;
    typed_length_ = 0;
    just_deleted_text_ = false;
    num_typed_terms_ = 0;
    selected_index_ = 0;
    deprecated_is_top_result_hidden_in_dropdown_ = false;
    is_popup_open_ = false;
    is_paste_and_go_ = false;
    completed_length_ = 0;
    typing_duration_ms_ = GOOGLE_LONGLONG(0);
    duration_since_last_default_match_update_ms_ = GOOGLE_LONGLONG(0);
    current_page_classification_ = 0;
    input_type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OmniboxEventProto::~OmniboxEventProto()
{
    // @@protoc_insertion_point(destructor:metrics.OmniboxEventProto)
    SharedDtor();
}

void OmniboxEventProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void OmniboxEventProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OmniboxEventProto& OmniboxEventProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_omnibox_5fevent_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_omnibox_5fevent_2eproto();
#endif
    return *default_instance_;
}

OmniboxEventProto* OmniboxEventProto::default_instance_ = NULL;

OmniboxEventProto* OmniboxEventProto::New(::google::protobuf::Arena* arena) const
{
    OmniboxEventProto* n = new OmniboxEventProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void OmniboxEventProto::Clear()
{
// @@protoc_insertion_point(message_clear_start:metrics.OmniboxEventProto)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                       \
    _Pragma("clang diagnostic push")                                                                        \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(OmniboxEventProto, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<OmniboxEventProto*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(time_, is_popup_open_);
    }
    if (_has_bits_[8 / 32] & 16128u) {
        ZR_(is_paste_and_go_, input_type_);
    }

#undef ZR_HELPER_
#undef ZR_

    suggestion_.Clear();
    provider_info_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OmniboxEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForOmniboxEventProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:metrics.OmniboxEventProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 time = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &time_)));
                set_has_time();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_tab_id;
            break;
        }

        // optional int32 tab_id = 2;
        case 2: {
            if (tag == 16) {
            parse_tab_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &tab_id_)));
                set_has_tab_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_typed_length;
            break;
        }

        // optional int32 typed_length = 3;
        case 3: {
            if (tag == 24) {
            parse_typed_length:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &typed_length_)));
                set_has_typed_length();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_num_typed_terms;
            break;
        }

        // optional int32 num_typed_terms = 4;
        case 4: {
            if (tag == 32) {
            parse_num_typed_terms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &num_typed_terms_)));
                set_has_num_typed_terms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_selected_index;
            break;
        }

        // optional int32 selected_index = 5;
        case 5: {
            if (tag == 40) {
            parse_selected_index:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &selected_index_)));
                set_has_selected_index();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_completed_length;
            break;
        }

        // optional int32 completed_length = 6;
        case 6: {
            if (tag == 48) {
            parse_completed_length:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &completed_length_)));
                set_has_completed_length();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_typing_duration_ms;
            break;
        }

        // optional int64 typing_duration_ms = 7;
        case 7: {
            if (tag == 56) {
            parse_typing_duration_ms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &typing_duration_ms_)));
                set_has_typing_duration_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_input_type;
            break;
        }

        // optional .metrics.OmniboxInputType.Type input_type = 8;
        case 8: {
            if (tag == 64) {
            parse_input_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::OmniboxInputType::Type_IsValid(value)) {
                    set_input_type(static_cast<::metrics::OmniboxInputType::Type>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(64);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_suggestion;
            break;
        }

        // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
        case 9: {
            if (tag == 74) {
            parse_suggestion:
                DO_(input->IncrementRecursionDepth());
            parse_loop_suggestion:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_suggestion()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_loop_suggestion;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(80))
                goto parse_current_page_classification;
            break;
        }

        // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
        case 10: {
            if (tag == 80) {
            parse_current_page_classification:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::metrics::OmniboxEventProto_PageClassification_IsValid(value)) {
                    set_current_page_classification(static_cast<::metrics::OmniboxEventProto_PageClassification>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(80);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_just_deleted_text;
            break;
        }

        // optional bool just_deleted_text = 11;
        case 11: {
            if (tag == 88) {
            parse_just_deleted_text:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &just_deleted_text_)));
                set_has_just_deleted_text();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_provider_info;
            break;
        }

        // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
        case 12: {
            if (tag == 98) {
            parse_provider_info:
                DO_(input->IncrementRecursionDepth());
            parse_loop_provider_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_provider_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_loop_provider_info;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(104))
                goto parse_duration_since_last_default_match_update_ms;
            break;
        }

        // optional int64 duration_since_last_default_match_update_ms = 13;
        case 13: {
            if (tag == 104) {
            parse_duration_since_last_default_match_update_ms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &duration_since_last_default_match_update_ms_)));
                set_has_duration_since_last_default_match_update_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(112))
                goto parse_DEPRECATED_is_top_result_hidden_in_dropdown;
            break;
        }

        // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
        case 14: {
            if (tag == 112) {
            parse_DEPRECATED_is_top_result_hidden_in_dropdown:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &deprecated_is_top_result_hidden_in_dropdown_)));
                set_has_deprecated_is_top_result_hidden_in_dropdown();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_is_popup_open;
            break;
        }

        // optional bool is_popup_open = 15;
        case 15: {
            if (tag == 120) {
            parse_is_popup_open:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_popup_open_)));
                set_has_is_popup_open();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_is_paste_and_go;
            break;
        }

        // optional bool is_paste_and_go = 16;
        case 16: {
            if (tag == 128) {
            parse_is_paste_and_go:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_paste_and_go_)));
                set_has_is_paste_and_go();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:metrics.OmniboxEventProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:metrics.OmniboxEventProto)
    return false;
#undef DO_
}

void OmniboxEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:metrics.OmniboxEventProto)
    // optional int64 time = 1;
    if (has_time()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
    }

    // optional int32 tab_id = 2;
    if (has_tab_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tab_id(), output);
    }

    // optional int32 typed_length = 3;
    if (has_typed_length()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typed_length(), output);
    }

    // optional int32 num_typed_terms = 4;
    if (has_num_typed_terms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_typed_terms(), output);
    }

    // optional int32 selected_index = 5;
    if (has_selected_index()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->selected_index(), output);
    }

    // optional int32 completed_length = 6;
    if (has_completed_length()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->completed_length(), output);
    }

    // optional int64 typing_duration_ms = 7;
    if (has_typing_duration_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->typing_duration_ms(), output);
    }

    // optional .metrics.OmniboxInputType.Type input_type = 8;
    if (has_input_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            8, this->input_type(), output);
    }

    // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
    for (unsigned int i = 0, n = this->suggestion_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, this->suggestion(i), output);
    }

    // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
    if (has_current_page_classification()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            10, this->current_page_classification(), output);
    }

    // optional bool just_deleted_text = 11;
    if (has_just_deleted_text()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->just_deleted_text(), output);
    }

    // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
    for (unsigned int i = 0, n = this->provider_info_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, this->provider_info(i), output);
    }

    // optional int64 duration_since_last_default_match_update_ms = 13;
    if (has_duration_since_last_default_match_update_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->duration_since_last_default_match_update_ms(), output);
    }

    // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
    if (has_deprecated_is_top_result_hidden_in_dropdown()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->deprecated_is_top_result_hidden_in_dropdown(), output);
    }

    // optional bool is_popup_open = 15;
    if (has_is_popup_open()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_popup_open(), output);
    }

    // optional bool is_paste_and_go = 16;
    if (has_is_paste_and_go()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_paste_and_go(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:metrics.OmniboxEventProto)
}

int OmniboxEventProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:metrics.OmniboxEventProto)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional int64 time = 1;
        if (has_time()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->time());
        }

        // optional int32 tab_id = 2;
        if (has_tab_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->tab_id());
        }

        // optional int32 typed_length = 3;
        if (has_typed_length()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->typed_length());
        }

        // optional bool just_deleted_text = 11;
        if (has_just_deleted_text()) {
            total_size += 1 + 1;
        }

        // optional int32 num_typed_terms = 4;
        if (has_num_typed_terms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->num_typed_terms());
        }

        // optional int32 selected_index = 5;
        if (has_selected_index()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->selected_index());
        }

        // optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
        if (has_deprecated_is_top_result_hidden_in_dropdown()) {
            total_size += 1 + 1;
        }

        // optional bool is_popup_open = 15;
        if (has_is_popup_open()) {
            total_size += 1 + 1;
        }
    }
    if (_has_bits_[8 / 32] & 16128u) {
        // optional bool is_paste_and_go = 16;
        if (has_is_paste_and_go()) {
            total_size += 2 + 1;
        }

        // optional int32 completed_length = 6;
        if (has_completed_length()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->completed_length());
        }

        // optional int64 typing_duration_ms = 7;
        if (has_typing_duration_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->typing_duration_ms());
        }

        // optional int64 duration_since_last_default_match_update_ms = 13;
        if (has_duration_since_last_default_match_update_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->duration_since_last_default_match_update_ms());
        }

        // optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
        if (has_current_page_classification()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_page_classification());
        }

        // optional .metrics.OmniboxInputType.Type input_type = 8;
        if (has_input_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
        }
    }
    // repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
    total_size += 1 * this->suggestion_size();
    for (int i = 0; i < this->suggestion_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->suggestion(i));
    }

    // repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
    total_size += 1 * this->provider_info_size();
    for (int i = 0; i < this->provider_info_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->provider_info(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void OmniboxEventProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const OmniboxEventProto*>(&from));
}

void OmniboxEventProto::MergeFrom(const OmniboxEventProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:metrics.OmniboxEventProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    suggestion_.MergeFrom(from.suggestion_);
    provider_info_.MergeFrom(from.provider_info_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_time()) {
            set_time(from.time());
        }
        if (from.has_tab_id()) {
            set_tab_id(from.tab_id());
        }
        if (from.has_typed_length()) {
            set_typed_length(from.typed_length());
        }
        if (from.has_just_deleted_text()) {
            set_just_deleted_text(from.just_deleted_text());
        }
        if (from.has_num_typed_terms()) {
            set_num_typed_terms(from.num_typed_terms());
        }
        if (from.has_selected_index()) {
            set_selected_index(from.selected_index());
        }
        if (from.has_deprecated_is_top_result_hidden_in_dropdown()) {
            set_deprecated_is_top_result_hidden_in_dropdown(from.deprecated_is_top_result_hidden_in_dropdown());
        }
        if (from.has_is_popup_open()) {
            set_is_popup_open(from.is_popup_open());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_is_paste_and_go()) {
            set_is_paste_and_go(from.is_paste_and_go());
        }
        if (from.has_completed_length()) {
            set_completed_length(from.completed_length());
        }
        if (from.has_typing_duration_ms()) {
            set_typing_duration_ms(from.typing_duration_ms());
        }
        if (from.has_duration_since_last_default_match_update_ms()) {
            set_duration_since_last_default_match_update_ms(from.duration_since_last_default_match_update_ms());
        }
        if (from.has_current_page_classification()) {
            set_current_page_classification(from.current_page_classification());
        }
        if (from.has_input_type()) {
            set_input_type(from.input_type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void OmniboxEventProto::CopyFrom(const OmniboxEventProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:metrics.OmniboxEventProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool OmniboxEventProto::IsInitialized() const
{

    return true;
}

void OmniboxEventProto::Swap(OmniboxEventProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void OmniboxEventProto::InternalSwap(OmniboxEventProto* other)
{
    std::swap(time_, other->time_);
    std::swap(tab_id_, other->tab_id_);
    std::swap(typed_length_, other->typed_length_);
    std::swap(just_deleted_text_, other->just_deleted_text_);
    std::swap(num_typed_terms_, other->num_typed_terms_);
    std::swap(selected_index_, other->selected_index_);
    std::swap(deprecated_is_top_result_hidden_in_dropdown_, other->deprecated_is_top_result_hidden_in_dropdown_);
    std::swap(is_popup_open_, other->is_popup_open_);
    std::swap(is_paste_and_go_, other->is_paste_and_go_);
    std::swap(completed_length_, other->completed_length_);
    std::swap(typing_duration_ms_, other->typing_duration_ms_);
    std::swap(duration_since_last_default_match_update_ms_, other->duration_since_last_default_match_update_ms_);
    std::swap(current_page_classification_, other->current_page_classification_);
    std::swap(input_type_, other->input_type_);
    suggestion_.UnsafeArenaSwap(&other->suggestion_);
    provider_info_.UnsafeArenaSwap(&other->provider_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string OmniboxEventProto::GetTypeName() const
{
    return "metrics.OmniboxEventProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OmniboxEventProto_Suggestion

// optional .metrics.OmniboxEventProto.ProviderType provider = 1;
bool OmniboxEventProto_Suggestion::has_provider() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_provider()
{
    _has_bits_[0] |= 0x00000001u;
}
void OmniboxEventProto_Suggestion::clear_has_provider()
{
    _has_bits_[0] &= ~0x00000001u;
}
void OmniboxEventProto_Suggestion::clear_provider()
{
    provider_ = 0;
    clear_has_provider();
}
::metrics::OmniboxEventProto_ProviderType OmniboxEventProto_Suggestion::provider() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.provider)
    return static_cast<::metrics::OmniboxEventProto_ProviderType>(provider_);
}
void OmniboxEventProto_Suggestion::set_provider(::metrics::OmniboxEventProto_ProviderType value)
{
    assert(::metrics::OmniboxEventProto_ProviderType_IsValid(value));
    set_has_provider();
    provider_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.provider)
}

// optional .metrics.OmniboxEventProto.Suggestion.ResultType result_type = 2;
bool OmniboxEventProto_Suggestion::has_result_type() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_result_type()
{
    _has_bits_[0] |= 0x00000002u;
}
void OmniboxEventProto_Suggestion::clear_has_result_type()
{
    _has_bits_[0] &= ~0x00000002u;
}
void OmniboxEventProto_Suggestion::clear_result_type()
{
    result_type_ = 0;
    clear_has_result_type();
}
::metrics::OmniboxEventProto_Suggestion_ResultType OmniboxEventProto_Suggestion::result_type() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.result_type)
    return static_cast<::metrics::OmniboxEventProto_Suggestion_ResultType>(result_type_);
}
void OmniboxEventProto_Suggestion::set_result_type(::metrics::OmniboxEventProto_Suggestion_ResultType value)
{
    assert(::metrics::OmniboxEventProto_Suggestion_ResultType_IsValid(value));
    set_has_result_type();
    result_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.result_type)
}

// optional int32 relevance = 3;
bool OmniboxEventProto_Suggestion::has_relevance() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_relevance()
{
    _has_bits_[0] |= 0x00000004u;
}
void OmniboxEventProto_Suggestion::clear_has_relevance()
{
    _has_bits_[0] &= ~0x00000004u;
}
void OmniboxEventProto_Suggestion::clear_relevance()
{
    relevance_ = 0;
    clear_has_relevance();
}
::google::protobuf::int32 OmniboxEventProto_Suggestion::relevance() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.relevance)
    return relevance_;
}
void OmniboxEventProto_Suggestion::set_relevance(::google::protobuf::int32 value)
{
    set_has_relevance();
    relevance_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.relevance)
}

// optional int32 typed_count = 5;
bool OmniboxEventProto_Suggestion::has_typed_count() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_typed_count()
{
    _has_bits_[0] |= 0x00000008u;
}
void OmniboxEventProto_Suggestion::clear_has_typed_count()
{
    _has_bits_[0] &= ~0x00000008u;
}
void OmniboxEventProto_Suggestion::clear_typed_count()
{
    typed_count_ = 0;
    clear_has_typed_count();
}
::google::protobuf::int32 OmniboxEventProto_Suggestion::typed_count() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.typed_count)
    return typed_count_;
}
void OmniboxEventProto_Suggestion::set_typed_count(::google::protobuf::int32 value)
{
    set_has_typed_count();
    typed_count_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.typed_count)
}

// optional bool is_starred = 4 [deprecated = true];
bool OmniboxEventProto_Suggestion::has_is_starred() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_is_starred()
{
    _has_bits_[0] |= 0x00000010u;
}
void OmniboxEventProto_Suggestion::clear_has_is_starred()
{
    _has_bits_[0] &= ~0x00000010u;
}
void OmniboxEventProto_Suggestion::clear_is_starred()
{
    is_starred_ = false;
    clear_has_is_starred();
}
bool OmniboxEventProto_Suggestion::is_starred() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_starred)
    return is_starred_;
}
void OmniboxEventProto_Suggestion::set_is_starred(bool value)
{
    set_has_is_starred();
    is_starred_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_starred)
}

// optional bool is_disabled = 6;
bool OmniboxEventProto_Suggestion::has_is_disabled() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void OmniboxEventProto_Suggestion::set_has_is_disabled()
{
    _has_bits_[0] |= 0x00000020u;
}
void OmniboxEventProto_Suggestion::clear_has_is_disabled()
{
    _has_bits_[0] &= ~0x00000020u;
}
void OmniboxEventProto_Suggestion::clear_is_disabled()
{
    is_disabled_ = false;
    clear_has_is_disabled();
}
bool OmniboxEventProto_Suggestion::is_disabled() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.Suggestion.is_disabled)
    return is_disabled_;
}
void OmniboxEventProto_Suggestion::set_is_disabled(bool value)
{
    set_has_is_disabled();
    is_disabled_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.Suggestion.is_disabled)
}

// -------------------------------------------------------------------

// OmniboxEventProto_ProviderInfo

// optional .metrics.OmniboxEventProto.ProviderType provider = 1;
bool OmniboxEventProto_ProviderInfo::has_provider() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void OmniboxEventProto_ProviderInfo::set_has_provider()
{
    _has_bits_[0] |= 0x00000001u;
}
void OmniboxEventProto_ProviderInfo::clear_has_provider()
{
    _has_bits_[0] &= ~0x00000001u;
}
void OmniboxEventProto_ProviderInfo::clear_provider()
{
    provider_ = 0;
    clear_has_provider();
}
::metrics::OmniboxEventProto_ProviderType OmniboxEventProto_ProviderInfo::provider() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.provider)
    return static_cast<::metrics::OmniboxEventProto_ProviderType>(provider_);
}
void OmniboxEventProto_ProviderInfo::set_provider(::metrics::OmniboxEventProto_ProviderType value)
{
    assert(::metrics::OmniboxEventProto_ProviderType_IsValid(value));
    set_has_provider();
    provider_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.provider)
}

// optional bool provider_done = 2;
bool OmniboxEventProto_ProviderInfo::has_provider_done() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void OmniboxEventProto_ProviderInfo::set_has_provider_done()
{
    _has_bits_[0] |= 0x00000002u;
}
void OmniboxEventProto_ProviderInfo::clear_has_provider_done()
{
    _has_bits_[0] &= ~0x00000002u;
}
void OmniboxEventProto_ProviderInfo::clear_provider_done()
{
    provider_done_ = false;
    clear_has_provider_done();
}
bool OmniboxEventProto_ProviderInfo::provider_done() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.provider_done)
    return provider_done_;
}
void OmniboxEventProto_ProviderInfo::set_provider_done(bool value)
{
    set_has_provider_done();
    provider_done_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.provider_done)
}

// repeated fixed32 field_trial_triggered = 3;
int OmniboxEventProto_ProviderInfo::field_trial_triggered_size() const
{
    return field_trial_triggered_.size();
}
void OmniboxEventProto_ProviderInfo::clear_field_trial_triggered()
{
    field_trial_triggered_.Clear();
}
::google::protobuf::uint32 OmniboxEventProto_ProviderInfo::field_trial_triggered(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
    return field_trial_triggered_.Get(index);
}
void OmniboxEventProto_ProviderInfo::set_field_trial_triggered(int index, ::google::protobuf::uint32 value)
{
    field_trial_triggered_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
}
void OmniboxEventProto_ProviderInfo::add_field_trial_triggered(::google::protobuf::uint32 value)
{
    field_trial_triggered_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint32>&
OmniboxEventProto_ProviderInfo::field_trial_triggered() const
{
    // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
    return field_trial_triggered_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint32>*
OmniboxEventProto_ProviderInfo::mutable_field_trial_triggered()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered)
    return &field_trial_triggered_;
}

// repeated fixed32 field_trial_triggered_in_session = 4;
int OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session_size() const
{
    return field_trial_triggered_in_session_.size();
}
void OmniboxEventProto_ProviderInfo::clear_field_trial_triggered_in_session()
{
    field_trial_triggered_in_session_.Clear();
}
::google::protobuf::uint32 OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
    return field_trial_triggered_in_session_.Get(index);
}
void OmniboxEventProto_ProviderInfo::set_field_trial_triggered_in_session(int index, ::google::protobuf::uint32 value)
{
    field_trial_triggered_in_session_.Set(index, value);
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
}
void OmniboxEventProto_ProviderInfo::add_field_trial_triggered_in_session(::google::protobuf::uint32 value)
{
    field_trial_triggered_in_session_.Add(value);
    // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
}
const ::google::protobuf::RepeatedField<::google::protobuf::uint32>&
OmniboxEventProto_ProviderInfo::field_trial_triggered_in_session() const
{
    // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
    return field_trial_triggered_in_session_;
}
::google::protobuf::RepeatedField<::google::protobuf::uint32>*
OmniboxEventProto_ProviderInfo::mutable_field_trial_triggered_in_session()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.ProviderInfo.field_trial_triggered_in_session)
    return &field_trial_triggered_in_session_;
}

// optional int32 times_returned_results_in_session = 5;
bool OmniboxEventProto_ProviderInfo::has_times_returned_results_in_session() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void OmniboxEventProto_ProviderInfo::set_has_times_returned_results_in_session()
{
    _has_bits_[0] |= 0x00000010u;
}
void OmniboxEventProto_ProviderInfo::clear_has_times_returned_results_in_session()
{
    _has_bits_[0] &= ~0x00000010u;
}
void OmniboxEventProto_ProviderInfo::clear_times_returned_results_in_session()
{
    times_returned_results_in_session_ = 0;
    clear_has_times_returned_results_in_session();
}
::google::protobuf::int32 OmniboxEventProto_ProviderInfo::times_returned_results_in_session() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.ProviderInfo.times_returned_results_in_session)
    return times_returned_results_in_session_;
}
void OmniboxEventProto_ProviderInfo::set_times_returned_results_in_session(::google::protobuf::int32 value)
{
    set_has_times_returned_results_in_session();
    times_returned_results_in_session_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.ProviderInfo.times_returned_results_in_session)
}

// -------------------------------------------------------------------

// OmniboxEventProto

// optional int64 time = 1;
bool OmniboxEventProto::has_time() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void OmniboxEventProto::set_has_time()
{
    _has_bits_[0] |= 0x00000001u;
}
void OmniboxEventProto::clear_has_time()
{
    _has_bits_[0] &= ~0x00000001u;
}
void OmniboxEventProto::clear_time()
{
    time_ = GOOGLE_LONGLONG(0);
    clear_has_time();
}
::google::protobuf::int64 OmniboxEventProto::time() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.time)
    return time_;
}
void OmniboxEventProto::set_time(::google::protobuf::int64 value)
{
    set_has_time();
    time_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.time)
}

// optional int32 tab_id = 2;
bool OmniboxEventProto::has_tab_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void OmniboxEventProto::set_has_tab_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void OmniboxEventProto::clear_has_tab_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void OmniboxEventProto::clear_tab_id()
{
    tab_id_ = 0;
    clear_has_tab_id();
}
::google::protobuf::int32 OmniboxEventProto::tab_id() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.tab_id)
    return tab_id_;
}
void OmniboxEventProto::set_tab_id(::google::protobuf::int32 value)
{
    set_has_tab_id();
    tab_id_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.tab_id)
}

// optional int32 typed_length = 3;
bool OmniboxEventProto::has_typed_length() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void OmniboxEventProto::set_has_typed_length()
{
    _has_bits_[0] |= 0x00000004u;
}
void OmniboxEventProto::clear_has_typed_length()
{
    _has_bits_[0] &= ~0x00000004u;
}
void OmniboxEventProto::clear_typed_length()
{
    typed_length_ = 0;
    clear_has_typed_length();
}
::google::protobuf::int32 OmniboxEventProto::typed_length() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.typed_length)
    return typed_length_;
}
void OmniboxEventProto::set_typed_length(::google::protobuf::int32 value)
{
    set_has_typed_length();
    typed_length_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.typed_length)
}

// optional bool just_deleted_text = 11;
bool OmniboxEventProto::has_just_deleted_text() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void OmniboxEventProto::set_has_just_deleted_text()
{
    _has_bits_[0] |= 0x00000008u;
}
void OmniboxEventProto::clear_has_just_deleted_text()
{
    _has_bits_[0] &= ~0x00000008u;
}
void OmniboxEventProto::clear_just_deleted_text()
{
    just_deleted_text_ = false;
    clear_has_just_deleted_text();
}
bool OmniboxEventProto::just_deleted_text() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.just_deleted_text)
    return just_deleted_text_;
}
void OmniboxEventProto::set_just_deleted_text(bool value)
{
    set_has_just_deleted_text();
    just_deleted_text_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.just_deleted_text)
}

// optional int32 num_typed_terms = 4;
bool OmniboxEventProto::has_num_typed_terms() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void OmniboxEventProto::set_has_num_typed_terms()
{
    _has_bits_[0] |= 0x00000010u;
}
void OmniboxEventProto::clear_has_num_typed_terms()
{
    _has_bits_[0] &= ~0x00000010u;
}
void OmniboxEventProto::clear_num_typed_terms()
{
    num_typed_terms_ = 0;
    clear_has_num_typed_terms();
}
::google::protobuf::int32 OmniboxEventProto::num_typed_terms() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.num_typed_terms)
    return num_typed_terms_;
}
void OmniboxEventProto::set_num_typed_terms(::google::protobuf::int32 value)
{
    set_has_num_typed_terms();
    num_typed_terms_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.num_typed_terms)
}

// optional int32 selected_index = 5;
bool OmniboxEventProto::has_selected_index() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void OmniboxEventProto::set_has_selected_index()
{
    _has_bits_[0] |= 0x00000020u;
}
void OmniboxEventProto::clear_has_selected_index()
{
    _has_bits_[0] &= ~0x00000020u;
}
void OmniboxEventProto::clear_selected_index()
{
    selected_index_ = 0;
    clear_has_selected_index();
}
::google::protobuf::int32 OmniboxEventProto::selected_index() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.selected_index)
    return selected_index_;
}
void OmniboxEventProto::set_selected_index(::google::protobuf::int32 value)
{
    set_has_selected_index();
    selected_index_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.selected_index)
}

// optional bool DEPRECATED_is_top_result_hidden_in_dropdown = 14 [deprecated = true];
bool OmniboxEventProto::has_deprecated_is_top_result_hidden_in_dropdown() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void OmniboxEventProto::set_has_deprecated_is_top_result_hidden_in_dropdown()
{
    _has_bits_[0] |= 0x00000040u;
}
void OmniboxEventProto::clear_has_deprecated_is_top_result_hidden_in_dropdown()
{
    _has_bits_[0] &= ~0x00000040u;
}
void OmniboxEventProto::clear_deprecated_is_top_result_hidden_in_dropdown()
{
    deprecated_is_top_result_hidden_in_dropdown_ = false;
    clear_has_deprecated_is_top_result_hidden_in_dropdown();
}
bool OmniboxEventProto::deprecated_is_top_result_hidden_in_dropdown() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.DEPRECATED_is_top_result_hidden_in_dropdown)
    return deprecated_is_top_result_hidden_in_dropdown_;
}
void OmniboxEventProto::set_deprecated_is_top_result_hidden_in_dropdown(bool value)
{
    set_has_deprecated_is_top_result_hidden_in_dropdown();
    deprecated_is_top_result_hidden_in_dropdown_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.DEPRECATED_is_top_result_hidden_in_dropdown)
}

// optional bool is_popup_open = 15;
bool OmniboxEventProto::has_is_popup_open() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void OmniboxEventProto::set_has_is_popup_open()
{
    _has_bits_[0] |= 0x00000080u;
}
void OmniboxEventProto::clear_has_is_popup_open()
{
    _has_bits_[0] &= ~0x00000080u;
}
void OmniboxEventProto::clear_is_popup_open()
{
    is_popup_open_ = false;
    clear_has_is_popup_open();
}
bool OmniboxEventProto::is_popup_open() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.is_popup_open)
    return is_popup_open_;
}
void OmniboxEventProto::set_is_popup_open(bool value)
{
    set_has_is_popup_open();
    is_popup_open_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.is_popup_open)
}

// optional bool is_paste_and_go = 16;
bool OmniboxEventProto::has_is_paste_and_go() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void OmniboxEventProto::set_has_is_paste_and_go()
{
    _has_bits_[0] |= 0x00000100u;
}
void OmniboxEventProto::clear_has_is_paste_and_go()
{
    _has_bits_[0] &= ~0x00000100u;
}
void OmniboxEventProto::clear_is_paste_and_go()
{
    is_paste_and_go_ = false;
    clear_has_is_paste_and_go();
}
bool OmniboxEventProto::is_paste_and_go() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.is_paste_and_go)
    return is_paste_and_go_;
}
void OmniboxEventProto::set_is_paste_and_go(bool value)
{
    set_has_is_paste_and_go();
    is_paste_and_go_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.is_paste_and_go)
}

// optional int32 completed_length = 6;
bool OmniboxEventProto::has_completed_length() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void OmniboxEventProto::set_has_completed_length()
{
    _has_bits_[0] |= 0x00000200u;
}
void OmniboxEventProto::clear_has_completed_length()
{
    _has_bits_[0] &= ~0x00000200u;
}
void OmniboxEventProto::clear_completed_length()
{
    completed_length_ = 0;
    clear_has_completed_length();
}
::google::protobuf::int32 OmniboxEventProto::completed_length() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.completed_length)
    return completed_length_;
}
void OmniboxEventProto::set_completed_length(::google::protobuf::int32 value)
{
    set_has_completed_length();
    completed_length_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.completed_length)
}

// optional int64 typing_duration_ms = 7;
bool OmniboxEventProto::has_typing_duration_ms() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void OmniboxEventProto::set_has_typing_duration_ms()
{
    _has_bits_[0] |= 0x00000400u;
}
void OmniboxEventProto::clear_has_typing_duration_ms()
{
    _has_bits_[0] &= ~0x00000400u;
}
void OmniboxEventProto::clear_typing_duration_ms()
{
    typing_duration_ms_ = GOOGLE_LONGLONG(0);
    clear_has_typing_duration_ms();
}
::google::protobuf::int64 OmniboxEventProto::typing_duration_ms() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.typing_duration_ms)
    return typing_duration_ms_;
}
void OmniboxEventProto::set_typing_duration_ms(::google::protobuf::int64 value)
{
    set_has_typing_duration_ms();
    typing_duration_ms_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.typing_duration_ms)
}

// optional int64 duration_since_last_default_match_update_ms = 13;
bool OmniboxEventProto::has_duration_since_last_default_match_update_ms() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void OmniboxEventProto::set_has_duration_since_last_default_match_update_ms()
{
    _has_bits_[0] |= 0x00000800u;
}
void OmniboxEventProto::clear_has_duration_since_last_default_match_update_ms()
{
    _has_bits_[0] &= ~0x00000800u;
}
void OmniboxEventProto::clear_duration_since_last_default_match_update_ms()
{
    duration_since_last_default_match_update_ms_ = GOOGLE_LONGLONG(0);
    clear_has_duration_since_last_default_match_update_ms();
}
::google::protobuf::int64 OmniboxEventProto::duration_since_last_default_match_update_ms() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.duration_since_last_default_match_update_ms)
    return duration_since_last_default_match_update_ms_;
}
void OmniboxEventProto::set_duration_since_last_default_match_update_ms(::google::protobuf::int64 value)
{
    set_has_duration_since_last_default_match_update_ms();
    duration_since_last_default_match_update_ms_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.duration_since_last_default_match_update_ms)
}

// optional .metrics.OmniboxEventProto.PageClassification current_page_classification = 10;
bool OmniboxEventProto::has_current_page_classification() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void OmniboxEventProto::set_has_current_page_classification()
{
    _has_bits_[0] |= 0x00001000u;
}
void OmniboxEventProto::clear_has_current_page_classification()
{
    _has_bits_[0] &= ~0x00001000u;
}
void OmniboxEventProto::clear_current_page_classification()
{
    current_page_classification_ = 0;
    clear_has_current_page_classification();
}
::metrics::OmniboxEventProto_PageClassification OmniboxEventProto::current_page_classification() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.current_page_classification)
    return static_cast<::metrics::OmniboxEventProto_PageClassification>(current_page_classification_);
}
void OmniboxEventProto::set_current_page_classification(::metrics::OmniboxEventProto_PageClassification value)
{
    assert(::metrics::OmniboxEventProto_PageClassification_IsValid(value));
    set_has_current_page_classification();
    current_page_classification_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.current_page_classification)
}

// optional .metrics.OmniboxInputType.Type input_type = 8;
bool OmniboxEventProto::has_input_type() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void OmniboxEventProto::set_has_input_type()
{
    _has_bits_[0] |= 0x00002000u;
}
void OmniboxEventProto::clear_has_input_type()
{
    _has_bits_[0] &= ~0x00002000u;
}
void OmniboxEventProto::clear_input_type()
{
    input_type_ = 0;
    clear_has_input_type();
}
::metrics::OmniboxInputType::Type OmniboxEventProto::input_type() const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.input_type)
    return static_cast<::metrics::OmniboxInputType::Type>(input_type_);
}
void OmniboxEventProto::set_input_type(::metrics::OmniboxInputType::Type value)
{
    assert(::metrics::OmniboxInputType::Type_IsValid(value));
    set_has_input_type();
    input_type_ = value;
    // @@protoc_insertion_point(field_set:metrics.OmniboxEventProto.input_type)
}

// repeated .metrics.OmniboxEventProto.Suggestion suggestion = 9;
int OmniboxEventProto::suggestion_size() const
{
    return suggestion_.size();
}
void OmniboxEventProto::clear_suggestion()
{
    suggestion_.Clear();
}
const ::metrics::OmniboxEventProto_Suggestion& OmniboxEventProto::suggestion(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.suggestion)
    return suggestion_.Get(index);
}
::metrics::OmniboxEventProto_Suggestion* OmniboxEventProto::mutable_suggestion(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.OmniboxEventProto.suggestion)
    return suggestion_.Mutable(index);
}
::metrics::OmniboxEventProto_Suggestion* OmniboxEventProto::add_suggestion()
{
    // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.suggestion)
    return suggestion_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::OmniboxEventProto_Suggestion>*
OmniboxEventProto::mutable_suggestion()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.suggestion)
    return &suggestion_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::OmniboxEventProto_Suggestion>&
OmniboxEventProto::suggestion() const
{
    // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.suggestion)
    return suggestion_;
}

// repeated .metrics.OmniboxEventProto.ProviderInfo provider_info = 12;
int OmniboxEventProto::provider_info_size() const
{
    return provider_info_.size();
}
void OmniboxEventProto::clear_provider_info()
{
    provider_info_.Clear();
}
const ::metrics::OmniboxEventProto_ProviderInfo& OmniboxEventProto::provider_info(int index) const
{
    // @@protoc_insertion_point(field_get:metrics.OmniboxEventProto.provider_info)
    return provider_info_.Get(index);
}
::metrics::OmniboxEventProto_ProviderInfo* OmniboxEventProto::mutable_provider_info(int index)
{
    // @@protoc_insertion_point(field_mutable:metrics.OmniboxEventProto.provider_info)
    return provider_info_.Mutable(index);
}
::metrics::OmniboxEventProto_ProviderInfo* OmniboxEventProto::add_provider_info()
{
    // @@protoc_insertion_point(field_add:metrics.OmniboxEventProto.provider_info)
    return provider_info_.Add();
}
::google::protobuf::RepeatedPtrField<::metrics::OmniboxEventProto_ProviderInfo>*
OmniboxEventProto::mutable_provider_info()
{
    // @@protoc_insertion_point(field_mutable_list:metrics.OmniboxEventProto.provider_info)
    return &provider_info_;
}
const ::google::protobuf::RepeatedPtrField<::metrics::OmniboxEventProto_ProviderInfo>&
OmniboxEventProto::provider_info() const
{
    // @@protoc_insertion_point(field_list:metrics.OmniboxEventProto.provider_info)
    return provider_info_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace metrics

// @@protoc_insertion_point(global_scope)
