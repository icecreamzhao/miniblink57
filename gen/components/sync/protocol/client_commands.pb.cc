// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_client_5fcommands_2eproto()
{
    delete CustomNudgeDelay::default_instance_;
    delete ClientCommand::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_client_5fcommands_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_client_5fcommands_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    CustomNudgeDelay::default_instance_ = new CustomNudgeDelay();
    ClientCommand::default_instance_ = new ClientCommand();
    CustomNudgeDelay::default_instance_->InitAsDefaultInstance();
    ClientCommand::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fcommands_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_client_5fcommands_2eproto_once_);
void protobuf_AddDesc_client_5fcommands_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_client_5fcommands_2eproto_once_,
        &protobuf_AddDesc_client_5fcommands_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fcommands_2eproto {
    StaticDescriptorInitializer_client_5fcommands_2eproto()
    {
        protobuf_AddDesc_client_5fcommands_2eproto();
    }
} static_descriptor_initializer_client_5fcommands_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForCustomNudgeDelay(
    CustomNudgeDelay* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomNudgeDelay::kDatatypeIdFieldNumber;
const int CustomNudgeDelay::kDelayMsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomNudgeDelay::CustomNudgeDelay()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.CustomNudgeDelay)
}

void CustomNudgeDelay::InitAsDefaultInstance()
{
}

CustomNudgeDelay::CustomNudgeDelay(const CustomNudgeDelay& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.CustomNudgeDelay)
}

void CustomNudgeDelay::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    datatype_id_ = 0;
    delay_ms_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomNudgeDelay::~CustomNudgeDelay()
{
    // @@protoc_insertion_point(destructor:sync_pb.CustomNudgeDelay)
    SharedDtor();
}

void CustomNudgeDelay::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void CustomNudgeDelay::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CustomNudgeDelay& CustomNudgeDelay::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_client_5fcommands_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_client_5fcommands_2eproto();
#endif
    return *default_instance_;
}

CustomNudgeDelay* CustomNudgeDelay::default_instance_ = NULL;

CustomNudgeDelay* CustomNudgeDelay::New(::google::protobuf::Arena* arena) const
{
    CustomNudgeDelay* n = new CustomNudgeDelay;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CustomNudgeDelay::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.CustomNudgeDelay)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                      \
    _Pragma("clang diagnostic push")                                                                       \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(CustomNudgeDelay, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<CustomNudgeDelay*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(datatype_id_, delay_ms_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CustomNudgeDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCustomNudgeDelay, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.CustomNudgeDelay)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 datatype_id = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &datatype_id_)));
                set_has_datatype_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_delay_ms;
            break;
        }

        // optional int32 delay_ms = 2;
        case 2: {
            if (tag == 16) {
            parse_delay_ms:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &delay_ms_)));
                set_has_delay_ms();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.CustomNudgeDelay)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.CustomNudgeDelay)
    return false;
#undef DO_
}

void CustomNudgeDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.CustomNudgeDelay)
    // optional int32 datatype_id = 1;
    if (has_datatype_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datatype_id(), output);
    }

    // optional int32 delay_ms = 2;
    if (has_delay_ms()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay_ms(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.CustomNudgeDelay)
}

int CustomNudgeDelay::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.CustomNudgeDelay)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional int32 datatype_id = 1;
        if (has_datatype_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->datatype_id());
        }

        // optional int32 delay_ms = 2;
        if (has_delay_ms()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->delay_ms());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CustomNudgeDelay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CustomNudgeDelay*>(&from));
}

void CustomNudgeDelay::MergeFrom(const CustomNudgeDelay& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.CustomNudgeDelay)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_datatype_id()) {
            set_datatype_id(from.datatype_id());
        }
        if (from.has_delay_ms()) {
            set_delay_ms(from.delay_ms());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CustomNudgeDelay::CopyFrom(const CustomNudgeDelay& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.CustomNudgeDelay)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CustomNudgeDelay::IsInitialized() const
{

    return true;
}

void CustomNudgeDelay::Swap(CustomNudgeDelay* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CustomNudgeDelay::InternalSwap(CustomNudgeDelay* other)
{
    std::swap(datatype_id_, other->datatype_id_);
    std::swap(delay_ms_, other->delay_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CustomNudgeDelay::GetTypeName() const
{
    return "sync_pb.CustomNudgeDelay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomNudgeDelay

// optional int32 datatype_id = 1;
bool CustomNudgeDelay::has_datatype_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomNudgeDelay::set_has_datatype_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void CustomNudgeDelay::clear_has_datatype_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void CustomNudgeDelay::clear_datatype_id()
{
    datatype_id_ = 0;
    clear_has_datatype_id();
}
::google::protobuf::int32 CustomNudgeDelay::datatype_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.CustomNudgeDelay.datatype_id)
    return datatype_id_;
}
void CustomNudgeDelay::set_datatype_id(::google::protobuf::int32 value)
{
    set_has_datatype_id();
    datatype_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.CustomNudgeDelay.datatype_id)
}

// optional int32 delay_ms = 2;
bool CustomNudgeDelay::has_delay_ms() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void CustomNudgeDelay::set_has_delay_ms()
{
    _has_bits_[0] |= 0x00000002u;
}
void CustomNudgeDelay::clear_has_delay_ms()
{
    _has_bits_[0] &= ~0x00000002u;
}
void CustomNudgeDelay::clear_delay_ms()
{
    delay_ms_ = 0;
    clear_has_delay_ms();
}
::google::protobuf::int32 CustomNudgeDelay::delay_ms() const
{
    // @@protoc_insertion_point(field_get:sync_pb.CustomNudgeDelay.delay_ms)
    return delay_ms_;
}
void CustomNudgeDelay::set_delay_ms(::google::protobuf::int32 value)
{
    set_has_delay_ms();
    delay_ms_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.CustomNudgeDelay.delay_ms)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForClientCommand(
    ClientCommand* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCommand::kSetSyncPollIntervalFieldNumber;
const int ClientCommand::kSetSyncLongPollIntervalFieldNumber;
const int ClientCommand::kMaxCommitBatchSizeFieldNumber;
const int ClientCommand::kSessionsCommitDelaySecondsFieldNumber;
const int ClientCommand::kThrottleDelaySecondsFieldNumber;
const int ClientCommand::kClientInvalidationHintBufferSizeFieldNumber;
const int ClientCommand::kGuRetryDelaySecondsFieldNumber;
const int ClientCommand::kCustomNudgeDelaysFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCommand::ClientCommand()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ClientCommand)
}

void ClientCommand::InitAsDefaultInstance()
{
}

ClientCommand::ClientCommand(const ClientCommand& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ClientCommand)
}

void ClientCommand::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    set_sync_poll_interval_ = 0;
    set_sync_long_poll_interval_ = 0;
    max_commit_batch_size_ = 0;
    sessions_commit_delay_seconds_ = 0;
    throttle_delay_seconds_ = 0;
    client_invalidation_hint_buffer_size_ = 0;
    gu_retry_delay_seconds_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCommand::~ClientCommand()
{
    // @@protoc_insertion_point(destructor:sync_pb.ClientCommand)
    SharedDtor();
}

void ClientCommand::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ClientCommand::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientCommand& ClientCommand::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_client_5fcommands_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_client_5fcommands_2eproto();
#endif
    return *default_instance_;
}

ClientCommand* ClientCommand::default_instance_ = NULL;

ClientCommand* ClientCommand::New(::google::protobuf::Arena* arena) const
{
    ClientCommand* n = new ClientCommand;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ClientCommand::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.ClientCommand)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                   \
    _Pragma("clang diagnostic push")                                                                    \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(ClientCommand, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<ClientCommand*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 127u) {
        ZR_(set_sync_poll_interval_, client_invalidation_hint_buffer_size_);
        gu_retry_delay_seconds_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    custom_nudge_delays_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForClientCommand, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ClientCommand)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 set_sync_poll_interval = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &set_sync_poll_interval_)));
                set_has_set_sync_poll_interval();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_set_sync_long_poll_interval;
            break;
        }

        // optional int32 set_sync_long_poll_interval = 2;
        case 2: {
            if (tag == 16) {
            parse_set_sync_long_poll_interval:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &set_sync_long_poll_interval_)));
                set_has_set_sync_long_poll_interval();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_max_commit_batch_size;
            break;
        }

        // optional int32 max_commit_batch_size = 3;
        case 3: {
            if (tag == 24) {
            parse_max_commit_batch_size:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &max_commit_batch_size_)));
                set_has_max_commit_batch_size();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_sessions_commit_delay_seconds;
            break;
        }

        // optional int32 sessions_commit_delay_seconds = 4;
        case 4: {
            if (tag == 32) {
            parse_sessions_commit_delay_seconds:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &sessions_commit_delay_seconds_)));
                set_has_sessions_commit_delay_seconds();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_throttle_delay_seconds;
            break;
        }

        // optional int32 throttle_delay_seconds = 5;
        case 5: {
            if (tag == 40) {
            parse_throttle_delay_seconds:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &throttle_delay_seconds_)));
                set_has_throttle_delay_seconds();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_client_invalidation_hint_buffer_size;
            break;
        }

        // optional int32 client_invalidation_hint_buffer_size = 6;
        case 6: {
            if (tag == 48) {
            parse_client_invalidation_hint_buffer_size:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &client_invalidation_hint_buffer_size_)));
                set_has_client_invalidation_hint_buffer_size();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_gu_retry_delay_seconds;
            break;
        }

        // optional int32 gu_retry_delay_seconds = 7;
        case 7: {
            if (tag == 56) {
            parse_gu_retry_delay_seconds:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &gu_retry_delay_seconds_)));
                set_has_gu_retry_delay_seconds();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_custom_nudge_delays;
            break;
        }

        // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
        case 8: {
            if (tag == 66) {
            parse_custom_nudge_delays:
                DO_(input->IncrementRecursionDepth());
            parse_loop_custom_nudge_delays:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_custom_nudge_delays()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_loop_custom_nudge_delays;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ClientCommand)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ClientCommand)
    return false;
#undef DO_
}

void ClientCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ClientCommand)
    // optional int32 set_sync_poll_interval = 1;
    if (has_set_sync_poll_interval()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_sync_poll_interval(), output);
    }

    // optional int32 set_sync_long_poll_interval = 2;
    if (has_set_sync_long_poll_interval()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->set_sync_long_poll_interval(), output);
    }

    // optional int32 max_commit_batch_size = 3;
    if (has_max_commit_batch_size()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_commit_batch_size(), output);
    }

    // optional int32 sessions_commit_delay_seconds = 4;
    if (has_sessions_commit_delay_seconds()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessions_commit_delay_seconds(), output);
    }

    // optional int32 throttle_delay_seconds = 5;
    if (has_throttle_delay_seconds()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->throttle_delay_seconds(), output);
    }

    // optional int32 client_invalidation_hint_buffer_size = 6;
    if (has_client_invalidation_hint_buffer_size()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->client_invalidation_hint_buffer_size(), output);
    }

    // optional int32 gu_retry_delay_seconds = 7;
    if (has_gu_retry_delay_seconds()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gu_retry_delay_seconds(), output);
    }

    // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
    for (unsigned int i = 0, n = this->custom_nudge_delays_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, this->custom_nudge_delays(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ClientCommand)
}

int ClientCommand::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ClientCommand)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 127u) {
        // optional int32 set_sync_poll_interval = 1;
        if (has_set_sync_poll_interval()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->set_sync_poll_interval());
        }

        // optional int32 set_sync_long_poll_interval = 2;
        if (has_set_sync_long_poll_interval()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->set_sync_long_poll_interval());
        }

        // optional int32 max_commit_batch_size = 3;
        if (has_max_commit_batch_size()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->max_commit_batch_size());
        }

        // optional int32 sessions_commit_delay_seconds = 4;
        if (has_sessions_commit_delay_seconds()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->sessions_commit_delay_seconds());
        }

        // optional int32 throttle_delay_seconds = 5;
        if (has_throttle_delay_seconds()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->throttle_delay_seconds());
        }

        // optional int32 client_invalidation_hint_buffer_size = 6;
        if (has_client_invalidation_hint_buffer_size()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->client_invalidation_hint_buffer_size());
        }

        // optional int32 gu_retry_delay_seconds = 7;
        if (has_gu_retry_delay_seconds()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->gu_retry_delay_seconds());
        }
    }
    // repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
    total_size += 1 * this->custom_nudge_delays_size();
    for (int i = 0; i < this->custom_nudge_delays_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->custom_nudge_delays(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ClientCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ClientCommand*>(&from));
}

void ClientCommand::MergeFrom(const ClientCommand& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ClientCommand)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    custom_nudge_delays_.MergeFrom(from.custom_nudge_delays_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_set_sync_poll_interval()) {
            set_set_sync_poll_interval(from.set_sync_poll_interval());
        }
        if (from.has_set_sync_long_poll_interval()) {
            set_set_sync_long_poll_interval(from.set_sync_long_poll_interval());
        }
        if (from.has_max_commit_batch_size()) {
            set_max_commit_batch_size(from.max_commit_batch_size());
        }
        if (from.has_sessions_commit_delay_seconds()) {
            set_sessions_commit_delay_seconds(from.sessions_commit_delay_seconds());
        }
        if (from.has_throttle_delay_seconds()) {
            set_throttle_delay_seconds(from.throttle_delay_seconds());
        }
        if (from.has_client_invalidation_hint_buffer_size()) {
            set_client_invalidation_hint_buffer_size(from.client_invalidation_hint_buffer_size());
        }
        if (from.has_gu_retry_delay_seconds()) {
            set_gu_retry_delay_seconds(from.gu_retry_delay_seconds());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ClientCommand::CopyFrom(const ClientCommand& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ClientCommand)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ClientCommand::IsInitialized() const
{

    return true;
}

void ClientCommand::Swap(ClientCommand* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ClientCommand::InternalSwap(ClientCommand* other)
{
    std::swap(set_sync_poll_interval_, other->set_sync_poll_interval_);
    std::swap(set_sync_long_poll_interval_, other->set_sync_long_poll_interval_);
    std::swap(max_commit_batch_size_, other->max_commit_batch_size_);
    std::swap(sessions_commit_delay_seconds_, other->sessions_commit_delay_seconds_);
    std::swap(throttle_delay_seconds_, other->throttle_delay_seconds_);
    std::swap(client_invalidation_hint_buffer_size_, other->client_invalidation_hint_buffer_size_);
    std::swap(gu_retry_delay_seconds_, other->gu_retry_delay_seconds_);
    custom_nudge_delays_.UnsafeArenaSwap(&other->custom_nudge_delays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientCommand::GetTypeName() const
{
    return "sync_pb.ClientCommand";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCommand

// optional int32 set_sync_poll_interval = 1;
bool ClientCommand::has_set_sync_poll_interval() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCommand::set_has_set_sync_poll_interval()
{
    _has_bits_[0] |= 0x00000001u;
}
void ClientCommand::clear_has_set_sync_poll_interval()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ClientCommand::clear_set_sync_poll_interval()
{
    set_sync_poll_interval_ = 0;
    clear_has_set_sync_poll_interval();
}
::google::protobuf::int32 ClientCommand::set_sync_poll_interval() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.set_sync_poll_interval)
    return set_sync_poll_interval_;
}
void ClientCommand::set_set_sync_poll_interval(::google::protobuf::int32 value)
{
    set_has_set_sync_poll_interval();
    set_sync_poll_interval_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.set_sync_poll_interval)
}

// optional int32 set_sync_long_poll_interval = 2;
bool ClientCommand::has_set_sync_long_poll_interval() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientCommand::set_has_set_sync_long_poll_interval()
{
    _has_bits_[0] |= 0x00000002u;
}
void ClientCommand::clear_has_set_sync_long_poll_interval()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ClientCommand::clear_set_sync_long_poll_interval()
{
    set_sync_long_poll_interval_ = 0;
    clear_has_set_sync_long_poll_interval();
}
::google::protobuf::int32 ClientCommand::set_sync_long_poll_interval() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.set_sync_long_poll_interval)
    return set_sync_long_poll_interval_;
}
void ClientCommand::set_set_sync_long_poll_interval(::google::protobuf::int32 value)
{
    set_has_set_sync_long_poll_interval();
    set_sync_long_poll_interval_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.set_sync_long_poll_interval)
}

// optional int32 max_commit_batch_size = 3;
bool ClientCommand::has_max_commit_batch_size() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientCommand::set_has_max_commit_batch_size()
{
    _has_bits_[0] |= 0x00000004u;
}
void ClientCommand::clear_has_max_commit_batch_size()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ClientCommand::clear_max_commit_batch_size()
{
    max_commit_batch_size_ = 0;
    clear_has_max_commit_batch_size();
}
::google::protobuf::int32 ClientCommand::max_commit_batch_size() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.max_commit_batch_size)
    return max_commit_batch_size_;
}
void ClientCommand::set_max_commit_batch_size(::google::protobuf::int32 value)
{
    set_has_max_commit_batch_size();
    max_commit_batch_size_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.max_commit_batch_size)
}

// optional int32 sessions_commit_delay_seconds = 4;
bool ClientCommand::has_sessions_commit_delay_seconds() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientCommand::set_has_sessions_commit_delay_seconds()
{
    _has_bits_[0] |= 0x00000008u;
}
void ClientCommand::clear_has_sessions_commit_delay_seconds()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ClientCommand::clear_sessions_commit_delay_seconds()
{
    sessions_commit_delay_seconds_ = 0;
    clear_has_sessions_commit_delay_seconds();
}
::google::protobuf::int32 ClientCommand::sessions_commit_delay_seconds() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.sessions_commit_delay_seconds)
    return sessions_commit_delay_seconds_;
}
void ClientCommand::set_sessions_commit_delay_seconds(::google::protobuf::int32 value)
{
    set_has_sessions_commit_delay_seconds();
    sessions_commit_delay_seconds_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.sessions_commit_delay_seconds)
}

// optional int32 throttle_delay_seconds = 5;
bool ClientCommand::has_throttle_delay_seconds() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientCommand::set_has_throttle_delay_seconds()
{
    _has_bits_[0] |= 0x00000010u;
}
void ClientCommand::clear_has_throttle_delay_seconds()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ClientCommand::clear_throttle_delay_seconds()
{
    throttle_delay_seconds_ = 0;
    clear_has_throttle_delay_seconds();
}
::google::protobuf::int32 ClientCommand::throttle_delay_seconds() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.throttle_delay_seconds)
    return throttle_delay_seconds_;
}
void ClientCommand::set_throttle_delay_seconds(::google::protobuf::int32 value)
{
    set_has_throttle_delay_seconds();
    throttle_delay_seconds_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.throttle_delay_seconds)
}

// optional int32 client_invalidation_hint_buffer_size = 6;
bool ClientCommand::has_client_invalidation_hint_buffer_size() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientCommand::set_has_client_invalidation_hint_buffer_size()
{
    _has_bits_[0] |= 0x00000020u;
}
void ClientCommand::clear_has_client_invalidation_hint_buffer_size()
{
    _has_bits_[0] &= ~0x00000020u;
}
void ClientCommand::clear_client_invalidation_hint_buffer_size()
{
    client_invalidation_hint_buffer_size_ = 0;
    clear_has_client_invalidation_hint_buffer_size();
}
::google::protobuf::int32 ClientCommand::client_invalidation_hint_buffer_size() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.client_invalidation_hint_buffer_size)
    return client_invalidation_hint_buffer_size_;
}
void ClientCommand::set_client_invalidation_hint_buffer_size(::google::protobuf::int32 value)
{
    set_has_client_invalidation_hint_buffer_size();
    client_invalidation_hint_buffer_size_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.client_invalidation_hint_buffer_size)
}

// optional int32 gu_retry_delay_seconds = 7;
bool ClientCommand::has_gu_retry_delay_seconds() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientCommand::set_has_gu_retry_delay_seconds()
{
    _has_bits_[0] |= 0x00000040u;
}
void ClientCommand::clear_has_gu_retry_delay_seconds()
{
    _has_bits_[0] &= ~0x00000040u;
}
void ClientCommand::clear_gu_retry_delay_seconds()
{
    gu_retry_delay_seconds_ = 0;
    clear_has_gu_retry_delay_seconds();
}
::google::protobuf::int32 ClientCommand::gu_retry_delay_seconds() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.gu_retry_delay_seconds)
    return gu_retry_delay_seconds_;
}
void ClientCommand::set_gu_retry_delay_seconds(::google::protobuf::int32 value)
{
    set_has_gu_retry_delay_seconds();
    gu_retry_delay_seconds_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ClientCommand.gu_retry_delay_seconds)
}

// repeated .sync_pb.CustomNudgeDelay custom_nudge_delays = 8;
int ClientCommand::custom_nudge_delays_size() const
{
    return custom_nudge_delays_.size();
}
void ClientCommand::clear_custom_nudge_delays()
{
    custom_nudge_delays_.Clear();
}
const ::sync_pb::CustomNudgeDelay& ClientCommand::custom_nudge_delays(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.ClientCommand.custom_nudge_delays)
    return custom_nudge_delays_.Get(index);
}
::sync_pb::CustomNudgeDelay* ClientCommand::mutable_custom_nudge_delays(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.ClientCommand.custom_nudge_delays)
    return custom_nudge_delays_.Mutable(index);
}
::sync_pb::CustomNudgeDelay* ClientCommand::add_custom_nudge_delays()
{
    // @@protoc_insertion_point(field_add:sync_pb.ClientCommand.custom_nudge_delays)
    return custom_nudge_delays_.Add();
}
::google::protobuf::RepeatedPtrField<::sync_pb::CustomNudgeDelay>*
ClientCommand::mutable_custom_nudge_delays()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.ClientCommand.custom_nudge_delays)
    return &custom_nudge_delays_;
}
const ::google::protobuf::RepeatedPtrField<::sync_pb::CustomNudgeDelay>&
ClientCommand::custom_nudge_delays() const
{
    // @@protoc_insertion_point(field_list:sync_pb.ClientCommand.custom_nudge_delays)
    return custom_nudge_delays_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
