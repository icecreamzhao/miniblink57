// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "password_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_password_5fspecifics_2eproto()
{
    delete PasswordSpecificsData::default_instance_;
    delete PasswordSpecificsMetadata::default_instance_;
    delete PasswordSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_password_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_password_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ::sync_pb::protobuf_AddDesc_encryption_2eproto();
    PasswordSpecificsData::default_instance_ = new PasswordSpecificsData();
    PasswordSpecificsMetadata::default_instance_ = new PasswordSpecificsMetadata();
    PasswordSpecifics::default_instance_ = new PasswordSpecifics();
    PasswordSpecificsData::default_instance_->InitAsDefaultInstance();
    PasswordSpecificsMetadata::default_instance_->InitAsDefaultInstance();
    PasswordSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_password_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_password_5fspecifics_2eproto_once_);
void protobuf_AddDesc_password_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_password_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_password_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_password_5fspecifics_2eproto {
    StaticDescriptorInitializer_password_5fspecifics_2eproto()
    {
        protobuf_AddDesc_password_5fspecifics_2eproto();
    }
} static_descriptor_initializer_password_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForPasswordSpecificsData(
    PasswordSpecificsData* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordSpecificsData::kSchemeFieldNumber;
const int PasswordSpecificsData::kSignonRealmFieldNumber;
const int PasswordSpecificsData::kOriginFieldNumber;
const int PasswordSpecificsData::kActionFieldNumber;
const int PasswordSpecificsData::kUsernameElementFieldNumber;
const int PasswordSpecificsData::kUsernameValueFieldNumber;
const int PasswordSpecificsData::kPasswordElementFieldNumber;
const int PasswordSpecificsData::kPasswordValueFieldNumber;
const int PasswordSpecificsData::kSslValidFieldNumber;
const int PasswordSpecificsData::kPreferredFieldNumber;
const int PasswordSpecificsData::kDateCreatedFieldNumber;
const int PasswordSpecificsData::kBlacklistedFieldNumber;
const int PasswordSpecificsData::kTypeFieldNumber;
const int PasswordSpecificsData::kTimesUsedFieldNumber;
const int PasswordSpecificsData::kDisplayNameFieldNumber;
const int PasswordSpecificsData::kAvatarUrlFieldNumber;
const int PasswordSpecificsData::kFederationUrlFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordSpecificsData::PasswordSpecificsData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.PasswordSpecificsData)
}

void PasswordSpecificsData::InitAsDefaultInstance()
{
}

PasswordSpecificsData::PasswordSpecificsData(const PasswordSpecificsData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.PasswordSpecificsData)
}

void PasswordSpecificsData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    scheme_ = 0;
    signon_realm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    username_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    username_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ssl_valid_ = false;
    preferred_ = false;
    date_created_ = GOOGLE_LONGLONG(0);
    blacklisted_ = false;
    type_ = 0;
    times_used_ = 0;
    display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    federation_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasswordSpecificsData::~PasswordSpecificsData()
{
    // @@protoc_insertion_point(destructor:sync_pb.PasswordSpecificsData)
    SharedDtor();
}

void PasswordSpecificsData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signon_realm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    username_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    username_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    federation_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PasswordSpecificsData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecificsData& PasswordSpecificsData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_password_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

PasswordSpecificsData* PasswordSpecificsData::default_instance_ = NULL;

PasswordSpecificsData* PasswordSpecificsData::New(::google::protobuf::Arena* arena) const
{
    PasswordSpecificsData* n = new PasswordSpecificsData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PasswordSpecificsData::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.PasswordSpecificsData)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                           \
    _Pragma("clang diagnostic push")                                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PasswordSpecificsData, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PasswordSpecificsData*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        scheme_ = 0;
        if (has_signon_realm()) {
            signon_realm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_origin()) {
            origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_action()) {
            action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_username_element()) {
            username_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_username_value()) {
            username_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_password_element()) {
            password_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_password_value()) {
            password_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        ZR_(ssl_valid_, times_used_);
        if (has_display_name()) {
            display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_avatar_url()) {
            avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (has_federation_url()) {
        federation_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PasswordSpecificsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPasswordSpecificsData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.PasswordSpecificsData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 scheme = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &scheme_)));
                set_has_scheme();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_signon_realm;
            break;
        }

        // optional string signon_realm = 2;
        case 2: {
            if (tag == 18) {
            parse_signon_realm:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_signon_realm()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_origin;
            break;
        }

        // optional string origin = 3;
        case 3: {
            if (tag == 26) {
            parse_origin:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_origin()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_action;
            break;
        }

        // optional string action = 4;
        case 4: {
            if (tag == 34) {
            parse_action:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_action()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_username_element;
            break;
        }

        // optional string username_element = 5;
        case 5: {
            if (tag == 42) {
            parse_username_element:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_username_element()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_username_value;
            break;
        }

        // optional string username_value = 6;
        case 6: {
            if (tag == 50) {
            parse_username_value:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_username_value()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_password_element;
            break;
        }

        // optional string password_element = 7;
        case 7: {
            if (tag == 58) {
            parse_password_element:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_password_element()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_password_value;
            break;
        }

        // optional string password_value = 8;
        case 8: {
            if (tag == 66) {
            parse_password_value:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_password_value()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_ssl_valid;
            break;
        }

        // optional bool ssl_valid = 9;
        case 9: {
            if (tag == 72) {
            parse_ssl_valid:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &ssl_valid_)));
                set_has_ssl_valid();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(80))
                goto parse_preferred;
            break;
        }

        // optional bool preferred = 10;
        case 10: {
            if (tag == 80) {
            parse_preferred:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &preferred_)));
                set_has_preferred();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(88))
                goto parse_date_created;
            break;
        }

        // optional int64 date_created = 11;
        case 11: {
            if (tag == 88) {
            parse_date_created:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &date_created_)));
                set_has_date_created();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_blacklisted;
            break;
        }

        // optional bool blacklisted = 12;
        case 12: {
            if (tag == 96) {
            parse_blacklisted:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &blacklisted_)));
                set_has_blacklisted();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(104))
                goto parse_type;
            break;
        }

        // optional int32 type = 13;
        case 13: {
            if (tag == 104) {
            parse_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &type_)));
                set_has_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(112))
                goto parse_times_used;
            break;
        }

        // optional int32 times_used = 14;
        case 14: {
            if (tag == 112) {
            parse_times_used:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &times_used_)));
                set_has_times_used();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_display_name;
            break;
        }

        // optional string display_name = 15;
        case 15: {
            if (tag == 122) {
            parse_display_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_display_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(130))
                goto parse_avatar_url;
            break;
        }

        // optional string avatar_url = 16;
        case 16: {
            if (tag == 130) {
            parse_avatar_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_avatar_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(138))
                goto parse_federation_url;
            break;
        }

        // optional string federation_url = 17;
        case 17: {
            if (tag == 138) {
            parse_federation_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_federation_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.PasswordSpecificsData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.PasswordSpecificsData)
    return false;
#undef DO_
}

void PasswordSpecificsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.PasswordSpecificsData)
    // optional int32 scheme = 1;
    if (has_scheme()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scheme(), output);
    }

    // optional string signon_realm = 2;
    if (has_signon_realm()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->signon_realm(), output);
    }

    // optional string origin = 3;
    if (has_origin()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->origin(), output);
    }

    // optional string action = 4;
    if (has_action()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->action(), output);
    }

    // optional string username_element = 5;
    if (has_username_element()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->username_element(), output);
    }

    // optional string username_value = 6;
    if (has_username_value()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            6, this->username_value(), output);
    }

    // optional string password_element = 7;
    if (has_password_element()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            7, this->password_element(), output);
    }

    // optional string password_value = 8;
    if (has_password_value()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->password_value(), output);
    }

    // optional bool ssl_valid = 9;
    if (has_ssl_valid()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ssl_valid(), output);
    }

    // optional bool preferred = 10;
    if (has_preferred()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preferred(), output);
    }

    // optional int64 date_created = 11;
    if (has_date_created()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->date_created(), output);
    }

    // optional bool blacklisted = 12;
    if (has_blacklisted()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->blacklisted(), output);
    }

    // optional int32 type = 13;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->type(), output);
    }

    // optional int32 times_used = 14;
    if (has_times_used()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->times_used(), output);
    }

    // optional string display_name = 15;
    if (has_display_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            15, this->display_name(), output);
    }

    // optional string avatar_url = 16;
    if (has_avatar_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            16, this->avatar_url(), output);
    }

    // optional string federation_url = 17;
    if (has_federation_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            17, this->federation_url(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.PasswordSpecificsData)
}

int PasswordSpecificsData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.PasswordSpecificsData)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional int32 scheme = 1;
        if (has_scheme()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->scheme());
        }

        // optional string signon_realm = 2;
        if (has_signon_realm()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->signon_realm());
        }

        // optional string origin = 3;
        if (has_origin()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->origin());
        }

        // optional string action = 4;
        if (has_action()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->action());
        }

        // optional string username_element = 5;
        if (has_username_element()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->username_element());
        }

        // optional string username_value = 6;
        if (has_username_value()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->username_value());
        }

        // optional string password_element = 7;
        if (has_password_element()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->password_element());
        }

        // optional string password_value = 8;
        if (has_password_value()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->password_value());
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        // optional bool ssl_valid = 9;
        if (has_ssl_valid()) {
            total_size += 1 + 1;
        }

        // optional bool preferred = 10;
        if (has_preferred()) {
            total_size += 1 + 1;
        }

        // optional int64 date_created = 11;
        if (has_date_created()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->date_created());
        }

        // optional bool blacklisted = 12;
        if (has_blacklisted()) {
            total_size += 1 + 1;
        }

        // optional int32 type = 13;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->type());
        }

        // optional int32 times_used = 14;
        if (has_times_used()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->times_used());
        }

        // optional string display_name = 15;
        if (has_display_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->display_name());
        }

        // optional string avatar_url = 16;
        if (has_avatar_url()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->avatar_url());
        }
    }
    // optional string federation_url = 17;
    if (has_federation_url()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->federation_url());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PasswordSpecificsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PasswordSpecificsData*>(&from));
}

void PasswordSpecificsData::MergeFrom(const PasswordSpecificsData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PasswordSpecificsData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_scheme()) {
            set_scheme(from.scheme());
        }
        if (from.has_signon_realm()) {
            set_has_signon_realm();
            signon_realm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signon_realm_);
        }
        if (from.has_origin()) {
            set_has_origin();
            origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
        }
        if (from.has_action()) {
            set_has_action();
            action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
        }
        if (from.has_username_element()) {
            set_has_username_element();
            username_element_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_element_);
        }
        if (from.has_username_value()) {
            set_has_username_value();
            username_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_value_);
        }
        if (from.has_password_element()) {
            set_has_password_element();
            password_element_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_element_);
        }
        if (from.has_password_value()) {
            set_has_password_value();
            password_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_value_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_ssl_valid()) {
            set_ssl_valid(from.ssl_valid());
        }
        if (from.has_preferred()) {
            set_preferred(from.preferred());
        }
        if (from.has_date_created()) {
            set_date_created(from.date_created());
        }
        if (from.has_blacklisted()) {
            set_blacklisted(from.blacklisted());
        }
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_times_used()) {
            set_times_used(from.times_used());
        }
        if (from.has_display_name()) {
            set_has_display_name();
            display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
        }
        if (from.has_avatar_url()) {
            set_has_avatar_url();
            avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_federation_url()) {
            set_has_federation_url();
            federation_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.federation_url_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PasswordSpecificsData::CopyFrom(const PasswordSpecificsData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PasswordSpecificsData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PasswordSpecificsData::IsInitialized() const
{

    return true;
}

void PasswordSpecificsData::Swap(PasswordSpecificsData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PasswordSpecificsData::InternalSwap(PasswordSpecificsData* other)
{
    std::swap(scheme_, other->scheme_);
    signon_realm_.Swap(&other->signon_realm_);
    origin_.Swap(&other->origin_);
    action_.Swap(&other->action_);
    username_element_.Swap(&other->username_element_);
    username_value_.Swap(&other->username_value_);
    password_element_.Swap(&other->password_element_);
    password_value_.Swap(&other->password_value_);
    std::swap(ssl_valid_, other->ssl_valid_);
    std::swap(preferred_, other->preferred_);
    std::swap(date_created_, other->date_created_);
    std::swap(blacklisted_, other->blacklisted_);
    std::swap(type_, other->type_);
    std::swap(times_used_, other->times_used_);
    display_name_.Swap(&other->display_name_);
    avatar_url_.Swap(&other->avatar_url_);
    federation_url_.Swap(&other->federation_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PasswordSpecificsData::GetTypeName() const
{
    return "sync_pb.PasswordSpecificsData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecificsData

// optional int32 scheme = 1;
bool PasswordSpecificsData::has_scheme() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordSpecificsData::set_has_scheme()
{
    _has_bits_[0] |= 0x00000001u;
}
void PasswordSpecificsData::clear_has_scheme()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PasswordSpecificsData::clear_scheme()
{
    scheme_ = 0;
    clear_has_scheme();
}
::google::protobuf::int32 PasswordSpecificsData::scheme() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.scheme)
    return scheme_;
}
void PasswordSpecificsData::set_scheme(::google::protobuf::int32 value)
{
    set_has_scheme();
    scheme_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.scheme)
}

// optional string signon_realm = 2;
bool PasswordSpecificsData::has_signon_realm() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PasswordSpecificsData::set_has_signon_realm()
{
    _has_bits_[0] |= 0x00000002u;
}
void PasswordSpecificsData::clear_has_signon_realm()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PasswordSpecificsData::clear_signon_realm()
{
    signon_realm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signon_realm();
}
const ::std::string& PasswordSpecificsData::signon_realm() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.signon_realm)
    return signon_realm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_signon_realm(const ::std::string& value)
{
    set_has_signon_realm();
    signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.signon_realm)
}
void PasswordSpecificsData::set_signon_realm(const char* value)
{
    set_has_signon_realm();
    signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.signon_realm)
}
void PasswordSpecificsData::set_signon_realm(const char* value, size_t size)
{
    set_has_signon_realm();
    signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.signon_realm)
}
::std::string* PasswordSpecificsData::mutable_signon_realm()
{
    set_has_signon_realm();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.signon_realm)
    return signon_realm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_signon_realm()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.signon_realm)
    clear_has_signon_realm();
    return signon_realm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_signon_realm(::std::string* signon_realm)
{
    if (signon_realm != NULL) {
        set_has_signon_realm();
    } else {
        clear_has_signon_realm();
    }
    signon_realm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signon_realm);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.signon_realm)
}

// optional string origin = 3;
bool PasswordSpecificsData::has_origin() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PasswordSpecificsData::set_has_origin()
{
    _has_bits_[0] |= 0x00000004u;
}
void PasswordSpecificsData::clear_has_origin()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PasswordSpecificsData::clear_origin()
{
    origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_origin();
}
const ::std::string& PasswordSpecificsData::origin() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.origin)
    return origin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_origin(const ::std::string& value)
{
    set_has_origin();
    origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.origin)
}
void PasswordSpecificsData::set_origin(const char* value)
{
    set_has_origin();
    origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.origin)
}
void PasswordSpecificsData::set_origin(const char* value, size_t size)
{
    set_has_origin();
    origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.origin)
}
::std::string* PasswordSpecificsData::mutable_origin()
{
    set_has_origin();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.origin)
    return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_origin()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.origin)
    clear_has_origin();
    return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_origin(::std::string* origin)
{
    if (origin != NULL) {
        set_has_origin();
    } else {
        clear_has_origin();
    }
    origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.origin)
}

// optional string action = 4;
bool PasswordSpecificsData::has_action() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PasswordSpecificsData::set_has_action()
{
    _has_bits_[0] |= 0x00000008u;
}
void PasswordSpecificsData::clear_has_action()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PasswordSpecificsData::clear_action()
{
    action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_action();
}
const ::std::string& PasswordSpecificsData::action() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.action)
    return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_action(const ::std::string& value)
{
    set_has_action();
    action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.action)
}
void PasswordSpecificsData::set_action(const char* value)
{
    set_has_action();
    action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.action)
}
void PasswordSpecificsData::set_action(const char* value, size_t size)
{
    set_has_action();
    action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.action)
}
::std::string* PasswordSpecificsData::mutable_action()
{
    set_has_action();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.action)
    return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_action()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.action)
    clear_has_action();
    return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_action(::std::string* action)
{
    if (action != NULL) {
        set_has_action();
    } else {
        clear_has_action();
    }
    action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.action)
}

// optional string username_element = 5;
bool PasswordSpecificsData::has_username_element() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PasswordSpecificsData::set_has_username_element()
{
    _has_bits_[0] |= 0x00000010u;
}
void PasswordSpecificsData::clear_has_username_element()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PasswordSpecificsData::clear_username_element()
{
    username_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_username_element();
}
const ::std::string& PasswordSpecificsData::username_element() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_element)
    return username_element_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_username_element(const ::std::string& value)
{
    set_has_username_element();
    username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_element)
}
void PasswordSpecificsData::set_username_element(const char* value)
{
    set_has_username_element();
    username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_element)
}
void PasswordSpecificsData::set_username_element(const char* value, size_t size)
{
    set_has_username_element();
    username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_element)
}
::std::string* PasswordSpecificsData::mutable_username_element()
{
    set_has_username_element();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_element)
    return username_element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_username_element()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_element)
    clear_has_username_element();
    return username_element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_username_element(::std::string* username_element)
{
    if (username_element != NULL) {
        set_has_username_element();
    } else {
        clear_has_username_element();
    }
    username_element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username_element);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_element)
}

// optional string username_value = 6;
bool PasswordSpecificsData::has_username_value() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PasswordSpecificsData::set_has_username_value()
{
    _has_bits_[0] |= 0x00000020u;
}
void PasswordSpecificsData::clear_has_username_value()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PasswordSpecificsData::clear_username_value()
{
    username_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_username_value();
}
const ::std::string& PasswordSpecificsData::username_value() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_value)
    return username_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_username_value(const ::std::string& value)
{
    set_has_username_value();
    username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_value)
}
void PasswordSpecificsData::set_username_value(const char* value)
{
    set_has_username_value();
    username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_value)
}
void PasswordSpecificsData::set_username_value(const char* value, size_t size)
{
    set_has_username_value();
    username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_value)
}
::std::string* PasswordSpecificsData::mutable_username_value()
{
    set_has_username_value();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_value)
    return username_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_username_value()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_value)
    clear_has_username_value();
    return username_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_username_value(::std::string* username_value)
{
    if (username_value != NULL) {
        set_has_username_value();
    } else {
        clear_has_username_value();
    }
    username_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username_value);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_value)
}

// optional string password_element = 7;
bool PasswordSpecificsData::has_password_element() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PasswordSpecificsData::set_has_password_element()
{
    _has_bits_[0] |= 0x00000040u;
}
void PasswordSpecificsData::clear_has_password_element()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PasswordSpecificsData::clear_password_element()
{
    password_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_password_element();
}
const ::std::string& PasswordSpecificsData::password_element() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_element)
    return password_element_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_password_element(const ::std::string& value)
{
    set_has_password_element();
    password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_element)
}
void PasswordSpecificsData::set_password_element(const char* value)
{
    set_has_password_element();
    password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_element)
}
void PasswordSpecificsData::set_password_element(const char* value, size_t size)
{
    set_has_password_element();
    password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_element)
}
::std::string* PasswordSpecificsData::mutable_password_element()
{
    set_has_password_element();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_element)
    return password_element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_password_element()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_element)
    clear_has_password_element();
    return password_element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_password_element(::std::string* password_element)
{
    if (password_element != NULL) {
        set_has_password_element();
    } else {
        clear_has_password_element();
    }
    password_element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_element);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_element)
}

// optional string password_value = 8;
bool PasswordSpecificsData::has_password_value() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void PasswordSpecificsData::set_has_password_value()
{
    _has_bits_[0] |= 0x00000080u;
}
void PasswordSpecificsData::clear_has_password_value()
{
    _has_bits_[0] &= ~0x00000080u;
}
void PasswordSpecificsData::clear_password_value()
{
    password_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_password_value();
}
const ::std::string& PasswordSpecificsData::password_value() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_value)
    return password_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_password_value(const ::std::string& value)
{
    set_has_password_value();
    password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_value)
}
void PasswordSpecificsData::set_password_value(const char* value)
{
    set_has_password_value();
    password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_value)
}
void PasswordSpecificsData::set_password_value(const char* value, size_t size)
{
    set_has_password_value();
    password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_value)
}
::std::string* PasswordSpecificsData::mutable_password_value()
{
    set_has_password_value();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_value)
    return password_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_password_value()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_value)
    clear_has_password_value();
    return password_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_password_value(::std::string* password_value)
{
    if (password_value != NULL) {
        set_has_password_value();
    } else {
        clear_has_password_value();
    }
    password_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_value);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_value)
}

// optional bool ssl_valid = 9;
bool PasswordSpecificsData::has_ssl_valid() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void PasswordSpecificsData::set_has_ssl_valid()
{
    _has_bits_[0] |= 0x00000100u;
}
void PasswordSpecificsData::clear_has_ssl_valid()
{
    _has_bits_[0] &= ~0x00000100u;
}
void PasswordSpecificsData::clear_ssl_valid()
{
    ssl_valid_ = false;
    clear_has_ssl_valid();
}
bool PasswordSpecificsData::ssl_valid() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.ssl_valid)
    return ssl_valid_;
}
void PasswordSpecificsData::set_ssl_valid(bool value)
{
    set_has_ssl_valid();
    ssl_valid_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.ssl_valid)
}

// optional bool preferred = 10;
bool PasswordSpecificsData::has_preferred() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void PasswordSpecificsData::set_has_preferred()
{
    _has_bits_[0] |= 0x00000200u;
}
void PasswordSpecificsData::clear_has_preferred()
{
    _has_bits_[0] &= ~0x00000200u;
}
void PasswordSpecificsData::clear_preferred()
{
    preferred_ = false;
    clear_has_preferred();
}
bool PasswordSpecificsData::preferred() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.preferred)
    return preferred_;
}
void PasswordSpecificsData::set_preferred(bool value)
{
    set_has_preferred();
    preferred_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.preferred)
}

// optional int64 date_created = 11;
bool PasswordSpecificsData::has_date_created() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void PasswordSpecificsData::set_has_date_created()
{
    _has_bits_[0] |= 0x00000400u;
}
void PasswordSpecificsData::clear_has_date_created()
{
    _has_bits_[0] &= ~0x00000400u;
}
void PasswordSpecificsData::clear_date_created()
{
    date_created_ = GOOGLE_LONGLONG(0);
    clear_has_date_created();
}
::google::protobuf::int64 PasswordSpecificsData::date_created() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_created)
    return date_created_;
}
void PasswordSpecificsData::set_date_created(::google::protobuf::int64 value)
{
    set_has_date_created();
    date_created_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_created)
}

// optional bool blacklisted = 12;
bool PasswordSpecificsData::has_blacklisted() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void PasswordSpecificsData::set_has_blacklisted()
{
    _has_bits_[0] |= 0x00000800u;
}
void PasswordSpecificsData::clear_has_blacklisted()
{
    _has_bits_[0] &= ~0x00000800u;
}
void PasswordSpecificsData::clear_blacklisted()
{
    blacklisted_ = false;
    clear_has_blacklisted();
}
bool PasswordSpecificsData::blacklisted() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.blacklisted)
    return blacklisted_;
}
void PasswordSpecificsData::set_blacklisted(bool value)
{
    set_has_blacklisted();
    blacklisted_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.blacklisted)
}

// optional int32 type = 13;
bool PasswordSpecificsData::has_type() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void PasswordSpecificsData::set_has_type()
{
    _has_bits_[0] |= 0x00001000u;
}
void PasswordSpecificsData::clear_has_type()
{
    _has_bits_[0] &= ~0x00001000u;
}
void PasswordSpecificsData::clear_type()
{
    type_ = 0;
    clear_has_type();
}
::google::protobuf::int32 PasswordSpecificsData::type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.type)
    return type_;
}
void PasswordSpecificsData::set_type(::google::protobuf::int32 value)
{
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.type)
}

// optional int32 times_used = 14;
bool PasswordSpecificsData::has_times_used() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void PasswordSpecificsData::set_has_times_used()
{
    _has_bits_[0] |= 0x00002000u;
}
void PasswordSpecificsData::clear_has_times_used()
{
    _has_bits_[0] &= ~0x00002000u;
}
void PasswordSpecificsData::clear_times_used()
{
    times_used_ = 0;
    clear_has_times_used();
}
::google::protobuf::int32 PasswordSpecificsData::times_used() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.times_used)
    return times_used_;
}
void PasswordSpecificsData::set_times_used(::google::protobuf::int32 value)
{
    set_has_times_used();
    times_used_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.times_used)
}

// optional string display_name = 15;
bool PasswordSpecificsData::has_display_name() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void PasswordSpecificsData::set_has_display_name()
{
    _has_bits_[0] |= 0x00004000u;
}
void PasswordSpecificsData::clear_has_display_name()
{
    _has_bits_[0] &= ~0x00004000u;
}
void PasswordSpecificsData::clear_display_name()
{
    display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_display_name();
}
const ::std::string& PasswordSpecificsData::display_name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.display_name)
    return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_display_name(const ::std::string& value)
{
    set_has_display_name();
    display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.display_name)
}
void PasswordSpecificsData::set_display_name(const char* value)
{
    set_has_display_name();
    display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.display_name)
}
void PasswordSpecificsData::set_display_name(const char* value, size_t size)
{
    set_has_display_name();
    display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.display_name)
}
::std::string* PasswordSpecificsData::mutable_display_name()
{
    set_has_display_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.display_name)
    return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_display_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.display_name)
    clear_has_display_name();
    return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_display_name(::std::string* display_name)
{
    if (display_name != NULL) {
        set_has_display_name();
    } else {
        clear_has_display_name();
    }
    display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.display_name)
}

// optional string avatar_url = 16;
bool PasswordSpecificsData::has_avatar_url() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void PasswordSpecificsData::set_has_avatar_url()
{
    _has_bits_[0] |= 0x00008000u;
}
void PasswordSpecificsData::clear_has_avatar_url()
{
    _has_bits_[0] &= ~0x00008000u;
}
void PasswordSpecificsData::clear_avatar_url()
{
    avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_avatar_url();
}
const ::std::string& PasswordSpecificsData::avatar_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.avatar_url)
    return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_avatar_url(const ::std::string& value)
{
    set_has_avatar_url();
    avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.avatar_url)
}
void PasswordSpecificsData::set_avatar_url(const char* value)
{
    set_has_avatar_url();
    avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.avatar_url)
}
void PasswordSpecificsData::set_avatar_url(const char* value, size_t size)
{
    set_has_avatar_url();
    avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.avatar_url)
}
::std::string* PasswordSpecificsData::mutable_avatar_url()
{
    set_has_avatar_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.avatar_url)
    return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_avatar_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.avatar_url)
    clear_has_avatar_url();
    return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_avatar_url(::std::string* avatar_url)
{
    if (avatar_url != NULL) {
        set_has_avatar_url();
    } else {
        clear_has_avatar_url();
    }
    avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.avatar_url)
}

// optional string federation_url = 17;
bool PasswordSpecificsData::has_federation_url() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void PasswordSpecificsData::set_has_federation_url()
{
    _has_bits_[0] |= 0x00010000u;
}
void PasswordSpecificsData::clear_has_federation_url()
{
    _has_bits_[0] &= ~0x00010000u;
}
void PasswordSpecificsData::clear_federation_url()
{
    federation_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_federation_url();
}
const ::std::string& PasswordSpecificsData::federation_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.federation_url)
    return federation_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_federation_url(const ::std::string& value)
{
    set_has_federation_url();
    federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.federation_url)
}
void PasswordSpecificsData::set_federation_url(const char* value)
{
    set_has_federation_url();
    federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.federation_url)
}
void PasswordSpecificsData::set_federation_url(const char* value, size_t size)
{
    set_has_federation_url();
    federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.federation_url)
}
::std::string* PasswordSpecificsData::mutable_federation_url()
{
    set_has_federation_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.federation_url)
    return federation_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_federation_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.federation_url)
    clear_has_federation_url();
    return federation_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_federation_url(::std::string* federation_url)
{
    if (federation_url != NULL) {
        set_has_federation_url();
    } else {
        clear_has_federation_url();
    }
    federation_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), federation_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.federation_url)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPasswordSpecificsMetadata(
    PasswordSpecificsMetadata* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordSpecificsMetadata::kUrlFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordSpecificsMetadata::PasswordSpecificsMetadata()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.PasswordSpecificsMetadata)
}

void PasswordSpecificsMetadata::InitAsDefaultInstance()
{
}

PasswordSpecificsMetadata::PasswordSpecificsMetadata(const PasswordSpecificsMetadata& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.PasswordSpecificsMetadata)
}

void PasswordSpecificsMetadata::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasswordSpecificsMetadata::~PasswordSpecificsMetadata()
{
    // @@protoc_insertion_point(destructor:sync_pb.PasswordSpecificsMetadata)
    SharedDtor();
}

void PasswordSpecificsMetadata::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PasswordSpecificsMetadata::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecificsMetadata& PasswordSpecificsMetadata::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_password_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

PasswordSpecificsMetadata* PasswordSpecificsMetadata::default_instance_ = NULL;

PasswordSpecificsMetadata* PasswordSpecificsMetadata::New(::google::protobuf::Arena* arena) const
{
    PasswordSpecificsMetadata* n = new PasswordSpecificsMetadata;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PasswordSpecificsMetadata::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.PasswordSpecificsMetadata)
    if (has_url()) {
        url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PasswordSpecificsMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPasswordSpecificsMetadata, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.PasswordSpecificsMetadata)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string url = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.PasswordSpecificsMetadata)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.PasswordSpecificsMetadata)
    return false;
#undef DO_
}

void PasswordSpecificsMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.PasswordSpecificsMetadata)
    // optional string url = 1;
    if (has_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->url(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.PasswordSpecificsMetadata)
}

int PasswordSpecificsMetadata::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.PasswordSpecificsMetadata)
    int total_size = 0;

    // optional string url = 1;
    if (has_url()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->url());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PasswordSpecificsMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PasswordSpecificsMetadata*>(&from));
}

void PasswordSpecificsMetadata::MergeFrom(const PasswordSpecificsMetadata& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PasswordSpecificsMetadata)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_url()) {
            set_has_url();
            url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PasswordSpecificsMetadata::CopyFrom(const PasswordSpecificsMetadata& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PasswordSpecificsMetadata)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PasswordSpecificsMetadata::IsInitialized() const
{

    return true;
}

void PasswordSpecificsMetadata::Swap(PasswordSpecificsMetadata* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PasswordSpecificsMetadata::InternalSwap(PasswordSpecificsMetadata* other)
{
    url_.Swap(&other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PasswordSpecificsMetadata::GetTypeName() const
{
    return "sync_pb.PasswordSpecificsMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecificsMetadata

// optional string url = 1;
bool PasswordSpecificsMetadata::has_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordSpecificsMetadata::set_has_url()
{
    _has_bits_[0] |= 0x00000001u;
}
void PasswordSpecificsMetadata::clear_has_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PasswordSpecificsMetadata::clear_url()
{
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
}
const ::std::string& PasswordSpecificsMetadata::url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsMetadata.url)
    return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsMetadata::set_url(const ::std::string& value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsMetadata.url)
}
void PasswordSpecificsMetadata::set_url(const char* value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsMetadata.url)
}
void PasswordSpecificsMetadata::set_url(const char* value, size_t size)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsMetadata.url)
}
::std::string* PasswordSpecificsMetadata::mutable_url()
{
    set_has_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsMetadata.url)
    return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsMetadata::release_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsMetadata.url)
    clear_has_url();
    return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsMetadata::set_allocated_url(::std::string* url)
{
    if (url != NULL) {
        set_has_url();
    } else {
        clear_has_url();
    }
    url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsMetadata.url)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPasswordSpecifics(
    PasswordSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordSpecifics::kEncryptedFieldNumber;
const int PasswordSpecifics::kClientOnlyEncryptedDataFieldNumber;
const int PasswordSpecifics::kUnencryptedMetadataFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordSpecifics::PasswordSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.PasswordSpecifics)
}

void PasswordSpecifics::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    encrypted_ = const_cast<::sync_pb::EncryptedData*>(
        ::sync_pb::EncryptedData::internal_default_instance());
#else
    encrypted_ = const_cast<::sync_pb::EncryptedData*>(&::sync_pb::EncryptedData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    client_only_encrypted_data_ = const_cast<::sync_pb::PasswordSpecificsData*>(
        ::sync_pb::PasswordSpecificsData::internal_default_instance());
#else
    client_only_encrypted_data_ = const_cast<::sync_pb::PasswordSpecificsData*>(&::sync_pb::PasswordSpecificsData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    unencrypted_metadata_ = const_cast<::sync_pb::PasswordSpecificsMetadata*>(
        ::sync_pb::PasswordSpecificsMetadata::internal_default_instance());
#else
    unencrypted_metadata_ = const_cast<::sync_pb::PasswordSpecificsMetadata*>(&::sync_pb::PasswordSpecificsMetadata::default_instance());
#endif
}

PasswordSpecifics::PasswordSpecifics(const PasswordSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.PasswordSpecifics)
}

void PasswordSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    encrypted_ = NULL;
    client_only_encrypted_data_ = NULL;
    unencrypted_metadata_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasswordSpecifics::~PasswordSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.PasswordSpecifics)
    SharedDtor();
}

void PasswordSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete encrypted_;
        delete client_only_encrypted_data_;
        delete unencrypted_metadata_;
    }
}

void PasswordSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecifics& PasswordSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_password_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

PasswordSpecifics* PasswordSpecifics::default_instance_ = NULL;

PasswordSpecifics* PasswordSpecifics::New(::google::protobuf::Arena* arena) const
{
    PasswordSpecifics* n = new PasswordSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PasswordSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.PasswordSpecifics)
    if (_has_bits_[0 / 32] & 7u) {
        if (has_encrypted()) {
            if (encrypted_ != NULL)
                encrypted_->::sync_pb::EncryptedData::Clear();
        }
        if (has_client_only_encrypted_data()) {
            if (client_only_encrypted_data_ != NULL)
                client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
        }
        if (has_unencrypted_metadata()) {
            if (unencrypted_metadata_ != NULL)
                unencrypted_metadata_->::sync_pb::PasswordSpecificsMetadata::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PasswordSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPasswordSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.PasswordSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .sync_pb.EncryptedData encrypted = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_encrypted()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_client_only_encrypted_data;
            break;
        }

        // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
        case 2: {
            if (tag == 18) {
            parse_client_only_encrypted_data:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_client_only_encrypted_data()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_unencrypted_metadata;
            break;
        }

        // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
        case 3: {
            if (tag == 26) {
            parse_unencrypted_metadata:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_unencrypted_metadata()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.PasswordSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.PasswordSpecifics)
    return false;
#undef DO_
}

void PasswordSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.PasswordSpecifics)
    // optional .sync_pb.EncryptedData encrypted = 1;
    if (has_encrypted()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->encrypted_, output);
    }

    // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
    if (has_client_only_encrypted_data()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->client_only_encrypted_data_, output);
    }

    // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
    if (has_unencrypted_metadata()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->unencrypted_metadata_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.PasswordSpecifics)
}

int PasswordSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.PasswordSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional .sync_pb.EncryptedData encrypted = 1;
        if (has_encrypted()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->encrypted_);
        }

        // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
        if (has_client_only_encrypted_data()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->client_only_encrypted_data_);
        }

        // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
        if (has_unencrypted_metadata()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->unencrypted_metadata_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PasswordSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PasswordSpecifics*>(&from));
}

void PasswordSpecifics::MergeFrom(const PasswordSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PasswordSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_encrypted()) {
            mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
        }
        if (from.has_client_only_encrypted_data()) {
            mutable_client_only_encrypted_data()->::sync_pb::PasswordSpecificsData::MergeFrom(from.client_only_encrypted_data());
        }
        if (from.has_unencrypted_metadata()) {
            mutable_unencrypted_metadata()->::sync_pb::PasswordSpecificsMetadata::MergeFrom(from.unencrypted_metadata());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PasswordSpecifics::CopyFrom(const PasswordSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PasswordSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PasswordSpecifics::IsInitialized() const
{

    return true;
}

void PasswordSpecifics::Swap(PasswordSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PasswordSpecifics::InternalSwap(PasswordSpecifics* other)
{
    std::swap(encrypted_, other->encrypted_);
    std::swap(client_only_encrypted_data_, other->client_only_encrypted_data_);
    std::swap(unencrypted_metadata_, other->unencrypted_metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PasswordSpecifics::GetTypeName() const
{
    return "sync_pb.PasswordSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
bool PasswordSpecifics::has_encrypted() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordSpecifics::set_has_encrypted()
{
    _has_bits_[0] |= 0x00000001u;
}
void PasswordSpecifics::clear_has_encrypted()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PasswordSpecifics::clear_encrypted()
{
    if (encrypted_ != NULL)
        encrypted_->::sync_pb::EncryptedData::Clear();
    clear_has_encrypted();
}
const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.encrypted)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return encrypted_ != NULL ? *encrypted_ : *default_instance().encrypted_;
#else
    return encrypted_ != NULL ? *encrypted_ : *default_instance_->encrypted_;
#endif
}
::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted()
{
    set_has_encrypted();
    if (encrypted_ == NULL) {
        encrypted_ = new ::sync_pb::EncryptedData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.encrypted)
    return encrypted_;
}
::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.encrypted)
    clear_has_encrypted();
    ::sync_pb::EncryptedData* temp = encrypted_;
    encrypted_ = NULL;
    return temp;
}
void PasswordSpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted)
{
    delete encrypted_;
    encrypted_ = encrypted;
    if (encrypted) {
        set_has_encrypted();
    } else {
        clear_has_encrypted();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.encrypted)
}

// optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
bool PasswordSpecifics::has_client_only_encrypted_data() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PasswordSpecifics::set_has_client_only_encrypted_data()
{
    _has_bits_[0] |= 0x00000002u;
}
void PasswordSpecifics::clear_has_client_only_encrypted_data()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PasswordSpecifics::clear_client_only_encrypted_data()
{
    if (client_only_encrypted_data_ != NULL)
        client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
    clear_has_client_only_encrypted_data();
}
const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::client_only_encrypted_data() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.client_only_encrypted_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_ : *default_instance().client_only_encrypted_data_;
#else
    return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_ : *default_instance_->client_only_encrypted_data_;
#endif
}
::sync_pb::PasswordSpecificsData* PasswordSpecifics::mutable_client_only_encrypted_data()
{
    set_has_client_only_encrypted_data();
    if (client_only_encrypted_data_ == NULL) {
        client_only_encrypted_data_ = new ::sync_pb::PasswordSpecificsData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.client_only_encrypted_data)
    return client_only_encrypted_data_;
}
::sync_pb::PasswordSpecificsData* PasswordSpecifics::release_client_only_encrypted_data()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.client_only_encrypted_data)
    clear_has_client_only_encrypted_data();
    ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
    client_only_encrypted_data_ = NULL;
    return temp;
}
void PasswordSpecifics::set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data)
{
    delete client_only_encrypted_data_;
    client_only_encrypted_data_ = client_only_encrypted_data;
    if (client_only_encrypted_data) {
        set_has_client_only_encrypted_data();
    } else {
        clear_has_client_only_encrypted_data();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.client_only_encrypted_data)
}

// optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
bool PasswordSpecifics::has_unencrypted_metadata() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PasswordSpecifics::set_has_unencrypted_metadata()
{
    _has_bits_[0] |= 0x00000004u;
}
void PasswordSpecifics::clear_has_unencrypted_metadata()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PasswordSpecifics::clear_unencrypted_metadata()
{
    if (unencrypted_metadata_ != NULL)
        unencrypted_metadata_->::sync_pb::PasswordSpecificsMetadata::Clear();
    clear_has_unencrypted_metadata();
}
const ::sync_pb::PasswordSpecificsMetadata& PasswordSpecifics::unencrypted_metadata() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.unencrypted_metadata)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return unencrypted_metadata_ != NULL ? *unencrypted_metadata_ : *default_instance().unencrypted_metadata_;
#else
    return unencrypted_metadata_ != NULL ? *unencrypted_metadata_ : *default_instance_->unencrypted_metadata_;
#endif
}
::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::mutable_unencrypted_metadata()
{
    set_has_unencrypted_metadata();
    if (unencrypted_metadata_ == NULL) {
        unencrypted_metadata_ = new ::sync_pb::PasswordSpecificsMetadata;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.unencrypted_metadata)
    return unencrypted_metadata_;
}
::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::release_unencrypted_metadata()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.unencrypted_metadata)
    clear_has_unencrypted_metadata();
    ::sync_pb::PasswordSpecificsMetadata* temp = unencrypted_metadata_;
    unencrypted_metadata_ = NULL;
    return temp;
}
void PasswordSpecifics::set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata)
{
    delete unencrypted_metadata_;
    unencrypted_metadata_ = unencrypted_metadata;
    if (unencrypted_metadata) {
        set_has_unencrypted_metadata();
    } else {
        clear_has_unencrypted_metadata();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.unencrypted_metadata)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
