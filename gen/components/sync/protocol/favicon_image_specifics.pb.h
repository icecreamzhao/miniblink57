// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: favicon_image_specifics.proto

#ifndef PROTOBUF_favicon_5fimage_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_favicon_5fimage_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
void protobuf_AssignDesc_favicon_5fimage_5fspecifics_2eproto();
void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto();

class FaviconData;
class FaviconImageSpecifics;

// ===================================================================

class FaviconData : public ::google::protobuf::MessageLite {
public:
    FaviconData();
    virtual ~FaviconData();

    FaviconData(const FaviconData& from);

    inline FaviconData& operator=(const FaviconData& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const FaviconData& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const FaviconData* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(FaviconData* other);

    // implements Message ----------------------------------------------

    inline FaviconData* New() const { return New(NULL); }

    FaviconData* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const FaviconData& from);
    void MergeFrom(const FaviconData& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(FaviconData* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional bytes favicon = 1;
    bool has_favicon() const;
    void clear_favicon();
    static const int kFaviconFieldNumber = 1;
    const ::std::string& favicon() const;
    void set_favicon(const ::std::string& value);
    void set_favicon(const char* value);
    void set_favicon(const void* value, size_t size);
    ::std::string* mutable_favicon();
    ::std::string* release_favicon();
    void set_allocated_favicon(::std::string* favicon);

    // optional int32 width = 2;
    bool has_width() const;
    void clear_width();
    static const int kWidthFieldNumber = 2;
    ::google::protobuf::int32 width() const;
    void set_width(::google::protobuf::int32 value);

    // optional int32 height = 3;
    bool has_height() const;
    void clear_height();
    static const int kHeightFieldNumber = 3;
    ::google::protobuf::int32 height() const;
    void set_height(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:sync_pb.FaviconData)
private:
    inline void set_has_favicon();
    inline void clear_has_favicon();
    inline void set_has_width();
    inline void clear_has_width();
    inline void set_has_height();
    inline void clear_has_height();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr favicon_;
    ::google::protobuf::int32 width_;
    ::google::protobuf::int32 height_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_favicon_5fimage_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static FaviconData* default_instance_;
};
// -------------------------------------------------------------------

class FaviconImageSpecifics : public ::google::protobuf::MessageLite {
public:
    FaviconImageSpecifics();
    virtual ~FaviconImageSpecifics();

    FaviconImageSpecifics(const FaviconImageSpecifics& from);

    inline FaviconImageSpecifics& operator=(const FaviconImageSpecifics& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const FaviconImageSpecifics& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const FaviconImageSpecifics* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(FaviconImageSpecifics* other);

    // implements Message ----------------------------------------------

    inline FaviconImageSpecifics* New() const { return New(NULL); }

    FaviconImageSpecifics* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const FaviconImageSpecifics& from);
    void MergeFrom(const FaviconImageSpecifics& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(FaviconImageSpecifics* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string favicon_url = 1;
    bool has_favicon_url() const;
    void clear_favicon_url();
    static const int kFaviconUrlFieldNumber = 1;
    const ::std::string& favicon_url() const;
    void set_favicon_url(const ::std::string& value);
    void set_favicon_url(const char* value);
    void set_favicon_url(const char* value, size_t size);
    ::std::string* mutable_favicon_url();
    ::std::string* release_favicon_url();
    void set_allocated_favicon_url(::std::string* favicon_url);

    // optional .sync_pb.FaviconData favicon_web = 2;
    bool has_favicon_web() const;
    void clear_favicon_web();
    static const int kFaviconWebFieldNumber = 2;
    const ::sync_pb::FaviconData& favicon_web() const;
    ::sync_pb::FaviconData* mutable_favicon_web();
    ::sync_pb::FaviconData* release_favicon_web();
    void set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web);

    // optional .sync_pb.FaviconData favicon_web_32 = 3;
    bool has_favicon_web_32() const;
    void clear_favicon_web_32();
    static const int kFaviconWeb32FieldNumber = 3;
    const ::sync_pb::FaviconData& favicon_web_32() const;
    ::sync_pb::FaviconData* mutable_favicon_web_32();
    ::sync_pb::FaviconData* release_favicon_web_32();
    void set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32);

    // optional .sync_pb.FaviconData favicon_touch_64 = 4;
    bool has_favicon_touch_64() const;
    void clear_favicon_touch_64();
    static const int kFaviconTouch64FieldNumber = 4;
    const ::sync_pb::FaviconData& favicon_touch_64() const;
    ::sync_pb::FaviconData* mutable_favicon_touch_64();
    ::sync_pb::FaviconData* release_favicon_touch_64();
    void set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64);

    // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
    bool has_favicon_touch_precomposed_64() const;
    void clear_favicon_touch_precomposed_64();
    static const int kFaviconTouchPrecomposed64FieldNumber = 5;
    const ::sync_pb::FaviconData& favicon_touch_precomposed_64() const;
    ::sync_pb::FaviconData* mutable_favicon_touch_precomposed_64();
    ::sync_pb::FaviconData* release_favicon_touch_precomposed_64();
    void set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64);

    // @@protoc_insertion_point(class_scope:sync_pb.FaviconImageSpecifics)
private:
    inline void set_has_favicon_url();
    inline void clear_has_favicon_url();
    inline void set_has_favicon_web();
    inline void clear_has_favicon_web();
    inline void set_has_favicon_web_32();
    inline void clear_has_favicon_web_32();
    inline void set_has_favicon_touch_64();
    inline void clear_has_favicon_touch_64();
    inline void set_has_favicon_touch_precomposed_64();
    inline void clear_has_favicon_touch_precomposed_64();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr favicon_url_;
    ::sync_pb::FaviconData* favicon_web_;
    ::sync_pb::FaviconData* favicon_web_32_;
    ::sync_pb::FaviconData* favicon_touch_64_;
    ::sync_pb::FaviconData* favicon_touch_precomposed_64_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_favicon_5fimage_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static FaviconImageSpecifics* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FaviconData

// optional bytes favicon = 1;
inline bool FaviconData::has_favicon() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconData::set_has_favicon()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void FaviconData::clear_has_favicon()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void FaviconData::clear_favicon()
{
    favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon();
}
inline const ::std::string& FaviconData::favicon() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconData.favicon)
    return favicon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaviconData::set_favicon(const ::std::string& value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.FaviconData.favicon)
}
inline void FaviconData::set_favicon(const char* value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.FaviconData.favicon)
}
inline void FaviconData::set_favicon(const void* value, size_t size)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.FaviconData.favicon)
}
inline ::std::string* FaviconData::mutable_favicon()
{
    set_has_favicon();
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconData.favicon)
    return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaviconData::release_favicon()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconData.favicon)
    clear_has_favicon();
    return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaviconData::set_allocated_favicon(::std::string* favicon)
{
    if (favicon != NULL) {
        set_has_favicon();
    } else {
        clear_has_favicon();
    }
    favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconData.favicon)
}

// optional int32 width = 2;
inline bool FaviconData::has_width() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconData::set_has_width()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void FaviconData::clear_has_width()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void FaviconData::clear_width()
{
    width_ = 0;
    clear_has_width();
}
inline ::google::protobuf::int32 FaviconData::width() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconData.width)
    return width_;
}
inline void FaviconData::set_width(::google::protobuf::int32 value)
{
    set_has_width();
    width_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.FaviconData.width)
}

// optional int32 height = 3;
inline bool FaviconData::has_height() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaviconData::set_has_height()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void FaviconData::clear_has_height()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void FaviconData::clear_height()
{
    height_ = 0;
    clear_has_height();
}
inline ::google::protobuf::int32 FaviconData::height() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconData.height)
    return height_;
}
inline void FaviconData::set_height(::google::protobuf::int32 value)
{
    set_has_height();
    height_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.FaviconData.height)
}

// -------------------------------------------------------------------

// FaviconImageSpecifics

// optional string favicon_url = 1;
inline bool FaviconImageSpecifics::has_favicon_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_url()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void FaviconImageSpecifics::clear_has_favicon_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void FaviconImageSpecifics::clear_favicon_url()
{
    favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon_url();
}
inline const ::std::string& FaviconImageSpecifics::favicon_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_url)
    return favicon_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaviconImageSpecifics::set_favicon_url(const ::std::string& value)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline void FaviconImageSpecifics::set_favicon_url(const char* value)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline void FaviconImageSpecifics::set_favicon_url(const char* value, size_t size)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.FaviconImageSpecifics.favicon_url)
}
inline ::std::string* FaviconImageSpecifics::mutable_favicon_url()
{
    set_has_favicon_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_url)
    return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaviconImageSpecifics::release_favicon_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_url)
    clear_has_favicon_url();
    return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaviconImageSpecifics::set_allocated_favicon_url(::std::string* favicon_url)
{
    if (favicon_url != NULL) {
        set_has_favicon_url();
    } else {
        clear_has_favicon_url();
    }
    favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_url)
}

// optional .sync_pb.FaviconData favicon_web = 2;
inline bool FaviconImageSpecifics::has_favicon_web() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_web()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void FaviconImageSpecifics::clear_has_favicon_web()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void FaviconImageSpecifics::clear_favicon_web()
{
    if (favicon_web_ != NULL)
        favicon_web_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_web();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_web)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_web_ != NULL ? *favicon_web_ : *default_instance().favicon_web_;
#else
    return favicon_web_ != NULL ? *favicon_web_ : *default_instance_->favicon_web_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web()
{
    set_has_favicon_web();
    if (favicon_web_ == NULL) {
        favicon_web_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_web)
    return favicon_web_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_web)
    clear_has_favicon_web();
    ::sync_pb::FaviconData* temp = favicon_web_;
    favicon_web_ = NULL;
    return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web)
{
    delete favicon_web_;
    favicon_web_ = favicon_web;
    if (favicon_web) {
        set_has_favicon_web();
    } else {
        clear_has_favicon_web();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_web)
}

// optional .sync_pb.FaviconData favicon_web_32 = 3;
inline bool FaviconImageSpecifics::has_favicon_web_32() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_web_32()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void FaviconImageSpecifics::clear_has_favicon_web_32()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void FaviconImageSpecifics::clear_favicon_web_32()
{
    if (favicon_web_32_ != NULL)
        favicon_web_32_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_web_32();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web_32() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_web_32)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_web_32_ != NULL ? *favicon_web_32_ : *default_instance().favicon_web_32_;
#else
    return favicon_web_32_ != NULL ? *favicon_web_32_ : *default_instance_->favicon_web_32_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web_32()
{
    set_has_favicon_web_32();
    if (favicon_web_32_ == NULL) {
        favicon_web_32_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_web_32)
    return favicon_web_32_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web_32()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_web_32)
    clear_has_favicon_web_32();
    ::sync_pb::FaviconData* temp = favicon_web_32_;
    favicon_web_32_ = NULL;
    return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32)
{
    delete favicon_web_32_;
    favicon_web_32_ = favicon_web_32;
    if (favicon_web_32) {
        set_has_favicon_web_32();
    } else {
        clear_has_favicon_web_32();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_web_32)
}

// optional .sync_pb.FaviconData favicon_touch_64 = 4;
inline bool FaviconImageSpecifics::has_favicon_touch_64() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_touch_64()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void FaviconImageSpecifics::clear_has_favicon_touch_64()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void FaviconImageSpecifics::clear_favicon_touch_64()
{
    if (favicon_touch_64_ != NULL)
        favicon_touch_64_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_touch_64();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_64() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_touch_64)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_touch_64_ != NULL ? *favicon_touch_64_ : *default_instance().favicon_touch_64_;
#else
    return favicon_touch_64_ != NULL ? *favicon_touch_64_ : *default_instance_->favicon_touch_64_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_64()
{
    set_has_favicon_touch_64();
    if (favicon_touch_64_ == NULL) {
        favicon_touch_64_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_touch_64)
    return favicon_touch_64_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_64()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_touch_64)
    clear_has_favicon_touch_64();
    ::sync_pb::FaviconData* temp = favicon_touch_64_;
    favicon_touch_64_ = NULL;
    return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64)
{
    delete favicon_touch_64_;
    favicon_touch_64_ = favicon_touch_64;
    if (favicon_touch_64) {
        set_has_favicon_touch_64();
    } else {
        clear_has_favicon_touch_64();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_touch_64)
}

// optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
inline bool FaviconImageSpecifics::has_favicon_touch_precomposed_64() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_touch_precomposed_64()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void FaviconImageSpecifics::clear_has_favicon_touch_precomposed_64()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void FaviconImageSpecifics::clear_favicon_touch_precomposed_64()
{
    if (favicon_touch_precomposed_64_ != NULL)
        favicon_touch_precomposed_64_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_touch_precomposed_64();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_precomposed_64() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_touch_precomposed_64_ != NULL ? *favicon_touch_precomposed_64_ : *default_instance().favicon_touch_precomposed_64_;
#else
    return favicon_touch_precomposed_64_ != NULL ? *favicon_touch_precomposed_64_ : *default_instance_->favicon_touch_precomposed_64_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_precomposed_64()
{
    set_has_favicon_touch_precomposed_64();
    if (favicon_touch_precomposed_64_ == NULL) {
        favicon_touch_precomposed_64_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
    return favicon_touch_precomposed_64_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_precomposed_64()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
    clear_has_favicon_touch_precomposed_64();
    ::sync_pb::FaviconData* temp = favicon_touch_precomposed_64_;
    favicon_touch_precomposed_64_ = NULL;
    return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64)
{
    delete favicon_touch_precomposed_64_;
    favicon_touch_precomposed_64_ = favicon_touch_precomposed_64;
    if (favicon_touch_precomposed_64) {
        set_has_favicon_touch_precomposed_64();
    } else {
        clear_has_favicon_touch_precomposed_64();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_favicon_5fimage_5fspecifics_2eproto__INCLUDED
