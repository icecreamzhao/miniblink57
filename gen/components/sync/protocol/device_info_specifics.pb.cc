// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_info_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_info_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_device_5finfo_5fspecifics_2eproto()
{
    delete DeviceInfoSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_device_5finfo_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_device_5finfo_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ::sync_pb::protobuf_AddDesc_sync_5fenums_2eproto();
    DeviceInfoSpecifics::default_instance_ = new DeviceInfoSpecifics();
    DeviceInfoSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_device_5finfo_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_device_5finfo_5fspecifics_2eproto_once_);
void protobuf_AddDesc_device_5finfo_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_device_5finfo_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_device_5finfo_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_device_5finfo_5fspecifics_2eproto {
    StaticDescriptorInitializer_device_5finfo_5fspecifics_2eproto()
    {
        protobuf_AddDesc_device_5finfo_5fspecifics_2eproto();
    }
} static_descriptor_initializer_device_5finfo_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceInfoSpecifics(
    DeviceInfoSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoSpecifics::kCacheGuidFieldNumber;
const int DeviceInfoSpecifics::kClientNameFieldNumber;
const int DeviceInfoSpecifics::kDeviceTypeFieldNumber;
const int DeviceInfoSpecifics::kSyncUserAgentFieldNumber;
const int DeviceInfoSpecifics::kChromeVersionFieldNumber;
const int DeviceInfoSpecifics::kDeprecatedBackupTimestampFieldNumber;
const int DeviceInfoSpecifics::kSigninScopedDeviceIdFieldNumber;
const int DeviceInfoSpecifics::kLastUpdatedTimestampFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoSpecifics::DeviceInfoSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.DeviceInfoSpecifics)
}

void DeviceInfoSpecifics::InitAsDefaultInstance()
{
}

DeviceInfoSpecifics::DeviceInfoSpecifics(const DeviceInfoSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.DeviceInfoSpecifics)
}

void DeviceInfoSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cache_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_type_ = 1;
    sync_user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    chrome_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    deprecated_backup_timestamp_ = GOOGLE_LONGLONG(0);
    signin_scoped_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    last_updated_timestamp_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfoSpecifics::~DeviceInfoSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.DeviceInfoSpecifics)
    SharedDtor();
}

void DeviceInfoSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cache_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    sync_user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    chrome_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signin_scoped_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceInfoSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceInfoSpecifics& DeviceInfoSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5finfo_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5finfo_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

DeviceInfoSpecifics* DeviceInfoSpecifics::default_instance_ = NULL;

DeviceInfoSpecifics* DeviceInfoSpecifics::New(::google::protobuf::Arena* arena) const
{
    DeviceInfoSpecifics* n = new DeviceInfoSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceInfoSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.DeviceInfoSpecifics)
    if (_has_bits_[0 / 32] & 255u) {
        if (has_cache_guid()) {
            cache_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_client_name()) {
            client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        device_type_ = 1;
        if (has_sync_user_agent()) {
            sync_user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_chrome_version()) {
            chrome_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        deprecated_backup_timestamp_ = GOOGLE_LONGLONG(0);
        if (has_signin_scoped_device_id()) {
            signin_scoped_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        last_updated_timestamp_ = GOOGLE_LONGLONG(0);
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceInfoSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceInfoSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.DeviceInfoSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string cache_guid = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_cache_guid()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_client_name;
            break;
        }

        // optional string client_name = 2;
        case 2: {
            if (tag == 18) {
            parse_client_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_client_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_device_type;
            break;
        }

        // optional .sync_pb.SyncEnums.DeviceType device_type = 3;
        case 3: {
            if (tag == 24) {
            parse_device_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::sync_pb::SyncEnums_DeviceType_IsValid(value)) {
                    set_device_type(static_cast<::sync_pb::SyncEnums_DeviceType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(24);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_sync_user_agent;
            break;
        }

        // optional string sync_user_agent = 4;
        case 4: {
            if (tag == 34) {
            parse_sync_user_agent:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_sync_user_agent()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_chrome_version;
            break;
        }

        // optional string chrome_version = 5;
        case 5: {
            if (tag == 42) {
            parse_chrome_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_chrome_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_deprecated_backup_timestamp;
            break;
        }

        // optional int64 deprecated_backup_timestamp = 6 [deprecated = true];
        case 6: {
            if (tag == 48) {
            parse_deprecated_backup_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &deprecated_backup_timestamp_)));
                set_has_deprecated_backup_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_signin_scoped_device_id;
            break;
        }

        // optional string signin_scoped_device_id = 7;
        case 7: {
            if (tag == 58) {
            parse_signin_scoped_device_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_signin_scoped_device_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_last_updated_timestamp;
            break;
        }

        // optional int64 last_updated_timestamp = 8;
        case 8: {
            if (tag == 64) {
            parse_last_updated_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &last_updated_timestamp_)));
                set_has_last_updated_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.DeviceInfoSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.DeviceInfoSpecifics)
    return false;
#undef DO_
}

void DeviceInfoSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.DeviceInfoSpecifics)
    // optional string cache_guid = 1;
    if (has_cache_guid()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->cache_guid(), output);
    }

    // optional string client_name = 2;
    if (has_client_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->client_name(), output);
    }

    // optional .sync_pb.SyncEnums.DeviceType device_type = 3;
    if (has_device_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            3, this->device_type(), output);
    }

    // optional string sync_user_agent = 4;
    if (has_sync_user_agent()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->sync_user_agent(), output);
    }

    // optional string chrome_version = 5;
    if (has_chrome_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->chrome_version(), output);
    }

    // optional int64 deprecated_backup_timestamp = 6 [deprecated = true];
    if (has_deprecated_backup_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->deprecated_backup_timestamp(), output);
    }

    // optional string signin_scoped_device_id = 7;
    if (has_signin_scoped_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            7, this->signin_scoped_device_id(), output);
    }

    // optional int64 last_updated_timestamp = 8;
    if (has_last_updated_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->last_updated_timestamp(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.DeviceInfoSpecifics)
}

int DeviceInfoSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.DeviceInfoSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional string cache_guid = 1;
        if (has_cache_guid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->cache_guid());
        }

        // optional string client_name = 2;
        if (has_client_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->client_name());
        }

        // optional .sync_pb.SyncEnums.DeviceType device_type = 3;
        if (has_device_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
        }

        // optional string sync_user_agent = 4;
        if (has_sync_user_agent()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->sync_user_agent());
        }

        // optional string chrome_version = 5;
        if (has_chrome_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->chrome_version());
        }

        // optional int64 deprecated_backup_timestamp = 6 [deprecated = true];
        if (has_deprecated_backup_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->deprecated_backup_timestamp());
        }

        // optional string signin_scoped_device_id = 7;
        if (has_signin_scoped_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->signin_scoped_device_id());
        }

        // optional int64 last_updated_timestamp = 8;
        if (has_last_updated_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_updated_timestamp());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceInfoSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceInfoSpecifics*>(&from));
}

void DeviceInfoSpecifics::MergeFrom(const DeviceInfoSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DeviceInfoSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_cache_guid()) {
            set_has_cache_guid();
            cache_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cache_guid_);
        }
        if (from.has_client_name()) {
            set_has_client_name();
            client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
        }
        if (from.has_device_type()) {
            set_device_type(from.device_type());
        }
        if (from.has_sync_user_agent()) {
            set_has_sync_user_agent();
            sync_user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_user_agent_);
        }
        if (from.has_chrome_version()) {
            set_has_chrome_version();
            chrome_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_version_);
        }
        if (from.has_deprecated_backup_timestamp()) {
            set_deprecated_backup_timestamp(from.deprecated_backup_timestamp());
        }
        if (from.has_signin_scoped_device_id()) {
            set_has_signin_scoped_device_id();
            signin_scoped_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signin_scoped_device_id_);
        }
        if (from.has_last_updated_timestamp()) {
            set_last_updated_timestamp(from.last_updated_timestamp());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceInfoSpecifics::CopyFrom(const DeviceInfoSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DeviceInfoSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceInfoSpecifics::IsInitialized() const
{

    return true;
}

void DeviceInfoSpecifics::Swap(DeviceInfoSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceInfoSpecifics::InternalSwap(DeviceInfoSpecifics* other)
{
    cache_guid_.Swap(&other->cache_guid_);
    client_name_.Swap(&other->client_name_);
    std::swap(device_type_, other->device_type_);
    sync_user_agent_.Swap(&other->sync_user_agent_);
    chrome_version_.Swap(&other->chrome_version_);
    std::swap(deprecated_backup_timestamp_, other->deprecated_backup_timestamp_);
    signin_scoped_device_id_.Swap(&other->signin_scoped_device_id_);
    std::swap(last_updated_timestamp_, other->last_updated_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceInfoSpecifics::GetTypeName() const
{
    return "sync_pb.DeviceInfoSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfoSpecifics

// optional string cache_guid = 1;
bool DeviceInfoSpecifics::has_cache_guid() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfoSpecifics::set_has_cache_guid()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceInfoSpecifics::clear_has_cache_guid()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfoSpecifics::clear_cache_guid()
{
    cache_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cache_guid();
}
const ::std::string& DeviceInfoSpecifics::cache_guid() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.cache_guid)
    return cache_guid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_cache_guid(const ::std::string& value)
{
    set_has_cache_guid();
    cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.cache_guid)
}
void DeviceInfoSpecifics::set_cache_guid(const char* value)
{
    set_has_cache_guid();
    cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.cache_guid)
}
void DeviceInfoSpecifics::set_cache_guid(const char* value, size_t size)
{
    set_has_cache_guid();
    cache_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.cache_guid)
}
::std::string* DeviceInfoSpecifics::mutable_cache_guid()
{
    set_has_cache_guid();
    // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.cache_guid)
    return cache_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoSpecifics::release_cache_guid()
{
    // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.cache_guid)
    clear_has_cache_guid();
    return cache_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_allocated_cache_guid(::std::string* cache_guid)
{
    if (cache_guid != NULL) {
        set_has_cache_guid();
    } else {
        clear_has_cache_guid();
    }
    cache_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_guid);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.cache_guid)
}

// optional string client_name = 2;
bool DeviceInfoSpecifics::has_client_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfoSpecifics::set_has_client_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceInfoSpecifics::clear_has_client_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfoSpecifics::clear_client_name()
{
    client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_client_name();
}
const ::std::string& DeviceInfoSpecifics::client_name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.client_name)
    return client_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_client_name(const ::std::string& value)
{
    set_has_client_name();
    client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.client_name)
}
void DeviceInfoSpecifics::set_client_name(const char* value)
{
    set_has_client_name();
    client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.client_name)
}
void DeviceInfoSpecifics::set_client_name(const char* value, size_t size)
{
    set_has_client_name();
    client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.client_name)
}
::std::string* DeviceInfoSpecifics::mutable_client_name()
{
    set_has_client_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.client_name)
    return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoSpecifics::release_client_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.client_name)
    clear_has_client_name();
    return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_allocated_client_name(::std::string* client_name)
{
    if (client_name != NULL) {
        set_has_client_name();
    } else {
        clear_has_client_name();
    }
    client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.client_name)
}

// optional .sync_pb.SyncEnums.DeviceType device_type = 3;
bool DeviceInfoSpecifics::has_device_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceInfoSpecifics::set_has_device_type()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceInfoSpecifics::clear_has_device_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceInfoSpecifics::clear_device_type()
{
    device_type_ = 1;
    clear_has_device_type();
}
::sync_pb::SyncEnums_DeviceType DeviceInfoSpecifics::device_type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.device_type)
    return static_cast<::sync_pb::SyncEnums_DeviceType>(device_type_);
}
void DeviceInfoSpecifics::set_device_type(::sync_pb::SyncEnums_DeviceType value)
{
    assert(::sync_pb::SyncEnums_DeviceType_IsValid(value));
    set_has_device_type();
    device_type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.device_type)
}

// optional string sync_user_agent = 4;
bool DeviceInfoSpecifics::has_sync_user_agent() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceInfoSpecifics::set_has_sync_user_agent()
{
    _has_bits_[0] |= 0x00000008u;
}
void DeviceInfoSpecifics::clear_has_sync_user_agent()
{
    _has_bits_[0] &= ~0x00000008u;
}
void DeviceInfoSpecifics::clear_sync_user_agent()
{
    sync_user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_sync_user_agent();
}
const ::std::string& DeviceInfoSpecifics::sync_user_agent() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.sync_user_agent)
    return sync_user_agent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_sync_user_agent(const ::std::string& value)
{
    set_has_sync_user_agent();
    sync_user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
void DeviceInfoSpecifics::set_sync_user_agent(const char* value)
{
    set_has_sync_user_agent();
    sync_user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
void DeviceInfoSpecifics::set_sync_user_agent(const char* value, size_t size)
{
    set_has_sync_user_agent();
    sync_user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}
::std::string* DeviceInfoSpecifics::mutable_sync_user_agent()
{
    set_has_sync_user_agent();
    // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.sync_user_agent)
    return sync_user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoSpecifics::release_sync_user_agent()
{
    // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.sync_user_agent)
    clear_has_sync_user_agent();
    return sync_user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_allocated_sync_user_agent(::std::string* sync_user_agent)
{
    if (sync_user_agent != NULL) {
        set_has_sync_user_agent();
    } else {
        clear_has_sync_user_agent();
    }
    sync_user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sync_user_agent);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.sync_user_agent)
}

// optional string chrome_version = 5;
bool DeviceInfoSpecifics::has_chrome_version() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceInfoSpecifics::set_has_chrome_version()
{
    _has_bits_[0] |= 0x00000010u;
}
void DeviceInfoSpecifics::clear_has_chrome_version()
{
    _has_bits_[0] &= ~0x00000010u;
}
void DeviceInfoSpecifics::clear_chrome_version()
{
    chrome_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_chrome_version();
}
const ::std::string& DeviceInfoSpecifics::chrome_version() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.chrome_version)
    return chrome_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_chrome_version(const ::std::string& value)
{
    set_has_chrome_version();
    chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.chrome_version)
}
void DeviceInfoSpecifics::set_chrome_version(const char* value)
{
    set_has_chrome_version();
    chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.chrome_version)
}
void DeviceInfoSpecifics::set_chrome_version(const char* value, size_t size)
{
    set_has_chrome_version();
    chrome_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.chrome_version)
}
::std::string* DeviceInfoSpecifics::mutable_chrome_version()
{
    set_has_chrome_version();
    // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.chrome_version)
    return chrome_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoSpecifics::release_chrome_version()
{
    // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.chrome_version)
    clear_has_chrome_version();
    return chrome_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_allocated_chrome_version(::std::string* chrome_version)
{
    if (chrome_version != NULL) {
        set_has_chrome_version();
    } else {
        clear_has_chrome_version();
    }
    chrome_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_version);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.chrome_version)
}

// optional int64 deprecated_backup_timestamp = 6 [deprecated = true];
bool DeviceInfoSpecifics::has_deprecated_backup_timestamp() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceInfoSpecifics::set_has_deprecated_backup_timestamp()
{
    _has_bits_[0] |= 0x00000020u;
}
void DeviceInfoSpecifics::clear_has_deprecated_backup_timestamp()
{
    _has_bits_[0] &= ~0x00000020u;
}
void DeviceInfoSpecifics::clear_deprecated_backup_timestamp()
{
    deprecated_backup_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_deprecated_backup_timestamp();
}
::google::protobuf::int64 DeviceInfoSpecifics::deprecated_backup_timestamp() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.deprecated_backup_timestamp)
    return deprecated_backup_timestamp_;
}
void DeviceInfoSpecifics::set_deprecated_backup_timestamp(::google::protobuf::int64 value)
{
    set_has_deprecated_backup_timestamp();
    deprecated_backup_timestamp_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.deprecated_backup_timestamp)
}

// optional string signin_scoped_device_id = 7;
bool DeviceInfoSpecifics::has_signin_scoped_device_id() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceInfoSpecifics::set_has_signin_scoped_device_id()
{
    _has_bits_[0] |= 0x00000040u;
}
void DeviceInfoSpecifics::clear_has_signin_scoped_device_id()
{
    _has_bits_[0] &= ~0x00000040u;
}
void DeviceInfoSpecifics::clear_signin_scoped_device_id()
{
    signin_scoped_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signin_scoped_device_id();
}
const ::std::string& DeviceInfoSpecifics::signin_scoped_device_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
    return signin_scoped_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_signin_scoped_device_id(const ::std::string& value)
{
    set_has_signin_scoped_device_id();
    signin_scoped_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
void DeviceInfoSpecifics::set_signin_scoped_device_id(const char* value)
{
    set_has_signin_scoped_device_id();
    signin_scoped_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
void DeviceInfoSpecifics::set_signin_scoped_device_id(const char* value, size_t size)
{
    set_has_signin_scoped_device_id();
    signin_scoped_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}
::std::string* DeviceInfoSpecifics::mutable_signin_scoped_device_id()
{
    set_has_signin_scoped_device_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
    return signin_scoped_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoSpecifics::release_signin_scoped_device_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
    clear_has_signin_scoped_device_id();
    return signin_scoped_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoSpecifics::set_allocated_signin_scoped_device_id(::std::string* signin_scoped_device_id)
{
    if (signin_scoped_device_id != NULL) {
        set_has_signin_scoped_device_id();
    } else {
        clear_has_signin_scoped_device_id();
    }
    signin_scoped_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signin_scoped_device_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.DeviceInfoSpecifics.signin_scoped_device_id)
}

// optional int64 last_updated_timestamp = 8;
bool DeviceInfoSpecifics::has_last_updated_timestamp() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceInfoSpecifics::set_has_last_updated_timestamp()
{
    _has_bits_[0] |= 0x00000080u;
}
void DeviceInfoSpecifics::clear_has_last_updated_timestamp()
{
    _has_bits_[0] &= ~0x00000080u;
}
void DeviceInfoSpecifics::clear_last_updated_timestamp()
{
    last_updated_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_last_updated_timestamp();
}
::google::protobuf::int64 DeviceInfoSpecifics::last_updated_timestamp() const
{
    // @@protoc_insertion_point(field_get:sync_pb.DeviceInfoSpecifics.last_updated_timestamp)
    return last_updated_timestamp_;
}
void DeviceInfoSpecifics::set_last_updated_timestamp(::google::protobuf::int64 value)
{
    set_has_last_updated_timestamp();
    last_updated_timestamp_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.DeviceInfoSpecifics.last_updated_timestamp)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
