// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

#ifndef PROTOBUF_password_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_password_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "encryption.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_password_5fspecifics_2eproto();
void protobuf_AssignDesc_password_5fspecifics_2eproto();
void protobuf_ShutdownFile_password_5fspecifics_2eproto();

class PasswordSpecifics;
class PasswordSpecificsData;
class PasswordSpecificsMetadata;

// ===================================================================

class PasswordSpecificsData : public ::google::protobuf::MessageLite {
public:
    PasswordSpecificsData();
    virtual ~PasswordSpecificsData();

    PasswordSpecificsData(const PasswordSpecificsData& from);

    inline PasswordSpecificsData& operator=(const PasswordSpecificsData& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const PasswordSpecificsData& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const PasswordSpecificsData* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(PasswordSpecificsData* other);

    // implements Message ----------------------------------------------

    inline PasswordSpecificsData* New() const { return New(NULL); }

    PasswordSpecificsData* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const PasswordSpecificsData& from);
    void MergeFrom(const PasswordSpecificsData& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(PasswordSpecificsData* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional int32 scheme = 1;
    bool has_scheme() const;
    void clear_scheme();
    static const int kSchemeFieldNumber = 1;
    ::google::protobuf::int32 scheme() const;
    void set_scheme(::google::protobuf::int32 value);

    // optional string signon_realm = 2;
    bool has_signon_realm() const;
    void clear_signon_realm();
    static const int kSignonRealmFieldNumber = 2;
    const ::std::string& signon_realm() const;
    void set_signon_realm(const ::std::string& value);
    void set_signon_realm(const char* value);
    void set_signon_realm(const char* value, size_t size);
    ::std::string* mutable_signon_realm();
    ::std::string* release_signon_realm();
    void set_allocated_signon_realm(::std::string* signon_realm);

    // optional string origin = 3;
    bool has_origin() const;
    void clear_origin();
    static const int kOriginFieldNumber = 3;
    const ::std::string& origin() const;
    void set_origin(const ::std::string& value);
    void set_origin(const char* value);
    void set_origin(const char* value, size_t size);
    ::std::string* mutable_origin();
    ::std::string* release_origin();
    void set_allocated_origin(::std::string* origin);

    // optional string action = 4;
    bool has_action() const;
    void clear_action();
    static const int kActionFieldNumber = 4;
    const ::std::string& action() const;
    void set_action(const ::std::string& value);
    void set_action(const char* value);
    void set_action(const char* value, size_t size);
    ::std::string* mutable_action();
    ::std::string* release_action();
    void set_allocated_action(::std::string* action);

    // optional string username_element = 5;
    bool has_username_element() const;
    void clear_username_element();
    static const int kUsernameElementFieldNumber = 5;
    const ::std::string& username_element() const;
    void set_username_element(const ::std::string& value);
    void set_username_element(const char* value);
    void set_username_element(const char* value, size_t size);
    ::std::string* mutable_username_element();
    ::std::string* release_username_element();
    void set_allocated_username_element(::std::string* username_element);

    // optional string username_value = 6;
    bool has_username_value() const;
    void clear_username_value();
    static const int kUsernameValueFieldNumber = 6;
    const ::std::string& username_value() const;
    void set_username_value(const ::std::string& value);
    void set_username_value(const char* value);
    void set_username_value(const char* value, size_t size);
    ::std::string* mutable_username_value();
    ::std::string* release_username_value();
    void set_allocated_username_value(::std::string* username_value);

    // optional string password_element = 7;
    bool has_password_element() const;
    void clear_password_element();
    static const int kPasswordElementFieldNumber = 7;
    const ::std::string& password_element() const;
    void set_password_element(const ::std::string& value);
    void set_password_element(const char* value);
    void set_password_element(const char* value, size_t size);
    ::std::string* mutable_password_element();
    ::std::string* release_password_element();
    void set_allocated_password_element(::std::string* password_element);

    // optional string password_value = 8;
    bool has_password_value() const;
    void clear_password_value();
    static const int kPasswordValueFieldNumber = 8;
    const ::std::string& password_value() const;
    void set_password_value(const ::std::string& value);
    void set_password_value(const char* value);
    void set_password_value(const char* value, size_t size);
    ::std::string* mutable_password_value();
    ::std::string* release_password_value();
    void set_allocated_password_value(::std::string* password_value);

    // optional bool ssl_valid = 9;
    bool has_ssl_valid() const;
    void clear_ssl_valid();
    static const int kSslValidFieldNumber = 9;
    bool ssl_valid() const;
    void set_ssl_valid(bool value);

    // optional bool preferred = 10;
    bool has_preferred() const;
    void clear_preferred();
    static const int kPreferredFieldNumber = 10;
    bool preferred() const;
    void set_preferred(bool value);

    // optional int64 date_created = 11;
    bool has_date_created() const;
    void clear_date_created();
    static const int kDateCreatedFieldNumber = 11;
    ::google::protobuf::int64 date_created() const;
    void set_date_created(::google::protobuf::int64 value);

    // optional bool blacklisted = 12;
    bool has_blacklisted() const;
    void clear_blacklisted();
    static const int kBlacklistedFieldNumber = 12;
    bool blacklisted() const;
    void set_blacklisted(bool value);

    // optional int32 type = 13;
    bool has_type() const;
    void clear_type();
    static const int kTypeFieldNumber = 13;
    ::google::protobuf::int32 type() const;
    void set_type(::google::protobuf::int32 value);

    // optional int32 times_used = 14;
    bool has_times_used() const;
    void clear_times_used();
    static const int kTimesUsedFieldNumber = 14;
    ::google::protobuf::int32 times_used() const;
    void set_times_used(::google::protobuf::int32 value);

    // optional string display_name = 15;
    bool has_display_name() const;
    void clear_display_name();
    static const int kDisplayNameFieldNumber = 15;
    const ::std::string& display_name() const;
    void set_display_name(const ::std::string& value);
    void set_display_name(const char* value);
    void set_display_name(const char* value, size_t size);
    ::std::string* mutable_display_name();
    ::std::string* release_display_name();
    void set_allocated_display_name(::std::string* display_name);

    // optional string avatar_url = 16;
    bool has_avatar_url() const;
    void clear_avatar_url();
    static const int kAvatarUrlFieldNumber = 16;
    const ::std::string& avatar_url() const;
    void set_avatar_url(const ::std::string& value);
    void set_avatar_url(const char* value);
    void set_avatar_url(const char* value, size_t size);
    ::std::string* mutable_avatar_url();
    ::std::string* release_avatar_url();
    void set_allocated_avatar_url(::std::string* avatar_url);

    // optional string federation_url = 17;
    bool has_federation_url() const;
    void clear_federation_url();
    static const int kFederationUrlFieldNumber = 17;
    const ::std::string& federation_url() const;
    void set_federation_url(const ::std::string& value);
    void set_federation_url(const char* value);
    void set_federation_url(const char* value, size_t size);
    ::std::string* mutable_federation_url();
    ::std::string* release_federation_url();
    void set_allocated_federation_url(::std::string* federation_url);

    // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData)
private:
    inline void set_has_scheme();
    inline void clear_has_scheme();
    inline void set_has_signon_realm();
    inline void clear_has_signon_realm();
    inline void set_has_origin();
    inline void clear_has_origin();
    inline void set_has_action();
    inline void clear_has_action();
    inline void set_has_username_element();
    inline void clear_has_username_element();
    inline void set_has_username_value();
    inline void clear_has_username_value();
    inline void set_has_password_element();
    inline void clear_has_password_element();
    inline void set_has_password_value();
    inline void clear_has_password_value();
    inline void set_has_ssl_valid();
    inline void clear_has_ssl_valid();
    inline void set_has_preferred();
    inline void clear_has_preferred();
    inline void set_has_date_created();
    inline void clear_has_date_created();
    inline void set_has_blacklisted();
    inline void clear_has_blacklisted();
    inline void set_has_type();
    inline void clear_has_type();
    inline void set_has_times_used();
    inline void clear_has_times_used();
    inline void set_has_display_name();
    inline void clear_has_display_name();
    inline void set_has_avatar_url();
    inline void clear_has_avatar_url();
    inline void set_has_federation_url();
    inline void clear_has_federation_url();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr signon_realm_;
    ::google::protobuf::internal::ArenaStringPtr origin_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr username_element_;
    ::google::protobuf::internal::ArenaStringPtr username_value_;
    ::google::protobuf::internal::ArenaStringPtr password_element_;
    ::google::protobuf::internal::ArenaStringPtr password_value_;
    ::google::protobuf::int32 scheme_;
    bool ssl_valid_;
    bool preferred_;
    bool blacklisted_;
    ::google::protobuf::int64 date_created_;
    ::google::protobuf::int32 type_;
    ::google::protobuf::int32 times_used_;
    ::google::protobuf::internal::ArenaStringPtr display_name_;
    ::google::protobuf::internal::ArenaStringPtr avatar_url_;
    ::google::protobuf::internal::ArenaStringPtr federation_url_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_password_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_password_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_password_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static PasswordSpecificsData* default_instance_;
};
// -------------------------------------------------------------------

class PasswordSpecificsMetadata : public ::google::protobuf::MessageLite {
public:
    PasswordSpecificsMetadata();
    virtual ~PasswordSpecificsMetadata();

    PasswordSpecificsMetadata(const PasswordSpecificsMetadata& from);

    inline PasswordSpecificsMetadata& operator=(const PasswordSpecificsMetadata& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const PasswordSpecificsMetadata& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const PasswordSpecificsMetadata* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(PasswordSpecificsMetadata* other);

    // implements Message ----------------------------------------------

    inline PasswordSpecificsMetadata* New() const { return New(NULL); }

    PasswordSpecificsMetadata* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const PasswordSpecificsMetadata& from);
    void MergeFrom(const PasswordSpecificsMetadata& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(PasswordSpecificsMetadata* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string url = 1;
    bool has_url() const;
    void clear_url();
    static const int kUrlFieldNumber = 1;
    const ::std::string& url() const;
    void set_url(const ::std::string& value);
    void set_url(const char* value);
    void set_url(const char* value, size_t size);
    ::std::string* mutable_url();
    ::std::string* release_url();
    void set_allocated_url(::std::string* url);

    // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsMetadata)
private:
    inline void set_has_url();
    inline void clear_has_url();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_password_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_password_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_password_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static PasswordSpecificsMetadata* default_instance_;
};
// -------------------------------------------------------------------

class PasswordSpecifics : public ::google::protobuf::MessageLite {
public:
    PasswordSpecifics();
    virtual ~PasswordSpecifics();

    PasswordSpecifics(const PasswordSpecifics& from);

    inline PasswordSpecifics& operator=(const PasswordSpecifics& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const PasswordSpecifics& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const PasswordSpecifics* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(PasswordSpecifics* other);

    // implements Message ----------------------------------------------

    inline PasswordSpecifics* New() const { return New(NULL); }

    PasswordSpecifics* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const PasswordSpecifics& from);
    void MergeFrom(const PasswordSpecifics& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(PasswordSpecifics* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional .sync_pb.EncryptedData encrypted = 1;
    bool has_encrypted() const;
    void clear_encrypted();
    static const int kEncryptedFieldNumber = 1;
    const ::sync_pb::EncryptedData& encrypted() const;
    ::sync_pb::EncryptedData* mutable_encrypted();
    ::sync_pb::EncryptedData* release_encrypted();
    void set_allocated_encrypted(::sync_pb::EncryptedData* encrypted);

    // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
    bool has_client_only_encrypted_data() const;
    void clear_client_only_encrypted_data();
    static const int kClientOnlyEncryptedDataFieldNumber = 2;
    const ::sync_pb::PasswordSpecificsData& client_only_encrypted_data() const;
    ::sync_pb::PasswordSpecificsData* mutable_client_only_encrypted_data();
    ::sync_pb::PasswordSpecificsData* release_client_only_encrypted_data();
    void set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data);

    // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
    bool has_unencrypted_metadata() const;
    void clear_unencrypted_metadata();
    static const int kUnencryptedMetadataFieldNumber = 3;
    const ::sync_pb::PasswordSpecificsMetadata& unencrypted_metadata() const;
    ::sync_pb::PasswordSpecificsMetadata* mutable_unencrypted_metadata();
    ::sync_pb::PasswordSpecificsMetadata* release_unencrypted_metadata();
    void set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata);

    // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecifics)
private:
    inline void set_has_encrypted();
    inline void clear_has_encrypted();
    inline void set_has_client_only_encrypted_data();
    inline void clear_has_client_only_encrypted_data();
    inline void set_has_unencrypted_metadata();
    inline void clear_has_unencrypted_metadata();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::sync_pb::EncryptedData* encrypted_;
    ::sync_pb::PasswordSpecificsData* client_only_encrypted_data_;
    ::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_password_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_password_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_password_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static PasswordSpecifics* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecificsData

// optional int32 scheme = 1;
inline bool PasswordSpecificsData::has_scheme() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecificsData::set_has_scheme()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PasswordSpecificsData::clear_has_scheme()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PasswordSpecificsData::clear_scheme()
{
    scheme_ = 0;
    clear_has_scheme();
}
inline ::google::protobuf::int32 PasswordSpecificsData::scheme() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.scheme)
    return scheme_;
}
inline void PasswordSpecificsData::set_scheme(::google::protobuf::int32 value)
{
    set_has_scheme();
    scheme_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.scheme)
}

// optional string signon_realm = 2;
inline bool PasswordSpecificsData::has_signon_realm() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordSpecificsData::set_has_signon_realm()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PasswordSpecificsData::clear_has_signon_realm()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PasswordSpecificsData::clear_signon_realm()
{
    signon_realm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signon_realm();
}
inline const ::std::string& PasswordSpecificsData::signon_realm() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.signon_realm)
    return signon_realm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_signon_realm(const ::std::string& value)
{
    set_has_signon_realm();
    signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.signon_realm)
}
inline void PasswordSpecificsData::set_signon_realm(const char* value)
{
    set_has_signon_realm();
    signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.signon_realm)
}
inline void PasswordSpecificsData::set_signon_realm(const char* value, size_t size)
{
    set_has_signon_realm();
    signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.signon_realm)
}
inline ::std::string* PasswordSpecificsData::mutable_signon_realm()
{
    set_has_signon_realm();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.signon_realm)
    return signon_realm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_signon_realm()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.signon_realm)
    clear_has_signon_realm();
    return signon_realm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_signon_realm(::std::string* signon_realm)
{
    if (signon_realm != NULL) {
        set_has_signon_realm();
    } else {
        clear_has_signon_realm();
    }
    signon_realm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signon_realm);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.signon_realm)
}

// optional string origin = 3;
inline bool PasswordSpecificsData::has_origin() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordSpecificsData::set_has_origin()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PasswordSpecificsData::clear_has_origin()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PasswordSpecificsData::clear_origin()
{
    origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_origin();
}
inline const ::std::string& PasswordSpecificsData::origin() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.origin)
    return origin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_origin(const ::std::string& value)
{
    set_has_origin();
    origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.origin)
}
inline void PasswordSpecificsData::set_origin(const char* value)
{
    set_has_origin();
    origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.origin)
}
inline void PasswordSpecificsData::set_origin(const char* value, size_t size)
{
    set_has_origin();
    origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.origin)
}
inline ::std::string* PasswordSpecificsData::mutable_origin()
{
    set_has_origin();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.origin)
    return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_origin()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.origin)
    clear_has_origin();
    return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_origin(::std::string* origin)
{
    if (origin != NULL) {
        set_has_origin();
    } else {
        clear_has_origin();
    }
    origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.origin)
}

// optional string action = 4;
inline bool PasswordSpecificsData::has_action() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PasswordSpecificsData::set_has_action()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void PasswordSpecificsData::clear_has_action()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void PasswordSpecificsData::clear_action()
{
    action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_action();
}
inline const ::std::string& PasswordSpecificsData::action() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.action)
    return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_action(const ::std::string& value)
{
    set_has_action();
    action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.action)
}
inline void PasswordSpecificsData::set_action(const char* value)
{
    set_has_action();
    action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.action)
}
inline void PasswordSpecificsData::set_action(const char* value, size_t size)
{
    set_has_action();
    action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.action)
}
inline ::std::string* PasswordSpecificsData::mutable_action()
{
    set_has_action();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.action)
    return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_action()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.action)
    clear_has_action();
    return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_action(::std::string* action)
{
    if (action != NULL) {
        set_has_action();
    } else {
        clear_has_action();
    }
    action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.action)
}

// optional string username_element = 5;
inline bool PasswordSpecificsData::has_username_element() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PasswordSpecificsData::set_has_username_element()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void PasswordSpecificsData::clear_has_username_element()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void PasswordSpecificsData::clear_username_element()
{
    username_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_username_element();
}
inline const ::std::string& PasswordSpecificsData::username_element() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_element)
    return username_element_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_username_element(const ::std::string& value)
{
    set_has_username_element();
    username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_element)
}
inline void PasswordSpecificsData::set_username_element(const char* value)
{
    set_has_username_element();
    username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_element)
}
inline void PasswordSpecificsData::set_username_element(const char* value, size_t size)
{
    set_has_username_element();
    username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_element)
}
inline ::std::string* PasswordSpecificsData::mutable_username_element()
{
    set_has_username_element();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_element)
    return username_element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_username_element()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_element)
    clear_has_username_element();
    return username_element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_username_element(::std::string* username_element)
{
    if (username_element != NULL) {
        set_has_username_element();
    } else {
        clear_has_username_element();
    }
    username_element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username_element);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_element)
}

// optional string username_value = 6;
inline bool PasswordSpecificsData::has_username_value() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PasswordSpecificsData::set_has_username_value()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void PasswordSpecificsData::clear_has_username_value()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void PasswordSpecificsData::clear_username_value()
{
    username_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_username_value();
}
inline const ::std::string& PasswordSpecificsData::username_value() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_value)
    return username_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_username_value(const ::std::string& value)
{
    set_has_username_value();
    username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_value)
}
inline void PasswordSpecificsData::set_username_value(const char* value)
{
    set_has_username_value();
    username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_value)
}
inline void PasswordSpecificsData::set_username_value(const char* value, size_t size)
{
    set_has_username_value();
    username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_value)
}
inline ::std::string* PasswordSpecificsData::mutable_username_value()
{
    set_has_username_value();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_value)
    return username_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_username_value()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_value)
    clear_has_username_value();
    return username_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_username_value(::std::string* username_value)
{
    if (username_value != NULL) {
        set_has_username_value();
    } else {
        clear_has_username_value();
    }
    username_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username_value);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_value)
}

// optional string password_element = 7;
inline bool PasswordSpecificsData::has_password_element() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PasswordSpecificsData::set_has_password_element()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void PasswordSpecificsData::clear_has_password_element()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void PasswordSpecificsData::clear_password_element()
{
    password_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_password_element();
}
inline const ::std::string& PasswordSpecificsData::password_element() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_element)
    return password_element_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_password_element(const ::std::string& value)
{
    set_has_password_element();
    password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_element)
}
inline void PasswordSpecificsData::set_password_element(const char* value)
{
    set_has_password_element();
    password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_element)
}
inline void PasswordSpecificsData::set_password_element(const char* value, size_t size)
{
    set_has_password_element();
    password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_element)
}
inline ::std::string* PasswordSpecificsData::mutable_password_element()
{
    set_has_password_element();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_element)
    return password_element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_password_element()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_element)
    clear_has_password_element();
    return password_element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_password_element(::std::string* password_element)
{
    if (password_element != NULL) {
        set_has_password_element();
    } else {
        clear_has_password_element();
    }
    password_element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_element);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_element)
}

// optional string password_value = 8;
inline bool PasswordSpecificsData::has_password_value() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PasswordSpecificsData::set_has_password_value()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void PasswordSpecificsData::clear_has_password_value()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void PasswordSpecificsData::clear_password_value()
{
    password_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_password_value();
}
inline const ::std::string& PasswordSpecificsData::password_value() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_value)
    return password_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_password_value(const ::std::string& value)
{
    set_has_password_value();
    password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_value)
}
inline void PasswordSpecificsData::set_password_value(const char* value)
{
    set_has_password_value();
    password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_value)
}
inline void PasswordSpecificsData::set_password_value(const char* value, size_t size)
{
    set_has_password_value();
    password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_value)
}
inline ::std::string* PasswordSpecificsData::mutable_password_value()
{
    set_has_password_value();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_value)
    return password_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_password_value()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_value)
    clear_has_password_value();
    return password_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_password_value(::std::string* password_value)
{
    if (password_value != NULL) {
        set_has_password_value();
    } else {
        clear_has_password_value();
    }
    password_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_value);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_value)
}

// optional bool ssl_valid = 9;
inline bool PasswordSpecificsData::has_ssl_valid() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PasswordSpecificsData::set_has_ssl_valid()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void PasswordSpecificsData::clear_has_ssl_valid()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void PasswordSpecificsData::clear_ssl_valid()
{
    ssl_valid_ = false;
    clear_has_ssl_valid();
}
inline bool PasswordSpecificsData::ssl_valid() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.ssl_valid)
    return ssl_valid_;
}
inline void PasswordSpecificsData::set_ssl_valid(bool value)
{
    set_has_ssl_valid();
    ssl_valid_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.ssl_valid)
}

// optional bool preferred = 10;
inline bool PasswordSpecificsData::has_preferred() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PasswordSpecificsData::set_has_preferred()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void PasswordSpecificsData::clear_has_preferred()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void PasswordSpecificsData::clear_preferred()
{
    preferred_ = false;
    clear_has_preferred();
}
inline bool PasswordSpecificsData::preferred() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.preferred)
    return preferred_;
}
inline void PasswordSpecificsData::set_preferred(bool value)
{
    set_has_preferred();
    preferred_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.preferred)
}

// optional int64 date_created = 11;
inline bool PasswordSpecificsData::has_date_created() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PasswordSpecificsData::set_has_date_created()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void PasswordSpecificsData::clear_has_date_created()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void PasswordSpecificsData::clear_date_created()
{
    date_created_ = GOOGLE_LONGLONG(0);
    clear_has_date_created();
}
inline ::google::protobuf::int64 PasswordSpecificsData::date_created() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_created)
    return date_created_;
}
inline void PasswordSpecificsData::set_date_created(::google::protobuf::int64 value)
{
    set_has_date_created();
    date_created_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_created)
}

// optional bool blacklisted = 12;
inline bool PasswordSpecificsData::has_blacklisted() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PasswordSpecificsData::set_has_blacklisted()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void PasswordSpecificsData::clear_has_blacklisted()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void PasswordSpecificsData::clear_blacklisted()
{
    blacklisted_ = false;
    clear_has_blacklisted();
}
inline bool PasswordSpecificsData::blacklisted() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.blacklisted)
    return blacklisted_;
}
inline void PasswordSpecificsData::set_blacklisted(bool value)
{
    set_has_blacklisted();
    blacklisted_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.blacklisted)
}

// optional int32 type = 13;
inline bool PasswordSpecificsData::has_type() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PasswordSpecificsData::set_has_type()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void PasswordSpecificsData::clear_has_type()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void PasswordSpecificsData::clear_type()
{
    type_ = 0;
    clear_has_type();
}
inline ::google::protobuf::int32 PasswordSpecificsData::type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.type)
    return type_;
}
inline void PasswordSpecificsData::set_type(::google::protobuf::int32 value)
{
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.type)
}

// optional int32 times_used = 14;
inline bool PasswordSpecificsData::has_times_used() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PasswordSpecificsData::set_has_times_used()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void PasswordSpecificsData::clear_has_times_used()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void PasswordSpecificsData::clear_times_used()
{
    times_used_ = 0;
    clear_has_times_used();
}
inline ::google::protobuf::int32 PasswordSpecificsData::times_used() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.times_used)
    return times_used_;
}
inline void PasswordSpecificsData::set_times_used(::google::protobuf::int32 value)
{
    set_has_times_used();
    times_used_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.times_used)
}

// optional string display_name = 15;
inline bool PasswordSpecificsData::has_display_name() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PasswordSpecificsData::set_has_display_name()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void PasswordSpecificsData::clear_has_display_name()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void PasswordSpecificsData::clear_display_name()
{
    display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_display_name();
}
inline const ::std::string& PasswordSpecificsData::display_name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.display_name)
    return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_display_name(const ::std::string& value)
{
    set_has_display_name();
    display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.display_name)
}
inline void PasswordSpecificsData::set_display_name(const char* value)
{
    set_has_display_name();
    display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.display_name)
}
inline void PasswordSpecificsData::set_display_name(const char* value, size_t size)
{
    set_has_display_name();
    display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.display_name)
}
inline ::std::string* PasswordSpecificsData::mutable_display_name()
{
    set_has_display_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.display_name)
    return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_display_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.display_name)
    clear_has_display_name();
    return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_display_name(::std::string* display_name)
{
    if (display_name != NULL) {
        set_has_display_name();
    } else {
        clear_has_display_name();
    }
    display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.display_name)
}

// optional string avatar_url = 16;
inline bool PasswordSpecificsData::has_avatar_url() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PasswordSpecificsData::set_has_avatar_url()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void PasswordSpecificsData::clear_has_avatar_url()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void PasswordSpecificsData::clear_avatar_url()
{
    avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_avatar_url();
}
inline const ::std::string& PasswordSpecificsData::avatar_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.avatar_url)
    return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_avatar_url(const ::std::string& value)
{
    set_has_avatar_url();
    avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.avatar_url)
}
inline void PasswordSpecificsData::set_avatar_url(const char* value)
{
    set_has_avatar_url();
    avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.avatar_url)
}
inline void PasswordSpecificsData::set_avatar_url(const char* value, size_t size)
{
    set_has_avatar_url();
    avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.avatar_url)
}
inline ::std::string* PasswordSpecificsData::mutable_avatar_url()
{
    set_has_avatar_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.avatar_url)
    return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_avatar_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.avatar_url)
    clear_has_avatar_url();
    return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_avatar_url(::std::string* avatar_url)
{
    if (avatar_url != NULL) {
        set_has_avatar_url();
    } else {
        clear_has_avatar_url();
    }
    avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.avatar_url)
}

// optional string federation_url = 17;
inline bool PasswordSpecificsData::has_federation_url() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PasswordSpecificsData::set_has_federation_url()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void PasswordSpecificsData::clear_has_federation_url()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void PasswordSpecificsData::clear_federation_url()
{
    federation_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_federation_url();
}
inline const ::std::string& PasswordSpecificsData::federation_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.federation_url)
    return federation_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_federation_url(const ::std::string& value)
{
    set_has_federation_url();
    federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.federation_url)
}
inline void PasswordSpecificsData::set_federation_url(const char* value)
{
    set_has_federation_url();
    federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.federation_url)
}
inline void PasswordSpecificsData::set_federation_url(const char* value, size_t size)
{
    set_has_federation_url();
    federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.federation_url)
}
inline ::std::string* PasswordSpecificsData::mutable_federation_url()
{
    set_has_federation_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.federation_url)
    return federation_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsData::release_federation_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.federation_url)
    clear_has_federation_url();
    return federation_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsData::set_allocated_federation_url(::std::string* federation_url)
{
    if (federation_url != NULL) {
        set_has_federation_url();
    } else {
        clear_has_federation_url();
    }
    federation_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), federation_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.federation_url)
}

// -------------------------------------------------------------------

// PasswordSpecificsMetadata

// optional string url = 1;
inline bool PasswordSpecificsMetadata::has_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecificsMetadata::set_has_url()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PasswordSpecificsMetadata::clear_has_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PasswordSpecificsMetadata::clear_url()
{
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
}
inline const ::std::string& PasswordSpecificsMetadata::url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsMetadata.url)
    return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsMetadata::set_url(const ::std::string& value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsMetadata.url)
}
inline void PasswordSpecificsMetadata::set_url(const char* value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsMetadata.url)
}
inline void PasswordSpecificsMetadata::set_url(const char* value, size_t size)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsMetadata.url)
}
inline ::std::string* PasswordSpecificsMetadata::mutable_url()
{
    set_has_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsMetadata.url)
    return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordSpecificsMetadata::release_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsMetadata.url)
    clear_has_url();
    return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordSpecificsMetadata::set_allocated_url(::std::string* url)
{
    if (url != NULL) {
        set_has_url();
    } else {
        clear_has_url();
    }
    url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsMetadata.url)
}

// -------------------------------------------------------------------

// PasswordSpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
inline bool PasswordSpecifics::has_encrypted() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecifics::set_has_encrypted()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PasswordSpecifics::clear_has_encrypted()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PasswordSpecifics::clear_encrypted()
{
    if (encrypted_ != NULL)
        encrypted_->::sync_pb::EncryptedData::Clear();
    clear_has_encrypted();
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.encrypted)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return encrypted_ != NULL ? *encrypted_ : *default_instance().encrypted_;
#else
    return encrypted_ != NULL ? *encrypted_ : *default_instance_->encrypted_;
#endif
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted()
{
    set_has_encrypted();
    if (encrypted_ == NULL) {
        encrypted_ = new ::sync_pb::EncryptedData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.encrypted)
    return encrypted_;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.encrypted)
    clear_has_encrypted();
    ::sync_pb::EncryptedData* temp = encrypted_;
    encrypted_ = NULL;
    return temp;
}
inline void PasswordSpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted)
{
    delete encrypted_;
    encrypted_ = encrypted;
    if (encrypted) {
        set_has_encrypted();
    } else {
        clear_has_encrypted();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.encrypted)
}

// optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
inline bool PasswordSpecifics::has_client_only_encrypted_data() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordSpecifics::set_has_client_only_encrypted_data()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PasswordSpecifics::clear_has_client_only_encrypted_data()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PasswordSpecifics::clear_client_only_encrypted_data()
{
    if (client_only_encrypted_data_ != NULL)
        client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
    clear_has_client_only_encrypted_data();
}
inline const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::client_only_encrypted_data() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.client_only_encrypted_data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_ : *default_instance().client_only_encrypted_data_;
#else
    return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_ : *default_instance_->client_only_encrypted_data_;
#endif
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::mutable_client_only_encrypted_data()
{
    set_has_client_only_encrypted_data();
    if (client_only_encrypted_data_ == NULL) {
        client_only_encrypted_data_ = new ::sync_pb::PasswordSpecificsData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.client_only_encrypted_data)
    return client_only_encrypted_data_;
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::release_client_only_encrypted_data()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.client_only_encrypted_data)
    clear_has_client_only_encrypted_data();
    ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
    client_only_encrypted_data_ = NULL;
    return temp;
}
inline void PasswordSpecifics::set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data)
{
    delete client_only_encrypted_data_;
    client_only_encrypted_data_ = client_only_encrypted_data;
    if (client_only_encrypted_data) {
        set_has_client_only_encrypted_data();
    } else {
        clear_has_client_only_encrypted_data();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.client_only_encrypted_data)
}

// optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
inline bool PasswordSpecifics::has_unencrypted_metadata() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordSpecifics::set_has_unencrypted_metadata()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PasswordSpecifics::clear_has_unencrypted_metadata()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PasswordSpecifics::clear_unencrypted_metadata()
{
    if (unencrypted_metadata_ != NULL)
        unencrypted_metadata_->::sync_pb::PasswordSpecificsMetadata::Clear();
    clear_has_unencrypted_metadata();
}
inline const ::sync_pb::PasswordSpecificsMetadata& PasswordSpecifics::unencrypted_metadata() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.unencrypted_metadata)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return unencrypted_metadata_ != NULL ? *unencrypted_metadata_ : *default_instance().unencrypted_metadata_;
#else
    return unencrypted_metadata_ != NULL ? *unencrypted_metadata_ : *default_instance_->unencrypted_metadata_;
#endif
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::mutable_unencrypted_metadata()
{
    set_has_unencrypted_metadata();
    if (unencrypted_metadata_ == NULL) {
        unencrypted_metadata_ = new ::sync_pb::PasswordSpecificsMetadata;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.unencrypted_metadata)
    return unencrypted_metadata_;
}
inline ::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::release_unencrypted_metadata()
{
    // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.unencrypted_metadata)
    clear_has_unencrypted_metadata();
    ::sync_pb::PasswordSpecificsMetadata* temp = unencrypted_metadata_;
    unencrypted_metadata_ = NULL;
    return temp;
}
inline void PasswordSpecifics::set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata)
{
    delete unencrypted_metadata_;
    unencrypted_metadata_ = unencrypted_metadata;
    if (unencrypted_metadata) {
        set_has_unencrypted_metadata();
    } else {
        clear_has_unencrypted_metadata();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.unencrypted_metadata)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_password_5fspecifics_2eproto__INCLUDED
