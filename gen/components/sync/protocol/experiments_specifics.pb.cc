// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "experiments_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_experiments_5fspecifics_2eproto()
{
    delete KeystoreEncryptionFlags::default_instance_;
    delete HistoryDeleteDirectives::default_instance_;
    delete AutofillCullingFlags::default_instance_;
    delete FaviconSyncFlags::default_instance_;
    delete PreCommitUpdateAvoidanceFlags::default_instance_;
    delete GcmChannelFlags::default_instance_;
    delete EnhancedBookmarksFlags::default_instance_;
    delete GcmInvalidationsFlags::default_instance_;
    delete WalletSyncFlags::default_instance_;
    delete ExperimentsSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_experiments_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_experiments_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    KeystoreEncryptionFlags::default_instance_ = new KeystoreEncryptionFlags();
    HistoryDeleteDirectives::default_instance_ = new HistoryDeleteDirectives();
    AutofillCullingFlags::default_instance_ = new AutofillCullingFlags();
    FaviconSyncFlags::default_instance_ = new FaviconSyncFlags();
    PreCommitUpdateAvoidanceFlags::default_instance_ = new PreCommitUpdateAvoidanceFlags();
    GcmChannelFlags::default_instance_ = new GcmChannelFlags();
    EnhancedBookmarksFlags::default_instance_ = new EnhancedBookmarksFlags();
    GcmInvalidationsFlags::default_instance_ = new GcmInvalidationsFlags();
    WalletSyncFlags::default_instance_ = new WalletSyncFlags();
    ExperimentsSpecifics::default_instance_ = new ExperimentsSpecifics();
    KeystoreEncryptionFlags::default_instance_->InitAsDefaultInstance();
    HistoryDeleteDirectives::default_instance_->InitAsDefaultInstance();
    AutofillCullingFlags::default_instance_->InitAsDefaultInstance();
    FaviconSyncFlags::default_instance_->InitAsDefaultInstance();
    PreCommitUpdateAvoidanceFlags::default_instance_->InitAsDefaultInstance();
    GcmChannelFlags::default_instance_->InitAsDefaultInstance();
    EnhancedBookmarksFlags::default_instance_->InitAsDefaultInstance();
    GcmInvalidationsFlags::default_instance_->InitAsDefaultInstance();
    WalletSyncFlags::default_instance_->InitAsDefaultInstance();
    ExperimentsSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_experiments_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_experiments_5fspecifics_2eproto_once_);
void protobuf_AddDesc_experiments_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_experiments_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_experiments_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_experiments_5fspecifics_2eproto {
    StaticDescriptorInitializer_experiments_5fspecifics_2eproto()
    {
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
    }
} static_descriptor_initializer_experiments_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForKeystoreEncryptionFlags(
    KeystoreEncryptionFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeystoreEncryptionFlags::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

KeystoreEncryptionFlags::KeystoreEncryptionFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.KeystoreEncryptionFlags)
}

void KeystoreEncryptionFlags::InitAsDefaultInstance()
{
}

KeystoreEncryptionFlags::KeystoreEncryptionFlags(const KeystoreEncryptionFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.KeystoreEncryptionFlags)
}

void KeystoreEncryptionFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeystoreEncryptionFlags::~KeystoreEncryptionFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.KeystoreEncryptionFlags)
    SharedDtor();
}

void KeystoreEncryptionFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void KeystoreEncryptionFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeystoreEncryptionFlags& KeystoreEncryptionFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

KeystoreEncryptionFlags* KeystoreEncryptionFlags::default_instance_ = NULL;

KeystoreEncryptionFlags* KeystoreEncryptionFlags::New(::google::protobuf::Arena* arena) const
{
    KeystoreEncryptionFlags* n = new KeystoreEncryptionFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void KeystoreEncryptionFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.KeystoreEncryptionFlags)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeystoreEncryptionFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForKeystoreEncryptionFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.KeystoreEncryptionFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.KeystoreEncryptionFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.KeystoreEncryptionFlags)
    return false;
#undef DO_
}

void KeystoreEncryptionFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.KeystoreEncryptionFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.KeystoreEncryptionFlags)
}

int KeystoreEncryptionFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.KeystoreEncryptionFlags)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void KeystoreEncryptionFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const KeystoreEncryptionFlags*>(&from));
}

void KeystoreEncryptionFlags::MergeFrom(const KeystoreEncryptionFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.KeystoreEncryptionFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void KeystoreEncryptionFlags::CopyFrom(const KeystoreEncryptionFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.KeystoreEncryptionFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool KeystoreEncryptionFlags::IsInitialized() const
{

    return true;
}

void KeystoreEncryptionFlags::Swap(KeystoreEncryptionFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void KeystoreEncryptionFlags::InternalSwap(KeystoreEncryptionFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string KeystoreEncryptionFlags::GetTypeName() const
{
    return "sync_pb.KeystoreEncryptionFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeystoreEncryptionFlags

// optional bool enabled = 1;
bool KeystoreEncryptionFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeystoreEncryptionFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void KeystoreEncryptionFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void KeystoreEncryptionFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool KeystoreEncryptionFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.KeystoreEncryptionFlags.enabled)
    return enabled_;
}
void KeystoreEncryptionFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.KeystoreEncryptionFlags.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForHistoryDeleteDirectives(
    HistoryDeleteDirectives* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryDeleteDirectives::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryDeleteDirectives::HistoryDeleteDirectives()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.HistoryDeleteDirectives)
}

void HistoryDeleteDirectives::InitAsDefaultInstance()
{
}

HistoryDeleteDirectives::HistoryDeleteDirectives(const HistoryDeleteDirectives& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectives)
}

void HistoryDeleteDirectives::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDeleteDirectives::~HistoryDeleteDirectives()
{
    // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectives)
    SharedDtor();
}

void HistoryDeleteDirectives::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void HistoryDeleteDirectives::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HistoryDeleteDirectives& HistoryDeleteDirectives::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

HistoryDeleteDirectives* HistoryDeleteDirectives::default_instance_ = NULL;

HistoryDeleteDirectives* HistoryDeleteDirectives::New(::google::protobuf::Arena* arena) const
{
    HistoryDeleteDirectives* n = new HistoryDeleteDirectives;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void HistoryDeleteDirectives::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectives)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HistoryDeleteDirectives::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForHistoryDeleteDirectives, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.HistoryDeleteDirectives)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.HistoryDeleteDirectives)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.HistoryDeleteDirectives)
    return false;
#undef DO_
}

void HistoryDeleteDirectives::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.HistoryDeleteDirectives)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.HistoryDeleteDirectives)
}

int HistoryDeleteDirectives::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectives)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void HistoryDeleteDirectives::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const HistoryDeleteDirectives*>(&from));
}

void HistoryDeleteDirectives::MergeFrom(const HistoryDeleteDirectives& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectives)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void HistoryDeleteDirectives::CopyFrom(const HistoryDeleteDirectives& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectives)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool HistoryDeleteDirectives::IsInitialized() const
{

    return true;
}

void HistoryDeleteDirectives::Swap(HistoryDeleteDirectives* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void HistoryDeleteDirectives::InternalSwap(HistoryDeleteDirectives* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string HistoryDeleteDirectives::GetTypeName() const
{
    return "sync_pb.HistoryDeleteDirectives";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryDeleteDirectives

// optional bool enabled = 1;
bool HistoryDeleteDirectives::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryDeleteDirectives::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void HistoryDeleteDirectives::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void HistoryDeleteDirectives::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool HistoryDeleteDirectives::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectives.enabled)
    return enabled_;
}
void HistoryDeleteDirectives::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.HistoryDeleteDirectives.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAutofillCullingFlags(
    AutofillCullingFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillCullingFlags::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillCullingFlags::AutofillCullingFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.AutofillCullingFlags)
}

void AutofillCullingFlags::InitAsDefaultInstance()
{
}

AutofillCullingFlags::AutofillCullingFlags(const AutofillCullingFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.AutofillCullingFlags)
}

void AutofillCullingFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillCullingFlags::~AutofillCullingFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.AutofillCullingFlags)
    SharedDtor();
}

void AutofillCullingFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillCullingFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillCullingFlags& AutofillCullingFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

AutofillCullingFlags* AutofillCullingFlags::default_instance_ = NULL;

AutofillCullingFlags* AutofillCullingFlags::New(::google::protobuf::Arena* arena) const
{
    AutofillCullingFlags* n = new AutofillCullingFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillCullingFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.AutofillCullingFlags)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillCullingFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillCullingFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.AutofillCullingFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.AutofillCullingFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.AutofillCullingFlags)
    return false;
#undef DO_
}

void AutofillCullingFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.AutofillCullingFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.AutofillCullingFlags)
}

int AutofillCullingFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.AutofillCullingFlags)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillCullingFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillCullingFlags*>(&from));
}

void AutofillCullingFlags::MergeFrom(const AutofillCullingFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AutofillCullingFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillCullingFlags::CopyFrom(const AutofillCullingFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AutofillCullingFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillCullingFlags::IsInitialized() const
{

    return true;
}

void AutofillCullingFlags::Swap(AutofillCullingFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillCullingFlags::InternalSwap(AutofillCullingFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillCullingFlags::GetTypeName() const
{
    return "sync_pb.AutofillCullingFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillCullingFlags

// optional bool enabled = 1;
bool AutofillCullingFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillCullingFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillCullingFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillCullingFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool AutofillCullingFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AutofillCullingFlags.enabled)
    return enabled_;
}
void AutofillCullingFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AutofillCullingFlags.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFaviconSyncFlags(
    FaviconSyncFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaviconSyncFlags::kEnabledFieldNumber;
const int FaviconSyncFlags::kFaviconSyncLimitFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

FaviconSyncFlags::FaviconSyncFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.FaviconSyncFlags)
}

void FaviconSyncFlags::InitAsDefaultInstance()
{
}

FaviconSyncFlags::FaviconSyncFlags(const FaviconSyncFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconSyncFlags)
}

void FaviconSyncFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    favicon_sync_limit_ = 200;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaviconSyncFlags::~FaviconSyncFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.FaviconSyncFlags)
    SharedDtor();
}

void FaviconSyncFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void FaviconSyncFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaviconSyncFlags& FaviconSyncFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

FaviconSyncFlags* FaviconSyncFlags::default_instance_ = NULL;

FaviconSyncFlags* FaviconSyncFlags::New(::google::protobuf::Arena* arena) const
{
    FaviconSyncFlags* n = new FaviconSyncFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void FaviconSyncFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.FaviconSyncFlags)
    if (_has_bits_[0 / 32] & 3u) {
        enabled_ = false;
        favicon_sync_limit_ = 200;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FaviconSyncFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForFaviconSyncFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.FaviconSyncFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_favicon_sync_limit;
            break;
        }

        // optional int32 favicon_sync_limit = 2 [default = 200];
        case 2: {
            if (tag == 16) {
            parse_favicon_sync_limit:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &favicon_sync_limit_)));
                set_has_favicon_sync_limit();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.FaviconSyncFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.FaviconSyncFlags)
    return false;
#undef DO_
}

void FaviconSyncFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.FaviconSyncFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    // optional int32 favicon_sync_limit = 2 [default = 200];
    if (has_favicon_sync_limit()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->favicon_sync_limit(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.FaviconSyncFlags)
}

int FaviconSyncFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconSyncFlags)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional bool enabled = 1;
        if (has_enabled()) {
            total_size += 1 + 1;
        }

        // optional int32 favicon_sync_limit = 2 [default = 200];
        if (has_favicon_sync_limit()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->favicon_sync_limit());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void FaviconSyncFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const FaviconSyncFlags*>(&from));
}

void FaviconSyncFlags::MergeFrom(const FaviconSyncFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconSyncFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
        if (from.has_favicon_sync_limit()) {
            set_favicon_sync_limit(from.favicon_sync_limit());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void FaviconSyncFlags::CopyFrom(const FaviconSyncFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconSyncFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool FaviconSyncFlags::IsInitialized() const
{

    return true;
}

void FaviconSyncFlags::Swap(FaviconSyncFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void FaviconSyncFlags::InternalSwap(FaviconSyncFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(favicon_sync_limit_, other->favicon_sync_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string FaviconSyncFlags::GetTypeName() const
{
    return "sync_pb.FaviconSyncFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaviconSyncFlags

// optional bool enabled = 1;
bool FaviconSyncFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaviconSyncFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void FaviconSyncFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void FaviconSyncFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool FaviconSyncFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconSyncFlags.enabled)
    return enabled_;
}
void FaviconSyncFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.FaviconSyncFlags.enabled)
}

// optional int32 favicon_sync_limit = 2 [default = 200];
bool FaviconSyncFlags::has_favicon_sync_limit() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaviconSyncFlags::set_has_favicon_sync_limit()
{
    _has_bits_[0] |= 0x00000002u;
}
void FaviconSyncFlags::clear_has_favicon_sync_limit()
{
    _has_bits_[0] &= ~0x00000002u;
}
void FaviconSyncFlags::clear_favicon_sync_limit()
{
    favicon_sync_limit_ = 200;
    clear_has_favicon_sync_limit();
}
::google::protobuf::int32 FaviconSyncFlags::favicon_sync_limit() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconSyncFlags.favicon_sync_limit)
    return favicon_sync_limit_;
}
void FaviconSyncFlags::set_favicon_sync_limit(::google::protobuf::int32 value)
{
    set_has_favicon_sync_limit();
    favicon_sync_limit_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.FaviconSyncFlags.favicon_sync_limit)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPreCommitUpdateAvoidanceFlags(
    PreCommitUpdateAvoidanceFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreCommitUpdateAvoidanceFlags::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.PreCommitUpdateAvoidanceFlags)
}

void PreCommitUpdateAvoidanceFlags::InitAsDefaultInstance()
{
}

PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags(const PreCommitUpdateAvoidanceFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.PreCommitUpdateAvoidanceFlags)
}

void PreCommitUpdateAvoidanceFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreCommitUpdateAvoidanceFlags::~PreCommitUpdateAvoidanceFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.PreCommitUpdateAvoidanceFlags)
    SharedDtor();
}

void PreCommitUpdateAvoidanceFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PreCommitUpdateAvoidanceFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PreCommitUpdateAvoidanceFlags& PreCommitUpdateAvoidanceFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

PreCommitUpdateAvoidanceFlags* PreCommitUpdateAvoidanceFlags::default_instance_ = NULL;

PreCommitUpdateAvoidanceFlags* PreCommitUpdateAvoidanceFlags::New(::google::protobuf::Arena* arena) const
{
    PreCommitUpdateAvoidanceFlags* n = new PreCommitUpdateAvoidanceFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PreCommitUpdateAvoidanceFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.PreCommitUpdateAvoidanceFlags)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PreCommitUpdateAvoidanceFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPreCommitUpdateAvoidanceFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.PreCommitUpdateAvoidanceFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.PreCommitUpdateAvoidanceFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.PreCommitUpdateAvoidanceFlags)
    return false;
#undef DO_
}

void PreCommitUpdateAvoidanceFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.PreCommitUpdateAvoidanceFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.PreCommitUpdateAvoidanceFlags)
}

int PreCommitUpdateAvoidanceFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.PreCommitUpdateAvoidanceFlags)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PreCommitUpdateAvoidanceFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PreCommitUpdateAvoidanceFlags*>(&from));
}

void PreCommitUpdateAvoidanceFlags::MergeFrom(const PreCommitUpdateAvoidanceFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PreCommitUpdateAvoidanceFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PreCommitUpdateAvoidanceFlags::CopyFrom(const PreCommitUpdateAvoidanceFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PreCommitUpdateAvoidanceFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PreCommitUpdateAvoidanceFlags::IsInitialized() const
{

    return true;
}

void PreCommitUpdateAvoidanceFlags::Swap(PreCommitUpdateAvoidanceFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PreCommitUpdateAvoidanceFlags::InternalSwap(PreCommitUpdateAvoidanceFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PreCommitUpdateAvoidanceFlags::GetTypeName() const
{
    return "sync_pb.PreCommitUpdateAvoidanceFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreCommitUpdateAvoidanceFlags

// optional bool enabled = 1;
bool PreCommitUpdateAvoidanceFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PreCommitUpdateAvoidanceFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void PreCommitUpdateAvoidanceFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PreCommitUpdateAvoidanceFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool PreCommitUpdateAvoidanceFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.PreCommitUpdateAvoidanceFlags.enabled)
    return enabled_;
}
void PreCommitUpdateAvoidanceFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.PreCommitUpdateAvoidanceFlags.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGcmChannelFlags(
    GcmChannelFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcmChannelFlags::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

GcmChannelFlags::GcmChannelFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.GcmChannelFlags)
}

void GcmChannelFlags::InitAsDefaultInstance()
{
}

GcmChannelFlags::GcmChannelFlags(const GcmChannelFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.GcmChannelFlags)
}

void GcmChannelFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GcmChannelFlags::~GcmChannelFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.GcmChannelFlags)
    SharedDtor();
}

void GcmChannelFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void GcmChannelFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmChannelFlags& GcmChannelFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

GcmChannelFlags* GcmChannelFlags::default_instance_ = NULL;

GcmChannelFlags* GcmChannelFlags::New(::google::protobuf::Arena* arena) const
{
    GcmChannelFlags* n = new GcmChannelFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void GcmChannelFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.GcmChannelFlags)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GcmChannelFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForGcmChannelFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.GcmChannelFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.GcmChannelFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.GcmChannelFlags)
    return false;
#undef DO_
}

void GcmChannelFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.GcmChannelFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.GcmChannelFlags)
}

int GcmChannelFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.GcmChannelFlags)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void GcmChannelFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const GcmChannelFlags*>(&from));
}

void GcmChannelFlags::MergeFrom(const GcmChannelFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GcmChannelFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void GcmChannelFlags::CopyFrom(const GcmChannelFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GcmChannelFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool GcmChannelFlags::IsInitialized() const
{

    return true;
}

void GcmChannelFlags::Swap(GcmChannelFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void GcmChannelFlags::InternalSwap(GcmChannelFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string GcmChannelFlags::GetTypeName() const
{
    return "sync_pb.GcmChannelFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcmChannelFlags

// optional bool enabled = 1;
bool GcmChannelFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void GcmChannelFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void GcmChannelFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void GcmChannelFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool GcmChannelFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.GcmChannelFlags.enabled)
    return enabled_;
}
void GcmChannelFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.GcmChannelFlags.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForEnhancedBookmarksFlags(
    EnhancedBookmarksFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnhancedBookmarksFlags::kEnabledFieldNumber;
const int EnhancedBookmarksFlags::kExtensionIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

EnhancedBookmarksFlags::EnhancedBookmarksFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.EnhancedBookmarksFlags)
}

void EnhancedBookmarksFlags::InitAsDefaultInstance()
{
}

EnhancedBookmarksFlags::EnhancedBookmarksFlags(const EnhancedBookmarksFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.EnhancedBookmarksFlags)
}

void EnhancedBookmarksFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    extension_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhancedBookmarksFlags::~EnhancedBookmarksFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.EnhancedBookmarksFlags)
    SharedDtor();
}

void EnhancedBookmarksFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extension_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void EnhancedBookmarksFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnhancedBookmarksFlags& EnhancedBookmarksFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

EnhancedBookmarksFlags* EnhancedBookmarksFlags::default_instance_ = NULL;

EnhancedBookmarksFlags* EnhancedBookmarksFlags::New(::google::protobuf::Arena* arena) const
{
    EnhancedBookmarksFlags* n = new EnhancedBookmarksFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void EnhancedBookmarksFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.EnhancedBookmarksFlags)
    if (_has_bits_[0 / 32] & 3u) {
        enabled_ = false;
        if (has_extension_id()) {
            extension_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EnhancedBookmarksFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForEnhancedBookmarksFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.EnhancedBookmarksFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_extension_id;
            break;
        }

        // optional string extension_id = 2;
        case 2: {
            if (tag == 18) {
            parse_extension_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_extension_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.EnhancedBookmarksFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.EnhancedBookmarksFlags)
    return false;
#undef DO_
}

void EnhancedBookmarksFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.EnhancedBookmarksFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    // optional string extension_id = 2;
    if (has_extension_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->extension_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.EnhancedBookmarksFlags)
}

int EnhancedBookmarksFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.EnhancedBookmarksFlags)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional bool enabled = 1;
        if (has_enabled()) {
            total_size += 1 + 1;
        }

        // optional string extension_id = 2;
        if (has_extension_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->extension_id());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void EnhancedBookmarksFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const EnhancedBookmarksFlags*>(&from));
}

void EnhancedBookmarksFlags::MergeFrom(const EnhancedBookmarksFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.EnhancedBookmarksFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
        if (from.has_extension_id()) {
            set_has_extension_id();
            extension_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void EnhancedBookmarksFlags::CopyFrom(const EnhancedBookmarksFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.EnhancedBookmarksFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool EnhancedBookmarksFlags::IsInitialized() const
{

    return true;
}

void EnhancedBookmarksFlags::Swap(EnhancedBookmarksFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void EnhancedBookmarksFlags::InternalSwap(EnhancedBookmarksFlags* other)
{
    std::swap(enabled_, other->enabled_);
    extension_id_.Swap(&other->extension_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string EnhancedBookmarksFlags::GetTypeName() const
{
    return "sync_pb.EnhancedBookmarksFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnhancedBookmarksFlags

// optional bool enabled = 1;
bool EnhancedBookmarksFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnhancedBookmarksFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void EnhancedBookmarksFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void EnhancedBookmarksFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool EnhancedBookmarksFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.EnhancedBookmarksFlags.enabled)
    return enabled_;
}
void EnhancedBookmarksFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.EnhancedBookmarksFlags.enabled)
}

// optional string extension_id = 2;
bool EnhancedBookmarksFlags::has_extension_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnhancedBookmarksFlags::set_has_extension_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void EnhancedBookmarksFlags::clear_has_extension_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void EnhancedBookmarksFlags::clear_extension_id()
{
    extension_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_extension_id();
}
const ::std::string& EnhancedBookmarksFlags::extension_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.EnhancedBookmarksFlags.extension_id)
    return extension_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnhancedBookmarksFlags::set_extension_id(const ::std::string& value)
{
    set_has_extension_id();
    extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.EnhancedBookmarksFlags.extension_id)
}
void EnhancedBookmarksFlags::set_extension_id(const char* value)
{
    set_has_extension_id();
    extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.EnhancedBookmarksFlags.extension_id)
}
void EnhancedBookmarksFlags::set_extension_id(const char* value, size_t size)
{
    set_has_extension_id();
    extension_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.EnhancedBookmarksFlags.extension_id)
}
::std::string* EnhancedBookmarksFlags::mutable_extension_id()
{
    set_has_extension_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.EnhancedBookmarksFlags.extension_id)
    return extension_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnhancedBookmarksFlags::release_extension_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.EnhancedBookmarksFlags.extension_id)
    clear_has_extension_id();
    return extension_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnhancedBookmarksFlags::set_allocated_extension_id(::std::string* extension_id)
{
    if (extension_id != NULL) {
        set_has_extension_id();
    } else {
        clear_has_extension_id();
    }
    extension_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.EnhancedBookmarksFlags.extension_id)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGcmInvalidationsFlags(
    GcmInvalidationsFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcmInvalidationsFlags::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

GcmInvalidationsFlags::GcmInvalidationsFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.GcmInvalidationsFlags)
}

void GcmInvalidationsFlags::InitAsDefaultInstance()
{
}

GcmInvalidationsFlags::GcmInvalidationsFlags(const GcmInvalidationsFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.GcmInvalidationsFlags)
}

void GcmInvalidationsFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GcmInvalidationsFlags::~GcmInvalidationsFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.GcmInvalidationsFlags)
    SharedDtor();
}

void GcmInvalidationsFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void GcmInvalidationsFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmInvalidationsFlags& GcmInvalidationsFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

GcmInvalidationsFlags* GcmInvalidationsFlags::default_instance_ = NULL;

GcmInvalidationsFlags* GcmInvalidationsFlags::New(::google::protobuf::Arena* arena) const
{
    GcmInvalidationsFlags* n = new GcmInvalidationsFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void GcmInvalidationsFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.GcmInvalidationsFlags)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GcmInvalidationsFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForGcmInvalidationsFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.GcmInvalidationsFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.GcmInvalidationsFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.GcmInvalidationsFlags)
    return false;
#undef DO_
}

void GcmInvalidationsFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.GcmInvalidationsFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.GcmInvalidationsFlags)
}

int GcmInvalidationsFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.GcmInvalidationsFlags)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void GcmInvalidationsFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const GcmInvalidationsFlags*>(&from));
}

void GcmInvalidationsFlags::MergeFrom(const GcmInvalidationsFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GcmInvalidationsFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void GcmInvalidationsFlags::CopyFrom(const GcmInvalidationsFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GcmInvalidationsFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool GcmInvalidationsFlags::IsInitialized() const
{

    return true;
}

void GcmInvalidationsFlags::Swap(GcmInvalidationsFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void GcmInvalidationsFlags::InternalSwap(GcmInvalidationsFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string GcmInvalidationsFlags::GetTypeName() const
{
    return "sync_pb.GcmInvalidationsFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcmInvalidationsFlags

// optional bool enabled = 1;
bool GcmInvalidationsFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void GcmInvalidationsFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void GcmInvalidationsFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void GcmInvalidationsFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool GcmInvalidationsFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.GcmInvalidationsFlags.enabled)
    return enabled_;
}
void GcmInvalidationsFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.GcmInvalidationsFlags.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForWalletSyncFlags(
    WalletSyncFlags* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalletSyncFlags::kEnabledFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

WalletSyncFlags::WalletSyncFlags()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.WalletSyncFlags)
}

void WalletSyncFlags::InitAsDefaultInstance()
{
}

WalletSyncFlags::WalletSyncFlags(const WalletSyncFlags& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.WalletSyncFlags)
}

void WalletSyncFlags::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WalletSyncFlags::~WalletSyncFlags()
{
    // @@protoc_insertion_point(destructor:sync_pb.WalletSyncFlags)
    SharedDtor();
}

void WalletSyncFlags::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void WalletSyncFlags::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WalletSyncFlags& WalletSyncFlags::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

WalletSyncFlags* WalletSyncFlags::default_instance_ = NULL;

WalletSyncFlags* WalletSyncFlags::New(::google::protobuf::Arena* arena) const
{
    WalletSyncFlags* n = new WalletSyncFlags;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void WalletSyncFlags::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.WalletSyncFlags)
    enabled_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WalletSyncFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForWalletSyncFlags, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.WalletSyncFlags)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool enabled = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &enabled_)));
                set_has_enabled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.WalletSyncFlags)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.WalletSyncFlags)
    return false;
#undef DO_
}

void WalletSyncFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.WalletSyncFlags)
    // optional bool enabled = 1;
    if (has_enabled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.WalletSyncFlags)
}

int WalletSyncFlags::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.WalletSyncFlags)
    int total_size = 0;

    // optional bool enabled = 1;
    if (has_enabled()) {
        total_size += 1 + 1;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void WalletSyncFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const WalletSyncFlags*>(&from));
}

void WalletSyncFlags::MergeFrom(const WalletSyncFlags& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.WalletSyncFlags)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_enabled()) {
            set_enabled(from.enabled());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void WalletSyncFlags::CopyFrom(const WalletSyncFlags& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.WalletSyncFlags)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool WalletSyncFlags::IsInitialized() const
{

    return true;
}

void WalletSyncFlags::Swap(WalletSyncFlags* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void WalletSyncFlags::InternalSwap(WalletSyncFlags* other)
{
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string WalletSyncFlags::GetTypeName() const
{
    return "sync_pb.WalletSyncFlags";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WalletSyncFlags

// optional bool enabled = 1;
bool WalletSyncFlags::has_enabled() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void WalletSyncFlags::set_has_enabled()
{
    _has_bits_[0] |= 0x00000001u;
}
void WalletSyncFlags::clear_has_enabled()
{
    _has_bits_[0] &= ~0x00000001u;
}
void WalletSyncFlags::clear_enabled()
{
    enabled_ = false;
    clear_has_enabled();
}
bool WalletSyncFlags::enabled() const
{
    // @@protoc_insertion_point(field_get:sync_pb.WalletSyncFlags.enabled)
    return enabled_;
}
void WalletSyncFlags::set_enabled(bool value)
{
    set_has_enabled();
    enabled_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.WalletSyncFlags.enabled)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForExperimentsSpecifics(
    ExperimentsSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExperimentsSpecifics::kKeystoreEncryptionFieldNumber;
const int ExperimentsSpecifics::kHistoryDeleteDirectivesFieldNumber;
const int ExperimentsSpecifics::kAutofillCullingFieldNumber;
const int ExperimentsSpecifics::kFaviconSyncFieldNumber;
const int ExperimentsSpecifics::kPreCommitUpdateAvoidanceFieldNumber;
const int ExperimentsSpecifics::kGcmChannelFieldNumber;
const int ExperimentsSpecifics::kObsoleteEnhancedBookmarksFieldNumber;
const int ExperimentsSpecifics::kGcmInvalidationsFieldNumber;
const int ExperimentsSpecifics::kObsoleteWalletSyncFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ExperimentsSpecifics::ExperimentsSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ExperimentsSpecifics)
}

void ExperimentsSpecifics::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    keystore_encryption_ = const_cast<::sync_pb::KeystoreEncryptionFlags*>(
        ::sync_pb::KeystoreEncryptionFlags::internal_default_instance());
#else
    keystore_encryption_ = const_cast<::sync_pb::KeystoreEncryptionFlags*>(&::sync_pb::KeystoreEncryptionFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    history_delete_directives_ = const_cast<::sync_pb::HistoryDeleteDirectives*>(
        ::sync_pb::HistoryDeleteDirectives::internal_default_instance());
#else
    history_delete_directives_ = const_cast<::sync_pb::HistoryDeleteDirectives*>(&::sync_pb::HistoryDeleteDirectives::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    autofill_culling_ = const_cast<::sync_pb::AutofillCullingFlags*>(
        ::sync_pb::AutofillCullingFlags::internal_default_instance());
#else
    autofill_culling_ = const_cast<::sync_pb::AutofillCullingFlags*>(&::sync_pb::AutofillCullingFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    favicon_sync_ = const_cast<::sync_pb::FaviconSyncFlags*>(
        ::sync_pb::FaviconSyncFlags::internal_default_instance());
#else
    favicon_sync_ = const_cast<::sync_pb::FaviconSyncFlags*>(&::sync_pb::FaviconSyncFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    pre_commit_update_avoidance_ = const_cast<::sync_pb::PreCommitUpdateAvoidanceFlags*>(
        ::sync_pb::PreCommitUpdateAvoidanceFlags::internal_default_instance());
#else
    pre_commit_update_avoidance_ = const_cast<::sync_pb::PreCommitUpdateAvoidanceFlags*>(&::sync_pb::PreCommitUpdateAvoidanceFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    gcm_channel_ = const_cast<::sync_pb::GcmChannelFlags*>(
        ::sync_pb::GcmChannelFlags::internal_default_instance());
#else
    gcm_channel_ = const_cast<::sync_pb::GcmChannelFlags*>(&::sync_pb::GcmChannelFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    obsolete_enhanced_bookmarks_ = const_cast<::sync_pb::EnhancedBookmarksFlags*>(
        ::sync_pb::EnhancedBookmarksFlags::internal_default_instance());
#else
    obsolete_enhanced_bookmarks_ = const_cast<::sync_pb::EnhancedBookmarksFlags*>(&::sync_pb::EnhancedBookmarksFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    gcm_invalidations_ = const_cast<::sync_pb::GcmInvalidationsFlags*>(
        ::sync_pb::GcmInvalidationsFlags::internal_default_instance());
#else
    gcm_invalidations_ = const_cast<::sync_pb::GcmInvalidationsFlags*>(&::sync_pb::GcmInvalidationsFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    obsolete_wallet_sync_ = const_cast<::sync_pb::WalletSyncFlags*>(
        ::sync_pb::WalletSyncFlags::internal_default_instance());
#else
    obsolete_wallet_sync_ = const_cast<::sync_pb::WalletSyncFlags*>(&::sync_pb::WalletSyncFlags::default_instance());
#endif
}

ExperimentsSpecifics::ExperimentsSpecifics(const ExperimentsSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ExperimentsSpecifics)
}

void ExperimentsSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    keystore_encryption_ = NULL;
    history_delete_directives_ = NULL;
    autofill_culling_ = NULL;
    favicon_sync_ = NULL;
    pre_commit_update_avoidance_ = NULL;
    gcm_channel_ = NULL;
    obsolete_enhanced_bookmarks_ = NULL;
    gcm_invalidations_ = NULL;
    obsolete_wallet_sync_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExperimentsSpecifics::~ExperimentsSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.ExperimentsSpecifics)
    SharedDtor();
}

void ExperimentsSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete keystore_encryption_;
        delete history_delete_directives_;
        delete autofill_culling_;
        delete favicon_sync_;
        delete pre_commit_update_avoidance_;
        delete gcm_channel_;
        delete obsolete_enhanced_bookmarks_;
        delete gcm_invalidations_;
        delete obsolete_wallet_sync_;
    }
}

void ExperimentsSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExperimentsSpecifics& ExperimentsSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

ExperimentsSpecifics* ExperimentsSpecifics::default_instance_ = NULL;

ExperimentsSpecifics* ExperimentsSpecifics::New(::google::protobuf::Arena* arena) const
{
    ExperimentsSpecifics* n = new ExperimentsSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ExperimentsSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.ExperimentsSpecifics)
    if (_has_bits_[0 / 32] & 255u) {
        if (has_keystore_encryption()) {
            if (keystore_encryption_ != NULL)
                keystore_encryption_->::sync_pb::KeystoreEncryptionFlags::Clear();
        }
        if (has_history_delete_directives()) {
            if (history_delete_directives_ != NULL)
                history_delete_directives_->::sync_pb::HistoryDeleteDirectives::Clear();
        }
        if (has_autofill_culling()) {
            if (autofill_culling_ != NULL)
                autofill_culling_->::sync_pb::AutofillCullingFlags::Clear();
        }
        if (has_favicon_sync()) {
            if (favicon_sync_ != NULL)
                favicon_sync_->::sync_pb::FaviconSyncFlags::Clear();
        }
        if (has_pre_commit_update_avoidance()) {
            if (pre_commit_update_avoidance_ != NULL)
                pre_commit_update_avoidance_->::sync_pb::PreCommitUpdateAvoidanceFlags::Clear();
        }
        if (has_gcm_channel()) {
            if (gcm_channel_ != NULL)
                gcm_channel_->::sync_pb::GcmChannelFlags::Clear();
        }
        if (has_obsolete_enhanced_bookmarks()) {
            if (obsolete_enhanced_bookmarks_ != NULL)
                obsolete_enhanced_bookmarks_->::sync_pb::EnhancedBookmarksFlags::Clear();
        }
        if (has_gcm_invalidations()) {
            if (gcm_invalidations_ != NULL)
                gcm_invalidations_->::sync_pb::GcmInvalidationsFlags::Clear();
        }
    }
    if (has_obsolete_wallet_sync()) {
        if (obsolete_wallet_sync_ != NULL)
            obsolete_wallet_sync_->::sync_pb::WalletSyncFlags::Clear();
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExperimentsSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForExperimentsSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ExperimentsSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_keystore_encryption()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_history_delete_directives;
            break;
        }

        // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
        case 2: {
            if (tag == 18) {
            parse_history_delete_directives:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_history_delete_directives()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_autofill_culling;
            break;
        }

        // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
        case 3: {
            if (tag == 26) {
            parse_autofill_culling:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_autofill_culling()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_favicon_sync;
            break;
        }

        // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
        case 4: {
            if (tag == 34) {
            parse_favicon_sync:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_favicon_sync()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_pre_commit_update_avoidance;
            break;
        }

        // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
        case 5: {
            if (tag == 42) {
            parse_pre_commit_update_avoidance:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_pre_commit_update_avoidance()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_gcm_channel;
            break;
        }

        // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
        case 6: {
            if (tag == 50) {
            parse_gcm_channel:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_gcm_channel()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_obsolete_enhanced_bookmarks;
            break;
        }

        // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
        case 7: {
            if (tag == 58) {
            parse_obsolete_enhanced_bookmarks:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_obsolete_enhanced_bookmarks()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_gcm_invalidations;
            break;
        }

        // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
        case 8: {
            if (tag == 66) {
            parse_gcm_invalidations:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_gcm_invalidations()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_obsolete_wallet_sync;
            break;
        }

        // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
        case 9: {
            if (tag == 74) {
            parse_obsolete_wallet_sync:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_obsolete_wallet_sync()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ExperimentsSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ExperimentsSpecifics)
    return false;
#undef DO_
}

void ExperimentsSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ExperimentsSpecifics)
    // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
    if (has_keystore_encryption()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->keystore_encryption_, output);
    }

    // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
    if (has_history_delete_directives()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->history_delete_directives_, output);
    }

    // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
    if (has_autofill_culling()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->autofill_culling_, output);
    }

    // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
    if (has_favicon_sync()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->favicon_sync_, output);
    }

    // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
    if (has_pre_commit_update_avoidance()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->pre_commit_update_avoidance_, output);
    }

    // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
    if (has_gcm_channel()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *this->gcm_channel_, output);
    }

    // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
    if (has_obsolete_enhanced_bookmarks()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, *this->obsolete_enhanced_bookmarks_, output);
    }

    // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
    if (has_gcm_invalidations()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->gcm_invalidations_, output);
    }

    // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
    if (has_obsolete_wallet_sync()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, *this->obsolete_wallet_sync_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ExperimentsSpecifics)
}

int ExperimentsSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ExperimentsSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
        if (has_keystore_encryption()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->keystore_encryption_);
        }

        // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
        if (has_history_delete_directives()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->history_delete_directives_);
        }

        // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
        if (has_autofill_culling()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->autofill_culling_);
        }

        // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
        if (has_favicon_sync()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->favicon_sync_);
        }

        // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
        if (has_pre_commit_update_avoidance()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->pre_commit_update_avoidance_);
        }

        // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
        if (has_gcm_channel()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->gcm_channel_);
        }

        // optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
        if (has_obsolete_enhanced_bookmarks()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->obsolete_enhanced_bookmarks_);
        }

        // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
        if (has_gcm_invalidations()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->gcm_invalidations_);
        }
    }
    // optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
    if (has_obsolete_wallet_sync()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->obsolete_wallet_sync_);
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ExperimentsSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ExperimentsSpecifics*>(&from));
}

void ExperimentsSpecifics::MergeFrom(const ExperimentsSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ExperimentsSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_keystore_encryption()) {
            mutable_keystore_encryption()->::sync_pb::KeystoreEncryptionFlags::MergeFrom(from.keystore_encryption());
        }
        if (from.has_history_delete_directives()) {
            mutable_history_delete_directives()->::sync_pb::HistoryDeleteDirectives::MergeFrom(from.history_delete_directives());
        }
        if (from.has_autofill_culling()) {
            mutable_autofill_culling()->::sync_pb::AutofillCullingFlags::MergeFrom(from.autofill_culling());
        }
        if (from.has_favicon_sync()) {
            mutable_favicon_sync()->::sync_pb::FaviconSyncFlags::MergeFrom(from.favicon_sync());
        }
        if (from.has_pre_commit_update_avoidance()) {
            mutable_pre_commit_update_avoidance()->::sync_pb::PreCommitUpdateAvoidanceFlags::MergeFrom(from.pre_commit_update_avoidance());
        }
        if (from.has_gcm_channel()) {
            mutable_gcm_channel()->::sync_pb::GcmChannelFlags::MergeFrom(from.gcm_channel());
        }
        if (from.has_obsolete_enhanced_bookmarks()) {
            mutable_obsolete_enhanced_bookmarks()->::sync_pb::EnhancedBookmarksFlags::MergeFrom(from.obsolete_enhanced_bookmarks());
        }
        if (from.has_gcm_invalidations()) {
            mutable_gcm_invalidations()->::sync_pb::GcmInvalidationsFlags::MergeFrom(from.gcm_invalidations());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_obsolete_wallet_sync()) {
            mutable_obsolete_wallet_sync()->::sync_pb::WalletSyncFlags::MergeFrom(from.obsolete_wallet_sync());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ExperimentsSpecifics::CopyFrom(const ExperimentsSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ExperimentsSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ExperimentsSpecifics::IsInitialized() const
{

    return true;
}

void ExperimentsSpecifics::Swap(ExperimentsSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ExperimentsSpecifics::InternalSwap(ExperimentsSpecifics* other)
{
    std::swap(keystore_encryption_, other->keystore_encryption_);
    std::swap(history_delete_directives_, other->history_delete_directives_);
    std::swap(autofill_culling_, other->autofill_culling_);
    std::swap(favicon_sync_, other->favicon_sync_);
    std::swap(pre_commit_update_avoidance_, other->pre_commit_update_avoidance_);
    std::swap(gcm_channel_, other->gcm_channel_);
    std::swap(obsolete_enhanced_bookmarks_, other->obsolete_enhanced_bookmarks_);
    std::swap(gcm_invalidations_, other->gcm_invalidations_);
    std::swap(obsolete_wallet_sync_, other->obsolete_wallet_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ExperimentsSpecifics::GetTypeName() const
{
    return "sync_pb.ExperimentsSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExperimentsSpecifics

// optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
bool ExperimentsSpecifics::has_keystore_encryption() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExperimentsSpecifics::set_has_keystore_encryption()
{
    _has_bits_[0] |= 0x00000001u;
}
void ExperimentsSpecifics::clear_has_keystore_encryption()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ExperimentsSpecifics::clear_keystore_encryption()
{
    if (keystore_encryption_ != NULL)
        keystore_encryption_->::sync_pb::KeystoreEncryptionFlags::Clear();
    clear_has_keystore_encryption();
}
const ::sync_pb::KeystoreEncryptionFlags& ExperimentsSpecifics::keystore_encryption() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.keystore_encryption)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return keystore_encryption_ != NULL ? *keystore_encryption_ : *default_instance().keystore_encryption_;
#else
    return keystore_encryption_ != NULL ? *keystore_encryption_ : *default_instance_->keystore_encryption_;
#endif
}
::sync_pb::KeystoreEncryptionFlags* ExperimentsSpecifics::mutable_keystore_encryption()
{
    set_has_keystore_encryption();
    if (keystore_encryption_ == NULL) {
        keystore_encryption_ = new ::sync_pb::KeystoreEncryptionFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.keystore_encryption)
    return keystore_encryption_;
}
::sync_pb::KeystoreEncryptionFlags* ExperimentsSpecifics::release_keystore_encryption()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.keystore_encryption)
    clear_has_keystore_encryption();
    ::sync_pb::KeystoreEncryptionFlags* temp = keystore_encryption_;
    keystore_encryption_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_keystore_encryption(::sync_pb::KeystoreEncryptionFlags* keystore_encryption)
{
    delete keystore_encryption_;
    keystore_encryption_ = keystore_encryption;
    if (keystore_encryption) {
        set_has_keystore_encryption();
    } else {
        clear_has_keystore_encryption();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.keystore_encryption)
}

// optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
bool ExperimentsSpecifics::has_history_delete_directives() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExperimentsSpecifics::set_has_history_delete_directives()
{
    _has_bits_[0] |= 0x00000002u;
}
void ExperimentsSpecifics::clear_has_history_delete_directives()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ExperimentsSpecifics::clear_history_delete_directives()
{
    if (history_delete_directives_ != NULL)
        history_delete_directives_->::sync_pb::HistoryDeleteDirectives::Clear();
    clear_has_history_delete_directives();
}
const ::sync_pb::HistoryDeleteDirectives& ExperimentsSpecifics::history_delete_directives() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.history_delete_directives)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return history_delete_directives_ != NULL ? *history_delete_directives_ : *default_instance().history_delete_directives_;
#else
    return history_delete_directives_ != NULL ? *history_delete_directives_ : *default_instance_->history_delete_directives_;
#endif
}
::sync_pb::HistoryDeleteDirectives* ExperimentsSpecifics::mutable_history_delete_directives()
{
    set_has_history_delete_directives();
    if (history_delete_directives_ == NULL) {
        history_delete_directives_ = new ::sync_pb::HistoryDeleteDirectives;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.history_delete_directives)
    return history_delete_directives_;
}
::sync_pb::HistoryDeleteDirectives* ExperimentsSpecifics::release_history_delete_directives()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.history_delete_directives)
    clear_has_history_delete_directives();
    ::sync_pb::HistoryDeleteDirectives* temp = history_delete_directives_;
    history_delete_directives_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_history_delete_directives(::sync_pb::HistoryDeleteDirectives* history_delete_directives)
{
    delete history_delete_directives_;
    history_delete_directives_ = history_delete_directives;
    if (history_delete_directives) {
        set_has_history_delete_directives();
    } else {
        clear_has_history_delete_directives();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.history_delete_directives)
}

// optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
bool ExperimentsSpecifics::has_autofill_culling() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExperimentsSpecifics::set_has_autofill_culling()
{
    _has_bits_[0] |= 0x00000004u;
}
void ExperimentsSpecifics::clear_has_autofill_culling()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ExperimentsSpecifics::clear_autofill_culling()
{
    if (autofill_culling_ != NULL)
        autofill_culling_->::sync_pb::AutofillCullingFlags::Clear();
    clear_has_autofill_culling();
}
const ::sync_pb::AutofillCullingFlags& ExperimentsSpecifics::autofill_culling() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.autofill_culling)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return autofill_culling_ != NULL ? *autofill_culling_ : *default_instance().autofill_culling_;
#else
    return autofill_culling_ != NULL ? *autofill_culling_ : *default_instance_->autofill_culling_;
#endif
}
::sync_pb::AutofillCullingFlags* ExperimentsSpecifics::mutable_autofill_culling()
{
    set_has_autofill_culling();
    if (autofill_culling_ == NULL) {
        autofill_culling_ = new ::sync_pb::AutofillCullingFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.autofill_culling)
    return autofill_culling_;
}
::sync_pb::AutofillCullingFlags* ExperimentsSpecifics::release_autofill_culling()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.autofill_culling)
    clear_has_autofill_culling();
    ::sync_pb::AutofillCullingFlags* temp = autofill_culling_;
    autofill_culling_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_autofill_culling(::sync_pb::AutofillCullingFlags* autofill_culling)
{
    delete autofill_culling_;
    autofill_culling_ = autofill_culling;
    if (autofill_culling) {
        set_has_autofill_culling();
    } else {
        clear_has_autofill_culling();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.autofill_culling)
}

// optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
bool ExperimentsSpecifics::has_favicon_sync() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExperimentsSpecifics::set_has_favicon_sync()
{
    _has_bits_[0] |= 0x00000008u;
}
void ExperimentsSpecifics::clear_has_favicon_sync()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ExperimentsSpecifics::clear_favicon_sync()
{
    if (favicon_sync_ != NULL)
        favicon_sync_->::sync_pb::FaviconSyncFlags::Clear();
    clear_has_favicon_sync();
}
const ::sync_pb::FaviconSyncFlags& ExperimentsSpecifics::favicon_sync() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.favicon_sync)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_sync_ != NULL ? *favicon_sync_ : *default_instance().favicon_sync_;
#else
    return favicon_sync_ != NULL ? *favicon_sync_ : *default_instance_->favicon_sync_;
#endif
}
::sync_pb::FaviconSyncFlags* ExperimentsSpecifics::mutable_favicon_sync()
{
    set_has_favicon_sync();
    if (favicon_sync_ == NULL) {
        favicon_sync_ = new ::sync_pb::FaviconSyncFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.favicon_sync)
    return favicon_sync_;
}
::sync_pb::FaviconSyncFlags* ExperimentsSpecifics::release_favicon_sync()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.favicon_sync)
    clear_has_favicon_sync();
    ::sync_pb::FaviconSyncFlags* temp = favicon_sync_;
    favicon_sync_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_favicon_sync(::sync_pb::FaviconSyncFlags* favicon_sync)
{
    delete favicon_sync_;
    favicon_sync_ = favicon_sync;
    if (favicon_sync) {
        set_has_favicon_sync();
    } else {
        clear_has_favicon_sync();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.favicon_sync)
}

// optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
bool ExperimentsSpecifics::has_pre_commit_update_avoidance() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExperimentsSpecifics::set_has_pre_commit_update_avoidance()
{
    _has_bits_[0] |= 0x00000010u;
}
void ExperimentsSpecifics::clear_has_pre_commit_update_avoidance()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ExperimentsSpecifics::clear_pre_commit_update_avoidance()
{
    if (pre_commit_update_avoidance_ != NULL)
        pre_commit_update_avoidance_->::sync_pb::PreCommitUpdateAvoidanceFlags::Clear();
    clear_has_pre_commit_update_avoidance();
}
const ::sync_pb::PreCommitUpdateAvoidanceFlags& ExperimentsSpecifics::pre_commit_update_avoidance() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return pre_commit_update_avoidance_ != NULL ? *pre_commit_update_avoidance_ : *default_instance().pre_commit_update_avoidance_;
#else
    return pre_commit_update_avoidance_ != NULL ? *pre_commit_update_avoidance_ : *default_instance_->pre_commit_update_avoidance_;
#endif
}
::sync_pb::PreCommitUpdateAvoidanceFlags* ExperimentsSpecifics::mutable_pre_commit_update_avoidance()
{
    set_has_pre_commit_update_avoidance();
    if (pre_commit_update_avoidance_ == NULL) {
        pre_commit_update_avoidance_ = new ::sync_pb::PreCommitUpdateAvoidanceFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
    return pre_commit_update_avoidance_;
}
::sync_pb::PreCommitUpdateAvoidanceFlags* ExperimentsSpecifics::release_pre_commit_update_avoidance()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
    clear_has_pre_commit_update_avoidance();
    ::sync_pb::PreCommitUpdateAvoidanceFlags* temp = pre_commit_update_avoidance_;
    pre_commit_update_avoidance_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_pre_commit_update_avoidance(::sync_pb::PreCommitUpdateAvoidanceFlags* pre_commit_update_avoidance)
{
    delete pre_commit_update_avoidance_;
    pre_commit_update_avoidance_ = pre_commit_update_avoidance;
    if (pre_commit_update_avoidance) {
        set_has_pre_commit_update_avoidance();
    } else {
        clear_has_pre_commit_update_avoidance();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.pre_commit_update_avoidance)
}

// optional .sync_pb.GcmChannelFlags gcm_channel = 6;
bool ExperimentsSpecifics::has_gcm_channel() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExperimentsSpecifics::set_has_gcm_channel()
{
    _has_bits_[0] |= 0x00000020u;
}
void ExperimentsSpecifics::clear_has_gcm_channel()
{
    _has_bits_[0] &= ~0x00000020u;
}
void ExperimentsSpecifics::clear_gcm_channel()
{
    if (gcm_channel_ != NULL)
        gcm_channel_->::sync_pb::GcmChannelFlags::Clear();
    clear_has_gcm_channel();
}
const ::sync_pb::GcmChannelFlags& ExperimentsSpecifics::gcm_channel() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.gcm_channel)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return gcm_channel_ != NULL ? *gcm_channel_ : *default_instance().gcm_channel_;
#else
    return gcm_channel_ != NULL ? *gcm_channel_ : *default_instance_->gcm_channel_;
#endif
}
::sync_pb::GcmChannelFlags* ExperimentsSpecifics::mutable_gcm_channel()
{
    set_has_gcm_channel();
    if (gcm_channel_ == NULL) {
        gcm_channel_ = new ::sync_pb::GcmChannelFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.gcm_channel)
    return gcm_channel_;
}
::sync_pb::GcmChannelFlags* ExperimentsSpecifics::release_gcm_channel()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.gcm_channel)
    clear_has_gcm_channel();
    ::sync_pb::GcmChannelFlags* temp = gcm_channel_;
    gcm_channel_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_gcm_channel(::sync_pb::GcmChannelFlags* gcm_channel)
{
    delete gcm_channel_;
    gcm_channel_ = gcm_channel;
    if (gcm_channel) {
        set_has_gcm_channel();
    } else {
        clear_has_gcm_channel();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.gcm_channel)
}

// optional .sync_pb.EnhancedBookmarksFlags obsolete_enhanced_bookmarks = 7;
bool ExperimentsSpecifics::has_obsolete_enhanced_bookmarks() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExperimentsSpecifics::set_has_obsolete_enhanced_bookmarks()
{
    _has_bits_[0] |= 0x00000040u;
}
void ExperimentsSpecifics::clear_has_obsolete_enhanced_bookmarks()
{
    _has_bits_[0] &= ~0x00000040u;
}
void ExperimentsSpecifics::clear_obsolete_enhanced_bookmarks()
{
    if (obsolete_enhanced_bookmarks_ != NULL)
        obsolete_enhanced_bookmarks_->::sync_pb::EnhancedBookmarksFlags::Clear();
    clear_has_obsolete_enhanced_bookmarks();
}
const ::sync_pb::EnhancedBookmarksFlags& ExperimentsSpecifics::obsolete_enhanced_bookmarks() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return obsolete_enhanced_bookmarks_ != NULL ? *obsolete_enhanced_bookmarks_ : *default_instance().obsolete_enhanced_bookmarks_;
#else
    return obsolete_enhanced_bookmarks_ != NULL ? *obsolete_enhanced_bookmarks_ : *default_instance_->obsolete_enhanced_bookmarks_;
#endif
}
::sync_pb::EnhancedBookmarksFlags* ExperimentsSpecifics::mutable_obsolete_enhanced_bookmarks()
{
    set_has_obsolete_enhanced_bookmarks();
    if (obsolete_enhanced_bookmarks_ == NULL) {
        obsolete_enhanced_bookmarks_ = new ::sync_pb::EnhancedBookmarksFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
    return obsolete_enhanced_bookmarks_;
}
::sync_pb::EnhancedBookmarksFlags* ExperimentsSpecifics::release_obsolete_enhanced_bookmarks()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
    clear_has_obsolete_enhanced_bookmarks();
    ::sync_pb::EnhancedBookmarksFlags* temp = obsolete_enhanced_bookmarks_;
    obsolete_enhanced_bookmarks_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_obsolete_enhanced_bookmarks(::sync_pb::EnhancedBookmarksFlags* obsolete_enhanced_bookmarks)
{
    delete obsolete_enhanced_bookmarks_;
    obsolete_enhanced_bookmarks_ = obsolete_enhanced_bookmarks;
    if (obsolete_enhanced_bookmarks) {
        set_has_obsolete_enhanced_bookmarks();
    } else {
        clear_has_obsolete_enhanced_bookmarks();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.obsolete_enhanced_bookmarks)
}

// optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
bool ExperimentsSpecifics::has_gcm_invalidations() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void ExperimentsSpecifics::set_has_gcm_invalidations()
{
    _has_bits_[0] |= 0x00000080u;
}
void ExperimentsSpecifics::clear_has_gcm_invalidations()
{
    _has_bits_[0] &= ~0x00000080u;
}
void ExperimentsSpecifics::clear_gcm_invalidations()
{
    if (gcm_invalidations_ != NULL)
        gcm_invalidations_->::sync_pb::GcmInvalidationsFlags::Clear();
    clear_has_gcm_invalidations();
}
const ::sync_pb::GcmInvalidationsFlags& ExperimentsSpecifics::gcm_invalidations() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.gcm_invalidations)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return gcm_invalidations_ != NULL ? *gcm_invalidations_ : *default_instance().gcm_invalidations_;
#else
    return gcm_invalidations_ != NULL ? *gcm_invalidations_ : *default_instance_->gcm_invalidations_;
#endif
}
::sync_pb::GcmInvalidationsFlags* ExperimentsSpecifics::mutable_gcm_invalidations()
{
    set_has_gcm_invalidations();
    if (gcm_invalidations_ == NULL) {
        gcm_invalidations_ = new ::sync_pb::GcmInvalidationsFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.gcm_invalidations)
    return gcm_invalidations_;
}
::sync_pb::GcmInvalidationsFlags* ExperimentsSpecifics::release_gcm_invalidations()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.gcm_invalidations)
    clear_has_gcm_invalidations();
    ::sync_pb::GcmInvalidationsFlags* temp = gcm_invalidations_;
    gcm_invalidations_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_gcm_invalidations(::sync_pb::GcmInvalidationsFlags* gcm_invalidations)
{
    delete gcm_invalidations_;
    gcm_invalidations_ = gcm_invalidations;
    if (gcm_invalidations) {
        set_has_gcm_invalidations();
    } else {
        clear_has_gcm_invalidations();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.gcm_invalidations)
}

// optional .sync_pb.WalletSyncFlags obsolete_wallet_sync = 9;
bool ExperimentsSpecifics::has_obsolete_wallet_sync() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void ExperimentsSpecifics::set_has_obsolete_wallet_sync()
{
    _has_bits_[0] |= 0x00000100u;
}
void ExperimentsSpecifics::clear_has_obsolete_wallet_sync()
{
    _has_bits_[0] &= ~0x00000100u;
}
void ExperimentsSpecifics::clear_obsolete_wallet_sync()
{
    if (obsolete_wallet_sync_ != NULL)
        obsolete_wallet_sync_->::sync_pb::WalletSyncFlags::Clear();
    clear_has_obsolete_wallet_sync();
}
const ::sync_pb::WalletSyncFlags& ExperimentsSpecifics::obsolete_wallet_sync() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return obsolete_wallet_sync_ != NULL ? *obsolete_wallet_sync_ : *default_instance().obsolete_wallet_sync_;
#else
    return obsolete_wallet_sync_ != NULL ? *obsolete_wallet_sync_ : *default_instance_->obsolete_wallet_sync_;
#endif
}
::sync_pb::WalletSyncFlags* ExperimentsSpecifics::mutable_obsolete_wallet_sync()
{
    set_has_obsolete_wallet_sync();
    if (obsolete_wallet_sync_ == NULL) {
        obsolete_wallet_sync_ = new ::sync_pb::WalletSyncFlags;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
    return obsolete_wallet_sync_;
}
::sync_pb::WalletSyncFlags* ExperimentsSpecifics::release_obsolete_wallet_sync()
{
    // @@protoc_insertion_point(field_release:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
    clear_has_obsolete_wallet_sync();
    ::sync_pb::WalletSyncFlags* temp = obsolete_wallet_sync_;
    obsolete_wallet_sync_ = NULL;
    return temp;
}
void ExperimentsSpecifics::set_allocated_obsolete_wallet_sync(::sync_pb::WalletSyncFlags* obsolete_wallet_sync)
{
    delete obsolete_wallet_sync_;
    obsolete_wallet_sync_ = obsolete_wallet_sync;
    if (obsolete_wallet_sync) {
        set_has_obsolete_wallet_sync();
    } else {
        clear_has_obsolete_wallet_sync();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ExperimentsSpecifics.obsolete_wallet_sync)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
