// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attachments.proto

#ifndef PROTOBUF_attachments_2eproto__INCLUDED
#define PROTOBUF_attachments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_attachments_2eproto();
void protobuf_AssignDesc_attachments_2eproto();
void protobuf_ShutdownFile_attachments_2eproto();

class AttachmentIdProto;
class AttachmentMetadata;
class AttachmentMetadataRecord;

// ===================================================================

class AttachmentIdProto : public ::google::protobuf::MessageLite {
public:
    AttachmentIdProto();
    virtual ~AttachmentIdProto();

    AttachmentIdProto(const AttachmentIdProto& from);

    inline AttachmentIdProto& operator=(const AttachmentIdProto& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const AttachmentIdProto& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const AttachmentIdProto* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(AttachmentIdProto* other);

    // implements Message ----------------------------------------------

    inline AttachmentIdProto* New() const { return New(NULL); }

    AttachmentIdProto* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const AttachmentIdProto& from);
    void MergeFrom(const AttachmentIdProto& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(AttachmentIdProto* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string unique_id = 1;
    bool has_unique_id() const;
    void clear_unique_id();
    static const int kUniqueIdFieldNumber = 1;
    const ::std::string& unique_id() const;
    void set_unique_id(const ::std::string& value);
    void set_unique_id(const char* value);
    void set_unique_id(const char* value, size_t size);
    ::std::string* mutable_unique_id();
    ::std::string* release_unique_id();
    void set_allocated_unique_id(::std::string* unique_id);

    // optional uint64 size_bytes = 2;
    bool has_size_bytes() const;
    void clear_size_bytes();
    static const int kSizeBytesFieldNumber = 2;
    ::google::protobuf::uint64 size_bytes() const;
    void set_size_bytes(::google::protobuf::uint64 value);

    // optional uint32 crc32c = 3;
    bool has_crc32c() const;
    void clear_crc32c();
    static const int kCrc32CFieldNumber = 3;
    ::google::protobuf::uint32 crc32c() const;
    void set_crc32c(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:sync_pb.AttachmentIdProto)
private:
    inline void set_has_unique_id();
    inline void clear_has_unique_id();
    inline void set_has_size_bytes();
    inline void clear_has_size_bytes();
    inline void set_has_crc32c();
    inline void clear_has_crc32c();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr unique_id_;
    ::google::protobuf::uint64 size_bytes_;
    ::google::protobuf::uint32 crc32c_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_attachments_2eproto_impl();
#else
    friend void protobuf_AddDesc_attachments_2eproto();
#endif
    friend void protobuf_AssignDesc_attachments_2eproto();
    friend void protobuf_ShutdownFile_attachments_2eproto();

    void InitAsDefaultInstance();
    static AttachmentIdProto* default_instance_;
};
// -------------------------------------------------------------------

class AttachmentMetadataRecord : public ::google::protobuf::MessageLite {
public:
    AttachmentMetadataRecord();
    virtual ~AttachmentMetadataRecord();

    AttachmentMetadataRecord(const AttachmentMetadataRecord& from);

    inline AttachmentMetadataRecord& operator=(const AttachmentMetadataRecord& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const AttachmentMetadataRecord& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const AttachmentMetadataRecord* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(AttachmentMetadataRecord* other);

    // implements Message ----------------------------------------------

    inline AttachmentMetadataRecord* New() const { return New(NULL); }

    AttachmentMetadataRecord* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const AttachmentMetadataRecord& from);
    void MergeFrom(const AttachmentMetadataRecord& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(AttachmentMetadataRecord* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional .sync_pb.AttachmentIdProto id = 1;
    bool has_id() const;
    void clear_id();
    static const int kIdFieldNumber = 1;
    const ::sync_pb::AttachmentIdProto& id() const;
    ::sync_pb::AttachmentIdProto* mutable_id();
    ::sync_pb::AttachmentIdProto* release_id();
    void set_allocated_id(::sync_pb::AttachmentIdProto* id);

    // optional bool is_on_server = 2;
    bool has_is_on_server() const;
    void clear_is_on_server();
    static const int kIsOnServerFieldNumber = 2;
    bool is_on_server() const;
    void set_is_on_server(bool value);

    // @@protoc_insertion_point(class_scope:sync_pb.AttachmentMetadataRecord)
private:
    inline void set_has_id();
    inline void clear_has_id();
    inline void set_has_is_on_server();
    inline void clear_has_is_on_server();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::sync_pb::AttachmentIdProto* id_;
    bool is_on_server_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_attachments_2eproto_impl();
#else
    friend void protobuf_AddDesc_attachments_2eproto();
#endif
    friend void protobuf_AssignDesc_attachments_2eproto();
    friend void protobuf_ShutdownFile_attachments_2eproto();

    void InitAsDefaultInstance();
    static AttachmentMetadataRecord* default_instance_;
};
// -------------------------------------------------------------------

class AttachmentMetadata : public ::google::protobuf::MessageLite {
public:
    AttachmentMetadata();
    virtual ~AttachmentMetadata();

    AttachmentMetadata(const AttachmentMetadata& from);

    inline AttachmentMetadata& operator=(const AttachmentMetadata& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const AttachmentMetadata& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const AttachmentMetadata* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(AttachmentMetadata* other);

    // implements Message ----------------------------------------------

    inline AttachmentMetadata* New() const { return New(NULL); }

    AttachmentMetadata* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const AttachmentMetadata& from);
    void MergeFrom(const AttachmentMetadata& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(AttachmentMetadata* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .sync_pb.AttachmentMetadataRecord record = 1;
    int record_size() const;
    void clear_record();
    static const int kRecordFieldNumber = 1;
    const ::sync_pb::AttachmentMetadataRecord& record(int index) const;
    ::sync_pb::AttachmentMetadataRecord* mutable_record(int index);
    ::sync_pb::AttachmentMetadataRecord* add_record();
    ::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord>*
    mutable_record();
    const ::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord>&
    record() const;

    // @@protoc_insertion_point(class_scope:sync_pb.AttachmentMetadata)
private:
    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord> record_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_attachments_2eproto_impl();
#else
    friend void protobuf_AddDesc_attachments_2eproto();
#endif
    friend void protobuf_AssignDesc_attachments_2eproto();
    friend void protobuf_ShutdownFile_attachments_2eproto();

    void InitAsDefaultInstance();
    static AttachmentMetadata* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachmentIdProto

// optional string unique_id = 1;
inline bool AttachmentIdProto::has_unique_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachmentIdProto::set_has_unique_id()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void AttachmentIdProto::clear_has_unique_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void AttachmentIdProto::clear_unique_id()
{
    unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_unique_id();
}
inline const ::std::string& AttachmentIdProto::unique_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentIdProto.unique_id)
    return unique_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentIdProto::set_unique_id(const ::std::string& value)
{
    set_has_unique_id();
    unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentIdProto.unique_id)
}
inline void AttachmentIdProto::set_unique_id(const char* value)
{
    set_has_unique_id();
    unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.AttachmentIdProto.unique_id)
}
inline void AttachmentIdProto::set_unique_id(const char* value, size_t size)
{
    set_has_unique_id();
    unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.AttachmentIdProto.unique_id)
}
inline ::std::string* AttachmentIdProto::mutable_unique_id()
{
    set_has_unique_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.AttachmentIdProto.unique_id)
    return unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentIdProto::release_unique_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.AttachmentIdProto.unique_id)
    clear_has_unique_id();
    return unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentIdProto::set_allocated_unique_id(::std::string* unique_id)
{
    if (unique_id != NULL) {
        set_has_unique_id();
    } else {
        clear_has_unique_id();
    }
    unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.AttachmentIdProto.unique_id)
}

// optional uint64 size_bytes = 2;
inline bool AttachmentIdProto::has_size_bytes() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttachmentIdProto::set_has_size_bytes()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void AttachmentIdProto::clear_has_size_bytes()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void AttachmentIdProto::clear_size_bytes()
{
    size_bytes_ = GOOGLE_ULONGLONG(0);
    clear_has_size_bytes();
}
inline ::google::protobuf::uint64 AttachmentIdProto::size_bytes() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentIdProto.size_bytes)
    return size_bytes_;
}
inline void AttachmentIdProto::set_size_bytes(::google::protobuf::uint64 value)
{
    set_has_size_bytes();
    size_bytes_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentIdProto.size_bytes)
}

// optional uint32 crc32c = 3;
inline bool AttachmentIdProto::has_crc32c() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttachmentIdProto::set_has_crc32c()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void AttachmentIdProto::clear_has_crc32c()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void AttachmentIdProto::clear_crc32c()
{
    crc32c_ = 0u;
    clear_has_crc32c();
}
inline ::google::protobuf::uint32 AttachmentIdProto::crc32c() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentIdProto.crc32c)
    return crc32c_;
}
inline void AttachmentIdProto::set_crc32c(::google::protobuf::uint32 value)
{
    set_has_crc32c();
    crc32c_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentIdProto.crc32c)
}

// -------------------------------------------------------------------

// AttachmentMetadataRecord

// optional .sync_pb.AttachmentIdProto id = 1;
inline bool AttachmentMetadataRecord::has_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachmentMetadataRecord::set_has_id()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void AttachmentMetadataRecord::clear_has_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void AttachmentMetadataRecord::clear_id()
{
    if (id_ != NULL)
        id_->::sync_pb::AttachmentIdProto::Clear();
    clear_has_id();
}
inline const ::sync_pb::AttachmentIdProto& AttachmentMetadataRecord::id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentMetadataRecord.id)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return id_ != NULL ? *id_ : *default_instance().id_;
#else
    return id_ != NULL ? *id_ : *default_instance_->id_;
#endif
}
inline ::sync_pb::AttachmentIdProto* AttachmentMetadataRecord::mutable_id()
{
    set_has_id();
    if (id_ == NULL) {
        id_ = new ::sync_pb::AttachmentIdProto;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.AttachmentMetadataRecord.id)
    return id_;
}
inline ::sync_pb::AttachmentIdProto* AttachmentMetadataRecord::release_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.AttachmentMetadataRecord.id)
    clear_has_id();
    ::sync_pb::AttachmentIdProto* temp = id_;
    id_ = NULL;
    return temp;
}
inline void AttachmentMetadataRecord::set_allocated_id(::sync_pb::AttachmentIdProto* id)
{
    delete id_;
    id_ = id;
    if (id) {
        set_has_id();
    } else {
        clear_has_id();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.AttachmentMetadataRecord.id)
}

// optional bool is_on_server = 2;
inline bool AttachmentMetadataRecord::has_is_on_server() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttachmentMetadataRecord::set_has_is_on_server()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void AttachmentMetadataRecord::clear_has_is_on_server()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void AttachmentMetadataRecord::clear_is_on_server()
{
    is_on_server_ = false;
    clear_has_is_on_server();
}
inline bool AttachmentMetadataRecord::is_on_server() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentMetadataRecord.is_on_server)
    return is_on_server_;
}
inline void AttachmentMetadataRecord::set_is_on_server(bool value)
{
    set_has_is_on_server();
    is_on_server_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentMetadataRecord.is_on_server)
}

// -------------------------------------------------------------------

// AttachmentMetadata

// repeated .sync_pb.AttachmentMetadataRecord record = 1;
inline int AttachmentMetadata::record_size() const
{
    return record_.size();
}
inline void AttachmentMetadata::clear_record()
{
    record_.Clear();
}
inline const ::sync_pb::AttachmentMetadataRecord& AttachmentMetadata::record(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentMetadata.record)
    return record_.Get(index);
}
inline ::sync_pb::AttachmentMetadataRecord* AttachmentMetadata::mutable_record(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.AttachmentMetadata.record)
    return record_.Mutable(index);
}
inline ::sync_pb::AttachmentMetadataRecord* AttachmentMetadata::add_record()
{
    // @@protoc_insertion_point(field_add:sync_pb.AttachmentMetadata.record)
    return record_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord>*
AttachmentMetadata::mutable_record()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.AttachmentMetadata.record)
    return &record_;
}
inline const ::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord>&
AttachmentMetadata::record() const
{
    // @@protoc_insertion_point(field_list:sync_pb.AttachmentMetadata.record)
    return record_;
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_attachments_2eproto__INCLUDED
