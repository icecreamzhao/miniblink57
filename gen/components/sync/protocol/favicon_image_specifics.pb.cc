// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: favicon_image_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "favicon_image_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto()
{
    delete FaviconData::default_instance_;
    delete FaviconImageSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    FaviconData::default_instance_ = new FaviconData();
    FaviconImageSpecifics::default_instance_ = new FaviconImageSpecifics();
    FaviconData::default_instance_->InitAsDefaultInstance();
    FaviconImageSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_once_);
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_favicon_5fimage_5fspecifics_2eproto {
    StaticDescriptorInitializer_favicon_5fimage_5fspecifics_2eproto()
    {
        protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
    }
} static_descriptor_initializer_favicon_5fimage_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForFaviconData(
    FaviconData* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaviconData::kFaviconFieldNumber;
const int FaviconData::kWidthFieldNumber;
const int FaviconData::kHeightFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

FaviconData::FaviconData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.FaviconData)
}

void FaviconData::InitAsDefaultInstance()
{
}

FaviconData::FaviconData(const FaviconData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconData)
}

void FaviconData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    width_ = 0;
    height_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaviconData::~FaviconData()
{
    // @@protoc_insertion_point(destructor:sync_pb.FaviconData)
    SharedDtor();
}

void FaviconData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void FaviconData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaviconData& FaviconData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

FaviconData* FaviconData::default_instance_ = NULL;

FaviconData* FaviconData::New(::google::protobuf::Arena* arena) const
{
    FaviconData* n = new FaviconData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void FaviconData::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.FaviconData)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                 \
    _Pragma("clang diagnostic push")                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(FaviconData, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<FaviconData*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 7u) {
        ZR_(width_, height_);
        if (has_favicon()) {
            favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FaviconData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForFaviconData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.FaviconData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes favicon = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_favicon()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_width;
            break;
        }

        // optional int32 width = 2;
        case 2: {
            if (tag == 16) {
            parse_width:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &width_)));
                set_has_width();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_height;
            break;
        }

        // optional int32 height = 3;
        case 3: {
            if (tag == 24) {
            parse_height:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &height_)));
                set_has_height();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.FaviconData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.FaviconData)
    return false;
#undef DO_
}

void FaviconData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.FaviconData)
    // optional bytes favicon = 1;
    if (has_favicon()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->favicon(), output);
    }

    // optional int32 width = 2;
    if (has_width()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
    }

    // optional int32 height = 3;
    if (has_height()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.FaviconData)
}

int FaviconData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconData)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional bytes favicon = 1;
        if (has_favicon()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->favicon());
        }

        // optional int32 width = 2;
        if (has_width()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->width());
        }

        // optional int32 height = 3;
        if (has_height()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->height());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void FaviconData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const FaviconData*>(&from));
}

void FaviconData::MergeFrom(const FaviconData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_favicon()) {
            set_has_favicon();
            favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_);
        }
        if (from.has_width()) {
            set_width(from.width());
        }
        if (from.has_height()) {
            set_height(from.height());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void FaviconData::CopyFrom(const FaviconData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool FaviconData::IsInitialized() const
{

    return true;
}

void FaviconData::Swap(FaviconData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void FaviconData::InternalSwap(FaviconData* other)
{
    favicon_.Swap(&other->favicon_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string FaviconData::GetTypeName() const
{
    return "sync_pb.FaviconData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaviconData

// optional bytes favicon = 1;
bool FaviconData::has_favicon() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaviconData::set_has_favicon()
{
    _has_bits_[0] |= 0x00000001u;
}
void FaviconData::clear_has_favicon()
{
    _has_bits_[0] &= ~0x00000001u;
}
void FaviconData::clear_favicon()
{
    favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon();
}
const ::std::string& FaviconData::favicon() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconData.favicon)
    return favicon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconData::set_favicon(const ::std::string& value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.FaviconData.favicon)
}
void FaviconData::set_favicon(const char* value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.FaviconData.favicon)
}
void FaviconData::set_favicon(const void* value, size_t size)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.FaviconData.favicon)
}
::std::string* FaviconData::mutable_favicon()
{
    set_has_favicon();
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconData.favicon)
    return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaviconData::release_favicon()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconData.favicon)
    clear_has_favicon();
    return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconData::set_allocated_favicon(::std::string* favicon)
{
    if (favicon != NULL) {
        set_has_favicon();
    } else {
        clear_has_favicon();
    }
    favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconData.favicon)
}

// optional int32 width = 2;
bool FaviconData::has_width() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaviconData::set_has_width()
{
    _has_bits_[0] |= 0x00000002u;
}
void FaviconData::clear_has_width()
{
    _has_bits_[0] &= ~0x00000002u;
}
void FaviconData::clear_width()
{
    width_ = 0;
    clear_has_width();
}
::google::protobuf::int32 FaviconData::width() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconData.width)
    return width_;
}
void FaviconData::set_width(::google::protobuf::int32 value)
{
    set_has_width();
    width_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.FaviconData.width)
}

// optional int32 height = 3;
bool FaviconData::has_height() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void FaviconData::set_has_height()
{
    _has_bits_[0] |= 0x00000004u;
}
void FaviconData::clear_has_height()
{
    _has_bits_[0] &= ~0x00000004u;
}
void FaviconData::clear_height()
{
    height_ = 0;
    clear_has_height();
}
::google::protobuf::int32 FaviconData::height() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconData.height)
    return height_;
}
void FaviconData::set_height(::google::protobuf::int32 value)
{
    set_has_height();
    height_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.FaviconData.height)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFaviconImageSpecifics(
    FaviconImageSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaviconImageSpecifics::kFaviconUrlFieldNumber;
const int FaviconImageSpecifics::kFaviconWebFieldNumber;
const int FaviconImageSpecifics::kFaviconWeb32FieldNumber;
const int FaviconImageSpecifics::kFaviconTouch64FieldNumber;
const int FaviconImageSpecifics::kFaviconTouchPrecomposed64FieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

FaviconImageSpecifics::FaviconImageSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.FaviconImageSpecifics)
}

void FaviconImageSpecifics::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    favicon_web_ = const_cast<::sync_pb::FaviconData*>(
        ::sync_pb::FaviconData::internal_default_instance());
#else
    favicon_web_ = const_cast<::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    favicon_web_32_ = const_cast<::sync_pb::FaviconData*>(
        ::sync_pb::FaviconData::internal_default_instance());
#else
    favicon_web_32_ = const_cast<::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    favicon_touch_64_ = const_cast<::sync_pb::FaviconData*>(
        ::sync_pb::FaviconData::internal_default_instance());
#else
    favicon_touch_64_ = const_cast<::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    favicon_touch_precomposed_64_ = const_cast<::sync_pb::FaviconData*>(
        ::sync_pb::FaviconData::internal_default_instance());
#else
    favicon_touch_precomposed_64_ = const_cast<::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
}

FaviconImageSpecifics::FaviconImageSpecifics(const FaviconImageSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.FaviconImageSpecifics)
}

void FaviconImageSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_web_ = NULL;
    favicon_web_32_ = NULL;
    favicon_touch_64_ = NULL;
    favicon_touch_precomposed_64_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaviconImageSpecifics::~FaviconImageSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.FaviconImageSpecifics)
    SharedDtor();
}

void FaviconImageSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete favicon_web_;
        delete favicon_web_32_;
        delete favicon_touch_64_;
        delete favicon_touch_precomposed_64_;
    }
}

void FaviconImageSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaviconImageSpecifics& FaviconImageSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

FaviconImageSpecifics* FaviconImageSpecifics::default_instance_ = NULL;

FaviconImageSpecifics* FaviconImageSpecifics::New(::google::protobuf::Arena* arena) const
{
    FaviconImageSpecifics* n = new FaviconImageSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void FaviconImageSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.FaviconImageSpecifics)
    if (_has_bits_[0 / 32] & 31u) {
        if (has_favicon_url()) {
            favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_favicon_web()) {
            if (favicon_web_ != NULL)
                favicon_web_->::sync_pb::FaviconData::Clear();
        }
        if (has_favicon_web_32()) {
            if (favicon_web_32_ != NULL)
                favicon_web_32_->::sync_pb::FaviconData::Clear();
        }
        if (has_favicon_touch_64()) {
            if (favicon_touch_64_ != NULL)
                favicon_touch_64_->::sync_pb::FaviconData::Clear();
        }
        if (has_favicon_touch_precomposed_64()) {
            if (favicon_touch_precomposed_64_ != NULL)
                favicon_touch_precomposed_64_->::sync_pb::FaviconData::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FaviconImageSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForFaviconImageSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.FaviconImageSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string favicon_url = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_favicon_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_favicon_web;
            break;
        }

        // optional .sync_pb.FaviconData favicon_web = 2;
        case 2: {
            if (tag == 18) {
            parse_favicon_web:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_favicon_web()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_favicon_web_32;
            break;
        }

        // optional .sync_pb.FaviconData favicon_web_32 = 3;
        case 3: {
            if (tag == 26) {
            parse_favicon_web_32:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_favicon_web_32()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_favicon_touch_64;
            break;
        }

        // optional .sync_pb.FaviconData favicon_touch_64 = 4;
        case 4: {
            if (tag == 34) {
            parse_favicon_touch_64:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_favicon_touch_64()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_favicon_touch_precomposed_64;
            break;
        }

        // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
        case 5: {
            if (tag == 42) {
            parse_favicon_touch_precomposed_64:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_favicon_touch_precomposed_64()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.FaviconImageSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.FaviconImageSpecifics)
    return false;
#undef DO_
}

void FaviconImageSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.FaviconImageSpecifics)
    // optional string favicon_url = 1;
    if (has_favicon_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->favicon_url(), output);
    }

    // optional .sync_pb.FaviconData favicon_web = 2;
    if (has_favicon_web()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->favicon_web_, output);
    }

    // optional .sync_pb.FaviconData favicon_web_32 = 3;
    if (has_favicon_web_32()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->favicon_web_32_, output);
    }

    // optional .sync_pb.FaviconData favicon_touch_64 = 4;
    if (has_favicon_touch_64()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->favicon_touch_64_, output);
    }

    // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
    if (has_favicon_touch_precomposed_64()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->favicon_touch_precomposed_64_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.FaviconImageSpecifics)
}

int FaviconImageSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.FaviconImageSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string favicon_url = 1;
        if (has_favicon_url()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->favicon_url());
        }

        // optional .sync_pb.FaviconData favicon_web = 2;
        if (has_favicon_web()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->favicon_web_);
        }

        // optional .sync_pb.FaviconData favicon_web_32 = 3;
        if (has_favicon_web_32()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->favicon_web_32_);
        }

        // optional .sync_pb.FaviconData favicon_touch_64 = 4;
        if (has_favicon_touch_64()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->favicon_touch_64_);
        }

        // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
        if (has_favicon_touch_precomposed_64()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->favicon_touch_precomposed_64_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void FaviconImageSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const FaviconImageSpecifics*>(&from));
}

void FaviconImageSpecifics::MergeFrom(const FaviconImageSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.FaviconImageSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_favicon_url()) {
            set_has_favicon_url();
            favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
        }
        if (from.has_favicon_web()) {
            mutable_favicon_web()->::sync_pb::FaviconData::MergeFrom(from.favicon_web());
        }
        if (from.has_favicon_web_32()) {
            mutable_favicon_web_32()->::sync_pb::FaviconData::MergeFrom(from.favicon_web_32());
        }
        if (from.has_favicon_touch_64()) {
            mutable_favicon_touch_64()->::sync_pb::FaviconData::MergeFrom(from.favicon_touch_64());
        }
        if (from.has_favicon_touch_precomposed_64()) {
            mutable_favicon_touch_precomposed_64()->::sync_pb::FaviconData::MergeFrom(from.favicon_touch_precomposed_64());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void FaviconImageSpecifics::CopyFrom(const FaviconImageSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.FaviconImageSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool FaviconImageSpecifics::IsInitialized() const
{

    return true;
}

void FaviconImageSpecifics::Swap(FaviconImageSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void FaviconImageSpecifics::InternalSwap(FaviconImageSpecifics* other)
{
    favicon_url_.Swap(&other->favicon_url_);
    std::swap(favicon_web_, other->favicon_web_);
    std::swap(favicon_web_32_, other->favicon_web_32_);
    std::swap(favicon_touch_64_, other->favicon_touch_64_);
    std::swap(favicon_touch_precomposed_64_, other->favicon_touch_precomposed_64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string FaviconImageSpecifics::GetTypeName() const
{
    return "sync_pb.FaviconImageSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaviconImageSpecifics

// optional string favicon_url = 1;
bool FaviconImageSpecifics::has_favicon_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void FaviconImageSpecifics::set_has_favicon_url()
{
    _has_bits_[0] |= 0x00000001u;
}
void FaviconImageSpecifics::clear_has_favicon_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
void FaviconImageSpecifics::clear_favicon_url()
{
    favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon_url();
}
const ::std::string& FaviconImageSpecifics::favicon_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_url)
    return favicon_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconImageSpecifics::set_favicon_url(const ::std::string& value)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.FaviconImageSpecifics.favicon_url)
}
void FaviconImageSpecifics::set_favicon_url(const char* value)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.FaviconImageSpecifics.favicon_url)
}
void FaviconImageSpecifics::set_favicon_url(const char* value, size_t size)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.FaviconImageSpecifics.favicon_url)
}
::std::string* FaviconImageSpecifics::mutable_favicon_url()
{
    set_has_favicon_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_url)
    return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaviconImageSpecifics::release_favicon_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_url)
    clear_has_favicon_url();
    return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaviconImageSpecifics::set_allocated_favicon_url(::std::string* favicon_url)
{
    if (favicon_url != NULL) {
        set_has_favicon_url();
    } else {
        clear_has_favicon_url();
    }
    favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_url)
}

// optional .sync_pb.FaviconData favicon_web = 2;
bool FaviconImageSpecifics::has_favicon_web() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void FaviconImageSpecifics::set_has_favicon_web()
{
    _has_bits_[0] |= 0x00000002u;
}
void FaviconImageSpecifics::clear_has_favicon_web()
{
    _has_bits_[0] &= ~0x00000002u;
}
void FaviconImageSpecifics::clear_favicon_web()
{
    if (favicon_web_ != NULL)
        favicon_web_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_web();
}
const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_web)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_web_ != NULL ? *favicon_web_ : *default_instance().favicon_web_;
#else
    return favicon_web_ != NULL ? *favicon_web_ : *default_instance_->favicon_web_;
#endif
}
::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web()
{
    set_has_favicon_web();
    if (favicon_web_ == NULL) {
        favicon_web_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_web)
    return favicon_web_;
}
::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_web)
    clear_has_favicon_web();
    ::sync_pb::FaviconData* temp = favicon_web_;
    favicon_web_ = NULL;
    return temp;
}
void FaviconImageSpecifics::set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web)
{
    delete favicon_web_;
    favicon_web_ = favicon_web;
    if (favicon_web) {
        set_has_favicon_web();
    } else {
        clear_has_favicon_web();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_web)
}

// optional .sync_pb.FaviconData favicon_web_32 = 3;
bool FaviconImageSpecifics::has_favicon_web_32() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void FaviconImageSpecifics::set_has_favicon_web_32()
{
    _has_bits_[0] |= 0x00000004u;
}
void FaviconImageSpecifics::clear_has_favicon_web_32()
{
    _has_bits_[0] &= ~0x00000004u;
}
void FaviconImageSpecifics::clear_favicon_web_32()
{
    if (favicon_web_32_ != NULL)
        favicon_web_32_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_web_32();
}
const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web_32() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_web_32)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_web_32_ != NULL ? *favicon_web_32_ : *default_instance().favicon_web_32_;
#else
    return favicon_web_32_ != NULL ? *favicon_web_32_ : *default_instance_->favicon_web_32_;
#endif
}
::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web_32()
{
    set_has_favicon_web_32();
    if (favicon_web_32_ == NULL) {
        favicon_web_32_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_web_32)
    return favicon_web_32_;
}
::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web_32()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_web_32)
    clear_has_favicon_web_32();
    ::sync_pb::FaviconData* temp = favicon_web_32_;
    favicon_web_32_ = NULL;
    return temp;
}
void FaviconImageSpecifics::set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32)
{
    delete favicon_web_32_;
    favicon_web_32_ = favicon_web_32;
    if (favicon_web_32) {
        set_has_favicon_web_32();
    } else {
        clear_has_favicon_web_32();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_web_32)
}

// optional .sync_pb.FaviconData favicon_touch_64 = 4;
bool FaviconImageSpecifics::has_favicon_touch_64() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void FaviconImageSpecifics::set_has_favicon_touch_64()
{
    _has_bits_[0] |= 0x00000008u;
}
void FaviconImageSpecifics::clear_has_favicon_touch_64()
{
    _has_bits_[0] &= ~0x00000008u;
}
void FaviconImageSpecifics::clear_favicon_touch_64()
{
    if (favicon_touch_64_ != NULL)
        favicon_touch_64_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_touch_64();
}
const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_64() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_touch_64)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_touch_64_ != NULL ? *favicon_touch_64_ : *default_instance().favicon_touch_64_;
#else
    return favicon_touch_64_ != NULL ? *favicon_touch_64_ : *default_instance_->favicon_touch_64_;
#endif
}
::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_64()
{
    set_has_favicon_touch_64();
    if (favicon_touch_64_ == NULL) {
        favicon_touch_64_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_touch_64)
    return favicon_touch_64_;
}
::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_64()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_touch_64)
    clear_has_favicon_touch_64();
    ::sync_pb::FaviconData* temp = favicon_touch_64_;
    favicon_touch_64_ = NULL;
    return temp;
}
void FaviconImageSpecifics::set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64)
{
    delete favicon_touch_64_;
    favicon_touch_64_ = favicon_touch_64;
    if (favicon_touch_64) {
        set_has_favicon_touch_64();
    } else {
        clear_has_favicon_touch_64();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_touch_64)
}

// optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
bool FaviconImageSpecifics::has_favicon_touch_precomposed_64() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void FaviconImageSpecifics::set_has_favicon_touch_precomposed_64()
{
    _has_bits_[0] |= 0x00000010u;
}
void FaviconImageSpecifics::clear_has_favicon_touch_precomposed_64()
{
    _has_bits_[0] &= ~0x00000010u;
}
void FaviconImageSpecifics::clear_favicon_touch_precomposed_64()
{
    if (favicon_touch_precomposed_64_ != NULL)
        favicon_touch_precomposed_64_->::sync_pb::FaviconData::Clear();
    clear_has_favicon_touch_precomposed_64();
}
const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_precomposed_64() const
{
    // @@protoc_insertion_point(field_get:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return favicon_touch_precomposed_64_ != NULL ? *favicon_touch_precomposed_64_ : *default_instance().favicon_touch_precomposed_64_;
#else
    return favicon_touch_precomposed_64_ != NULL ? *favicon_touch_precomposed_64_ : *default_instance_->favicon_touch_precomposed_64_;
#endif
}
::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_precomposed_64()
{
    set_has_favicon_touch_precomposed_64();
    if (favicon_touch_precomposed_64_ == NULL) {
        favicon_touch_precomposed_64_ = new ::sync_pb::FaviconData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
    return favicon_touch_precomposed_64_;
}
::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_precomposed_64()
{
    // @@protoc_insertion_point(field_release:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
    clear_has_favicon_touch_precomposed_64();
    ::sync_pb::FaviconData* temp = favicon_touch_precomposed_64_;
    favicon_touch_precomposed_64_ = NULL;
    return temp;
}
void FaviconImageSpecifics::set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64)
{
    delete favicon_touch_precomposed_64_;
    favicon_touch_precomposed_64_ = favicon_touch_precomposed_64;
    if (favicon_touch_precomposed_64) {
        set_has_favicon_touch_precomposed_64();
    } else {
        clear_has_favicon_touch_precomposed_64();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.FaviconImageSpecifics.favicon_touch_precomposed_64)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
