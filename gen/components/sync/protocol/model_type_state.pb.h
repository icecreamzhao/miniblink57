// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_type_state.proto

#ifndef PROTOBUF_model_5ftype_5fstate_2eproto__INCLUDED
#define PROTOBUF_model_5ftype_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "sync.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_model_5ftype_5fstate_2eproto();
void protobuf_AssignDesc_model_5ftype_5fstate_2eproto();
void protobuf_ShutdownFile_model_5ftype_5fstate_2eproto();

class ModelTypeState;

// ===================================================================

class ModelTypeState : public ::google::protobuf::MessageLite {
public:
    ModelTypeState();
    virtual ~ModelTypeState();

    ModelTypeState(const ModelTypeState& from);

    inline ModelTypeState& operator=(const ModelTypeState& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const ModelTypeState& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const ModelTypeState* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(ModelTypeState* other);

    // implements Message ----------------------------------------------

    inline ModelTypeState* New() const { return New(NULL); }

    ModelTypeState* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const ModelTypeState& from);
    void MergeFrom(const ModelTypeState& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(ModelTypeState* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
    bool has_progress_marker() const;
    void clear_progress_marker();
    static const int kProgressMarkerFieldNumber = 1;
    const ::sync_pb::DataTypeProgressMarker& progress_marker() const;
    ::sync_pb::DataTypeProgressMarker* mutable_progress_marker();
    ::sync_pb::DataTypeProgressMarker* release_progress_marker();
    void set_allocated_progress_marker(::sync_pb::DataTypeProgressMarker* progress_marker);

    // optional .sync_pb.DataTypeContext type_context = 2;
    bool has_type_context() const;
    void clear_type_context();
    static const int kTypeContextFieldNumber = 2;
    const ::sync_pb::DataTypeContext& type_context() const;
    ::sync_pb::DataTypeContext* mutable_type_context();
    ::sync_pb::DataTypeContext* release_type_context();
    void set_allocated_type_context(::sync_pb::DataTypeContext* type_context);

    // optional string encryption_key_name = 3;
    bool has_encryption_key_name() const;
    void clear_encryption_key_name();
    static const int kEncryptionKeyNameFieldNumber = 3;
    const ::std::string& encryption_key_name() const;
    void set_encryption_key_name(const ::std::string& value);
    void set_encryption_key_name(const char* value);
    void set_encryption_key_name(const char* value, size_t size);
    ::std::string* mutable_encryption_key_name();
    ::std::string* release_encryption_key_name();
    void set_allocated_encryption_key_name(::std::string* encryption_key_name);

    // optional bool initial_sync_done = 4;
    bool has_initial_sync_done() const;
    void clear_initial_sync_done();
    static const int kInitialSyncDoneFieldNumber = 4;
    bool initial_sync_done() const;
    void set_initial_sync_done(bool value);

    // @@protoc_insertion_point(class_scope:sync_pb.ModelTypeState)
private:
    inline void set_has_progress_marker();
    inline void clear_has_progress_marker();
    inline void set_has_type_context();
    inline void clear_has_type_context();
    inline void set_has_encryption_key_name();
    inline void clear_has_encryption_key_name();
    inline void set_has_initial_sync_done();
    inline void clear_has_initial_sync_done();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::sync_pb::DataTypeProgressMarker* progress_marker_;
    ::sync_pb::DataTypeContext* type_context_;
    ::google::protobuf::internal::ArenaStringPtr encryption_key_name_;
    bool initial_sync_done_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_model_5ftype_5fstate_2eproto_impl();
#else
    friend void protobuf_AddDesc_model_5ftype_5fstate_2eproto();
#endif
    friend void protobuf_AssignDesc_model_5ftype_5fstate_2eproto();
    friend void protobuf_ShutdownFile_model_5ftype_5fstate_2eproto();

    void InitAsDefaultInstance();
    static ModelTypeState* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelTypeState

// optional .sync_pb.DataTypeProgressMarker progress_marker = 1;
inline bool ModelTypeState::has_progress_marker() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelTypeState::set_has_progress_marker()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void ModelTypeState::clear_has_progress_marker()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void ModelTypeState::clear_progress_marker()
{
    if (progress_marker_ != NULL)
        progress_marker_->::sync_pb::DataTypeProgressMarker::Clear();
    clear_has_progress_marker();
}
inline const ::sync_pb::DataTypeProgressMarker& ModelTypeState::progress_marker() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.progress_marker)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return progress_marker_ != NULL ? *progress_marker_ : *default_instance().progress_marker_;
#else
    return progress_marker_ != NULL ? *progress_marker_ : *default_instance_->progress_marker_;
#endif
}
inline ::sync_pb::DataTypeProgressMarker* ModelTypeState::mutable_progress_marker()
{
    set_has_progress_marker();
    if (progress_marker_ == NULL) {
        progress_marker_ = new ::sync_pb::DataTypeProgressMarker;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.progress_marker)
    return progress_marker_;
}
inline ::sync_pb::DataTypeProgressMarker* ModelTypeState::release_progress_marker()
{
    // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.progress_marker)
    clear_has_progress_marker();
    ::sync_pb::DataTypeProgressMarker* temp = progress_marker_;
    progress_marker_ = NULL;
    return temp;
}
inline void ModelTypeState::set_allocated_progress_marker(::sync_pb::DataTypeProgressMarker* progress_marker)
{
    delete progress_marker_;
    progress_marker_ = progress_marker;
    if (progress_marker) {
        set_has_progress_marker();
    } else {
        clear_has_progress_marker();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.progress_marker)
}

// optional .sync_pb.DataTypeContext type_context = 2;
inline bool ModelTypeState::has_type_context() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelTypeState::set_has_type_context()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void ModelTypeState::clear_has_type_context()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void ModelTypeState::clear_type_context()
{
    if (type_context_ != NULL)
        type_context_->::sync_pb::DataTypeContext::Clear();
    clear_has_type_context();
}
inline const ::sync_pb::DataTypeContext& ModelTypeState::type_context() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.type_context)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return type_context_ != NULL ? *type_context_ : *default_instance().type_context_;
#else
    return type_context_ != NULL ? *type_context_ : *default_instance_->type_context_;
#endif
}
inline ::sync_pb::DataTypeContext* ModelTypeState::mutable_type_context()
{
    set_has_type_context();
    if (type_context_ == NULL) {
        type_context_ = new ::sync_pb::DataTypeContext;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.type_context)
    return type_context_;
}
inline ::sync_pb::DataTypeContext* ModelTypeState::release_type_context()
{
    // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.type_context)
    clear_has_type_context();
    ::sync_pb::DataTypeContext* temp = type_context_;
    type_context_ = NULL;
    return temp;
}
inline void ModelTypeState::set_allocated_type_context(::sync_pb::DataTypeContext* type_context)
{
    delete type_context_;
    type_context_ = type_context;
    if (type_context) {
        set_has_type_context();
    } else {
        clear_has_type_context();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.type_context)
}

// optional string encryption_key_name = 3;
inline bool ModelTypeState::has_encryption_key_name() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelTypeState::set_has_encryption_key_name()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void ModelTypeState::clear_has_encryption_key_name()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void ModelTypeState::clear_encryption_key_name()
{
    encryption_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_encryption_key_name();
}
inline const ::std::string& ModelTypeState::encryption_key_name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.encryption_key_name)
    return encryption_key_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeState::set_encryption_key_name(const ::std::string& value)
{
    set_has_encryption_key_name();
    encryption_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.encryption_key_name)
}
inline void ModelTypeState::set_encryption_key_name(const char* value)
{
    set_has_encryption_key_name();
    encryption_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ModelTypeState.encryption_key_name)
}
inline void ModelTypeState::set_encryption_key_name(const char* value, size_t size)
{
    set_has_encryption_key_name();
    encryption_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ModelTypeState.encryption_key_name)
}
inline ::std::string* ModelTypeState::mutable_encryption_key_name()
{
    set_has_encryption_key_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.ModelTypeState.encryption_key_name)
    return encryption_key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelTypeState::release_encryption_key_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.ModelTypeState.encryption_key_name)
    clear_has_encryption_key_name();
    return encryption_key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelTypeState::set_allocated_encryption_key_name(::std::string* encryption_key_name)
{
    if (encryption_key_name != NULL) {
        set_has_encryption_key_name();
    } else {
        clear_has_encryption_key_name();
    }
    encryption_key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_key_name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ModelTypeState.encryption_key_name)
}

// optional bool initial_sync_done = 4;
inline bool ModelTypeState::has_initial_sync_done() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelTypeState::set_has_initial_sync_done()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void ModelTypeState::clear_has_initial_sync_done()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void ModelTypeState::clear_initial_sync_done()
{
    initial_sync_done_ = false;
    clear_has_initial_sync_done();
}
inline bool ModelTypeState::initial_sync_done() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ModelTypeState.initial_sync_done)
    return initial_sync_done_;
}
inline void ModelTypeState::set_initial_sync_done(bool value)
{
    set_has_initial_sync_done();
    initial_sync_done_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ModelTypeState.initial_sync_done)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_model_5ftype_5fstate_2eproto__INCLUDED
