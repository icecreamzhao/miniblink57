// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: theme_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "theme_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_theme_5fspecifics_2eproto()
{
    delete ThemeSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_theme_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_theme_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ThemeSpecifics::default_instance_ = new ThemeSpecifics();
    ThemeSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_theme_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_theme_5fspecifics_2eproto_once_);
void protobuf_AddDesc_theme_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_theme_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_theme_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_theme_5fspecifics_2eproto {
    StaticDescriptorInitializer_theme_5fspecifics_2eproto()
    {
        protobuf_AddDesc_theme_5fspecifics_2eproto();
    }
} static_descriptor_initializer_theme_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForThemeSpecifics(
    ThemeSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThemeSpecifics::kUseCustomThemeFieldNumber;
const int ThemeSpecifics::kUseSystemThemeByDefaultFieldNumber;
const int ThemeSpecifics::kCustomThemeNameFieldNumber;
const int ThemeSpecifics::kCustomThemeIdFieldNumber;
const int ThemeSpecifics::kCustomThemeUpdateUrlFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ThemeSpecifics::ThemeSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ThemeSpecifics)
}

void ThemeSpecifics::InitAsDefaultInstance()
{
}

ThemeSpecifics::ThemeSpecifics(const ThemeSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ThemeSpecifics)
}

void ThemeSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    use_custom_theme_ = false;
    use_system_theme_by_default_ = false;
    custom_theme_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    custom_theme_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    custom_theme_update_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeSpecifics::~ThemeSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.ThemeSpecifics)
    SharedDtor();
}

void ThemeSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    custom_theme_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    custom_theme_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    custom_theme_update_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ThemeSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ThemeSpecifics& ThemeSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_theme_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_theme_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

ThemeSpecifics* ThemeSpecifics::default_instance_ = NULL;

ThemeSpecifics* ThemeSpecifics::New(::google::protobuf::Arena* arena) const
{
    ThemeSpecifics* n = new ThemeSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ThemeSpecifics::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.ThemeSpecifics)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                    \
    _Pragma("clang diagnostic push")                                                                     \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(ThemeSpecifics, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<ThemeSpecifics*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(use_custom_theme_, use_system_theme_by_default_);
        if (has_custom_theme_name()) {
            custom_theme_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_custom_theme_id()) {
            custom_theme_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_custom_theme_update_url()) {
            custom_theme_update_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ThemeSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForThemeSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ThemeSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool use_custom_theme = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &use_custom_theme_)));
                set_has_use_custom_theme();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_use_system_theme_by_default;
            break;
        }

        // optional bool use_system_theme_by_default = 2;
        case 2: {
            if (tag == 16) {
            parse_use_system_theme_by_default:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &use_system_theme_by_default_)));
                set_has_use_system_theme_by_default();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_custom_theme_name;
            break;
        }

        // optional string custom_theme_name = 3;
        case 3: {
            if (tag == 26) {
            parse_custom_theme_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_custom_theme_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_custom_theme_id;
            break;
        }

        // optional string custom_theme_id = 4;
        case 4: {
            if (tag == 34) {
            parse_custom_theme_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_custom_theme_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_custom_theme_update_url;
            break;
        }

        // optional string custom_theme_update_url = 5;
        case 5: {
            if (tag == 42) {
            parse_custom_theme_update_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_custom_theme_update_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ThemeSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ThemeSpecifics)
    return false;
#undef DO_
}

void ThemeSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ThemeSpecifics)
    // optional bool use_custom_theme = 1;
    if (has_use_custom_theme()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_custom_theme(), output);
    }

    // optional bool use_system_theme_by_default = 2;
    if (has_use_system_theme_by_default()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_system_theme_by_default(), output);
    }

    // optional string custom_theme_name = 3;
    if (has_custom_theme_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->custom_theme_name(), output);
    }

    // optional string custom_theme_id = 4;
    if (has_custom_theme_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->custom_theme_id(), output);
    }

    // optional string custom_theme_update_url = 5;
    if (has_custom_theme_update_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->custom_theme_update_url(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ThemeSpecifics)
}

int ThemeSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ThemeSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional bool use_custom_theme = 1;
        if (has_use_custom_theme()) {
            total_size += 1 + 1;
        }

        // optional bool use_system_theme_by_default = 2;
        if (has_use_system_theme_by_default()) {
            total_size += 1 + 1;
        }

        // optional string custom_theme_name = 3;
        if (has_custom_theme_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->custom_theme_name());
        }

        // optional string custom_theme_id = 4;
        if (has_custom_theme_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->custom_theme_id());
        }

        // optional string custom_theme_update_url = 5;
        if (has_custom_theme_update_url()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->custom_theme_update_url());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ThemeSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ThemeSpecifics*>(&from));
}

void ThemeSpecifics::MergeFrom(const ThemeSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ThemeSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_use_custom_theme()) {
            set_use_custom_theme(from.use_custom_theme());
        }
        if (from.has_use_system_theme_by_default()) {
            set_use_system_theme_by_default(from.use_system_theme_by_default());
        }
        if (from.has_custom_theme_name()) {
            set_has_custom_theme_name();
            custom_theme_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_theme_name_);
        }
        if (from.has_custom_theme_id()) {
            set_has_custom_theme_id();
            custom_theme_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_theme_id_);
        }
        if (from.has_custom_theme_update_url()) {
            set_has_custom_theme_update_url();
            custom_theme_update_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_theme_update_url_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ThemeSpecifics::CopyFrom(const ThemeSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ThemeSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ThemeSpecifics::IsInitialized() const
{

    return true;
}

void ThemeSpecifics::Swap(ThemeSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ThemeSpecifics::InternalSwap(ThemeSpecifics* other)
{
    std::swap(use_custom_theme_, other->use_custom_theme_);
    std::swap(use_system_theme_by_default_, other->use_system_theme_by_default_);
    custom_theme_name_.Swap(&other->custom_theme_name_);
    custom_theme_id_.Swap(&other->custom_theme_id_);
    custom_theme_update_url_.Swap(&other->custom_theme_update_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ThemeSpecifics::GetTypeName() const
{
    return "sync_pb.ThemeSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThemeSpecifics

// optional bool use_custom_theme = 1;
bool ThemeSpecifics::has_use_custom_theme() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThemeSpecifics::set_has_use_custom_theme()
{
    _has_bits_[0] |= 0x00000001u;
}
void ThemeSpecifics::clear_has_use_custom_theme()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ThemeSpecifics::clear_use_custom_theme()
{
    use_custom_theme_ = false;
    clear_has_use_custom_theme();
}
bool ThemeSpecifics::use_custom_theme() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ThemeSpecifics.use_custom_theme)
    return use_custom_theme_;
}
void ThemeSpecifics::set_use_custom_theme(bool value)
{
    set_has_use_custom_theme();
    use_custom_theme_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ThemeSpecifics.use_custom_theme)
}

// optional bool use_system_theme_by_default = 2;
bool ThemeSpecifics::has_use_system_theme_by_default() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ThemeSpecifics::set_has_use_system_theme_by_default()
{
    _has_bits_[0] |= 0x00000002u;
}
void ThemeSpecifics::clear_has_use_system_theme_by_default()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ThemeSpecifics::clear_use_system_theme_by_default()
{
    use_system_theme_by_default_ = false;
    clear_has_use_system_theme_by_default();
}
bool ThemeSpecifics::use_system_theme_by_default() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ThemeSpecifics.use_system_theme_by_default)
    return use_system_theme_by_default_;
}
void ThemeSpecifics::set_use_system_theme_by_default(bool value)
{
    set_has_use_system_theme_by_default();
    use_system_theme_by_default_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ThemeSpecifics.use_system_theme_by_default)
}

// optional string custom_theme_name = 3;
bool ThemeSpecifics::has_custom_theme_name() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ThemeSpecifics::set_has_custom_theme_name()
{
    _has_bits_[0] |= 0x00000004u;
}
void ThemeSpecifics::clear_has_custom_theme_name()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ThemeSpecifics::clear_custom_theme_name()
{
    custom_theme_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_custom_theme_name();
}
const ::std::string& ThemeSpecifics::custom_theme_name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ThemeSpecifics.custom_theme_name)
    return custom_theme_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeSpecifics::set_custom_theme_name(const ::std::string& value)
{
    set_has_custom_theme_name();
    custom_theme_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ThemeSpecifics.custom_theme_name)
}
void ThemeSpecifics::set_custom_theme_name(const char* value)
{
    set_has_custom_theme_name();
    custom_theme_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ThemeSpecifics.custom_theme_name)
}
void ThemeSpecifics::set_custom_theme_name(const char* value, size_t size)
{
    set_has_custom_theme_name();
    custom_theme_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ThemeSpecifics.custom_theme_name)
}
::std::string* ThemeSpecifics::mutable_custom_theme_name()
{
    set_has_custom_theme_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.ThemeSpecifics.custom_theme_name)
    return custom_theme_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ThemeSpecifics::release_custom_theme_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.ThemeSpecifics.custom_theme_name)
    clear_has_custom_theme_name();
    return custom_theme_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeSpecifics::set_allocated_custom_theme_name(::std::string* custom_theme_name)
{
    if (custom_theme_name != NULL) {
        set_has_custom_theme_name();
    } else {
        clear_has_custom_theme_name();
    }
    custom_theme_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_theme_name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ThemeSpecifics.custom_theme_name)
}

// optional string custom_theme_id = 4;
bool ThemeSpecifics::has_custom_theme_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ThemeSpecifics::set_has_custom_theme_id()
{
    _has_bits_[0] |= 0x00000008u;
}
void ThemeSpecifics::clear_has_custom_theme_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ThemeSpecifics::clear_custom_theme_id()
{
    custom_theme_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_custom_theme_id();
}
const ::std::string& ThemeSpecifics::custom_theme_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ThemeSpecifics.custom_theme_id)
    return custom_theme_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeSpecifics::set_custom_theme_id(const ::std::string& value)
{
    set_has_custom_theme_id();
    custom_theme_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ThemeSpecifics.custom_theme_id)
}
void ThemeSpecifics::set_custom_theme_id(const char* value)
{
    set_has_custom_theme_id();
    custom_theme_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ThemeSpecifics.custom_theme_id)
}
void ThemeSpecifics::set_custom_theme_id(const char* value, size_t size)
{
    set_has_custom_theme_id();
    custom_theme_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ThemeSpecifics.custom_theme_id)
}
::std::string* ThemeSpecifics::mutable_custom_theme_id()
{
    set_has_custom_theme_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.ThemeSpecifics.custom_theme_id)
    return custom_theme_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ThemeSpecifics::release_custom_theme_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.ThemeSpecifics.custom_theme_id)
    clear_has_custom_theme_id();
    return custom_theme_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeSpecifics::set_allocated_custom_theme_id(::std::string* custom_theme_id)
{
    if (custom_theme_id != NULL) {
        set_has_custom_theme_id();
    } else {
        clear_has_custom_theme_id();
    }
    custom_theme_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_theme_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ThemeSpecifics.custom_theme_id)
}

// optional string custom_theme_update_url = 5;
bool ThemeSpecifics::has_custom_theme_update_url() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ThemeSpecifics::set_has_custom_theme_update_url()
{
    _has_bits_[0] |= 0x00000010u;
}
void ThemeSpecifics::clear_has_custom_theme_update_url()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ThemeSpecifics::clear_custom_theme_update_url()
{
    custom_theme_update_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_custom_theme_update_url();
}
const ::std::string& ThemeSpecifics::custom_theme_update_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ThemeSpecifics.custom_theme_update_url)
    return custom_theme_update_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeSpecifics::set_custom_theme_update_url(const ::std::string& value)
{
    set_has_custom_theme_update_url();
    custom_theme_update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ThemeSpecifics.custom_theme_update_url)
}
void ThemeSpecifics::set_custom_theme_update_url(const char* value)
{
    set_has_custom_theme_update_url();
    custom_theme_update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ThemeSpecifics.custom_theme_update_url)
}
void ThemeSpecifics::set_custom_theme_update_url(const char* value, size_t size)
{
    set_has_custom_theme_update_url();
    custom_theme_update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ThemeSpecifics.custom_theme_update_url)
}
::std::string* ThemeSpecifics::mutable_custom_theme_update_url()
{
    set_has_custom_theme_update_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.ThemeSpecifics.custom_theme_update_url)
    return custom_theme_update_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ThemeSpecifics::release_custom_theme_update_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.ThemeSpecifics.custom_theme_update_url)
    clear_has_custom_theme_update_url();
    return custom_theme_update_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ThemeSpecifics::set_allocated_custom_theme_update_url(::std::string* custom_theme_update_url)
{
    if (custom_theme_update_url != NULL) {
        set_has_custom_theme_update_url();
    } else {
        clear_has_custom_theme_update_url();
    }
    custom_theme_update_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_theme_update_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ThemeSpecifics.custom_theme_update_url)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
