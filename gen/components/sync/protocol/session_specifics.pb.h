// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session_specifics.proto

#ifndef PROTOBUF_session_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_session_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "sync_enums.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_session_5fspecifics_2eproto();
void protobuf_AssignDesc_session_5fspecifics_2eproto();
void protobuf_ShutdownFile_session_5fspecifics_2eproto();

class NavigationRedirect;
class SessionHeader;
class SessionSpecifics;
class SessionTab;
class SessionWindow;
class TabNavigation;

enum SessionWindow_BrowserType {
    SessionWindow_BrowserType_TYPE_TABBED = 1,
    SessionWindow_BrowserType_TYPE_POPUP = 2,
    SessionWindow_BrowserType_TYPE_CUSTOM_TAB = 3
};
bool SessionWindow_BrowserType_IsValid(int value);
const SessionWindow_BrowserType SessionWindow_BrowserType_BrowserType_MIN = SessionWindow_BrowserType_TYPE_TABBED;
const SessionWindow_BrowserType SessionWindow_BrowserType_BrowserType_MAX = SessionWindow_BrowserType_TYPE_CUSTOM_TAB;
const int SessionWindow_BrowserType_BrowserType_ARRAYSIZE = SessionWindow_BrowserType_BrowserType_MAX + 1;

enum SessionTab_FaviconType {
    SessionTab_FaviconType_TYPE_WEB_FAVICON = 1
};
bool SessionTab_FaviconType_IsValid(int value);
const SessionTab_FaviconType SessionTab_FaviconType_FaviconType_MIN = SessionTab_FaviconType_TYPE_WEB_FAVICON;
const SessionTab_FaviconType SessionTab_FaviconType_FaviconType_MAX = SessionTab_FaviconType_TYPE_WEB_FAVICON;
const int SessionTab_FaviconType_FaviconType_ARRAYSIZE = SessionTab_FaviconType_FaviconType_MAX + 1;

enum TabNavigation_BlockedState {
    TabNavigation_BlockedState_STATE_ALLOWED = 1,
    TabNavigation_BlockedState_STATE_BLOCKED = 2
};
bool TabNavigation_BlockedState_IsValid(int value);
const TabNavigation_BlockedState TabNavigation_BlockedState_BlockedState_MIN = TabNavigation_BlockedState_STATE_ALLOWED;
const TabNavigation_BlockedState TabNavigation_BlockedState_BlockedState_MAX = TabNavigation_BlockedState_STATE_BLOCKED;
const int TabNavigation_BlockedState_BlockedState_ARRAYSIZE = TabNavigation_BlockedState_BlockedState_MAX + 1;

enum TabNavigation_PasswordState {
    TabNavigation_PasswordState_PASSWORD_STATE_UNKNOWN = 0,
    TabNavigation_PasswordState_NO_PASSWORD_FIELD = 1,
    TabNavigation_PasswordState_HAS_PASSWORD_FIELD = 2
};
bool TabNavigation_PasswordState_IsValid(int value);
const TabNavigation_PasswordState TabNavigation_PasswordState_PasswordState_MIN = TabNavigation_PasswordState_PASSWORD_STATE_UNKNOWN;
const TabNavigation_PasswordState TabNavigation_PasswordState_PasswordState_MAX = TabNavigation_PasswordState_HAS_PASSWORD_FIELD;
const int TabNavigation_PasswordState_PasswordState_ARRAYSIZE = TabNavigation_PasswordState_PasswordState_MAX + 1;

// ===================================================================

class SessionSpecifics : public ::google::protobuf::MessageLite {
public:
    SessionSpecifics();
    virtual ~SessionSpecifics();

    SessionSpecifics(const SessionSpecifics& from);

    inline SessionSpecifics& operator=(const SessionSpecifics& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const SessionSpecifics& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const SessionSpecifics* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(SessionSpecifics* other);

    // implements Message ----------------------------------------------

    inline SessionSpecifics* New() const { return New(NULL); }

    SessionSpecifics* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const SessionSpecifics& from);
    void MergeFrom(const SessionSpecifics& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(SessionSpecifics* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string session_tag = 1;
    bool has_session_tag() const;
    void clear_session_tag();
    static const int kSessionTagFieldNumber = 1;
    const ::std::string& session_tag() const;
    void set_session_tag(const ::std::string& value);
    void set_session_tag(const char* value);
    void set_session_tag(const char* value, size_t size);
    ::std::string* mutable_session_tag();
    ::std::string* release_session_tag();
    void set_allocated_session_tag(::std::string* session_tag);

    // optional .sync_pb.SessionHeader header = 2;
    bool has_header() const;
    void clear_header();
    static const int kHeaderFieldNumber = 2;
    const ::sync_pb::SessionHeader& header() const;
    ::sync_pb::SessionHeader* mutable_header();
    ::sync_pb::SessionHeader* release_header();
    void set_allocated_header(::sync_pb::SessionHeader* header);

    // optional .sync_pb.SessionTab tab = 3;
    bool has_tab() const;
    void clear_tab();
    static const int kTabFieldNumber = 3;
    const ::sync_pb::SessionTab& tab() const;
    ::sync_pb::SessionTab* mutable_tab();
    ::sync_pb::SessionTab* release_tab();
    void set_allocated_tab(::sync_pb::SessionTab* tab);

    // optional int32 tab_node_id = 4 [default = -1];
    bool has_tab_node_id() const;
    void clear_tab_node_id();
    static const int kTabNodeIdFieldNumber = 4;
    ::google::protobuf::int32 tab_node_id() const;
    void set_tab_node_id(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:sync_pb.SessionSpecifics)
private:
    inline void set_has_session_tag();
    inline void clear_has_session_tag();
    inline void set_has_header();
    inline void clear_has_header();
    inline void set_has_tab();
    inline void clear_has_tab();
    inline void set_has_tab_node_id();
    inline void clear_has_tab_node_id();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr session_tag_;
    ::sync_pb::SessionHeader* header_;
    ::sync_pb::SessionTab* tab_;
    ::google::protobuf::int32 tab_node_id_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_session_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_session_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_session_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static SessionSpecifics* default_instance_;
};
// -------------------------------------------------------------------

class SessionHeader : public ::google::protobuf::MessageLite {
public:
    SessionHeader();
    virtual ~SessionHeader();

    SessionHeader(const SessionHeader& from);

    inline SessionHeader& operator=(const SessionHeader& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const SessionHeader& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const SessionHeader* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(SessionHeader* other);

    // implements Message ----------------------------------------------

    inline SessionHeader* New() const { return New(NULL); }

    SessionHeader* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const SessionHeader& from);
    void MergeFrom(const SessionHeader& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(SessionHeader* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .sync_pb.SessionWindow window = 2;
    int window_size() const;
    void clear_window();
    static const int kWindowFieldNumber = 2;
    const ::sync_pb::SessionWindow& window(int index) const;
    ::sync_pb::SessionWindow* mutable_window(int index);
    ::sync_pb::SessionWindow* add_window();
    ::google::protobuf::RepeatedPtrField<::sync_pb::SessionWindow>*
    mutable_window();
    const ::google::protobuf::RepeatedPtrField<::sync_pb::SessionWindow>&
    window() const;

    // optional string client_name = 3;
    bool has_client_name() const;
    void clear_client_name();
    static const int kClientNameFieldNumber = 3;
    const ::std::string& client_name() const;
    void set_client_name(const ::std::string& value);
    void set_client_name(const char* value);
    void set_client_name(const char* value, size_t size);
    ::std::string* mutable_client_name();
    ::std::string* release_client_name();
    void set_allocated_client_name(::std::string* client_name);

    // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
    bool has_device_type() const;
    void clear_device_type();
    static const int kDeviceTypeFieldNumber = 4;
    ::sync_pb::SyncEnums_DeviceType device_type() const;
    void set_device_type(::sync_pb::SyncEnums_DeviceType value);

    // @@protoc_insertion_point(class_scope:sync_pb.SessionHeader)
private:
    inline void set_has_client_name();
    inline void clear_has_client_name();
    inline void set_has_device_type();
    inline void clear_has_device_type();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<::sync_pb::SessionWindow> window_;
    ::google::protobuf::internal::ArenaStringPtr client_name_;
    int device_type_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_session_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_session_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_session_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static SessionHeader* default_instance_;
};
// -------------------------------------------------------------------

class SessionWindow : public ::google::protobuf::MessageLite {
public:
    SessionWindow();
    virtual ~SessionWindow();

    SessionWindow(const SessionWindow& from);

    inline SessionWindow& operator=(const SessionWindow& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const SessionWindow& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const SessionWindow* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(SessionWindow* other);

    // implements Message ----------------------------------------------

    inline SessionWindow* New() const { return New(NULL); }

    SessionWindow* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const SessionWindow& from);
    void MergeFrom(const SessionWindow& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(SessionWindow* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    typedef SessionWindow_BrowserType BrowserType;
    static const BrowserType TYPE_TABBED = SessionWindow_BrowserType_TYPE_TABBED;
    static const BrowserType TYPE_POPUP = SessionWindow_BrowserType_TYPE_POPUP;
    static const BrowserType TYPE_CUSTOM_TAB = SessionWindow_BrowserType_TYPE_CUSTOM_TAB;
    static inline bool BrowserType_IsValid(int value)
    {
        return SessionWindow_BrowserType_IsValid(value);
    }
    static const BrowserType BrowserType_MIN = SessionWindow_BrowserType_BrowserType_MIN;
    static const BrowserType BrowserType_MAX = SessionWindow_BrowserType_BrowserType_MAX;
    static const int BrowserType_ARRAYSIZE = SessionWindow_BrowserType_BrowserType_ARRAYSIZE;

    // accessors -------------------------------------------------------

    // optional int32 window_id = 1;
    bool has_window_id() const;
    void clear_window_id();
    static const int kWindowIdFieldNumber = 1;
    ::google::protobuf::int32 window_id() const;
    void set_window_id(::google::protobuf::int32 value);

    // optional int32 selected_tab_index = 2 [default = -1];
    bool has_selected_tab_index() const;
    void clear_selected_tab_index();
    static const int kSelectedTabIndexFieldNumber = 2;
    ::google::protobuf::int32 selected_tab_index() const;
    void set_selected_tab_index(::google::protobuf::int32 value);

    // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
    bool has_browser_type() const;
    void clear_browser_type();
    static const int kBrowserTypeFieldNumber = 3;
    ::sync_pb::SessionWindow_BrowserType browser_type() const;
    void set_browser_type(::sync_pb::SessionWindow_BrowserType value);

    // repeated int32 tab = 4;
    int tab_size() const;
    void clear_tab();
    static const int kTabFieldNumber = 4;
    ::google::protobuf::int32 tab(int index) const;
    void set_tab(int index, ::google::protobuf::int32 value);
    void add_tab(::google::protobuf::int32 value);
    const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
    tab() const;
    ::google::protobuf::RepeatedField<::google::protobuf::int32>*
    mutable_tab();

    // @@protoc_insertion_point(class_scope:sync_pb.SessionWindow)
private:
    inline void set_has_window_id();
    inline void clear_has_window_id();
    inline void set_has_selected_tab_index();
    inline void clear_has_selected_tab_index();
    inline void set_has_browser_type();
    inline void clear_has_browser_type();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::int32 window_id_;
    ::google::protobuf::int32 selected_tab_index_;
    ::google::protobuf::RepeatedField<::google::protobuf::int32> tab_;
    int browser_type_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_session_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_session_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_session_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static SessionWindow* default_instance_;
};
// -------------------------------------------------------------------

class SessionTab : public ::google::protobuf::MessageLite {
public:
    SessionTab();
    virtual ~SessionTab();

    SessionTab(const SessionTab& from);

    inline SessionTab& operator=(const SessionTab& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const SessionTab& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const SessionTab* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(SessionTab* other);

    // implements Message ----------------------------------------------

    inline SessionTab* New() const { return New(NULL); }

    SessionTab* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const SessionTab& from);
    void MergeFrom(const SessionTab& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(SessionTab* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    typedef SessionTab_FaviconType FaviconType;
    static const FaviconType TYPE_WEB_FAVICON = SessionTab_FaviconType_TYPE_WEB_FAVICON;
    static inline bool FaviconType_IsValid(int value)
    {
        return SessionTab_FaviconType_IsValid(value);
    }
    static const FaviconType FaviconType_MIN = SessionTab_FaviconType_FaviconType_MIN;
    static const FaviconType FaviconType_MAX = SessionTab_FaviconType_FaviconType_MAX;
    static const int FaviconType_ARRAYSIZE = SessionTab_FaviconType_FaviconType_ARRAYSIZE;

    // accessors -------------------------------------------------------

    // optional int32 tab_id = 1;
    bool has_tab_id() const;
    void clear_tab_id();
    static const int kTabIdFieldNumber = 1;
    ::google::protobuf::int32 tab_id() const;
    void set_tab_id(::google::protobuf::int32 value);

    // optional int32 window_id = 2;
    bool has_window_id() const;
    void clear_window_id();
    static const int kWindowIdFieldNumber = 2;
    ::google::protobuf::int32 window_id() const;
    void set_window_id(::google::protobuf::int32 value);

    // optional int32 tab_visual_index = 3 [default = -1];
    bool has_tab_visual_index() const;
    void clear_tab_visual_index();
    static const int kTabVisualIndexFieldNumber = 3;
    ::google::protobuf::int32 tab_visual_index() const;
    void set_tab_visual_index(::google::protobuf::int32 value);

    // optional int32 current_navigation_index = 4 [default = -1];
    bool has_current_navigation_index() const;
    void clear_current_navigation_index();
    static const int kCurrentNavigationIndexFieldNumber = 4;
    ::google::protobuf::int32 current_navigation_index() const;
    void set_current_navigation_index(::google::protobuf::int32 value);

    // optional bool pinned = 5 [default = false];
    bool has_pinned() const;
    void clear_pinned();
    static const int kPinnedFieldNumber = 5;
    bool pinned() const;
    void set_pinned(bool value);

    // optional string extension_app_id = 6;
    bool has_extension_app_id() const;
    void clear_extension_app_id();
    static const int kExtensionAppIdFieldNumber = 6;
    const ::std::string& extension_app_id() const;
    void set_extension_app_id(const ::std::string& value);
    void set_extension_app_id(const char* value);
    void set_extension_app_id(const char* value, size_t size);
    ::std::string* mutable_extension_app_id();
    ::std::string* release_extension_app_id();
    void set_allocated_extension_app_id(::std::string* extension_app_id);

    // repeated .sync_pb.TabNavigation navigation = 7;
    int navigation_size() const;
    void clear_navigation();
    static const int kNavigationFieldNumber = 7;
    const ::sync_pb::TabNavigation& navigation(int index) const;
    ::sync_pb::TabNavigation* mutable_navigation(int index);
    ::sync_pb::TabNavigation* add_navigation();
    ::google::protobuf::RepeatedPtrField<::sync_pb::TabNavigation>*
    mutable_navigation();
    const ::google::protobuf::RepeatedPtrField<::sync_pb::TabNavigation>&
    navigation() const;

    // optional bytes favicon = 8;
    bool has_favicon() const;
    void clear_favicon();
    static const int kFaviconFieldNumber = 8;
    const ::std::string& favicon() const;
    void set_favicon(const ::std::string& value);
    void set_favicon(const char* value);
    void set_favicon(const void* value, size_t size);
    ::std::string* mutable_favicon();
    ::std::string* release_favicon();
    void set_allocated_favicon(::std::string* favicon);

    // optional .sync_pb.SessionTab.FaviconType favicon_type = 9;
    bool has_favicon_type() const;
    void clear_favicon_type();
    static const int kFaviconTypeFieldNumber = 9;
    ::sync_pb::SessionTab_FaviconType favicon_type() const;
    void set_favicon_type(::sync_pb::SessionTab_FaviconType value);

    // optional string favicon_source = 11;
    bool has_favicon_source() const;
    void clear_favicon_source();
    static const int kFaviconSourceFieldNumber = 11;
    const ::std::string& favicon_source() const;
    void set_favicon_source(const ::std::string& value);
    void set_favicon_source(const char* value);
    void set_favicon_source(const char* value, size_t size);
    ::std::string* mutable_favicon_source();
    ::std::string* release_favicon_source();
    void set_allocated_favicon_source(::std::string* favicon_source);

    // repeated uint64 variation_id = 12;
    int variation_id_size() const;
    void clear_variation_id();
    static const int kVariationIdFieldNumber = 12;
    ::google::protobuf::uint64 variation_id(int index) const;
    void set_variation_id(int index, ::google::protobuf::uint64 value);
    void add_variation_id(::google::protobuf::uint64 value);
    const ::google::protobuf::RepeatedField<::google::protobuf::uint64>&
    variation_id() const;
    ::google::protobuf::RepeatedField<::google::protobuf::uint64>*
    mutable_variation_id();

    // @@protoc_insertion_point(class_scope:sync_pb.SessionTab)
private:
    inline void set_has_tab_id();
    inline void clear_has_tab_id();
    inline void set_has_window_id();
    inline void clear_has_window_id();
    inline void set_has_tab_visual_index();
    inline void clear_has_tab_visual_index();
    inline void set_has_current_navigation_index();
    inline void clear_has_current_navigation_index();
    inline void set_has_pinned();
    inline void clear_has_pinned();
    inline void set_has_extension_app_id();
    inline void clear_has_extension_app_id();
    inline void set_has_favicon();
    inline void clear_has_favicon();
    inline void set_has_favicon_type();
    inline void clear_has_favicon_type();
    inline void set_has_favicon_source();
    inline void clear_has_favicon_source();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::int32 tab_id_;
    ::google::protobuf::int32 window_id_;
    ::google::protobuf::int32 tab_visual_index_;
    ::google::protobuf::int32 current_navigation_index_;
    ::google::protobuf::internal::ArenaStringPtr extension_app_id_;
    ::google::protobuf::RepeatedPtrField<::sync_pb::TabNavigation> navigation_;
    bool pinned_;
    int favicon_type_;
    ::google::protobuf::internal::ArenaStringPtr favicon_;
    ::google::protobuf::internal::ArenaStringPtr favicon_source_;
    ::google::protobuf::RepeatedField<::google::protobuf::uint64> variation_id_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_session_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_session_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_session_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static SessionTab* default_instance_;
};
// -------------------------------------------------------------------

class TabNavigation : public ::google::protobuf::MessageLite {
public:
    TabNavigation();
    virtual ~TabNavigation();

    TabNavigation(const TabNavigation& from);

    inline TabNavigation& operator=(const TabNavigation& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const TabNavigation& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const TabNavigation* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(TabNavigation* other);

    // implements Message ----------------------------------------------

    inline TabNavigation* New() const { return New(NULL); }

    TabNavigation* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const TabNavigation& from);
    void MergeFrom(const TabNavigation& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(TabNavigation* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    typedef TabNavigation_BlockedState BlockedState;
    static const BlockedState STATE_ALLOWED = TabNavigation_BlockedState_STATE_ALLOWED;
    static const BlockedState STATE_BLOCKED = TabNavigation_BlockedState_STATE_BLOCKED;
    static inline bool BlockedState_IsValid(int value)
    {
        return TabNavigation_BlockedState_IsValid(value);
    }
    static const BlockedState BlockedState_MIN = TabNavigation_BlockedState_BlockedState_MIN;
    static const BlockedState BlockedState_MAX = TabNavigation_BlockedState_BlockedState_MAX;
    static const int BlockedState_ARRAYSIZE = TabNavigation_BlockedState_BlockedState_ARRAYSIZE;

    typedef TabNavigation_PasswordState PasswordState;
    static const PasswordState PASSWORD_STATE_UNKNOWN = TabNavigation_PasswordState_PASSWORD_STATE_UNKNOWN;
    static const PasswordState NO_PASSWORD_FIELD = TabNavigation_PasswordState_NO_PASSWORD_FIELD;
    static const PasswordState HAS_PASSWORD_FIELD = TabNavigation_PasswordState_HAS_PASSWORD_FIELD;
    static inline bool PasswordState_IsValid(int value)
    {
        return TabNavigation_PasswordState_IsValid(value);
    }
    static const PasswordState PasswordState_MIN = TabNavigation_PasswordState_PasswordState_MIN;
    static const PasswordState PasswordState_MAX = TabNavigation_PasswordState_PasswordState_MAX;
    static const int PasswordState_ARRAYSIZE = TabNavigation_PasswordState_PasswordState_ARRAYSIZE;

    // accessors -------------------------------------------------------

    // optional string virtual_url = 2;
    bool has_virtual_url() const;
    void clear_virtual_url();
    static const int kVirtualUrlFieldNumber = 2;
    const ::std::string& virtual_url() const;
    void set_virtual_url(const ::std::string& value);
    void set_virtual_url(const char* value);
    void set_virtual_url(const char* value, size_t size);
    ::std::string* mutable_virtual_url();
    ::std::string* release_virtual_url();
    void set_allocated_virtual_url(::std::string* virtual_url);

    // optional string referrer = 3;
    bool has_referrer() const;
    void clear_referrer();
    static const int kReferrerFieldNumber = 3;
    const ::std::string& referrer() const;
    void set_referrer(const ::std::string& value);
    void set_referrer(const char* value);
    void set_referrer(const char* value, size_t size);
    ::std::string* mutable_referrer();
    ::std::string* release_referrer();
    void set_allocated_referrer(::std::string* referrer);

    // optional string title = 4;
    bool has_title() const;
    void clear_title();
    static const int kTitleFieldNumber = 4;
    const ::std::string& title() const;
    void set_title(const ::std::string& value);
    void set_title(const char* value);
    void set_title(const char* value, size_t size);
    ::std::string* mutable_title();
    ::std::string* release_title();
    void set_allocated_title(::std::string* title);

    // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = TYPED];
    bool has_page_transition() const;
    void clear_page_transition();
    static const int kPageTransitionFieldNumber = 6;
    ::sync_pb::SyncEnums_PageTransition page_transition() const;
    void set_page_transition(::sync_pb::SyncEnums_PageTransition value);

    // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
    bool has_redirect_type() const;
    void clear_redirect_type();
    static const int kRedirectTypeFieldNumber = 7;
    ::sync_pb::SyncEnums_PageTransitionRedirectType redirect_type() const;
    void set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value);

    // optional int32 unique_id = 8;
    bool has_unique_id() const;
    void clear_unique_id();
    static const int kUniqueIdFieldNumber = 8;
    ::google::protobuf::int32 unique_id() const;
    void set_unique_id(::google::protobuf::int32 value);

    // optional int64 timestamp_msec = 9;
    bool has_timestamp_msec() const;
    void clear_timestamp_msec();
    static const int kTimestampMsecFieldNumber = 9;
    ::google::protobuf::int64 timestamp_msec() const;
    void set_timestamp_msec(::google::protobuf::int64 value);

    // optional bool navigation_forward_back = 10;
    bool has_navigation_forward_back() const;
    void clear_navigation_forward_back();
    static const int kNavigationForwardBackFieldNumber = 10;
    bool navigation_forward_back() const;
    void set_navigation_forward_back(bool value);

    // optional bool navigation_from_address_bar = 11;
    bool has_navigation_from_address_bar() const;
    void clear_navigation_from_address_bar();
    static const int kNavigationFromAddressBarFieldNumber = 11;
    bool navigation_from_address_bar() const;
    void set_navigation_from_address_bar(bool value);

    // optional bool navigation_home_page = 12;
    bool has_navigation_home_page() const;
    void clear_navigation_home_page();
    static const int kNavigationHomePageFieldNumber = 12;
    bool navigation_home_page() const;
    void set_navigation_home_page(bool value);

    // optional bool navigation_chain_start = 13;
    bool has_navigation_chain_start() const;
    void clear_navigation_chain_start();
    static const int kNavigationChainStartFieldNumber = 13;
    bool navigation_chain_start() const;
    void set_navigation_chain_start(bool value);

    // optional bool navigation_chain_end = 14;
    bool has_navigation_chain_end() const;
    void clear_navigation_chain_end();
    static const int kNavigationChainEndFieldNumber = 14;
    bool navigation_chain_end() const;
    void set_navigation_chain_end(bool value);

    // optional int64 global_id = 15;
    bool has_global_id() const;
    void clear_global_id();
    static const int kGlobalIdFieldNumber = 15;
    ::google::protobuf::int64 global_id() const;
    void set_global_id(::google::protobuf::int64 value);

    // optional string search_terms = 16;
    bool has_search_terms() const;
    void clear_search_terms();
    static const int kSearchTermsFieldNumber = 16;
    const ::std::string& search_terms() const;
    void set_search_terms(const ::std::string& value);
    void set_search_terms(const char* value);
    void set_search_terms(const char* value, size_t size);
    ::std::string* mutable_search_terms();
    ::std::string* release_search_terms();
    void set_allocated_search_terms(::std::string* search_terms);

    // optional string favicon_url = 17;
    bool has_favicon_url() const;
    void clear_favicon_url();
    static const int kFaviconUrlFieldNumber = 17;
    const ::std::string& favicon_url() const;
    void set_favicon_url(const ::std::string& value);
    void set_favicon_url(const char* value);
    void set_favicon_url(const char* value, size_t size);
    ::std::string* mutable_favicon_url();
    ::std::string* release_favicon_url();
    void set_allocated_favicon_url(::std::string* favicon_url);

    // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
    bool has_blocked_state() const;
    void clear_blocked_state();
    static const int kBlockedStateFieldNumber = 18;
    ::sync_pb::TabNavigation_BlockedState blocked_state() const;
    void set_blocked_state(::sync_pb::TabNavigation_BlockedState value);

    // repeated string content_pack_categories = 19;
    int content_pack_categories_size() const;
    void clear_content_pack_categories();
    static const int kContentPackCategoriesFieldNumber = 19;
    const ::std::string& content_pack_categories(int index) const;
    ::std::string* mutable_content_pack_categories(int index);
    void set_content_pack_categories(int index, const ::std::string& value);
    void set_content_pack_categories(int index, const char* value);
    void set_content_pack_categories(int index, const char* value, size_t size);
    ::std::string* add_content_pack_categories();
    void add_content_pack_categories(const ::std::string& value);
    void add_content_pack_categories(const char* value);
    void add_content_pack_categories(const char* value, size_t size);
    const ::google::protobuf::RepeatedPtrField<::std::string>& content_pack_categories() const;
    ::google::protobuf::RepeatedPtrField<::std::string>* mutable_content_pack_categories();

    // optional int32 http_status_code = 20;
    bool has_http_status_code() const;
    void clear_http_status_code();
    static const int kHttpStatusCodeFieldNumber = 20;
    ::google::protobuf::int32 http_status_code() const;
    void set_http_status_code(::google::protobuf::int32 value);

    // optional int32 obsolete_referrer_policy = 21 [default = 1];
    bool has_obsolete_referrer_policy() const;
    void clear_obsolete_referrer_policy();
    static const int kObsoleteReferrerPolicyFieldNumber = 21;
    ::google::protobuf::int32 obsolete_referrer_policy() const;
    void set_obsolete_referrer_policy(::google::protobuf::int32 value);

    // optional bool is_restored = 22;
    bool has_is_restored() const;
    void clear_is_restored();
    static const int kIsRestoredFieldNumber = 22;
    bool is_restored() const;
    void set_is_restored(bool value);

    // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
    int navigation_redirect_size() const;
    void clear_navigation_redirect();
    static const int kNavigationRedirectFieldNumber = 23;
    const ::sync_pb::NavigationRedirect& navigation_redirect(int index) const;
    ::sync_pb::NavigationRedirect* mutable_navigation_redirect(int index);
    ::sync_pb::NavigationRedirect* add_navigation_redirect();
    ::google::protobuf::RepeatedPtrField<::sync_pb::NavigationRedirect>*
    mutable_navigation_redirect();
    const ::google::protobuf::RepeatedPtrField<::sync_pb::NavigationRedirect>&
    navigation_redirect() const;

    // optional string last_navigation_redirect_url = 24;
    bool has_last_navigation_redirect_url() const;
    void clear_last_navigation_redirect_url();
    static const int kLastNavigationRedirectUrlFieldNumber = 24;
    const ::std::string& last_navigation_redirect_url() const;
    void set_last_navigation_redirect_url(const ::std::string& value);
    void set_last_navigation_redirect_url(const char* value);
    void set_last_navigation_redirect_url(const char* value, size_t size);
    ::std::string* mutable_last_navigation_redirect_url();
    ::std::string* release_last_navigation_redirect_url();
    void set_allocated_last_navigation_redirect_url(::std::string* last_navigation_redirect_url);

    // optional int32 correct_referrer_policy = 25 [default = 1];
    bool has_correct_referrer_policy() const;
    void clear_correct_referrer_policy();
    static const int kCorrectReferrerPolicyFieldNumber = 25;
    ::google::protobuf::int32 correct_referrer_policy() const;
    void set_correct_referrer_policy(::google::protobuf::int32 value);

    // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
    bool has_password_state() const;
    void clear_password_state();
    static const int kPasswordStateFieldNumber = 26;
    ::sync_pb::TabNavigation_PasswordState password_state() const;
    void set_password_state(::sync_pb::TabNavigation_PasswordState value);

    // @@protoc_insertion_point(class_scope:sync_pb.TabNavigation)
private:
    inline void set_has_virtual_url();
    inline void clear_has_virtual_url();
    inline void set_has_referrer();
    inline void clear_has_referrer();
    inline void set_has_title();
    inline void clear_has_title();
    inline void set_has_page_transition();
    inline void clear_has_page_transition();
    inline void set_has_redirect_type();
    inline void clear_has_redirect_type();
    inline void set_has_unique_id();
    inline void clear_has_unique_id();
    inline void set_has_timestamp_msec();
    inline void clear_has_timestamp_msec();
    inline void set_has_navigation_forward_back();
    inline void clear_has_navigation_forward_back();
    inline void set_has_navigation_from_address_bar();
    inline void clear_has_navigation_from_address_bar();
    inline void set_has_navigation_home_page();
    inline void clear_has_navigation_home_page();
    inline void set_has_navigation_chain_start();
    inline void clear_has_navigation_chain_start();
    inline void set_has_navigation_chain_end();
    inline void clear_has_navigation_chain_end();
    inline void set_has_global_id();
    inline void clear_has_global_id();
    inline void set_has_search_terms();
    inline void clear_has_search_terms();
    inline void set_has_favicon_url();
    inline void clear_has_favicon_url();
    inline void set_has_blocked_state();
    inline void clear_has_blocked_state();
    inline void set_has_http_status_code();
    inline void clear_has_http_status_code();
    inline void set_has_obsolete_referrer_policy();
    inline void clear_has_obsolete_referrer_policy();
    inline void set_has_is_restored();
    inline void clear_has_is_restored();
    inline void set_has_last_navigation_redirect_url();
    inline void clear_has_last_navigation_redirect_url();
    inline void set_has_correct_referrer_policy();
    inline void clear_has_correct_referrer_policy();
    inline void set_has_password_state();
    inline void clear_has_password_state();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr virtual_url_;
    ::google::protobuf::internal::ArenaStringPtr referrer_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    int page_transition_;
    int redirect_type_;
    ::google::protobuf::int64 timestamp_msec_;
    ::google::protobuf::int32 unique_id_;
    bool navigation_forward_back_;
    bool navigation_from_address_bar_;
    bool navigation_home_page_;
    bool navigation_chain_start_;
    ::google::protobuf::int64 global_id_;
    ::google::protobuf::internal::ArenaStringPtr search_terms_;
    ::google::protobuf::internal::ArenaStringPtr favicon_url_;
    int blocked_state_;
    bool navigation_chain_end_;
    bool is_restored_;
    ::google::protobuf::RepeatedPtrField<::std::string> content_pack_categories_;
    ::google::protobuf::int32 http_status_code_;
    ::google::protobuf::int32 obsolete_referrer_policy_;
    ::google::protobuf::RepeatedPtrField<::sync_pb::NavigationRedirect> navigation_redirect_;
    ::google::protobuf::internal::ArenaStringPtr last_navigation_redirect_url_;
    ::google::protobuf::int32 correct_referrer_policy_;
    int password_state_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_session_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_session_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_session_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static TabNavigation* default_instance_;
};
// -------------------------------------------------------------------

class NavigationRedirect : public ::google::protobuf::MessageLite {
public:
    NavigationRedirect();
    virtual ~NavigationRedirect();

    NavigationRedirect(const NavigationRedirect& from);

    inline NavigationRedirect& operator=(const NavigationRedirect& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const NavigationRedirect& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const NavigationRedirect* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(NavigationRedirect* other);

    // implements Message ----------------------------------------------

    inline NavigationRedirect* New() const { return New(NULL); }

    NavigationRedirect* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const NavigationRedirect& from);
    void MergeFrom(const NavigationRedirect& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(NavigationRedirect* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string url = 1;
    bool has_url() const;
    void clear_url();
    static const int kUrlFieldNumber = 1;
    const ::std::string& url() const;
    void set_url(const ::std::string& value);
    void set_url(const char* value);
    void set_url(const char* value, size_t size);
    ::std::string* mutable_url();
    ::std::string* release_url();
    void set_allocated_url(::std::string* url);

    // @@protoc_insertion_point(class_scope:sync_pb.NavigationRedirect)
private:
    inline void set_has_url();
    inline void clear_has_url();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_session_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_session_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_session_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static NavigationRedirect* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionSpecifics

// optional string session_tag = 1;
inline bool SessionSpecifics::has_session_tag() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionSpecifics::set_has_session_tag()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void SessionSpecifics::clear_has_session_tag()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void SessionSpecifics::clear_session_tag()
{
    session_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_session_tag();
}
inline const ::std::string& SessionSpecifics::session_tag() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.session_tag)
    return session_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionSpecifics::set_session_tag(const ::std::string& value)
{
    set_has_session_tag();
    session_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionSpecifics.session_tag)
}
inline void SessionSpecifics::set_session_tag(const char* value)
{
    set_has_session_tag();
    session_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.SessionSpecifics.session_tag)
}
inline void SessionSpecifics::set_session_tag(const char* value, size_t size)
{
    set_has_session_tag();
    session_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionSpecifics.session_tag)
}
inline ::std::string* SessionSpecifics::mutable_session_tag()
{
    set_has_session_tag();
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.session_tag)
    return session_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionSpecifics::release_session_tag()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.session_tag)
    clear_has_session_tag();
    return session_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionSpecifics::set_allocated_session_tag(::std::string* session_tag)
{
    if (session_tag != NULL) {
        set_has_session_tag();
    } else {
        clear_has_session_tag();
    }
    session_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_tag);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.session_tag)
}

// optional .sync_pb.SessionHeader header = 2;
inline bool SessionSpecifics::has_header() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionSpecifics::set_has_header()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void SessionSpecifics::clear_has_header()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void SessionSpecifics::clear_header()
{
    if (header_ != NULL)
        header_->::sync_pb::SessionHeader::Clear();
    clear_has_header();
}
inline const ::sync_pb::SessionHeader& SessionSpecifics::header() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.header)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return header_ != NULL ? *header_ : *default_instance().header_;
#else
    return header_ != NULL ? *header_ : *default_instance_->header_;
#endif
}
inline ::sync_pb::SessionHeader* SessionSpecifics::mutable_header()
{
    set_has_header();
    if (header_ == NULL) {
        header_ = new ::sync_pb::SessionHeader;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.header)
    return header_;
}
inline ::sync_pb::SessionHeader* SessionSpecifics::release_header()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.header)
    clear_has_header();
    ::sync_pb::SessionHeader* temp = header_;
    header_ = NULL;
    return temp;
}
inline void SessionSpecifics::set_allocated_header(::sync_pb::SessionHeader* header)
{
    delete header_;
    header_ = header;
    if (header) {
        set_has_header();
    } else {
        clear_has_header();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.header)
}

// optional .sync_pb.SessionTab tab = 3;
inline bool SessionSpecifics::has_tab() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionSpecifics::set_has_tab()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void SessionSpecifics::clear_has_tab()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void SessionSpecifics::clear_tab()
{
    if (tab_ != NULL)
        tab_->::sync_pb::SessionTab::Clear();
    clear_has_tab();
}
inline const ::sync_pb::SessionTab& SessionSpecifics::tab() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.tab)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return tab_ != NULL ? *tab_ : *default_instance().tab_;
#else
    return tab_ != NULL ? *tab_ : *default_instance_->tab_;
#endif
}
inline ::sync_pb::SessionTab* SessionSpecifics::mutable_tab()
{
    set_has_tab();
    if (tab_ == NULL) {
        tab_ = new ::sync_pb::SessionTab;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.tab)
    return tab_;
}
inline ::sync_pb::SessionTab* SessionSpecifics::release_tab()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.tab)
    clear_has_tab();
    ::sync_pb::SessionTab* temp = tab_;
    tab_ = NULL;
    return temp;
}
inline void SessionSpecifics::set_allocated_tab(::sync_pb::SessionTab* tab)
{
    delete tab_;
    tab_ = tab;
    if (tab) {
        set_has_tab();
    } else {
        clear_has_tab();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.tab)
}

// optional int32 tab_node_id = 4 [default = -1];
inline bool SessionSpecifics::has_tab_node_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionSpecifics::set_has_tab_node_id()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void SessionSpecifics::clear_has_tab_node_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void SessionSpecifics::clear_tab_node_id()
{
    tab_node_id_ = -1;
    clear_has_tab_node_id();
}
inline ::google::protobuf::int32 SessionSpecifics::tab_node_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.tab_node_id)
    return tab_node_id_;
}
inline void SessionSpecifics::set_tab_node_id(::google::protobuf::int32 value)
{
    set_has_tab_node_id();
    tab_node_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionSpecifics.tab_node_id)
}

// -------------------------------------------------------------------

// SessionHeader

// repeated .sync_pb.SessionWindow window = 2;
inline int SessionHeader::window_size() const
{
    return window_.size();
}
inline void SessionHeader::clear_window()
{
    window_.Clear();
}
inline const ::sync_pb::SessionWindow& SessionHeader::window(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.window)
    return window_.Get(index);
}
inline ::sync_pb::SessionWindow* SessionHeader::mutable_window(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionHeader.window)
    return window_.Mutable(index);
}
inline ::sync_pb::SessionWindow* SessionHeader::add_window()
{
    // @@protoc_insertion_point(field_add:sync_pb.SessionHeader.window)
    return window_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::sync_pb::SessionWindow>*
SessionHeader::mutable_window()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionHeader.window)
    return &window_;
}
inline const ::google::protobuf::RepeatedPtrField<::sync_pb::SessionWindow>&
SessionHeader::window() const
{
    // @@protoc_insertion_point(field_list:sync_pb.SessionHeader.window)
    return window_;
}

// optional string client_name = 3;
inline bool SessionHeader::has_client_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionHeader::set_has_client_name()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void SessionHeader::clear_has_client_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void SessionHeader::clear_client_name()
{
    client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_client_name();
}
inline const ::std::string& SessionHeader::client_name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.client_name)
    return client_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionHeader::set_client_name(const ::std::string& value)
{
    set_has_client_name();
    client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionHeader.client_name)
}
inline void SessionHeader::set_client_name(const char* value)
{
    set_has_client_name();
    client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.SessionHeader.client_name)
}
inline void SessionHeader::set_client_name(const char* value, size_t size)
{
    set_has_client_name();
    client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionHeader.client_name)
}
inline ::std::string* SessionHeader::mutable_client_name()
{
    set_has_client_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionHeader.client_name)
    return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionHeader::release_client_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionHeader.client_name)
    clear_has_client_name();
    return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionHeader::set_allocated_client_name(::std::string* client_name)
{
    if (client_name != NULL) {
        set_has_client_name();
    } else {
        clear_has_client_name();
    }
    client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionHeader.client_name)
}

// optional .sync_pb.SyncEnums.DeviceType device_type = 4;
inline bool SessionHeader::has_device_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionHeader::set_has_device_type()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void SessionHeader::clear_has_device_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void SessionHeader::clear_device_type()
{
    device_type_ = 1;
    clear_has_device_type();
}
inline ::sync_pb::SyncEnums_DeviceType SessionHeader::device_type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.device_type)
    return static_cast<::sync_pb::SyncEnums_DeviceType>(device_type_);
}
inline void SessionHeader::set_device_type(::sync_pb::SyncEnums_DeviceType value)
{
    assert(::sync_pb::SyncEnums_DeviceType_IsValid(value));
    set_has_device_type();
    device_type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionHeader.device_type)
}

// -------------------------------------------------------------------

// SessionWindow

// optional int32 window_id = 1;
inline bool SessionWindow::has_window_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionWindow::set_has_window_id()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void SessionWindow::clear_has_window_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void SessionWindow::clear_window_id()
{
    window_id_ = 0;
    clear_has_window_id();
}
inline ::google::protobuf::int32 SessionWindow::window_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.window_id)
    return window_id_;
}
inline void SessionWindow::set_window_id(::google::protobuf::int32 value)
{
    set_has_window_id();
    window_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.window_id)
}

// optional int32 selected_tab_index = 2 [default = -1];
inline bool SessionWindow::has_selected_tab_index() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionWindow::set_has_selected_tab_index()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void SessionWindow::clear_has_selected_tab_index()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void SessionWindow::clear_selected_tab_index()
{
    selected_tab_index_ = -1;
    clear_has_selected_tab_index();
}
inline ::google::protobuf::int32 SessionWindow::selected_tab_index() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.selected_tab_index)
    return selected_tab_index_;
}
inline void SessionWindow::set_selected_tab_index(::google::protobuf::int32 value)
{
    set_has_selected_tab_index();
    selected_tab_index_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.selected_tab_index)
}

// optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
inline bool SessionWindow::has_browser_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionWindow::set_has_browser_type()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void SessionWindow::clear_has_browser_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void SessionWindow::clear_browser_type()
{
    browser_type_ = 1;
    clear_has_browser_type();
}
inline ::sync_pb::SessionWindow_BrowserType SessionWindow::browser_type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.browser_type)
    return static_cast<::sync_pb::SessionWindow_BrowserType>(browser_type_);
}
inline void SessionWindow::set_browser_type(::sync_pb::SessionWindow_BrowserType value)
{
    assert(::sync_pb::SessionWindow_BrowserType_IsValid(value));
    set_has_browser_type();
    browser_type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.browser_type)
}

// repeated int32 tab = 4;
inline int SessionWindow::tab_size() const
{
    return tab_.size();
}
inline void SessionWindow::clear_tab()
{
    tab_.Clear();
}
inline ::google::protobuf::int32 SessionWindow::tab(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.tab)
    return tab_.Get(index);
}
inline void SessionWindow::set_tab(int index, ::google::protobuf::int32 value)
{
    tab_.Set(index, value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.tab)
}
inline void SessionWindow::add_tab(::google::protobuf::int32 value)
{
    tab_.Add(value);
    // @@protoc_insertion_point(field_add:sync_pb.SessionWindow.tab)
}
inline const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
SessionWindow::tab() const
{
    // @@protoc_insertion_point(field_list:sync_pb.SessionWindow.tab)
    return tab_;
}
inline ::google::protobuf::RepeatedField<::google::protobuf::int32>*
SessionWindow::mutable_tab()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionWindow.tab)
    return &tab_;
}

// -------------------------------------------------------------------

// SessionTab

// optional int32 tab_id = 1;
inline bool SessionTab::has_tab_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionTab::set_has_tab_id()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void SessionTab::clear_has_tab_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void SessionTab::clear_tab_id()
{
    tab_id_ = 0;
    clear_has_tab_id();
}
inline ::google::protobuf::int32 SessionTab::tab_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.tab_id)
    return tab_id_;
}
inline void SessionTab::set_tab_id(::google::protobuf::int32 value)
{
    set_has_tab_id();
    tab_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.tab_id)
}

// optional int32 window_id = 2;
inline bool SessionTab::has_window_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionTab::set_has_window_id()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void SessionTab::clear_has_window_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void SessionTab::clear_window_id()
{
    window_id_ = 0;
    clear_has_window_id();
}
inline ::google::protobuf::int32 SessionTab::window_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.window_id)
    return window_id_;
}
inline void SessionTab::set_window_id(::google::protobuf::int32 value)
{
    set_has_window_id();
    window_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.window_id)
}

// optional int32 tab_visual_index = 3 [default = -1];
inline bool SessionTab::has_tab_visual_index() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionTab::set_has_tab_visual_index()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void SessionTab::clear_has_tab_visual_index()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void SessionTab::clear_tab_visual_index()
{
    tab_visual_index_ = -1;
    clear_has_tab_visual_index();
}
inline ::google::protobuf::int32 SessionTab::tab_visual_index() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.tab_visual_index)
    return tab_visual_index_;
}
inline void SessionTab::set_tab_visual_index(::google::protobuf::int32 value)
{
    set_has_tab_visual_index();
    tab_visual_index_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.tab_visual_index)
}

// optional int32 current_navigation_index = 4 [default = -1];
inline bool SessionTab::has_current_navigation_index() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionTab::set_has_current_navigation_index()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void SessionTab::clear_has_current_navigation_index()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void SessionTab::clear_current_navigation_index()
{
    current_navigation_index_ = -1;
    clear_has_current_navigation_index();
}
inline ::google::protobuf::int32 SessionTab::current_navigation_index() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.current_navigation_index)
    return current_navigation_index_;
}
inline void SessionTab::set_current_navigation_index(::google::protobuf::int32 value)
{
    set_has_current_navigation_index();
    current_navigation_index_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.current_navigation_index)
}

// optional bool pinned = 5 [default = false];
inline bool SessionTab::has_pinned() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionTab::set_has_pinned()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void SessionTab::clear_has_pinned()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void SessionTab::clear_pinned()
{
    pinned_ = false;
    clear_has_pinned();
}
inline bool SessionTab::pinned() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.pinned)
    return pinned_;
}
inline void SessionTab::set_pinned(bool value)
{
    set_has_pinned();
    pinned_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.pinned)
}

// optional string extension_app_id = 6;
inline bool SessionTab::has_extension_app_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SessionTab::set_has_extension_app_id()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void SessionTab::clear_has_extension_app_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void SessionTab::clear_extension_app_id()
{
    extension_app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_extension_app_id();
}
inline const ::std::string& SessionTab::extension_app_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.extension_app_id)
    return extension_app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_extension_app_id(const ::std::string& value)
{
    set_has_extension_app_id();
    extension_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.extension_app_id)
}
inline void SessionTab::set_extension_app_id(const char* value)
{
    set_has_extension_app_id();
    extension_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.extension_app_id)
}
inline void SessionTab::set_extension_app_id(const char* value, size_t size)
{
    set_has_extension_app_id();
    extension_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.extension_app_id)
}
inline ::std::string* SessionTab::mutable_extension_app_id()
{
    set_has_extension_app_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.extension_app_id)
    return extension_app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionTab::release_extension_app_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionTab.extension_app_id)
    clear_has_extension_app_id();
    return extension_app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_allocated_extension_app_id(::std::string* extension_app_id)
{
    if (extension_app_id != NULL) {
        set_has_extension_app_id();
    } else {
        clear_has_extension_app_id();
    }
    extension_app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_app_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.extension_app_id)
}

// repeated .sync_pb.TabNavigation navigation = 7;
inline int SessionTab::navigation_size() const
{
    return navigation_.size();
}
inline void SessionTab::clear_navigation()
{
    navigation_.Clear();
}
inline const ::sync_pb::TabNavigation& SessionTab::navigation(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.navigation)
    return navigation_.Get(index);
}
inline ::sync_pb::TabNavigation* SessionTab::mutable_navigation(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.navigation)
    return navigation_.Mutable(index);
}
inline ::sync_pb::TabNavigation* SessionTab::add_navigation()
{
    // @@protoc_insertion_point(field_add:sync_pb.SessionTab.navigation)
    return navigation_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::sync_pb::TabNavigation>*
SessionTab::mutable_navigation()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionTab.navigation)
    return &navigation_;
}
inline const ::google::protobuf::RepeatedPtrField<::sync_pb::TabNavigation>&
SessionTab::navigation() const
{
    // @@protoc_insertion_point(field_list:sync_pb.SessionTab.navigation)
    return navigation_;
}

// optional bytes favicon = 8;
inline bool SessionTab::has_favicon() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SessionTab::set_has_favicon()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void SessionTab::clear_has_favicon()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void SessionTab::clear_favicon()
{
    favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon();
}
inline const ::std::string& SessionTab::favicon() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon)
    return favicon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_favicon(const ::std::string& value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon)
}
inline void SessionTab::set_favicon(const char* value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.favicon)
}
inline void SessionTab::set_favicon(const void* value, size_t size)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.favicon)
}
inline ::std::string* SessionTab::mutable_favicon()
{
    set_has_favicon();
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.favicon)
    return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionTab::release_favicon()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionTab.favicon)
    clear_has_favicon();
    return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_allocated_favicon(::std::string* favicon)
{
    if (favicon != NULL) {
        set_has_favicon();
    } else {
        clear_has_favicon();
    }
    favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.favicon)
}

// optional .sync_pb.SessionTab.FaviconType favicon_type = 9;
inline bool SessionTab::has_favicon_type() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SessionTab::set_has_favicon_type()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void SessionTab::clear_has_favicon_type()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void SessionTab::clear_favicon_type()
{
    favicon_type_ = 1;
    clear_has_favicon_type();
}
inline ::sync_pb::SessionTab_FaviconType SessionTab::favicon_type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon_type)
    return static_cast<::sync_pb::SessionTab_FaviconType>(favicon_type_);
}
inline void SessionTab::set_favicon_type(::sync_pb::SessionTab_FaviconType value)
{
    assert(::sync_pb::SessionTab_FaviconType_IsValid(value));
    set_has_favicon_type();
    favicon_type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon_type)
}

// optional string favicon_source = 11;
inline bool SessionTab::has_favicon_source() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SessionTab::set_has_favicon_source()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void SessionTab::clear_has_favicon_source()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void SessionTab::clear_favicon_source()
{
    favicon_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon_source();
}
inline const ::std::string& SessionTab::favicon_source() const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon_source)
    return favicon_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_favicon_source(const ::std::string& value)
{
    set_has_favicon_source();
    favicon_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon_source)
}
inline void SessionTab::set_favicon_source(const char* value)
{
    set_has_favicon_source();
    favicon_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.favicon_source)
}
inline void SessionTab::set_favicon_source(const char* value, size_t size)
{
    set_has_favicon_source();
    favicon_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.favicon_source)
}
inline ::std::string* SessionTab::mutable_favicon_source()
{
    set_has_favicon_source();
    // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.favicon_source)
    return favicon_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionTab::release_favicon_source()
{
    // @@protoc_insertion_point(field_release:sync_pb.SessionTab.favicon_source)
    clear_has_favicon_source();
    return favicon_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionTab::set_allocated_favicon_source(::std::string* favicon_source)
{
    if (favicon_source != NULL) {
        set_has_favicon_source();
    } else {
        clear_has_favicon_source();
    }
    favicon_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_source);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.favicon_source)
}

// repeated uint64 variation_id = 12;
inline int SessionTab::variation_id_size() const
{
    return variation_id_.size();
}
inline void SessionTab::clear_variation_id()
{
    variation_id_.Clear();
}
inline ::google::protobuf::uint64 SessionTab::variation_id(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.SessionTab.variation_id)
    return variation_id_.Get(index);
}
inline void SessionTab::set_variation_id(int index, ::google::protobuf::uint64 value)
{
    variation_id_.Set(index, value);
    // @@protoc_insertion_point(field_set:sync_pb.SessionTab.variation_id)
}
inline void SessionTab::add_variation_id(::google::protobuf::uint64 value)
{
    variation_id_.Add(value);
    // @@protoc_insertion_point(field_add:sync_pb.SessionTab.variation_id)
}
inline const ::google::protobuf::RepeatedField<::google::protobuf::uint64>&
SessionTab::variation_id() const
{
    // @@protoc_insertion_point(field_list:sync_pb.SessionTab.variation_id)
    return variation_id_;
}
inline ::google::protobuf::RepeatedField<::google::protobuf::uint64>*
SessionTab::mutable_variation_id()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionTab.variation_id)
    return &variation_id_;
}

// -------------------------------------------------------------------

// TabNavigation

// optional string virtual_url = 2;
inline bool TabNavigation::has_virtual_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TabNavigation::set_has_virtual_url()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void TabNavigation::clear_has_virtual_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void TabNavigation::clear_virtual_url()
{
    virtual_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_virtual_url();
}
inline const ::std::string& TabNavigation::virtual_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.virtual_url)
    return virtual_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_virtual_url(const ::std::string& value)
{
    set_has_virtual_url();
    virtual_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.virtual_url)
}
inline void TabNavigation::set_virtual_url(const char* value)
{
    set_has_virtual_url();
    virtual_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.virtual_url)
}
inline void TabNavigation::set_virtual_url(const char* value, size_t size)
{
    set_has_virtual_url();
    virtual_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.virtual_url)
}
inline ::std::string* TabNavigation::mutable_virtual_url()
{
    set_has_virtual_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.virtual_url)
    return virtual_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabNavigation::release_virtual_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.virtual_url)
    clear_has_virtual_url();
    return virtual_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_virtual_url(::std::string* virtual_url)
{
    if (virtual_url != NULL) {
        set_has_virtual_url();
    } else {
        clear_has_virtual_url();
    }
    virtual_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.virtual_url)
}

// optional string referrer = 3;
inline bool TabNavigation::has_referrer() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TabNavigation::set_has_referrer()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void TabNavigation::clear_has_referrer()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void TabNavigation::clear_referrer()
{
    referrer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_referrer();
}
inline const ::std::string& TabNavigation::referrer() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.referrer)
    return referrer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_referrer(const ::std::string& value)
{
    set_has_referrer();
    referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.referrer)
}
inline void TabNavigation::set_referrer(const char* value)
{
    set_has_referrer();
    referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.referrer)
}
inline void TabNavigation::set_referrer(const char* value, size_t size)
{
    set_has_referrer();
    referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.referrer)
}
inline ::std::string* TabNavigation::mutable_referrer()
{
    set_has_referrer();
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.referrer)
    return referrer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabNavigation::release_referrer()
{
    // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.referrer)
    clear_has_referrer();
    return referrer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_referrer(::std::string* referrer)
{
    if (referrer != NULL) {
        set_has_referrer();
    } else {
        clear_has_referrer();
    }
    referrer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.referrer)
}

// optional string title = 4;
inline bool TabNavigation::has_title() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TabNavigation::set_has_title()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void TabNavigation::clear_has_title()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void TabNavigation::clear_title()
{
    title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_title();
}
inline const ::std::string& TabNavigation::title() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.title)
    return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_title(const ::std::string& value)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.title)
}
inline void TabNavigation::set_title(const char* value)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.title)
}
inline void TabNavigation::set_title(const char* value, size_t size)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.title)
}
inline ::std::string* TabNavigation::mutable_title()
{
    set_has_title();
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.title)
    return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabNavigation::release_title()
{
    // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.title)
    clear_has_title();
    return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_title(::std::string* title)
{
    if (title != NULL) {
        set_has_title();
    } else {
        clear_has_title();
    }
    title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.title)
}

// optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = TYPED];
inline bool TabNavigation::has_page_transition() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TabNavigation::set_has_page_transition()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void TabNavigation::clear_has_page_transition()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void TabNavigation::clear_page_transition()
{
    page_transition_ = 1;
    clear_has_page_transition();
}
inline ::sync_pb::SyncEnums_PageTransition TabNavigation::page_transition() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.page_transition)
    return static_cast<::sync_pb::SyncEnums_PageTransition>(page_transition_);
}
inline void TabNavigation::set_page_transition(::sync_pb::SyncEnums_PageTransition value)
{
    assert(::sync_pb::SyncEnums_PageTransition_IsValid(value));
    set_has_page_transition();
    page_transition_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.page_transition)
}

// optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
inline bool TabNavigation::has_redirect_type() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TabNavigation::set_has_redirect_type()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void TabNavigation::clear_has_redirect_type()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void TabNavigation::clear_redirect_type()
{
    redirect_type_ = 1;
    clear_has_redirect_type();
}
inline ::sync_pb::SyncEnums_PageTransitionRedirectType TabNavigation::redirect_type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.redirect_type)
    return static_cast<::sync_pb::SyncEnums_PageTransitionRedirectType>(redirect_type_);
}
inline void TabNavigation::set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value)
{
    assert(::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(value));
    set_has_redirect_type();
    redirect_type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.redirect_type)
}

// optional int32 unique_id = 8;
inline bool TabNavigation::has_unique_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TabNavigation::set_has_unique_id()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void TabNavigation::clear_has_unique_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void TabNavigation::clear_unique_id()
{
    unique_id_ = 0;
    clear_has_unique_id();
}
inline ::google::protobuf::int32 TabNavigation::unique_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.unique_id)
    return unique_id_;
}
inline void TabNavigation::set_unique_id(::google::protobuf::int32 value)
{
    set_has_unique_id();
    unique_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.unique_id)
}

// optional int64 timestamp_msec = 9;
inline bool TabNavigation::has_timestamp_msec() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TabNavigation::set_has_timestamp_msec()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void TabNavigation::clear_has_timestamp_msec()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void TabNavigation::clear_timestamp_msec()
{
    timestamp_msec_ = GOOGLE_LONGLONG(0);
    clear_has_timestamp_msec();
}
inline ::google::protobuf::int64 TabNavigation::timestamp_msec() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.timestamp_msec)
    return timestamp_msec_;
}
inline void TabNavigation::set_timestamp_msec(::google::protobuf::int64 value)
{
    set_has_timestamp_msec();
    timestamp_msec_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.timestamp_msec)
}

// optional bool navigation_forward_back = 10;
inline bool TabNavigation::has_navigation_forward_back() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TabNavigation::set_has_navigation_forward_back()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void TabNavigation::clear_has_navigation_forward_back()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void TabNavigation::clear_navigation_forward_back()
{
    navigation_forward_back_ = false;
    clear_has_navigation_forward_back();
}
inline bool TabNavigation::navigation_forward_back() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_forward_back)
    return navigation_forward_back_;
}
inline void TabNavigation::set_navigation_forward_back(bool value)
{
    set_has_navigation_forward_back();
    navigation_forward_back_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_forward_back)
}

// optional bool navigation_from_address_bar = 11;
inline bool TabNavigation::has_navigation_from_address_bar() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TabNavigation::set_has_navigation_from_address_bar()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void TabNavigation::clear_has_navigation_from_address_bar()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void TabNavigation::clear_navigation_from_address_bar()
{
    navigation_from_address_bar_ = false;
    clear_has_navigation_from_address_bar();
}
inline bool TabNavigation::navigation_from_address_bar() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_from_address_bar)
    return navigation_from_address_bar_;
}
inline void TabNavigation::set_navigation_from_address_bar(bool value)
{
    set_has_navigation_from_address_bar();
    navigation_from_address_bar_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_from_address_bar)
}

// optional bool navigation_home_page = 12;
inline bool TabNavigation::has_navigation_home_page() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TabNavigation::set_has_navigation_home_page()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void TabNavigation::clear_has_navigation_home_page()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void TabNavigation::clear_navigation_home_page()
{
    navigation_home_page_ = false;
    clear_has_navigation_home_page();
}
inline bool TabNavigation::navigation_home_page() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_home_page)
    return navigation_home_page_;
}
inline void TabNavigation::set_navigation_home_page(bool value)
{
    set_has_navigation_home_page();
    navigation_home_page_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_home_page)
}

// optional bool navigation_chain_start = 13;
inline bool TabNavigation::has_navigation_chain_start() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TabNavigation::set_has_navigation_chain_start()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void TabNavigation::clear_has_navigation_chain_start()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void TabNavigation::clear_navigation_chain_start()
{
    navigation_chain_start_ = false;
    clear_has_navigation_chain_start();
}
inline bool TabNavigation::navigation_chain_start() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_chain_start)
    return navigation_chain_start_;
}
inline void TabNavigation::set_navigation_chain_start(bool value)
{
    set_has_navigation_chain_start();
    navigation_chain_start_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_chain_start)
}

// optional bool navigation_chain_end = 14;
inline bool TabNavigation::has_navigation_chain_end() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TabNavigation::set_has_navigation_chain_end()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void TabNavigation::clear_has_navigation_chain_end()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void TabNavigation::clear_navigation_chain_end()
{
    navigation_chain_end_ = false;
    clear_has_navigation_chain_end();
}
inline bool TabNavigation::navigation_chain_end() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_chain_end)
    return navigation_chain_end_;
}
inline void TabNavigation::set_navigation_chain_end(bool value)
{
    set_has_navigation_chain_end();
    navigation_chain_end_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_chain_end)
}

// optional int64 global_id = 15;
inline bool TabNavigation::has_global_id() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TabNavigation::set_has_global_id()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void TabNavigation::clear_has_global_id()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void TabNavigation::clear_global_id()
{
    global_id_ = GOOGLE_LONGLONG(0);
    clear_has_global_id();
}
inline ::google::protobuf::int64 TabNavigation::global_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.global_id)
    return global_id_;
}
inline void TabNavigation::set_global_id(::google::protobuf::int64 value)
{
    set_has_global_id();
    global_id_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.global_id)
}

// optional string search_terms = 16;
inline bool TabNavigation::has_search_terms() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TabNavigation::set_has_search_terms()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void TabNavigation::clear_has_search_terms()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void TabNavigation::clear_search_terms()
{
    search_terms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_search_terms();
}
inline const ::std::string& TabNavigation::search_terms() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.search_terms)
    return search_terms_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_search_terms(const ::std::string& value)
{
    set_has_search_terms();
    search_terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.search_terms)
}
inline void TabNavigation::set_search_terms(const char* value)
{
    set_has_search_terms();
    search_terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.search_terms)
}
inline void TabNavigation::set_search_terms(const char* value, size_t size)
{
    set_has_search_terms();
    search_terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.search_terms)
}
inline ::std::string* TabNavigation::mutable_search_terms()
{
    set_has_search_terms();
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.search_terms)
    return search_terms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabNavigation::release_search_terms()
{
    // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.search_terms)
    clear_has_search_terms();
    return search_terms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_search_terms(::std::string* search_terms)
{
    if (search_terms != NULL) {
        set_has_search_terms();
    } else {
        clear_has_search_terms();
    }
    search_terms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_terms);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.search_terms)
}

// optional string favicon_url = 17;
inline bool TabNavigation::has_favicon_url() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TabNavigation::set_has_favicon_url()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void TabNavigation::clear_has_favicon_url()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void TabNavigation::clear_favicon_url()
{
    favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon_url();
}
inline const ::std::string& TabNavigation::favicon_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.favicon_url)
    return favicon_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_favicon_url(const ::std::string& value)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.favicon_url)
}
inline void TabNavigation::set_favicon_url(const char* value)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.favicon_url)
}
inline void TabNavigation::set_favicon_url(const char* value, size_t size)
{
    set_has_favicon_url();
    favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.favicon_url)
}
inline ::std::string* TabNavigation::mutable_favicon_url()
{
    set_has_favicon_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.favicon_url)
    return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabNavigation::release_favicon_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.favicon_url)
    clear_has_favicon_url();
    return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_favicon_url(::std::string* favicon_url)
{
    if (favicon_url != NULL) {
        set_has_favicon_url();
    } else {
        clear_has_favicon_url();
    }
    favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.favicon_url)
}

// optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
inline bool TabNavigation::has_blocked_state() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TabNavigation::set_has_blocked_state()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void TabNavigation::clear_has_blocked_state()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void TabNavigation::clear_blocked_state()
{
    blocked_state_ = 1;
    clear_has_blocked_state();
}
inline ::sync_pb::TabNavigation_BlockedState TabNavigation::blocked_state() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.blocked_state)
    return static_cast<::sync_pb::TabNavigation_BlockedState>(blocked_state_);
}
inline void TabNavigation::set_blocked_state(::sync_pb::TabNavigation_BlockedState value)
{
    assert(::sync_pb::TabNavigation_BlockedState_IsValid(value));
    set_has_blocked_state();
    blocked_state_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.blocked_state)
}

// repeated string content_pack_categories = 19;
inline int TabNavigation::content_pack_categories_size() const
{
    return content_pack_categories_.size();
}
inline void TabNavigation::clear_content_pack_categories()
{
    content_pack_categories_.Clear();
}
inline const ::std::string& TabNavigation::content_pack_categories(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.content_pack_categories)
    return content_pack_categories_.Get(index);
}
inline ::std::string* TabNavigation::mutable_content_pack_categories(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.content_pack_categories)
    return content_pack_categories_.Mutable(index);
}
inline void TabNavigation::set_content_pack_categories(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.content_pack_categories)
    content_pack_categories_.Mutable(index)->assign(value);
}
inline void TabNavigation::set_content_pack_categories(int index, const char* value)
{
    content_pack_categories_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::set_content_pack_categories(int index, const char* value, size_t size)
{
    content_pack_categories_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.content_pack_categories)
}
inline ::std::string* TabNavigation::add_content_pack_categories()
{
    // @@protoc_insertion_point(field_add_mutable:sync_pb.TabNavigation.content_pack_categories)
    return content_pack_categories_.Add();
}
inline void TabNavigation::add_content_pack_categories(const ::std::string& value)
{
    content_pack_categories_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::add_content_pack_categories(const char* value)
{
    content_pack_categories_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:sync_pb.TabNavigation.content_pack_categories)
}
inline void TabNavigation::add_content_pack_categories(const char* value, size_t size)
{
    content_pack_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:sync_pb.TabNavigation.content_pack_categories)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TabNavigation::content_pack_categories() const
{
    // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.content_pack_categories)
    return content_pack_categories_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TabNavigation::mutable_content_pack_categories()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.content_pack_categories)
    return &content_pack_categories_;
}

// optional int32 http_status_code = 20;
inline bool TabNavigation::has_http_status_code() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TabNavigation::set_has_http_status_code()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void TabNavigation::clear_has_http_status_code()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void TabNavigation::clear_http_status_code()
{
    http_status_code_ = 0;
    clear_has_http_status_code();
}
inline ::google::protobuf::int32 TabNavigation::http_status_code() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.http_status_code)
    return http_status_code_;
}
inline void TabNavigation::set_http_status_code(::google::protobuf::int32 value)
{
    set_has_http_status_code();
    http_status_code_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.http_status_code)
}

// optional int32 obsolete_referrer_policy = 21 [default = 1];
inline bool TabNavigation::has_obsolete_referrer_policy() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TabNavigation::set_has_obsolete_referrer_policy()
{
    _has_bits_[0] |= 0x00040000u;
}
inline void TabNavigation::clear_has_obsolete_referrer_policy()
{
    _has_bits_[0] &= ~0x00040000u;
}
inline void TabNavigation::clear_obsolete_referrer_policy()
{
    obsolete_referrer_policy_ = 1;
    clear_has_obsolete_referrer_policy();
}
inline ::google::protobuf::int32 TabNavigation::obsolete_referrer_policy() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.obsolete_referrer_policy)
    return obsolete_referrer_policy_;
}
inline void TabNavigation::set_obsolete_referrer_policy(::google::protobuf::int32 value)
{
    set_has_obsolete_referrer_policy();
    obsolete_referrer_policy_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.obsolete_referrer_policy)
}

// optional bool is_restored = 22;
inline bool TabNavigation::has_is_restored() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TabNavigation::set_has_is_restored()
{
    _has_bits_[0] |= 0x00080000u;
}
inline void TabNavigation::clear_has_is_restored()
{
    _has_bits_[0] &= ~0x00080000u;
}
inline void TabNavigation::clear_is_restored()
{
    is_restored_ = false;
    clear_has_is_restored();
}
inline bool TabNavigation::is_restored() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.is_restored)
    return is_restored_;
}
inline void TabNavigation::set_is_restored(bool value)
{
    set_has_is_restored();
    is_restored_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.is_restored)
}

// repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
inline int TabNavigation::navigation_redirect_size() const
{
    return navigation_redirect_.size();
}
inline void TabNavigation::clear_navigation_redirect()
{
    navigation_redirect_.Clear();
}
inline const ::sync_pb::NavigationRedirect& TabNavigation::navigation_redirect(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_redirect)
    return navigation_redirect_.Get(index);
}
inline ::sync_pb::NavigationRedirect* TabNavigation::mutable_navigation_redirect(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.navigation_redirect)
    return navigation_redirect_.Mutable(index);
}
inline ::sync_pb::NavigationRedirect* TabNavigation::add_navigation_redirect()
{
    // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.navigation_redirect)
    return navigation_redirect_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::sync_pb::NavigationRedirect>*
TabNavigation::mutable_navigation_redirect()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.navigation_redirect)
    return &navigation_redirect_;
}
inline const ::google::protobuf::RepeatedPtrField<::sync_pb::NavigationRedirect>&
TabNavigation::navigation_redirect() const
{
    // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.navigation_redirect)
    return navigation_redirect_;
}

// optional string last_navigation_redirect_url = 24;
inline bool TabNavigation::has_last_navigation_redirect_url() const
{
    return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TabNavigation::set_has_last_navigation_redirect_url()
{
    _has_bits_[0] |= 0x00200000u;
}
inline void TabNavigation::clear_has_last_navigation_redirect_url()
{
    _has_bits_[0] &= ~0x00200000u;
}
inline void TabNavigation::clear_last_navigation_redirect_url()
{
    last_navigation_redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_last_navigation_redirect_url();
}
inline const ::std::string& TabNavigation::last_navigation_redirect_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.last_navigation_redirect_url)
    return last_navigation_redirect_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_last_navigation_redirect_url(const ::std::string& value)
{
    set_has_last_navigation_redirect_url();
    last_navigation_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline void TabNavigation::set_last_navigation_redirect_url(const char* value)
{
    set_has_last_navigation_redirect_url();
    last_navigation_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline void TabNavigation::set_last_navigation_redirect_url(const char* value, size_t size)
{
    set_has_last_navigation_redirect_url();
    last_navigation_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.last_navigation_redirect_url)
}
inline ::std::string* TabNavigation::mutable_last_navigation_redirect_url()
{
    set_has_last_navigation_redirect_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.last_navigation_redirect_url)
    return last_navigation_redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabNavigation::release_last_navigation_redirect_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.last_navigation_redirect_url)
    clear_has_last_navigation_redirect_url();
    return last_navigation_redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabNavigation::set_allocated_last_navigation_redirect_url(::std::string* last_navigation_redirect_url)
{
    if (last_navigation_redirect_url != NULL) {
        set_has_last_navigation_redirect_url();
    } else {
        clear_has_last_navigation_redirect_url();
    }
    last_navigation_redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_navigation_redirect_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.last_navigation_redirect_url)
}

// optional int32 correct_referrer_policy = 25 [default = 1];
inline bool TabNavigation::has_correct_referrer_policy() const
{
    return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TabNavigation::set_has_correct_referrer_policy()
{
    _has_bits_[0] |= 0x00400000u;
}
inline void TabNavigation::clear_has_correct_referrer_policy()
{
    _has_bits_[0] &= ~0x00400000u;
}
inline void TabNavigation::clear_correct_referrer_policy()
{
    correct_referrer_policy_ = 1;
    clear_has_correct_referrer_policy();
}
inline ::google::protobuf::int32 TabNavigation::correct_referrer_policy() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.correct_referrer_policy)
    return correct_referrer_policy_;
}
inline void TabNavigation::set_correct_referrer_policy(::google::protobuf::int32 value)
{
    set_has_correct_referrer_policy();
    correct_referrer_policy_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.correct_referrer_policy)
}

// optional .sync_pb.TabNavigation.PasswordState password_state = 26;
inline bool TabNavigation::has_password_state() const
{
    return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TabNavigation::set_has_password_state()
{
    _has_bits_[0] |= 0x00800000u;
}
inline void TabNavigation::clear_has_password_state()
{
    _has_bits_[0] &= ~0x00800000u;
}
inline void TabNavigation::clear_password_state()
{
    password_state_ = 0;
    clear_has_password_state();
}
inline ::sync_pb::TabNavigation_PasswordState TabNavigation::password_state() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.password_state)
    return static_cast<::sync_pb::TabNavigation_PasswordState>(password_state_);
}
inline void TabNavigation::set_password_state(::sync_pb::TabNavigation_PasswordState value)
{
    assert(::sync_pb::TabNavigation_PasswordState_IsValid(value));
    set_has_password_state();
    password_state_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.password_state)
}

// -------------------------------------------------------------------

// NavigationRedirect

// optional string url = 1;
inline bool NavigationRedirect::has_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationRedirect::set_has_url()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void NavigationRedirect::clear_has_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationRedirect::clear_url()
{
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
}
inline const ::std::string& NavigationRedirect::url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NavigationRedirect.url)
    return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NavigationRedirect::set_url(const ::std::string& value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.NavigationRedirect.url)
}
inline void NavigationRedirect::set_url(const char* value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.NavigationRedirect.url)
}
inline void NavigationRedirect::set_url(const char* value, size_t size)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.NavigationRedirect.url)
}
inline ::std::string* NavigationRedirect::mutable_url()
{
    set_has_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.NavigationRedirect.url)
    return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NavigationRedirect::release_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.NavigationRedirect.url)
    clear_has_url();
    return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NavigationRedirect::set_allocated_url(::std::string* url)
{
    if (url != NULL) {
        set_has_url();
    } else {
        clear_has_url();
    }
    url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NavigationRedirect.url)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

#ifndef SWIG
namespace google {
namespace protobuf {

    template <>
    struct is_proto_enum<::sync_pb::SessionWindow_BrowserType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::sync_pb::SessionTab_FaviconType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::sync_pb::TabNavigation_BlockedState> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::sync_pb::TabNavigation_PasswordState> : ::google::protobuf::internal::true_type {
    };

} // namespace protobuf
} // namespace google
#endif // SWIG

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_session_5fspecifics_2eproto__INCLUDED
