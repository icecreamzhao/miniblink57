// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: history_delete_directive_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "history_delete_directive_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_history_5fdelete_5fdirective_5fspecifics_2eproto()
{
    delete HistoryDeleteDirectiveSpecifics::default_instance_;
    delete GlobalIdDirective::default_instance_;
    delete TimeRangeDirective::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    HistoryDeleteDirectiveSpecifics::default_instance_ = new HistoryDeleteDirectiveSpecifics();
    GlobalIdDirective::default_instance_ = new GlobalIdDirective();
    TimeRangeDirective::default_instance_ = new TimeRangeDirective();
    HistoryDeleteDirectiveSpecifics::default_instance_->InitAsDefaultInstance();
    GlobalIdDirective::default_instance_->InitAsDefaultInstance();
    TimeRangeDirective::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_history_5fdelete_5fdirective_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto_once_);
void protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_history_5fdelete_5fdirective_5fspecifics_2eproto {
    StaticDescriptorInitializer_history_5fdelete_5fdirective_5fspecifics_2eproto()
    {
        protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
    }
} static_descriptor_initializer_history_5fdelete_5fdirective_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForHistoryDeleteDirectiveSpecifics(
    HistoryDeleteDirectiveSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryDeleteDirectiveSpecifics::kGlobalIdDirectiveFieldNumber;
const int HistoryDeleteDirectiveSpecifics::kTimeRangeDirectiveFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}

void HistoryDeleteDirectiveSpecifics::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    global_id_directive_ = const_cast<::sync_pb::GlobalIdDirective*>(
        ::sync_pb::GlobalIdDirective::internal_default_instance());
#else
    global_id_directive_ = const_cast<::sync_pb::GlobalIdDirective*>(&::sync_pb::GlobalIdDirective::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    time_range_directive_ = const_cast<::sync_pb::TimeRangeDirective*>(
        ::sync_pb::TimeRangeDirective::internal_default_instance());
#else
    time_range_directive_ = const_cast<::sync_pb::TimeRangeDirective*>(&::sync_pb::TimeRangeDirective::default_instance());
#endif
}

HistoryDeleteDirectiveSpecifics::HistoryDeleteDirectiveSpecifics(const HistoryDeleteDirectiveSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.HistoryDeleteDirectiveSpecifics)
}

void HistoryDeleteDirectiveSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    global_id_directive_ = NULL;
    time_range_directive_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDeleteDirectiveSpecifics::~HistoryDeleteDirectiveSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.HistoryDeleteDirectiveSpecifics)
    SharedDtor();
}

void HistoryDeleteDirectiveSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete global_id_directive_;
        delete time_range_directive_;
    }
}

void HistoryDeleteDirectiveSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HistoryDeleteDirectiveSpecifics& HistoryDeleteDirectiveSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

HistoryDeleteDirectiveSpecifics* HistoryDeleteDirectiveSpecifics::default_instance_ = NULL;

HistoryDeleteDirectiveSpecifics* HistoryDeleteDirectiveSpecifics::New(::google::protobuf::Arena* arena) const
{
    HistoryDeleteDirectiveSpecifics* n = new HistoryDeleteDirectiveSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void HistoryDeleteDirectiveSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.HistoryDeleteDirectiveSpecifics)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_global_id_directive()) {
            if (global_id_directive_ != NULL)
                global_id_directive_->::sync_pb::GlobalIdDirective::Clear();
        }
        if (has_time_range_directive()) {
            if (time_range_directive_ != NULL)
                time_range_directive_->::sync_pb::TimeRangeDirective::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HistoryDeleteDirectiveSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForHistoryDeleteDirectiveSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.HistoryDeleteDirectiveSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_global_id_directive()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_time_range_directive;
            break;
        }

        // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
        case 2: {
            if (tag == 18) {
            parse_time_range_directive:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_time_range_directive()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.HistoryDeleteDirectiveSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.HistoryDeleteDirectiveSpecifics)
    return false;
#undef DO_
}

void HistoryDeleteDirectiveSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.HistoryDeleteDirectiveSpecifics)
    // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
    if (has_global_id_directive()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->global_id_directive_, output);
    }

    // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
    if (has_time_range_directive()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->time_range_directive_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.HistoryDeleteDirectiveSpecifics)
}

int HistoryDeleteDirectiveSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.HistoryDeleteDirectiveSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional .sync_pb.GlobalIdDirective global_id_directive = 1;
        if (has_global_id_directive()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->global_id_directive_);
        }

        // optional .sync_pb.TimeRangeDirective time_range_directive = 2;
        if (has_time_range_directive()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->time_range_directive_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void HistoryDeleteDirectiveSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const HistoryDeleteDirectiveSpecifics*>(&from));
}

void HistoryDeleteDirectiveSpecifics::MergeFrom(const HistoryDeleteDirectiveSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_global_id_directive()) {
            mutable_global_id_directive()->::sync_pb::GlobalIdDirective::MergeFrom(from.global_id_directive());
        }
        if (from.has_time_range_directive()) {
            mutable_time_range_directive()->::sync_pb::TimeRangeDirective::MergeFrom(from.time_range_directive());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void HistoryDeleteDirectiveSpecifics::CopyFrom(const HistoryDeleteDirectiveSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.HistoryDeleteDirectiveSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool HistoryDeleteDirectiveSpecifics::IsInitialized() const
{

    return true;
}

void HistoryDeleteDirectiveSpecifics::Swap(HistoryDeleteDirectiveSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void HistoryDeleteDirectiveSpecifics::InternalSwap(HistoryDeleteDirectiveSpecifics* other)
{
    std::swap(global_id_directive_, other->global_id_directive_);
    std::swap(time_range_directive_, other->time_range_directive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string HistoryDeleteDirectiveSpecifics::GetTypeName() const
{
    return "sync_pb.HistoryDeleteDirectiveSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryDeleteDirectiveSpecifics

// optional .sync_pb.GlobalIdDirective global_id_directive = 1;
bool HistoryDeleteDirectiveSpecifics::has_global_id_directive() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryDeleteDirectiveSpecifics::set_has_global_id_directive()
{
    _has_bits_[0] |= 0x00000001u;
}
void HistoryDeleteDirectiveSpecifics::clear_has_global_id_directive()
{
    _has_bits_[0] &= ~0x00000001u;
}
void HistoryDeleteDirectiveSpecifics::clear_global_id_directive()
{
    if (global_id_directive_ != NULL)
        global_id_directive_->::sync_pb::GlobalIdDirective::Clear();
    clear_has_global_id_directive();
}
const ::sync_pb::GlobalIdDirective& HistoryDeleteDirectiveSpecifics::global_id_directive() const
{
    // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return global_id_directive_ != NULL ? *global_id_directive_ : *default_instance().global_id_directive_;
#else
    return global_id_directive_ != NULL ? *global_id_directive_ : *default_instance_->global_id_directive_;
#endif
}
::sync_pb::GlobalIdDirective* HistoryDeleteDirectiveSpecifics::mutable_global_id_directive()
{
    set_has_global_id_directive();
    if (global_id_directive_ == NULL) {
        global_id_directive_ = new ::sync_pb::GlobalIdDirective;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
    return global_id_directive_;
}
::sync_pb::GlobalIdDirective* HistoryDeleteDirectiveSpecifics::release_global_id_directive()
{
    // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
    clear_has_global_id_directive();
    ::sync_pb::GlobalIdDirective* temp = global_id_directive_;
    global_id_directive_ = NULL;
    return temp;
}
void HistoryDeleteDirectiveSpecifics::set_allocated_global_id_directive(::sync_pb::GlobalIdDirective* global_id_directive)
{
    delete global_id_directive_;
    global_id_directive_ = global_id_directive;
    if (global_id_directive) {
        set_has_global_id_directive();
    } else {
        clear_has_global_id_directive();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.global_id_directive)
}

// optional .sync_pb.TimeRangeDirective time_range_directive = 2;
bool HistoryDeleteDirectiveSpecifics::has_time_range_directive() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryDeleteDirectiveSpecifics::set_has_time_range_directive()
{
    _has_bits_[0] |= 0x00000002u;
}
void HistoryDeleteDirectiveSpecifics::clear_has_time_range_directive()
{
    _has_bits_[0] &= ~0x00000002u;
}
void HistoryDeleteDirectiveSpecifics::clear_time_range_directive()
{
    if (time_range_directive_ != NULL)
        time_range_directive_->::sync_pb::TimeRangeDirective::Clear();
    clear_has_time_range_directive();
}
const ::sync_pb::TimeRangeDirective& HistoryDeleteDirectiveSpecifics::time_range_directive() const
{
    // @@protoc_insertion_point(field_get:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return time_range_directive_ != NULL ? *time_range_directive_ : *default_instance().time_range_directive_;
#else
    return time_range_directive_ != NULL ? *time_range_directive_ : *default_instance_->time_range_directive_;
#endif
}
::sync_pb::TimeRangeDirective* HistoryDeleteDirectiveSpecifics::mutable_time_range_directive()
{
    set_has_time_range_directive();
    if (time_range_directive_ == NULL) {
        time_range_directive_ = new ::sync_pb::TimeRangeDirective;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
    return time_range_directive_;
}
::sync_pb::TimeRangeDirective* HistoryDeleteDirectiveSpecifics::release_time_range_directive()
{
    // @@protoc_insertion_point(field_release:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
    clear_has_time_range_directive();
    ::sync_pb::TimeRangeDirective* temp = time_range_directive_;
    time_range_directive_ = NULL;
    return temp;
}
void HistoryDeleteDirectiveSpecifics::set_allocated_time_range_directive(::sync_pb::TimeRangeDirective* time_range_directive)
{
    delete time_range_directive_;
    time_range_directive_ = time_range_directive;
    if (time_range_directive) {
        set_has_time_range_directive();
    } else {
        clear_has_time_range_directive();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.HistoryDeleteDirectiveSpecifics.time_range_directive)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGlobalIdDirective(
    GlobalIdDirective* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalIdDirective::kGlobalIdFieldNumber;
const int GlobalIdDirective::kStartTimeUsecFieldNumber;
const int GlobalIdDirective::kEndTimeUsecFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalIdDirective::GlobalIdDirective()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.GlobalIdDirective)
}

void GlobalIdDirective::InitAsDefaultInstance()
{
}

GlobalIdDirective::GlobalIdDirective(const GlobalIdDirective& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.GlobalIdDirective)
}

void GlobalIdDirective::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    start_time_usec_ = GOOGLE_LONGLONG(0);
    end_time_usec_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalIdDirective::~GlobalIdDirective()
{
    // @@protoc_insertion_point(destructor:sync_pb.GlobalIdDirective)
    SharedDtor();
}

void GlobalIdDirective::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void GlobalIdDirective::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GlobalIdDirective& GlobalIdDirective::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

GlobalIdDirective* GlobalIdDirective::default_instance_ = NULL;

GlobalIdDirective* GlobalIdDirective::New(::google::protobuf::Arena* arena) const
{
    GlobalIdDirective* n = new GlobalIdDirective;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void GlobalIdDirective::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.GlobalIdDirective)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                       \
    _Pragma("clang diagnostic push")                                                                        \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(GlobalIdDirective, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<GlobalIdDirective*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(start_time_usec_, end_time_usec_);

#undef ZR_HELPER_
#undef ZR_

    global_id_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GlobalIdDirective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForGlobalIdDirective, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.GlobalIdDirective)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated int64 global_id = 1;
        case 1: {
            if (tag == 8) {
            parse_global_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    1, 8, input, this->mutable_global_id())));
            } else if (tag == 10) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, this->mutable_global_id())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(8))
                goto parse_global_id;
            if (input->ExpectTag(16))
                goto parse_start_time_usec;
            break;
        }

        // optional int64 start_time_usec = 2;
        case 2: {
            if (tag == 16) {
            parse_start_time_usec:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &start_time_usec_)));
                set_has_start_time_usec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_end_time_usec;
            break;
        }

        // optional int64 end_time_usec = 3;
        case 3: {
            if (tag == 24) {
            parse_end_time_usec:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &end_time_usec_)));
                set_has_end_time_usec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.GlobalIdDirective)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.GlobalIdDirective)
    return false;
#undef DO_
}

void GlobalIdDirective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.GlobalIdDirective)
    // repeated int64 global_id = 1;
    for (int i = 0; i < this->global_id_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(
            1, this->global_id(i), output);
    }

    // optional int64 start_time_usec = 2;
    if (has_start_time_usec()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time_usec(), output);
    }

    // optional int64 end_time_usec = 3;
    if (has_end_time_usec()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time_usec(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.GlobalIdDirective)
}

int GlobalIdDirective::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.GlobalIdDirective)
    int total_size = 0;

    if (_has_bits_[1 / 32] & 6u) {
        // optional int64 start_time_usec = 2;
        if (has_start_time_usec()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->start_time_usec());
        }

        // optional int64 end_time_usec = 3;
        if (has_end_time_usec()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->end_time_usec());
        }
    }
    // repeated int64 global_id = 1;
    {
        int data_size = 0;
        for (int i = 0; i < this->global_id_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int64Size(this->global_id(i));
        }
        total_size += 1 * this->global_id_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void GlobalIdDirective::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const GlobalIdDirective*>(&from));
}

void GlobalIdDirective::MergeFrom(const GlobalIdDirective& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.GlobalIdDirective)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    global_id_.MergeFrom(from.global_id_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
        if (from.has_start_time_usec()) {
            set_start_time_usec(from.start_time_usec());
        }
        if (from.has_end_time_usec()) {
            set_end_time_usec(from.end_time_usec());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void GlobalIdDirective::CopyFrom(const GlobalIdDirective& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.GlobalIdDirective)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool GlobalIdDirective::IsInitialized() const
{

    return true;
}

void GlobalIdDirective::Swap(GlobalIdDirective* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void GlobalIdDirective::InternalSwap(GlobalIdDirective* other)
{
    global_id_.UnsafeArenaSwap(&other->global_id_);
    std::swap(start_time_usec_, other->start_time_usec_);
    std::swap(end_time_usec_, other->end_time_usec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string GlobalIdDirective::GetTypeName() const
{
    return "sync_pb.GlobalIdDirective";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalIdDirective

// repeated int64 global_id = 1;
int GlobalIdDirective::global_id_size() const
{
    return global_id_.size();
}
void GlobalIdDirective::clear_global_id()
{
    global_id_.Clear();
}
::google::protobuf::int64 GlobalIdDirective::global_id(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.global_id)
    return global_id_.Get(index);
}
void GlobalIdDirective::set_global_id(int index, ::google::protobuf::int64 value)
{
    global_id_.Set(index, value);
    // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.global_id)
}
void GlobalIdDirective::add_global_id(::google::protobuf::int64 value)
{
    global_id_.Add(value);
    // @@protoc_insertion_point(field_add:sync_pb.GlobalIdDirective.global_id)
}
const ::google::protobuf::RepeatedField<::google::protobuf::int64>&
GlobalIdDirective::global_id() const
{
    // @@protoc_insertion_point(field_list:sync_pb.GlobalIdDirective.global_id)
    return global_id_;
}
::google::protobuf::RepeatedField<::google::protobuf::int64>*
GlobalIdDirective::mutable_global_id()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.GlobalIdDirective.global_id)
    return &global_id_;
}

// optional int64 start_time_usec = 2;
bool GlobalIdDirective::has_start_time_usec() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlobalIdDirective::set_has_start_time_usec()
{
    _has_bits_[0] |= 0x00000002u;
}
void GlobalIdDirective::clear_has_start_time_usec()
{
    _has_bits_[0] &= ~0x00000002u;
}
void GlobalIdDirective::clear_start_time_usec()
{
    start_time_usec_ = GOOGLE_LONGLONG(0);
    clear_has_start_time_usec();
}
::google::protobuf::int64 GlobalIdDirective::start_time_usec() const
{
    // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.start_time_usec)
    return start_time_usec_;
}
void GlobalIdDirective::set_start_time_usec(::google::protobuf::int64 value)
{
    set_has_start_time_usec();
    start_time_usec_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.start_time_usec)
}

// optional int64 end_time_usec = 3;
bool GlobalIdDirective::has_end_time_usec() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void GlobalIdDirective::set_has_end_time_usec()
{
    _has_bits_[0] |= 0x00000004u;
}
void GlobalIdDirective::clear_has_end_time_usec()
{
    _has_bits_[0] &= ~0x00000004u;
}
void GlobalIdDirective::clear_end_time_usec()
{
    end_time_usec_ = GOOGLE_LONGLONG(0);
    clear_has_end_time_usec();
}
::google::protobuf::int64 GlobalIdDirective::end_time_usec() const
{
    // @@protoc_insertion_point(field_get:sync_pb.GlobalIdDirective.end_time_usec)
    return end_time_usec_;
}
void GlobalIdDirective::set_end_time_usec(::google::protobuf::int64 value)
{
    set_has_end_time_usec();
    end_time_usec_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.GlobalIdDirective.end_time_usec)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTimeRangeDirective(
    TimeRangeDirective* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRangeDirective::kStartTimeUsecFieldNumber;
const int TimeRangeDirective::kEndTimeUsecFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRangeDirective::TimeRangeDirective()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.TimeRangeDirective)
}

void TimeRangeDirective::InitAsDefaultInstance()
{
}

TimeRangeDirective::TimeRangeDirective(const TimeRangeDirective& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.TimeRangeDirective)
}

void TimeRangeDirective::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    start_time_usec_ = GOOGLE_LONGLONG(0);
    end_time_usec_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeRangeDirective::~TimeRangeDirective()
{
    // @@protoc_insertion_point(destructor:sync_pb.TimeRangeDirective)
    SharedDtor();
}

void TimeRangeDirective::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void TimeRangeDirective::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeRangeDirective& TimeRangeDirective::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

TimeRangeDirective* TimeRangeDirective::default_instance_ = NULL;

TimeRangeDirective* TimeRangeDirective::New(::google::protobuf::Arena* arena) const
{
    TimeRangeDirective* n = new TimeRangeDirective;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TimeRangeDirective::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.TimeRangeDirective)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                        \
    _Pragma("clang diagnostic push")                                                                         \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(TimeRangeDirective, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<TimeRangeDirective*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(start_time_usec_, end_time_usec_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TimeRangeDirective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForTimeRangeDirective, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.TimeRangeDirective)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 start_time_usec = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &start_time_usec_)));
                set_has_start_time_usec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_end_time_usec;
            break;
        }

        // optional int64 end_time_usec = 2;
        case 2: {
            if (tag == 16) {
            parse_end_time_usec:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &end_time_usec_)));
                set_has_end_time_usec();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.TimeRangeDirective)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.TimeRangeDirective)
    return false;
#undef DO_
}

void TimeRangeDirective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.TimeRangeDirective)
    // optional int64 start_time_usec = 1;
    if (has_start_time_usec()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time_usec(), output);
    }

    // optional int64 end_time_usec = 2;
    if (has_end_time_usec()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time_usec(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.TimeRangeDirective)
}

int TimeRangeDirective::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.TimeRangeDirective)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional int64 start_time_usec = 1;
        if (has_start_time_usec()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->start_time_usec());
        }

        // optional int64 end_time_usec = 2;
        if (has_end_time_usec()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->end_time_usec());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TimeRangeDirective::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const TimeRangeDirective*>(&from));
}

void TimeRangeDirective::MergeFrom(const TimeRangeDirective& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TimeRangeDirective)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_start_time_usec()) {
            set_start_time_usec(from.start_time_usec());
        }
        if (from.has_end_time_usec()) {
            set_end_time_usec(from.end_time_usec());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void TimeRangeDirective::CopyFrom(const TimeRangeDirective& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TimeRangeDirective)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool TimeRangeDirective::IsInitialized() const
{

    return true;
}

void TimeRangeDirective::Swap(TimeRangeDirective* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void TimeRangeDirective::InternalSwap(TimeRangeDirective* other)
{
    std::swap(start_time_usec_, other->start_time_usec_);
    std::swap(end_time_usec_, other->end_time_usec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimeRangeDirective::GetTypeName() const
{
    return "sync_pb.TimeRangeDirective";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRangeDirective

// optional int64 start_time_usec = 1;
bool TimeRangeDirective::has_start_time_usec() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeRangeDirective::set_has_start_time_usec()
{
    _has_bits_[0] |= 0x00000001u;
}
void TimeRangeDirective::clear_has_start_time_usec()
{
    _has_bits_[0] &= ~0x00000001u;
}
void TimeRangeDirective::clear_start_time_usec()
{
    start_time_usec_ = GOOGLE_LONGLONG(0);
    clear_has_start_time_usec();
}
::google::protobuf::int64 TimeRangeDirective::start_time_usec() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TimeRangeDirective.start_time_usec)
    return start_time_usec_;
}
void TimeRangeDirective::set_start_time_usec(::google::protobuf::int64 value)
{
    set_has_start_time_usec();
    start_time_usec_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TimeRangeDirective.start_time_usec)
}

// optional int64 end_time_usec = 2;
bool TimeRangeDirective::has_end_time_usec() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeRangeDirective::set_has_end_time_usec()
{
    _has_bits_[0] |= 0x00000002u;
}
void TimeRangeDirective::clear_has_end_time_usec()
{
    _has_bits_[0] &= ~0x00000002u;
}
void TimeRangeDirective::clear_end_time_usec()
{
    end_time_usec_ = GOOGLE_LONGLONG(0);
    clear_has_end_time_usec();
}
::google::protobuf::int64 TimeRangeDirective::end_time_usec() const
{
    // @@protoc_insertion_point(field_get:sync_pb.TimeRangeDirective.end_time_usec)
    return end_time_usec_;
}
void TimeRangeDirective::set_end_time_usec(::google::protobuf::int64 value)
{
    set_has_end_time_usec();
    end_time_usec_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.TimeRangeDirective.end_time_usec)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
