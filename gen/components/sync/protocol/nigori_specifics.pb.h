// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nigori_specifics.proto

#ifndef PROTOBUF_nigori_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_nigori_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "encryption.pb.h"
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nigori_5fspecifics_2eproto();
void protobuf_AssignDesc_nigori_5fspecifics_2eproto();
void protobuf_ShutdownFile_nigori_5fspecifics_2eproto();

class NigoriKey;
class NigoriKeyBag;
class NigoriSpecifics;

enum NigoriSpecifics_PassphraseType {
    NigoriSpecifics_PassphraseType_IMPLICIT_PASSPHRASE = 1,
    NigoriSpecifics_PassphraseType_KEYSTORE_PASSPHRASE = 2,
    NigoriSpecifics_PassphraseType_FROZEN_IMPLICIT_PASSPHRASE = 3,
    NigoriSpecifics_PassphraseType_CUSTOM_PASSPHRASE = 4
};
bool NigoriSpecifics_PassphraseType_IsValid(int value);
const NigoriSpecifics_PassphraseType NigoriSpecifics_PassphraseType_PassphraseType_MIN = NigoriSpecifics_PassphraseType_IMPLICIT_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics_PassphraseType_PassphraseType_MAX = NigoriSpecifics_PassphraseType_CUSTOM_PASSPHRASE;
const int NigoriSpecifics_PassphraseType_PassphraseType_ARRAYSIZE = NigoriSpecifics_PassphraseType_PassphraseType_MAX + 1;

// ===================================================================

class NigoriKey : public ::google::protobuf::MessageLite {
public:
    NigoriKey();
    virtual ~NigoriKey();

    NigoriKey(const NigoriKey& from);

    inline NigoriKey& operator=(const NigoriKey& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const NigoriKey& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const NigoriKey* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(NigoriKey* other);

    // implements Message ----------------------------------------------

    inline NigoriKey* New() const { return New(NULL); }

    NigoriKey* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const NigoriKey& from);
    void MergeFrom(const NigoriKey& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(NigoriKey* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional string name = 1;
    bool has_name() const;
    void clear_name();
    static const int kNameFieldNumber = 1;
    const ::std::string& name() const;
    void set_name(const ::std::string& value);
    void set_name(const char* value);
    void set_name(const char* value, size_t size);
    ::std::string* mutable_name();
    ::std::string* release_name();
    void set_allocated_name(::std::string* name);

    // optional bytes user_key = 2;
    bool has_user_key() const;
    void clear_user_key();
    static const int kUserKeyFieldNumber = 2;
    const ::std::string& user_key() const;
    void set_user_key(const ::std::string& value);
    void set_user_key(const char* value);
    void set_user_key(const void* value, size_t size);
    ::std::string* mutable_user_key();
    ::std::string* release_user_key();
    void set_allocated_user_key(::std::string* user_key);

    // optional bytes encryption_key = 3;
    bool has_encryption_key() const;
    void clear_encryption_key();
    static const int kEncryptionKeyFieldNumber = 3;
    const ::std::string& encryption_key() const;
    void set_encryption_key(const ::std::string& value);
    void set_encryption_key(const char* value);
    void set_encryption_key(const void* value, size_t size);
    ::std::string* mutable_encryption_key();
    ::std::string* release_encryption_key();
    void set_allocated_encryption_key(::std::string* encryption_key);

    // optional bytes mac_key = 4;
    bool has_mac_key() const;
    void clear_mac_key();
    static const int kMacKeyFieldNumber = 4;
    const ::std::string& mac_key() const;
    void set_mac_key(const ::std::string& value);
    void set_mac_key(const char* value);
    void set_mac_key(const void* value, size_t size);
    ::std::string* mutable_mac_key();
    ::std::string* release_mac_key();
    void set_allocated_mac_key(::std::string* mac_key);

    // @@protoc_insertion_point(class_scope:sync_pb.NigoriKey)
private:
    inline void set_has_name();
    inline void clear_has_name();
    inline void set_has_user_key();
    inline void clear_has_user_key();
    inline void set_has_encryption_key();
    inline void clear_has_encryption_key();
    inline void set_has_mac_key();
    inline void clear_has_mac_key();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr user_key_;
    ::google::protobuf::internal::ArenaStringPtr encryption_key_;
    ::google::protobuf::internal::ArenaStringPtr mac_key_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_nigori_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_nigori_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_nigori_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_nigori_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static NigoriKey* default_instance_;
};
// -------------------------------------------------------------------

class NigoriKeyBag : public ::google::protobuf::MessageLite {
public:
    NigoriKeyBag();
    virtual ~NigoriKeyBag();

    NigoriKeyBag(const NigoriKeyBag& from);

    inline NigoriKeyBag& operator=(const NigoriKeyBag& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const NigoriKeyBag& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const NigoriKeyBag* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(NigoriKeyBag* other);

    // implements Message ----------------------------------------------

    inline NigoriKeyBag* New() const { return New(NULL); }

    NigoriKeyBag* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const NigoriKeyBag& from);
    void MergeFrom(const NigoriKeyBag& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(NigoriKeyBag* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .sync_pb.NigoriKey key = 2;
    int key_size() const;
    void clear_key();
    static const int kKeyFieldNumber = 2;
    const ::sync_pb::NigoriKey& key(int index) const;
    ::sync_pb::NigoriKey* mutable_key(int index);
    ::sync_pb::NigoriKey* add_key();
    ::google::protobuf::RepeatedPtrField<::sync_pb::NigoriKey>*
    mutable_key();
    const ::google::protobuf::RepeatedPtrField<::sync_pb::NigoriKey>&
    key() const;

    // @@protoc_insertion_point(class_scope:sync_pb.NigoriKeyBag)
private:
    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::RepeatedPtrField<::sync_pb::NigoriKey> key_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_nigori_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_nigori_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_nigori_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_nigori_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static NigoriKeyBag* default_instance_;
};
// -------------------------------------------------------------------

class NigoriSpecifics : public ::google::protobuf::MessageLite {
public:
    NigoriSpecifics();
    virtual ~NigoriSpecifics();

    NigoriSpecifics(const NigoriSpecifics& from);

    inline NigoriSpecifics& operator=(const NigoriSpecifics& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const NigoriSpecifics& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const NigoriSpecifics* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(NigoriSpecifics* other);

    // implements Message ----------------------------------------------

    inline NigoriSpecifics* New() const { return New(NULL); }

    NigoriSpecifics* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const NigoriSpecifics& from);
    void MergeFrom(const NigoriSpecifics& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(NigoriSpecifics* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    typedef NigoriSpecifics_PassphraseType PassphraseType;
    static const PassphraseType IMPLICIT_PASSPHRASE = NigoriSpecifics_PassphraseType_IMPLICIT_PASSPHRASE;
    static const PassphraseType KEYSTORE_PASSPHRASE = NigoriSpecifics_PassphraseType_KEYSTORE_PASSPHRASE;
    static const PassphraseType FROZEN_IMPLICIT_PASSPHRASE = NigoriSpecifics_PassphraseType_FROZEN_IMPLICIT_PASSPHRASE;
    static const PassphraseType CUSTOM_PASSPHRASE = NigoriSpecifics_PassphraseType_CUSTOM_PASSPHRASE;
    static inline bool PassphraseType_IsValid(int value)
    {
        return NigoriSpecifics_PassphraseType_IsValid(value);
    }
    static const PassphraseType PassphraseType_MIN = NigoriSpecifics_PassphraseType_PassphraseType_MIN;
    static const PassphraseType PassphraseType_MAX = NigoriSpecifics_PassphraseType_PassphraseType_MAX;
    static const int PassphraseType_ARRAYSIZE = NigoriSpecifics_PassphraseType_PassphraseType_ARRAYSIZE;

    // accessors -------------------------------------------------------

    // optional .sync_pb.EncryptedData encryption_keybag = 1;
    bool has_encryption_keybag() const;
    void clear_encryption_keybag();
    static const int kEncryptionKeybagFieldNumber = 1;
    const ::sync_pb::EncryptedData& encryption_keybag() const;
    ::sync_pb::EncryptedData* mutable_encryption_keybag();
    ::sync_pb::EncryptedData* release_encryption_keybag();
    void set_allocated_encryption_keybag(::sync_pb::EncryptedData* encryption_keybag);

    // optional bool keybag_is_frozen = 2;
    bool has_keybag_is_frozen() const;
    void clear_keybag_is_frozen();
    static const int kKeybagIsFrozenFieldNumber = 2;
    bool keybag_is_frozen() const;
    void set_keybag_is_frozen(bool value);

    // optional bool encrypt_bookmarks = 13;
    bool has_encrypt_bookmarks() const;
    void clear_encrypt_bookmarks();
    static const int kEncryptBookmarksFieldNumber = 13;
    bool encrypt_bookmarks() const;
    void set_encrypt_bookmarks(bool value);

    // optional bool encrypt_preferences = 14;
    bool has_encrypt_preferences() const;
    void clear_encrypt_preferences();
    static const int kEncryptPreferencesFieldNumber = 14;
    bool encrypt_preferences() const;
    void set_encrypt_preferences(bool value);

    // optional bool encrypt_autofill_profile = 15;
    bool has_encrypt_autofill_profile() const;
    void clear_encrypt_autofill_profile();
    static const int kEncryptAutofillProfileFieldNumber = 15;
    bool encrypt_autofill_profile() const;
    void set_encrypt_autofill_profile(bool value);

    // optional bool encrypt_autofill = 16;
    bool has_encrypt_autofill() const;
    void clear_encrypt_autofill();
    static const int kEncryptAutofillFieldNumber = 16;
    bool encrypt_autofill() const;
    void set_encrypt_autofill(bool value);

    // optional bool encrypt_themes = 17;
    bool has_encrypt_themes() const;
    void clear_encrypt_themes();
    static const int kEncryptThemesFieldNumber = 17;
    bool encrypt_themes() const;
    void set_encrypt_themes(bool value);

    // optional bool encrypt_typed_urls = 18;
    bool has_encrypt_typed_urls() const;
    void clear_encrypt_typed_urls();
    static const int kEncryptTypedUrlsFieldNumber = 18;
    bool encrypt_typed_urls() const;
    void set_encrypt_typed_urls(bool value);

    // optional bool encrypt_extensions = 19;
    bool has_encrypt_extensions() const;
    void clear_encrypt_extensions();
    static const int kEncryptExtensionsFieldNumber = 19;
    bool encrypt_extensions() const;
    void set_encrypt_extensions(bool value);

    // optional bool encrypt_sessions = 20;
    bool has_encrypt_sessions() const;
    void clear_encrypt_sessions();
    static const int kEncryptSessionsFieldNumber = 20;
    bool encrypt_sessions() const;
    void set_encrypt_sessions(bool value);

    // optional bool encrypt_apps = 21;
    bool has_encrypt_apps() const;
    void clear_encrypt_apps();
    static const int kEncryptAppsFieldNumber = 21;
    bool encrypt_apps() const;
    void set_encrypt_apps(bool value);

    // optional bool encrypt_search_engines = 22;
    bool has_encrypt_search_engines() const;
    void clear_encrypt_search_engines();
    static const int kEncryptSearchEnginesFieldNumber = 22;
    bool encrypt_search_engines() const;
    void set_encrypt_search_engines(bool value);

    // optional bool encrypt_everything = 24;
    bool has_encrypt_everything() const;
    void clear_encrypt_everything();
    static const int kEncryptEverythingFieldNumber = 24;
    bool encrypt_everything() const;
    void set_encrypt_everything(bool value);

    // optional bool encrypt_extension_settings = 25;
    bool has_encrypt_extension_settings() const;
    void clear_encrypt_extension_settings();
    static const int kEncryptExtensionSettingsFieldNumber = 25;
    bool encrypt_extension_settings() const;
    void set_encrypt_extension_settings(bool value);

    // optional bool encrypt_app_notifications = 26;
    bool has_encrypt_app_notifications() const;
    void clear_encrypt_app_notifications();
    static const int kEncryptAppNotificationsFieldNumber = 26;
    bool encrypt_app_notifications() const;
    void set_encrypt_app_notifications(bool value);

    // optional bool encrypt_app_settings = 27;
    bool has_encrypt_app_settings() const;
    void clear_encrypt_app_settings();
    static const int kEncryptAppSettingsFieldNumber = 27;
    bool encrypt_app_settings() const;
    void set_encrypt_app_settings(bool value);

    // optional bool sync_tab_favicons = 29;
    bool has_sync_tab_favicons() const;
    void clear_sync_tab_favicons();
    static const int kSyncTabFaviconsFieldNumber = 29;
    bool sync_tab_favicons() const;
    void set_sync_tab_favicons(bool value);

    // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
    bool has_passphrase_type() const;
    void clear_passphrase_type();
    static const int kPassphraseTypeFieldNumber = 30;
    ::sync_pb::NigoriSpecifics_PassphraseType passphrase_type() const;
    void set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value);

    // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
    bool has_keystore_decryptor_token() const;
    void clear_keystore_decryptor_token();
    static const int kKeystoreDecryptorTokenFieldNumber = 31;
    const ::sync_pb::EncryptedData& keystore_decryptor_token() const;
    ::sync_pb::EncryptedData* mutable_keystore_decryptor_token();
    ::sync_pb::EncryptedData* release_keystore_decryptor_token();
    void set_allocated_keystore_decryptor_token(::sync_pb::EncryptedData* keystore_decryptor_token);

    // optional int64 keystore_migration_time = 32;
    bool has_keystore_migration_time() const;
    void clear_keystore_migration_time();
    static const int kKeystoreMigrationTimeFieldNumber = 32;
    ::google::protobuf::int64 keystore_migration_time() const;
    void set_keystore_migration_time(::google::protobuf::int64 value);

    // optional int64 custom_passphrase_time = 33;
    bool has_custom_passphrase_time() const;
    void clear_custom_passphrase_time();
    static const int kCustomPassphraseTimeFieldNumber = 33;
    ::google::protobuf::int64 custom_passphrase_time() const;
    void set_custom_passphrase_time(::google::protobuf::int64 value);

    // optional bool encrypt_dictionary = 34;
    bool has_encrypt_dictionary() const;
    void clear_encrypt_dictionary();
    static const int kEncryptDictionaryFieldNumber = 34;
    bool encrypt_dictionary() const;
    void set_encrypt_dictionary(bool value);

    // optional bool encrypt_favicon_images = 35;
    bool has_encrypt_favicon_images() const;
    void clear_encrypt_favicon_images();
    static const int kEncryptFaviconImagesFieldNumber = 35;
    bool encrypt_favicon_images() const;
    void set_encrypt_favicon_images(bool value);

    // optional bool encrypt_favicon_tracking = 36;
    bool has_encrypt_favicon_tracking() const;
    void clear_encrypt_favicon_tracking();
    static const int kEncryptFaviconTrackingFieldNumber = 36;
    bool encrypt_favicon_tracking() const;
    void set_encrypt_favicon_tracking(bool value);

    // optional bool encrypt_articles = 37;
    bool has_encrypt_articles() const;
    void clear_encrypt_articles();
    static const int kEncryptArticlesFieldNumber = 37;
    bool encrypt_articles() const;
    void set_encrypt_articles(bool value);

    // optional bool encrypt_app_list = 38;
    bool has_encrypt_app_list() const;
    void clear_encrypt_app_list();
    static const int kEncryptAppListFieldNumber = 38;
    bool encrypt_app_list() const;
    void set_encrypt_app_list(bool value);

    // optional bool encrypt_autofill_wallet_metadata = 39;
    bool has_encrypt_autofill_wallet_metadata() const;
    void clear_encrypt_autofill_wallet_metadata();
    static const int kEncryptAutofillWalletMetadataFieldNumber = 39;
    bool encrypt_autofill_wallet_metadata() const;
    void set_encrypt_autofill_wallet_metadata(bool value);

    // optional bool server_only_was_missing_keystore_migration_time = 40;
    bool has_server_only_was_missing_keystore_migration_time() const;
    void clear_server_only_was_missing_keystore_migration_time();
    static const int kServerOnlyWasMissingKeystoreMigrationTimeFieldNumber = 40;
    bool server_only_was_missing_keystore_migration_time() const;
    void set_server_only_was_missing_keystore_migration_time(bool value);

    // optional bool encrypt_arc_package = 41;
    bool has_encrypt_arc_package() const;
    void clear_encrypt_arc_package();
    static const int kEncryptArcPackageFieldNumber = 41;
    bool encrypt_arc_package() const;
    void set_encrypt_arc_package(bool value);

    // optional bool encrypt_printers = 42;
    bool has_encrypt_printers() const;
    void clear_encrypt_printers();
    static const int kEncryptPrintersFieldNumber = 42;
    bool encrypt_printers() const;
    void set_encrypt_printers(bool value);

    // optional bool encrypt_reading_list = 43;
    bool has_encrypt_reading_list() const;
    void clear_encrypt_reading_list();
    static const int kEncryptReadingListFieldNumber = 43;
    bool encrypt_reading_list() const;
    void set_encrypt_reading_list(bool value);

    // @@protoc_insertion_point(class_scope:sync_pb.NigoriSpecifics)
private:
    inline void set_has_encryption_keybag();
    inline void clear_has_encryption_keybag();
    inline void set_has_keybag_is_frozen();
    inline void clear_has_keybag_is_frozen();
    inline void set_has_encrypt_bookmarks();
    inline void clear_has_encrypt_bookmarks();
    inline void set_has_encrypt_preferences();
    inline void clear_has_encrypt_preferences();
    inline void set_has_encrypt_autofill_profile();
    inline void clear_has_encrypt_autofill_profile();
    inline void set_has_encrypt_autofill();
    inline void clear_has_encrypt_autofill();
    inline void set_has_encrypt_themes();
    inline void clear_has_encrypt_themes();
    inline void set_has_encrypt_typed_urls();
    inline void clear_has_encrypt_typed_urls();
    inline void set_has_encrypt_extensions();
    inline void clear_has_encrypt_extensions();
    inline void set_has_encrypt_sessions();
    inline void clear_has_encrypt_sessions();
    inline void set_has_encrypt_apps();
    inline void clear_has_encrypt_apps();
    inline void set_has_encrypt_search_engines();
    inline void clear_has_encrypt_search_engines();
    inline void set_has_encrypt_everything();
    inline void clear_has_encrypt_everything();
    inline void set_has_encrypt_extension_settings();
    inline void clear_has_encrypt_extension_settings();
    inline void set_has_encrypt_app_notifications();
    inline void clear_has_encrypt_app_notifications();
    inline void set_has_encrypt_app_settings();
    inline void clear_has_encrypt_app_settings();
    inline void set_has_sync_tab_favicons();
    inline void clear_has_sync_tab_favicons();
    inline void set_has_passphrase_type();
    inline void clear_has_passphrase_type();
    inline void set_has_keystore_decryptor_token();
    inline void clear_has_keystore_decryptor_token();
    inline void set_has_keystore_migration_time();
    inline void clear_has_keystore_migration_time();
    inline void set_has_custom_passphrase_time();
    inline void clear_has_custom_passphrase_time();
    inline void set_has_encrypt_dictionary();
    inline void clear_has_encrypt_dictionary();
    inline void set_has_encrypt_favicon_images();
    inline void clear_has_encrypt_favicon_images();
    inline void set_has_encrypt_favicon_tracking();
    inline void clear_has_encrypt_favicon_tracking();
    inline void set_has_encrypt_articles();
    inline void clear_has_encrypt_articles();
    inline void set_has_encrypt_app_list();
    inline void clear_has_encrypt_app_list();
    inline void set_has_encrypt_autofill_wallet_metadata();
    inline void clear_has_encrypt_autofill_wallet_metadata();
    inline void set_has_server_only_was_missing_keystore_migration_time();
    inline void clear_has_server_only_was_missing_keystore_migration_time();
    inline void set_has_encrypt_arc_package();
    inline void clear_has_encrypt_arc_package();
    inline void set_has_encrypt_printers();
    inline void clear_has_encrypt_printers();
    inline void set_has_encrypt_reading_list();
    inline void clear_has_encrypt_reading_list();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::sync_pb::EncryptedData* encryption_keybag_;
    bool keybag_is_frozen_;
    bool encrypt_bookmarks_;
    bool encrypt_preferences_;
    bool encrypt_autofill_profile_;
    bool encrypt_autofill_;
    bool encrypt_themes_;
    bool encrypt_typed_urls_;
    bool encrypt_extensions_;
    bool encrypt_sessions_;
    bool encrypt_apps_;
    bool encrypt_search_engines_;
    bool encrypt_everything_;
    bool encrypt_extension_settings_;
    bool encrypt_app_notifications_;
    bool encrypt_app_settings_;
    bool sync_tab_favicons_;
    ::sync_pb::EncryptedData* keystore_decryptor_token_;
    ::google::protobuf::int64 keystore_migration_time_;
    ::google::protobuf::int64 custom_passphrase_time_;
    int passphrase_type_;
    bool encrypt_dictionary_;
    bool encrypt_favicon_images_;
    bool encrypt_favicon_tracking_;
    bool encrypt_articles_;
    bool encrypt_app_list_;
    bool encrypt_autofill_wallet_metadata_;
    bool server_only_was_missing_keystore_migration_time_;
    bool encrypt_arc_package_;
    bool encrypt_printers_;
    bool encrypt_reading_list_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void protobuf_AddDesc_nigori_5fspecifics_2eproto_impl();
#else
    friend void protobuf_AddDesc_nigori_5fspecifics_2eproto();
#endif
    friend void protobuf_AssignDesc_nigori_5fspecifics_2eproto();
    friend void protobuf_ShutdownFile_nigori_5fspecifics_2eproto();

    void InitAsDefaultInstance();
    static NigoriSpecifics* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NigoriKey

// optional string name = 1;
inline bool NigoriKey::has_name() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NigoriKey::set_has_name()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void NigoriKey::clear_has_name()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void NigoriKey::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
inline const ::std::string& NigoriKey::name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.name)
}
inline void NigoriKey::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.name)
}
inline void NigoriKey::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.name)
}
inline ::std::string* NigoriKey::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NigoriKey::release_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.name)
}

// optional bytes user_key = 2;
inline bool NigoriKey::has_user_key() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NigoriKey::set_has_user_key()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void NigoriKey::clear_has_user_key()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void NigoriKey::clear_user_key()
{
    user_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_user_key();
}
inline const ::std::string& NigoriKey::user_key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.user_key)
    return user_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_user_key(const ::std::string& value)
{
    set_has_user_key();
    user_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.user_key)
}
inline void NigoriKey::set_user_key(const char* value)
{
    set_has_user_key();
    user_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.user_key)
}
inline void NigoriKey::set_user_key(const void* value, size_t size)
{
    set_has_user_key();
    user_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.user_key)
}
inline ::std::string* NigoriKey::mutable_user_key()
{
    set_has_user_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.user_key)
    return user_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NigoriKey::release_user_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.user_key)
    clear_has_user_key();
    return user_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_allocated_user_key(::std::string* user_key)
{
    if (user_key != NULL) {
        set_has_user_key();
    } else {
        clear_has_user_key();
    }
    user_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.user_key)
}

// optional bytes encryption_key = 3;
inline bool NigoriKey::has_encryption_key() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NigoriKey::set_has_encryption_key()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void NigoriKey::clear_has_encryption_key()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void NigoriKey::clear_encryption_key()
{
    encryption_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_encryption_key();
}
inline const ::std::string& NigoriKey::encryption_key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.encryption_key)
    return encryption_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_encryption_key(const ::std::string& value)
{
    set_has_encryption_key();
    encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.encryption_key)
}
inline void NigoriKey::set_encryption_key(const char* value)
{
    set_has_encryption_key();
    encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.encryption_key)
}
inline void NigoriKey::set_encryption_key(const void* value, size_t size)
{
    set_has_encryption_key();
    encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.encryption_key)
}
inline ::std::string* NigoriKey::mutable_encryption_key()
{
    set_has_encryption_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.encryption_key)
    return encryption_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NigoriKey::release_encryption_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.encryption_key)
    clear_has_encryption_key();
    return encryption_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_allocated_encryption_key(::std::string* encryption_key)
{
    if (encryption_key != NULL) {
        set_has_encryption_key();
    } else {
        clear_has_encryption_key();
    }
    encryption_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.encryption_key)
}

// optional bytes mac_key = 4;
inline bool NigoriKey::has_mac_key() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NigoriKey::set_has_mac_key()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void NigoriKey::clear_has_mac_key()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void NigoriKey::clear_mac_key()
{
    mac_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_mac_key();
}
inline const ::std::string& NigoriKey::mac_key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.mac_key)
    return mac_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_mac_key(const ::std::string& value)
{
    set_has_mac_key();
    mac_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.mac_key)
}
inline void NigoriKey::set_mac_key(const char* value)
{
    set_has_mac_key();
    mac_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.mac_key)
}
inline void NigoriKey::set_mac_key(const void* value, size_t size)
{
    set_has_mac_key();
    mac_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.mac_key)
}
inline ::std::string* NigoriKey::mutable_mac_key()
{
    set_has_mac_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.mac_key)
    return mac_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NigoriKey::release_mac_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.mac_key)
    clear_has_mac_key();
    return mac_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NigoriKey::set_allocated_mac_key(::std::string* mac_key)
{
    if (mac_key != NULL) {
        set_has_mac_key();
    } else {
        clear_has_mac_key();
    }
    mac_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.mac_key)
}

// -------------------------------------------------------------------

// NigoriKeyBag

// repeated .sync_pb.NigoriKey key = 2;
inline int NigoriKeyBag::key_size() const
{
    return key_.size();
}
inline void NigoriKeyBag::clear_key()
{
    key_.Clear();
}
inline const ::sync_pb::NigoriKey& NigoriKeyBag::key(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriKeyBag.key)
    return key_.Get(index);
}
inline ::sync_pb::NigoriKey* NigoriKeyBag::mutable_key(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKeyBag.key)
    return key_.Mutable(index);
}
inline ::sync_pb::NigoriKey* NigoriKeyBag::add_key()
{
    // @@protoc_insertion_point(field_add:sync_pb.NigoriKeyBag.key)
    return key_.Add();
}
inline ::google::protobuf::RepeatedPtrField<::sync_pb::NigoriKey>*
NigoriKeyBag::mutable_key()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.NigoriKeyBag.key)
    return &key_;
}
inline const ::google::protobuf::RepeatedPtrField<::sync_pb::NigoriKey>&
NigoriKeyBag::key() const
{
    // @@protoc_insertion_point(field_list:sync_pb.NigoriKeyBag.key)
    return key_;
}

// -------------------------------------------------------------------

// NigoriSpecifics

// optional .sync_pb.EncryptedData encryption_keybag = 1;
inline bool NigoriSpecifics::has_encryption_keybag() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NigoriSpecifics::set_has_encryption_keybag()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void NigoriSpecifics::clear_has_encryption_keybag()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void NigoriSpecifics::clear_encryption_keybag()
{
    if (encryption_keybag_ != NULL)
        encryption_keybag_->::sync_pb::EncryptedData::Clear();
    clear_has_encryption_keybag();
}
inline const ::sync_pb::EncryptedData& NigoriSpecifics::encryption_keybag() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encryption_keybag)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return encryption_keybag_ != NULL ? *encryption_keybag_ : *default_instance().encryption_keybag_;
#else
    return encryption_keybag_ != NULL ? *encryption_keybag_ : *default_instance_->encryption_keybag_;
#endif
}
inline ::sync_pb::EncryptedData* NigoriSpecifics::mutable_encryption_keybag()
{
    set_has_encryption_keybag();
    if (encryption_keybag_ == NULL) {
        encryption_keybag_ = new ::sync_pb::EncryptedData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriSpecifics.encryption_keybag)
    return encryption_keybag_;
}
inline ::sync_pb::EncryptedData* NigoriSpecifics::release_encryption_keybag()
{
    // @@protoc_insertion_point(field_release:sync_pb.NigoriSpecifics.encryption_keybag)
    clear_has_encryption_keybag();
    ::sync_pb::EncryptedData* temp = encryption_keybag_;
    encryption_keybag_ = NULL;
    return temp;
}
inline void NigoriSpecifics::set_allocated_encryption_keybag(::sync_pb::EncryptedData* encryption_keybag)
{
    delete encryption_keybag_;
    encryption_keybag_ = encryption_keybag;
    if (encryption_keybag) {
        set_has_encryption_keybag();
    } else {
        clear_has_encryption_keybag();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriSpecifics.encryption_keybag)
}

// optional bool keybag_is_frozen = 2;
inline bool NigoriSpecifics::has_keybag_is_frozen() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NigoriSpecifics::set_has_keybag_is_frozen()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void NigoriSpecifics::clear_has_keybag_is_frozen()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void NigoriSpecifics::clear_keybag_is_frozen()
{
    keybag_is_frozen_ = false;
    clear_has_keybag_is_frozen();
}
inline bool NigoriSpecifics::keybag_is_frozen() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.keybag_is_frozen)
    return keybag_is_frozen_;
}
inline void NigoriSpecifics::set_keybag_is_frozen(bool value)
{
    set_has_keybag_is_frozen();
    keybag_is_frozen_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.keybag_is_frozen)
}

// optional bool encrypt_bookmarks = 13;
inline bool NigoriSpecifics::has_encrypt_bookmarks() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_bookmarks()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void NigoriSpecifics::clear_has_encrypt_bookmarks()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void NigoriSpecifics::clear_encrypt_bookmarks()
{
    encrypt_bookmarks_ = false;
    clear_has_encrypt_bookmarks();
}
inline bool NigoriSpecifics::encrypt_bookmarks() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_bookmarks)
    return encrypt_bookmarks_;
}
inline void NigoriSpecifics::set_encrypt_bookmarks(bool value)
{
    set_has_encrypt_bookmarks();
    encrypt_bookmarks_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_bookmarks)
}

// optional bool encrypt_preferences = 14;
inline bool NigoriSpecifics::has_encrypt_preferences() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_preferences()
{
    _has_bits_[0] |= 0x00000008u;
}
inline void NigoriSpecifics::clear_has_encrypt_preferences()
{
    _has_bits_[0] &= ~0x00000008u;
}
inline void NigoriSpecifics::clear_encrypt_preferences()
{
    encrypt_preferences_ = false;
    clear_has_encrypt_preferences();
}
inline bool NigoriSpecifics::encrypt_preferences() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_preferences)
    return encrypt_preferences_;
}
inline void NigoriSpecifics::set_encrypt_preferences(bool value)
{
    set_has_encrypt_preferences();
    encrypt_preferences_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_preferences)
}

// optional bool encrypt_autofill_profile = 15;
inline bool NigoriSpecifics::has_encrypt_autofill_profile() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_autofill_profile()
{
    _has_bits_[0] |= 0x00000010u;
}
inline void NigoriSpecifics::clear_has_encrypt_autofill_profile()
{
    _has_bits_[0] &= ~0x00000010u;
}
inline void NigoriSpecifics::clear_encrypt_autofill_profile()
{
    encrypt_autofill_profile_ = false;
    clear_has_encrypt_autofill_profile();
}
inline bool NigoriSpecifics::encrypt_autofill_profile() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_autofill_profile)
    return encrypt_autofill_profile_;
}
inline void NigoriSpecifics::set_encrypt_autofill_profile(bool value)
{
    set_has_encrypt_autofill_profile();
    encrypt_autofill_profile_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_autofill_profile)
}

// optional bool encrypt_autofill = 16;
inline bool NigoriSpecifics::has_encrypt_autofill() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_autofill()
{
    _has_bits_[0] |= 0x00000020u;
}
inline void NigoriSpecifics::clear_has_encrypt_autofill()
{
    _has_bits_[0] &= ~0x00000020u;
}
inline void NigoriSpecifics::clear_encrypt_autofill()
{
    encrypt_autofill_ = false;
    clear_has_encrypt_autofill();
}
inline bool NigoriSpecifics::encrypt_autofill() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_autofill)
    return encrypt_autofill_;
}
inline void NigoriSpecifics::set_encrypt_autofill(bool value)
{
    set_has_encrypt_autofill();
    encrypt_autofill_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_autofill)
}

// optional bool encrypt_themes = 17;
inline bool NigoriSpecifics::has_encrypt_themes() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_themes()
{
    _has_bits_[0] |= 0x00000040u;
}
inline void NigoriSpecifics::clear_has_encrypt_themes()
{
    _has_bits_[0] &= ~0x00000040u;
}
inline void NigoriSpecifics::clear_encrypt_themes()
{
    encrypt_themes_ = false;
    clear_has_encrypt_themes();
}
inline bool NigoriSpecifics::encrypt_themes() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_themes)
    return encrypt_themes_;
}
inline void NigoriSpecifics::set_encrypt_themes(bool value)
{
    set_has_encrypt_themes();
    encrypt_themes_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_themes)
}

// optional bool encrypt_typed_urls = 18;
inline bool NigoriSpecifics::has_encrypt_typed_urls() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_typed_urls()
{
    _has_bits_[0] |= 0x00000080u;
}
inline void NigoriSpecifics::clear_has_encrypt_typed_urls()
{
    _has_bits_[0] &= ~0x00000080u;
}
inline void NigoriSpecifics::clear_encrypt_typed_urls()
{
    encrypt_typed_urls_ = false;
    clear_has_encrypt_typed_urls();
}
inline bool NigoriSpecifics::encrypt_typed_urls() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_typed_urls)
    return encrypt_typed_urls_;
}
inline void NigoriSpecifics::set_encrypt_typed_urls(bool value)
{
    set_has_encrypt_typed_urls();
    encrypt_typed_urls_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_typed_urls)
}

// optional bool encrypt_extensions = 19;
inline bool NigoriSpecifics::has_encrypt_extensions() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_extensions()
{
    _has_bits_[0] |= 0x00000100u;
}
inline void NigoriSpecifics::clear_has_encrypt_extensions()
{
    _has_bits_[0] &= ~0x00000100u;
}
inline void NigoriSpecifics::clear_encrypt_extensions()
{
    encrypt_extensions_ = false;
    clear_has_encrypt_extensions();
}
inline bool NigoriSpecifics::encrypt_extensions() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_extensions)
    return encrypt_extensions_;
}
inline void NigoriSpecifics::set_encrypt_extensions(bool value)
{
    set_has_encrypt_extensions();
    encrypt_extensions_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_extensions)
}

// optional bool encrypt_sessions = 20;
inline bool NigoriSpecifics::has_encrypt_sessions() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_sessions()
{
    _has_bits_[0] |= 0x00000200u;
}
inline void NigoriSpecifics::clear_has_encrypt_sessions()
{
    _has_bits_[0] &= ~0x00000200u;
}
inline void NigoriSpecifics::clear_encrypt_sessions()
{
    encrypt_sessions_ = false;
    clear_has_encrypt_sessions();
}
inline bool NigoriSpecifics::encrypt_sessions() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_sessions)
    return encrypt_sessions_;
}
inline void NigoriSpecifics::set_encrypt_sessions(bool value)
{
    set_has_encrypt_sessions();
    encrypt_sessions_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_sessions)
}

// optional bool encrypt_apps = 21;
inline bool NigoriSpecifics::has_encrypt_apps() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_apps()
{
    _has_bits_[0] |= 0x00000400u;
}
inline void NigoriSpecifics::clear_has_encrypt_apps()
{
    _has_bits_[0] &= ~0x00000400u;
}
inline void NigoriSpecifics::clear_encrypt_apps()
{
    encrypt_apps_ = false;
    clear_has_encrypt_apps();
}
inline bool NigoriSpecifics::encrypt_apps() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_apps)
    return encrypt_apps_;
}
inline void NigoriSpecifics::set_encrypt_apps(bool value)
{
    set_has_encrypt_apps();
    encrypt_apps_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_apps)
}

// optional bool encrypt_search_engines = 22;
inline bool NigoriSpecifics::has_encrypt_search_engines() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_search_engines()
{
    _has_bits_[0] |= 0x00000800u;
}
inline void NigoriSpecifics::clear_has_encrypt_search_engines()
{
    _has_bits_[0] &= ~0x00000800u;
}
inline void NigoriSpecifics::clear_encrypt_search_engines()
{
    encrypt_search_engines_ = false;
    clear_has_encrypt_search_engines();
}
inline bool NigoriSpecifics::encrypt_search_engines() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_search_engines)
    return encrypt_search_engines_;
}
inline void NigoriSpecifics::set_encrypt_search_engines(bool value)
{
    set_has_encrypt_search_engines();
    encrypt_search_engines_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_search_engines)
}

// optional bool encrypt_everything = 24;
inline bool NigoriSpecifics::has_encrypt_everything() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_everything()
{
    _has_bits_[0] |= 0x00001000u;
}
inline void NigoriSpecifics::clear_has_encrypt_everything()
{
    _has_bits_[0] &= ~0x00001000u;
}
inline void NigoriSpecifics::clear_encrypt_everything()
{
    encrypt_everything_ = false;
    clear_has_encrypt_everything();
}
inline bool NigoriSpecifics::encrypt_everything() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_everything)
    return encrypt_everything_;
}
inline void NigoriSpecifics::set_encrypt_everything(bool value)
{
    set_has_encrypt_everything();
    encrypt_everything_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_everything)
}

// optional bool encrypt_extension_settings = 25;
inline bool NigoriSpecifics::has_encrypt_extension_settings() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_extension_settings()
{
    _has_bits_[0] |= 0x00002000u;
}
inline void NigoriSpecifics::clear_has_encrypt_extension_settings()
{
    _has_bits_[0] &= ~0x00002000u;
}
inline void NigoriSpecifics::clear_encrypt_extension_settings()
{
    encrypt_extension_settings_ = false;
    clear_has_encrypt_extension_settings();
}
inline bool NigoriSpecifics::encrypt_extension_settings() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_extension_settings)
    return encrypt_extension_settings_;
}
inline void NigoriSpecifics::set_encrypt_extension_settings(bool value)
{
    set_has_encrypt_extension_settings();
    encrypt_extension_settings_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_extension_settings)
}

// optional bool encrypt_app_notifications = 26;
inline bool NigoriSpecifics::has_encrypt_app_notifications() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_app_notifications()
{
    _has_bits_[0] |= 0x00004000u;
}
inline void NigoriSpecifics::clear_has_encrypt_app_notifications()
{
    _has_bits_[0] &= ~0x00004000u;
}
inline void NigoriSpecifics::clear_encrypt_app_notifications()
{
    encrypt_app_notifications_ = false;
    clear_has_encrypt_app_notifications();
}
inline bool NigoriSpecifics::encrypt_app_notifications() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_app_notifications)
    return encrypt_app_notifications_;
}
inline void NigoriSpecifics::set_encrypt_app_notifications(bool value)
{
    set_has_encrypt_app_notifications();
    encrypt_app_notifications_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_app_notifications)
}

// optional bool encrypt_app_settings = 27;
inline bool NigoriSpecifics::has_encrypt_app_settings() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_app_settings()
{
    _has_bits_[0] |= 0x00008000u;
}
inline void NigoriSpecifics::clear_has_encrypt_app_settings()
{
    _has_bits_[0] &= ~0x00008000u;
}
inline void NigoriSpecifics::clear_encrypt_app_settings()
{
    encrypt_app_settings_ = false;
    clear_has_encrypt_app_settings();
}
inline bool NigoriSpecifics::encrypt_app_settings() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_app_settings)
    return encrypt_app_settings_;
}
inline void NigoriSpecifics::set_encrypt_app_settings(bool value)
{
    set_has_encrypt_app_settings();
    encrypt_app_settings_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_app_settings)
}

// optional bool sync_tab_favicons = 29;
inline bool NigoriSpecifics::has_sync_tab_favicons() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NigoriSpecifics::set_has_sync_tab_favicons()
{
    _has_bits_[0] |= 0x00010000u;
}
inline void NigoriSpecifics::clear_has_sync_tab_favicons()
{
    _has_bits_[0] &= ~0x00010000u;
}
inline void NigoriSpecifics::clear_sync_tab_favicons()
{
    sync_tab_favicons_ = false;
    clear_has_sync_tab_favicons();
}
inline bool NigoriSpecifics::sync_tab_favicons() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.sync_tab_favicons)
    return sync_tab_favicons_;
}
inline void NigoriSpecifics::set_sync_tab_favicons(bool value)
{
    set_has_sync_tab_favicons();
    sync_tab_favicons_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.sync_tab_favicons)
}

// optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
inline bool NigoriSpecifics::has_passphrase_type() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NigoriSpecifics::set_has_passphrase_type()
{
    _has_bits_[0] |= 0x00020000u;
}
inline void NigoriSpecifics::clear_has_passphrase_type()
{
    _has_bits_[0] &= ~0x00020000u;
}
inline void NigoriSpecifics::clear_passphrase_type()
{
    passphrase_type_ = 1;
    clear_has_passphrase_type();
}
inline ::sync_pb::NigoriSpecifics_PassphraseType NigoriSpecifics::passphrase_type() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.passphrase_type)
    return static_cast<::sync_pb::NigoriSpecifics_PassphraseType>(passphrase_type_);
}
inline void NigoriSpecifics::set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value)
{
    assert(::sync_pb::NigoriSpecifics_PassphraseType_IsValid(value));
    set_has_passphrase_type();
    passphrase_type_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.passphrase_type)
}

// optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
inline bool NigoriSpecifics::has_keystore_decryptor_token() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NigoriSpecifics::set_has_keystore_decryptor_token()
{
    _has_bits_[0] |= 0x00040000u;
}
inline void NigoriSpecifics::clear_has_keystore_decryptor_token()
{
    _has_bits_[0] &= ~0x00040000u;
}
inline void NigoriSpecifics::clear_keystore_decryptor_token()
{
    if (keystore_decryptor_token_ != NULL)
        keystore_decryptor_token_->::sync_pb::EncryptedData::Clear();
    clear_has_keystore_decryptor_token();
}
inline const ::sync_pb::EncryptedData& NigoriSpecifics::keystore_decryptor_token() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.keystore_decryptor_token)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return keystore_decryptor_token_ != NULL ? *keystore_decryptor_token_ : *default_instance().keystore_decryptor_token_;
#else
    return keystore_decryptor_token_ != NULL ? *keystore_decryptor_token_ : *default_instance_->keystore_decryptor_token_;
#endif
}
inline ::sync_pb::EncryptedData* NigoriSpecifics::mutable_keystore_decryptor_token()
{
    set_has_keystore_decryptor_token();
    if (keystore_decryptor_token_ == NULL) {
        keystore_decryptor_token_ = new ::sync_pb::EncryptedData;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.NigoriSpecifics.keystore_decryptor_token)
    return keystore_decryptor_token_;
}
inline ::sync_pb::EncryptedData* NigoriSpecifics::release_keystore_decryptor_token()
{
    // @@protoc_insertion_point(field_release:sync_pb.NigoriSpecifics.keystore_decryptor_token)
    clear_has_keystore_decryptor_token();
    ::sync_pb::EncryptedData* temp = keystore_decryptor_token_;
    keystore_decryptor_token_ = NULL;
    return temp;
}
inline void NigoriSpecifics::set_allocated_keystore_decryptor_token(::sync_pb::EncryptedData* keystore_decryptor_token)
{
    delete keystore_decryptor_token_;
    keystore_decryptor_token_ = keystore_decryptor_token;
    if (keystore_decryptor_token) {
        set_has_keystore_decryptor_token();
    } else {
        clear_has_keystore_decryptor_token();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriSpecifics.keystore_decryptor_token)
}

// optional int64 keystore_migration_time = 32;
inline bool NigoriSpecifics::has_keystore_migration_time() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NigoriSpecifics::set_has_keystore_migration_time()
{
    _has_bits_[0] |= 0x00080000u;
}
inline void NigoriSpecifics::clear_has_keystore_migration_time()
{
    _has_bits_[0] &= ~0x00080000u;
}
inline void NigoriSpecifics::clear_keystore_migration_time()
{
    keystore_migration_time_ = GOOGLE_LONGLONG(0);
    clear_has_keystore_migration_time();
}
inline ::google::protobuf::int64 NigoriSpecifics::keystore_migration_time() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.keystore_migration_time)
    return keystore_migration_time_;
}
inline void NigoriSpecifics::set_keystore_migration_time(::google::protobuf::int64 value)
{
    set_has_keystore_migration_time();
    keystore_migration_time_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.keystore_migration_time)
}

// optional int64 custom_passphrase_time = 33;
inline bool NigoriSpecifics::has_custom_passphrase_time() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NigoriSpecifics::set_has_custom_passphrase_time()
{
    _has_bits_[0] |= 0x00100000u;
}
inline void NigoriSpecifics::clear_has_custom_passphrase_time()
{
    _has_bits_[0] &= ~0x00100000u;
}
inline void NigoriSpecifics::clear_custom_passphrase_time()
{
    custom_passphrase_time_ = GOOGLE_LONGLONG(0);
    clear_has_custom_passphrase_time();
}
inline ::google::protobuf::int64 NigoriSpecifics::custom_passphrase_time() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.custom_passphrase_time)
    return custom_passphrase_time_;
}
inline void NigoriSpecifics::set_custom_passphrase_time(::google::protobuf::int64 value)
{
    set_has_custom_passphrase_time();
    custom_passphrase_time_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.custom_passphrase_time)
}

// optional bool encrypt_dictionary = 34;
inline bool NigoriSpecifics::has_encrypt_dictionary() const
{
    return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_dictionary()
{
    _has_bits_[0] |= 0x00200000u;
}
inline void NigoriSpecifics::clear_has_encrypt_dictionary()
{
    _has_bits_[0] &= ~0x00200000u;
}
inline void NigoriSpecifics::clear_encrypt_dictionary()
{
    encrypt_dictionary_ = false;
    clear_has_encrypt_dictionary();
}
inline bool NigoriSpecifics::encrypt_dictionary() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_dictionary)
    return encrypt_dictionary_;
}
inline void NigoriSpecifics::set_encrypt_dictionary(bool value)
{
    set_has_encrypt_dictionary();
    encrypt_dictionary_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_dictionary)
}

// optional bool encrypt_favicon_images = 35;
inline bool NigoriSpecifics::has_encrypt_favicon_images() const
{
    return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_favicon_images()
{
    _has_bits_[0] |= 0x00400000u;
}
inline void NigoriSpecifics::clear_has_encrypt_favicon_images()
{
    _has_bits_[0] &= ~0x00400000u;
}
inline void NigoriSpecifics::clear_encrypt_favicon_images()
{
    encrypt_favicon_images_ = false;
    clear_has_encrypt_favicon_images();
}
inline bool NigoriSpecifics::encrypt_favicon_images() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_favicon_images)
    return encrypt_favicon_images_;
}
inline void NigoriSpecifics::set_encrypt_favicon_images(bool value)
{
    set_has_encrypt_favicon_images();
    encrypt_favicon_images_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_favicon_images)
}

// optional bool encrypt_favicon_tracking = 36;
inline bool NigoriSpecifics::has_encrypt_favicon_tracking() const
{
    return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_favicon_tracking()
{
    _has_bits_[0] |= 0x00800000u;
}
inline void NigoriSpecifics::clear_has_encrypt_favicon_tracking()
{
    _has_bits_[0] &= ~0x00800000u;
}
inline void NigoriSpecifics::clear_encrypt_favicon_tracking()
{
    encrypt_favicon_tracking_ = false;
    clear_has_encrypt_favicon_tracking();
}
inline bool NigoriSpecifics::encrypt_favicon_tracking() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_favicon_tracking)
    return encrypt_favicon_tracking_;
}
inline void NigoriSpecifics::set_encrypt_favicon_tracking(bool value)
{
    set_has_encrypt_favicon_tracking();
    encrypt_favicon_tracking_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_favicon_tracking)
}

// optional bool encrypt_articles = 37;
inline bool NigoriSpecifics::has_encrypt_articles() const
{
    return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_articles()
{
    _has_bits_[0] |= 0x01000000u;
}
inline void NigoriSpecifics::clear_has_encrypt_articles()
{
    _has_bits_[0] &= ~0x01000000u;
}
inline void NigoriSpecifics::clear_encrypt_articles()
{
    encrypt_articles_ = false;
    clear_has_encrypt_articles();
}
inline bool NigoriSpecifics::encrypt_articles() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_articles)
    return encrypt_articles_;
}
inline void NigoriSpecifics::set_encrypt_articles(bool value)
{
    set_has_encrypt_articles();
    encrypt_articles_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_articles)
}

// optional bool encrypt_app_list = 38;
inline bool NigoriSpecifics::has_encrypt_app_list() const
{
    return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_app_list()
{
    _has_bits_[0] |= 0x02000000u;
}
inline void NigoriSpecifics::clear_has_encrypt_app_list()
{
    _has_bits_[0] &= ~0x02000000u;
}
inline void NigoriSpecifics::clear_encrypt_app_list()
{
    encrypt_app_list_ = false;
    clear_has_encrypt_app_list();
}
inline bool NigoriSpecifics::encrypt_app_list() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_app_list)
    return encrypt_app_list_;
}
inline void NigoriSpecifics::set_encrypt_app_list(bool value)
{
    set_has_encrypt_app_list();
    encrypt_app_list_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_app_list)
}

// optional bool encrypt_autofill_wallet_metadata = 39;
inline bool NigoriSpecifics::has_encrypt_autofill_wallet_metadata() const
{
    return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_autofill_wallet_metadata()
{
    _has_bits_[0] |= 0x04000000u;
}
inline void NigoriSpecifics::clear_has_encrypt_autofill_wallet_metadata()
{
    _has_bits_[0] &= ~0x04000000u;
}
inline void NigoriSpecifics::clear_encrypt_autofill_wallet_metadata()
{
    encrypt_autofill_wallet_metadata_ = false;
    clear_has_encrypt_autofill_wallet_metadata();
}
inline bool NigoriSpecifics::encrypt_autofill_wallet_metadata() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_autofill_wallet_metadata)
    return encrypt_autofill_wallet_metadata_;
}
inline void NigoriSpecifics::set_encrypt_autofill_wallet_metadata(bool value)
{
    set_has_encrypt_autofill_wallet_metadata();
    encrypt_autofill_wallet_metadata_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_autofill_wallet_metadata)
}

// optional bool server_only_was_missing_keystore_migration_time = 40;
inline bool NigoriSpecifics::has_server_only_was_missing_keystore_migration_time() const
{
    return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void NigoriSpecifics::set_has_server_only_was_missing_keystore_migration_time()
{
    _has_bits_[0] |= 0x08000000u;
}
inline void NigoriSpecifics::clear_has_server_only_was_missing_keystore_migration_time()
{
    _has_bits_[0] &= ~0x08000000u;
}
inline void NigoriSpecifics::clear_server_only_was_missing_keystore_migration_time()
{
    server_only_was_missing_keystore_migration_time_ = false;
    clear_has_server_only_was_missing_keystore_migration_time();
}
inline bool NigoriSpecifics::server_only_was_missing_keystore_migration_time() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.server_only_was_missing_keystore_migration_time)
    return server_only_was_missing_keystore_migration_time_;
}
inline void NigoriSpecifics::set_server_only_was_missing_keystore_migration_time(bool value)
{
    set_has_server_only_was_missing_keystore_migration_time();
    server_only_was_missing_keystore_migration_time_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.server_only_was_missing_keystore_migration_time)
}

// optional bool encrypt_arc_package = 41;
inline bool NigoriSpecifics::has_encrypt_arc_package() const
{
    return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_arc_package()
{
    _has_bits_[0] |= 0x10000000u;
}
inline void NigoriSpecifics::clear_has_encrypt_arc_package()
{
    _has_bits_[0] &= ~0x10000000u;
}
inline void NigoriSpecifics::clear_encrypt_arc_package()
{
    encrypt_arc_package_ = false;
    clear_has_encrypt_arc_package();
}
inline bool NigoriSpecifics::encrypt_arc_package() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_arc_package)
    return encrypt_arc_package_;
}
inline void NigoriSpecifics::set_encrypt_arc_package(bool value)
{
    set_has_encrypt_arc_package();
    encrypt_arc_package_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_arc_package)
}

// optional bool encrypt_printers = 42;
inline bool NigoriSpecifics::has_encrypt_printers() const
{
    return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_printers()
{
    _has_bits_[0] |= 0x20000000u;
}
inline void NigoriSpecifics::clear_has_encrypt_printers()
{
    _has_bits_[0] &= ~0x20000000u;
}
inline void NigoriSpecifics::clear_encrypt_printers()
{
    encrypt_printers_ = false;
    clear_has_encrypt_printers();
}
inline bool NigoriSpecifics::encrypt_printers() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_printers)
    return encrypt_printers_;
}
inline void NigoriSpecifics::set_encrypt_printers(bool value)
{
    set_has_encrypt_printers();
    encrypt_printers_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_printers)
}

// optional bool encrypt_reading_list = 43;
inline bool NigoriSpecifics::has_encrypt_reading_list() const
{
    return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void NigoriSpecifics::set_has_encrypt_reading_list()
{
    _has_bits_[0] |= 0x40000000u;
}
inline void NigoriSpecifics::clear_has_encrypt_reading_list()
{
    _has_bits_[0] &= ~0x40000000u;
}
inline void NigoriSpecifics::clear_encrypt_reading_list()
{
    encrypt_reading_list_ = false;
    clear_has_encrypt_reading_list();
}
inline bool NigoriSpecifics::encrypt_reading_list() const
{
    // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_reading_list)
    return encrypt_reading_list_;
}
inline void NigoriSpecifics::set_encrypt_reading_list(bool value)
{
    set_has_encrypt_reading_list();
    encrypt_reading_list_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_reading_list)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

#ifndef SWIG
namespace google {
namespace protobuf {

    template <>
    struct is_proto_enum<::sync_pb::NigoriSpecifics_PassphraseType> : ::google::protobuf::internal::true_type {
    };

} // namespace protobuf
} // namespace google
#endif // SWIG

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_nigori_5fspecifics_2eproto__INCLUDED
