// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: managed_user_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "managed_user_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_managed_5fuser_5fspecifics_2eproto()
{
    delete ManagedUserSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ManagedUserSpecifics::default_instance_ = new ManagedUserSpecifics();
    ManagedUserSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_managed_5fuser_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto_once_);
void protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_managed_5fuser_5fspecifics_2eproto {
    StaticDescriptorInitializer_managed_5fuser_5fspecifics_2eproto()
    {
        protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto();
    }
} static_descriptor_initializer_managed_5fuser_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForManagedUserSpecifics(
    ManagedUserSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagedUserSpecifics::kIdFieldNumber;
const int ManagedUserSpecifics::kNameFieldNumber;
const int ManagedUserSpecifics::kAcknowledgedFieldNumber;
const int ManagedUserSpecifics::kMasterKeyFieldNumber;
const int ManagedUserSpecifics::kChromeAvatarFieldNumber;
const int ManagedUserSpecifics::kChromeosAvatarFieldNumber;
const int ManagedUserSpecifics::kPasswordSignatureKeyFieldNumber;
const int ManagedUserSpecifics::kPasswordEncryptionKeyFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagedUserSpecifics::ManagedUserSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ManagedUserSpecifics)
}

void ManagedUserSpecifics::InitAsDefaultInstance()
{
}

ManagedUserSpecifics::ManagedUserSpecifics(const ManagedUserSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ManagedUserSpecifics)
}

void ManagedUserSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    acknowledged_ = false;
    master_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    chrome_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    chromeos_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_signature_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagedUserSpecifics::~ManagedUserSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.ManagedUserSpecifics)
    SharedDtor();
}

void ManagedUserSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    master_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    chrome_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    chromeos_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_signature_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_encryption_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ManagedUserSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ManagedUserSpecifics& ManagedUserSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

ManagedUserSpecifics* ManagedUserSpecifics::default_instance_ = NULL;

ManagedUserSpecifics* ManagedUserSpecifics::New(::google::protobuf::Arena* arena) const
{
    ManagedUserSpecifics* n = new ManagedUserSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ManagedUserSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.ManagedUserSpecifics)
    if (_has_bits_[0 / 32] & 255u) {
        if (has_id()) {
            id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        acknowledged_ = false;
        if (has_master_key()) {
            master_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_chrome_avatar()) {
            chrome_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_chromeos_avatar()) {
            chromeos_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_password_signature_key()) {
            password_signature_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_password_encryption_key()) {
            password_encryption_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ManagedUserSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForManagedUserSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ManagedUserSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_name;
            break;
        }

        // optional string name = 2;
        case 2: {
            if (tag == 18) {
            parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_acknowledged;
            break;
        }

        // optional bool acknowledged = 3 [default = false];
        case 3: {
            if (tag == 24) {
            parse_acknowledged:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &acknowledged_)));
                set_has_acknowledged();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_master_key;
            break;
        }

        // optional string master_key = 4;
        case 4: {
            if (tag == 34) {
            parse_master_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_master_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_chrome_avatar;
            break;
        }

        // optional string chrome_avatar = 5;
        case 5: {
            if (tag == 42) {
            parse_chrome_avatar:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_chrome_avatar()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_chromeos_avatar;
            break;
        }

        // optional string chromeos_avatar = 6;
        case 6: {
            if (tag == 50) {
            parse_chromeos_avatar:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_chromeos_avatar()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_password_signature_key;
            break;
        }

        // optional string password_signature_key = 7;
        case 7: {
            if (tag == 58) {
            parse_password_signature_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_password_signature_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_password_encryption_key;
            break;
        }

        // optional string password_encryption_key = 8;
        case 8: {
            if (tag == 66) {
            parse_password_encryption_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_password_encryption_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ManagedUserSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ManagedUserSpecifics)
    return false;
#undef DO_
}

void ManagedUserSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ManagedUserSpecifics)
    // optional string id = 1;
    if (has_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->id(), output);
    }

    // optional string name = 2;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->name(), output);
    }

    // optional bool acknowledged = 3 [default = false];
    if (has_acknowledged()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->acknowledged(), output);
    }

    // optional string master_key = 4;
    if (has_master_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->master_key(), output);
    }

    // optional string chrome_avatar = 5;
    if (has_chrome_avatar()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->chrome_avatar(), output);
    }

    // optional string chromeos_avatar = 6;
    if (has_chromeos_avatar()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            6, this->chromeos_avatar(), output);
    }

    // optional string password_signature_key = 7;
    if (has_password_signature_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            7, this->password_signature_key(), output);
    }

    // optional string password_encryption_key = 8;
    if (has_password_encryption_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->password_encryption_key(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ManagedUserSpecifics)
}

int ManagedUserSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ManagedUserSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional string id = 1;
        if (has_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->id());
        }

        // optional string name = 2;
        if (has_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
        }

        // optional bool acknowledged = 3 [default = false];
        if (has_acknowledged()) {
            total_size += 1 + 1;
        }

        // optional string master_key = 4;
        if (has_master_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->master_key());
        }

        // optional string chrome_avatar = 5;
        if (has_chrome_avatar()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->chrome_avatar());
        }

        // optional string chromeos_avatar = 6;
        if (has_chromeos_avatar()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->chromeos_avatar());
        }

        // optional string password_signature_key = 7;
        if (has_password_signature_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->password_signature_key());
        }

        // optional string password_encryption_key = 8;
        if (has_password_encryption_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->password_encryption_key());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ManagedUserSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ManagedUserSpecifics*>(&from));
}

void ManagedUserSpecifics::MergeFrom(const ManagedUserSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ManagedUserSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_id()) {
            set_has_id();
            id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
        }
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_acknowledged()) {
            set_acknowledged(from.acknowledged());
        }
        if (from.has_master_key()) {
            set_has_master_key();
            master_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_key_);
        }
        if (from.has_chrome_avatar()) {
            set_has_chrome_avatar();
            chrome_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_avatar_);
        }
        if (from.has_chromeos_avatar()) {
            set_has_chromeos_avatar();
            chromeos_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chromeos_avatar_);
        }
        if (from.has_password_signature_key()) {
            set_has_password_signature_key();
            password_signature_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_signature_key_);
        }
        if (from.has_password_encryption_key()) {
            set_has_password_encryption_key();
            password_encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_encryption_key_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ManagedUserSpecifics::CopyFrom(const ManagedUserSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ManagedUserSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ManagedUserSpecifics::IsInitialized() const
{

    return true;
}

void ManagedUserSpecifics::Swap(ManagedUserSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ManagedUserSpecifics::InternalSwap(ManagedUserSpecifics* other)
{
    id_.Swap(&other->id_);
    name_.Swap(&other->name_);
    std::swap(acknowledged_, other->acknowledged_);
    master_key_.Swap(&other->master_key_);
    chrome_avatar_.Swap(&other->chrome_avatar_);
    chromeos_avatar_.Swap(&other->chromeos_avatar_);
    password_signature_key_.Swap(&other->password_signature_key_);
    password_encryption_key_.Swap(&other->password_encryption_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ManagedUserSpecifics::GetTypeName() const
{
    return "sync_pb.ManagedUserSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagedUserSpecifics

// optional string id = 1;
bool ManagedUserSpecifics::has_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManagedUserSpecifics::set_has_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void ManagedUserSpecifics::clear_has_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ManagedUserSpecifics::clear_id()
{
    id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
}
const ::std::string& ManagedUserSpecifics::id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.id)
    return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_id(const ::std::string& value)
{
    set_has_id();
    id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.id)
}
void ManagedUserSpecifics::set_id(const char* value)
{
    set_has_id();
    id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.id)
}
void ManagedUserSpecifics::set_id(const char* value, size_t size)
{
    set_has_id();
    id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.id)
}
::std::string* ManagedUserSpecifics::mutable_id()
{
    set_has_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.id)
    return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.id)
    clear_has_id();
    return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_id(::std::string* id)
{
    if (id != NULL) {
        set_has_id();
    } else {
        clear_has_id();
    }
    id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.id)
}

// optional string name = 2;
bool ManagedUserSpecifics::has_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManagedUserSpecifics::set_has_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void ManagedUserSpecifics::clear_has_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ManagedUserSpecifics::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& ManagedUserSpecifics::name() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.name)
}
void ManagedUserSpecifics::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.name)
}
void ManagedUserSpecifics::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.name)
}
::std::string* ManagedUserSpecifics::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_name()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.name)
}

// optional bool acknowledged = 3 [default = false];
bool ManagedUserSpecifics::has_acknowledged() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManagedUserSpecifics::set_has_acknowledged()
{
    _has_bits_[0] |= 0x00000004u;
}
void ManagedUserSpecifics::clear_has_acknowledged()
{
    _has_bits_[0] &= ~0x00000004u;
}
void ManagedUserSpecifics::clear_acknowledged()
{
    acknowledged_ = false;
    clear_has_acknowledged();
}
bool ManagedUserSpecifics::acknowledged() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.acknowledged)
    return acknowledged_;
}
void ManagedUserSpecifics::set_acknowledged(bool value)
{
    set_has_acknowledged();
    acknowledged_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.acknowledged)
}

// optional string master_key = 4;
bool ManagedUserSpecifics::has_master_key() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManagedUserSpecifics::set_has_master_key()
{
    _has_bits_[0] |= 0x00000008u;
}
void ManagedUserSpecifics::clear_has_master_key()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ManagedUserSpecifics::clear_master_key()
{
    master_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_master_key();
}
const ::std::string& ManagedUserSpecifics::master_key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.master_key)
    return master_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_master_key(const ::std::string& value)
{
    set_has_master_key();
    master_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.master_key)
}
void ManagedUserSpecifics::set_master_key(const char* value)
{
    set_has_master_key();
    master_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.master_key)
}
void ManagedUserSpecifics::set_master_key(const char* value, size_t size)
{
    set_has_master_key();
    master_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.master_key)
}
::std::string* ManagedUserSpecifics::mutable_master_key()
{
    set_has_master_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.master_key)
    return master_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_master_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.master_key)
    clear_has_master_key();
    return master_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_master_key(::std::string* master_key)
{
    if (master_key != NULL) {
        set_has_master_key();
    } else {
        clear_has_master_key();
    }
    master_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.master_key)
}

// optional string chrome_avatar = 5;
bool ManagedUserSpecifics::has_chrome_avatar() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManagedUserSpecifics::set_has_chrome_avatar()
{
    _has_bits_[0] |= 0x00000010u;
}
void ManagedUserSpecifics::clear_has_chrome_avatar()
{
    _has_bits_[0] &= ~0x00000010u;
}
void ManagedUserSpecifics::clear_chrome_avatar()
{
    chrome_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_chrome_avatar();
}
const ::std::string& ManagedUserSpecifics::chrome_avatar() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.chrome_avatar)
    return chrome_avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_chrome_avatar(const ::std::string& value)
{
    set_has_chrome_avatar();
    chrome_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
void ManagedUserSpecifics::set_chrome_avatar(const char* value)
{
    set_has_chrome_avatar();
    chrome_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
void ManagedUserSpecifics::set_chrome_avatar(const char* value, size_t size)
{
    set_has_chrome_avatar();
    chrome_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
::std::string* ManagedUserSpecifics::mutable_chrome_avatar()
{
    set_has_chrome_avatar();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.chrome_avatar)
    return chrome_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_chrome_avatar()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.chrome_avatar)
    clear_has_chrome_avatar();
    return chrome_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_chrome_avatar(::std::string* chrome_avatar)
{
    if (chrome_avatar != NULL) {
        set_has_chrome_avatar();
    } else {
        clear_has_chrome_avatar();
    }
    chrome_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_avatar);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.chrome_avatar)
}

// optional string chromeos_avatar = 6;
bool ManagedUserSpecifics::has_chromeos_avatar() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManagedUserSpecifics::set_has_chromeos_avatar()
{
    _has_bits_[0] |= 0x00000020u;
}
void ManagedUserSpecifics::clear_has_chromeos_avatar()
{
    _has_bits_[0] &= ~0x00000020u;
}
void ManagedUserSpecifics::clear_chromeos_avatar()
{
    chromeos_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_chromeos_avatar();
}
const ::std::string& ManagedUserSpecifics::chromeos_avatar() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.chromeos_avatar)
    return chromeos_avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_chromeos_avatar(const ::std::string& value)
{
    set_has_chromeos_avatar();
    chromeos_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
void ManagedUserSpecifics::set_chromeos_avatar(const char* value)
{
    set_has_chromeos_avatar();
    chromeos_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
void ManagedUserSpecifics::set_chromeos_avatar(const char* value, size_t size)
{
    set_has_chromeos_avatar();
    chromeos_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
::std::string* ManagedUserSpecifics::mutable_chromeos_avatar()
{
    set_has_chromeos_avatar();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.chromeos_avatar)
    return chromeos_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_chromeos_avatar()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.chromeos_avatar)
    clear_has_chromeos_avatar();
    return chromeos_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_chromeos_avatar(::std::string* chromeos_avatar)
{
    if (chromeos_avatar != NULL) {
        set_has_chromeos_avatar();
    } else {
        clear_has_chromeos_avatar();
    }
    chromeos_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chromeos_avatar);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}

// optional string password_signature_key = 7;
bool ManagedUserSpecifics::has_password_signature_key() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManagedUserSpecifics::set_has_password_signature_key()
{
    _has_bits_[0] |= 0x00000040u;
}
void ManagedUserSpecifics::clear_has_password_signature_key()
{
    _has_bits_[0] &= ~0x00000040u;
}
void ManagedUserSpecifics::clear_password_signature_key()
{
    password_signature_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_password_signature_key();
}
const ::std::string& ManagedUserSpecifics::password_signature_key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.password_signature_key)
    return password_signature_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_password_signature_key(const ::std::string& value)
{
    set_has_password_signature_key();
    password_signature_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.password_signature_key)
}
void ManagedUserSpecifics::set_password_signature_key(const char* value)
{
    set_has_password_signature_key();
    password_signature_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.password_signature_key)
}
void ManagedUserSpecifics::set_password_signature_key(const char* value, size_t size)
{
    set_has_password_signature_key();
    password_signature_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.password_signature_key)
}
::std::string* ManagedUserSpecifics::mutable_password_signature_key()
{
    set_has_password_signature_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.password_signature_key)
    return password_signature_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_password_signature_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.password_signature_key)
    clear_has_password_signature_key();
    return password_signature_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_password_signature_key(::std::string* password_signature_key)
{
    if (password_signature_key != NULL) {
        set_has_password_signature_key();
    } else {
        clear_has_password_signature_key();
    }
    password_signature_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_signature_key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.password_signature_key)
}

// optional string password_encryption_key = 8;
bool ManagedUserSpecifics::has_password_encryption_key() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManagedUserSpecifics::set_has_password_encryption_key()
{
    _has_bits_[0] |= 0x00000080u;
}
void ManagedUserSpecifics::clear_has_password_encryption_key()
{
    _has_bits_[0] &= ~0x00000080u;
}
void ManagedUserSpecifics::clear_password_encryption_key()
{
    password_encryption_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_password_encryption_key();
}
const ::std::string& ManagedUserSpecifics::password_encryption_key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.password_encryption_key)
    return password_encryption_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_password_encryption_key(const ::std::string& value)
{
    set_has_password_encryption_key();
    password_encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
void ManagedUserSpecifics::set_password_encryption_key(const char* value)
{
    set_has_password_encryption_key();
    password_encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
void ManagedUserSpecifics::set_password_encryption_key(const char* value, size_t size)
{
    set_has_password_encryption_key();
    password_encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
::std::string* ManagedUserSpecifics::mutable_password_encryption_key()
{
    set_has_password_encryption_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.password_encryption_key)
    return password_encryption_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_password_encryption_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.password_encryption_key)
    clear_has_password_encryption_key();
    return password_encryption_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_password_encryption_key(::std::string* password_encryption_key)
{
    if (password_encryption_key != NULL) {
        set_has_password_encryption_key();
    } else {
        clear_has_password_encryption_key();
    }
    password_encryption_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_encryption_key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.password_encryption_key)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
