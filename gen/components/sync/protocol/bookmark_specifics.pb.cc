// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookmark_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bookmark_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_bookmark_5fspecifics_2eproto()
{
    delete MetaInfo::default_instance_;
    delete BookmarkSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_bookmark_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_bookmark_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    MetaInfo::default_instance_ = new MetaInfo();
    BookmarkSpecifics::default_instance_ = new BookmarkSpecifics();
    MetaInfo::default_instance_->InitAsDefaultInstance();
    BookmarkSpecifics::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bookmark_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_bookmark_5fspecifics_2eproto_once_);
void protobuf_AddDesc_bookmark_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_bookmark_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_bookmark_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bookmark_5fspecifics_2eproto {
    StaticDescriptorInitializer_bookmark_5fspecifics_2eproto()
    {
        protobuf_AddDesc_bookmark_5fspecifics_2eproto();
    }
} static_descriptor_initializer_bookmark_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForMetaInfo(
    MetaInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaInfo::kKeyFieldNumber;
const int MetaInfo::kValueFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaInfo::MetaInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.MetaInfo)
}

void MetaInfo::InitAsDefaultInstance()
{
}

MetaInfo::MetaInfo(const MetaInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.MetaInfo)
}

void MetaInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaInfo::~MetaInfo()
{
    // @@protoc_insertion_point(destructor:sync_pb.MetaInfo)
    SharedDtor();
}

void MetaInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void MetaInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaInfo& MetaInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

MetaInfo* MetaInfo::default_instance_ = NULL;

MetaInfo* MetaInfo::New(::google::protobuf::Arena* arena) const
{
    MetaInfo* n = new MetaInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void MetaInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.MetaInfo)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_key()) {
            key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_value()) {
            value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForMetaInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.MetaInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string key = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_value;
            break;
        }

        // optional string value = 2;
        case 2: {
            if (tag == 18) {
            parse_value:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_value()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.MetaInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.MetaInfo)
    return false;
#undef DO_
}

void MetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.MetaInfo)
    // optional string key = 1;
    if (has_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->key(), output);
    }

    // optional string value = 2;
    if (has_value()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->value(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.MetaInfo)
}

int MetaInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.MetaInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string key = 1;
        if (has_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->key());
        }

        // optional string value = 2;
        if (has_value()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->value());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MetaInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const MetaInfo*>(&from));
}

void MetaInfo::MergeFrom(const MetaInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.MetaInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_key()) {
            set_has_key();
            key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
        }
        if (from.has_value()) {
            set_has_value();
            value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void MetaInfo::CopyFrom(const MetaInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.MetaInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MetaInfo::IsInitialized() const
{

    return true;
}

void MetaInfo::Swap(MetaInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void MetaInfo::InternalSwap(MetaInfo* other)
{
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string MetaInfo::GetTypeName() const
{
    return "sync_pb.MetaInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaInfo

// optional string key = 1;
bool MetaInfo::has_key() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetaInfo::set_has_key()
{
    _has_bits_[0] |= 0x00000001u;
}
void MetaInfo::clear_has_key()
{
    _has_bits_[0] &= ~0x00000001u;
}
void MetaInfo::clear_key()
{
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_key();
}
const ::std::string& MetaInfo::key() const
{
    // @@protoc_insertion_point(field_get:sync_pb.MetaInfo.key)
    return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaInfo::set_key(const ::std::string& value)
{
    set_has_key();
    key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.MetaInfo.key)
}
void MetaInfo::set_key(const char* value)
{
    set_has_key();
    key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.MetaInfo.key)
}
void MetaInfo::set_key(const char* value, size_t size)
{
    set_has_key();
    key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.MetaInfo.key)
}
::std::string* MetaInfo::mutable_key()
{
    set_has_key();
    // @@protoc_insertion_point(field_mutable:sync_pb.MetaInfo.key)
    return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaInfo::release_key()
{
    // @@protoc_insertion_point(field_release:sync_pb.MetaInfo.key)
    clear_has_key();
    return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaInfo::set_allocated_key(::std::string* key)
{
    if (key != NULL) {
        set_has_key();
    } else {
        clear_has_key();
    }
    key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.MetaInfo.key)
}

// optional string value = 2;
bool MetaInfo::has_value() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetaInfo::set_has_value()
{
    _has_bits_[0] |= 0x00000002u;
}
void MetaInfo::clear_has_value()
{
    _has_bits_[0] &= ~0x00000002u;
}
void MetaInfo::clear_value()
{
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
}
const ::std::string& MetaInfo::value() const
{
    // @@protoc_insertion_point(field_get:sync_pb.MetaInfo.value)
    return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaInfo::set_value(const ::std::string& value)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.MetaInfo.value)
}
void MetaInfo::set_value(const char* value)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.MetaInfo.value)
}
void MetaInfo::set_value(const char* value, size_t size)
{
    set_has_value();
    value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.MetaInfo.value)
}
::std::string* MetaInfo::mutable_value()
{
    set_has_value();
    // @@protoc_insertion_point(field_mutable:sync_pb.MetaInfo.value)
    return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetaInfo::release_value()
{
    // @@protoc_insertion_point(field_release:sync_pb.MetaInfo.value)
    clear_has_value();
    return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetaInfo::set_allocated_value(::std::string* value)
{
    if (value != NULL) {
        set_has_value();
    } else {
        clear_has_value();
    }
    value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.MetaInfo.value)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForBookmarkSpecifics(
    BookmarkSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BookmarkSpecifics::kUrlFieldNumber;
const int BookmarkSpecifics::kFaviconFieldNumber;
const int BookmarkSpecifics::kTitleFieldNumber;
const int BookmarkSpecifics::kCreationTimeUsFieldNumber;
const int BookmarkSpecifics::kIconUrlFieldNumber;
const int BookmarkSpecifics::kMetaInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

BookmarkSpecifics::BookmarkSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.BookmarkSpecifics)
}

void BookmarkSpecifics::InitAsDefaultInstance()
{
}

BookmarkSpecifics::BookmarkSpecifics(const BookmarkSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.BookmarkSpecifics)
}

void BookmarkSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    creation_time_us_ = GOOGLE_LONGLONG(0);
    icon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookmarkSpecifics::~BookmarkSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.BookmarkSpecifics)
    SharedDtor();
}

void BookmarkSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    favicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    icon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void BookmarkSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BookmarkSpecifics& BookmarkSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

BookmarkSpecifics* BookmarkSpecifics::default_instance_ = NULL;

BookmarkSpecifics* BookmarkSpecifics::New(::google::protobuf::Arena* arena) const
{
    BookmarkSpecifics* n = new BookmarkSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void BookmarkSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.BookmarkSpecifics)
    if (_has_bits_[0 / 32] & 31u) {
        if (has_url()) {
            url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_favicon()) {
            favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_title()) {
            title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        creation_time_us_ = GOOGLE_LONGLONG(0);
        if (has_icon_url()) {
            icon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    meta_info_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BookmarkSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForBookmarkSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.BookmarkSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string url = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_favicon;
            break;
        }

        // optional bytes favicon = 2;
        case 2: {
            if (tag == 18) {
            parse_favicon:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_favicon()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_title;
            break;
        }

        // optional string title = 3;
        case 3: {
            if (tag == 26) {
            parse_title:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_title()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_creation_time_us;
            break;
        }

        // optional int64 creation_time_us = 4;
        case 4: {
            if (tag == 32) {
            parse_creation_time_us:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &creation_time_us_)));
                set_has_creation_time_us();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_icon_url;
            break;
        }

        // optional string icon_url = 5;
        case 5: {
            if (tag == 42) {
            parse_icon_url:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_icon_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_meta_info;
            break;
        }

        // repeated .sync_pb.MetaInfo meta_info = 6;
        case 6: {
            if (tag == 50) {
            parse_meta_info:
                DO_(input->IncrementRecursionDepth());
            parse_loop_meta_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_meta_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_loop_meta_info;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.BookmarkSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.BookmarkSpecifics)
    return false;
#undef DO_
}

void BookmarkSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.BookmarkSpecifics)
    // optional string url = 1;
    if (has_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->url(), output);
    }

    // optional bytes favicon = 2;
    if (has_favicon()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            2, this->favicon(), output);
    }

    // optional string title = 3;
    if (has_title()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->title(), output);
    }

    // optional int64 creation_time_us = 4;
    if (has_creation_time_us()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->creation_time_us(), output);
    }

    // optional string icon_url = 5;
    if (has_icon_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->icon_url(), output);
    }

    // repeated .sync_pb.MetaInfo meta_info = 6;
    for (unsigned int i = 0, n = this->meta_info_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, this->meta_info(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.BookmarkSpecifics)
}

int BookmarkSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.BookmarkSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string url = 1;
        if (has_url()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->url());
        }

        // optional bytes favicon = 2;
        if (has_favicon()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->favicon());
        }

        // optional string title = 3;
        if (has_title()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->title());
        }

        // optional int64 creation_time_us = 4;
        if (has_creation_time_us()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->creation_time_us());
        }

        // optional string icon_url = 5;
        if (has_icon_url()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->icon_url());
        }
    }
    // repeated .sync_pb.MetaInfo meta_info = 6;
    total_size += 1 * this->meta_info_size();
    for (int i = 0; i < this->meta_info_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->meta_info(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void BookmarkSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const BookmarkSpecifics*>(&from));
}

void BookmarkSpecifics::MergeFrom(const BookmarkSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.BookmarkSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    meta_info_.MergeFrom(from.meta_info_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_url()) {
            set_has_url();
            url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
        }
        if (from.has_favicon()) {
            set_has_favicon();
            favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_);
        }
        if (from.has_title()) {
            set_has_title();
            title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
        }
        if (from.has_creation_time_us()) {
            set_creation_time_us(from.creation_time_us());
        }
        if (from.has_icon_url()) {
            set_has_icon_url();
            icon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_url_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void BookmarkSpecifics::CopyFrom(const BookmarkSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.BookmarkSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool BookmarkSpecifics::IsInitialized() const
{

    return true;
}

void BookmarkSpecifics::Swap(BookmarkSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void BookmarkSpecifics::InternalSwap(BookmarkSpecifics* other)
{
    url_.Swap(&other->url_);
    favicon_.Swap(&other->favicon_);
    title_.Swap(&other->title_);
    std::swap(creation_time_us_, other->creation_time_us_);
    icon_url_.Swap(&other->icon_url_);
    meta_info_.UnsafeArenaSwap(&other->meta_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string BookmarkSpecifics::GetTypeName() const
{
    return "sync_pb.BookmarkSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BookmarkSpecifics

// optional string url = 1;
bool BookmarkSpecifics::has_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void BookmarkSpecifics::set_has_url()
{
    _has_bits_[0] |= 0x00000001u;
}
void BookmarkSpecifics::clear_has_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
void BookmarkSpecifics::clear_url()
{
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
}
const ::std::string& BookmarkSpecifics::url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.url)
    return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_url(const ::std::string& value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.url)
}
void BookmarkSpecifics::set_url(const char* value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.url)
}
void BookmarkSpecifics::set_url(const char* value, size_t size)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.url)
}
::std::string* BookmarkSpecifics::mutable_url()
{
    set_has_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.url)
    return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BookmarkSpecifics::release_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.url)
    clear_has_url();
    return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_allocated_url(::std::string* url)
{
    if (url != NULL) {
        set_has_url();
    } else {
        clear_has_url();
    }
    url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.url)
}

// optional bytes favicon = 2;
bool BookmarkSpecifics::has_favicon() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void BookmarkSpecifics::set_has_favicon()
{
    _has_bits_[0] |= 0x00000002u;
}
void BookmarkSpecifics::clear_has_favicon()
{
    _has_bits_[0] &= ~0x00000002u;
}
void BookmarkSpecifics::clear_favicon()
{
    favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_favicon();
}
const ::std::string& BookmarkSpecifics::favicon() const
{
    // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.favicon)
    return favicon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_favicon(const ::std::string& value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.favicon)
}
void BookmarkSpecifics::set_favicon(const char* value)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.favicon)
}
void BookmarkSpecifics::set_favicon(const void* value, size_t size)
{
    set_has_favicon();
    favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.favicon)
}
::std::string* BookmarkSpecifics::mutable_favicon()
{
    set_has_favicon();
    // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.favicon)
    return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BookmarkSpecifics::release_favicon()
{
    // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.favicon)
    clear_has_favicon();
    return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_allocated_favicon(::std::string* favicon)
{
    if (favicon != NULL) {
        set_has_favicon();
    } else {
        clear_has_favicon();
    }
    favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.favicon)
}

// optional string title = 3;
bool BookmarkSpecifics::has_title() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void BookmarkSpecifics::set_has_title()
{
    _has_bits_[0] |= 0x00000004u;
}
void BookmarkSpecifics::clear_has_title()
{
    _has_bits_[0] &= ~0x00000004u;
}
void BookmarkSpecifics::clear_title()
{
    title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_title();
}
const ::std::string& BookmarkSpecifics::title() const
{
    // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.title)
    return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_title(const ::std::string& value)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.title)
}
void BookmarkSpecifics::set_title(const char* value)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.title)
}
void BookmarkSpecifics::set_title(const char* value, size_t size)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.title)
}
::std::string* BookmarkSpecifics::mutable_title()
{
    set_has_title();
    // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.title)
    return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BookmarkSpecifics::release_title()
{
    // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.title)
    clear_has_title();
    return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_allocated_title(::std::string* title)
{
    if (title != NULL) {
        set_has_title();
    } else {
        clear_has_title();
    }
    title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.title)
}

// optional int64 creation_time_us = 4;
bool BookmarkSpecifics::has_creation_time_us() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void BookmarkSpecifics::set_has_creation_time_us()
{
    _has_bits_[0] |= 0x00000008u;
}
void BookmarkSpecifics::clear_has_creation_time_us()
{
    _has_bits_[0] &= ~0x00000008u;
}
void BookmarkSpecifics::clear_creation_time_us()
{
    creation_time_us_ = GOOGLE_LONGLONG(0);
    clear_has_creation_time_us();
}
::google::protobuf::int64 BookmarkSpecifics::creation_time_us() const
{
    // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.creation_time_us)
    return creation_time_us_;
}
void BookmarkSpecifics::set_creation_time_us(::google::protobuf::int64 value)
{
    set_has_creation_time_us();
    creation_time_us_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.creation_time_us)
}

// optional string icon_url = 5;
bool BookmarkSpecifics::has_icon_url() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void BookmarkSpecifics::set_has_icon_url()
{
    _has_bits_[0] |= 0x00000010u;
}
void BookmarkSpecifics::clear_has_icon_url()
{
    _has_bits_[0] &= ~0x00000010u;
}
void BookmarkSpecifics::clear_icon_url()
{
    icon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_icon_url();
}
const ::std::string& BookmarkSpecifics::icon_url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.icon_url)
    return icon_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_icon_url(const ::std::string& value)
{
    set_has_icon_url();
    icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.BookmarkSpecifics.icon_url)
}
void BookmarkSpecifics::set_icon_url(const char* value)
{
    set_has_icon_url();
    icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.BookmarkSpecifics.icon_url)
}
void BookmarkSpecifics::set_icon_url(const char* value, size_t size)
{
    set_has_icon_url();
    icon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.BookmarkSpecifics.icon_url)
}
::std::string* BookmarkSpecifics::mutable_icon_url()
{
    set_has_icon_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.icon_url)
    return icon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BookmarkSpecifics::release_icon_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.BookmarkSpecifics.icon_url)
    clear_has_icon_url();
    return icon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BookmarkSpecifics::set_allocated_icon_url(::std::string* icon_url)
{
    if (icon_url != NULL) {
        set_has_icon_url();
    } else {
        clear_has_icon_url();
    }
    icon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.BookmarkSpecifics.icon_url)
}

// repeated .sync_pb.MetaInfo meta_info = 6;
int BookmarkSpecifics::meta_info_size() const
{
    return meta_info_.size();
}
void BookmarkSpecifics::clear_meta_info()
{
    meta_info_.Clear();
}
const ::sync_pb::MetaInfo& BookmarkSpecifics::meta_info(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.BookmarkSpecifics.meta_info)
    return meta_info_.Get(index);
}
::sync_pb::MetaInfo* BookmarkSpecifics::mutable_meta_info(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.BookmarkSpecifics.meta_info)
    return meta_info_.Mutable(index);
}
::sync_pb::MetaInfo* BookmarkSpecifics::add_meta_info()
{
    // @@protoc_insertion_point(field_add:sync_pb.BookmarkSpecifics.meta_info)
    return meta_info_.Add();
}
::google::protobuf::RepeatedPtrField<::sync_pb::MetaInfo>*
BookmarkSpecifics::mutable_meta_info()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.BookmarkSpecifics.meta_info)
    return &meta_info_;
}
const ::google::protobuf::RepeatedPtrField<::sync_pb::MetaInfo>&
BookmarkSpecifics::meta_info() const
{
    // @@protoc_insertion_point(field_list:sync_pb.BookmarkSpecifics.meta_info)
    return meta_info_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
