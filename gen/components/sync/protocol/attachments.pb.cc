// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attachments.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "attachments.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_attachments_2eproto()
{
    delete AttachmentIdProto::default_instance_;
    delete AttachmentMetadataRecord::default_instance_;
    delete AttachmentMetadata::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_attachments_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_attachments_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    AttachmentIdProto::default_instance_ = new AttachmentIdProto();
    AttachmentMetadataRecord::default_instance_ = new AttachmentMetadataRecord();
    AttachmentMetadata::default_instance_ = new AttachmentMetadata();
    AttachmentIdProto::default_instance_->InitAsDefaultInstance();
    AttachmentMetadataRecord::default_instance_->InitAsDefaultInstance();
    AttachmentMetadata::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_attachments_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_attachments_2eproto_once_);
void protobuf_AddDesc_attachments_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_attachments_2eproto_once_,
        &protobuf_AddDesc_attachments_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_attachments_2eproto {
    StaticDescriptorInitializer_attachments_2eproto()
    {
        protobuf_AddDesc_attachments_2eproto();
    }
} static_descriptor_initializer_attachments_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForAttachmentIdProto(
    AttachmentIdProto* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttachmentIdProto::kUniqueIdFieldNumber;
const int AttachmentIdProto::kSizeBytesFieldNumber;
const int AttachmentIdProto::kCrc32CFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AttachmentIdProto::AttachmentIdProto()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.AttachmentIdProto)
}

void AttachmentIdProto::InitAsDefaultInstance()
{
}

AttachmentIdProto::AttachmentIdProto(const AttachmentIdProto& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.AttachmentIdProto)
}

void AttachmentIdProto::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    size_bytes_ = GOOGLE_ULONGLONG(0);
    crc32c_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachmentIdProto::~AttachmentIdProto()
{
    // @@protoc_insertion_point(destructor:sync_pb.AttachmentIdProto)
    SharedDtor();
}

void AttachmentIdProto::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    unique_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AttachmentIdProto::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttachmentIdProto& AttachmentIdProto::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_attachments_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_attachments_2eproto();
#endif
    return *default_instance_;
}

AttachmentIdProto* AttachmentIdProto::default_instance_ = NULL;

AttachmentIdProto* AttachmentIdProto::New(::google::protobuf::Arena* arena) const
{
    AttachmentIdProto* n = new AttachmentIdProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AttachmentIdProto::Clear()
{
// @@protoc_insertion_point(message_clear_start:sync_pb.AttachmentIdProto)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                       \
    _Pragma("clang diagnostic push")                                                                        \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(AttachmentIdProto, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<AttachmentIdProto*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 7u) {
        ZR_(size_bytes_, crc32c_);
        if (has_unique_id()) {
            unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AttachmentIdProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAttachmentIdProto, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.AttachmentIdProto)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string unique_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_unique_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_size_bytes;
            break;
        }

        // optional uint64 size_bytes = 2;
        case 2: {
            if (tag == 16) {
            parse_size_bytes:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                    input, &size_bytes_)));
                set_has_size_bytes();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_crc32c;
            break;
        }

        // optional uint32 crc32c = 3;
        case 3: {
            if (tag == 24) {
            parse_crc32c:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &crc32c_)));
                set_has_crc32c();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.AttachmentIdProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.AttachmentIdProto)
    return false;
#undef DO_
}

void AttachmentIdProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.AttachmentIdProto)
    // optional string unique_id = 1;
    if (has_unique_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->unique_id(), output);
    }

    // optional uint64 size_bytes = 2;
    if (has_size_bytes()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_bytes(), output);
    }

    // optional uint32 crc32c = 3;
    if (has_crc32c()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc32c(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.AttachmentIdProto)
}

int AttachmentIdProto::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.AttachmentIdProto)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional string unique_id = 1;
        if (has_unique_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->unique_id());
        }

        // optional uint64 size_bytes = 2;
        if (has_size_bytes()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->size_bytes());
        }

        // optional uint32 crc32c = 3;
        if (has_crc32c()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->crc32c());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AttachmentIdProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AttachmentIdProto*>(&from));
}

void AttachmentIdProto::MergeFrom(const AttachmentIdProto& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AttachmentIdProto)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_unique_id()) {
            set_has_unique_id();
            unique_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_id_);
        }
        if (from.has_size_bytes()) {
            set_size_bytes(from.size_bytes());
        }
        if (from.has_crc32c()) {
            set_crc32c(from.crc32c());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AttachmentIdProto::CopyFrom(const AttachmentIdProto& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AttachmentIdProto)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AttachmentIdProto::IsInitialized() const
{

    return true;
}

void AttachmentIdProto::Swap(AttachmentIdProto* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AttachmentIdProto::InternalSwap(AttachmentIdProto* other)
{
    unique_id_.Swap(&other->unique_id_);
    std::swap(size_bytes_, other->size_bytes_);
    std::swap(crc32c_, other->crc32c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AttachmentIdProto::GetTypeName() const
{
    return "sync_pb.AttachmentIdProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachmentIdProto

// optional string unique_id = 1;
bool AttachmentIdProto::has_unique_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AttachmentIdProto::set_has_unique_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void AttachmentIdProto::clear_has_unique_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AttachmentIdProto::clear_unique_id()
{
    unique_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_unique_id();
}
const ::std::string& AttachmentIdProto::unique_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentIdProto.unique_id)
    return unique_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttachmentIdProto::set_unique_id(const ::std::string& value)
{
    set_has_unique_id();
    unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentIdProto.unique_id)
}
void AttachmentIdProto::set_unique_id(const char* value)
{
    set_has_unique_id();
    unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.AttachmentIdProto.unique_id)
}
void AttachmentIdProto::set_unique_id(const char* value, size_t size)
{
    set_has_unique_id();
    unique_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.AttachmentIdProto.unique_id)
}
::std::string* AttachmentIdProto::mutable_unique_id()
{
    set_has_unique_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.AttachmentIdProto.unique_id)
    return unique_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttachmentIdProto::release_unique_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.AttachmentIdProto.unique_id)
    clear_has_unique_id();
    return unique_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttachmentIdProto::set_allocated_unique_id(::std::string* unique_id)
{
    if (unique_id != NULL) {
        set_has_unique_id();
    } else {
        clear_has_unique_id();
    }
    unique_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.AttachmentIdProto.unique_id)
}

// optional uint64 size_bytes = 2;
bool AttachmentIdProto::has_size_bytes() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AttachmentIdProto::set_has_size_bytes()
{
    _has_bits_[0] |= 0x00000002u;
}
void AttachmentIdProto::clear_has_size_bytes()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AttachmentIdProto::clear_size_bytes()
{
    size_bytes_ = GOOGLE_ULONGLONG(0);
    clear_has_size_bytes();
}
::google::protobuf::uint64 AttachmentIdProto::size_bytes() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentIdProto.size_bytes)
    return size_bytes_;
}
void AttachmentIdProto::set_size_bytes(::google::protobuf::uint64 value)
{
    set_has_size_bytes();
    size_bytes_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentIdProto.size_bytes)
}

// optional uint32 crc32c = 3;
bool AttachmentIdProto::has_crc32c() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void AttachmentIdProto::set_has_crc32c()
{
    _has_bits_[0] |= 0x00000004u;
}
void AttachmentIdProto::clear_has_crc32c()
{
    _has_bits_[0] &= ~0x00000004u;
}
void AttachmentIdProto::clear_crc32c()
{
    crc32c_ = 0u;
    clear_has_crc32c();
}
::google::protobuf::uint32 AttachmentIdProto::crc32c() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentIdProto.crc32c)
    return crc32c_;
}
void AttachmentIdProto::set_crc32c(::google::protobuf::uint32 value)
{
    set_has_crc32c();
    crc32c_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentIdProto.crc32c)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAttachmentMetadataRecord(
    AttachmentMetadataRecord* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttachmentMetadataRecord::kIdFieldNumber;
const int AttachmentMetadataRecord::kIsOnServerFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AttachmentMetadataRecord::AttachmentMetadataRecord()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.AttachmentMetadataRecord)
}

void AttachmentMetadataRecord::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    id_ = const_cast<::sync_pb::AttachmentIdProto*>(
        ::sync_pb::AttachmentIdProto::internal_default_instance());
#else
    id_ = const_cast<::sync_pb::AttachmentIdProto*>(&::sync_pb::AttachmentIdProto::default_instance());
#endif
}

AttachmentMetadataRecord::AttachmentMetadataRecord(const AttachmentMetadataRecord& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.AttachmentMetadataRecord)
}

void AttachmentMetadataRecord::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    id_ = NULL;
    is_on_server_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachmentMetadataRecord::~AttachmentMetadataRecord()
{
    // @@protoc_insertion_point(destructor:sync_pb.AttachmentMetadataRecord)
    SharedDtor();
}

void AttachmentMetadataRecord::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete id_;
    }
}

void AttachmentMetadataRecord::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttachmentMetadataRecord& AttachmentMetadataRecord::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_attachments_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_attachments_2eproto();
#endif
    return *default_instance_;
}

AttachmentMetadataRecord* AttachmentMetadataRecord::default_instance_ = NULL;

AttachmentMetadataRecord* AttachmentMetadataRecord::New(::google::protobuf::Arena* arena) const
{
    AttachmentMetadataRecord* n = new AttachmentMetadataRecord;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AttachmentMetadataRecord::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.AttachmentMetadataRecord)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_id()) {
            if (id_ != NULL)
                id_->::sync_pb::AttachmentIdProto::Clear();
        }
        is_on_server_ = false;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AttachmentMetadataRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAttachmentMetadataRecord, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.AttachmentMetadataRecord)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .sync_pb.AttachmentIdProto id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_is_on_server;
            break;
        }

        // optional bool is_on_server = 2;
        case 2: {
            if (tag == 16) {
            parse_is_on_server:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &is_on_server_)));
                set_has_is_on_server();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.AttachmentMetadataRecord)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.AttachmentMetadataRecord)
    return false;
#undef DO_
}

void AttachmentMetadataRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.AttachmentMetadataRecord)
    // optional .sync_pb.AttachmentIdProto id = 1;
    if (has_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->id_, output);
    }

    // optional bool is_on_server = 2;
    if (has_is_on_server()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_on_server(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.AttachmentMetadataRecord)
}

int AttachmentMetadataRecord::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.AttachmentMetadataRecord)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional .sync_pb.AttachmentIdProto id = 1;
        if (has_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->id_);
        }

        // optional bool is_on_server = 2;
        if (has_is_on_server()) {
            total_size += 1 + 1;
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AttachmentMetadataRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AttachmentMetadataRecord*>(&from));
}

void AttachmentMetadataRecord::MergeFrom(const AttachmentMetadataRecord& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AttachmentMetadataRecord)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_id()) {
            mutable_id()->::sync_pb::AttachmentIdProto::MergeFrom(from.id());
        }
        if (from.has_is_on_server()) {
            set_is_on_server(from.is_on_server());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AttachmentMetadataRecord::CopyFrom(const AttachmentMetadataRecord& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AttachmentMetadataRecord)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AttachmentMetadataRecord::IsInitialized() const
{

    return true;
}

void AttachmentMetadataRecord::Swap(AttachmentMetadataRecord* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AttachmentMetadataRecord::InternalSwap(AttachmentMetadataRecord* other)
{
    std::swap(id_, other->id_);
    std::swap(is_on_server_, other->is_on_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AttachmentMetadataRecord::GetTypeName() const
{
    return "sync_pb.AttachmentMetadataRecord";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachmentMetadataRecord

// optional .sync_pb.AttachmentIdProto id = 1;
bool AttachmentMetadataRecord::has_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AttachmentMetadataRecord::set_has_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void AttachmentMetadataRecord::clear_has_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AttachmentMetadataRecord::clear_id()
{
    if (id_ != NULL)
        id_->::sync_pb::AttachmentIdProto::Clear();
    clear_has_id();
}
const ::sync_pb::AttachmentIdProto& AttachmentMetadataRecord::id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentMetadataRecord.id)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return id_ != NULL ? *id_ : *default_instance().id_;
#else
    return id_ != NULL ? *id_ : *default_instance_->id_;
#endif
}
::sync_pb::AttachmentIdProto* AttachmentMetadataRecord::mutable_id()
{
    set_has_id();
    if (id_ == NULL) {
        id_ = new ::sync_pb::AttachmentIdProto;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.AttachmentMetadataRecord.id)
    return id_;
}
::sync_pb::AttachmentIdProto* AttachmentMetadataRecord::release_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.AttachmentMetadataRecord.id)
    clear_has_id();
    ::sync_pb::AttachmentIdProto* temp = id_;
    id_ = NULL;
    return temp;
}
void AttachmentMetadataRecord::set_allocated_id(::sync_pb::AttachmentIdProto* id)
{
    delete id_;
    id_ = id;
    if (id) {
        set_has_id();
    } else {
        clear_has_id();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.AttachmentMetadataRecord.id)
}

// optional bool is_on_server = 2;
bool AttachmentMetadataRecord::has_is_on_server() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AttachmentMetadataRecord::set_has_is_on_server()
{
    _has_bits_[0] |= 0x00000002u;
}
void AttachmentMetadataRecord::clear_has_is_on_server()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AttachmentMetadataRecord::clear_is_on_server()
{
    is_on_server_ = false;
    clear_has_is_on_server();
}
bool AttachmentMetadataRecord::is_on_server() const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentMetadataRecord.is_on_server)
    return is_on_server_;
}
void AttachmentMetadataRecord::set_is_on_server(bool value)
{
    set_has_is_on_server();
    is_on_server_ = value;
    // @@protoc_insertion_point(field_set:sync_pb.AttachmentMetadataRecord.is_on_server)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAttachmentMetadata(
    AttachmentMetadata* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttachmentMetadata::kRecordFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AttachmentMetadata::AttachmentMetadata()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.AttachmentMetadata)
}

void AttachmentMetadata::InitAsDefaultInstance()
{
}

AttachmentMetadata::AttachmentMetadata(const AttachmentMetadata& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.AttachmentMetadata)
}

void AttachmentMetadata::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachmentMetadata::~AttachmentMetadata()
{
    // @@protoc_insertion_point(destructor:sync_pb.AttachmentMetadata)
    SharedDtor();
}

void AttachmentMetadata::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AttachmentMetadata::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttachmentMetadata& AttachmentMetadata::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_attachments_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_attachments_2eproto();
#endif
    return *default_instance_;
}

AttachmentMetadata* AttachmentMetadata::default_instance_ = NULL;

AttachmentMetadata* AttachmentMetadata::New(::google::protobuf::Arena* arena) const
{
    AttachmentMetadata* n = new AttachmentMetadata;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AttachmentMetadata::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.AttachmentMetadata)
    record_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AttachmentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAttachmentMetadata, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.AttachmentMetadata)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .sync_pb.AttachmentMetadataRecord record = 1;
        case 1: {
            if (tag == 10) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_record:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_record()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_loop_record;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.AttachmentMetadata)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.AttachmentMetadata)
    return false;
#undef DO_
}

void AttachmentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.AttachmentMetadata)
    // repeated .sync_pb.AttachmentMetadataRecord record = 1;
    for (unsigned int i = 0, n = this->record_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, this->record(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.AttachmentMetadata)
}

int AttachmentMetadata::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.AttachmentMetadata)
    int total_size = 0;

    // repeated .sync_pb.AttachmentMetadataRecord record = 1;
    total_size += 1 * this->record_size();
    for (int i = 0; i < this->record_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->record(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AttachmentMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AttachmentMetadata*>(&from));
}

void AttachmentMetadata::MergeFrom(const AttachmentMetadata& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.AttachmentMetadata)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    record_.MergeFrom(from.record_);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AttachmentMetadata::CopyFrom(const AttachmentMetadata& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.AttachmentMetadata)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AttachmentMetadata::IsInitialized() const
{

    return true;
}

void AttachmentMetadata::Swap(AttachmentMetadata* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AttachmentMetadata::InternalSwap(AttachmentMetadata* other)
{
    record_.UnsafeArenaSwap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AttachmentMetadata::GetTypeName() const
{
    return "sync_pb.AttachmentMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachmentMetadata

// repeated .sync_pb.AttachmentMetadataRecord record = 1;
int AttachmentMetadata::record_size() const
{
    return record_.size();
}
void AttachmentMetadata::clear_record()
{
    record_.Clear();
}
const ::sync_pb::AttachmentMetadataRecord& AttachmentMetadata::record(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.AttachmentMetadata.record)
    return record_.Get(index);
}
::sync_pb::AttachmentMetadataRecord* AttachmentMetadata::mutable_record(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.AttachmentMetadata.record)
    return record_.Mutable(index);
}
::sync_pb::AttachmentMetadataRecord* AttachmentMetadata::add_record()
{
    // @@protoc_insertion_point(field_add:sync_pb.AttachmentMetadata.record)
    return record_.Add();
}
::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord>*
AttachmentMetadata::mutable_record()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.AttachmentMetadata.record)
    return &record_;
}
const ::google::protobuf::RepeatedPtrField<::sync_pb::AttachmentMetadataRecord>&
AttachmentMetadata::record() const
{
    // @@protoc_insertion_point(field_list:sync_pb.AttachmentMetadata.record)
    return record_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
