// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: article_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "article_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_article_5fspecifics_2eproto()
{
    delete ArticleSpecifics::default_instance_;
    delete ArticlePage::default_instance_;
    delete ArticleAttachments::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_article_5fspecifics_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_article_5fspecifics_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    ::sync_pb::protobuf_AddDesc_attachments_2eproto();
    ArticleSpecifics::default_instance_ = new ArticleSpecifics();
    ArticlePage::default_instance_ = new ArticlePage();
    ArticleAttachments::default_instance_ = new ArticleAttachments();
    ArticleSpecifics::default_instance_->InitAsDefaultInstance();
    ArticlePage::default_instance_->InitAsDefaultInstance();
    ArticleAttachments::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_article_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_article_5fspecifics_2eproto_once_);
void protobuf_AddDesc_article_5fspecifics_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_article_5fspecifics_2eproto_once_,
        &protobuf_AddDesc_article_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_article_5fspecifics_2eproto {
    StaticDescriptorInitializer_article_5fspecifics_2eproto()
    {
        protobuf_AddDesc_article_5fspecifics_2eproto();
    }
} static_descriptor_initializer_article_5fspecifics_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForArticleSpecifics(
    ArticleSpecifics* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArticleSpecifics::kEntryIdFieldNumber;
const int ArticleSpecifics::kTitleFieldNumber;
const int ArticleSpecifics::kPagesFieldNumber;
const int ArticleSpecifics::kAttachmentsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ArticleSpecifics::ArticleSpecifics()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ArticleSpecifics)
}

void ArticleSpecifics::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    attachments_ = const_cast<::sync_pb::ArticleAttachments*>(
        ::sync_pb::ArticleAttachments::internal_default_instance());
#else
    attachments_ = const_cast<::sync_pb::ArticleAttachments*>(&::sync_pb::ArticleAttachments::default_instance());
#endif
}

ArticleSpecifics::ArticleSpecifics(const ArticleSpecifics& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ArticleSpecifics)
}

void ArticleSpecifics::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    entry_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    attachments_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArticleSpecifics::~ArticleSpecifics()
{
    // @@protoc_insertion_point(destructor:sync_pb.ArticleSpecifics)
    SharedDtor();
}

void ArticleSpecifics::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    entry_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete attachments_;
    }
}

void ArticleSpecifics::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArticleSpecifics& ArticleSpecifics::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_article_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_article_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

ArticleSpecifics* ArticleSpecifics::default_instance_ = NULL;

ArticleSpecifics* ArticleSpecifics::New(::google::protobuf::Arena* arena) const
{
    ArticleSpecifics* n = new ArticleSpecifics;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ArticleSpecifics::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.ArticleSpecifics)
    if (_has_bits_[0 / 32] & 11u) {
        if (has_entry_id()) {
            entry_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_title()) {
            title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_attachments()) {
            if (attachments_ != NULL)
                attachments_->::sync_pb::ArticleAttachments::Clear();
        }
    }
    pages_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ArticleSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForArticleSpecifics, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ArticleSpecifics)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string entry_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_entry_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_title;
            break;
        }

        // optional string title = 2;
        case 2: {
            if (tag == 18) {
            parse_title:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_title()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_pages;
            break;
        }

        // repeated .sync_pb.ArticlePage pages = 3;
        case 3: {
            if (tag == 26) {
            parse_pages:
                DO_(input->IncrementRecursionDepth());
            parse_loop_pages:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_pages()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_loop_pages;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(34))
                goto parse_attachments;
            break;
        }

        // optional .sync_pb.ArticleAttachments attachments = 4;
        case 4: {
            if (tag == 34) {
            parse_attachments:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_attachments()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ArticleSpecifics)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ArticleSpecifics)
    return false;
#undef DO_
}

void ArticleSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ArticleSpecifics)
    // optional string entry_id = 1;
    if (has_entry_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->entry_id(), output);
    }

    // optional string title = 2;
    if (has_title()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->title(), output);
    }

    // repeated .sync_pb.ArticlePage pages = 3;
    for (unsigned int i = 0, n = this->pages_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, this->pages(i), output);
    }

    // optional .sync_pb.ArticleAttachments attachments = 4;
    if (has_attachments()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->attachments_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ArticleSpecifics)
}

int ArticleSpecifics::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ArticleSpecifics)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 11u) {
        // optional string entry_id = 1;
        if (has_entry_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->entry_id());
        }

        // optional string title = 2;
        if (has_title()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->title());
        }

        // optional .sync_pb.ArticleAttachments attachments = 4;
        if (has_attachments()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->attachments_);
        }
    }
    // repeated .sync_pb.ArticlePage pages = 3;
    total_size += 1 * this->pages_size();
    for (int i = 0; i < this->pages_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->pages(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ArticleSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ArticleSpecifics*>(&from));
}

void ArticleSpecifics::MergeFrom(const ArticleSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ArticleSpecifics)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    pages_.MergeFrom(from.pages_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_entry_id()) {
            set_has_entry_id();
            entry_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entry_id_);
        }
        if (from.has_title()) {
            set_has_title();
            title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
        }
        if (from.has_attachments()) {
            mutable_attachments()->::sync_pb::ArticleAttachments::MergeFrom(from.attachments());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ArticleSpecifics::CopyFrom(const ArticleSpecifics& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ArticleSpecifics)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ArticleSpecifics::IsInitialized() const
{

    return true;
}

void ArticleSpecifics::Swap(ArticleSpecifics* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ArticleSpecifics::InternalSwap(ArticleSpecifics* other)
{
    entry_id_.Swap(&other->entry_id_);
    title_.Swap(&other->title_);
    pages_.UnsafeArenaSwap(&other->pages_);
    std::swap(attachments_, other->attachments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ArticleSpecifics::GetTypeName() const
{
    return "sync_pb.ArticleSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArticleSpecifics

// optional string entry_id = 1;
bool ArticleSpecifics::has_entry_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArticleSpecifics::set_has_entry_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void ArticleSpecifics::clear_has_entry_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ArticleSpecifics::clear_entry_id()
{
    entry_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_entry_id();
}
const ::std::string& ArticleSpecifics::entry_id() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.entry_id)
    return entry_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticleSpecifics::set_entry_id(const ::std::string& value)
{
    set_has_entry_id();
    entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ArticleSpecifics.entry_id)
}
void ArticleSpecifics::set_entry_id(const char* value)
{
    set_has_entry_id();
    entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ArticleSpecifics.entry_id)
}
void ArticleSpecifics::set_entry_id(const char* value, size_t size)
{
    set_has_entry_id();
    entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ArticleSpecifics.entry_id)
}
::std::string* ArticleSpecifics::mutable_entry_id()
{
    set_has_entry_id();
    // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.entry_id)
    return entry_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArticleSpecifics::release_entry_id()
{
    // @@protoc_insertion_point(field_release:sync_pb.ArticleSpecifics.entry_id)
    clear_has_entry_id();
    return entry_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticleSpecifics::set_allocated_entry_id(::std::string* entry_id)
{
    if (entry_id != NULL) {
        set_has_entry_id();
    } else {
        clear_has_entry_id();
    }
    entry_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entry_id);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleSpecifics.entry_id)
}

// optional string title = 2;
bool ArticleSpecifics::has_title() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArticleSpecifics::set_has_title()
{
    _has_bits_[0] |= 0x00000002u;
}
void ArticleSpecifics::clear_has_title()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ArticleSpecifics::clear_title()
{
    title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_title();
}
const ::std::string& ArticleSpecifics::title() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.title)
    return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticleSpecifics::set_title(const ::std::string& value)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ArticleSpecifics.title)
}
void ArticleSpecifics::set_title(const char* value)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ArticleSpecifics.title)
}
void ArticleSpecifics::set_title(const char* value, size_t size)
{
    set_has_title();
    title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ArticleSpecifics.title)
}
::std::string* ArticleSpecifics::mutable_title()
{
    set_has_title();
    // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.title)
    return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArticleSpecifics::release_title()
{
    // @@protoc_insertion_point(field_release:sync_pb.ArticleSpecifics.title)
    clear_has_title();
    return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticleSpecifics::set_allocated_title(::std::string* title)
{
    if (title != NULL) {
        set_has_title();
    } else {
        clear_has_title();
    }
    title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleSpecifics.title)
}

// repeated .sync_pb.ArticlePage pages = 3;
int ArticleSpecifics::pages_size() const
{
    return pages_.size();
}
void ArticleSpecifics::clear_pages()
{
    pages_.Clear();
}
const ::sync_pb::ArticlePage& ArticleSpecifics::pages(int index) const
{
    // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.pages)
    return pages_.Get(index);
}
::sync_pb::ArticlePage* ArticleSpecifics::mutable_pages(int index)
{
    // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.pages)
    return pages_.Mutable(index);
}
::sync_pb::ArticlePage* ArticleSpecifics::add_pages()
{
    // @@protoc_insertion_point(field_add:sync_pb.ArticleSpecifics.pages)
    return pages_.Add();
}
::google::protobuf::RepeatedPtrField<::sync_pb::ArticlePage>*
ArticleSpecifics::mutable_pages()
{
    // @@protoc_insertion_point(field_mutable_list:sync_pb.ArticleSpecifics.pages)
    return &pages_;
}
const ::google::protobuf::RepeatedPtrField<::sync_pb::ArticlePage>&
ArticleSpecifics::pages() const
{
    // @@protoc_insertion_point(field_list:sync_pb.ArticleSpecifics.pages)
    return pages_;
}

// optional .sync_pb.ArticleAttachments attachments = 4;
bool ArticleSpecifics::has_attachments() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void ArticleSpecifics::set_has_attachments()
{
    _has_bits_[0] |= 0x00000008u;
}
void ArticleSpecifics::clear_has_attachments()
{
    _has_bits_[0] &= ~0x00000008u;
}
void ArticleSpecifics::clear_attachments()
{
    if (attachments_ != NULL)
        attachments_->::sync_pb::ArticleAttachments::Clear();
    clear_has_attachments();
}
const ::sync_pb::ArticleAttachments& ArticleSpecifics::attachments() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ArticleSpecifics.attachments)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return attachments_ != NULL ? *attachments_ : *default_instance().attachments_;
#else
    return attachments_ != NULL ? *attachments_ : *default_instance_->attachments_;
#endif
}
::sync_pb::ArticleAttachments* ArticleSpecifics::mutable_attachments()
{
    set_has_attachments();
    if (attachments_ == NULL) {
        attachments_ = new ::sync_pb::ArticleAttachments;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ArticleSpecifics.attachments)
    return attachments_;
}
::sync_pb::ArticleAttachments* ArticleSpecifics::release_attachments()
{
    // @@protoc_insertion_point(field_release:sync_pb.ArticleSpecifics.attachments)
    clear_has_attachments();
    ::sync_pb::ArticleAttachments* temp = attachments_;
    attachments_ = NULL;
    return temp;
}
void ArticleSpecifics::set_allocated_attachments(::sync_pb::ArticleAttachments* attachments)
{
    delete attachments_;
    attachments_ = attachments;
    if (attachments) {
        set_has_attachments();
    } else {
        clear_has_attachments();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleSpecifics.attachments)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForArticlePage(
    ArticlePage* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArticlePage::kUrlFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ArticlePage::ArticlePage()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ArticlePage)
}

void ArticlePage::InitAsDefaultInstance()
{
}

ArticlePage::ArticlePage(const ArticlePage& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ArticlePage)
}

void ArticlePage::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArticlePage::~ArticlePage()
{
    // @@protoc_insertion_point(destructor:sync_pb.ArticlePage)
    SharedDtor();
}

void ArticlePage::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void ArticlePage::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArticlePage& ArticlePage::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_article_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_article_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

ArticlePage* ArticlePage::default_instance_ = NULL;

ArticlePage* ArticlePage::New(::google::protobuf::Arena* arena) const
{
    ArticlePage* n = new ArticlePage;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ArticlePage::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.ArticlePage)
    if (has_url()) {
        url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ArticlePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForArticlePage, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ArticlePage)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string url = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_url()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ArticlePage)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ArticlePage)
    return false;
#undef DO_
}

void ArticlePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ArticlePage)
    // optional string url = 1;
    if (has_url()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->url(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ArticlePage)
}

int ArticlePage::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ArticlePage)
    int total_size = 0;

    // optional string url = 1;
    if (has_url()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->url());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ArticlePage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ArticlePage*>(&from));
}

void ArticlePage::MergeFrom(const ArticlePage& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ArticlePage)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_url()) {
            set_has_url();
            url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ArticlePage::CopyFrom(const ArticlePage& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ArticlePage)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ArticlePage::IsInitialized() const
{

    return true;
}

void ArticlePage::Swap(ArticlePage* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ArticlePage::InternalSwap(ArticlePage* other)
{
    url_.Swap(&other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ArticlePage::GetTypeName() const
{
    return "sync_pb.ArticlePage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArticlePage

// optional string url = 1;
bool ArticlePage::has_url() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArticlePage::set_has_url()
{
    _has_bits_[0] |= 0x00000001u;
}
void ArticlePage::clear_has_url()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ArticlePage::clear_url()
{
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_url();
}
const ::std::string& ArticlePage::url() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ArticlePage.url)
    return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticlePage::set_url(const ::std::string& value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:sync_pb.ArticlePage.url)
}
void ArticlePage::set_url(const char* value)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:sync_pb.ArticlePage.url)
}
void ArticlePage::set_url(const char* value, size_t size)
{
    set_has_url();
    url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:sync_pb.ArticlePage.url)
}
::std::string* ArticlePage::mutable_url()
{
    set_has_url();
    // @@protoc_insertion_point(field_mutable:sync_pb.ArticlePage.url)
    return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ArticlePage::release_url()
{
    // @@protoc_insertion_point(field_release:sync_pb.ArticlePage.url)
    clear_has_url();
    return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ArticlePage::set_allocated_url(::std::string* url)
{
    if (url != NULL) {
        set_has_url();
    } else {
        clear_has_url();
    }
    url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticlePage.url)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForArticleAttachments(
    ArticleAttachments* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArticleAttachments::kDistilledArticleFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ArticleAttachments::ArticleAttachments()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:sync_pb.ArticleAttachments)
}

void ArticleAttachments::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    distilled_article_ = const_cast<::sync_pb::AttachmentIdProto*>(
        ::sync_pb::AttachmentIdProto::internal_default_instance());
#else
    distilled_article_ = const_cast<::sync_pb::AttachmentIdProto*>(&::sync_pb::AttachmentIdProto::default_instance());
#endif
}

ArticleAttachments::ArticleAttachments(const ArticleAttachments& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:sync_pb.ArticleAttachments)
}

void ArticleAttachments::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    distilled_article_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArticleAttachments::~ArticleAttachments()
{
    // @@protoc_insertion_point(destructor:sync_pb.ArticleAttachments)
    SharedDtor();
}

void ArticleAttachments::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete distilled_article_;
    }
}

void ArticleAttachments::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArticleAttachments& ArticleAttachments::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_article_5fspecifics_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_article_5fspecifics_2eproto();
#endif
    return *default_instance_;
}

ArticleAttachments* ArticleAttachments::default_instance_ = NULL;

ArticleAttachments* ArticleAttachments::New(::google::protobuf::Arena* arena) const
{
    ArticleAttachments* n = new ArticleAttachments;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ArticleAttachments::Clear()
{
    // @@protoc_insertion_point(message_clear_start:sync_pb.ArticleAttachments)
    if (has_distilled_article()) {
        if (distilled_article_ != NULL)
            distilled_article_->::sync_pb::AttachmentIdProto::Clear();
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ArticleAttachments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForArticleAttachments, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:sync_pb.ArticleAttachments)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .sync_pb.AttachmentIdProto distilled_article = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_distilled_article()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:sync_pb.ArticleAttachments)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:sync_pb.ArticleAttachments)
    return false;
#undef DO_
}

void ArticleAttachments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:sync_pb.ArticleAttachments)
    // optional .sync_pb.AttachmentIdProto distilled_article = 1;
    if (has_distilled_article()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->distilled_article_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:sync_pb.ArticleAttachments)
}

int ArticleAttachments::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:sync_pb.ArticleAttachments)
    int total_size = 0;

    // optional .sync_pb.AttachmentIdProto distilled_article = 1;
    if (has_distilled_article()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->distilled_article_);
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ArticleAttachments::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ArticleAttachments*>(&from));
}

void ArticleAttachments::MergeFrom(const ArticleAttachments& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ArticleAttachments)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_distilled_article()) {
            mutable_distilled_article()->::sync_pb::AttachmentIdProto::MergeFrom(from.distilled_article());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ArticleAttachments::CopyFrom(const ArticleAttachments& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ArticleAttachments)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ArticleAttachments::IsInitialized() const
{

    return true;
}

void ArticleAttachments::Swap(ArticleAttachments* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ArticleAttachments::InternalSwap(ArticleAttachments* other)
{
    std::swap(distilled_article_, other->distilled_article_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ArticleAttachments::GetTypeName() const
{
    return "sync_pb.ArticleAttachments";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArticleAttachments

// optional .sync_pb.AttachmentIdProto distilled_article = 1;
bool ArticleAttachments::has_distilled_article() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArticleAttachments::set_has_distilled_article()
{
    _has_bits_[0] |= 0x00000001u;
}
void ArticleAttachments::clear_has_distilled_article()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ArticleAttachments::clear_distilled_article()
{
    if (distilled_article_ != NULL)
        distilled_article_->::sync_pb::AttachmentIdProto::Clear();
    clear_has_distilled_article();
}
const ::sync_pb::AttachmentIdProto& ArticleAttachments::distilled_article() const
{
    // @@protoc_insertion_point(field_get:sync_pb.ArticleAttachments.distilled_article)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return distilled_article_ != NULL ? *distilled_article_ : *default_instance().distilled_article_;
#else
    return distilled_article_ != NULL ? *distilled_article_ : *default_instance_->distilled_article_;
#endif
}
::sync_pb::AttachmentIdProto* ArticleAttachments::mutable_distilled_article()
{
    set_has_distilled_article();
    if (distilled_article_ == NULL) {
        distilled_article_ = new ::sync_pb::AttachmentIdProto;
    }
    // @@protoc_insertion_point(field_mutable:sync_pb.ArticleAttachments.distilled_article)
    return distilled_article_;
}
::sync_pb::AttachmentIdProto* ArticleAttachments::release_distilled_article()
{
    // @@protoc_insertion_point(field_release:sync_pb.ArticleAttachments.distilled_article)
    clear_has_distilled_article();
    ::sync_pb::AttachmentIdProto* temp = distilled_article_;
    distilled_article_ = NULL;
    return temp;
}
void ArticleAttachments::set_allocated_distilled_article(::sync_pb::AttachmentIdProto* distilled_article)
{
    delete distilled_article_;
    distilled_article_ = distilled_article;
    if (distilled_article) {
        set_has_distilled_article();
    } else {
        clear_has_distilled_article();
    }
    // @@protoc_insertion_point(field_set_allocated:sync_pb.ArticleAttachments.distilled_article)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace sync_pb

// @@protoc_insertion_point(global_scope)
