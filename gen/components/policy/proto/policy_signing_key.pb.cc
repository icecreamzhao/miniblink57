// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_signing_key.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "policy_signing_key.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace enterprise_management {

void protobuf_ShutdownFile_policy_5fsigning_5fkey_2eproto()
{
    delete PolicySigningKey::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_policy_5fsigning_5fkey_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_policy_5fsigning_5fkey_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    PolicySigningKey::default_instance_ = new PolicySigningKey();
    PolicySigningKey::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_policy_5fsigning_5fkey_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_policy_5fsigning_5fkey_2eproto_once_);
void protobuf_AddDesc_policy_5fsigning_5fkey_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_policy_5fsigning_5fkey_2eproto_once_,
        &protobuf_AddDesc_policy_5fsigning_5fkey_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_policy_5fsigning_5fkey_2eproto {
    StaticDescriptorInitializer_policy_5fsigning_5fkey_2eproto()
    {
        protobuf_AddDesc_policy_5fsigning_5fkey_2eproto();
    }
} static_descriptor_initializer_policy_5fsigning_5fkey_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForPolicySigningKey(
    PolicySigningKey* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicySigningKey::kSigningKeyFieldNumber;
const int PolicySigningKey::kSigningKeySignatureFieldNumber;
const int PolicySigningKey::kVerificationKeyFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicySigningKey::PolicySigningKey()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.PolicySigningKey)
}

void PolicySigningKey::InitAsDefaultInstance()
{
}

PolicySigningKey::PolicySigningKey(const PolicySigningKey& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicySigningKey)
}

void PolicySigningKey::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signing_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signing_key_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    verification_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicySigningKey::~PolicySigningKey()
{
    // @@protoc_insertion_point(destructor:enterprise_management.PolicySigningKey)
    SharedDtor();
}

void PolicySigningKey::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signing_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signing_key_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    verification_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PolicySigningKey::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicySigningKey& PolicySigningKey::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_policy_5fsigning_5fkey_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_policy_5fsigning_5fkey_2eproto();
#endif
    return *default_instance_;
}

PolicySigningKey* PolicySigningKey::default_instance_ = NULL;

PolicySigningKey* PolicySigningKey::New(::google::protobuf::Arena* arena) const
{
    PolicySigningKey* n = new PolicySigningKey;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PolicySigningKey::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.PolicySigningKey)
    if (_has_bits_[0 / 32] & 7u) {
        if (has_signing_key()) {
            signing_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_signing_key_signature()) {
            signing_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_verification_key()) {
            verification_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PolicySigningKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPolicySigningKey, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.PolicySigningKey)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes signing_key = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_signing_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_signing_key_signature;
            break;
        }

        // optional bytes signing_key_signature = 2;
        case 2: {
            if (tag == 18) {
            parse_signing_key_signature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_signing_key_signature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_verification_key;
            break;
        }

        // optional bytes verification_key = 3;
        case 3: {
            if (tag == 26) {
            parse_verification_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_verification_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.PolicySigningKey)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.PolicySigningKey)
    return false;
#undef DO_
}

void PolicySigningKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.PolicySigningKey)
    // optional bytes signing_key = 1;
    if (has_signing_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->signing_key(), output);
    }

    // optional bytes signing_key_signature = 2;
    if (has_signing_key_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            2, this->signing_key_signature(), output);
    }

    // optional bytes verification_key = 3;
    if (has_verification_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            3, this->verification_key(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.PolicySigningKey)
}

int PolicySigningKey::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicySigningKey)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional bytes signing_key = 1;
        if (has_signing_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->signing_key());
        }

        // optional bytes signing_key_signature = 2;
        if (has_signing_key_signature()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->signing_key_signature());
        }

        // optional bytes verification_key = 3;
        if (has_verification_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->verification_key());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PolicySigningKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PolicySigningKey*>(&from));
}

void PolicySigningKey::MergeFrom(const PolicySigningKey& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicySigningKey)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_signing_key()) {
            set_has_signing_key();
            signing_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signing_key_);
        }
        if (from.has_signing_key_signature()) {
            set_has_signing_key_signature();
            signing_key_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signing_key_signature_);
        }
        if (from.has_verification_key()) {
            set_has_verification_key();
            verification_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verification_key_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PolicySigningKey::CopyFrom(const PolicySigningKey& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicySigningKey)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PolicySigningKey::IsInitialized() const
{

    return true;
}

void PolicySigningKey::Swap(PolicySigningKey* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PolicySigningKey::InternalSwap(PolicySigningKey* other)
{
    signing_key_.Swap(&other->signing_key_);
    signing_key_signature_.Swap(&other->signing_key_signature_);
    verification_key_.Swap(&other->verification_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicySigningKey::GetTypeName() const
{
    return "enterprise_management.PolicySigningKey";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicySigningKey

// optional bytes signing_key = 1;
bool PolicySigningKey::has_signing_key() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicySigningKey::set_has_signing_key()
{
    _has_bits_[0] |= 0x00000001u;
}
void PolicySigningKey::clear_has_signing_key()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PolicySigningKey::clear_signing_key()
{
    signing_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signing_key();
}
const ::std::string& PolicySigningKey::signing_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key)
    return signing_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicySigningKey::set_signing_key(const ::std::string& value)
{
    set_has_signing_key();
    signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key)
}
void PolicySigningKey::set_signing_key(const char* value)
{
    set_has_signing_key();
    signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.signing_key)
}
void PolicySigningKey::set_signing_key(const void* value, size_t size)
{
    set_has_signing_key();
    signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.signing_key)
}
::std::string* PolicySigningKey::mutable_signing_key()
{
    set_has_signing_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key)
    return signing_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicySigningKey::release_signing_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key)
    clear_has_signing_key();
    return signing_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicySigningKey::set_allocated_signing_key(::std::string* signing_key)
{
    if (signing_key != NULL) {
        set_has_signing_key();
    } else {
        clear_has_signing_key();
    }
    signing_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signing_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key)
}

// optional bytes signing_key_signature = 2;
bool PolicySigningKey::has_signing_key_signature() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicySigningKey::set_has_signing_key_signature()
{
    _has_bits_[0] |= 0x00000002u;
}
void PolicySigningKey::clear_has_signing_key_signature()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PolicySigningKey::clear_signing_key_signature()
{
    signing_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signing_key_signature();
}
const ::std::string& PolicySigningKey::signing_key_signature() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key_signature)
    return signing_key_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicySigningKey::set_signing_key_signature(const ::std::string& value)
{
    set_has_signing_key_signature();
    signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key_signature)
}
void PolicySigningKey::set_signing_key_signature(const char* value)
{
    set_has_signing_key_signature();
    signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.signing_key_signature)
}
void PolicySigningKey::set_signing_key_signature(const void* value, size_t size)
{
    set_has_signing_key_signature();
    signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.signing_key_signature)
}
::std::string* PolicySigningKey::mutable_signing_key_signature()
{
    set_has_signing_key_signature();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key_signature)
    return signing_key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicySigningKey::release_signing_key_signature()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key_signature)
    clear_has_signing_key_signature();
    return signing_key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicySigningKey::set_allocated_signing_key_signature(::std::string* signing_key_signature)
{
    if (signing_key_signature != NULL) {
        set_has_signing_key_signature();
    } else {
        clear_has_signing_key_signature();
    }
    signing_key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signing_key_signature);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key_signature)
}

// optional bytes verification_key = 3;
bool PolicySigningKey::has_verification_key() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicySigningKey::set_has_verification_key()
{
    _has_bits_[0] |= 0x00000004u;
}
void PolicySigningKey::clear_has_verification_key()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PolicySigningKey::clear_verification_key()
{
    verification_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_verification_key();
}
const ::std::string& PolicySigningKey::verification_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.verification_key)
    return verification_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicySigningKey::set_verification_key(const ::std::string& value)
{
    set_has_verification_key();
    verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.verification_key)
}
void PolicySigningKey::set_verification_key(const char* value)
{
    set_has_verification_key();
    verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.verification_key)
}
void PolicySigningKey::set_verification_key(const void* value, size_t size)
{
    set_has_verification_key();
    verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.verification_key)
}
::std::string* PolicySigningKey::mutable_verification_key()
{
    set_has_verification_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.verification_key)
    return verification_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicySigningKey::release_verification_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.verification_key)
    clear_has_verification_key();
    return verification_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicySigningKey::set_allocated_verification_key(::std::string* verification_key)
{
    if (verification_key != NULL) {
        set_has_verification_key();
    } else {
        clear_has_verification_key();
    }
    verification_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.verification_key)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace enterprise_management

// @@protoc_insertion_point(global_scope)
