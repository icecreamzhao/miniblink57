// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_signing_key.proto

#ifndef PROTOBUF_policy_5fsigning_5fkey_2eproto__INCLUDED
#define PROTOBUF_policy_5fsigning_5fkey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)
#include "components/policy/proto/policy_proto_export.h"

namespace enterprise_management {

// Internal implementation detail -- do not call these.
void POLICY_PROTO_EXPORT protobuf_AddDesc_policy_5fsigning_5fkey_2eproto();
void protobuf_AssignDesc_policy_5fsigning_5fkey_2eproto();
void protobuf_ShutdownFile_policy_5fsigning_5fkey_2eproto();

class PolicySigningKey;

// ===================================================================

class POLICY_PROTO_EXPORT PolicySigningKey : public ::google::protobuf::MessageLite {
public:
    PolicySigningKey();
    virtual ~PolicySigningKey();

    PolicySigningKey(const PolicySigningKey& from);

    inline PolicySigningKey& operator=(const PolicySigningKey& from)
    {
        CopyFrom(from);
        return *this;
    }

    inline const ::std::string& unknown_fields() const
    {
        return _unknown_fields_.GetNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string* mutable_unknown_fields()
    {
        return _unknown_fields_.MutableNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    static const PolicySigningKey& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const PolicySigningKey* internal_default_instance()
    {
        return default_instance_;
    }
#endif

    GOOGLE_ATTRIBUTE_NOINLINE void Swap(PolicySigningKey* other);

    // implements Message ----------------------------------------------

    inline PolicySigningKey* New() const { return New(NULL); }

    PolicySigningKey* New(::google::protobuf::Arena* arena) const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const PolicySigningKey& from);
    void MergeFrom(const PolicySigningKey& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    void DiscardUnknownFields();
    int GetCachedSize() const { return _cached_size_; }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
    void InternalSwap(PolicySigningKey* other);

private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const
    {
        return _arena_ptr_;
    }
    inline ::google::protobuf::Arena* MaybeArenaPtr() const
    {
        return _arena_ptr_;
    }

public:
    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional bytes signing_key = 1;
    bool has_signing_key() const;
    void clear_signing_key();
    static const int kSigningKeyFieldNumber = 1;
    const ::std::string& signing_key() const;
    void set_signing_key(const ::std::string& value);
    void set_signing_key(const char* value);
    void set_signing_key(const void* value, size_t size);
    ::std::string* mutable_signing_key();
    ::std::string* release_signing_key();
    void set_allocated_signing_key(::std::string* signing_key);

    // optional bytes signing_key_signature = 2;
    bool has_signing_key_signature() const;
    void clear_signing_key_signature();
    static const int kSigningKeySignatureFieldNumber = 2;
    const ::std::string& signing_key_signature() const;
    void set_signing_key_signature(const ::std::string& value);
    void set_signing_key_signature(const char* value);
    void set_signing_key_signature(const void* value, size_t size);
    ::std::string* mutable_signing_key_signature();
    ::std::string* release_signing_key_signature();
    void set_allocated_signing_key_signature(::std::string* signing_key_signature);

    // optional bytes verification_key = 3;
    bool has_verification_key() const;
    void clear_verification_key();
    static const int kVerificationKeyFieldNumber = 3;
    const ::std::string& verification_key() const;
    void set_verification_key(const ::std::string& value);
    void set_verification_key(const char* value);
    void set_verification_key(const void* value, size_t size);
    ::std::string* mutable_verification_key();
    ::std::string* release_verification_key();
    void set_allocated_verification_key(::std::string* verification_key);

    // @@protoc_insertion_point(class_scope:enterprise_management.PolicySigningKey)
private:
    inline void set_has_signing_key();
    inline void clear_has_signing_key();
    inline void set_has_signing_key_signature();
    inline void clear_has_signing_key_signature();
    inline void set_has_verification_key();
    inline void clear_has_verification_key();

    ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
    ::google::protobuf::Arena* _arena_ptr_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr signing_key_;
    ::google::protobuf::internal::ArenaStringPtr signing_key_signature_;
    ::google::protobuf::internal::ArenaStringPtr verification_key_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void POLICY_PROTO_EXPORT protobuf_AddDesc_policy_5fsigning_5fkey_2eproto_impl();
#else
    friend void POLICY_PROTO_EXPORT protobuf_AddDesc_policy_5fsigning_5fkey_2eproto();
#endif
    friend void protobuf_AssignDesc_policy_5fsigning_5fkey_2eproto();
    friend void protobuf_ShutdownFile_policy_5fsigning_5fkey_2eproto();

    void InitAsDefaultInstance();
    static PolicySigningKey* default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicySigningKey

// optional bytes signing_key = 1;
inline bool PolicySigningKey::has_signing_key() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicySigningKey::set_has_signing_key()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void PolicySigningKey::clear_has_signing_key()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void PolicySigningKey::clear_signing_key()
{
    signing_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signing_key();
}
inline const ::std::string& PolicySigningKey::signing_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key)
    return signing_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_signing_key(const ::std::string& value)
{
    set_has_signing_key();
    signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key)
}
inline void PolicySigningKey::set_signing_key(const char* value)
{
    set_has_signing_key();
    signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.signing_key)
}
inline void PolicySigningKey::set_signing_key(const void* value, size_t size)
{
    set_has_signing_key();
    signing_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.signing_key)
}
inline ::std::string* PolicySigningKey::mutable_signing_key()
{
    set_has_signing_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key)
    return signing_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicySigningKey::release_signing_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key)
    clear_has_signing_key();
    return signing_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_allocated_signing_key(::std::string* signing_key)
{
    if (signing_key != NULL) {
        set_has_signing_key();
    } else {
        clear_has_signing_key();
    }
    signing_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signing_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key)
}

// optional bytes signing_key_signature = 2;
inline bool PolicySigningKey::has_signing_key_signature() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicySigningKey::set_has_signing_key_signature()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void PolicySigningKey::clear_has_signing_key_signature()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void PolicySigningKey::clear_signing_key_signature()
{
    signing_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signing_key_signature();
}
inline const ::std::string& PolicySigningKey::signing_key_signature() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key_signature)
    return signing_key_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_signing_key_signature(const ::std::string& value)
{
    set_has_signing_key_signature();
    signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key_signature)
}
inline void PolicySigningKey::set_signing_key_signature(const char* value)
{
    set_has_signing_key_signature();
    signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.signing_key_signature)
}
inline void PolicySigningKey::set_signing_key_signature(const void* value, size_t size)
{
    set_has_signing_key_signature();
    signing_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.signing_key_signature)
}
inline ::std::string* PolicySigningKey::mutable_signing_key_signature()
{
    set_has_signing_key_signature();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key_signature)
    return signing_key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicySigningKey::release_signing_key_signature()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key_signature)
    clear_has_signing_key_signature();
    return signing_key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_allocated_signing_key_signature(::std::string* signing_key_signature)
{
    if (signing_key_signature != NULL) {
        set_has_signing_key_signature();
    } else {
        clear_has_signing_key_signature();
    }
    signing_key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signing_key_signature);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key_signature)
}

// optional bytes verification_key = 3;
inline bool PolicySigningKey::has_verification_key() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicySigningKey::set_has_verification_key()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void PolicySigningKey::clear_has_verification_key()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void PolicySigningKey::clear_verification_key()
{
    verification_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_verification_key();
}
inline const ::std::string& PolicySigningKey::verification_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.verification_key)
    return verification_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_verification_key(const ::std::string& value)
{
    set_has_verification_key();
    verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.verification_key)
}
inline void PolicySigningKey::set_verification_key(const char* value)
{
    set_has_verification_key();
    verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicySigningKey.verification_key)
}
inline void PolicySigningKey::set_verification_key(const void* value, size_t size)
{
    set_has_verification_key();
    verification_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicySigningKey.verification_key)
}
inline ::std::string* PolicySigningKey::mutable_verification_key()
{
    set_has_verification_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.verification_key)
    return verification_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicySigningKey::release_verification_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.verification_key)
    clear_has_verification_key();
    return verification_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicySigningKey::set_allocated_verification_key(::std::string* verification_key)
{
    if (verification_key != NULL) {
        set_has_verification_key();
    } else {
        clear_has_verification_key();
    }
    verification_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.verification_key)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace enterprise_management

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_policy_5fsigning_5fkey_2eproto__INCLUDED
