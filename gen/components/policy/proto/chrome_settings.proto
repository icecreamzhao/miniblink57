//
// DO NOT MODIFY THIS FILE DIRECTLY!
// IT IS GENERATED BY generate_policy_source.py
// FROM ../../components/policy/resources/policy_templates.json
//


syntax = "proto2";

option optimize_for = LITE_RUNTIME;

package enterprise_management;

// For StringList and PolicyOptions.
import "cloud_policy.proto";

// PBs for individual settings.

// Configure the home page URL
//
// Configures the default home page URL in Google Chrome and prevents users from
// changing it.
//
// The home page is the page opened by the Home button. The pages that open on
// startup are controlled by the RestoreOnStartup policies.
//
// The home page type can either be set to a URL you specify here or set to the
// New Tab Page. If you select the New Tab Page, then this policy does not take
// effect.
//
// If you enable this setting, users cannot change their home page URL in Google
// Chrome, but they can still choose the New Tab Page as their home page.
//
// Leaving this policy not set will allow the user to choose their home page on
// their own if HomepageIsNewTabPage is not set too.
//
// This policy is not available on Windows instances that are not joined
// to an Active Directory domain.
//
// Supported on: chrome_os, linux, mac, win
message HomepageLocationProto {
  optional PolicyOptions policy_options = 1;
  optional string HomepageLocation = 2;
}

// Use New Tab Page as homepage
//
// Configures the type of the default home page in Google Chrome and prevents
// users from changing home page preferences. The home page can either be set to
// a URL you specify or set to the New Tab Page.
//
// If you enable this setting, the New Tab Page is always used for the home
// page, and the home page URL location is ignored.
//
// If you disable this setting, the user's homepage will never be the New Tab
// Page, unless its URL is set to 'chrome://newtab'.
//
// If you enable or disable this setting, users cannot change their homepage
// type in Google Chrome.
//
// Leaving this policy not set will allow the user to choose whether the new tab
// page is their home page on their own.
//
// This policy is not available on Windows instances that are not joined
// to an Active Directory domain.
//
// Supported on: chrome_os, linux, mac, win
message HomepageIsNewTabPageProto {
  optional PolicyOptions policy_options = 1;
  optional bool HomepageIsNewTabPage = 2;
}

// Set Google Chrome as Default Browser
//
// Configures the default browser checks in Google Chrome and prevents users
// from changing them.
//
// If you enable this setting, Google Chrome will always check on startup
// whether it is the default browser and automatically register itself if
// possible.
//
// If this setting is disabled, Google Chrome will never check if it is the
// default browser and will disable user controls for setting this option.
//
// If this setting is not set, Google Chrome will allow the user to control
// whether it is the default browser and whether user notifications should be
// shown when it isn't.
//
// Supported on: linux, mac, win
message DefaultBrowserSettingEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DefaultBrowserSettingEnabled = 2;
}

// Application locale
//
// Configures the application locale in Google Chrome and prevents users from
// changing the locale.
//
// If you enable this setting, Google Chrome uses the specified locale. If the
// configured locale is not supported, 'en-US' is used instead.
//
// If this setting is disabled or not set, Google Chrome uses either the user-
// specified preferred locale (if configured), the system locale or the fallback
// locale 'en-US'.
//
// Supported on: win
message ApplicationLocaleValueProto {
  optional PolicyOptions policy_options = 1;
  optional string ApplicationLocaleValue = 2;
}

// Enable alternate error pages
//
// Enables the use of alternate error pages that are built into Google Chrome
// (such as 'page not found') and prevents users from changing this setting.
//
// If you enable this setting, alternate error pages are used.
//
// If you disable this setting, alternate error pages are never used.
//
// If you enable or disable this setting, users cannot change or override this
// setting in Google Chrome.
//
// If this policy is left not set, this will be enabled but the user will be
// able to change it.
//
// Supported on: android, chrome_os, linux, mac, win
message AlternateErrorPagesEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool AlternateErrorPagesEnabled = 2;
}

// Enable search suggestions
//
// Enables search suggestions in Google Chrome's omnibox and prevents users from
// changing this setting.
//
// If you enable this setting, search suggestions are used.
//
// If you disable this setting, search suggestions are never used.
//
// If you enable or disable this setting, users cannot change or override this
// setting in Google Chrome.
//
// If this policy is left not set, this will be enabled but the user will be
// able to change it.
//
// Supported on: android, chrome_os, linux, mac, win
message SearchSuggestEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SearchSuggestEnabled = 2;
}

// Enable network prediction
//
// This policy is deprecated in M48 in favor of NetworkPredictionOptions, and
// removed in M54.
//
// Enables network prediction in Google Chrome and prevents users from changing
// this setting.
//
// This controls not only DNS prefetching but also TCP and SSL preconnection and
// prerendering of web pages. The policy name refers to DNS prefetching for
// historical reasons.
//
// If you enable or disable this setting, users cannot change or override this
// setting in Google Chrome.
//
// If this policy is left not set, this will be enabled but the user will be
// able to change it.
//
// Supported on:
message DnsPrefetchingEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DnsPrefetchingEnabled = 2;
}

// Enable network prediction
//
// Enables network prediction in Google Chrome and prevents users from changing
// this setting.
//
// This controls DNS prefetching, TCP and SSL preconnection and prerendering of
// web pages.
//
// If you set this preference to 'always', 'never', or 'WiFi only', users cannot
// change or override this setting in Google Chrome.
//
// If this policy is left not set, network prediction will be enabled but the
// user will be able to change it.
//
// Valid values:
//   0: Predict network actions on any network connection
//   1: Predict network actions on any network that is not cellular.
//           (Deprecated in 50, removed in 52. After 52, if value 1 is set, it
// will be treated as 0 - predict network actions on any network connection.)
//   2: Do not predict network actions on any network connection
//
// Supported on: android, chrome_os, linux, mac, win
message NetworkPredictionOptionsProto {
  optional PolicyOptions policy_options = 1;
  optional int64 NetworkPredictionOptions = 2;
}

// Enable WPAD optimization
//
// Allows to turn off WPAD (Web Proxy Auto-Discovery) optimization in Google
// Chrome.
//
// If this policy is set to false, WPAD optimization is disabled causing Google
// Chrome to wait longer for DNS-based WPAD servers.  If the policy is not set
// or is enabled, WPAD optimization is enabled.
//
// Independent of whether or how this policy is set, the WPAD optimization
// setting cannot be changed by users.
//
// Supported on: chrome_os, linux, mac, win
message WPADQuickCheckEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool WPADQuickCheckEnabled = 2;
}

// Disable SPDY protocol
//
// This policy is deprecated in M53 and removed in M54, because SPDY/3.1 support
// is removed.
//
// Disables use of the SPDY protocol in Google Chrome.
//
// If this policy is enabled the SPDY protocol will not be available in Google
// Chrome.
//
// Setting this policy to disabled will allow the usage of SPDY.
//
// If this policy is left not set, SPDY will be available.
//
// Supported on:
message DisableSpdyProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisableSpdy = 2;
}

// Disable URL protocol schemes
//
// This policy is deprecated, please use URLBlacklist instead.
//
// Disables the listed protocol schemes in Google Chrome.
//
// URLs using a scheme from this list will not load and can not be navigated to.
//
// If this policy is left not set or the list is empty all schemes will be
// accessible in Google Chrome.
//
// Supported on: chrome_os, linux, mac, win
message DisabledSchemesProto {
  optional PolicyOptions policy_options = 1;
  optional StringList DisabledSchemes = 2;
}

// Enables HTTP/0.9 support on non-default ports
//
// This policy enables HTTP/0.9 on ports other than 80 for HTTP and 443 for
// HTTPS.
//
// This policy is disabled by default, and if enabled, leaves users open to the
// security issue https://crbug.com/600352.
//
// This policy is intended to give enterprises a chance to migrate exising
// servers off of HTTP/0.9, and will be removed in the future.
//
// If this policy is not set, HTTP/0.9 will be disabled on non-default ports.
//
// Supported on: chrome_os, linux, mac, win
message Http09OnNonDefaultPortsEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool Http09OnNonDefaultPortsEnabled = 2;
}

// Enable JavaScript
//
// This policy is deprecated, please use DefaultJavaScriptSetting instead.
//
// Can be used to disabled JavaScript in Google Chrome.
//
// If this setting is disabled, web pages cannot use JavaScript and the user
// cannot change that setting.
//
// If this setting is enabled or not set, web pages can use JavaScript but the
// user can change that setting.
//
// Supported on: android, chrome_os, linux, mac, win
message JavascriptEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool JavascriptEnabled = 2;
}

// Enable Incognito mode
//
// This policy is deprecated. Please, use IncognitoModeAvailability instead.
// Enables Incognito mode in Google Chrome.
//
// If this setting is enabled or not configured, users can open web pages in
// incognito mode.
//
// If this setting is disabled, users cannot open web pages in incognito mode.
//
// If this policy is left not set, this will be enabled and the user will be
// able to use incognito mode.
//
// Supported on: android, chrome_os, linux, mac, win
message IncognitoEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool IncognitoEnabled = 2;
}

// Incognito mode availability
//
// Specifies whether the user may open pages in Incognito mode in Google Chrome.
//
// If 'Enabled' is selected or the policy is left unset, pages may be opened in
// Incognito mode.
//
// If 'Disabled' is selected, pages may not be opened in Incognito mode.
//
// If 'Forced' is selected, pages may be opened ONLY in Incognito mode.
//
// Valid values:
//   0: Incognito mode available
//   1: Incognito mode disabled
//   2: Incognito mode forced
//
// Supported on: android, chrome_os, linux, mac, win
message IncognitoModeAvailabilityProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IncognitoModeAvailability = 2;
}

// Disable saving browser history
//
// Disables saving browser history in Google Chrome and prevents users from
// changing this setting.
//
// If this setting is enabled, browsing history is not saved. This setting also
// disables tab syncing.
//
// If this setting is disabled or not set, browsing history is saved.
//
// Supported on: android, chrome_os, linux, mac, win
message SavingBrowserHistoryDisabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SavingBrowserHistoryDisabled = 2;
}

// Enable deleting browser and download history
//
// Enables deleting browser history and download history in Google Chrome and
// prevents users from changing this setting.
//
// Note that even with this policy disabled, the browsing and download history
// are not guaranteed to be retained: users may be able to edit or delete the
// history database files directly, and the browser itself may expire or archive
// any or all history items at any time.
//
// If this setting is enabled or not set, browsing and download history can be
// deleted.
//
// If this setting is disabled, browsing and download history cannot be deleted.
//
// Supported on: chrome_os, linux, mac, win
message AllowDeletingBrowserHistoryProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowDeletingBrowserHistory = 2;
}

// Allow Dinosaur Easter Egg Game
//
// Allow users to play dinosaur easter egg game when device is offline.
//
// If this policy is set to False, users will not be able to play the dinosaur
// easter egg game when device is offline. If this setting is set to True, users
// are allowed to play the dinosaur game. If this policy is not set, users are
// not allowed to play the dinosaur easter egg game on enrolled Chrome OS, but
// are allowed to play it under other circumstances.
//
// Supported on: chrome_os, linux, mac, win
message AllowDinosaurEasterEggProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowDinosaurEasterEgg = 2;
}

// Enable firewall traversal from remote access client
//
// This policy is no longer supported.
// Enables usage of STUN and relay servers when connecting to a remote client.
//
// If this setting is enabled, then this machine can discover and connect to
// remote host machines even if they are separated by a firewall.
//
// If this setting is disabled and outgoing UDP connections are filtered by the
// firewall, then this machine can only connect to host machines within the
// local network.
//
// Supported on:
message RemoteAccessClientFirewallTraversalProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessClientFirewallTraversal = 2;
}

// Configure the required domain name for remote access clients
//
// Configures the required client domain name that will be imposed on remote
// access clients and prevents users from changing it.
//
// If this setting is enabled, then only clients from the specified domain can
// connect to the host.
//
// If this setting is disabled or not set, then the default policy for the
// connection type is applied. For remote assistance, this allows clients from
// any domain can connect to the host; for anytime remote access, only the host
// owner can connect.
//
// See also RemoteAccessHostDomain.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostClientDomainProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostClientDomain = 2;
}

// Enable firewall traversal from remote access host
//
// Enables usage of STUN servers when remote clients are trying to establish a
// connection to this machine.
//
// If this setting is enabled, then remote clients can discover and connect to
// this machines even if they are separated by a firewall.
//
// If this setting is disabled and outgoing UDP connections are filtered by the
// firewall, then this machine will only allow connections from client machines
// within the local network.
//
// If this policy is left not set the setting will be enabled.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostFirewallTraversalProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostFirewallTraversal = 2;
}

// Configure the required domain name for remote access hosts
//
// Configures the required host domain name that will be imposed on remote
// access hosts and prevents users from changing it.
//
// If this setting is enabled, then hosts can be shared only using accounts
// registered on the specified domain name.
//
// If this setting is disabled or not set, then hosts can be shared using any
// account.
//
// See also RemoteAccessHostClientDomain.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostDomainProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostDomain = 2;
}

// Enable two-factor authentication for remote access hosts
//
// Enables two-factor authentication for remote access hosts instead of a user-
// specified PIN.
//
// If this setting is enabled, then users must provide a valid two-factor code
// when accessing a host.
//
// If this setting is disabled or not set, then two-factor will not be enabled
// and the default behavior of having a user-defined PIN will be used.
//
// Supported on:
message RemoteAccessHostRequireTwoFactorProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostRequireTwoFactor = 2;
}

// Configure the TalkGadget prefix for remote access hosts
//
// Configures the TalkGadget prefix that will be used by remote access hosts and
// prevents users from changing it.
//
// If specified, this prefix is prepended to the base TalkGadget name to create
// a full domain name for the TalkGadget. The base TalkGadget domain name is
// '.talkgadget.google.com'.
//
// If this setting is enabled, then hosts will use the custom domain name when
// accessing the TalkGadget instead of the default domain name.
//
// If this setting is disabled or not set, then the default TalkGadget domain
// name ('chromoting-host.talkgadget.google.com') will be used for all hosts.
//
// Remote access clients are not affected by this policy setting. They will
// always use 'chromoting-client.talkgadget.google.com' to access the
// TalkGadget.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostTalkGadgetPrefixProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostTalkGadgetPrefix = 2;
}

// Enable curtaining of remote access hosts
//
// Enables curtaining of remote access hosts while a connection is in progress.
//
// If this setting is enabled, then hosts' physical input and output devices are
// disabled while a remote connection is in progress.
//
// If this setting is disabled or not set, then both local and remote users can
// interact with the host when it is being shared.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostRequireCurtainProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostRequireCurtain = 2;
}

// Enable or disable PIN-less authentication for remote access hosts
//
// If this setting is enabled or not configured, then users can opt to pair
// clients and hosts at connection time, eliminating the need to enter a PIN
// every time.
//
// If this setting is disabled, then this feature will not be available.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostAllowClientPairingProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostAllowClientPairing = 2;
}

// Allow gnubby authentication for remote access hosts
//
// If this setting is enabled, then gnubby authentication requests will be
// proxied across a remote host connection.
//
// If this setting is disabled or not configured, gnubby authentication requests
// will not be proxied.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostAllowGnubbyAuthProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostAllowGnubbyAuth = 2;
}

// Enable the use of relay servers by the remote access host
//
// Enables usage of relay servers when remote clients are trying to establish a
// connection to this machine.
//
// If this setting is enabled, then remote clients can use relay servers to
// connect to this machine when a direct connection is not available (e.g. due
// to firewall restrictions).
//
// Note that if the policy RemoteAccessHostFirewallTraversal is disabled, this
// policy will be ignored.
//
// If this policy is left not set the setting will be enabled.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostAllowRelayedConnectionProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostAllowRelayedConnection = 2;
}

// Restrict the UDP port range used by the remote access host
//
// Restricts the UDP port range used by the remote access host in this machine.
//
// If this policy is left not set, or if it is set to an empty string, the
// remote access host will be allowed to use any available port, unless the
// policy RemoteAccessHostFirewallTraversal is disabled, in which case the
// remote access host will use UDP ports in the 12400-12409 range.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostUdpPortRangeProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostUdpPortRange = 2;
}

// Requires that the name of the local user and the remote access host owner
// match
//
// Requires that the name of the local user and the remote access host owner
// match.
//
// If this setting is enabled, then the remote access host compares the name of
// the local user (that the host is associated with) and the name of the Google
// account registered as the host owner (i.e. "johndoe" if the host is owned by
// "johndoe@example.com" Google account).  The remote access host will not start
// if the name of the host owner is different from the name of the local user
// that the host is associated with.  RemoteAccessHostMatchUsername policy
// should be used together with RemoteAccessHostDomain to also enforce that the
// Google account of the host owner is associated with a specific domain (i.e.
// "example.com").
//
// If this setting is disabled or not set, then the remote access host can be
// associated with any local user.
//
// Supported on: chrome_os, linux, mac
message RemoteAccessHostMatchUsernameProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostMatchUsername = 2;
}

// URL where remote access clients should obtain their authentication token
//
// URL where remote access clients should obtain their authentication token.
//
// If this policy is set, the remote access host will require authenticating
// clients to obtain an authentication token from this URL in order to connect.
// Must be used in conjunction with RemoteAccessHostTokenValidationUrl.
//
// This feature is currently disabled server-side.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostTokenUrlProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostTokenUrl = 2;
}

// URL for validating remote access client authentication token
//
// URL for validating remote access client authentication token.
//
// If this policy is set, the remote access host will use this URL to validate
// authentication tokens from remote access clients, in order to accept
// connections. Must be used in conjunction with RemoteAccessHostTokenUrl.
//
// This feature is currently disabled server-side.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostTokenValidationUrlProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostTokenValidationUrl = 2;
}

// Client certificate for connecting to RemoteAccessHostTokenValidationUrl
//
// Client certificate for connecting to RemoteAccessHostTokenValidationUrl.
//
// If this policy is set, the host will use a client certificate with the given
// issuer CN to authenticate to RemoteAccessHostTokenValidationUrl. Set it to
// "*" to use any available client certificate.
//
// This feature is currently disabled server-side.
//
// Supported on: chrome_os, linux, mac, win
message RemoteAccessHostTokenValidationCertificateIssuerProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostTokenValidationCertificateIssuer = 2;
}

// Policy overrides for Debug builds of the remote access host
//
// Overrides policies on Debug builds of the remote access host.
//
// The value is parsed as a JSON dictionary of policy name to policy value
// mappings.
//
// Supported on:
message RemoteAccessHostDebugOverridePoliciesProto {
  optional PolicyOptions policy_options = 1;
  optional string RemoteAccessHostDebugOverridePolicies = 2;
}

// Allow remote users to interact with elevated windows in remote assistance
// sessions
//
// If this setting is enabled, the remote assistance host will be run in a
// process with uiAccess permissions.  This will allow remote users to interact
// with elevated windows on the local user's desktop.
//
// If this setting is disabled or not configured, the remote assistance host
// will run in the user's context and remote users cannot interact with elevated
// windows on the desktop.
//
// Supported on: win
message RemoteAccessHostAllowUiAccessForRemoteAssistanceProto {
  optional PolicyOptions policy_options = 1;
  optional bool RemoteAccessHostAllowUiAccessForRemoteAssistance = 2;
}

// Enable printing
//
// Enables printing in Google Chrome and prevents users from changing this
// setting.
//
// If this setting is enabled or not configured, users can print.
//
// If this setting is disabled, users cannot print from Google Chrome. Printing
// is disabled in the wrench menu, extensions, JavaScript applications, etc. It
// is still possible to print from plugins that bypass Google Chrome while
// printing. For example, certain Flash applications have the print option in
// their context menu, which is not covered by this policy.
//
// Supported on: android, chrome_os, linux, mac, win
message PrintingEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool PrintingEnabled = 2;
}

// Enable Google Cloud Print proxy
//
// Enables Google Chrome to act as a proxy between Google Cloud Print and legacy
// printers connected to the machine.
//
// If this setting is enabled or not configured, users can enable the cloud
// print proxy by authentication with their Google account.
//
// If this setting is disabled, users cannot enable the proxy, and the machine
// will not be allowed to share it's printers with Google Cloud Print.
//
// Supported on: linux, mac, win
message CloudPrintProxyEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool CloudPrintProxyEnabled = 2;
}

// Force SafeSearch
//
// This policy is deprecated, please use ForceGoogleSafeSearch and
// ForceYouTubeRestrict instead. This policy is ignored if either the
// ForceGoogleSafeSearch, the ForceYouTubeRestrict or the (deprecated)
// ForceYouTubeSafetyMode policies are set.
//
// Forces queries in Google Web Search to be done with SafeSearch set to active
// and prevents users from changing this setting. This setting also forces
// Moderate Restricted Mode on YouTube.
//
// If you enable this setting, SafeSearch in Google Search and Moderate
// Restricted Mode YouTube is always active.
//
// If you disable this setting or do not set a value, SafeSearch in Google
// Search and Restricted Mode in YouTube is not enforced.
//
// Supported on: android, chrome_os, linux, mac, win
message ForceSafeSearchProto {
  optional PolicyOptions policy_options = 1;
  optional bool ForceSafeSearch = 2;
}

// Force Google SafeSearch
//
// Forces queries in Google Web Search to be done with SafeSearch set to active
// and prevents users from changing this setting.
//
// If you enable this setting, SafeSearch in Google Search is always active.
//
// If you disable this setting or do not set a value, SafeSearch in Google
// Search is not enforced.
//
// Supported on: android, chrome_os, linux, mac, win
message ForceGoogleSafeSearchProto {
  optional PolicyOptions policy_options = 1;
  optional bool ForceGoogleSafeSearch = 2;
}

// Force YouTube Safety Mode
//
// This policy is deprecated. Consider using ForceYouTubeRestrict, which
// overrides this policy and allows more fine-grained tuning.
//
// Forces YouTube Moderate Restricted Mode and prevents users from changing this
// setting.
//
// If this setting is enabled, Restricted Mode on YouTube is always enforced to
// be at least Moderate.
//
// If this setting is disabled or no value is set, Restricted Mode on YouTube is
// not enforced by Google Chrome. External policies such as YouTube policies
// might still enforce Restricted Mode, though.
//
// Supported on: android, chrome_os, linux, mac, win
message ForceYouTubeSafetyModeProto {
  optional PolicyOptions policy_options = 1;
  optional bool ForceYouTubeSafetyMode = 2;
}

// Force minimum YouTube Restricted Mode
//
// Enforces a minimum Restricted Mode on YouTube and prevents users from
// picking a less restricted mode.
//
// If this setting is set to Strict, Strict Restricted Mode on YouTube is always
// active.
//
// If this setting is set to Moderate, the user may only pick Moderate
// Restricted Mode
// and Strict Restricted Mode on YouTube, but cannot disable Restricted Mode.
//
// If this setting is set to Off or no value is set, Restricted Mode on YouTube
// is not enforced by Google Chrome. External policies such as YouTube policies
// might still enforce Restricted Mode, though.
//
// Valid values:
//   0: Do not enforce Restricted Mode on YouTube
//   1: Enforce at least Moderate Restricted Mode on YouTube
//   2: Enforce Strict Restricted Mode for YouTube
//
// Supported on: android, chrome_os, linux, mac, win
message ForceYouTubeRestrictProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ForceYouTubeRestrict = 2;
}

// Enable Safe Browsing
//
// Enables Google Chrome's Safe Browsing feature and prevents users from
// changing this setting.
//
// If you enable this setting, Safe Browsing is always active.
//
// If you disable this setting, Safe Browsing is never active.
//
// If you enable or disable this setting, users cannot change or override the
// "Enable phishing and malware protection" setting in Google Chrome.
//
// If this policy is left not set, this will be enabled but the user will be
// able to change it.
//
// Supported on: android, chrome_os, linux, mac, win
message SafeBrowsingEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SafeBrowsingEnabled = 2;
}

// Enable reporting of usage and crash-related data
//
// Enables anonymous reporting of usage and crash-related data about Google
// Chrome to Google and prevents users from changing this setting.
//
// If this setting is enabled, anonymous reporting of usage and crash-related
// data is sent to Google.  If it is disabled, this information is not sent
// to Google.  In both cases, users cannot change or override the setting.
// If this policy is left not set, the setting will be what the user chose
// upon installation / first run.
//
// This policy is not available on Windows instances that are not joined to
// an Active Directory domain.  (For Chrome OS, see
// DeviceMetricsReportingEnabled.)
//
// Supported on: linux, mac, win
message MetricsReportingEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool MetricsReportingEnabled = 2;
}

// Enable saving passwords to the password manager
//
//
// If this setting is enabled, users can have Google Chrome memorize passwords
// and provide them automatically the next time they log in to a site.
//
// If this settings is disabled, users cannot save new passwords but they
// may still use passwords that have been saved previously.
//
// If this policy is enabled or disabled, users cannot change or override
// it in Google Chrome. If this
// policy is unset, password saving is allowed (but can be turned off by
// the user).
//
// Supported on: android, chrome_os, linux, mac, win
message PasswordManagerEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool PasswordManagerEnabled = 2;
}

// Allow users to show passwords in Password Manager (deprecated)
//
// The associated setting was used before reauthentication on viewing passwords
// was introduced. Since then, the setting and hence this policy had no effect
// on the behavior of Chrome. The current behavior of Chrome is now the same as
// if the the policy was set to disable showing passwords in clear text in the
// password manager settings page. That means that the settings page contains
// just a placeholder, and only upon the user clicking "Show" (and
// reauthenticating, if applicable) Chrome shows the password. Original
// description of the policy follows below.
//
// Controls whether the user may show passwords in clear text in the password
// manager.
//
// If you disable this setting, the password manager does not allow showing
// stored passwords in clear text in the password manager window.
//
// If you enable or do not set this policy, users can view their passwords in
// clear text in the password manager.
//
// Supported on:
message PasswordManagerAllowShowPasswordsProto {
  optional PolicyOptions policy_options = 1;
  optional bool PasswordManagerAllowShowPasswords = 2;
}

// Enable AutoFill
//
// Enables Google Chrome's AutoFill feature and allows users to auto complete
// web forms using previously stored information such as address or credit card
// information.
//
// If you disable this setting, AutoFill will be inaccessible to users.
//
// If you enable this setting or do not set a value, AutoFill will remain under
// the control of the user. This will allow them to configure AutoFill profiles
// and to switch AutoFill on or off at their own discretion.
//
// Supported on: android, chrome_os, linux, mac, win
message AutoFillEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool AutoFillEnabled = 2;
}

// Specify a list of disabled plugins
//
// This policy is deprecated. Please use the DefaultPluginsSetting to control
// the avalability of the Flash plugin and AlwaysOpenPdfExternally to control
// whether the integrated PDF viewer should be used for opening PDF files.
//
// Specifies a list of plugins that are disabled in Google Chrome and prevents
// users from changing this setting.
//
// The wildcard characters '*' and '?' can be used to match sequences of
// arbitrary characters. '*' matches an arbitrary number of characters while '?'
// specifies an optional single character, i.e. matches zero or one characters.
// The escape character is '\', so to match actual '*', '?', or '\' characters,
// you can put a '\' in front of them.
//
// If you enable this setting, the specified list of plugins is never used in
// Google Chrome. The plugins are marked as disabled in 'about:plugins' and
// users cannot enable them.
//
// Note that this policy can be overridden by EnabledPlugins and
// DisabledPluginsExceptions.
//
// If this policy is left not set the user can use any plugin installed on the
// system except for hard-coded incompatible, outdated or dangerous plugins.
//
// Supported on: chrome_os, linux, mac, win
message DisabledPluginsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList DisabledPlugins = 2;
}

// Specify a list of enabled plugins
//
// This policy is deprecated. Please use the DefaultPluginsSetting to control
// the avalability of the Flash plugin and AlwaysOpenPdfExternally to control
// whether the integrated PDF viewer should be used for opening PDF files.
//
// Specifies a list of plugins that are enabled in Google Chrome and prevents
// users from changing this setting.
//
// The wildcard characters '*' and '?' can be used to match sequences of
// arbitrary characters. '*' matches an arbitrary number of characters while '?'
// specifies an optional single character, i.e. matches zero or one characters.
// The escape character is '\', so to match actual '*', '?', or '\' characters,
// you can put a '\' in front of them.
//
// The specified list of plugins is always used in Google Chrome if they are
// installed. The plugins are marked as enabled in 'about:plugins' and users
// cannot disable them.
//
// Note that this policy overrides both DisabledPlugins and
// DisabledPluginsExceptions.
//
// If this policy is left not set the user can disable any plugin installed on
// the system.
//
// Supported on: chrome_os, linux, mac, win
message EnabledPluginsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList EnabledPlugins = 2;
}

// Specify a list of plugins that the user can enable or disable
//
// This policy is deprecated. Please use the DefaultPluginsSetting to control
// the avalability of the Flash plugin and AlwaysOpenPdfExternally to control
// whether the integrated PDF viewer should be used for opening PDF files.
//
// Specifies a list of plugins that user can enable or disable in Google Chrome.
//
// The wildcard characters '*' and '?' can be used to match sequences of
// arbitrary characters. '*' matches an arbitrary number of characters while '?'
// specifies an optional single character, i.e. matches zero or one characters.
// The escape character is '\', so to match actual '*', '?', or '\' characters,
// you can put a '\' in front of them.
//
// If you enable this setting, the specified list of plugins can be used in
// Google Chrome. Users can enable or disable them in 'about:plugins', even if
// the plugin also matches a pattern in DisabledPlugins. Users can also enable
// and disable plugins that don't match any patterns in DisabledPlugins,
// DisabledPluginsExceptions and EnabledPlugins.
//
// This policy is meant to allow for strict plugin blacklisting where the
// 'DisabledPlugins' list contains wildcarded entries like disable all plugins
// '*' or disable all Java plugins '*Java*' but the administrator wishes to
// enable some particular version like 'IcedTea Java 2.3'. This particular
// versions can be specified in this policy.
//
// Note that both the plugin name and the plugin's group name have to be
// exempted. Each plugin group is shown in a separate section in about:plugins;
// each section may have one or more plugins. For example, the "Shockwave Flash"
// plugin belongs to the "Adobe Flash Player" group, and both names have to have
// a match in the exceptions list if that plugin is to be exempted from the
// blacklist.
//
// If this policy is left not set any plugin that matches the patterns in the
// 'DisabledPlugins' will be locked disabled and the user won't be able to
// enable them.
//
// Supported on: chrome_os, linux, mac, win
message DisabledPluginsExceptionsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList DisabledPluginsExceptions = 2;
}

// Always Open PDF files externally
//
// Disables the internal PDF viewer in Google Chrome. Instead it treats it as
// download and allows the user to open PDF files with the default application.
//
// If this policy is left not set or disabled the PDF plugin will be used to
// open PDF files unless the user disables it.
//
// Supported on: linux, mac, win
message AlwaysOpenPdfExternallyProto {
  optional PolicyOptions policy_options = 1;
  optional bool AlwaysOpenPdfExternally = 2;
}

// Specify whether the plugin finder should be disabled
//
// If you set this setting to enabled the automatic search and installation of
// missing plugins will be disabled in Google Chrome.
//
// Setting this option to disabled or leave it not set the plugin finder will be
// active.
//
// Supported on: chrome_os, linux, mac, win
message DisablePluginFinderProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisablePluginFinder = 2;
}

// Disable synchronization of data with Google
//
// Disables data synchronization in Google Chrome using Google-hosted
// synchronization services and prevents users from changing this setting.
//
// If you enable this setting, users cannot change or override this setting in
// Google Chrome.
//
// If this policy is left not set Google Sync will be available for the user to
// choose whether to use it or not.
//
// To fully disable Google Sync, it is recommended that you disable the Google
// Sync service in the Google Admin console.
//
// Supported on: chrome_os, linux, mac, win
message SyncDisabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SyncDisabled = 2;
}

// Enable the creation of roaming copies for Google Chrome profile data.
//
// Enables the creation of roaming copies for Google Chrome profile data.
//
// If you enable this setting, the settings stored in Google Chrome profiles
// like bookmarks, autofill data, passwords, etc. will also be written to a file
// stored in the Roaming user profile folder or a location specified by the
// Administrator through the RoamingProfileLocation policy.
//
// Google Sync is automatically disabled when this policy is enabled.
//
// To prevent accidental data leaks it is advisable to also set the
// SigninAllowed policy to False.
//
// If this policy is disabled or left not set only the regular local profiles
// will be used.
//
// Supported on: win
message RoamingProfileSupportEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool RoamingProfileSupportEnabled = 2;
}

// Set the roaming profile directory
//
// Configures the directory that Google Chrome will use for storing the roaming
// copy of the profiles.
//
// If you set this policy, Google Chrome will use the provided directory to
// store the roaming copy of the profiles if the RoamingProfileSupportEnabled
// policy has been enabled. If the RoamingProfileSupportEnabled policy is
// disabled or left unset the value stored in this policy is not used.
//
// See https://www.chromium.org/administrators/policy-list-3/user-data-
// directory-variables for a list of variables that can be used.
//
// If this policy is left not set the default roaming profile path will be used.
//
// Supported on: win
message RoamingProfileLocationProto {
  optional PolicyOptions policy_options = 1;
  optional string RoamingProfileLocation = 2;
}

// Allows sign in to Google Chrome
//
// This policy is deprecated, consider using SyncDisabled instead.
//
// Allows the user to sign in to Google Chrome.
//
// If you set this policy, you can configure whether a user is allowed to sign
// in to Google Chrome. Setting this policy to 'False' will prevent apps and
// extensions that use the chrome.identity API from functioning, so you may want
// to use SyncDisabled instead.
//
// Supported on: android, linux, mac, win
message SigninAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool SigninAllowed = 2;
}

// Enables the old web-based signin
//
// Enables the old web-based signin flow.
//
// This setting was named EnableWebBasedSignin prior to Chrome 42, and support
// for it will be removed entirely in Chrome 43.
//
// This setting is useful for enterprise customers who are using SSO solutions
// that are not compatible with the new inline signin flow yet.
// If you enable this setting, the old web-based signin flow would be used.
// If you disable this setting or leave it not set, the new inline signin flow
// would be used by default. Users may still enable the old web-based signin
// flow through the command line flag --enable-web-based-signin.
//
// The experimental setting will be removed in the future when the inline signin
// fully supports all SSO signin flows.
//
// Supported on:
message EnableDeprecatedWebBasedSigninProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableDeprecatedWebBasedSignin = 2;
}

// Set user data directory
//
// Configures the directory that Google Chrome will use for storing user data.
//
// If you set this policy, Google Chrome will use the provided directory
// regardless whether the user has specified the '--user-data-dir' flag or not.
// To avoid data loss or other unexpected errors this policy should not be set
// to a volume's root directory or to a directory used for other purposes,
// because Google Chrome manages its contents.
//
// See https://www.chromium.org/administrators/policy-list-3/user-data-
// directory-variables for a list of variables that can be used.
//
// If this policy is left not set the default profile path will be used and the
// user will be able to override it with the '--user-data-dir' command line
// flag.
//
// Supported on: mac, win
message UserDataDirProto {
  optional PolicyOptions policy_options = 1;
  optional string UserDataDir = 2;
}

// Set disk cache directory
//
// Configures the directory that Google Chrome will use for storing cached files
// on the disk.
//
// If you set this policy, Google Chrome will use the provided directory
// regardless whether the user has specified the '--disk-cache-dir' flag or not.
// To avoid data loss or other unexpected errors this policy should not be set
// to a volume's root directory or to a directory used for other purposes,
// because Google Chrome manages its contents.
//
// See https://www.chromium.org/administrators/policy-list-3/user-data-
// directory-variables for a list of variables that can be used.
//
// If this policy is left not set the default cache directory will be used and
// the user will be able to override it with the '--disk-cache-dir' command line
// flag.
//
// Supported on: linux, mac, win
message DiskCacheDirProto {
  optional PolicyOptions policy_options = 1;
  optional string DiskCacheDir = 2;
}

// Set disk cache size in bytes
//
// Configures the cache size that Google Chrome will use for storing cached
// files on the disk.
//
// If you set this policy, Google Chrome will use the provided cache size
// regardless whether the user has specified the '--disk-cache-size' flag or
// not. The value specified in this policy is not a hard boundary but rather a
// suggestion to the caching system, any value below a few megabytes is too
// small and will be rounded up to a sane minimum.
//
// If the value of this policy is 0, the default cache size will be used but the
// user will not be able to change it.
//
// If this policy is not set the default size will be used and the user will be
// able to override it with the --disk-cache-size flag.
//
// Supported on: linux, mac, win
message DiskCacheSizeProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DiskCacheSize = 2;
}

// Set media disk cache size in bytes
//
// Configures the cache size that Google Chrome will use for storing cached
// media files on the disk.
//
// If you set this policy, Google Chrome will use the provided cache size
// regardless whether the user has specified the '--media-cache-size' flag or
// not. The value specified in this policy is not a hard boundary but rather a
// suggestion to the caching system, any value below a few megabytes is too
// small and will be rounded up to a sane minimum.
//
// If the value of this policy is 0, the default cache size will be used but the
// user will not be able to change it.
//
// If this policy is not set the default size will be used and the user will be
// able to override it with the --media-cache-size flag.
//
// Supported on: linux, mac, win
message MediaCacheSizeProto {
  optional PolicyOptions policy_options = 1;
  optional int64 MediaCacheSize = 2;
}

// Set download directory
//
// Configures the directory that Google Chrome will use for downloading files.
//
// If you set this policy, Google Chrome will use the provided directory
// regardless whether the user has specified one or enabled the flag to be
// prompted for download location every time.
//
// See https://www.chromium.org/administrators/policy-list-3/user-data-
// directory-variables for a list of variables that can be used.
//
// If this policy is left not set the default download directory will be used
// and the user will be able to change it.
//
// Supported on: chrome_os, linux, mac, win
message DownloadDirectoryProto {
  optional PolicyOptions policy_options = 1;
  optional string DownloadDirectory = 2;
}

// Clear site data on browser shutdown (deprecated)
//
// This policy has been retired as of Google Chrome version 29.
//
// Supported on:
message ClearSiteDataOnExitProto {
  optional PolicyOptions policy_options = 1;
  optional bool ClearSiteDataOnExit = 2;
}

// Captive portal authentication ignores proxy
//
// This policy allows Google Chrome OS to bypass any proxy for captive portal
// authentication.
//
// This policy only takes effect if a proxy is configured (for example through
// policy, by the user in chrome://settings, or by extensions).
//
// If you enable this setting, any captive portal authentication pages (i.e. all
// web pages starting from captive portal signin page until Google Chrome
// detects succesful internet connection) will be displayed in a separate window
// ignoring all policy settings and restrictions for the current user.
//
// If you disable this setting or leave it unset, any captive portal
// authentication pages will be shown in a (regular) new browser tab, using the
// current user's proxy settings.
//
// Supported on: chrome_os
message CaptivePortalAuthenticationIgnoresProxyProto {
  optional PolicyOptions policy_options = 1;
  optional bool CaptivePortalAuthenticationIgnoresProxy = 2;
}

// Choose how to specify proxy server settings
//
// Allows you to specify the proxy server used by Google Chrome and prevents
// users from changing proxy settings.
//
// If you choose to never use a proxy server and always connect directly, all
// other options are ignored.
//
// If you choose to use system proxy settings, all other options are ignored.
//
// If you choose to auto detect the proxy server, all other options are ignored.
//
// If you choose fixed server proxy mode, you can specify further options in
// 'Address or URL of proxy server' and 'Comma-separated list of proxy bypass
// rules'. Only the HTTP proxy server with the highest priority is available for
// ARC-apps.
//
// If you choose to use a .pac proxy script, you must specify the URL to the
// script in 'URL to a proxy .pac file'.
//
// For detailed examples, visit:
// https://www.chromium.org/developers/design-documents/network-settings#TOC-
// Command-line-options-for-proxy-sett.
//
// If you enable this setting, Google Chrome and ARC-apps ignore all proxy-
// related options specified from the command line.
//
// Leaving this policy not set will allow the users to choose the proxy settings
// on their own.
//
// Valid values:
//   direct: Never use a proxy
//   auto_detect: Auto detect proxy settings
//   pac_script: Use a .pac proxy script
//   fixed_servers: Use fixed proxy servers
//   system: Use system proxy settings
//
// Supported on: android, chrome_os, linux, mac, win
message ProxyModeProto {
  optional PolicyOptions policy_options = 1;
  optional string ProxyMode = 2;
}

// Choose how to specify proxy server settings
//
// This policy is deprecated, use ProxyMode instead.
//
// Allows you to specify the proxy server used by Google Chrome and prevents
// users from changing proxy settings.
//
// If you choose to never use a proxy server and always connect directly, all
// other options are ignored.
//
// If you choose to use system proxy settings or auto detect the proxy server,
// all other options are ignored.
//
// If you choose manual proxy settings, you can specify further options in
// 'Address or URL of proxy server', 'URL to a proxy .pac file' and 'Comma-
// separated list of proxy bypass rules'. Only the HTTP proxy server with the
// highest priority is available for ARC-apps.
//
// For detailed examples, visit:
// https://www.chromium.org/developers/design-documents/network-settings#TOC-
// Command-line-options-for-proxy-sett.
//
// If you enable this setting, Google Chrome ignores all proxy-related options
// specified from the command line.
//
// Leaving this policy not set will allow the users to choose the proxy settings
// on their own.
//
// Valid values:
//   0: Never use a proxy
//   1: Auto detect proxy settings
//   2: Manually specify proxy settings
//   3: Use system proxy settings
//
// Supported on: android, chrome_os, linux, mac, win
message ProxyServerModeProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ProxyServerMode = 2;
}

// Address or URL of proxy server
//
// You can specify the URL of the proxy server here.
//
// This policy only takes effect if you have selected manual proxy settings at
// 'Choose how to specify proxy server settings'.
//
// You should leave this policy not set if you have selected any other mode for
// setting proxy policies.
//
// For more options and detailed examples, visit:
// https://www.chromium.org/developers/design-documents/network-settings#TOC-
// Command-line-options-for-proxy-sett.
//
// Supported on: android, chrome_os, linux, mac, win
message ProxyServerProto {
  optional PolicyOptions policy_options = 1;
  optional string ProxyServer = 2;
}

// URL to a proxy .pac file
//
// You can specify a URL to a proxy .pac file here.
//
// This policy only takes effect if you have selected manual proxy settings at
// 'Choose how to specify proxy server settings'.
//
// You should leave this policy not set if you have selected any other mode for
// setting proxy policies.
//
// For detailed examples, visit:
// https://www.chromium.org/developers/design-documents/network-settings#TOC-
// Command-line-options-for-proxy-sett.
//
// Supported on: android, chrome_os, linux, mac, win
message ProxyPacUrlProto {
  optional PolicyOptions policy_options = 1;
  optional string ProxyPacUrl = 2;
}

// Proxy bypass rules
//
// Google Chrome will bypass any proxy for the list of hosts given here.
//
// This policy only takes effect if you have selected manual proxy settings at
// 'Choose how to specify proxy server settings'.
//
// You should leave this policy not set if you have selected any other mode for
// setting proxy policies.
//
// For more detailed examples, visit:
// https://www.chromium.org/developers/design-documents/network-settings#TOC-
// Command-line-options-for-proxy-sett.
//
// Supported on: android, chrome_os, linux, mac, win
message ProxyBypassListProto {
  optional PolicyOptions policy_options = 1;
  optional string ProxyBypassList = 2;
}

// Proxy settings
//
// Configures the proxy settings for Google Chrome. These proxy settings will be
// available for ARC-apps too.
//
// This policy isn't ready for usage yet, please don't use it.
//
// Value schema:
// {
//     "properties": {
//         "ProxyBypassList": {
//             "type": "string"
//         },
//         "ProxyMode": {
//             "type": "string"
//         },
//         "ProxyPacUrl": {
//             "type": "string"
//         },
//         "ProxyServer": {
//             "type": "string"
//         },
//         "ProxyServerMode": {
//             "type": "string"
//         }
//     },
//     "type": "object"
// }
//
// Supported on: android, chrome_os, linux, mac, win
message ProxySettingsProto {
  optional PolicyOptions policy_options = 1;
  optional string ProxySettings = 2;
}

// Supported authentication schemes
//
// Specifies which HTTP authentication schemes are supported by Google Chrome.
//
// Possible values are 'basic', 'digest', 'ntlm' and 'negotiate'. Separate
// multiple values with commas.
//
// If this policy is left not set, all four schemes will be used.
//
// Supported on: android, linux, mac, win
message AuthSchemesProto {
  optional PolicyOptions policy_options = 1;
  optional string AuthSchemes = 2;
}

// Disable CNAME lookup when negotiating Kerberos authentication
//
// Specifies whether the generated Kerberos SPN is based on the canonical DNS
// name or the original name entered.
//
// If you enable this setting, CNAME lookup will be skipped and the server name
// will be used as entered.
//
// If you disable this setting or leave it not set, the canonical name of the
// server will be determined via CNAME lookup.
//
// Supported on: android, linux, mac, win
message DisableAuthNegotiateCnameLookupProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisableAuthNegotiateCnameLookup = 2;
}

// Include non-standard port in Kerberos SPN
//
// Specifies whether the generated Kerberos SPN should include a non-standard
// port.
//
// If you enable this setting, and a non-standard port (i.e., a port other than
// 80 or 443) is entered, it will be included in the generated Kerberos SPN.
//
// If you disable this setting or leave it not set, the generated Kerberos SPN
// will not include a port in any case.
//
// Supported on: linux, mac, win
message EnableAuthNegotiatePortProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableAuthNegotiatePort = 2;
}

// Authentication server whitelist
//
// Specifies which servers should be whitelisted for integrated authentication.
// Integrated authentication is only enabled when Google Chrome receives an
// authentication challenge from a proxy or from a server which is in this
// permitted list.
//
// Separate multiple server names with commas. Wildcards (*) are allowed.
//
// If you leave this policy not set Google Chrome will try to detect if a server
// is on the Intranet and only then will it respond to IWA requests.  If a
// server is detected as Internet then IWA requests from it will be ignored by
// Google Chrome.
//
// Supported on: android, linux, mac, webview_android, win
message AuthServerWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional string AuthServerWhitelist = 2;
}

// Kerberos delegation server whitelist
//
// Servers that Google Chrome may delegate to.
//
// Separate multiple server names with commas. Wildcards (*) are allowed.
//
// If you leave this policy not set Google Chrome will not delegate user
// credentials even if a server is detected as Intranet.
//
// Supported on: android, linux, mac, win
message AuthNegotiateDelegateWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional string AuthNegotiateDelegateWhitelist = 2;
}

// GSSAPI library name
//
// Specifies which GSSAPI library to use for HTTP authentication. You can set
// either just a library name, or a full path.
//
// If no setting is provided, Google Chrome will fall back to using a default
// library name.
//
// Supported on: linux
message GSSAPILibraryNameProto {
  optional PolicyOptions policy_options = 1;
  optional string GSSAPILibraryName = 2;
}

// Account type for HTTP Negotiate authentication
//
// Specifies the account type of the accounts provided by the Android
// authentication app that supports HTTP Negotiate authentication (e.g. Kerberos
// authentication). This information should be available from the supplier of
// the authentication app. For more details see https://goo.gl/hajyfN.
//
// If no setting is provided, HTTP Negotiate authentication is disabled on
// Android.
//
// Supported on: android, webview_android
message AuthAndroidNegotiateAccountTypeProto {
  optional PolicyOptions policy_options = 1;
  optional string AuthAndroidNegotiateAccountType = 2;
}

// Cross-origin HTTP Basic Auth prompts
//
// Controls whether third-party sub-content on a page is allowed to pop-up an
// HTTP Basic Auth dialog box.
//
// Typically this is disabled as a phishing defense. If this policy is not set,
// this is disabled and third-party sub-content will not be allowed to pop up a
// HTTP Basic Auth dialog box.
//
// Supported on: linux, mac, win
message AllowCrossOriginAuthPromptProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowCrossOriginAuthPrompt = 2;
}

// Configure extension installation blacklist
//
// Allows you to specify which extensions the users can NOT install. Extensions
// already installed will be removed if blacklisted.
//
// A blacklist value of '*' means all extensions are blacklisted unless they are
// explicitly listed in the whitelist.
//
// If this policy is left not set the user can install any extension in Google
// Chrome.
//
// Supported on: chrome_os, linux, mac, win
message ExtensionInstallBlacklistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ExtensionInstallBlacklist = 2;
}

// Configure extension installation whitelist
//
// Allows you to specify which extensions are not subject to the blacklist.
//
// A blacklist value of * means all extensions are blacklisted and users can
// only install extensions listed in the whitelist.
//
// By default, all extensions are whitelisted, but if all extensions have been
// blacklisted by policy, the whitelist can be used to override that policy.
//
// Supported on: chrome_os, linux, mac, win
message ExtensionInstallWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ExtensionInstallWhitelist = 2;
}

// Configure the list of force-installed apps and extensions
//
//
// Specifies a list of apps and extensions that are installed silently,
// without user interaction, and which cannot be uninstalled by the
// user. All permissions requested by the apps/extensions are granted
// implicitly, without user interaction, including any additional
// permissions requested by future versions of the app/extension.
// Furthermore, permissions are granted for the
// enterprise.deviceAttributes and enterprise.platformKeys extension
// APIs. (These two APIs are not available to apps/extensions that are
// not force-installed.)
//
// This policy takes precedence over a potentially conflicting
// ExtensionsInstallBlacklist policy. If an app or extension that
// previously had been force-installed is removed from this list, it is
// automatically uninstalled by Google Chrome.
//
// For Windows instances that are not joined to an Active Directory
// domain, forced installation is limited to apps and extensions listed
// in the Chrome Web Store.
//
// Note that the source code of any extension may be altered by users via
// Developer Tools (potentially rendering the extension
// dysfunctional). If this is a concern, the DeveloperToolsDisabled
// policy should be set.
//
// Each list item of the policy is a string that contains an extension ID
// and an "update" URL separated by a semicolon (;). The extension ID is the
// 32-letter string
// found e.g. on chrome://extensions when in
// developer mode. The "update" URL should point to an Update Manifest
// XML document as described at
// https://developer.chrome.com/extensions/autoupdate. Note
// that the "update" URL set in this policy is only used for the initial
// installation; subsequent updates of the extension employ the update
// URL indicated in the extension's manifest.
//
// For example, gbchcmhmhahfdphkhkmpfmihenigjmpp;https://clients2.google.com/ser
// vice/update2/crx
// installs the Chrome
// Remote Desktop app from the standard Chrome Web Store "update"
// URL. For more information about hosting extensions, see:
// https://developer.chrome.com/extensions/hosting.
//
// If this policy is left not set, no apps or extensions are installed
// automatically and the user can uninstall any app or extension in Google
// Chrome.
//
// Supported on: chrome_os, linux, mac, win
message ExtensionInstallForcelistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ExtensionInstallForcelist = 2;
}

// Configure extension, app, and user script install sources
//
// Allows you to specify which URLs are allowed to install extensions, apps, and
// themes.
//
// Starting in Google Chrome 21, it is more difficult to install extensions,
// apps, and user scripts from outside the Chrome Web Store. Previously, users
// could click on a link to a *.crx file, and Google Chrome would offer to
// install the file after a few warnings. After Google Chrome 21, such files
// must be downloaded and dragged onto the Google Chrome settings page. This
// setting allows specific URLs to have the old, easier installation flow.
//
// Each item in this list is an extension-style match pattern (see
// https://developer.chrome.com/extensions/match_patterns). Users will be able
// to easily install items from any URL that matches an item in this list. Both
// the location of the *.crx file and the page where the download is started
// from (i.e. the referrer) must be allowed by these patterns.
//
// ExtensionInstallBlacklist takes precedence over this policy. That is, an
// extension on the blacklist won't be installed, even if it happens from a site
// on this list.
//
// Supported on: chrome_os, linux, mac, win
message ExtensionInstallSourcesProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ExtensionInstallSources = 2;
}

// Configure allowed app/extension types
//
// Controls which app/extension types are allowed to be installed.
//
// This setting white-lists the allowed types of extension/apps that can be
// installed in Google Chrome. The value is a list of strings, each of which
// should be one of the following: "extension", "theme", "user_script",
// "hosted_app", "legacy_packaged_app", "platform_app". See the Google Chrome
// extensions documentation for more information on these types.
//
// Note that this policy also affects extensions and apps to be force-installed
// via ExtensionInstallForcelist.
//
// If this setting is configured, extensions/apps which have a type that is not
// on the list will not be installed.
//
// If this settings is left not-configured, no restrictions on the acceptable
// extension/app types are enforced.
//
// Supported on: chrome_os, linux, mac, win
message ExtensionAllowedTypesProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ExtensionAllowedTypes = 2;
}

// Extension management settings
//
// Configures extension management settings for Google Chrome.
//
// This policy controls multiple settings, including settings controlled by any
// existing extension-related policies. This policy will override any legacy
// policies if both are set.
//
// This policy maps an extension ID or an update URL to its configuration. With
// an extension ID, configuration will be applied to the specified extension
// only. A default configuration can be set for the special ID "*", which will
// apply to all extensions that don't have a custom configuration set in this
// policy. With an update URL, configuration will be applied to all extensions
// with the exact update URL stated in manifest of this extension, as described
// at https://developer.chrome.com/extensions/autoupdate.
//
// The configuration for each extension (or extensions with same update URL) is
// another dictionary that can contain the fields documented below.
//
// "installation_mode": maps to a string indicating the installation mode for
// the extension. The valid strings are:
// * "allowed": allows the extension to be installed by the user. This is the
// default behavior.
// * "blocked": blocks installation of the extension.
// * "force_installed": the extension is automatically installed and can't be
// removed by the user.
// * "normal_installed": the extension is automatically installed but can be
// disabled by the user.
//
// The "installation_mode" can also be configured for multiple extensions as
// well, including the "*" extension (as default settings) and extensions with
// same update URL. Only the "allowed" and "blocked" values can be used in this
// case.
//
// If the mode is set to "force_installed" or "normal_installed" then an
// "update_url" must be configured too. Note that the update URL set in this
// policy is only used for the initial installation; subsequent updates of the
// extension will use the update URL indicated in the extension's manifest. The
// update URL should point to an Update Manifest XML document as mentioned
// above.
//
// "blocked_permissions": maps to a list of strings indicating the blocked API
// permissions for the extension. The permissions names are same as the
// permission strings declared in manifest of extension as described at
// https://developer.chrome.com/extensions/declare_permissions. This setting
// also can be configured for "*" extension. If the extension requires a
// permission which is on the blocklist, it will not be allowed to load. If it
// contains a blocked permission as optional requirement, it will be handled in
// the normal way, but requesting conflicting permissions will be declined
// automatically at runtime.
//
// "allowed_permissions": similar to "blocked_permissions", but instead
// explicitly allow some permissions which might be blocked by global blocked
// permission list, thus can not be configured for "*" extension. Note that this
// setting doesn't give granted permissions to extensions automatically.
//
// "minimum_version_required": maps to a version string. The format of the
// version string is the same as the one used in extension manifest, as
// described at https://developer.chrome.com/apps/manifest/version. An extension
// with a version older than the specified minimum version will be disabled.
// This applies to force-installed extensions as well.
//
// The following settings can be used only for the default "*" configuration:
//
// "install_sources": Each item in this list is an extension-style match pattern
// (see https://developer.chrome.com/extensions/match_patterns). Users will be
// able to easily install items from any URL that matches an item in this list.
// Both the location of the *.crx file and the page where the download is
// started from (i.e.  the referrer) must be allowed by these patterns.
//
// "allowed_types": This setting whitelists the allowed types of extension/apps
// that can be installed in Google Chrome.  The value is a list of strings, each
// of which should be one of the following: "extension", "theme", "user_script",
// "hosted_app", "legacy_packaged_app", "platform_app". See the Google Chrome
// extensions documentation for more information on these types.
//
// This policy isn't ready for usage yet, please don't use it.
//
// Value schema:
// {
//     "patternProperties": {
//         "^[a-p]{32}$": {
//             "properties": {
//                 "allowed_permissions": {
//                     "$ref": "ListOfPermissions"
//                 },
//                 "blocked_permissions": {
//                     "id": "ListOfPermissions",
//                     "items": {
//                         "pattern": "^[a-z][a-zA-Z.]*$",
//                         "type": "string"
//                     },
//                     "type": "array"
//                 },
//                 "installation_mode": {
//                     "enum": [
//                         "blocked",
//                         "allowed",
//                         "force_installed",
//                         "normal_installed"
//                     ],
//                     "type": "string"
//                 },
//                 "minimum_version_required": {
//                     "pattern": "^[0-9]+([.][0-9]+)*$",
//                     "type": "string"
//                 },
//                 "update_url": {
//                     "type": "string"
//                 }
//             },
//             "type": "object"
//         },
//         "^update_url:": {
//             "properties": {
//                 "allowed_permissions": {
//                     "$ref": "ListOfPermissions"
//                 },
//                 "blocked_permissions": {
//                     "$ref": "ListOfPermissions"
//                 },
//                 "installation_mode": {
//                     "enum": [
//                         "blocked",
//                         "allowed"
//                     ],
//                     "type": "string"
//                 }
//             },
//             "type": "object"
//         }
//     },
//     "properties": {
//         "*": {
//             "properties": {
//                 "allowed_types": {
//                     "$ref": "ExtensionAllowedTypes"
//                 },
//                 "blocked_permissions": {
//                     "$ref": "ListOfPermissions"
//                 },
//                 "install_sources": {
//                     "$ref": "ExtensionInstallSources"
//                 },
//                 "installation_mode": {
//                     "enum": [
//                         "blocked",
//                         "allowed"
//                     ],
//                     "type": "string"
//                 }
//             },
//             "type": "object"
//         }
//     },
//     "type": "object"
// }
//
// Supported on: chrome_os, linux, mac, win
message ExtensionSettingsProto {
  optional PolicyOptions policy_options = 1;
  optional string ExtensionSettings = 2;
}

// Show Home button on toolbar
//
// Shows the Home button on Google Chrome's toolbar.
//
// If you enable this setting, the Home button is always shown.
//
// If you disable this setting, the Home button is never shown.
//
// If you enable or disable this setting, users cannot change or override this
// setting in Google Chrome.
//
// Leaving this policy not set will allow the user to choose whether to show the
// home button.
//
// Supported on: chrome_os, linux, mac, win
message ShowHomeButtonProto {
  optional PolicyOptions policy_options = 1;
  optional bool ShowHomeButton = 2;
}

// Disable Developer Tools
//
// Disables the Developer Tools and the JavaScript console.
//
// If you enable this setting, the Developer Tools can not be accessed and web-
// site elements can not be inspected anymore. Any keyboard shortcuts and any
// menu or context menu entries to open the Developer Tools or the JavaScript
// Console will be disabled.
//
// Setting this option to disabled or leaving it not set allows the user to use
// the Developer Tools and the JavaScript console.
//
// Supported on: chrome_os, linux, mac, win
message DeveloperToolsDisabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DeveloperToolsDisabled = 2;
}

// Action on startup
//
// Allows you to specify the behavior on startup.
//
// If you choose 'Open New Tab Page' the New Tab Page will always be opened when
// you start Google Chrome.
//
// If you choose 'Restore the last session', the URLs that were open last time
// Google Chrome was closed will be reopened and the browsing session will be
// restored as it was left.
// Choosing this option disables some settings that rely on sessions or that
// perform actions on exit (such as Clear browsing data on exit or session-only
// cookies).
//
// If you choose 'Open a list of URLs', the list of 'URLs to open on startup'
// will be opened when a user starts Google Chrome.
//
// If you enable this setting, users cannot change or override it in Google
// Chrome.
//
// Disabling this setting is equivalent to leaving it not configured. The user
// will still be able to change it in Google Chrome.
//
// This policy is not available on Windows instances that are not joined
// to an Active Directory domain.
//
// Valid values:
//   5: Open New Tab Page
//   1: Restore the last session
//   4: Open a list of URLs
//
// Supported on: chrome_os, linux, mac, win
message RestoreOnStartupProto {
  optional PolicyOptions policy_options = 1;
  optional int64 RestoreOnStartup = 2;
}

// URLs to open on startup
//
// If 'Open a list of URLs' is selected as the startup action, this allows you
// to specify the list of URLs that are opened. If left not set no URL will be
// opened on start up.
//
// This policy only works if the 'RestoreOnStartup' policy is set to
// 'RestoreOnStartupIsURLs'.
//
// This policy is not available on Windows instances that are not joined
// to an Active Directory domain.
//
// Supported on: chrome_os, linux, mac, win
message RestoreOnStartupURLsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList RestoreOnStartupURLs = 2;
}

// Block third party cookies
//
// Blocks third party cookies.
//
// Enabling this setting prevents cookies from being set by web page elements
// that are not from the domain that is in the browser's address bar.
//
// Disabling this setting allows cookies to be set by web page elements that are
// not from the domain that is in the browser's address bar and prevents users
// from changing this setting.
//
// If this policy is left not set, third party cookies will be enabled but the
// user will be able to change that.
//
// Supported on: chrome_os, linux, mac, win
message BlockThirdPartyCookiesProto {
  optional PolicyOptions policy_options = 1;
  optional bool BlockThirdPartyCookies = 2;
}

// Enable the default search provider
//
// Enables the use of a default search provider.
//
// If you enable this setting, a default search is performed when the user types
// text in the omnibox that is not a URL.
//
// You can specify the default search provider to be used by setting the rest of
// the default search policies. If these are left empty, the user can choose the
// default provider.
//
// If you disable this setting, no search is performed when the user enters non-
// URL text in the omnibox.
//
// If you enable or disable this setting, users cannot change or override this
// setting in Google Chrome.
//
// If this policy is left not set, the default search provider is enabled, and
// the user will be able to set the search provider list.
//
// This policy is not available on Windows instances that are not joined
// to an Active Directory domain.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DefaultSearchProviderEnabled = 2;
}

// Default search provider name
//
// Specifies the name of the default search provider. If left empty or not set,
// the host name specified by the search URL will be used.
//
// This policy is only considered if the 'DefaultSearchProviderEnabled' policy
// is enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderNameProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderName = 2;
}

// Default search provider keyword
//
// Specifies the keyword, which is the shortcut used in the omnibox to trigger
// the search for this provider.
//
// This policy is optional. If not set, no keyword will activate the search
// provider.
//
// This policy is only considered if the 'DefaultSearchProviderEnabled' policy
// is enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderKeywordProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderKeyword = 2;
}

// Default search provider search URL
//
// Specifies the URL of the search engine used when doing a default search. The
// URL should contain the string '{searchTerms}', which will be replaced at
// query time by the terms the user is searching for.
//
// Google's search URL can be specified as: '{google:baseURL}search?q={searchTer
// ms}&amp;{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryS
// tats}{google:searchFieldtrialParameter}{google:searchClient}{google:sourceId}
// {google:instantExtendedEnabledParameter}ie={inputEncoding}'.
//
// This option must be set when the 'DefaultSearchProviderEnabled' policy is
// enabled and will only be respected if this is the case.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderSearchURLProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderSearchURL = 2;
}

// Default search provider suggest URL
//
// Specifies the URL of the search engine used to provide search suggestions.
// The URL should contain the string '{searchTerms}', which will be replaced at
// query time by the text the user has entered so far.
//
// This policy is optional. If not set, no suggest URL will be used.
//
// Google's suggest URL can be specified as:
// '{google:baseURL}complete/search?output=chrome&amp;q={searchTerms}'.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderSuggestURLProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderSuggestURL = 2;
}

// Default search provider instant URL
//
// Specifies the URL of the search engine used to provide instant results. The
// URL should contain the string '{searchTerms}', which will be replaced at
// query time by the text the user has entered so far.
//
// This policy is optional. If not set, no instant search results will be
// provided.
//
// Google's instant results URL can be specified as:
// '{google:baseURL}suggest?q={searchTerms}'.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderInstantURLProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderInstantURL = 2;
}

// Default search provider icon
//
// Specifies the favorite icon URL of the default search provider.
//
// This policy is optional. If not set, no icon will be present for the search
// provider.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderIconURLProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderIconURL = 2;
}

// Default search provider encodings
//
// Specifies the character encodings supported by the search provider. Encodings
// are code page names like UTF-8, GB2312, and ISO-8859-1. They are tried in the
// order provided.
//
// This policy is optional. If not set, the default will be used which is UTF-8.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderEncodingsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList DefaultSearchProviderEncodings = 2;
}

// List of alternate URLs for the default search provider
//
// Specifies a list of alternate URLs that can be used to extract search terms
// from the search engine. The URLs should contain the string '{searchTerms}',
// which will be used to extract the search terms.
//
// This policy is optional. If not set, no alternate urls will be used to
// extract search terms.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderAlternateURLsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList DefaultSearchProviderAlternateURLs = 2;
}

// Parameter controlling search term placement for the default search provider
//
// If this policy is set and a search URL suggested from the omnibox contains
// this parameter in the query string or in the fragment identifier, then the
// suggestion will show the search terms and search provider instead of the raw
// search URL.
//
// This policy is optional. If not set, no search term replacement will be
// performed.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderSearchTermsReplacementKeyProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderSearchTermsReplacementKey = 2;
}

// Parameter providing search-by-image feature for the default search provider
//
// Specifies the URL of the search engine used to provide image search. Search
// requests will be sent using the GET method. If the
// DefaultSearchProviderImageURLPostParams policy is set then image search
// requests will use the POST method instead.
//
// This policy is optional. If not set, no image search will be used.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderImageURLProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderImageURL = 2;
}

// Default search provider new tab page URL
//
// Specifies the URL that a search engine uses to provide a new tab page.
//
// This policy is optional. If not set, no new tab page will be provided.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderNewTabURLProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderNewTabURL = 2;
}

// Parameters for search URL which uses POST
//
// Specifies the parameters used when searching a URL with POST. It consists of
// comma-separated name/value pairs. If a value is a template parameter, like
// {searchTerms} in above example, it will be replaced with real search terms
// data.
//
// This policy is optional. If not set, search request will be sent using the
// GET method.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderSearchURLPostParamsProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderSearchURLPostParams = 2;
}

// Parameters for suggest URL which uses POST
//
// Specifies the parameters used when doing suggestion search with POST. It
// consists of comma-separated name/value pairs. If a value is a template
// parameter, like {searchTerms} in above example, it will be replaced with real
// search terms data.
//
// This policy is optional. If not set, suggest search request will be sent
// using the GET method.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderSuggestURLPostParamsProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderSuggestURLPostParams = 2;
}

// Parameters for instant URL which uses POST
//
// Specifies the parameters used when doing instant search with POST. It
// consists of comma-separated name/value pairs. If a value is a template
// parameter, like {searchTerms} in above example, it will be replaced with real
// search terms data.
//
// This policy is optional. If not set, instant search request will be sent
// using the GET method.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderInstantURLPostParamsProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderInstantURLPostParams = 2;
}

// Parameters for image URL which uses POST
//
// Specifies the parameters used when doing image search with POST. It consists
// of comma-separated name/value pairs. If a value is a template parameter, like
// {imageThumbnail} in above example, it will be replaced with real image
// thumbnail data.
//
// This policy is optional. If not set, image search request will be sent using
// the GET method.
//
// This policy is only respected if the 'DefaultSearchProviderEnabled' policy is
// enabled.
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultSearchProviderImageURLPostParamsProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultSearchProviderImageURLPostParams = 2;
}

// Default cookies setting
//
// Allows you to set whether websites are allowed to set local data. Setting
// local data can be either allowed for all websites or denied for all websites.
//
// If this policy is set to 'Keep cookies for the duration of the session' then
// cookies will be cleared when the session closes. Note that if Google Chrome
// is running in 'background mode', the session may not close when the last
// window is closed. Please see the 'BackgroundModeEnabled' policy for more
// information about configuring this behavior.
//
// If this policy is left not set, 'AllowCookies' will be used and the user will
// be able to change it.
//
// Valid values:
//   1: Allow all sites to set local data
//   2: Do not allow any site to set local data
//   4: Keep cookies for the duration of the session
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultCookiesSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultCookiesSetting = 2;
}

// Default images setting
//
// Allows you to set whether websites are allowed to display images. Displaying
// images can be either allowed for all websites or denied for all websites.
//
// If this policy is left not set, 'AllowImages' will be used and the user will
// be able to change it.
//
// Valid values:
//   1: Allow all sites to show all images
//   2: Do not allow any site to show images
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultImagesSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultImagesSetting = 2;
}

// Default JavaScript setting
//
// Allows you to set whether websites are allowed to run JavaScript. Running
// JavaScript can be either allowed for all websites or denied for all websites.
//
// If this policy is left not set, 'AllowJavaScript' will be used and the user
// will be able to change it.
//
// Valid values:
//   1: Allow all sites to run JavaScript
//   2: Do not allow any site to run JavaScript
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultJavaScriptSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultJavaScriptSetting = 2;
}

// Default plugins setting
//
// Allows you to set whether websites are allowed to automatically run plugins.
// Automatically running plugins can be either allowed for all websites or
// denied for all websites.
//
// Click to play allows plugins to run but the user must click them to start
// their execution.
//
// If this policy is left not set, 'AllowPlugins' will be used and the user will
// be able to change it.
//
// Valid values:
//   1: Allow all sites to automatically run plugins
//   2: Block all plugins
//   3: Click to play
//
// Supported on: chrome_os, linux, mac, win
message DefaultPluginsSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultPluginsSetting = 2;
}

// Default popups setting
//
// Allows you to set whether websites are allowed to show pop-ups. Showing
// popups can be either allowed for all websites or denied for all websites.
//
// If this policy is left not set, 'BlockPopups' will be used and the user will
// be able to change it.
//
// Valid values:
//   1: Allow all sites to show pop-ups
//   2: Do not allow any site to show popups
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultPopupsSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultPopupsSetting = 2;
}

// Default notification setting
//
// Allows you to set whether websites are allowed to display desktop
// notifications. Displaying desktop notifications can be allowed by default,
// denied by default or the user can be asked every time a website wants to show
// desktop notifications.
//
// If this policy is left not set, 'AskNotifications' will be used and the user
// will be able to change it.
//
// Valid values:
//   1: Allow sites to show desktop notifications
//   2: Do not allow any site to show desktop notifications
//   3: Ask every time a site wants to show desktop notifications
//
// Supported on: chrome_os, linux, mac, win
message DefaultNotificationsSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultNotificationsSetting = 2;
}

// Default geolocation setting
//
// Allows you to set whether websites are allowed to track the users' physical
// location. Tracking the users' physical location can be allowed by default,
// denied by default or the user can be asked every time a website requests the
// physical location.
//
// If this policy is left not set, 'AskGeolocation' will be used and the user
// will be able to change it.
//
// Valid values:
//   1: Allow sites to track the users' physical location
//   2: Do not allow any site to track the users' physical location
//   3: Ask whenever a site wants to track the users' physical location
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultGeolocationSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultGeolocationSetting = 2;
}

// Default mediastream setting
//
// Allows you to set whether websites are allowed to get access to media capture
// devices. Access to media capture devices can be allowed by default, or the
// user can be asked every time a website wants to get access to media capture
// devices.
//
// If this policy is left not set, 'PromptOnAccess' will be used and the user
// will be able to change it.
//
// Valid values:
//   2: Do not allow any site to access the camera and microphone
//   3: Ask every time a site wants to access the camera and/or microphone
//
// Supported on: chrome_os, linux, mac, win
message DefaultMediaStreamSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultMediaStreamSetting = 2;
}

// Control use of the Web Bluetooth API
//
// Allows you to set whether websites are allowed to get access to nearby
// Bluetooth devices. Access can be completely blocked, or the user can be asked
// every time a website wants to get access to nearby Bluetooth devices.
//
// If this policy is left not set, '3' will be used, and the user will be able
// to change it.
//
// Valid values:
//   2: Do not allow any site to request access to Bluetooth devices via the Web
// Bluetooth API
//   3: Allow sites to ask the user to grant access to a nearby Bluetooth device
//
// Supported on: android, chrome_os, linux, mac, win
message DefaultWebBluetoothGuardSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultWebBluetoothGuardSetting = 2;
}

// Default key generation setting
//
// Allows you to set whether websites are allowed to use key generation. Using
// key generation can be either allowed for all websites or denied for all
// websites.
//
// If this policy is left not set, 'BlockKeygen' will be used and the user will
// be able to change it.
//
// Valid values:
//   1: Allow all sites to use key generation
//   2: Do not allow any site to use key generation
//
// Supported on:
message DefaultKeygenSettingProto {
  optional PolicyOptions policy_options = 1;
  optional int64 DefaultKeygenSetting = 2;
}

// Automatically select client certificates for these sites
//
// Allows you to specify a list of url patterns that specify sites for which
// Google Chrome should automatically select a client certificate, if the site
// requests a certificate.
//
// The value must be an array of stringified JSON dictionaries. Each dictionary
// must have the form { "pattern": "$URL_PATTERN", "filter" : $FILTER }, where
// $URL_PATTERN is a content setting pattern. $FILTER restricts from which
// client certificates the browser will automatically select. Independent of the
// filter, only certificates will be selected that match the server's
// certificate request. If $FILTER has the form { "ISSUER": { "CN": "$ISSUER_CN"
// } }, additionally only client certificates are selected that are issued by a
// certificate with the CommonName $ISSUER_CN. If $FILTER is the empty
// dictionary {}, the selection of client certificates is not additionally
// restricted.
//
// If this policy is left not set, no auto-selection will be done for any site.
//
// Supported on: chrome_os, linux, mac, win
message AutoSelectCertificateForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList AutoSelectCertificateForUrls = 2;
}

// Allow cookies on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to set cookies.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultCookiesSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message CookiesAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList CookiesAllowedForUrls = 2;
}

// Block cookies on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to set cookies.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultCookiesSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message CookiesBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList CookiesBlockedForUrls = 2;
}

// Allow session only cookies on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to set session only cookies.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultCookiesSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Note that if Google Chrome is running in 'background mode', the session may
// not be closed when the last browser window is closed, but will instead stay
// active until the browser exits. Please see the 'BackgroundModeEnabled' policy
// for more information about configuring this behavior.
//
// If the "RestoreOnStartup" policy is set to restore URLs from previous
// sessions this policy will not be respected and cookies will be stored
// permanently for those sites.
//
// Supported on: android, chrome_os, linux, mac, win
message CookiesSessionOnlyForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList CookiesSessionOnlyForUrls = 2;
}

// Allow images on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to display images.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultImagesSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message ImagesAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ImagesAllowedForUrls = 2;
}

// Block images on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to display images.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultImagesSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message ImagesBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ImagesBlockedForUrls = 2;
}

// Allow JavaScript on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to run JavaScript.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultJavaScriptSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message JavaScriptAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList JavaScriptAllowedForUrls = 2;
}

// Block JavaScript on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to run JavaScript.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultJavaScriptSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message JavaScriptBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList JavaScriptBlockedForUrls = 2;
}

// Allow key generation on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to use key generation. If a url pattern is in 'KeygenBlockedForUrls', that
// overrides these exceptions.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultKeygenSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on:
message KeygenAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList KeygenAllowedForUrls = 2;
}

// Block key generation on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to use key generation. If a url pattern is in 'KeygenAllowedForUrls',
// this policy overrides these exceptions.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultKeygenSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on:
message KeygenBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList KeygenBlockedForUrls = 2;
}

// Allow plugins on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to run plugins.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultPluginsSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: chrome_os, linux, mac, win
message PluginsAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList PluginsAllowedForUrls = 2;
}

// Block plugins on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to run plugins.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultPluginsSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: chrome_os, linux, mac, win
message PluginsBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList PluginsBlockedForUrls = 2;
}

// Allow popups on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to open popups.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultPopupsSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message PopupsAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList PopupsAllowedForUrls = 2;
}

// Register protocol handlers
//
// Allows you to register a list of protocol handlers. This can only be a
// recommended policy. The property |protocol| should be set to the scheme such
// as 'mailto' and the property |url| should be set to the URL pattern of the
// application that handles the scheme. The pattern can include a '%s', which if
// present will be replaced by the handled URL.
//
// The protocol handlers registered by policy are merged with the ones
// registered by the user and both are available for use. The user can override
// the protocol handlers installed by policy by installing a new default
// handler, but cannot remove a protocol handler registered by policy.
//
// Value schema:
// {
//     "items": {
//         "properties": {
//             "default": {
//                 "description": "A boolean flag indicating if the protocol
// handler should be set as the default.",
//                 "type": "boolean"
//             },
//             "protocol": {
//                 "description": "The protocol for the protocol handler.",
//                 "type": "string"
//             },
//             "url": {
//                 "description": "The URL of the protocol handler.",
//                 "type": "string"
//             }
//         },
//         "required": [
//             "protocol",
//             "url"
//         ],
//         "type": "object"
//     },
//     "type": "array"
// }
//
// Supported on: chrome_os, linux, mac, win
//
// Note: this policy must have a RECOMMENDED PolicyMode set in PolicyOptions.
message RegisteredProtocolHandlersProto {
  optional PolicyOptions policy_options = 1;
  optional string RegisteredProtocolHandlers = 2;
}

// Block popups on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to open popups.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultPopupsSetting' policy if it is set, or the
// user's personal configuration otherwise.
//
// Supported on: android, chrome_os, linux, mac, win
message PopupsBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList PopupsBlockedForUrls = 2;
}

// Allow notifications on these sites
//
// Allows you to set a list of url patterns that specify sites which are allowed
// to display notifications.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultNotificationsSetting' policy if it is set, or
// the user's personal configuration otherwise.
//
// Supported on: chrome_os, linux, mac, win
message NotificationsAllowedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList NotificationsAllowedForUrls = 2;
}

// Block notifications on these sites
//
// Allows you to set a list of url patterns that specify sites which are not
// allowed to display notifications.
//
// If this policy is left not set the global default value will be used for all
// sites either from the 'DefaultNotificationsSetting' policy if it is set, or
// the user's personal configuration otherwise.
//
// Supported on: chrome_os, linux, mac, win
message NotificationsBlockedForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList NotificationsBlockedForUrls = 2;
}

// Configure native messaging blacklist
//
// Allows you to specify which native messaging hosts that should not be loaded.
//
// A blacklist value of '*' means all native messaging hosts are blacklisted
// unless they are explicitly listed in the whitelist.
//
// If this policy is left not set Google Chrome will load all installed native
// messaging hosts.
//
// Supported on: linux, mac, win
message NativeMessagingBlacklistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList NativeMessagingBlacklist = 2;
}

// Configure native messaging whitelist
//
// Allows you to specify which native messaging hosts are not subject to the
// blacklist.
//
// A blacklist value of * means all native messaging hosts are blacklisted and
// only native messaging hosts listed in the whitelist will be loaded.
//
// By default, all native messaging hosts are whitelisted, but if all native
// messaging hosts have been blacklisted by policy, the whitelist can be used to
// override that policy.
//
// Supported on: linux, mac, win
message NativeMessagingWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList NativeMessagingWhitelist = 2;
}

// Allow user-level Native Messaging hosts (installed without admin
// permissions).
//
// Enables user-level installation of Native Messaging hosts.
//
// If this setting is enabled then Google Chrome allows
// usage of Native Messaging hosts installed on user level.
//
// If this setting is disabled then Google Chrome will
// only use Native Messaging hosts installed on system level.
//
// If this setting is left not set Google Chrome
// will allow usage of user-level Native Messaging hosts.
//
// Supported on: linux, mac, win
message NativeMessagingUserLevelHostsProto {
  optional PolicyOptions policy_options = 1;
  optional bool NativeMessagingUserLevelHosts = 2;
}

// Disable support for 3D graphics APIs
//
// Disable support for 3D graphics APIs.
//
// Enabling this setting prevents web pages from accessing the graphics
// processing unit (GPU). Specifically, web pages can not access the WebGL API
// and plugins can not use the Pepper 3D API.
//
// Disabling this setting or leaving it not set potentially allows web pages to
// use the WebGL API and plugins to use the Pepper 3D API. The default settings
// of the browser may still require command line arguments to be passed in order
// to use these APIs.
//
// If HardwareAccelerationModeEnabled is set to false, Disable3DAPIs is ignored
// and it is equivalent to Disable3DAPIs being set to true.
//
// Supported on: chrome_os, linux, mac, win
message Disable3DAPIsProto {
  optional PolicyOptions policy_options = 1;
  optional bool Disable3DAPIs = 2;
}

// Refresh rate for user policy
//
// Specifies the period in milliseconds at which the device management service
// is queried for user policy information.
//
// Setting this policy overrides the default value of 3 hours. Valid values for
// this policy are in the range from 1800000 (30 minutes) to 86400000 (1 day).
// Any values not in this range will be clamped to the respective boundary. If
// the platform supports policy notifications, the refresh delay will be set to
// 24 hours because it is expected that policy notifications will force a
// refresh automatically whenever policy changes.
//
// Leaving this policy not set will make Google Chrome use the default value of
// 3 hours.
//
// Note that if the platform supports policy notifications, the refresh delay
// will be set to 24 hours (ignoring all defaults and the value of this policy)
// because it is expected that policy notifications will force a refresh
// automatically whenever policy changes, making more frequent refreshes
// unnecessary.
//
// Supported on: chrome_os
message PolicyRefreshRateProto {
  optional PolicyOptions policy_options = 1;
  optional int64 PolicyRefreshRate = 2;
}

// Maximum fetch delay after a policy invalidation
//
// Specifies the maximum delay in milliseconds between receiving a policy
// invalidation and fetching the new policy from the device management service.
//
// Setting this policy overrides the default value of 5000 milliseconds. Valid
// values for this policy are in the range from 1000 (1 second) to 300000 (5
// minutes). Any values not in this range will be clamped to the respective
// boundary.
//
// Leaving this policy not set will make Google Chrome use the default value of
// 5000 milliseconds.
//
// Supported on: chrome_os, linux, mac, win
message MaxInvalidationFetchDelayProto {
  optional PolicyOptions policy_options = 1;
  optional int64 MaxInvalidationFetchDelay = 2;
}

// Default HTML renderer for Google Chrome Frame
//
// Allows you to configure the default HTML renderer when Google Chrome Frame is
// installed.
// The default setting used when this policy is left not set is to allow the
// host browser do the rendering, but you can optionally override this and have
// Google Chrome Frame render HTML pages by default.
//
// Valid values:
//   0: Use the host browser by default
//   1: Use Google Chrome Frame by default
//
// Supported on:
message ChromeFrameRendererSettingsProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ChromeFrameRendererSettings = 2;
}

// Always render the following URL patterns in Google Chrome Frame
//
// Customize the list of URL patterns that should always be rendered by Google
// Chrome Frame.
//
// If this policy is not set the default renderer will be used for all sites as
// specified by the 'ChromeFrameRendererSettings' policy.
//
// For example patterns see https://www.chromium.org/developers/how-tos/chrome-
// frame-getting-started.
//
// Supported on:
message RenderInChromeFrameListProto {
  optional PolicyOptions policy_options = 1;
  optional StringList RenderInChromeFrameList = 2;
}

// Always render the following URL patterns in the host browser
//
// Customize the list of URL patterns that should always be rendered by the host
// browser.
//
// If this policy is not set the default renderer will be used for all sites as
// specified by the 'ChromeFrameRendererSettings' policy.
//
// For example patterns see https://www.chromium.org/developers/how-tos/chrome-
// frame-getting-started.
//
// Supported on:
message RenderInHostListProto {
  optional PolicyOptions policy_options = 1;
  optional StringList RenderInHostList = 2;
}

// Additional command line parameters for Google Chrome
//
// Allows you to specify additional parameters that are used when Google Chrome
// Frame launches Google Chrome.
//
// If this policy is not set the default command line will be used.
//
// Supported on:
message AdditionalLaunchParametersProto {
  optional PolicyOptions policy_options = 1;
  optional string AdditionalLaunchParameters = 2;
}

// Skip the meta tag check in Google Chrome Frame
//
// Normally pages with X-UA-Compatible set to chrome=1 will be rendered in
// Google Chrome Frame regardless of the 'ChromeFrameRendererSettings' policy.
//
// If you enable this setting, pages will not be scanned for meta tags.
//
// If you disable this setting, pages will be scanned for meta tags.
//
// If this policy is not set, pages will be scanned for meta tags.
//
// Supported on:
message SkipMetadataCheckProto {
  optional PolicyOptions policy_options = 1;
  optional bool SkipMetadataCheck = 2;
}

// Allow Google Chrome Frame to handle the listed content types
//
// Allow Google Chrome Frame to handle the listed content types.
//
// If this policy is not set the default renderer will be used for all sites as
// specified by the 'ChromeFrameRendererSettings' policy.
//
// Supported on:
message ChromeFrameContentTypesProto {
  optional PolicyOptions policy_options = 1;
  optional StringList ChromeFrameContentTypes = 2;
}

// Enable lock when the device become idle or suspended
//
// Enable lock when Google Chrome OS devices become idle or suspended.
//
// If you enable this setting, users will be asked for a password to unlock the
// device from sleep.
//
// If you disable this setting, users will not be asked for a password to unlock
// the device from sleep.
//
// If you enable or disable this setting, users cannot change or override it.
//
// If the policy is left not set the user can choose whether they want to be
// asked for password to unlock the device or not.
//
// Supported on: chrome_os
message ChromeOsLockOnIdleSuspendProto {
  optional PolicyOptions policy_options = 1;
  optional bool ChromeOsLockOnIdleSuspend = 2;
}

// Control the user behavior in a multiprofile session
//
// Control the user behavior in a multiprofile session on Google Chrome OS
// devices.
//
// If this policy is set to 'MultiProfileUserBehaviorUnrestricted', the user can
// be either primary or secondary user in a multiprofile session.
//
// If this policy is set to 'MultiProfileUserBehaviorMustBePrimary', the user
// can only be the primary user in a multiprofile session.
//
// If this policy is set to 'MultiProfileUserBehaviorNotAllowed', the user
// cannot be part of a multiprofile session.
//
// If you set this setting, users cannot change or override it.
//
// If the setting is changed while the user is signed into a multiprofile
// session, all users in the session will be checked against their corresponding
// settings. The session will be closed if any one of the users is no longer
// allowed to be in the session.
//
// If the policy is left not set, the default value
// 'MultiProfileUserBehaviorMustBePrimary' applies for enterprise-managed users
// and 'MultiProfileUserBehaviorUnrestricted' will be used for non-managed
// users.
//
// Valid values:
//   unrestricted: Allow enterprise user to be both primary and secondary
// (Default behavior for non-managed users)
//   primary-only: Allow enterprise user to be primary multiprofile user only
// (Default behavior for enterprise-managed users)
//   not-allowed: Do not allow enterprise user to be part of multiprofile
// (primary or secondary)
//
// Supported on: chrome_os
message ChromeOsMultiProfileUserBehaviorProto {
  optional PolicyOptions policy_options = 1;
  optional string ChromeOsMultiProfileUserBehavior = 2;
}

// Enable Instant
//
// Enables Google Chrome's Instant feature and prevents users from changing this
// setting.
//
// If you enable this setting, Google Chrome Instant is enabled.
//
// If you disable this setting, Google Chrome Instant is disabled.
//
// If you enable or disable this setting, users cannot change or override this
// setting.
//
// If this setting is left not set the user can decide to use this function or
// not.
//
// This setting has been removed from Google Chrome 29 and higher versions.
//
// Supported on:
message InstantEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool InstantEnabled = 2;
}

// Enable Translate
//
// Enables the integrated Google Translate service on Google Chrome.
//
// If you enable this setting, Google Chrome will show an integrated toolbar
// offering to translate the page for the user, when appropriate.
//
// If you disable this setting, users will never see the translation bar.
//
// If you enable or disable this setting, users cannot change or override this
// setting in Google Chrome.
//
// If this setting is left not set the user can decide to use this function or
// not.
//
// Supported on: android, chrome_os, linux, mac, win
message TranslateEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool TranslateEnabled = 2;
}

// Allow running plugins that are outdated
//
// Allows Google Chrome to run plugins that are outdated.
//
// If you enable this setting, outdated plugins are used as normal plugins.
//
// If you disable this setting, outdated plugins will not be used and users will
// not be asked for permission to run them.
//
// If this setting is not set, users will be asked for permission to run
// outdated plugins.
//
// Supported on: chrome_os, linux, mac, win
message AllowOutdatedPluginsProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowOutdatedPlugins = 2;
}

// Always runs plugins that require authorization
//
// Allows Google Chrome to run plugins that require authorization.
//
// If you enable this setting, plugins that are not outdated always run.
//
// If this setting is disabled or not set, users will be asked for permission to
// run plugins that require authorization. These are plugins that can compromise
// security.
//
// Supported on: chrome_os, linux, mac, win
message AlwaysAuthorizePluginsProto {
  optional PolicyOptions policy_options = 1;
  optional bool AlwaysAuthorizePlugins = 2;
}

// Enable Bookmark Bar
//
// Enables the bookmark bar on Google Chrome.
//
// If you enable this setting, Google Chrome will show a bookmark bar.
//
// If you disable this setting, users will never see the bookmark bar.
//
// If you enable or disable this setting, users cannot change or override it in
// Google Chrome.
//
// If this setting is left not set the user can decide to use this function or
// not.
//
// Supported on: chrome_os, linux, mac, win
message BookmarkBarEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool BookmarkBarEnabled = 2;
}

// Enables or disables bookmark editing
//
// Enables or disables editing bookmarks in Google Chrome.
//
// If you enable this setting, bookmarks can be added, removed or modified. This
// is the default also when this policy is not set.
//
// If you disable this setting, bookmarks can not be added, removed or modified.
// Existing bookmarks are still available.
//
// Supported on: android, chrome_os, linux, mac, win
message EditBookmarksEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool EditBookmarksEnabled = 2;
}

// Show the apps shortcut in the bookmark bar
//
// Enables or disables the apps shortcut in the bookmark bar.
//
// If this policy is not set then the user can choose to show or hide the apps
// shortcut from the bookmark bar context menu.
//
// If this policy is configured then the user can't change it, and the apps
// shortcut is always shown or never shown.
//
// Supported on: linux, mac, win
message ShowAppsShortcutInBookmarkBarProto {
  optional PolicyOptions policy_options = 1;
  optional bool ShowAppsShortcutInBookmarkBar = 2;
}

// Allow invocation of file selection dialogs
//
// Allows access to local files on the machine by allowing Google Chrome to
// display file selection dialogs.
//
// If you enable this setting, users can open file selection dialogs as normal.
//
// If you disable this setting, whenever the user performs an action which would
// provoke a file selection dialog (like importing bookmarks, uploading files,
// saving links, etc.) a message is displayed instead and the user is assumed to
// have clicked Cancel on the file selection dialog.
//
// If this setting is not set, users can open file selection dialogs as normal.
//
// Supported on: linux, mac, win
message AllowFileSelectionDialogsProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowFileSelectionDialogs = 2;
}

// Set Google Chrome Frame user data directory
//
// Configures the directory that Google Chrome Frame will use for storing user
// data.
//
// If you set this policy, Google Chrome Frame will use the provided directory.
//
// See https://www.chromium.org/administrators/policy-list-3/user-data-
// directory-variables for a list of variables that can be used.
//
// If this setting is left not set the default profile directory will be used.
//
// Supported on:
message GCFUserDataDirProto {
  optional PolicyOptions policy_options = 1;
  optional string GCFUserDataDir = 2;
}

// Import bookmarks from default browser on first run
//
// This policy forces bookmarks to be imported from the current default browser
// if enabled. If enabled, this policy also affects the import dialog.
//
// If disabled, no bookmarks are imported.
//
// If it is not set, the user may be asked whether to import, or importing may
// happen automatically.
//
// Supported on: linux, mac, win
message ImportBookmarksProto {
  optional PolicyOptions policy_options = 1;
  optional bool ImportBookmarks = 2;
}

// Import browsing history from default browser on first run
//
// This policy forces the browsing history to be imported from the current
// default browser if enabled. If enabled, this policy also affects the import
// dialog.
//
// If disabled, no browsing history is imported.
//
// If it is not set, the user may be asked whether to import, or importing may
// happen automatically.
//
// Supported on: linux, mac, win
message ImportHistoryProto {
  optional PolicyOptions policy_options = 1;
  optional bool ImportHistory = 2;
}

// Import of homepage from default browser on first run
//
// This policy forces the home page to be imported from the current default
// browser if enabled.
//
// If disabled, the home page is not imported.
//
// If it is not set, the user may be asked whether to import, or importing may
// happen automatically.
//
// Supported on: linux, mac, win
message ImportHomepageProto {
  optional PolicyOptions policy_options = 1;
  optional bool ImportHomepage = 2;
}

// Import search engines from default browser on first run
//
// This policy forces search engines to be imported from the current default
// browser if enabled. If enabled, this policy also affects the import dialog.
//
// If disabled, the default search engine is not imported.
//
// If it is not set, the user may be asked whether to import, or importing may
// happen automatically.
//
// Supported on: linux, mac, win
message ImportSearchEngineProto {
  optional PolicyOptions policy_options = 1;
  optional bool ImportSearchEngine = 2;
}

// Import saved passwords from default browser on first run
//
// This policy forces the saved passwords to be imported from the previous
// default browser if enabled. If enabled, this policy also affects the import
// dialog.
//
// If disabled, the saved passwords are not imported.
//
// If it is not set, the user may be asked whether to import, or importing may
// happen automatically.
//
// Supported on: linux, mac, win
message ImportSavedPasswordsProto {
  optional PolicyOptions policy_options = 1;
  optional bool ImportSavedPasswords = 2;
}

// Import autofill form data from default browser on first run
//
// This policy forces the autofill form data to be imported from the previous
// default browser if enabled. If enabled, this policy also affects the import
// dialog.
//
// If disabled, the autofill form data is not imported.
//
// If it is not set, the user may be asked whether to import, or importing may
// happen automatically.
//
// Supported on: linux, mac, win
message ImportAutofillFormDataProto {
  optional PolicyOptions policy_options = 1;
  optional bool ImportAutofillFormData = 2;
}

// Maximal number of concurrent connections to the proxy server
//
// Specifies the maximal number of simultaneous connections to the proxy server.
//
// Some proxy servers can not handle high number of concurrent connections per
// client and this can be solved by setting this policy to a lower value.
//
// The value of this policy should be lower than 100 and higher than 6 and the
// default value is 32.
//
// Some web apps are known to consume many connections with hanging GETs, so
// lowering below 32 may lead to browser networking hangs if too many such web
// apps are open. Lower below the default at your own risk.
//
// If this policy is left not set the default value will be used which is 32.
//
// Supported on: linux, mac, win
message MaxConnectionsPerProxyProto {
  optional PolicyOptions policy_options = 1;
  optional int64 MaxConnectionsPerProxy = 2;
}

// Prevent app promotions from appearing on the new tab page
//
// When set to True, promotions for Chrome Web Store apps will not appear on the
// new tab page.
//
// Setting this option to False or leaving it not set will make the promotions
// for Chrome Web Store apps appear on the new tab page
//
// Supported on:
message HideWebStorePromoProto {
  optional PolicyOptions policy_options = 1;
  optional bool HideWebStorePromo = 2;
}

// Block access to a list of URLs
//
// Blocks access to the listed URLs.
//
// This policy prevents the user from loading web pages from blacklisted URLs.
// The blacklist provides a list of URL patterns that specify which URLs will be
// blacklisted.
//
// A URL pattern has to be formatted according to
// https://www.chromium.org/administrators/url-blacklist-filter-format.
//
// Exceptions can be defined in the URL whitelist policy. These policies are
// limited to 1000 entries; subsequent entries will be ignored.
//
// Note that it is not recommended to block internal 'chrome://*' URLs since
// this may lead to unexpected errors.
//
// If this policy is not set no URL will be blacklisted in the browser.
//
// Supported on: android, chrome_os, linux, mac, webview_android, win
message URLBlacklistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList URLBlacklist = 2;
}

// Allows access to a list of URLs
//
// Allows access to the listed URLs, as exceptions to the URL blacklist.
//
// See the description of the URL blacklist policy for the format of entries of
// this list.
//
// This policy can be used to open exceptions to restrictive blacklists. For
// example, '*' can be blacklisted to block all requests, and this policy can be
// used to allow access to a limited list of URLs. It can be used to open
// exceptions to certain schemes, subdomains of other domains, ports, or
// specific paths.
//
// The most specific filter will determine if a URL is blocked or allowed. The
// whitelist takes precedence over the blacklist.
//
// This policy is limited to 1000 entries; subsequent entries will be ignored.
//
// If this policy is not set there will be no exceptions to the blacklist from
// the 'URLBlacklist' policy.
//
// Supported on: android, chrome_os, linux, mac, webview_android, win
message URLWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList URLWhitelist = 2;
}

// User-level network configuration
//
// Allows pushing network configuration to be applied per-user to a Chromium OS
// device. The network configuration is a JSON-formatted string as defined by
// the Open Network Configuration format described at
// https://sites.google.com/a/chromium.org/dev/chromium-os/chromiumos-design-
// docs/open-network-configuration
//
// Supported on: chrome_os
message OpenNetworkConfigurationProto {
  optional PolicyOptions policy_options = 1;
  optional string OpenNetworkConfiguration = 2;
}

// Enable submission of documents to Google Cloud Print
//
// Enables Google Chrome to submit documents to Google Cloud Print for printing.
// NOTE: This only affects Google Cloud Print support in Google Chrome.  It does
// not prevent users from submitting print jobs on web sites.
//
// If this setting is enabled or not configured, users can print to Google Cloud
// Print from the Google Chrome print dialog.
//
// If this setting is disabled, users cannot print to Google Cloud Print from
// the Google Chrome print dialog
//
// Supported on: linux, mac, win
message CloudPrintSubmitEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool CloudPrintSubmitEnabled = 2;
}

// Enterprise web store URL (deprecated)
//
// This setting has been retired as of Google Chrome version 29. The recommended
// way to set up organization-hosted extension/app collections is to include the
// site hosting the CRX packages in ExtensionInstallSources and put direct
// download links to the packages on a web page. A launcher for that web page
// can be created using the ExtensionInstallForcelist policy.
//
// Supported on:
message EnterpriseWebStoreURLProto {
  optional PolicyOptions policy_options = 1;
  optional string EnterpriseWebStoreURL = 2;
}

// Enterprise web store name (deprecated)
//
// This setting has been retired as of Google Chrome version 29. The recommended
// way to set up organization-hosted extension/app collections is to include the
// site hosting the CRX packages in ExtensionInstallSources and put direct
// download links to the packages on a web page. A launcher for that web page
// can be created using the ExtensionInstallForcelist policy.
//
// Supported on:
message EnterpriseWebStoreNameProto {
  optional PolicyOptions policy_options = 1;
  optional string EnterpriseWebStoreName = 2;
}

// Enable TLS domain-bound certificates extension (deprecated)
//
// This policy has been retired as of Google Chrome version 36.
//
// Specifies whether the TLS domain-bound certificates extension should be
// enabled.
//
// This setting is used to enable the TLS domain-bound certificates extension
// for testing.  This experimental setting will be removed in the future.
//
// Supported on:
message EnableOriginBoundCertsProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableOriginBoundCerts = 2;
}

// Enable reporting memory info (JS heap size) to page (deprecated)
//
// This policy has been retired as of Google Chrome version 35.
//
// Memory info is anyway reported to page, regardless of the option value, but
// the sizes reported are
// quantized and the rate of updates is limited for security reasons. To obtain
// real-time precise data,
// please use tools like Telemetry.
//
// Supported on:
message EnableMemoryInfoProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableMemoryInfo = 2;
}

// Disable Print Preview (deprecated)
//
// Show the system print dialog instead of print preview.
//
// When this setting is enabled, Google Chrome will open the system print dialog
// instead of the built-in print preview when a user requests a page to be
// printed.
//
// If this policy is not set or is set to false, print commands trigger the
// print preview screen.
//
// Supported on: linux, mac, win
message DisablePrintPreviewProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisablePrintPreview = 2;
}

// Default printer selection rules
//
// Overrides Google Chrome default printer selection rules.
//
// This policy determines the rules for selecting the default printer in Google
// Chrome which happens the first time the print function is used with a
// profile.
//
// When this policy is set, Google Chrome will attempt to find a printer
// matching all of the specified attributes, and select it as default printer.
// The first printer found matching the policy is selected, in case of non-
// unique match any matching printer can be selected, depending on the order
// printers are discovered.
//
// If this policy is not set or matching printer is not found within the
// timeout, the printer defaults to built-in PDF printer or no printer selected,
// when PDF printer is not available.
//
// The value is parsed as JSON object, conforming to the following schema:
// {
// "type": "object",
// "properties": {
// "kind": {
// "description": "Whether to limit the search of the matching printer to a
// specific set of printers.",
// "type": {
// "enum": [ "local", "cloud" ]
// }
// },
// "idPattern": {
// "description": "Regular expression to match printer id.",
// "type": "string"
// },
// "namePattern": {
// "description": "Regular expression to match printer display name.",
// "type": "string"
// }
// }
// }
//
// Printers connected to Google Cloud Print are considered "cloud", the rest of
// the printers are classified as "local".
// Omitting a field means all values match, for example, not specifying
// connectivity will cause Print Preview to initiate the discovery of all kinds
// of printers, local and cloud.
// Regular expression patterns must follow the JavaScript RegExp syntax and
// matches are case sensistive.
//
// Supported on: chrome_os, linux, mac, win
message DefaultPrinterSelectionProto {
  optional PolicyOptions policy_options = 1;
  optional string DefaultPrinterSelection = 2;
}

// Disable TLS False Start
//
// Specifies whether the TLS False Start optimization should be disabled. For
// historical reasons, this policy is named DisableSSLRecordSplitting.
//
// If the policy is not set, or is set to false, then TLS False Start will be
// enabled. If it is set to true, TLS False Start will be disabled.
//
// Supported on:
message DisableSSLRecordSplittingProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisableSSLRecordSplitting = 2;
}

// Whether online OCSP/CRL checks are performed
//
// In light of the fact that soft-fail, online revocation checks provide no
// effective security benefit, they are disabled by default in Google Chrome
// version 19 and later. By setting this policy to true, the previous behavior
// is restored and online OCSP/CRL checks will be performed.
//
// If the policy is not set, or is set to false, then Google Chrome will not
// perform online revocation checks in Google Chrome 19 and later.
//
// Supported on: chrome_os, linux, mac, win
message EnableOnlineRevocationChecksProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableOnlineRevocationChecks = 2;
}

// Whether online OCSP/CRL checks are required for local trust anchors
//
// When this setting is enabled, Google Chrome will always perform revocation
// checking for server certificates that successfully validate and are signed by
// locally-installed CA certificates.
//
// If Google Chrome is unable to obtain revocation status information, such
// certificates will be treated as revoked ('hard-fail').
//
// If this policy is not set, or it is set to false, then Google Chrome will use
// the existing online revocation checking settings.
//
// Supported on: chrome_os, linux, win
message RequireOnlineRevocationChecksForLocalAnchorsProto {
  optional PolicyOptions policy_options = 1;
  optional bool RequireOnlineRevocationChecksForLocalAnchors = 2;
}

// Whether SHA-1 signed certificates issued by local trust anchors are allowed
//
// When this setting is enabled, Google Chrome allows SHA-1 signed certificates
// as long as they successfully validate and chain to a locally-installed CA
// certificates.
//
// Note that this policy depends on the operating system certificate
// verification stack allowing SHA-1 signatures. If an OS update changes the OS
// handling of SHA-1 certificates, this policy may no longer have effect.
// Further, this policy is intended as a temporary workaround to give
// enterprises more time to move away from SHA-1.  This policy will be removed
// on or around January 1st 2019.
//
// If this policy is not set, or it is set to false, then Google Chrome follows
// the publicly announced SHA-1 deprecation schedule.
//
// Supported on: android, chrome_os, linux, mac, win
message EnableSha1ForLocalAnchorsProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableSha1ForLocalAnchors = 2;
}

// Ephemeral profile
//
// If set to enabled this policy forces the profile to be switched to ephemeral
// mode. If this policy is specified as an OS policy (e.g. GPO on Windows) it
// will apply to every profile on the system; if the policy is set as a Cloud
// policy it will apply only to a profile signed in with a managed account.
//
// In this mode the profile data is persisted on disk only for the length of the
// user session. Features like browser history, extensions and their data, web
// data like cookies and web databases are not preserved after the browser is
// closed. However this does not prevent the user from downloading any data to
// disk manually, save pages or print them.
//
// If the user has enabled sync all this data is preserved in their sync profile
// just like with regular profiles. Incognito mode is also available if not
// explicitly disabled by policy.
//
// If the policy is set to disabled or left not set signing in leads to regular
// profiles.
//
// Supported on: linux, mac, win
message ForceEphemeralProfilesProto {
  optional PolicyOptions policy_options = 1;
  optional bool ForceEphemeralProfiles = 2;
}

// Limit the time for which a user authenticated via SAML can log in offline
//
// Limit the time for which a user authenticated via SAML can log in offline.
//
// During login, Google Chrome OS can authenticate against a server (online) or
// using a cached password (offline).
//
// When this policy is set to a value of -1, the user can authenticate offline
// indefinitely. When this policy is set to any other value, it specifies the
// length of time since the last online authentication after which the user must
// use online authentication again.
//
// Leaving this policy not set will make Google Chrome OS use a default time
// limit of 14 days after which the user must use online authentication again.
//
// This policy affects only users who authenticated using SAML.
//
// The policy value should be specified in seconds.
//
// Supported on: chrome_os
message SAMLOfflineSigninTimeLimitProto {
  optional PolicyOptions policy_options = 1;
  optional int64 SAMLOfflineSigninTimeLimit = 2;
}

// Report information about status of Android
//
// Information about the status of Android is sent back to the
// server.
//
// If the policy is set to false, no status information is reported.
// If set to true or left unset, status information is reported.
//
// This policy only applies if Android apps are enabled.
//
// Supported on: chrome_os
message ReportArcStatusEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ReportArcStatusEnabled = 2;
}

// Continue running background apps when Google Chrome is closed
//
// Determines whether a Google Chrome process is started on OS login and keeps
// running when the last browser window is closed, allowing background apps and
// the current browsing session to remain active, including any session cookies.
// The background process displays an icon in the system tray and can always be
// closed from there.
//
// If this policy is set to True, background mode is enabled and cannot be
// controlled by the user in the browser settings.
//
// If this policy is set to False, background mode is disabled and cannot be
// controlled by the user in the browser settings.
//
// If this policy is left unset, background mode is initially disabled and can
// be controlled by the user in the browser settings.
//
// Supported on: linux, win
message BackgroundModeEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool BackgroundModeEnabled = 2;
}

// Disables Drive in the Google Chrome OS Files app
//
// Disables Google Drive syncing in the Google Chrome OS Files app when set to
// True. In that case, no data is uploaded to Google Drive.
//
// If not set or set to False, then users will be able to transfer files to
// Google Drive.
//
// Supported on: chrome_os
message DriveDisabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DriveDisabled = 2;
}

// Disables Google Drive over cellular connections in the Google Chrome OS Files
// app
//
// Disables Google Drive syncing in the Google Chrome OS Files app when using a
// cellular connection when set to True. In that case, data is only synced to
// Google Drive when connected via WiFi or Ethernet.
//
// If not set or set to False, then users will be able to transfer files to
// Google Drive via cellular connections.
//
// Supported on: chrome_os
message DriveDisabledOverCellularProto {
  optional PolicyOptions policy_options = 1;
  optional bool DriveDisabledOverCellular = 2;
}

// List of pinned apps to show in the launcher
//
// Lists the application identifiers Google Chrome OS shows as pinned apps in
// the launcher bar.
//
// If this policy is configured, the set of applications is fixed and can't be
// changed by the user.
//
// If this policy is left unset, the user may change the list of pinned apps in
// the launcher.
//
// Supported on: chrome_os
message PinnedLauncherAppsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList PinnedLauncherApps = 2;
}

// Restrict which users are allowed to sign in to Google Chrome
//
// Contains a regular expression which is used to determine which users can sign
// in to Google Chrome.
//
// An appropriate error is displayed if a user tries to log in with a username
// that does not match this pattern.
//
// If this policy is left not set or blank, then any user can sign in to Google
// Chrome.
//
// Supported on: linux, mac, win
message RestrictSigninToPatternProto {
  optional PolicyOptions policy_options = 1;
  optional string RestrictSigninToPattern = 2;
}

// Disable proceeding from the Safe Browsing warning page
//
// The Safe Browsing service shows a warning page when users navigate to sites
// that are flagged as potentially malicious. Enabling this setting prevents
// users from proceeding anyway from the warning page to the malicious site.
//
// If this setting is disabled or not configured then users can choose to
// proceed to the flagged site after being shown the warning.
//
// Supported on: android, chrome_os, linux, mac, win
message DisableSafeBrowsingProceedAnywayProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisableSafeBrowsingProceedAnyway = 2;
}

// Allow users to opt in to Safe Browsing extended reporting
//
// Setting this policy to false stops users from choosing to send some system
// information and page content to Google servers. If this setting is true or
// not configured, then users will be allowed to send some system information
// and page content to Safe Browsing to help detect dangerous apps and sites.
//
// Supported on: chrome_os, linux, mac, win
message SafeBrowsingExtendedReportingOptInAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool SafeBrowsingExtendedReportingOptInAllowed = 2;
}

// Enable or disable spell checking web service
//
// Google Chrome can use a Google web service to help resolve spelling errors.
// If this setting is enabled, then this service is always used. If this setting
// is disabled, then this service is never used.
//
// Spell checking can still be performed using a downloaded dictionary; this
// policy only controls the usage of the online service.
//
// If this setting is not configured then users can choose whether the spell
// checking service should be used or not.
//
// Supported on: chrome_os, linux, mac, win
message SpellCheckServiceEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SpellCheckServiceEnabled = 2;
}

// Disable mounting of external storage
//
// When this policy is set to true, external storage will not be available in
// the file browser.
//
// This policy affects all types of storage media. For example: USB flash
// drives, external hard drives, SD and other memory cards, optical storage etc.
// Internal storage is not affected, therefore files saved in the Download
// folder can still be accessed. Google Drive is also not affected by this
// policy.
//
// If this setting is disabled or not configured then users can use all
// supported types of external storage on their device.
//
// Supported on: chrome_os
message ExternalStorageDisabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ExternalStorageDisabled = 2;
}

// Treat external storage devices as read-only.
//
// When this policy is set to true, users cannot write anything to external
// storage devices.
//
// If this setting is set to false or not configured, then users can create and
// modify files of external storage devices which are physically writable.
//
// The ExternalStorageDisabled policy takes precedence over this policy - if
// ExternalStorageDisabled is set to true, then all access to external storage
// is disabled and this policy is consequently ignored.
//
// Dynamic refresh of this policy is supported in M56 and later.
//
// Supported on: chrome_os
message ExternalStorageReadOnlyProto {
  optional PolicyOptions policy_options = 1;
  optional bool ExternalStorageReadOnly = 2;
}

// Allow playing audio
//
// Allow playing audio.
//
// When this policy is set to false, audio output will not be available on the
// device while the user is logged in.
//
// This policy affects all types of audio output and not only the built-in
// speakers. Audio accessibility features are also inhibited by this policy. Do
// not enable this policy if a screen reader is required for the user.
//
// If this setting is set to true or not configured then users can use all
// supported audio outputs on their device.
//
// Supported on: chrome_os
message AudioOutputAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool AudioOutputAllowed = 2;
}

// Allow or deny audio capture
//
// Allow or deny audio capture.
//
// If enabled or not configured (default), the user will be prompted for
// audio capture access except for URLs configured in the
// AudioCaptureAllowedUrls list which will be granted access without prompting.
//
// When this policy is disabled, the user will never be prompted and audio
// capture only be available to URLs configured in AudioCaptureAllowedUrls.
//
// This policy affects all types of audio inputs and not only the built-in
// microphone.
//
// Supported on: chrome_os, linux, mac, win
message AudioCaptureAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool AudioCaptureAllowed = 2;
}

// URLs that will be granted access to audio capture devices without prompt
//
// Patterns in this list will be matched against the security
// origin of the requesting URL.  If a match is found, access to audio
// capture devices will be granted without prompt.
//
// NOTE: Until version 45, this policy was only supported in Kiosk mode.
//
// Supported on: chrome_os, linux, mac, win
message AudioCaptureAllowedUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList AudioCaptureAllowedUrls = 2;
}

// Allow or deny video capture
//
// Allow or deny video capture.
//
// If enabled or not configured (default), the user will be prompted for
// video capture access except for URLs configured in the
// VideoCaptureAllowedUrls list which will be granted access without prompting.
//
// When this policy is disabled, the user will never be prompted and video
// capture only be available to URLs configured in VideoCaptureAllowedUrls.
//
// This policy affects all types of video inputs and not only the built-in
// camera.
//
// Supported on: chrome_os, linux, mac, win
message VideoCaptureAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool VideoCaptureAllowed = 2;
}

// URLs that will be granted access to video capture devices without prompt
//
// Patterns in this list will be matched against the security
// origin of the requesting URL.  If a match is found, access to audio
// capture devices will be granted without prompt.
//
// NOTE: Until version 45, this policy was only supported in Kiosk mode.
//
// Supported on: chrome_os, linux, mac, win
message VideoCaptureAllowedUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList VideoCaptureAllowedUrls = 2;
}

// Disable taking screenshots
//
// Disables taking screenshots.
//
// If enabled screenshots cannot be taken using keyboard shortcuts or extension
// APIs.
//
// If disabled or not specified, taking screenshots is allowed.
//
// Supported on: chrome_os, linux, mac, win
message DisableScreenshotsProto {
  optional PolicyOptions policy_options = 1;
  optional bool DisableScreenshots = 2;
}

// Enable virtual keyboard
//
// This policy configures enabling the virtual keyboard as an input device on
// ChromeOS. Users cannot override this policy.
//
// If the policy is set to true, the on-screen virtual keyboard will always be
// enabled.
//
// If set to false, the on-screen virtual keyboard will always be disabled.
//
// If you set this policy, users cannot change or override it. However, users
// will still be able to enable/disable an accessibility on-screen keyboard
// which takes precedence over the virtual keyboard controlled by this policy.
// See the |VirtualKeyboardEnabled| policy for controlling the accessibility on-
// screen keyboard.
//
// If this policy is left unset, the on-screen keyboard is disabled initially
// but can be enabled by the user anytime. Heuristic rules may also be used to
// decide when to display the keyboard.
//
// Supported on: chrome_os
message TouchVirtualKeyboardEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool TouchVirtualKeyboardEnabled = 2;
}

// Add a logout button to the system tray
//
// Adds a logout button to the system tray.
//
// If enabled, a big, red logout button is shown in the system tray while a
// session is active and the screen is not locked.
//
// If disabled or not specified, no big, red logout button is shown in the
// system tray.
//
// Supported on: chrome_os
message ShowLogoutButtonInTrayProto {
  optional PolicyOptions policy_options = 1;
  optional bool ShowLogoutButtonInTray = 2;
}

// Use built-in DNS client
//
// Controls whether the built-in DNS client is used in Google Chrome.
//
// If this policy is set to true, the built-in DNS client will be used, if
// available.
//
// If this policy is set to false, the built-in DNS client will never be used.
//
// If this policy is left not set, the users will be able to change whether the
// built-in DNS client is used by editing chrome://flags or specifying a
// command-line flag.
//
// Supported on: linux, mac, win
message BuiltInDnsClientEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool BuiltInDnsClientEnabled = 2;
}

// Control shelf auto-hiding
//
// Control auto-hiding of the Google Chrome OS shelf.
//
// If this policy is set to 'AlwaysAutoHideShelf', the shelf will always auto-
// hide.
//
// If this policy is set to 'NeverAutoHideShelf', the shelf never auto-hide.
//
// If you set this policy, users cannot change or override it.
//
// If the policy is left not set, users can choose whether the shelf should
// auto-hide.
//
// Valid values:
//   Always: Always auto-hide the shelf
//   Never: Never auto-hide the shelf
//
// Supported on: chrome_os
message ShelfAutoHideBehaviorProto {
  optional PolicyOptions policy_options = 1;
  optional string ShelfAutoHideBehavior = 2;
}

// Set the display name for device-local accounts
//
// Controls the account name Google Chrome OS shows on the login screen for the
// corresponding device-local account.
//
// If this policy is set, the login screen will use the specified string in the
// picture-based login chooser for the corresponding device-local account.
//
// If the policy is left not set, Google Chrome OS will use the device-local
// account's email account ID as the display name on the login screen.
//
// This policy is ignored for regular user accounts.
//
// Supported on: chrome_os
message UserDisplayNameProto {
  optional PolicyOptions policy_options = 1;
  optional string UserDisplayName = 2;
}

// Limit the session length
//
// Limit the maximum length of a user session.
//
// When this policy is set, it specifies the length of time after which a user
// is automatically logged out, terminating the session. The user is informed
// about the remaining time by a countdown timer shown in the system tray.
//
// When this policy is not set, the session length is not limited.
//
// If you set this policy, users cannot change or override it.
//
// The policy value should be specified in milliseconds. Values are clamped to a
// range of 30 seconds to 24 hours.
//
// Supported on: chrome_os
message SessionLengthLimitProto {
  optional PolicyOptions policy_options = 1;
  optional int64 SessionLengthLimit = 2;
}

// Allow fullscreen mode
//
// Allow fullscreen mode.
//
// This policy controls the availability of fullscreen mode in which all Google
// Chrome UI is hidden and only web content is visible.
//
// If this policy is set to true or not not configured, the user, apps and
// extensions with appropriate permissions can enter fullscreen mode.
//
// If this policy is set to false, neither the user nor any apps or extensions
// can enter fullscreen mode.
//
// On all platforms except Google Chrome OS, kiosk mode is unavailable when
// fullscreen mode is disabled.
//
// Supported on: chrome_os, linux, win
message FullscreenAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool FullscreenAllowed = 2;
}

// Screen dim delay when running on AC power
//
// Specifies the length of time without user input after which the screen is
// dimmed when running on AC power.
//
// When this policy is set to a value greater than zero, it specifies the length
// of time that the user must remain idle before Google Chrome OS dims the
// screen.
//
// When this policy is set to zero, Google Chrome OS does not dim the screen
// when the user becomes idle.
//
// When this policy is unset, a default length of time is used.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than or equal the screen off delay (if set) and the idle delay.
//
// Supported on: chrome_os
message ScreenDimDelayACProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenDimDelayAC = 2;
}

// Screen off delay when running on AC power
//
// Specifies the length of time without user input after which the screen is
// turned off when running on AC power.
//
// When this policy is set to a value greater than zero, it specifies the length
// of time that the user must remain idle before Google Chrome OS turns off the
// screen.
//
// When this policy is set to zero, Google Chrome OS does not turn off the
// screen when the user becomes idle.
//
// When this policy is unset, a default length of time is used.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than or equal the idle delay.
//
// Supported on: chrome_os
message ScreenOffDelayACProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenOffDelayAC = 2;
}

// Screen lock delay when running on AC power
//
// Specifies the length of time without user input after which the screen is
// locked when running on AC power.
//
// When this policy is set to a value greater than zero, it specifies the length
// of time that the user must remain idle before Google Chrome OS locks the
// screen.
//
// When this policy is set to zero, Google Chrome OS does not lock the screen
// when the user becomes idle.
//
// When this policy is unset, a default length of time is used.
//
// The recommended way to lock the screen on idle is to enable screen locking on
// suspend and have Google Chrome OS suspend after the idle delay. This policy
// should only be used when screen locking should occur a significant amount of
// time sooner than suspend or when suspend on idle is not desired at all.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than the idle delay.
//
// Supported on: chrome_os
message ScreenLockDelayACProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenLockDelayAC = 2;
}

// Idle warning delay when running on AC power
//
// Specifies the length of time without user input after which a warning dialog
// is shown when running on AC power.
//
// When this policy is set, it specifies the length of time that the user must
// remain idle before Google Chrome OS shows a warning dialog telling the user
// that the idle action is about to be taken.
//
// When this policy is unset, no warning dialog is shown.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than or equal the idle delay.
//
// Supported on: chrome_os
message IdleWarningDelayACProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleWarningDelayAC = 2;
}

// Idle delay when running on AC power
//
// Specifies the length of time without user input after which the idle action
// is taken when running on AC power.
//
// When this policy is set, it specifies the length of time that the user must
// remain idle before Google Chrome OS takes the idle action, which can be
// configured separately.
//
// When this policy is unset, a default length of time is used.
//
// The policy value should be specified in milliseconds.
//
// Supported on: chrome_os
message IdleDelayACProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleDelayAC = 2;
}

// Screen dim delay when running on battery power
//
// Specifies the length of time without user input after which the screen is
// dimmed when running on battery power.
//
// When this policy is set to a value greater than zero, it specifies the length
// of time that the user must remain idle before Google Chrome OS dims the
// screen.
//
// When this policy is set to zero, Google Chrome OS does not dim the screen
// when the user becomes idle.
//
// When this policy is unset, a default length of time is used.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than or equal the screen off delay (if set) and the idle delay.
//
// Supported on: chrome_os
message ScreenDimDelayBatteryProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenDimDelayBattery = 2;
}

// Screen off delay when running on battery power
//
// Specifies the length of time without user input after which the screen is
// turned off when running on battery power.
//
// When this policy is set to a value greater than zero, it specifies the length
// of time that the user must remain idle before Google Chrome OS turns off the
// screen.
//
// When this policy is set to zero, Google Chrome OS does not turn off the
// screen when the user becomes idle.
//
// When this policy is unset, a default length of time is used.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than or equal the idle delay.
//
// Supported on: chrome_os
message ScreenOffDelayBatteryProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenOffDelayBattery = 2;
}

// Screen lock delay when running on battery power
//
// Specifies the length of time without user input after which the screen is
// locked when running on battery power.
//
// When this policy is set to a value greater than zero, it specifies the length
// of time that the user must remain idle before Google Chrome OS locks the
// screen.
//
// When this policy is set to zero, Google Chrome OS does not lock the screen
// when the user becomes idle.
//
// When this policy is unset, a default length of time is used.
//
// The recommended way to lock the screen on idle is to enable screen locking on
// suspend and have Google Chrome OS suspend after the idle delay. This policy
// should only be used when screen locking should occur a significant amount of
// time sooner than suspend or when suspend on idle is not desired at all.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than the idle delay.
//
// Supported on: chrome_os
message ScreenLockDelayBatteryProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenLockDelayBattery = 2;
}

// Idle warning delay when running on battery power
//
// Specifies the length of time without user input after which a warning dialog
// is shown when running on battery power.
//
// When this policy is set, it specifies the length of time that the user must
// remain idle before Google Chrome OS shows a warning dialog telling the user
// that the idle action is about to be taken.
//
// When this policy is unset, no warning dialog is shown.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than or equal the idle delay.
//
// Supported on: chrome_os
message IdleWarningDelayBatteryProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleWarningDelayBattery = 2;
}

// Idle delay when running on battery power
//
// Specifies the length of time without user input after which the idle action
// is taken when running on battery power.
//
// When this policy is set, it specifies the length of time that the user must
// remain idle before Google Chrome OS takes the idle action, which can be
// configured separately.
//
// When this policy is unset, a default length of time is used.
//
// The policy value should be specified in milliseconds.
//
// Supported on: chrome_os
message IdleDelayBatteryProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleDelayBattery = 2;
}

// Action to take when the idle delay is reached
//
// Specify the action to take when the idle delay is reached.
//
// Note that this policy is deprecated and will be removed in the future.
//
// This policy provides a fallback value for the more-specific IdleActionAC and
// IdleActionBattery policies. If this policy is set, its value gets used if the
// respective more-specific policy is not set.
//
// When this policy is unset, behavior of the more-specific policies remains
// unaffected.
//
// Valid values:
//   0: Suspend
//   1: Log the user out
//   2: Shut down
//   3: Do nothing
//
// Supported on: chrome_os
message IdleActionProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleAction = 2;
}

// Action to take when the idle delay is reached while running on AC power
//
// Specify the action to take when the idle delay is reached while running on AC
// power.
//
// When this policy is set, it specifies the action that Google Chrome OS takes
// when the user remains idle for the length of time given by the idle delay,
// which can be configured separately.
//
// When this policy is unset, the default action is taken, which is suspend.
//
// If the action is suspend, Google Chrome OS can separately be configured to
// either lock or not lock the screen before suspending.
//
// Valid values:
//   0: Suspend
//   1: Log the user out
//   2: Shut down
//   3: Do nothing
//
// Supported on: chrome_os
message IdleActionACProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleActionAC = 2;
}

// Action to take when the idle delay is reached while running on battery power
//
// Specify the action to take when the idle delay is reached while running on
// battery power.
//
// When this policy is set, it specifies the action that Google Chrome OS takes
// when the user remains idle for the length of time given by the idle delay,
// which can be configured separately.
//
// When this policy is unset, the default action is taken, which is suspend.
//
// If the action is suspend, Google Chrome OS can separately be configured to
// either lock or not lock the screen before suspending.
//
// Valid values:
//   0: Suspend
//   1: Log the user out
//   2: Shut down
//   3: Do nothing
//
// Supported on: chrome_os
message IdleActionBatteryProto {
  optional PolicyOptions policy_options = 1;
  optional int64 IdleActionBattery = 2;
}

// Action to take when the user closes the lid
//
// Specify the action to take when the user closes the lid.
//
// When this policy is set, it specifies the action that Google Chrome OS takes
// when the user closes the device's lid.
//
// When this policy is unset, the default action is taken, which is suspend.
//
// If the action is suspend, Google Chrome OS can separately be configured to
// either lock or not lock the screen before suspending.
//
// Valid values:
//   0: Suspend
//   1: Log the user out
//   2: Shut down
//   3: Do nothing
//
// Supported on: chrome_os
message LidCloseActionProto {
  optional PolicyOptions policy_options = 1;
  optional int64 LidCloseAction = 2;
}

// Specify whether audio activity affects power management
//
// Specifies whether audio activity affects power management.
//
// If this policy is set to True or is unset, the user is not considered to be
// idle while audio is playing. This prevents the idle timeout from being
// reached and the idle action from being taken. However, screen dimming, screen
// off and screen lock will be performed after the configured timeouts,
// irrespective of audio activity.
//
// If this policy is set to False, audio activity does not prevent the user from
// being considered idle.
//
// Supported on: chrome_os
message PowerManagementUsesAudioActivityProto {
  optional PolicyOptions policy_options = 1;
  optional bool PowerManagementUsesAudioActivity = 2;
}

// Specify whether video activity affects power management
//
// Specifies whether video activity affects power management.
//
// If this policy is set to True or is unset, the user is not considered to be
// idle while video is playing. This prevents the idle delay, screen dim delay,
// screen off delay and screen lock delay from being reached and the
// corresponding actions from being taken.
//
// If this policy is set to False, video activity does not prevent the user from
// being considered idle.
//
// Supported on: chrome_os
message PowerManagementUsesVideoActivityProto {
  optional PolicyOptions policy_options = 1;
  optional bool PowerManagementUsesVideoActivity = 2;
}

// Percentage by which to scale the idle delay in presentation mode (deprecated)
//
// This policy has been retired as of Google Chrome OS version 29. Please use
// the PresentationScreenDimDelayScale policy instead.
//
// Supported on:
message PresentationIdleDelayScaleProto {
  optional PolicyOptions policy_options = 1;
  optional int64 PresentationIdleDelayScale = 2;
}

// Percentage by which to scale the screen dim delay in presentation mode
//
// Specifies the percentage by which the screen dim delay is scaled when the
// device is in presentation mode.
//
// If this policy is set, it specifies the percentage by which the screen dim
// delay is scaled when the device is in presentation mode. When the screen dim
// delay is scaled, the screen off, screen lock and idle delays get adjusted to
// maintain the same distances from the screen dim delay as originally
// configured.
//
// If this policy is unset, a default scale factor is used.
//
// The scale factor must be 100% or more. Values that would make the screen dim
// delay in presentation mode shorter than the regular screen dim delay are not
// allowed.
//
// Supported on: chrome_os
message PresentationScreenDimDelayScaleProto {
  optional PolicyOptions policy_options = 1;
  optional int64 PresentationScreenDimDelayScale = 2;
}

// Allow screen wake locks
//
// Specifies whether screen wake locks are allowed. Screen wake locks can be
// requested by extensions via the power management extension API.
//
// If this policy is set to true or left not set, screen wake locks will be
// honored for power management.
//
// If this policy is set to false, screen wake lock requests will get ignored.
//
// Supported on: chrome_os
message AllowScreenWakeLocksProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowScreenWakeLocks = 2;
}

// Percentage by which to scale the screen dim delay if the user becomes active
// after dimming
//
// Specifies the percentage by which the screen dim delay is scaled when user
// activity is observed while the screen is dimmed or soon after the screen has
// been turned off.
//
// If this policy is set, it specifies the percentage by which the screen dim
// delay is scaled when user activity is observed while the screen is dimmed or
// soon after the screen has been turned off. When the dim delay is scaled, the
// screen off, screen lock and idle delays get adjusted to maintain the same
// distances from the screen dim delay as originally configured.
//
// If this policy is unset, a default scale factor is used.
//
// The scale factor must be 100% or more.
//
// Supported on: chrome_os
message UserActivityScreenDimDelayScaleProto {
  optional PolicyOptions policy_options = 1;
  optional int64 UserActivityScreenDimDelayScale = 2;
}

// Wait for initial user activity
//
// Specifies whether power management delays and the session length limit should
// only start running after the first user activity has been observed in a
// session.
//
// If this policy is set to True, power management delays and the session length
// limit do not start running until after the first user activity has been
// observed in a session.
//
// If this policy is set to False or left unset, power management delays and the
// session length limit start running immediately on session start.
//
// Supported on: chrome_os
message WaitForInitialUserActivityProto {
  optional PolicyOptions policy_options = 1;
  optional bool WaitForInitialUserActivity = 2;
}

// Power management settings when the user becomes idle
//
// Configure power management settings when the user becomes idle.
//
// This policy controls multiple settings for the power management strategy when
// the user becomes idle.
//
// There are four types of action:
// * The screen will be dimmed if the user remains idle for the time specified
// by |ScreenDim|.
// * The screen will be turned off if the user remains idle for the time
// specified by |ScreenOff|.
// * A warning dialog will be shown if the user remains idle for the time
// specified by |IdleWarning|, telling the user that the idle action is about to
// be taken.
// * The action specified by |IdleAction| will be taken if the user remains idle
// for the time specified by |Idle|.
//
// For each of above actions, the delay should be specified in milliseconds, and
// needs to be set to a value greater than zero to trigger the corresponding
// action. In case the delay is set to zero, Google Chrome OS will not take the
// corresponding action.
//
// For each of the above delays, when the length of time is unset, a default
// value will be used.
//
// Note that |ScreenDim| values will be clamped to be less than or equal to
// |ScreenOff|, |ScreenOff| and |IdleWarning| will be clamped to be less than or
// equal to |Idle|.
//
// |IdleAction| can be one of four possible actions:
// * |Suspend|
// * |Logout|
// * |Shutdown|
// * |DoNothing|
//
// When the |IdleAction| is unset, the default action is taken, which is
// suspend.
//
// There are also separate settings for AC power and battery.
//
// Value schema:
// {
//     "properties": {
//         "AC": {
//             "description": "Delays and actions to take when the device is
// idle and running on AC power",
//             "id": "PowerManagementDelays",
//             "properties": {
//                 "Delays": {
//                     "properties": {
//                         "Idle": {
//                             "description": "The length of time without user
// input after which the idle action is taken, in milliseconds",
//                             "minimum": 0,
//                             "type": "integer"
//                         },
//                         "IdleWarning": {
//                             "description": "The length of time without user
// input after which a warning dialog is shown, in milliseconds",
//                             "minimum": 0,
//                             "type": "integer"
//                         },
//                         "ScreenDim": {
//                             "description": "The length of time without user
// input after which the screen is dimmed, in milliseconds",
//                             "minimum": 0,
//                             "type": "integer"
//                         },
//                         "ScreenOff": {
//                             "description": "The length of time without user
// input after which the screen is turned off, in milliseconds",
//                             "minimum": 0,
//                             "type": "integer"
//                         }
//                     },
//                     "type": "object"
//                 },
//                 "IdleAction": {
//                     "description": "Action to take when the idle delay is
// reached",
//                     "enum": [
//                         "Suspend",
//                         "Logout",
//                         "Shutdown",
//                         "DoNothing"
//                     ],
//                     "type": "string"
//                 }
//             },
//             "type": "object"
//         },
//         "Battery": {
//             "$ref": "PowerManagementDelays",
//             "description": "Delays and actions to take when the device is
// idle and running on battery"
//         }
//     },
//     "type": "object"
// }
//
// Supported on: chrome_os
message PowerManagementIdleSettingsProto {
  optional PolicyOptions policy_options = 1;
  optional string PowerManagementIdleSettings = 2;
}

// Screen lock delays
//
// Specifies the length of time without user input after which the screen is
// locked when running on AC power or battery.
//
// When the length of time is set to a value greater than zero, it represents
// the length of time that the user must remain idle before Google Chrome OS
// locks the screen.
//
// When the length of time is set to zero, Google Chrome OS does not lock the
// screen when the user becomes idle.
//
// When the length of time is unset, a default length of time is used.
//
// The recommended way to lock the screen on idle is to enable screen locking on
// suspend and have Google Chrome OS suspend after the idle delay. This policy
// should only be used when screen locking should occur a significant amount of
// time sooner than suspend or when suspend on idle is not desired at all.
//
// The policy value should be specified in milliseconds. Values are clamped to
// be less than the idle delay.
//
// Value schema:
// {
//     "properties": {
//         "AC": {
//             "description": "The length of time without user input after which
// the screen is locked when running on AC power, in milliseconds",
//             "minimum": 0,
//             "type": "integer"
//         },
//         "Battery": {
//             "description": "The length of time without user input after which
// the screen is locked when running on battery, in milliseconds",
//             "minimum": 0,
//             "type": "integer"
//         }
//     },
//     "type": "object"
// }
//
// Supported on: chrome_os
message ScreenLockDelaysProto {
  optional PolicyOptions policy_options = 1;
  optional string ScreenLockDelays = 2;
}

// Set the Terms of Service for a device-local account
//
// Sets the Terms of Service that the user must accept before starting a device-
// local account session.
//
// If this policy is set, Google Chrome OS will download the Terms of Service
// and present them to the user whenever a device-local account session is
// starting. The user will only be allowed into the session after accepting the
// Terms of Service.
//
// If this policy is not set, no Terms of Service are shown.
//
// The policy should be set to a URL from which Google Chrome OS can download
// the Terms of Service. The Terms of Service must be plain text, served as MIME
// type text/plain. No markup is allowed.
//
// Supported on: chrome_os
message TermsOfServiceURLProto {
  optional PolicyOptions policy_options = 1;
  optional string TermsOfServiceURL = 2;
}

// Show accessibility options in system tray menu
//
// Show Google Chrome OS accessibility options in the system menu.
//
// If this policy is set to true, Accessibility options always appear in system
// tray menu.
//
// If this policy is set to false, Accessibility options never appear in system
// tray menu.
//
// If you set this policy, users cannot change or override it.
//
// If this policy is left unset, Accessibility options will not appear in the
// system tray menu, but the user can cause the Accessibility options to appear
// via the Settings page.
//
// Supported on: chrome_os
message ShowAccessibilityOptionsInSystemTrayMenuProto {
  optional PolicyOptions policy_options = 1;
  optional bool ShowAccessibilityOptionsInSystemTrayMenu = 2;
}

// Enable large cursor
//
// Enable the large cursor accessibility feature.
//
// If this policy is set to true, the large cursor will always be enabled.
//
// If this policy is set to false, the large cursor will always be disabled.
//
// If you set this policy, users cannot change or override it.
//
// If this policy is left unset, the large cursor is disabled initially but can
// be enabled by the user anytime.
//
// Supported on: chrome_os
message LargeCursorEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool LargeCursorEnabled = 2;
}

// Enable spoken feedback
//
// Enable the spoken feedback accessibility feature.
//
// If this policy is set to true, spoken feedback will always be enabled.
//
// If this policy is set to false, spoken feedback will always be disabled.
//
// If you set this policy, users cannot change or override it.
//
// If this policy is left unset, spoken feedback is disabled initially but can
// be enabled by the user anytime.
//
// Supported on: chrome_os
message SpokenFeedbackEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SpokenFeedbackEnabled = 2;
}

// Enable high contrast mode
//
// Enable the high contrast mode accessibility feature.
//
// If this policy is set to true, high contrast mode will always be enabled.
//
// If this policy is set to false, high contrast mode will always be disabled.
//
// If you set this policy, users cannot change or override it.
//
// If this policy is left unset, high contrast mode is disabled initially but
// can be enabled by the user anytime.
//
// Supported on: chrome_os
message HighContrastEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool HighContrastEnabled = 2;
}

// Enable on-screen keyboard
//
// Enable the on-screen keyboard accessibility feature.
//
// If this policy is set to true, the on-screen keyboard will always be enabled.
//
// If this policy is set to false, the on-screen keyboard will always be
// disabled.
//
// If you set this policy, users cannot change or override it.
//
// If this policy is left unset, the on-screen keyboard is disabled initially
// but can be enabled by the user anytime.
//
// Supported on: chrome_os
message VirtualKeyboardEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool VirtualKeyboardEnabled = 2;
}

// Media keys default to function keys
//
// Changes the default behaviour of the top row keys to function keys.
//
// If this policy is set to true, the keyboard's top row of keys will produce
// function key commands per default. The search key has to be pressed to revert
// their behavior back to media keys.
//
// If this policy is set to false or left unset, the keyboard will produce media
// key commands per default and function key commands when the search key is
// held.
//
// Supported on: chrome_os
message KeyboardDefaultToFunctionKeysProto {
  optional PolicyOptions policy_options = 1;
  optional bool KeyboardDefaultToFunctionKeys = 2;
}

// Set screen magnifier type
//
// Set the type of screen magnifier that is enabled.
//
// If this policy is set, it controls the type of screen magnifier that is
// enabled. Setting the policy to "None" disables the screen magnifier.
//
// If you set this policy, users cannot change or override it.
//
// If this policy is left unset, the screen magnifier is disabled initially but
// can be enabled by the user anytime.
//
// Valid values:
//   0: Screen magnifier disabled
//   1: Full-screen magnifier enabled
//
// Supported on: chrome_os
message ScreenMagnifierTypeProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ScreenMagnifierType = 2;
}

// Hide the web store from the New Tab Page and app launcher
//
// Hide the Chrome Web Store app and footer link from the New Tab Page and
// Google Chrome OS app launcher.
//
// When this policy is set to true, the icons are hidden.
//
// When this policy is set to false or is not configured, the icons are visible.
//
// Supported on: linux, mac, win
message HideWebStoreIconProto {
  optional PolicyOptions policy_options = 1;
  optional bool HideWebStoreIcon = 2;
}

// Set the restriction on the fetching of the Variations seed
//
// Add a parameter to the fetching of the Variations seed in Google Chrome.
//
// If specified, will add a query parameter called 'restrict' to the URL used to
// fetch the Variations seed. The value of the parameter will be the value
// specified in this policy.
//
// If not specified, will not modify the Variations seed URL.
//
// Supported on: android, linux, mac, win
message VariationsRestrictParameterProto {
  optional PolicyOptions policy_options = 1;
  optional string VariationsRestrictParameter = 2;
}

// Enable remote attestation for the user
//
// If true, the user can use the hardware on Chrome devices to remote attest its
// identity to the privacy CA via the Enterprise Platform Keys API using
// chrome.enterprise.platformKeys.challengeUserKey().
//
// If it is set to false, or if it is not set, calls to the API will fail with
// an error code.
//
// Supported on: chrome_os
message AttestationEnabledForUserProto {
  optional PolicyOptions policy_options = 1;
  optional bool AttestationEnabledForUser = 2;
}

// Extensions allowed to to use the remote attestation API
//
// This policy specifies the allowed extensions to use the Enterprise Platform
// Keys API function chrome.enterprise.platformKeys.challengeUserKey() for
// remote attestation. Extensions must be added to this list to use the API.
//
// If an extension is not in the list, or the list is not set, the call to the
// API will fail with an error code.
//
// Supported on: chrome_os
message AttestationExtensionWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList AttestationExtensionWhitelist = 2;
}

// Suppress the Google Chrome Frame turndown prompt
//
// Suppresses the turndown prompt that appears when a site is rendered by Google
// Chrome Frame.
//
// Supported on:
message SuppressChromeFrameTurndownPromptProto {
  optional PolicyOptions policy_options = 1;
  optional bool SuppressChromeFrameTurndownPrompt = 2;
}

// Default behavior for sites not in any content pack
//
// The default behavior for sites not in any content pack.
//
// This policy is for internal use by Google Chrome itself.
//
// Valid values:
//   0: Allow access to sites outside of content packs
//   1: Warn when visiting sites outside of content packs
//   2: Block access to sites outside of content packs
//
// Supported on: chrome_os, linux, mac, win
message ContentPackDefaultFilteringBehaviorProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ContentPackDefaultFilteringBehavior = 2;
}

// Managed user manual exception hosts
//
// A dictionary mapping hostnames to a boolean flag specifying whether access to
// the host should be allowed (true) or blocked (false).
//
// This policy is for internal use by Google Chrome itself.
//
// Value schema:
// {
//     "additionalProperties": {
//         "type": "boolean"
//     },
//     "type": "object"
// }
//
// Supported on: chrome_os, linux, mac, win
message ContentPackManualBehaviorHostsProto {
  optional PolicyOptions policy_options = 1;
  optional string ContentPackManualBehaviorHosts = 2;
}

// Managed user manual exception URLs
//
// A dictionary mapping URLs to a boolean flag specifying whether access to the
// host should be allowed (true) or blocked (false).
//
// This policy is for internal use by Google Chrome itself.
//
// Value schema:
// {
//     "additionalProperties": {
//         "type": "boolean"
//     },
//     "type": "object"
// }
//
// Supported on: chrome_os, linux, mac, win
message ContentPackManualBehaviorURLsProto {
  optional PolicyOptions policy_options = 1;
  optional string ContentPackManualBehaviorURLs = 2;
}

// Enable creation of supervised users
//
// If set to false, supervised-user creation by this user will be disabled. Any
// existing supervised users will still be available.
//
// If set to true or not configured, supervised users can be created and managed
// by this user.
//
// Supported on: linux, mac, win
message SupervisedUserCreationEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SupervisedUserCreationEnabled = 2;
}

// Enable the supervised user content provider
//
// If true and the user is a supervised user then other Android apps can query
// the user's web restrictions through a content provider.
//
// If false or unset then the content provider returns no information.
//
// Supported on: android
message SupervisedUserContentProviderEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool SupervisedUserContentProviderEnabled = 2;
}

// Managed Bookmarks
//
// Configures a list of managed bookmarks.
//
// The policy consists of a list of bookmarks whereas each bookmark is a
// dictionary containing the keys "name" and "url" which hold the bookmark's
// name and its target. A
// subfolder may be configured by defining a bookmark without an "url" key but
// with an additional "children" key which itself contains a list of
// bookmarks as defined above (some of which may be folders again). Google
// Chrome amends incomplete URLs
// as if they were submitted via the Omnibox, for example "google.com" becomes
// "https://google.com/".
//
// These bookmarks are placed in a "Managed bookmarks" folder that can't be
// modified by the user, but the user can choose to hide it from the bookmark
// bar. Managed bookmarks are not synced to the user account and can't be
// modified by extensions.
//
// Starting with release 51, the folder name for the bookmarks is customizable
// by adding a {"toplevel_name": "some name"} list item.
//
// Value schema:
// {
//     "items": {
//         "id": "BookmarkType",
//         "properties": {
//             "children": {
//                 "items": {
//                     "$ref": "BookmarkType"
//                 },
//                 "type": "array"
//             },
//             "name": {
//                 "type": "string"
//             },
//             "toplevel_name": {
//                 "type": "string"
//             },
//             "url": {
//                 "type": "string"
//             }
//         },
//         "type": "object"
//     },
//     "type": "array"
// }
//
// Supported on: android, chrome_os, linux, mac, win
message ManagedBookmarksProto {
  optional PolicyOptions policy_options = 1;
  optional string ManagedBookmarks = 2;
}

// Enable the data compression proxy feature
//
// Enable or disable the data compression proxy and prevents users from changing
// this setting.
//
// If you enable or disable this setting, users cannot change or override this
// setting.
//
// If this policy is left not set, the data compression proxy feature will be
// available for the user to choose whether to use it or not.
//
// Supported on: android
message DataCompressionProxyEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DataCompressionProxyEnabled = 2;
}

// User avatar image
//
// Configure user avatar image.
//
// This policy allows you to configure the avatar image representing the user on
// the login screen. The policy is set by specifying the URL from which Google
// Chrome OS can download the avatar image and a cryptographic hash used to
// verify the integrity of the download. The image must be in JPEG format, its
// size must not exceed 512kB. The URL must be accessible without any
// authentication.
//
// The avatar image is downloaded and cached. It will be re-downloaded whenever
// the URL or the hash changes.
//
// The policy should be specified as a string that expresses the URL and hash in
// JSON format, conforming to the following schema:
// {
// "type": "object",
// "properties": {
// "url": {
// "description": "The URL from which the avatar image can be downloaded.",
// "type": "string"
// },
// "hash": {
// "description": "The SHA-256 hash of the avatar image.",
// "type": "string"
// }
// }
// }
//
// If this policy is set, Google Chrome OS will download and use the avatar
// image.
//
// If you set this policy, users cannot change or override it.
//
// If the policy is left not set, the user can choose the avatar image
// representing them on the login screen.
//
// Supported on: chrome_os
message UserAvatarImageProto {
  optional PolicyOptions policy_options = 1;
  optional string UserAvatarImage = 2;
}

// Wallpaper image
//
// Configure wallpaper image.
//
// This policy allows you to configure the wallpaper image that is shown on the
// desktop and on the login screen background for the user. The policy is set by
// specifying the URL from which Google Chrome OS can download the wallpaper
// image and a cryptographic hash used to verify the integrity of the download.
// The image must be in JPEG format, its file size must not exceed 16MB. The URL
// must be accessible without any authentication.
//
// The wallpaper image is downloaded and cached. It will be re-downloaded
// whenever the URL or the hash changes.
//
// The policy should be specified as a string that expresses the URL and hash in
// JSON format, conforming to the following schema:
// {
// "type": "object",
// "properties": {
// "url": {
// "description": "The URL from which the wallpaper image can be downloaded.",
// "type": "string"
// },
// "hash": {
// "description": "The SHA-256 hash of the wallpaper image.",
// "type": "string"
// }
// }
// }
//
// If this policy is set, Google Chrome OS will download and use the wallpaper
// image.
//
// If you set this policy, users cannot change or override it.
//
// If the policy is left not set, the user can choose an image to be shown on
// the desktop and on the login screen background.
//
// Supported on: chrome_os
message WallpaperImageProto {
  optional PolicyOptions policy_options = 1;
  optional string WallpaperImage = 2;
}

// Enable deprecated web platform features for a limited time
//
// Specify a list of deprecated web platform features to re-enable temporarily.
//
// This policy gives administrators the ability to re-enable deprecated web
// platform features for a limited time. Features are identified by a string tag
// and the features corresponding to the tags included in the list specified by
// this policy will get re-enabled.
//
// If this policy is left not set, or the list is empty or does not match one of
// the supported string tags, all deprecated web platform features will remain
// disabled.
//
// While the policy itself is supported on the above platforms, the feature it
// is enabling may be available on fewer platforms. Not all deprecated Web
// Platform features can be re-enabled. Only the ones explicitly listed below
// can be for a limited period of time, which is different per feature. The
// general format of the string tag will be
// [DeprecatedFeatureName]_EffectiveUntil[yyyymmdd]. As reference, you can find
// the intent behind the Web Platform feature changes at
// https://bit.ly/blinkintents.
//
// Valid values:
//   ExampleDeprecatedFeature_EffectiveUntil20080902: Enable
// ExampleDeprecatedFeature API through 2008/09/02
//
// Supported on: android, chrome_os, linux, mac, win
message EnableDeprecatedWebPlatformFeaturesProto {
  optional PolicyOptions policy_options = 1;
  optional StringList EnableDeprecatedWebPlatformFeatures = 2;
}

// Allows Smart Lock to be used
//
// Allows Smart Lock to be used on Google Chrome OS devices.
//
// If you enable this setting, users will be allowed to use Smart Lock if the
// requirements for the feature are satisfied.
//
// If you disable this setting, users will not be allowed to use Smart Lock.
//
// If this policy is left not set, the default is not allowed for enterprise-
// managed users and allowed for non-managed users.
//
// Supported on: chrome_os
message EasyUnlockAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool EasyUnlockAllowed = 2;
}

// Set the recommended locales for a public session
//
// Sets one or more recommended locales for a public session, allowing users to
// easily choose one of these locales.
//
// The user can choose a locale and a keyboard layout before starting a public
// session. By default, all locales supported by Google Chrome OS are listed in
// alphabetic order. You can use this policy to move a set of recommended
// locales to the top of the list.
//
// If this policy is not set, the current UI locale will be pre-selected.
//
// If this policy is set, the recommended locales will be moved to the top of
// the list and will be visually separated from all other locales. The
// recommended locales will be listed in the order in which they appear in the
// policy. The first recommended locale will be pre-selected.
//
// If there is more than one recommended locale, it is assumed that users will
// want to select among these locales. Locale and keyboard layout selection will
// be prominently offered when starting a public session. Otherwise, it is
// assumed that most users will want to use the pre-selected locale. Locale and
// keyboard layout selection will be less prominently offered when starting a
// public session.
//
// When this policy is set and automatic login is enabled (see the
// |DeviceLocalAccountAutoLoginId| and |DeviceLocalAccountAutoLoginDelay|
// policies), the automatically started public session will use the first
// recommended locale and the most popular keyboard layout matching this locale.
//
// The pre-selected keyboard layout will always be the most popular layout
// matching the pre-selected locale.
//
// This policy can only be set as recommended. You can use this policy to move a
// set of recommended locales to the top but users are always allowed to choose
// any locale supported by Google Chrome OS for their session.
//
// Supported on: chrome_os
message SessionLocalesProto {
  optional PolicyOptions policy_options = 1;
  optional StringList SessionLocales = 2;
}

// Enable guest mode in browser
//
// If this policy is set to true or not configured, Google Chrome will enable
// guest logins. Guest logins are Google Chrome profiles where all windows are
// in incognito mode.
//
// If this policy is set to false, Google Chrome will not allow guest profiles
// to be started.
//
// Supported on: linux, mac, win
message BrowserGuestModeEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool BrowserGuestModeEnabled = 2;
}

// Enable add person in profile manager
//
// If this policy is set to true or not configured, Google Chrome will allow Add
// Person from the user manager.
//
// If this policy is set to false, Google Chrome will not allow creation of new
// profiles from the profile manager.
//
// Supported on: linux, mac, win
message BrowserAddPersonEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool BrowserAddPersonEnabled = 2;
}

// Enables force sign in for Google Chrome.
//
// If this policy is set to true, user has to sign in to Google Chrome with
// their profile before using the browser. And the default value of
// BrowserGuestModeEnabled will be set to false.
//
// If this policy is set to false or not configured, user can use the browser
// without sign in to Google Chrome.
//
// Supported on: android, linux, mac, win
message ForceBrowserSigninProto {
  optional PolicyOptions policy_options = 1;
  optional bool ForceBrowserSignin = 2;
}

// Minimum SSL version enabled
//
// Warning: SSLv3 support will be entirely removed from Google Chrome after
// version 43 (around July 2015) and this policy will be removed at the same
// time.
//
// If this policy is not configured then Google Chrome uses a default minimum
// version which is SSLv3 in Google Chrome 39 and TLS 1.0 in later versions.
//
// Otherwise it may be set to one of the following values: "sslv3", "tls1",
// "tls1.1" or "tls1.2". When set, Google Chrome will not use SSL/TLS versions
// less than the specified version. An unrecognized value will be ignored.
//
// Note that, despite the number, "sslv3" is an earlier version than "tls1".
//
// Valid values:
//   ssl3: SSL 3.0
//   tls1: TLS 1.0
//   tls1.1: TLS 1.1
//   tls1.2: TLS 1.2
//
// Supported on:
message SSLVersionMinProto {
  optional PolicyOptions policy_options = 1;
  optional string SSLVersionMin = 2;
}

// Minimum TLS version to fallback to
//
// Warning: The TLS version fallback will be removed from Google Chrome after
// version 52 (around September 2016) and this policy will stop working then.
//
// When a TLS handshake fails, Google Chrome would previously retry the
// connection with a lesser version of TLS in order to work around bugs in HTTPS
// servers. This setting configures the version at which this fallback process
// will stop. If a server performs version negotiation correctly (i.e. without
// breaking the connection) then this setting doesn't apply. Regardless, the
// resulting connection must still comply with SSLVersionMin.
//
// If this policy is not configured or if it is set to "tls1.2" then Google
// Chrome no longer performs this fallback. Note this does not disable support
// for older TLS versions, only whether Google Chrome will work around buggy
// servers which cannot negotiate versions correctly.
//
// Otherwise, if compatibility with a buggy server must be maintained, this
// policy may be set to "tls1.1". This is a stopgap measure and the server
// should be rapidly fixed.
//
// Valid values:
//   tls1.1: TLS 1.1
//   tls1.2: TLS 1.2
//
// Supported on:
message SSLVersionFallbackMinProto {
  optional PolicyOptions policy_options = 1;
  optional string SSLVersionFallbackMin = 2;
}

// Disable Certificate Transparency enforcement for a list of URLs
//
// Disables enforcing Certificate Transparency requirements to the listed URLs.
//
// This policy allows certificates for the hostnames in the specified URLs to
// not be disclosed via Certificate Transparency. This allows certificates that
// would otherwise be untrusted, because they were not properly publicly
// disclosed, to continue to be used, but makes it harder to detect misissued
// certificates for those hosts.
//
// A URL pattern is formatted according to
// https://www.chromium.org/administrators/url-blacklist-filter-format. However,
// because certificates are valid for a given hostname independent of the
// scheme, port, or path, only the hostname portion of the URL is considered.
// Wildcard hosts are not supported.
//
// If this policy is not set, any certificate that is required to be disclosed
// via Certificate Transparency will be treated as untrusted if it is not
// disclosed according to the Certificate Transparency policy.
//
// Supported on: android, chrome_os, linux, mac, win
message CertificateTransparencyEnforcementDisabledForUrlsProto {
  optional PolicyOptions policy_options = 1;
  optional StringList CertificateTransparencyEnforcementDisabledForUrls = 2;
}

// Whether RC4 cipher suites in TLS are enabled
//
// Warning: RC4 will be completely removed from Google Chrome after version 52
// (around September 2016) and this policy will stop working then.
//
// If the policy is not set, or is set to false, then RC4 cipher suites in TLS
// will not be enabled. Otherwise it may be set to true to retain compatibility
// with an outdated server. This is a stopgap measure and the server should be
// reconfigured.
//
// Supported on:
message RC4EnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool RC4Enabled = 2;
}

// Whether DHE cipher suites in TLS are enabled
//
// Warning: DHE will be completely removed from Google Chrome after version 57
// (around March 2017) and this policy will stop working then.
//
// If the policy is not set, or is set to false, then DHE cipher suites in TLS
// will not be enabled. Otherwise it may be set to true to enable DHE cipher
// suites and retain compatibility with an outdated server. This is a stopgap
// measure and the server should be reconfigured.
//
// Servers are encouraged to migrated to ECDHE cipher suites. If these are
// unavailable, ensure a cipher suite using RSA key exchange is enabled.
//
// Supported on: android, chrome_os, ios, linux, mac, win
message DHEEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool DHEEnabled = 2;
}

// Enable Touch to Search
//
// Enables the availability of Touch to Search in Google Chrome's content view.
//
// If you enable this setting, Touch to Search will be available to the user and
// they can choose to turn the feature on or off.
//
// If you disable this setting, Touch to Search will be disabled completely.
//
// If this policy is left not set, it is equivalent to being enabled, see
// description above.
//
// Supported on: android
message ContextualSearchEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ContextualSearchEnabled = 2;
}

// Maximize the first browser window on first run
//
// If this policy is set to true, Google Chrome will unconditionally maximize
// the the first window shown on first run.
// If this policy is set to false or not configured, the decision whether to
// maximize the first window shown will be based on the screen size.
//
// Supported on: chrome_os
message ForceMaximizeOnFirstRunProto {
  optional PolicyOptions policy_options = 1;
  optional bool ForceMaximizeOnFirstRun = 2;
}

// Allow proceeding from the SSL warning page
//
// Chrome shows a warning page when users navigate to sites that have SSL
// errors. By default or when this policy is set to true, users are allowed to
// click through these warning pages.
// Setting this policy to false disallows users to click through any warning
// page.
//
// Supported on: android, chrome_os, linux, mac, win
message SSLErrorOverrideAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool SSLErrorOverrideAllowed = 2;
}

// Allows QUIC protocol
//
// If this policy is set to true or not set usage of QUIC protocol in Google
// Chrome is allowed.
// If this policy is set to false usage of QUIC protocol is disallowed.
//
// Supported on: chrome_os, linux, mac, win
message QuicAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool QuicAllowed = 2;
}

// Key Permissions
//
// Grants access to corporate keys to extensions.
//
// Keys are designated for corporate usage if they're generated using the
// chrome.enterprise.platformKeys API on a managed account. Keys imported or
// generated in another way are not designated for corporate usage.
//
// Access to keys designated for corporate usage is solely controlled by this
// policy. The user can neither grant nor withdraw access to corporate keys to
// or from extensions.
//
// By default an extension cannot use a key designated for corporate usage,
// which is equivalent to setting allowCorporateKeyUsage to false for that
// extension.
//
// Only if allowCorporateKeyUsage is set to true for an extension, it can use
// any platform key marked for corporate usage to sign arbitrary data. This
// permission should only be granted if the extension is trusted to secure
// access to the key against attackers.
//
// Value schema:
// {
//     "additionalProperties": {
//         "properties": {
//             "allowCorporateKeyUsage": {
//                 "description": "If set to true, this extension can use all
// keys that are designated for corporate usage to sign arbitrary data. If set
// to false, it cannot access any such keys and the user cannot grant such
// permission either.",
//                 "type": "boolean"
//             }
//         },
//         "type": "object"
//     },
//     "type": "object"
// }
//
// Supported on: chrome_os
message KeyPermissionsProto {
  optional PolicyOptions policy_options = 1;
  optional string KeyPermissions = 2;
}

// Enable showing the welcome page on the first browser launch following OS
// upgrade.
//
// Enable showing the welcome page on the first browser launch following OS
// upgrade.
//
// If this policy is set to true or not configured, the browser will re-show the
// welcome page on the first launch following an OS upgrade.
//
// If this policy is set to false, the browser will not re-show the welcome page
// on the first launch following an OS upgrade.
//
// Supported on: win
message WelcomePageOnOSUpgradeEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool WelcomePageOnOSUpgradeEnabled = 2;
}

// Use hardware acceleration when available
//
// Use hardware acceleration when available.
//
// If this policy is set to true or left unset, hardware acceleration will be
// enabled unless a certain GPU feature is blacklisted.
//
// If this policy is set to false, hardware acceleration will be disabled.
//
// Supported on: linux, mac, win
message HardwareAccelerationModeEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool HardwareAccelerationModeEnabled = 2;
}

// Make Unified Desktop available and turn on by default.
//
// If this policy is set to true, Unified Desktop is allowed and
// enabled by default, which allows applications to span multiple displays.
// The user may disable Unified Desktop for individual displays by unchecking
// it in the display settings.
//
// If this policy is set to false or unset, Unified Desktop will be
// disabled. In this case, the user cannot enable the feature.
//
// Supported on: chrome_os
message UnifiedDesktopEnabledByDefaultProto {
  optional PolicyOptions policy_options = 1;
  optional bool UnifiedDesktopEnabledByDefault = 2;
}

// Enable ARC
//
// When this policy is set to true, ARC will be enabled for the user
// (subject to additional policy settings checks - ARC will still be
// unavailable if either ephemeral mode or multiple sign-in is enabled
// in the current user session).
//
// If this setting is disabled or not configured then enterprise users are
// unable to use ARC.
//
// Supported on: chrome_os
message ArcEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ArcEnabled = 2;
}

// Configure ARC
//
// Specifies a set of policies that will be handed over to the ARC runtime. The
// value must be valid JSON.
//
// Supported on: chrome_os
message ArcPolicyProto {
  optional PolicyOptions policy_options = 1;
  optional string ArcPolicy = 2;
}

// Suppress the unsupported OS warning
//
// Suppresses the warning that appears when Google Chrome is running on a
// computer or operating system that is no longer supported.
//
// Supported on: chrome_os, linux, mac, win
message SuppressUnsupportedOSWarningProto {
  optional PolicyOptions policy_options = 1;
  optional bool SuppressUnsupportedOSWarning = 2;
}

// Enables ending processes in Task Manager
//
// Enables ending processes in Google Chrome's Task Manager.
//
// If set to false, the 'End process' button is disabled in the Task Manager.
//
// If set to true or not configured, the user can end processes in the Task
// Manager.
//
// Supported on: chrome_os, linux, mac, win
message TaskManagerEndProcessEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool TaskManagerEndProcessEnabled = 2;
}

// Permit locking the screen
//
// Permit locking the screen.
//
// If this policy is set to false, users will not be able to lock the screen
// (only signing out from the user session will be possible). If this setting is
// set to true or not set, users who authenticated with a password can lock the
// screen.
//
// Supported on: chrome_os
message AllowScreenLockProto {
  optional PolicyOptions policy_options = 1;
  optional bool AllowScreenLock = 2;
}

// Set certificate availability for ARC-apps
//
// If set to SyncDisabled or not configured, Google Chrome OS certificates are
// not available for ARC-apps.
//
// If set to CopyCaCerts, all ONC-installed CA certificates with Web TrustBit
// are available for ARC-apps.
//
// Valid values:
//   0: Disable usage of Google Chrome OS certificates to ARC-apps
//   1: Enable Google Chrome OS CA certificates to ARC-apps
//
// Supported on: chrome_os
message ArcCertificatesSyncModeProto {
  optional PolicyOptions policy_options = 1;
  optional int64 ArcCertificatesSyncMode = 2;
}

// Define domains allowed to access Google Apps
//
// Enables Google Chrome's
// restricted log in feature in Google Apps and prevents users from
// changing this setting.
//
// If you define this setting, the user will only be able to access
// Google Apps (such as Gmail) using accounts from the specified domains.
//
// This setting will NOT prevent the user from loging in on a managed device
// that requires Google authentication. The user will still be allowed to
// sign in to accounts from other domains, but they will receive an error
// when trying to use Google Apps with those accounts.
//
// If you leave this setting empty/not-configured, the user will be able to
// access Google Apps with any account.
//
// This policy causes the X-GoogApps-Allowed-Domains header to be appended to
// all HTTP and HTTPS requests to all google.com domains, as described in
// https://support.google.com/a/answer/1668854.
//
// Users cannot change or override this setting.
//
// Supported on: android, chrome_os, linux, mac, win
message AllowedDomainsForAppsProto {
  optional PolicyOptions policy_options = 1;
  optional string AllowedDomainsForApps = 2;
}

// Enable PAC URL stripping (for https://)
//
// Strips privacy and security sensitive parts of https:// URLs before passing
// them on to PAC scripts (Proxy Auto Config) used by Google Chrome during proxy
// resolution.
//
// When True, the security feature is enabled, and https:// URLs are
// stripped before submitting them to a PAC script. In this manner the PAC
// script is not able to view data that is ordinarily protected by an
// encrypted channel (such as the URL's path and query).
//
// When False, the security feature is disabled, and PAC scripts are
// implicitly granted the ability to view all components of an https://
// URL. This applies to all PAC scripts regardless of origin (including
// those fetched over an insecure transport, or discovered insecurely
// through WPAD).
//
// This defaults to True (security feature enabled), except for Chrome OS
// enterprise users for which this currently defaults to False.
//
// It is recommended that this be set to True. The only reason to set it to
// False is if it causes a compatibility problem with existing PAC scripts.
//
// The desire is to remove this override in the future.
//
// Supported on: chrome_os, linux, mac, win
message PacHttpsUrlStrippingEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool PacHttpsUrlStrippingEnabled = 2;
}

// Enables cast
//
// If this is set to true or is not set, users will be able to cast tabs, sites
// or the desktop from the browser. If set to false, this option will be
// disabled.
//
// Supported on: android, chrome_os, linux, mac, win
message EnableMediaRouterProto {
  optional PolicyOptions policy_options = 1;
  optional bool EnableMediaRouter = 2;
}

// Enable Android Backup Service
//
// When this policy is set to true, Android app data is uploaded to Android
// Backup servers and restored from them upon app re-installations for
// compatible apps.
//
// When this policy is set to false, Android Backup Service will be switched
// off.
//
// If this setting is configured then users are not able change it themselves.
//
// If this setting is not configured then users are able to turn Android Backup
// Service on and off in the Android Settings app.
//
// Supported on: chrome_os
message ArcBackupRestoreEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ArcBackupRestoreEnabled = 2;
}

// Enable Android Google Location Service
//
// When this policy is set to true, the Android Google Location Service is
// enabled. This will allow Android apps to use its data to find the device
// location, and also will enable submitting of anonymous location data to
// Google.
//
// When this policy is set to false, Android Google Location Service will be
// switched off.
//
// If this setting is configured then users are not able change it themselves.
//
// If this setting is not configured then users are able to turn Google Location
// Service on and off in the Android Settings app.
//
// Note that this policy value may be overriden by the DefaultGeolocationSetting
// policy, when the latter is set to BlockGeolocation.
//
// This policy is applicable only to the users that are able to run Android
// apps.
//
// Supported on: chrome_os
message ArcLocationServiceEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ArcLocationServiceEnabled = 2;
}

// Show content suggestions on the New Tab page
//
// If this is set to true or not set, the New Tab page may show content
// suggestions based on the user's browsing history, interests, or location.
//
// If this is set to false, automatically-generated content suggestions are not
// shown on the New Tab page.
//
// Supported on: android
message NTPContentSuggestionsEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool NTPContentSuggestionsEnabled = 2;
}

// Restrict the range of local UDP ports used by WebRTC
//
// If the policy is set, the UDP port range used by WebRTC is restricted to the
// specified port interval (endpoints included).
//
// If the policy is not set, or if it is set to the empty string or an invalid
// port range, WebRTC is allowed to use any available local UDP port.
//
// Supported on: android, chrome_os, linux, mac, win
message WebRtcUdpPortRangeProto {
  optional PolicyOptions policy_options = 1;
  optional string WebRtcUdpPortRange = 2;
}

// Set an external source of URL restrictions
//
// When this policy is set to a non-empty string the WebView will read URL
// restrictions from the content provider with the given authority name.
//
// Supported on: webview_android
message WebRestrictionsAuthorityProto {
  optional PolicyOptions policy_options = 1;
  optional string WebRestrictionsAuthority = 2;
}

// Enables component updates in Google Chrome.
//
// Enables component updates for all components in Google Chrome when not set or
// set to True.
//
// If set to False, updates to components are disabled. However, some components
// are exempt from this policy: updates to any component that does not contain
// executable code, or does not significantly alter the behavior of the browser,
// or is critical for its security will not be disabled.
// Examples of such components include the certificate revocation lists and safe
// browsing data.
//
// Supported on: chrome_os, linux, mac, win
message ComponentUpdatesEnabledProto {
  optional PolicyOptions policy_options = 1;
  optional bool ComponentUpdatesEnabled = 2;
}

// Native Printing
//
// Configures a list of printers.
//
// This policy allows administrators to provide printer configurations for
// their users.
//
// display_name and description are free form strings that
// can be customized for ease of printer selection. manufacturer and model
// should match one of the Google Chrome OS supported
// printers.  uri should be an address reachable
// from a client computer including the scheme,
// port, and queue.  uuid is optional.  If provided, it is used to
// help deduplicate zeroconf printers.
//
// Printer setup is completed upon the first use of a printer.  PPDs are not
// downloaded until the printer is used.  After that time, frequently used
// PPDs are cached.
//
// This policy has no effect on whether users can configure printers on
// individual devices.  It is intended to be supplementary to the
// configuration of printers by individual users.
//
// Supported on: chrome_os
message NativePrintersProto {
  optional PolicyOptions policy_options = 1;
  optional StringList NativePrinters = 2;
}

// Configure allowed quick unlock modes.
//
// A whitelist controlling which quick unlock modes the user can configure and
// use to unlock the lock screen.
//
// This value is a list of strings; valid list entries are: "all", "PIN". Adding
// "all" to the list means that every quick unlock mode is available to the
// user, including ones implemented in the future. Otherwise, only the quick
// unlock modes present in the list will be available.
//
// For example, to allow every quick unlock mode, use ["all"]. To allow only PIN
// unlock, use ["PIN"]. To disable all quick unlock modes, use [].
//
// By default, no quick unlock modes are available for managed devices.
//
// Supported on: chrome_os
message QuickUnlockModeWhitelistProto {
  optional PolicyOptions policy_options = 1;
  optional StringList QuickUnlockModeWhitelist = 2;
}

// Sets how often user has to enter password to use quick unlock.
//
// This setting controls how often the lock screen will request the password to
// be entered in order to continue using quick unlock. Each time the lock screen
// is entered, if the last password entry was more than this setting, the quick
// unlock will not be available on entering the lock screen. Should the user
// stay on the lock screen past this period of time, a password will be
// requested next time the user enters the wrong code, or re-enters the lock
// screen, whichever comes first.
//
// If this setting is configured, users using quick unlock will be requested to
// enter their passwords on the lock screen depending on this setting.
//
// If this setting is not configured, users using quick unlock will be requested
// to enter their password on the lock screen every day.
//
// Valid values:
//   0: Password entry is required every six hours.
//   1: Password entry is required every twelve hours.
//   2: Password entry is required every day (24 hours).
//   3: Password entry is required every week (168 hours).
//
// Supported on: chrome_os
message QuickUnlockTimeoutProto {
  optional PolicyOptions policy_options = 1;
  optional int64 QuickUnlockTimeout = 2;
}

// Sets the minimum length of the lock screen PIN.
//
// This setting controls the minimum PIN length.
//
// The absolute minimum PIN length is 1; values less than 1 are treated as 1.
//
// The default and recommended minimum PIN length is 6 digits.
//
// Supported on: chrome_os
message PinUnlockMinimumLengthProto {
  optional PolicyOptions policy_options = 1;
  optional int64 PinUnlockMinimumLength = 2;
}

// Sets the maximum length of the lock screen PIN.
//
// This setting controls the maximum PIN length.
//
// If this setting is 0 or less, there is no maximum length; the user can set a
// PIN as long as they want.
//
// If this setting is less than PinUnlockMinimumLength but greater than 0, the
// maximum length is the same as the minimum length.
//
// This setting defaults to no maximum length.
//
// Supported on: chrome_os
message PinUnlockMaximumLengthProto {
  optional PolicyOptions policy_options = 1;
  optional int64 PinUnlockMaximumLength = 2;
}

// Enables users to set weak PINs for the lock screen PIN.
//
// If false, users will be unable to set PINs which are weak and easy to guess.
//
// Some example weak PINs: PINs containing only one digit (1111), PINs whose
// digits are increasing by 1 (1234), PINs whose digits are decreasing by 1
// (4321), and PINs which are commonly used.
//
// By default, users will get a warning, not error, if the PIN is considered
// weak.
//
// Supported on: chrome_os
message PinUnlockWeakPinsAllowedProto {
  optional PolicyOptions policy_options = 1;
  optional bool PinUnlockWeakPinsAllowed = 2;
}

// --------------------------------------------------
// Big wrapper PB containing the above groups.

message ChromeSettingsProto {
  optional HomepageLocationProto HomepageLocation = 3;
  optional HomepageIsNewTabPageProto HomepageIsNewTabPage = 4;
  optional DefaultBrowserSettingEnabledProto DefaultBrowserSettingEnabled = 5;
  optional ApplicationLocaleValueProto ApplicationLocaleValue = 6;
  optional AlternateErrorPagesEnabledProto AlternateErrorPagesEnabled = 7;
  optional SearchSuggestEnabledProto SearchSuggestEnabled = 8;
  optional DnsPrefetchingEnabledProto DnsPrefetchingEnabled = 9;
  optional NetworkPredictionOptionsProto NetworkPredictionOptions = 275;
  optional WPADQuickCheckEnabledProto WPADQuickCheckEnabled = 263;
  optional DisableSpdyProto DisableSpdy = 10;
  optional DisabledSchemesProto DisabledSchemes = 87;
  optional Http09OnNonDefaultPortsEnabledProto Http09OnNonDefaultPortsEnabled = 347;
  optional JavascriptEnabledProto JavascriptEnabled = 11;
  optional IncognitoEnabledProto IncognitoEnabled = 12;
  optional IncognitoModeAvailabilityProto IncognitoModeAvailability = 95;
  optional SavingBrowserHistoryDisabledProto SavingBrowserHistoryDisabled = 13;
  optional AllowDeletingBrowserHistoryProto AllowDeletingBrowserHistory = 189;
  optional AllowDinosaurEasterEggProto AllowDinosaurEasterEgg = 311;
  optional RemoteAccessClientFirewallTraversalProto RemoteAccessClientFirewallTraversal = 96;
  optional RemoteAccessHostClientDomainProto RemoteAccessHostClientDomain = 318;
  optional RemoteAccessHostFirewallTraversalProto RemoteAccessHostFirewallTraversal = 97;
  optional RemoteAccessHostDomainProto RemoteAccessHostDomain = 156;
  optional RemoteAccessHostRequireTwoFactorProto RemoteAccessHostRequireTwoFactor = 157;
  optional RemoteAccessHostTalkGadgetPrefixProto RemoteAccessHostTalkGadgetPrefix = 158;
  optional RemoteAccessHostRequireCurtainProto RemoteAccessHostRequireCurtain = 159;
  optional RemoteAccessHostAllowClientPairingProto RemoteAccessHostAllowClientPairing = 236;
  optional RemoteAccessHostAllowGnubbyAuthProto RemoteAccessHostAllowGnubbyAuth = 259;
  optional RemoteAccessHostAllowRelayedConnectionProto RemoteAccessHostAllowRelayedConnection = 265;
  optional RemoteAccessHostUdpPortRangeProto RemoteAccessHostUdpPortRange = 266;
  optional RemoteAccessHostMatchUsernameProto RemoteAccessHostMatchUsername = 287;
  optional RemoteAccessHostTokenUrlProto RemoteAccessHostTokenUrl = 288;
  optional RemoteAccessHostTokenValidationUrlProto RemoteAccessHostTokenValidationUrl = 289;
  optional RemoteAccessHostTokenValidationCertificateIssuerProto RemoteAccessHostTokenValidationCertificateIssuer = 290;
  optional RemoteAccessHostDebugOverridePoliciesProto RemoteAccessHostDebugOverridePolicies = 291;
  optional RemoteAccessHostAllowUiAccessForRemoteAssistanceProto RemoteAccessHostAllowUiAccessForRemoteAssistance = 346;
  optional PrintingEnabledProto PrintingEnabled = 14;
  optional CloudPrintProxyEnabledProto CloudPrintProxyEnabled = 15;
  optional ForceSafeSearchProto ForceSafeSearch = 164;
  optional ForceGoogleSafeSearchProto ForceGoogleSafeSearch = 284;
  optional ForceYouTubeSafetyModeProto ForceYouTubeSafetyMode = 285;
  optional ForceYouTubeRestrictProto ForceYouTubeRestrict = 350;
  optional SafeBrowsingEnabledProto SafeBrowsingEnabled = 16;
  optional MetricsReportingEnabledProto MetricsReportingEnabled = 17;
  optional PasswordManagerEnabledProto PasswordManagerEnabled = 18;
  optional PasswordManagerAllowShowPasswordsProto PasswordManagerAllowShowPasswords = 19;
  optional AutoFillEnabledProto AutoFillEnabled = 20;
  optional DisabledPluginsProto DisabledPlugins = 21;
  optional EnabledPluginsProto EnabledPlugins = 80;
  optional DisabledPluginsExceptionsProto DisabledPluginsExceptions = 81;
  optional AlwaysOpenPdfExternallyProto AlwaysOpenPdfExternally = 349;
  optional DisablePluginFinderProto DisablePluginFinder = 68;
  optional SyncDisabledProto SyncDisabled = 22;
  optional RoamingProfileSupportEnabledProto RoamingProfileSupportEnabled = 360;
  optional RoamingProfileLocationProto RoamingProfileLocation = 361;
  optional SigninAllowedProto SigninAllowed = 192;
  optional EnableDeprecatedWebBasedSigninProto EnableDeprecatedWebBasedSignin = 267;
  optional UserDataDirProto UserDataDir = 65;
  optional DiskCacheDirProto DiskCacheDir = 90;
  optional DiskCacheSizeProto DiskCacheSize = 112;
  optional MediaCacheSizeProto MediaCacheSize = 113;
  optional DownloadDirectoryProto DownloadDirectory = 66;
  optional ClearSiteDataOnExitProto ClearSiteDataOnExit = 67;
  optional CaptivePortalAuthenticationIgnoresProxyProto CaptivePortalAuthenticationIgnoresProxy = 297;
  optional ProxyModeProto ProxyMode = 23;
  optional ProxyServerModeProto ProxyServerMode = 24;
  optional ProxyServerProto ProxyServer = 25;
  optional ProxyPacUrlProto ProxyPacUrl = 26;
  optional ProxyBypassListProto ProxyBypassList = 27;
  optional ProxySettingsProto ProxySettings = 118;
  optional AuthSchemesProto AuthSchemes = 28;
  optional DisableAuthNegotiateCnameLookupProto DisableAuthNegotiateCnameLookup = 29;
  optional EnableAuthNegotiatePortProto EnableAuthNegotiatePort = 30;
  optional AuthServerWhitelistProto AuthServerWhitelist = 31;
  optional AuthNegotiateDelegateWhitelistProto AuthNegotiateDelegateWhitelist = 32;
  optional GSSAPILibraryNameProto GSSAPILibraryName = 33;
  optional AuthAndroidNegotiateAccountTypeProto AuthAndroidNegotiateAccountType = 307;
  optional AllowCrossOriginAuthPromptProto AllowCrossOriginAuthPrompt = 91;
  optional ExtensionInstallBlacklistProto ExtensionInstallBlacklist = 34;
  optional ExtensionInstallWhitelistProto ExtensionInstallWhitelist = 35;
  optional ExtensionInstallForcelistProto ExtensionInstallForcelist = 36;
  optional ExtensionInstallSourcesProto ExtensionInstallSources = 150;
  optional ExtensionAllowedTypesProto ExtensionAllowedTypes = 170;
  optional ExtensionSettingsProto ExtensionSettings = 280;
  optional ShowHomeButtonProto ShowHomeButton = 37;
  optional DeveloperToolsDisabledProto DeveloperToolsDisabled = 38;
  optional RestoreOnStartupProto RestoreOnStartup = 39;
  optional RestoreOnStartupURLsProto RestoreOnStartupURLs = 40;
  optional BlockThirdPartyCookiesProto BlockThirdPartyCookies = 41;
  optional DefaultSearchProviderEnabledProto DefaultSearchProviderEnabled = 42;
  optional DefaultSearchProviderNameProto DefaultSearchProviderName = 43;
  optional DefaultSearchProviderKeywordProto DefaultSearchProviderKeyword = 44;
  optional DefaultSearchProviderSearchURLProto DefaultSearchProviderSearchURL = 45;
  optional DefaultSearchProviderSuggestURLProto DefaultSearchProviderSuggestURL = 46;
  optional DefaultSearchProviderInstantURLProto DefaultSearchProviderInstantURL = 47;
  optional DefaultSearchProviderIconURLProto DefaultSearchProviderIconURL = 48;
  optional DefaultSearchProviderEncodingsProto DefaultSearchProviderEncodings = 49;
  optional DefaultSearchProviderAlternateURLsProto DefaultSearchProviderAlternateURLs = 163;
  optional DefaultSearchProviderSearchTermsReplacementKeyProto DefaultSearchProviderSearchTermsReplacementKey = 173;
  optional DefaultSearchProviderImageURLProto DefaultSearchProviderImageURL = 231;
  optional DefaultSearchProviderNewTabURLProto DefaultSearchProviderNewTabURL = 239;
  optional DefaultSearchProviderSearchURLPostParamsProto DefaultSearchProviderSearchURLPostParams = 232;
  optional DefaultSearchProviderSuggestURLPostParamsProto DefaultSearchProviderSuggestURLPostParams = 233;
  optional DefaultSearchProviderInstantURLPostParamsProto DefaultSearchProviderInstantURLPostParams = 234;
  optional DefaultSearchProviderImageURLPostParamsProto DefaultSearchProviderImageURLPostParams = 235;
  optional DefaultCookiesSettingProto DefaultCookiesSetting = 50;
  optional DefaultImagesSettingProto DefaultImagesSetting = 51;
  optional DefaultJavaScriptSettingProto DefaultJavaScriptSetting = 52;
  optional DefaultPluginsSettingProto DefaultPluginsSetting = 53;
  optional DefaultPopupsSettingProto DefaultPopupsSetting = 54;
  optional DefaultNotificationsSettingProto DefaultNotificationsSetting = 55;
  optional DefaultGeolocationSettingProto DefaultGeolocationSetting = 56;
  optional DefaultMediaStreamSettingProto DefaultMediaStreamSetting = 151;
  optional DefaultWebBluetoothGuardSettingProto DefaultWebBluetoothGuardSetting = 322;
  optional DefaultKeygenSettingProto DefaultKeygenSetting = 315;
  optional AutoSelectCertificateForUrlsProto AutoSelectCertificateForUrls = 104;
  optional CookiesAllowedForUrlsProto CookiesAllowedForUrls = 79;
  optional CookiesBlockedForUrlsProto CookiesBlockedForUrls = 69;
  optional CookiesSessionOnlyForUrlsProto CookiesSessionOnlyForUrls = 70;
  optional ImagesAllowedForUrlsProto ImagesAllowedForUrls = 71;
  optional ImagesBlockedForUrlsProto ImagesBlockedForUrls = 72;
  optional JavaScriptAllowedForUrlsProto JavaScriptAllowedForUrls = 73;
  optional JavaScriptBlockedForUrlsProto JavaScriptBlockedForUrls = 74;
  optional KeygenAllowedForUrlsProto KeygenAllowedForUrls = 316;
  optional KeygenBlockedForUrlsProto KeygenBlockedForUrls = 317;
  optional PluginsAllowedForUrlsProto PluginsAllowedForUrls = 75;
  optional PluginsBlockedForUrlsProto PluginsBlockedForUrls = 76;
  optional PopupsAllowedForUrlsProto PopupsAllowedForUrls = 77;
  optional RegisteredProtocolHandlersProto RegisteredProtocolHandlers = 270;
  optional PopupsBlockedForUrlsProto PopupsBlockedForUrls = 78;
  optional NotificationsAllowedForUrlsProto NotificationsAllowedForUrls = 107;
  optional NotificationsBlockedForUrlsProto NotificationsBlockedForUrls = 108;
  optional NativeMessagingBlacklistProto NativeMessagingBlacklist = 253;
  optional NativeMessagingWhitelistProto NativeMessagingWhitelist = 254;
  optional NativeMessagingUserLevelHostsProto NativeMessagingUserLevelHosts = 255;
  optional Disable3DAPIsProto Disable3DAPIs = 57;
  optional PolicyRefreshRateProto PolicyRefreshRate = 58;
  optional MaxInvalidationFetchDelayProto MaxInvalidationFetchDelay = 230;
  optional ChromeFrameRendererSettingsProto ChromeFrameRendererSettings = 59;
  optional RenderInChromeFrameListProto RenderInChromeFrameList = 60;
  optional RenderInHostListProto RenderInHostList = 61;
  optional AdditionalLaunchParametersProto AdditionalLaunchParameters = 143;
  optional SkipMetadataCheckProto SkipMetadataCheck = 240;
  optional ChromeFrameContentTypesProto ChromeFrameContentTypes = 62;
  optional ChromeOsLockOnIdleSuspendProto ChromeOsLockOnIdleSuspend = 63;
  optional ChromeOsMultiProfileUserBehaviorProto ChromeOsMultiProfileUserBehavior = 246;
  optional InstantEnabledProto InstantEnabled = 64;
  optional TranslateEnabledProto TranslateEnabled = 82;
  optional AllowOutdatedPluginsProto AllowOutdatedPlugins = 83;
  optional AlwaysAuthorizePluginsProto AlwaysAuthorizePlugins = 88;
  optional BookmarkBarEnabledProto BookmarkBarEnabled = 84;
  optional EditBookmarksEnabledProto EditBookmarksEnabled = 85;
  optional ShowAppsShortcutInBookmarkBarProto ShowAppsShortcutInBookmarkBar = 269;
  optional AllowFileSelectionDialogsProto AllowFileSelectionDialogs = 86;
  optional GCFUserDataDirProto GCFUserDataDir = 89;
  optional ImportBookmarksProto ImportBookmarks = 99;
  optional ImportHistoryProto ImportHistory = 100;
  optional ImportHomepageProto ImportHomepage = 101;
  optional ImportSearchEngineProto ImportSearchEngine = 102;
  optional ImportSavedPasswordsProto ImportSavedPasswords = 103;
  optional ImportAutofillFormDataProto ImportAutofillFormData = 279;
  optional MaxConnectionsPerProxyProto MaxConnectionsPerProxy = 94;
  optional HideWebStorePromoProto HideWebStorePromo = 98;
  optional URLBlacklistProto URLBlacklist = 105;
  optional URLWhitelistProto URLWhitelist = 106;
  optional OpenNetworkConfigurationProto OpenNetworkConfiguration = 109;
  optional CloudPrintSubmitEnabledProto CloudPrintSubmitEnabled = 111;
  optional EnterpriseWebStoreURLProto EnterpriseWebStoreURL = 114;
  optional EnterpriseWebStoreNameProto EnterpriseWebStoreName = 115;
  optional EnableOriginBoundCertsProto EnableOriginBoundCerts = 116;
  optional EnableMemoryInfoProto EnableMemoryInfo = 117;
  optional DisablePrintPreviewProto DisablePrintPreview = 119;
  optional DefaultPrinterSelectionProto DefaultPrinterSelection = 310;
  optional DisableSSLRecordSplittingProto DisableSSLRecordSplitting = 120;
  optional EnableOnlineRevocationChecksProto EnableOnlineRevocationChecks = 131;
  optional RequireOnlineRevocationChecksForLocalAnchorsProto RequireOnlineRevocationChecksForLocalAnchors = 237;
  optional EnableSha1ForLocalAnchorsProto EnableSha1ForLocalAnchors = 342;
  optional ForceEphemeralProfilesProto ForceEphemeralProfiles = 247;
  optional SAMLOfflineSigninTimeLimitProto SAMLOfflineSigninTimeLimit = 256;
  optional ReportArcStatusEnabledProto ReportArcStatusEnabled = 351;
  optional BackgroundModeEnabledProto BackgroundModeEnabled = 140;
  optional DriveDisabledProto DriveDisabled = 141;
  optional DriveDisabledOverCellularProto DriveDisabledOverCellular = 142;
  optional PinnedLauncherAppsProto PinnedLauncherApps = 146;
  optional RestrictSigninToPatternProto RestrictSigninToPattern = 149;
  optional DisableSafeBrowsingProceedAnywayProto DisableSafeBrowsingProceedAnyway = 152;
  optional SafeBrowsingExtendedReportingOptInAllowedProto SafeBrowsingExtendedReportingOptInAllowed = 301;
  optional SpellCheckServiceEnabledProto SpellCheckServiceEnabled = 153;
  optional ExternalStorageDisabledProto ExternalStorageDisabled = 154;
  optional ExternalStorageReadOnlyProto ExternalStorageReadOnly = 345;
  optional AudioOutputAllowedProto AudioOutputAllowed = 161;
  optional AudioCaptureAllowedProto AudioCaptureAllowed = 162;
  optional AudioCaptureAllowedUrlsProto AudioCaptureAllowedUrls = 210;
  optional VideoCaptureAllowedProto VideoCaptureAllowed = 169;
  optional VideoCaptureAllowedUrlsProto VideoCaptureAllowedUrls = 211;
  optional DisableScreenshotsProto DisableScreenshots = 155;
  optional TouchVirtualKeyboardEnabledProto TouchVirtualKeyboardEnabled = 271;
  optional ShowLogoutButtonInTrayProto ShowLogoutButtonInTray = 166;
  optional BuiltInDnsClientEnabledProto BuiltInDnsClientEnabled = 167;
  optional ShelfAutoHideBehaviorProto ShelfAutoHideBehavior = 168;
  optional UserDisplayNameProto UserDisplayName = 171;
  optional SessionLengthLimitProto SessionLengthLimit = 172;
  optional FullscreenAllowedProto FullscreenAllowed = 242;
  optional ScreenDimDelayACProto ScreenDimDelayAC = 174;
  optional ScreenOffDelayACProto ScreenOffDelayAC = 175;
  optional ScreenLockDelayACProto ScreenLockDelayAC = 176;
  optional IdleWarningDelayACProto IdleWarningDelayAC = 199;
  optional IdleDelayACProto IdleDelayAC = 177;
  optional ScreenDimDelayBatteryProto ScreenDimDelayBattery = 178;
  optional ScreenOffDelayBatteryProto ScreenOffDelayBattery = 179;
  optional ScreenLockDelayBatteryProto ScreenLockDelayBattery = 180;
  optional IdleWarningDelayBatteryProto IdleWarningDelayBattery = 200;
  optional IdleDelayBatteryProto IdleDelayBattery = 181;
  optional IdleActionProto IdleAction = 182;
  optional IdleActionACProto IdleActionAC = 228;
  optional IdleActionBatteryProto IdleActionBattery = 224;
  optional LidCloseActionProto LidCloseAction = 183;
  optional PowerManagementUsesAudioActivityProto PowerManagementUsesAudioActivity = 184;
  optional PowerManagementUsesVideoActivityProto PowerManagementUsesVideoActivity = 185;
  optional PresentationIdleDelayScaleProto PresentationIdleDelayScale = 186;
  optional PresentationScreenDimDelayScaleProto PresentationScreenDimDelayScale = 222;
  optional AllowScreenWakeLocksProto AllowScreenWakeLocks = 205;
  optional UserActivityScreenDimDelayScaleProto UserActivityScreenDimDelayScale = 212;
  optional WaitForInitialUserActivityProto WaitForInitialUserActivity = 249;
  optional PowerManagementIdleSettingsProto PowerManagementIdleSettings = 260;
  optional ScreenLockDelaysProto ScreenLockDelays = 261;
  optional TermsOfServiceURLProto TermsOfServiceURL = 188;
  optional ShowAccessibilityOptionsInSystemTrayMenuProto ShowAccessibilityOptionsInSystemTrayMenu = 190;
  optional LargeCursorEnabledProto LargeCursorEnabled = 213;
  optional SpokenFeedbackEnabledProto SpokenFeedbackEnabled = 214;
  optional HighContrastEnabledProto HighContrastEnabled = 215;
  optional VirtualKeyboardEnabledProto VirtualKeyboardEnabled = 257;
  optional KeyboardDefaultToFunctionKeysProto KeyboardDefaultToFunctionKeys = 262;
  optional ScreenMagnifierTypeProto ScreenMagnifierType = 216;
  optional HideWebStoreIconProto HideWebStoreIcon = 191;
  optional VariationsRestrictParameterProto VariationsRestrictParameter = 198;
  optional AttestationEnabledForUserProto AttestationEnabledForUser = 202;
  optional AttestationExtensionWhitelistProto AttestationExtensionWhitelist = 203;
  optional SuppressChromeFrameTurndownPromptProto SuppressChromeFrameTurndownPrompt = 223;
  optional ContentPackDefaultFilteringBehaviorProto ContentPackDefaultFilteringBehavior = 206;
  optional ContentPackManualBehaviorHostsProto ContentPackManualBehaviorHosts = 207;
  optional ContentPackManualBehaviorURLsProto ContentPackManualBehaviorURLs = 208;
  optional SupervisedUserCreationEnabledProto SupervisedUserCreationEnabled = 225;
  optional SupervisedUserContentProviderEnabledProto SupervisedUserContentProviderEnabled = 314;
  optional ManagedBookmarksProto ManagedBookmarks = 229;
  optional DataCompressionProxyEnabledProto DataCompressionProxyEnabled = 243;
  optional UserAvatarImageProto UserAvatarImage = 251;
  optional WallpaperImageProto WallpaperImage = 264;
  optional EnableDeprecatedWebPlatformFeaturesProto EnableDeprecatedWebPlatformFeatures = 272;
  optional EasyUnlockAllowedProto EasyUnlockAllowed = 274;
  optional SessionLocalesProto SessionLocales = 276;
  optional BrowserGuestModeEnabledProto BrowserGuestModeEnabled = 277;
  optional BrowserAddPersonEnabledProto BrowserAddPersonEnabled = 278;
  optional ForceBrowserSigninProto ForceBrowserSignin = 348;
  optional SSLVersionMinProto SSLVersionMin = 281;
  optional SSLVersionFallbackMinProto SSLVersionFallbackMin = 282;
  optional CertificateTransparencyEnforcementDisabledForUrlsProto CertificateTransparencyEnforcementDisabledForUrls = 337;
  optional RC4EnabledProto RC4Enabled = 312;
  optional DHEEnabledProto DHEEnabled = 336;
  optional ContextualSearchEnabledProto ContextualSearchEnabled = 283;
  optional ForceMaximizeOnFirstRunProto ForceMaximizeOnFirstRun = 300;
  optional SSLErrorOverrideAllowedProto SSLErrorOverrideAllowed = 302;
  optional QuicAllowedProto QuicAllowed = 303;
  optional KeyPermissionsProto KeyPermissions = 304;
  optional WelcomePageOnOSUpgradeEnabledProto WelcomePageOnOSUpgradeEnabled = 305;
  optional HardwareAccelerationModeEnabledProto HardwareAccelerationModeEnabled = 306;
  optional UnifiedDesktopEnabledByDefaultProto UnifiedDesktopEnabledByDefault = 309;
  optional ArcEnabledProto ArcEnabled = 319;
  optional ArcPolicyProto ArcPolicy = 320;
  optional SuppressUnsupportedOSWarningProto SuppressUnsupportedOSWarning = 326;
  optional TaskManagerEndProcessEnabledProto TaskManagerEndProcessEnabled = 329;
  optional AllowScreenLockProto AllowScreenLock = 331;
  optional ArcCertificatesSyncModeProto ArcCertificatesSyncMode = 332;
  optional AllowedDomainsForAppsProto AllowedDomainsForApps = 333;
  optional PacHttpsUrlStrippingEnabledProto PacHttpsUrlStrippingEnabled = 334;
  optional EnableMediaRouterProto EnableMediaRouter = 335;
  optional ArcBackupRestoreEnabledProto ArcBackupRestoreEnabled = 339;
  optional ArcLocationServiceEnabledProto ArcLocationServiceEnabled = 365;
  optional NTPContentSuggestionsEnabledProto NTPContentSuggestionsEnabled = 340;
  optional WebRtcUdpPortRangeProto WebRtcUdpPortRange = 341;
  optional WebRestrictionsAuthorityProto WebRestrictionsAuthority = 343;
  optional ComponentUpdatesEnabledProto ComponentUpdatesEnabled = 344;
  optional NativePrintersProto NativePrinters = 352;
  optional QuickUnlockModeWhitelistProto QuickUnlockModeWhitelist = 354;
  optional QuickUnlockTimeoutProto QuickUnlockTimeout = 355;
  optional PinUnlockMinimumLengthProto PinUnlockMinimumLength = 356;
  optional PinUnlockMaximumLengthProto PinUnlockMaximumLength = 357;
  optional PinUnlockWeakPinsAllowedProto PinUnlockWeakPinsAllowed = 358;
}

