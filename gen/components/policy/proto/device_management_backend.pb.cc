// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_management_backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_management_backend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace enterprise_management {

void protobuf_ShutdownFile_device_5fmanagement_5fbackend_2eproto()
{
    delete SignedData::default_instance_;
    delete DeviceRegisterRequest::default_instance_;
    delete DeviceRegisterResponse::default_instance_;
    delete DeviceUnregisterRequest::default_instance_;
    delete DeviceUnregisterResponse::default_instance_;
    delete DeviceCertUploadRequest::default_instance_;
    delete DeviceCertUploadResponse::default_instance_;
    delete DeviceServiceApiAccessRequest::default_instance_;
    delete DeviceServiceApiAccessResponse::default_instance_;
    delete PolicyFetchRequest::default_instance_;
    delete DisabledState::default_instance_;
    delete DeviceState::default_instance_;
    delete PolicyData::default_instance_;
    delete PolicyFetchResponse::default_instance_;
    delete DEPRECATEDPolicyPublicKeyAndDomain::default_instance_;
    delete PublicKeyVerificationData::default_instance_;
    delete DevicePolicyRequest::default_instance_;
    delete DevicePolicyResponse::default_instance_;
    delete TimePeriod::default_instance_;
    delete ActiveTimePeriod::default_instance_;
    delete InstallableLaunch::default_instance_;
    delete OBSOLETE_DeviceLocation::default_instance_;
    delete NetworkInterface::default_instance_;
    delete NetworkState::default_instance_;
    delete DeviceUser::default_instance_;
    delete VolumeInfo::default_instance_;
    delete CPUTempInfo::default_instance_;
    delete DeviceStatusReportRequest::default_instance_;
    delete OsUpdateStatus::default_instance_;
    delete AppStatus::default_instance_;
    delete AndroidStatus::default_instance_;
    delete SessionStatusReportRequest::default_instance_;
    delete DeviceStatusReportResponse::default_instance_;
    delete SessionStatusReportResponse::default_instance_;
    delete DeviceAutoEnrollmentRequest::default_instance_;
    delete DeviceAutoEnrollmentResponse::default_instance_;
    delete DeviceStateRetrievalRequest::default_instance_;
    delete DeviceStateKeyUpdateRequest::default_instance_;
    delete DeviceStateRetrievalResponse::default_instance_;
    delete DevicePairingRequest::default_instance_;
    delete DevicePairingResponse::default_instance_;
    delete CheckDevicePairingRequest::default_instance_;
    delete CheckDevicePairingResponse::default_instance_;
    delete RemoteCommand::default_instance_;
    delete RemoteCommandResult::default_instance_;
    delete DeviceRemoteCommandRequest::default_instance_;
    delete DeviceRemoteCommandResponse::default_instance_;
    delete DeviceAttributeUpdatePermissionRequest::default_instance_;
    delete DeviceAttributeUpdatePermissionResponse::default_instance_;
    delete DeviceAttributeUpdateRequest::default_instance_;
    delete DeviceAttributeUpdateResponse::default_instance_;
    delete GcmIdUpdateRequest::default_instance_;
    delete GcmIdUpdateResponse::default_instance_;
    delete CheckAndroidManagementRequest::default_instance_;
    delete CheckAndroidManagementResponse::default_instance_;
    delete CertificateBasedDeviceRegisterRequest::default_instance_;
    delete CertificateBasedDeviceRegistrationData::default_instance_;
    delete DeviceManagementRequest::default_instance_;
    delete DeviceManagementResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    SignedData::default_instance_ = new SignedData();
    DeviceRegisterRequest::default_instance_ = new DeviceRegisterRequest();
    DeviceRegisterResponse::default_instance_ = new DeviceRegisterResponse();
    DeviceUnregisterRequest::default_instance_ = new DeviceUnregisterRequest();
    DeviceUnregisterResponse::default_instance_ = new DeviceUnregisterResponse();
    DeviceCertUploadRequest::default_instance_ = new DeviceCertUploadRequest();
    DeviceCertUploadResponse::default_instance_ = new DeviceCertUploadResponse();
    DeviceServiceApiAccessRequest::default_instance_ = new DeviceServiceApiAccessRequest();
    DeviceServiceApiAccessResponse::default_instance_ = new DeviceServiceApiAccessResponse();
    PolicyFetchRequest::default_instance_ = new PolicyFetchRequest();
    DisabledState::default_instance_ = new DisabledState();
    DeviceState::default_instance_ = new DeviceState();
    PolicyData::default_instance_ = new PolicyData();
    PolicyFetchResponse::default_instance_ = new PolicyFetchResponse();
    DEPRECATEDPolicyPublicKeyAndDomain::default_instance_ = new DEPRECATEDPolicyPublicKeyAndDomain();
    PublicKeyVerificationData::default_instance_ = new PublicKeyVerificationData();
    DevicePolicyRequest::default_instance_ = new DevicePolicyRequest();
    DevicePolicyResponse::default_instance_ = new DevicePolicyResponse();
    TimePeriod::default_instance_ = new TimePeriod();
    ActiveTimePeriod::default_instance_ = new ActiveTimePeriod();
    InstallableLaunch::default_instance_ = new InstallableLaunch();
    OBSOLETE_DeviceLocation::default_instance_ = new OBSOLETE_DeviceLocation();
    NetworkInterface::default_instance_ = new NetworkInterface();
    NetworkState::default_instance_ = new NetworkState();
    DeviceUser::default_instance_ = new DeviceUser();
    VolumeInfo::default_instance_ = new VolumeInfo();
    CPUTempInfo::default_instance_ = new CPUTempInfo();
    DeviceStatusReportRequest::default_instance_ = new DeviceStatusReportRequest();
    OsUpdateStatus::default_instance_ = new OsUpdateStatus();
    AppStatus::default_instance_ = new AppStatus();
    AndroidStatus::default_instance_ = new AndroidStatus();
    SessionStatusReportRequest::default_instance_ = new SessionStatusReportRequest();
    DeviceStatusReportResponse::default_instance_ = new DeviceStatusReportResponse();
    SessionStatusReportResponse::default_instance_ = new SessionStatusReportResponse();
    DeviceAutoEnrollmentRequest::default_instance_ = new DeviceAutoEnrollmentRequest();
    DeviceAutoEnrollmentResponse::default_instance_ = new DeviceAutoEnrollmentResponse();
    DeviceStateRetrievalRequest::default_instance_ = new DeviceStateRetrievalRequest();
    DeviceStateKeyUpdateRequest::default_instance_ = new DeviceStateKeyUpdateRequest();
    DeviceStateRetrievalResponse::default_instance_ = new DeviceStateRetrievalResponse();
    DevicePairingRequest::default_instance_ = new DevicePairingRequest();
    DevicePairingResponse::default_instance_ = new DevicePairingResponse();
    CheckDevicePairingRequest::default_instance_ = new CheckDevicePairingRequest();
    CheckDevicePairingResponse::default_instance_ = new CheckDevicePairingResponse();
    RemoteCommand::default_instance_ = new RemoteCommand();
    RemoteCommandResult::default_instance_ = new RemoteCommandResult();
    DeviceRemoteCommandRequest::default_instance_ = new DeviceRemoteCommandRequest();
    DeviceRemoteCommandResponse::default_instance_ = new DeviceRemoteCommandResponse();
    DeviceAttributeUpdatePermissionRequest::default_instance_ = new DeviceAttributeUpdatePermissionRequest();
    DeviceAttributeUpdatePermissionResponse::default_instance_ = new DeviceAttributeUpdatePermissionResponse();
    DeviceAttributeUpdateRequest::default_instance_ = new DeviceAttributeUpdateRequest();
    DeviceAttributeUpdateResponse::default_instance_ = new DeviceAttributeUpdateResponse();
    GcmIdUpdateRequest::default_instance_ = new GcmIdUpdateRequest();
    GcmIdUpdateResponse::default_instance_ = new GcmIdUpdateResponse();
    CheckAndroidManagementRequest::default_instance_ = new CheckAndroidManagementRequest();
    CheckAndroidManagementResponse::default_instance_ = new CheckAndroidManagementResponse();
    CertificateBasedDeviceRegisterRequest::default_instance_ = new CertificateBasedDeviceRegisterRequest();
    CertificateBasedDeviceRegistrationData::default_instance_ = new CertificateBasedDeviceRegistrationData();
    DeviceManagementRequest::default_instance_ = new DeviceManagementRequest();
    DeviceManagementResponse::default_instance_ = new DeviceManagementResponse();
    SignedData::default_instance_->InitAsDefaultInstance();
    DeviceRegisterRequest::default_instance_->InitAsDefaultInstance();
    DeviceRegisterResponse::default_instance_->InitAsDefaultInstance();
    DeviceUnregisterRequest::default_instance_->InitAsDefaultInstance();
    DeviceUnregisterResponse::default_instance_->InitAsDefaultInstance();
    DeviceCertUploadRequest::default_instance_->InitAsDefaultInstance();
    DeviceCertUploadResponse::default_instance_->InitAsDefaultInstance();
    DeviceServiceApiAccessRequest::default_instance_->InitAsDefaultInstance();
    DeviceServiceApiAccessResponse::default_instance_->InitAsDefaultInstance();
    PolicyFetchRequest::default_instance_->InitAsDefaultInstance();
    DisabledState::default_instance_->InitAsDefaultInstance();
    DeviceState::default_instance_->InitAsDefaultInstance();
    PolicyData::default_instance_->InitAsDefaultInstance();
    PolicyFetchResponse::default_instance_->InitAsDefaultInstance();
    DEPRECATEDPolicyPublicKeyAndDomain::default_instance_->InitAsDefaultInstance();
    PublicKeyVerificationData::default_instance_->InitAsDefaultInstance();
    DevicePolicyRequest::default_instance_->InitAsDefaultInstance();
    DevicePolicyResponse::default_instance_->InitAsDefaultInstance();
    TimePeriod::default_instance_->InitAsDefaultInstance();
    ActiveTimePeriod::default_instance_->InitAsDefaultInstance();
    InstallableLaunch::default_instance_->InitAsDefaultInstance();
    OBSOLETE_DeviceLocation::default_instance_->InitAsDefaultInstance();
    NetworkInterface::default_instance_->InitAsDefaultInstance();
    NetworkState::default_instance_->InitAsDefaultInstance();
    DeviceUser::default_instance_->InitAsDefaultInstance();
    VolumeInfo::default_instance_->InitAsDefaultInstance();
    CPUTempInfo::default_instance_->InitAsDefaultInstance();
    DeviceStatusReportRequest::default_instance_->InitAsDefaultInstance();
    OsUpdateStatus::default_instance_->InitAsDefaultInstance();
    AppStatus::default_instance_->InitAsDefaultInstance();
    AndroidStatus::default_instance_->InitAsDefaultInstance();
    SessionStatusReportRequest::default_instance_->InitAsDefaultInstance();
    DeviceStatusReportResponse::default_instance_->InitAsDefaultInstance();
    SessionStatusReportResponse::default_instance_->InitAsDefaultInstance();
    DeviceAutoEnrollmentRequest::default_instance_->InitAsDefaultInstance();
    DeviceAutoEnrollmentResponse::default_instance_->InitAsDefaultInstance();
    DeviceStateRetrievalRequest::default_instance_->InitAsDefaultInstance();
    DeviceStateKeyUpdateRequest::default_instance_->InitAsDefaultInstance();
    DeviceStateRetrievalResponse::default_instance_->InitAsDefaultInstance();
    DevicePairingRequest::default_instance_->InitAsDefaultInstance();
    DevicePairingResponse::default_instance_->InitAsDefaultInstance();
    CheckDevicePairingRequest::default_instance_->InitAsDefaultInstance();
    CheckDevicePairingResponse::default_instance_->InitAsDefaultInstance();
    RemoteCommand::default_instance_->InitAsDefaultInstance();
    RemoteCommandResult::default_instance_->InitAsDefaultInstance();
    DeviceRemoteCommandRequest::default_instance_->InitAsDefaultInstance();
    DeviceRemoteCommandResponse::default_instance_->InitAsDefaultInstance();
    DeviceAttributeUpdatePermissionRequest::default_instance_->InitAsDefaultInstance();
    DeviceAttributeUpdatePermissionResponse::default_instance_->InitAsDefaultInstance();
    DeviceAttributeUpdateRequest::default_instance_->InitAsDefaultInstance();
    DeviceAttributeUpdateResponse::default_instance_->InitAsDefaultInstance();
    GcmIdUpdateRequest::default_instance_->InitAsDefaultInstance();
    GcmIdUpdateResponse::default_instance_->InitAsDefaultInstance();
    CheckAndroidManagementRequest::default_instance_->InitAsDefaultInstance();
    CheckAndroidManagementResponse::default_instance_->InitAsDefaultInstance();
    CertificateBasedDeviceRegisterRequest::default_instance_->InitAsDefaultInstance();
    CertificateBasedDeviceRegistrationData::default_instance_->InitAsDefaultInstance();
    DeviceManagementRequest::default_instance_->InitAsDefaultInstance();
    DeviceManagementResponse::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_device_5fmanagement_5fbackend_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto_once_);
void protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto_once_,
        &protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_device_5fmanagement_5fbackend_2eproto {
    StaticDescriptorInitializer_device_5fmanagement_5fbackend_2eproto()
    {
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
    }
} static_descriptor_initializer_device_5fmanagement_5fbackend_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForSignedData(
    SignedData* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedData::kDataFieldNumber;
const int SignedData::kSignatureFieldNumber;
const int SignedData::kExtraDataBytesFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedData::SignedData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.SignedData)
}

void SignedData::InitAsDefaultInstance()
{
}

SignedData::SignedData(const SignedData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.SignedData)
}

void SignedData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extra_data_bytes_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedData::~SignedData()
{
    // @@protoc_insertion_point(destructor:enterprise_management.SignedData)
    SharedDtor();
}

void SignedData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SignedData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignedData& SignedData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

SignedData* SignedData::default_instance_ = NULL;

SignedData* SignedData::New(::google::protobuf::Arena* arena) const
{
    SignedData* n = new SignedData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SignedData::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.SignedData)
    if (_has_bits_[0 / 32] & 7u) {
        if (has_data()) {
            data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_signature()) {
            signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        extra_data_bytes_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SignedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSignedData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.SignedData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes data = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_data()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_signature;
            break;
        }

        // optional bytes signature = 2;
        case 2: {
            if (tag == 18) {
            parse_signature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_signature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_extra_data_bytes;
            break;
        }

        // optional int32 extra_data_bytes = 3;
        case 3: {
            if (tag == 24) {
            parse_extra_data_bytes:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &extra_data_bytes_)));
                set_has_extra_data_bytes();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.SignedData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.SignedData)
    return false;
#undef DO_
}

void SignedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.SignedData)
    // optional bytes data = 1;
    if (has_data()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->data(), output);
    }

    // optional bytes signature = 2;
    if (has_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            2, this->signature(), output);
    }

    // optional int32 extra_data_bytes = 3;
    if (has_extra_data_bytes()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extra_data_bytes(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.SignedData)
}

int SignedData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.SignedData)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional bytes data = 1;
        if (has_data()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->data());
        }

        // optional bytes signature = 2;
        if (has_signature()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->signature());
        }

        // optional int32 extra_data_bytes = 3;
        if (has_extra_data_bytes()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->extra_data_bytes());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SignedData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SignedData*>(&from));
}

void SignedData::MergeFrom(const SignedData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SignedData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_data()) {
            set_has_data();
            data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
        }
        if (from.has_signature()) {
            set_has_signature();
            signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
        }
        if (from.has_extra_data_bytes()) {
            set_extra_data_bytes(from.extra_data_bytes());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SignedData::CopyFrom(const SignedData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SignedData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SignedData::IsInitialized() const
{

    return true;
}

void SignedData::Swap(SignedData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SignedData::InternalSwap(SignedData* other)
{
    data_.Swap(&other->data_);
    signature_.Swap(&other->signature_);
    std::swap(extra_data_bytes_, other->extra_data_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SignedData::GetTypeName() const
{
    return "enterprise_management.SignedData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignedData

// optional bytes data = 1;
bool SignedData::has_data() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignedData::set_has_data()
{
    _has_bits_[0] |= 0x00000001u;
}
void SignedData::clear_has_data()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SignedData::clear_data()
{
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
}
const ::std::string& SignedData::data() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SignedData.data)
    return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedData::set_data(const ::std::string& value)
{
    set_has_data();
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.SignedData.data)
}
void SignedData::set_data(const char* value)
{
    set_has_data();
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.SignedData.data)
}
void SignedData::set_data(const void* value, size_t size)
{
    set_has_data();
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.SignedData.data)
}
::std::string* SignedData::mutable_data()
{
    set_has_data();
    // @@protoc_insertion_point(field_mutable:enterprise_management.SignedData.data)
    return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedData::release_data()
{
    // @@protoc_insertion_point(field_release:enterprise_management.SignedData.data)
    clear_has_data();
    return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedData::set_allocated_data(::std::string* data)
{
    if (data != NULL) {
        set_has_data();
    } else {
        clear_has_data();
    }
    data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.SignedData.data)
}

// optional bytes signature = 2;
bool SignedData::has_signature() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignedData::set_has_signature()
{
    _has_bits_[0] |= 0x00000002u;
}
void SignedData::clear_has_signature()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SignedData::clear_signature()
{
    signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_signature();
}
const ::std::string& SignedData::signature() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SignedData.signature)
    return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedData::set_signature(const ::std::string& value)
{
    set_has_signature();
    signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.SignedData.signature)
}
void SignedData::set_signature(const char* value)
{
    set_has_signature();
    signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.SignedData.signature)
}
void SignedData::set_signature(const void* value, size_t size)
{
    set_has_signature();
    signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.SignedData.signature)
}
::std::string* SignedData::mutable_signature()
{
    set_has_signature();
    // @@protoc_insertion_point(field_mutable:enterprise_management.SignedData.signature)
    return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedData::release_signature()
{
    // @@protoc_insertion_point(field_release:enterprise_management.SignedData.signature)
    clear_has_signature();
    return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedData::set_allocated_signature(::std::string* signature)
{
    if (signature != NULL) {
        set_has_signature();
    } else {
        clear_has_signature();
    }
    signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.SignedData.signature)
}

// optional int32 extra_data_bytes = 3;
bool SignedData::has_extra_data_bytes() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignedData::set_has_extra_data_bytes()
{
    _has_bits_[0] |= 0x00000004u;
}
void SignedData::clear_has_extra_data_bytes()
{
    _has_bits_[0] &= ~0x00000004u;
}
void SignedData::clear_extra_data_bytes()
{
    extra_data_bytes_ = 0;
    clear_has_extra_data_bytes();
}
::google::protobuf::int32 SignedData::extra_data_bytes() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SignedData.extra_data_bytes)
    return extra_data_bytes_;
}
void SignedData::set_extra_data_bytes(::google::protobuf::int32 value)
{
    set_has_extra_data_bytes();
    extra_data_bytes_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.SignedData.extra_data_bytes)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceRegisterRequest(
    DeviceRegisterRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceRegisterRequest_Type_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterRequest_Type DeviceRegisterRequest::TT;
const DeviceRegisterRequest_Type DeviceRegisterRequest::USER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::DEVICE;
const DeviceRegisterRequest_Type DeviceRegisterRequest::BROWSER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::ANDROID_BROWSER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::IOS_BROWSER;
const DeviceRegisterRequest_Type DeviceRegisterRequest::Type_MIN;
const DeviceRegisterRequest_Type DeviceRegisterRequest::Type_MAX;
const int DeviceRegisterRequest::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DeviceRegisterRequest_Flavor_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_MANUAL;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_MANUAL_RENEW;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_LOCAL_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_LOCAL_ADVERTISED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_SERVER_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_SERVER_ADVERTISED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_RECOVERY;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_USER_REGISTRATION;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::FLAVOR_ENROLLMENT_ATTESTATION_FORCED;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::Flavor_MIN;
const DeviceRegisterRequest_Flavor DeviceRegisterRequest::Flavor_MAX;
const int DeviceRegisterRequest::Flavor_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRegisterRequest::kReregisterFieldNumber;
const int DeviceRegisterRequest::kTypeFieldNumber;
const int DeviceRegisterRequest::kMachineIdFieldNumber;
const int DeviceRegisterRequest::kMachineModelFieldNumber;
const int DeviceRegisterRequest::kOBSOLETEAutoEnrolledFieldNumber;
const int DeviceRegisterRequest::kRequisitionFieldNumber;
const int DeviceRegisterRequest::kServerBackedStateKeyFieldNumber;
const int DeviceRegisterRequest::kFlavorFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRegisterRequest::DeviceRegisterRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterRequest)
}

void DeviceRegisterRequest::InitAsDefaultInstance()
{
}

DeviceRegisterRequest::DeviceRegisterRequest(const DeviceRegisterRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterRequest)
}

void DeviceRegisterRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    reregister_ = false;
    type_ = 0;
    machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    obsolete_auto_enrolled_ = false;
    requisition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    server_backed_state_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    flavor_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRegisterRequest::~DeviceRegisterRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterRequest)
    SharedDtor();
}

void DeviceRegisterRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    requisition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    server_backed_state_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceRegisterRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRegisterRequest& DeviceRegisterRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceRegisterRequest* DeviceRegisterRequest::default_instance_ = NULL;

DeviceRegisterRequest* DeviceRegisterRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceRegisterRequest* n = new DeviceRegisterRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceRegisterRequest::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterRequest)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                           \
    _Pragma("clang diagnostic push")                                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(DeviceRegisterRequest, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<DeviceRegisterRequest*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(type_, obsolete_auto_enrolled_);
        if (has_machine_id()) {
            machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_machine_model()) {
            machine_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_requisition()) {
            requisition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_server_backed_state_key()) {
            server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        flavor_ = 0;
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceRegisterRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool reregister = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &reregister_)));
                set_has_reregister();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_type;
            break;
        }

        // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
        case 2: {
            if (tag == 16) {
            parse_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceRegisterRequest_Type_IsValid(value)) {
                    set_type(static_cast<::enterprise_management::DeviceRegisterRequest_Type>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_machine_id;
            break;
        }

        // optional string machine_id = 3;
        case 3: {
            if (tag == 26) {
            parse_machine_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_machine_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_machine_model;
            break;
        }

        // optional string machine_model = 4;
        case 4: {
            if (tag == 34) {
            parse_machine_model:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_machine_model()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(40))
                goto parse_OBSOLETE_auto_enrolled;
            break;
        }

        // optional bool OBSOLETE_auto_enrolled = 5 [deprecated = true];
        case 5: {
            if (tag == 40) {
            parse_OBSOLETE_auto_enrolled:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &obsolete_auto_enrolled_)));
                set_has_obsolete_auto_enrolled();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_requisition;
            break;
        }

        // optional string requisition = 6;
        case 6: {
            if (tag == 50) {
            parse_requisition:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_requisition()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_server_backed_state_key;
            break;
        }

        // optional bytes server_backed_state_key = 7;
        case 7: {
            if (tag == 58) {
            parse_server_backed_state_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_server_backed_state_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_flavor;
            break;
        }

        // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
        case 8: {
            if (tag == 64) {
            parse_flavor:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(value)) {
                    set_flavor(static_cast<::enterprise_management::DeviceRegisterRequest_Flavor>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(64);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterRequest)
    return false;
#undef DO_
}

void DeviceRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterRequest)
    // optional bool reregister = 1;
    if (has_reregister()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reregister(), output);
    }

    // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->type(), output);
    }

    // optional string machine_id = 3;
    if (has_machine_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->machine_id(), output);
    }

    // optional string machine_model = 4;
    if (has_machine_model()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->machine_model(), output);
    }

    // optional bool OBSOLETE_auto_enrolled = 5 [deprecated = true];
    if (has_obsolete_auto_enrolled()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->obsolete_auto_enrolled(), output);
    }

    // optional string requisition = 6;
    if (has_requisition()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            6, this->requisition(), output);
    }

    // optional bytes server_backed_state_key = 7;
    if (has_server_backed_state_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            7, this->server_backed_state_key(), output);
    }

    // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
    if (has_flavor()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            8, this->flavor(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterRequest)
}

int DeviceRegisterRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional bool reregister = 1;
        if (has_reregister()) {
            total_size += 1 + 1;
        }

        // optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        // optional string machine_id = 3;
        if (has_machine_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->machine_id());
        }

        // optional string machine_model = 4;
        if (has_machine_model()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->machine_model());
        }

        // optional bool OBSOLETE_auto_enrolled = 5 [deprecated = true];
        if (has_obsolete_auto_enrolled()) {
            total_size += 1 + 1;
        }

        // optional string requisition = 6;
        if (has_requisition()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->requisition());
        }

        // optional bytes server_backed_state_key = 7;
        if (has_server_backed_state_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->server_backed_state_key());
        }

        // optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
        if (has_flavor()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->flavor());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceRegisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceRegisterRequest*>(&from));
}

void DeviceRegisterRequest::MergeFrom(const DeviceRegisterRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_reregister()) {
            set_reregister(from.reregister());
        }
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_machine_id()) {
            set_has_machine_id();
            machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
        }
        if (from.has_machine_model()) {
            set_has_machine_model();
            machine_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_model_);
        }
        if (from.has_obsolete_auto_enrolled()) {
            set_obsolete_auto_enrolled(from.obsolete_auto_enrolled());
        }
        if (from.has_requisition()) {
            set_has_requisition();
            requisition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requisition_);
        }
        if (from.has_server_backed_state_key()) {
            set_has_server_backed_state_key();
            server_backed_state_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
        }
        if (from.has_flavor()) {
            set_flavor(from.flavor());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceRegisterRequest::CopyFrom(const DeviceRegisterRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceRegisterRequest::IsInitialized() const
{

    return true;
}

void DeviceRegisterRequest::Swap(DeviceRegisterRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceRegisterRequest::InternalSwap(DeviceRegisterRequest* other)
{
    std::swap(reregister_, other->reregister_);
    std::swap(type_, other->type_);
    machine_id_.Swap(&other->machine_id_);
    machine_model_.Swap(&other->machine_model_);
    std::swap(obsolete_auto_enrolled_, other->obsolete_auto_enrolled_);
    requisition_.Swap(&other->requisition_);
    server_backed_state_key_.Swap(&other->server_backed_state_key_);
    std::swap(flavor_, other->flavor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRegisterRequest::GetTypeName() const
{
    return "enterprise_management.DeviceRegisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRegisterRequest

// optional bool reregister = 1;
bool DeviceRegisterRequest::has_reregister() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceRegisterRequest::set_has_reregister()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceRegisterRequest::clear_has_reregister()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceRegisterRequest::clear_reregister()
{
    reregister_ = false;
    clear_has_reregister();
}
bool DeviceRegisterRequest::reregister() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.reregister)
    return reregister_;
}
void DeviceRegisterRequest::set_reregister(bool value)
{
    set_has_reregister();
    reregister_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.reregister)
}

// optional .enterprise_management.DeviceRegisterRequest.Type type = 2 [default = TT];
bool DeviceRegisterRequest::has_type() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceRegisterRequest::set_has_type()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceRegisterRequest::clear_has_type()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceRegisterRequest::clear_type()
{
    type_ = 0;
    clear_has_type();
}
::enterprise_management::DeviceRegisterRequest_Type DeviceRegisterRequest::type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.type)
    return static_cast<::enterprise_management::DeviceRegisterRequest_Type>(type_);
}
void DeviceRegisterRequest::set_type(::enterprise_management::DeviceRegisterRequest_Type value)
{
    assert(::enterprise_management::DeviceRegisterRequest_Type_IsValid(value));
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.type)
}

// optional string machine_id = 3;
bool DeviceRegisterRequest::has_machine_id() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceRegisterRequest::set_has_machine_id()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceRegisterRequest::clear_has_machine_id()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceRegisterRequest::clear_machine_id()
{
    machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_machine_id();
}
const ::std::string& DeviceRegisterRequest::machine_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.machine_id)
    return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_machine_id(const ::std::string& value)
{
    set_has_machine_id();
    machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.machine_id)
}
void DeviceRegisterRequest::set_machine_id(const char* value)
{
    set_has_machine_id();
    machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.machine_id)
}
void DeviceRegisterRequest::set_machine_id(const char* value, size_t size)
{
    set_has_machine_id();
    machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.machine_id)
}
::std::string* DeviceRegisterRequest::mutable_machine_id()
{
    set_has_machine_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.machine_id)
    return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_machine_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.machine_id)
    clear_has_machine_id();
    return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_machine_id(::std::string* machine_id)
{
    if (machine_id != NULL) {
        set_has_machine_id();
    } else {
        clear_has_machine_id();
    }
    machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.machine_id)
}

// optional string machine_model = 4;
bool DeviceRegisterRequest::has_machine_model() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceRegisterRequest::set_has_machine_model()
{
    _has_bits_[0] |= 0x00000008u;
}
void DeviceRegisterRequest::clear_has_machine_model()
{
    _has_bits_[0] &= ~0x00000008u;
}
void DeviceRegisterRequest::clear_machine_model()
{
    machine_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_machine_model();
}
const ::std::string& DeviceRegisterRequest::machine_model() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.machine_model)
    return machine_model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_machine_model(const ::std::string& value)
{
    set_has_machine_model();
    machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.machine_model)
}
void DeviceRegisterRequest::set_machine_model(const char* value)
{
    set_has_machine_model();
    machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.machine_model)
}
void DeviceRegisterRequest::set_machine_model(const char* value, size_t size)
{
    set_has_machine_model();
    machine_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.machine_model)
}
::std::string* DeviceRegisterRequest::mutable_machine_model()
{
    set_has_machine_model();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.machine_model)
    return machine_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_machine_model()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.machine_model)
    clear_has_machine_model();
    return machine_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_machine_model(::std::string* machine_model)
{
    if (machine_model != NULL) {
        set_has_machine_model();
    } else {
        clear_has_machine_model();
    }
    machine_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_model);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.machine_model)
}

// optional bool OBSOLETE_auto_enrolled = 5 [deprecated = true];
bool DeviceRegisterRequest::has_obsolete_auto_enrolled() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceRegisterRequest::set_has_obsolete_auto_enrolled()
{
    _has_bits_[0] |= 0x00000010u;
}
void DeviceRegisterRequest::clear_has_obsolete_auto_enrolled()
{
    _has_bits_[0] &= ~0x00000010u;
}
void DeviceRegisterRequest::clear_obsolete_auto_enrolled()
{
    obsolete_auto_enrolled_ = false;
    clear_has_obsolete_auto_enrolled();
}
bool DeviceRegisterRequest::obsolete_auto_enrolled() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.OBSOLETE_auto_enrolled)
    return obsolete_auto_enrolled_;
}
void DeviceRegisterRequest::set_obsolete_auto_enrolled(bool value)
{
    set_has_obsolete_auto_enrolled();
    obsolete_auto_enrolled_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.OBSOLETE_auto_enrolled)
}

// optional string requisition = 6;
bool DeviceRegisterRequest::has_requisition() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceRegisterRequest::set_has_requisition()
{
    _has_bits_[0] |= 0x00000020u;
}
void DeviceRegisterRequest::clear_has_requisition()
{
    _has_bits_[0] &= ~0x00000020u;
}
void DeviceRegisterRequest::clear_requisition()
{
    requisition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_requisition();
}
const ::std::string& DeviceRegisterRequest::requisition() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.requisition)
    return requisition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_requisition(const ::std::string& value)
{
    set_has_requisition();
    requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.requisition)
}
void DeviceRegisterRequest::set_requisition(const char* value)
{
    set_has_requisition();
    requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.requisition)
}
void DeviceRegisterRequest::set_requisition(const char* value, size_t size)
{
    set_has_requisition();
    requisition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.requisition)
}
::std::string* DeviceRegisterRequest::mutable_requisition()
{
    set_has_requisition();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.requisition)
    return requisition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_requisition()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.requisition)
    clear_has_requisition();
    return requisition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_requisition(::std::string* requisition)
{
    if (requisition != NULL) {
        set_has_requisition();
    } else {
        clear_has_requisition();
    }
    requisition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requisition);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.requisition)
}

// optional bytes server_backed_state_key = 7;
bool DeviceRegisterRequest::has_server_backed_state_key() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceRegisterRequest::set_has_server_backed_state_key()
{
    _has_bits_[0] |= 0x00000040u;
}
void DeviceRegisterRequest::clear_has_server_backed_state_key()
{
    _has_bits_[0] &= ~0x00000040u;
}
void DeviceRegisterRequest::clear_server_backed_state_key()
{
    server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_server_backed_state_key();
}
const ::std::string& DeviceRegisterRequest::server_backed_state_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
    return server_backed_state_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_server_backed_state_key(const ::std::string& value)
{
    set_has_server_backed_state_key();
    server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
void DeviceRegisterRequest::set_server_backed_state_key(const char* value)
{
    set_has_server_backed_state_key();
    server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
void DeviceRegisterRequest::set_server_backed_state_key(const void* value, size_t size)
{
    set_has_server_backed_state_key();
    server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}
::std::string* DeviceRegisterRequest::mutable_server_backed_state_key()
{
    set_has_server_backed_state_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
    return server_backed_state_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterRequest::release_server_backed_state_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
    clear_has_server_backed_state_key();
    return server_backed_state_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterRequest::set_allocated_server_backed_state_key(::std::string* server_backed_state_key)
{
    if (server_backed_state_key != NULL) {
        set_has_server_backed_state_key();
    } else {
        clear_has_server_backed_state_key();
    }
    server_backed_state_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_backed_state_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterRequest.server_backed_state_key)
}

// optional .enterprise_management.DeviceRegisterRequest.Flavor flavor = 8;
bool DeviceRegisterRequest::has_flavor() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceRegisterRequest::set_has_flavor()
{
    _has_bits_[0] |= 0x00000080u;
}
void DeviceRegisterRequest::clear_has_flavor()
{
    _has_bits_[0] &= ~0x00000080u;
}
void DeviceRegisterRequest::clear_flavor()
{
    flavor_ = 0;
    clear_has_flavor();
}
::enterprise_management::DeviceRegisterRequest_Flavor DeviceRegisterRequest::flavor() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterRequest.flavor)
    return static_cast<::enterprise_management::DeviceRegisterRequest_Flavor>(flavor_);
}
void DeviceRegisterRequest::set_flavor(::enterprise_management::DeviceRegisterRequest_Flavor value)
{
    assert(::enterprise_management::DeviceRegisterRequest_Flavor_IsValid(value));
    set_has_flavor();
    flavor_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterRequest.flavor)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceRegisterResponse(
    DeviceRegisterResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceRegisterResponse_DeviceMode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::ENTERPRISE;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::RETAIL;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::CHROME_AD;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DeviceMode_MIN;
const DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::DeviceMode_MAX;
const int DeviceRegisterResponse::DeviceMode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRegisterResponse::kDeviceManagementTokenFieldNumber;
const int DeviceRegisterResponse::kMachineNameFieldNumber;
const int DeviceRegisterResponse::kEnrollmentTypeFieldNumber;
const int DeviceRegisterResponse::kConfigurationSeedFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRegisterResponse::DeviceRegisterResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceRegisterResponse)
}

void DeviceRegisterResponse::InitAsDefaultInstance()
{
}

DeviceRegisterResponse::DeviceRegisterResponse(const DeviceRegisterResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRegisterResponse)
}

void DeviceRegisterResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_management_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    enrollment_type_ = 0;
    configuration_seed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRegisterResponse::~DeviceRegisterResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceRegisterResponse)
    SharedDtor();
}

void DeviceRegisterResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_management_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    configuration_seed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceRegisterResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRegisterResponse& DeviceRegisterResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceRegisterResponse* DeviceRegisterResponse::default_instance_ = NULL;

DeviceRegisterResponse* DeviceRegisterResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceRegisterResponse* n = new DeviceRegisterResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceRegisterResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRegisterResponse)
    if (_has_bits_[0 / 32] & 15u) {
        if (has_device_management_token()) {
            device_management_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_machine_name()) {
            machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        enrollment_type_ = 0;
        if (has_configuration_seed()) {
            configuration_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceRegisterResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRegisterResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required string device_management_token = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_management_token()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_machine_name;
            break;
        }

        // optional string machine_name = 2;
        case 2: {
            if (tag == 18) {
            parse_machine_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_machine_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_enrollment_type;
            break;
        }

        // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
        case 3: {
            if (tag == 24) {
            parse_enrollment_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(value)) {
                    set_enrollment_type(static_cast<::enterprise_management::DeviceRegisterResponse_DeviceMode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(24);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_configuration_seed;
            break;
        }

        // optional string configuration_seed = 4;
        case 4: {
            if (tag == 34) {
            parse_configuration_seed:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_configuration_seed()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRegisterResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRegisterResponse)
    return false;
#undef DO_
}

void DeviceRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRegisterResponse)
    // required string device_management_token = 1;
    if (has_device_management_token()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->device_management_token(), output);
    }

    // optional string machine_name = 2;
    if (has_machine_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->machine_name(), output);
    }

    // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
    if (has_enrollment_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            3, this->enrollment_type(), output);
    }

    // optional string configuration_seed = 4;
    if (has_configuration_seed()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->configuration_seed(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRegisterResponse)
}

int DeviceRegisterResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRegisterResponse)
    int total_size = 0;

    // required string device_management_token = 1;
    if (has_device_management_token()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_management_token());
    }
    if (_has_bits_[1 / 32] & 14u) {
        // optional string machine_name = 2;
        if (has_machine_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->machine_name());
        }

        // optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
        if (has_enrollment_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->enrollment_type());
        }

        // optional string configuration_seed = 4;
        if (has_configuration_seed()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->configuration_seed());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceRegisterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceRegisterResponse*>(&from));
}

void DeviceRegisterResponse::MergeFrom(const DeviceRegisterResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRegisterResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_device_management_token()) {
            set_has_device_management_token();
            device_management_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_management_token_);
        }
        if (from.has_machine_name()) {
            set_has_machine_name();
            machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
        }
        if (from.has_enrollment_type()) {
            set_enrollment_type(from.enrollment_type());
        }
        if (from.has_configuration_seed()) {
            set_has_configuration_seed();
            configuration_seed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configuration_seed_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceRegisterResponse::CopyFrom(const DeviceRegisterResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRegisterResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceRegisterResponse::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    return true;
}

void DeviceRegisterResponse::Swap(DeviceRegisterResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceRegisterResponse::InternalSwap(DeviceRegisterResponse* other)
{
    device_management_token_.Swap(&other->device_management_token_);
    machine_name_.Swap(&other->machine_name_);
    std::swap(enrollment_type_, other->enrollment_type_);
    configuration_seed_.Swap(&other->configuration_seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRegisterResponse::GetTypeName() const
{
    return "enterprise_management.DeviceRegisterResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRegisterResponse

// required string device_management_token = 1;
bool DeviceRegisterResponse::has_device_management_token() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceRegisterResponse::set_has_device_management_token()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceRegisterResponse::clear_has_device_management_token()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceRegisterResponse::clear_device_management_token()
{
    device_management_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_management_token();
}
const ::std::string& DeviceRegisterResponse::device_management_token() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.device_management_token)
    return device_management_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_device_management_token(const ::std::string& value)
{
    set_has_device_management_token();
    device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.device_management_token)
}
void DeviceRegisterResponse::set_device_management_token(const char* value)
{
    set_has_device_management_token();
    device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.device_management_token)
}
void DeviceRegisterResponse::set_device_management_token(const char* value, size_t size)
{
    set_has_device_management_token();
    device_management_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.device_management_token)
}
::std::string* DeviceRegisterResponse::mutable_device_management_token()
{
    set_has_device_management_token();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.device_management_token)
    return device_management_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterResponse::release_device_management_token()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.device_management_token)
    clear_has_device_management_token();
    return device_management_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_allocated_device_management_token(::std::string* device_management_token)
{
    if (device_management_token != NULL) {
        set_has_device_management_token();
    } else {
        clear_has_device_management_token();
    }
    device_management_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_management_token);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.device_management_token)
}

// optional string machine_name = 2;
bool DeviceRegisterResponse::has_machine_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceRegisterResponse::set_has_machine_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceRegisterResponse::clear_has_machine_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceRegisterResponse::clear_machine_name()
{
    machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_machine_name();
}
const ::std::string& DeviceRegisterResponse::machine_name() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.machine_name)
    return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_machine_name(const ::std::string& value)
{
    set_has_machine_name();
    machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.machine_name)
}
void DeviceRegisterResponse::set_machine_name(const char* value)
{
    set_has_machine_name();
    machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.machine_name)
}
void DeviceRegisterResponse::set_machine_name(const char* value, size_t size)
{
    set_has_machine_name();
    machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.machine_name)
}
::std::string* DeviceRegisterResponse::mutable_machine_name()
{
    set_has_machine_name();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.machine_name)
    return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterResponse::release_machine_name()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.machine_name)
    clear_has_machine_name();
    return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_allocated_machine_name(::std::string* machine_name)
{
    if (machine_name != NULL) {
        set_has_machine_name();
    } else {
        clear_has_machine_name();
    }
    machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.machine_name)
}

// optional .enterprise_management.DeviceRegisterResponse.DeviceMode enrollment_type = 3 [default = ENTERPRISE];
bool DeviceRegisterResponse::has_enrollment_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceRegisterResponse::set_has_enrollment_type()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceRegisterResponse::clear_has_enrollment_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceRegisterResponse::clear_enrollment_type()
{
    enrollment_type_ = 0;
    clear_has_enrollment_type();
}
::enterprise_management::DeviceRegisterResponse_DeviceMode DeviceRegisterResponse::enrollment_type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.enrollment_type)
    return static_cast<::enterprise_management::DeviceRegisterResponse_DeviceMode>(enrollment_type_);
}
void DeviceRegisterResponse::set_enrollment_type(::enterprise_management::DeviceRegisterResponse_DeviceMode value)
{
    assert(::enterprise_management::DeviceRegisterResponse_DeviceMode_IsValid(value));
    set_has_enrollment_type();
    enrollment_type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.enrollment_type)
}

// optional string configuration_seed = 4;
bool DeviceRegisterResponse::has_configuration_seed() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceRegisterResponse::set_has_configuration_seed()
{
    _has_bits_[0] |= 0x00000008u;
}
void DeviceRegisterResponse::clear_has_configuration_seed()
{
    _has_bits_[0] &= ~0x00000008u;
}
void DeviceRegisterResponse::clear_configuration_seed()
{
    configuration_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_configuration_seed();
}
const ::std::string& DeviceRegisterResponse::configuration_seed() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRegisterResponse.configuration_seed)
    return configuration_seed_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_configuration_seed(const ::std::string& value)
{
    set_has_configuration_seed();
    configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
void DeviceRegisterResponse::set_configuration_seed(const char* value)
{
    set_has_configuration_seed();
    configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
void DeviceRegisterResponse::set_configuration_seed(const char* value, size_t size)
{
    set_has_configuration_seed();
    configuration_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceRegisterResponse.configuration_seed)
}
::std::string* DeviceRegisterResponse::mutable_configuration_seed()
{
    set_has_configuration_seed();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRegisterResponse.configuration_seed)
    return configuration_seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceRegisterResponse::release_configuration_seed()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceRegisterResponse.configuration_seed)
    clear_has_configuration_seed();
    return configuration_seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceRegisterResponse::set_allocated_configuration_seed(::std::string* configuration_seed)
{
    if (configuration_seed != NULL) {
        set_has_configuration_seed();
    } else {
        clear_has_configuration_seed();
    }
    configuration_seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configuration_seed);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceRegisterResponse.configuration_seed)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceUnregisterRequest(
    DeviceUnregisterRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUnregisterRequest::DeviceUnregisterRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceUnregisterRequest)
}

void DeviceUnregisterRequest::InitAsDefaultInstance()
{
}

DeviceUnregisterRequest::DeviceUnregisterRequest(const DeviceUnregisterRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnregisterRequest)
}

void DeviceUnregisterRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceUnregisterRequest::~DeviceUnregisterRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnregisterRequest)
    SharedDtor();
}

void DeviceUnregisterRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceUnregisterRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUnregisterRequest& DeviceUnregisterRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceUnregisterRequest* DeviceUnregisterRequest::default_instance_ = NULL;

DeviceUnregisterRequest* DeviceUnregisterRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceUnregisterRequest* n = new DeviceUnregisterRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceUnregisterRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnregisterRequest)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceUnregisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceUnregisterRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUnregisterRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUnregisterRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUnregisterRequest)
    return false;
#undef DO_
}

void DeviceUnregisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUnregisterRequest)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUnregisterRequest)
}

int DeviceUnregisterRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnregisterRequest)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceUnregisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceUnregisterRequest*>(&from));
}

void DeviceUnregisterRequest::MergeFrom(const DeviceUnregisterRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnregisterRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceUnregisterRequest::CopyFrom(const DeviceUnregisterRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnregisterRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceUnregisterRequest::IsInitialized() const
{

    return true;
}

void DeviceUnregisterRequest::Swap(DeviceUnregisterRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceUnregisterRequest::InternalSwap(DeviceUnregisterRequest* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUnregisterRequest::GetTypeName() const
{
    return "enterprise_management.DeviceUnregisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUnregisterRequest

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceUnregisterResponse(
    DeviceUnregisterResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUnregisterResponse::DeviceUnregisterResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceUnregisterResponse)
}

void DeviceUnregisterResponse::InitAsDefaultInstance()
{
}

DeviceUnregisterResponse::DeviceUnregisterResponse(const DeviceUnregisterResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUnregisterResponse)
}

void DeviceUnregisterResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceUnregisterResponse::~DeviceUnregisterResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceUnregisterResponse)
    SharedDtor();
}

void DeviceUnregisterResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceUnregisterResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUnregisterResponse& DeviceUnregisterResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceUnregisterResponse* DeviceUnregisterResponse::default_instance_ = NULL;

DeviceUnregisterResponse* DeviceUnregisterResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceUnregisterResponse* n = new DeviceUnregisterResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceUnregisterResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUnregisterResponse)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceUnregisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceUnregisterResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUnregisterResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUnregisterResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUnregisterResponse)
    return false;
#undef DO_
}

void DeviceUnregisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUnregisterResponse)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUnregisterResponse)
}

int DeviceUnregisterResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUnregisterResponse)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceUnregisterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceUnregisterResponse*>(&from));
}

void DeviceUnregisterResponse::MergeFrom(const DeviceUnregisterResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUnregisterResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceUnregisterResponse::CopyFrom(const DeviceUnregisterResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUnregisterResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceUnregisterResponse::IsInitialized() const
{

    return true;
}

void DeviceUnregisterResponse::Swap(DeviceUnregisterResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceUnregisterResponse::InternalSwap(DeviceUnregisterResponse* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUnregisterResponse::GetTypeName() const
{
    return "enterprise_management.DeviceUnregisterResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUnregisterResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceCertUploadRequest(
    DeviceCertUploadRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceCertUploadRequest::kDeviceCertificateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceCertUploadRequest::DeviceCertUploadRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceCertUploadRequest)
}

void DeviceCertUploadRequest::InitAsDefaultInstance()
{
}

DeviceCertUploadRequest::DeviceCertUploadRequest(const DeviceCertUploadRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceCertUploadRequest)
}

void DeviceCertUploadRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceCertUploadRequest::~DeviceCertUploadRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceCertUploadRequest)
    SharedDtor();
}

void DeviceCertUploadRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceCertUploadRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCertUploadRequest& DeviceCertUploadRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceCertUploadRequest* DeviceCertUploadRequest::default_instance_ = NULL;

DeviceCertUploadRequest* DeviceCertUploadRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceCertUploadRequest* n = new DeviceCertUploadRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceCertUploadRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceCertUploadRequest)
    if (has_device_certificate()) {
        device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceCertUploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceCertUploadRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceCertUploadRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes device_certificate = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_device_certificate()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceCertUploadRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceCertUploadRequest)
    return false;
#undef DO_
}

void DeviceCertUploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceCertUploadRequest)
    // optional bytes device_certificate = 1;
    if (has_device_certificate()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->device_certificate(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceCertUploadRequest)
}

int DeviceCertUploadRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceCertUploadRequest)
    int total_size = 0;

    // optional bytes device_certificate = 1;
    if (has_device_certificate()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->device_certificate());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceCertUploadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceCertUploadRequest*>(&from));
}

void DeviceCertUploadRequest::MergeFrom(const DeviceCertUploadRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceCertUploadRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_device_certificate()) {
            set_has_device_certificate();
            device_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceCertUploadRequest::CopyFrom(const DeviceCertUploadRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceCertUploadRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceCertUploadRequest::IsInitialized() const
{

    return true;
}

void DeviceCertUploadRequest::Swap(DeviceCertUploadRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceCertUploadRequest::InternalSwap(DeviceCertUploadRequest* other)
{
    device_certificate_.Swap(&other->device_certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceCertUploadRequest::GetTypeName() const
{
    return "enterprise_management.DeviceCertUploadRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceCertUploadRequest

// optional bytes device_certificate = 1;
bool DeviceCertUploadRequest::has_device_certificate() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceCertUploadRequest::set_has_device_certificate()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceCertUploadRequest::clear_has_device_certificate()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceCertUploadRequest::clear_device_certificate()
{
    device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_certificate();
}
const ::std::string& DeviceCertUploadRequest::device_certificate() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceCertUploadRequest.device_certificate)
    return device_certificate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceCertUploadRequest::set_device_certificate(const ::std::string& value)
{
    set_has_device_certificate();
    device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
void DeviceCertUploadRequest::set_device_certificate(const char* value)
{
    set_has_device_certificate();
    device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
void DeviceCertUploadRequest::set_device_certificate(const void* value, size_t size)
{
    set_has_device_certificate();
    device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceCertUploadRequest.device_certificate)
}
::std::string* DeviceCertUploadRequest::mutable_device_certificate()
{
    set_has_device_certificate();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceCertUploadRequest.device_certificate)
    return device_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceCertUploadRequest::release_device_certificate()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceCertUploadRequest.device_certificate)
    clear_has_device_certificate();
    return device_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceCertUploadRequest::set_allocated_device_certificate(::std::string* device_certificate)
{
    if (device_certificate != NULL) {
        set_has_device_certificate();
    } else {
        clear_has_device_certificate();
    }
    device_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_certificate);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceCertUploadRequest.device_certificate)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceCertUploadResponse(
    DeviceCertUploadResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceCertUploadResponse::DeviceCertUploadResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceCertUploadResponse)
}

void DeviceCertUploadResponse::InitAsDefaultInstance()
{
}

DeviceCertUploadResponse::DeviceCertUploadResponse(const DeviceCertUploadResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceCertUploadResponse)
}

void DeviceCertUploadResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceCertUploadResponse::~DeviceCertUploadResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceCertUploadResponse)
    SharedDtor();
}

void DeviceCertUploadResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceCertUploadResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceCertUploadResponse& DeviceCertUploadResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceCertUploadResponse* DeviceCertUploadResponse::default_instance_ = NULL;

DeviceCertUploadResponse* DeviceCertUploadResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceCertUploadResponse* n = new DeviceCertUploadResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceCertUploadResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceCertUploadResponse)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceCertUploadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceCertUploadResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceCertUploadResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceCertUploadResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceCertUploadResponse)
    return false;
#undef DO_
}

void DeviceCertUploadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceCertUploadResponse)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceCertUploadResponse)
}

int DeviceCertUploadResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceCertUploadResponse)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceCertUploadResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceCertUploadResponse*>(&from));
}

void DeviceCertUploadResponse::MergeFrom(const DeviceCertUploadResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceCertUploadResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceCertUploadResponse::CopyFrom(const DeviceCertUploadResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceCertUploadResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceCertUploadResponse::IsInitialized() const
{

    return true;
}

void DeviceCertUploadResponse::Swap(DeviceCertUploadResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceCertUploadResponse::InternalSwap(DeviceCertUploadResponse* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceCertUploadResponse::GetTypeName() const
{
    return "enterprise_management.DeviceCertUploadResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceCertUploadResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceServiceApiAccessRequest(
    DeviceServiceApiAccessRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceServiceApiAccessRequest_DeviceType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::CHROME;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::ANDROIDOS;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::DeviceType_MIN;
const DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::DeviceType_MAX;
const int DeviceServiceApiAccessRequest::DeviceType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceServiceApiAccessRequest::kAuthScopeFieldNumber;
const int DeviceServiceApiAccessRequest::kOauth2ClientIdFieldNumber;
const int DeviceServiceApiAccessRequest::kDeviceTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceServiceApiAccessRequest::DeviceServiceApiAccessRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceServiceApiAccessRequest)
}

void DeviceServiceApiAccessRequest::InitAsDefaultInstance()
{
}

DeviceServiceApiAccessRequest::DeviceServiceApiAccessRequest(const DeviceServiceApiAccessRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceServiceApiAccessRequest)
}

void DeviceServiceApiAccessRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    oauth2_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_type_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceServiceApiAccessRequest::~DeviceServiceApiAccessRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceServiceApiAccessRequest)
    SharedDtor();
}

void DeviceServiceApiAccessRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    oauth2_client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceServiceApiAccessRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceServiceApiAccessRequest& DeviceServiceApiAccessRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceServiceApiAccessRequest* DeviceServiceApiAccessRequest::default_instance_ = NULL;

DeviceServiceApiAccessRequest* DeviceServiceApiAccessRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceServiceApiAccessRequest* n = new DeviceServiceApiAccessRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceServiceApiAccessRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceServiceApiAccessRequest)
    if (_has_bits_[0 / 32] & 6u) {
        if (has_oauth2_client_id()) {
            oauth2_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        device_type_ = 0;
    }
    auth_scope_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceServiceApiAccessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceServiceApiAccessRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceServiceApiAccessRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated string auth_scope = 1;
        case 1: {
            if (tag == 10) {
            parse_auth_scope:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_auth_scope()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_auth_scope;
            if (input->ExpectTag(18))
                goto parse_oauth2_client_id;
            break;
        }

        // optional string oauth2_client_id = 2;
        case 2: {
            if (tag == 18) {
            parse_oauth2_client_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_oauth2_client_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_device_type;
            break;
        }

        // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
        case 3: {
            if (tag == 24) {
            parse_device_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(value)) {
                    set_device_type(static_cast<::enterprise_management::DeviceServiceApiAccessRequest_DeviceType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(24);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceServiceApiAccessRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceServiceApiAccessRequest)
    return false;
#undef DO_
}

void DeviceServiceApiAccessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceServiceApiAccessRequest)
    // repeated string auth_scope = 1;
    for (int i = 0; i < this->auth_scope_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->auth_scope(i), output);
    }

    // optional string oauth2_client_id = 2;
    if (has_oauth2_client_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->oauth2_client_id(), output);
    }

    // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
    if (has_device_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            3, this->device_type(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceServiceApiAccessRequest)
}

int DeviceServiceApiAccessRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceServiceApiAccessRequest)
    int total_size = 0;

    if (_has_bits_[1 / 32] & 6u) {
        // optional string oauth2_client_id = 2;
        if (has_oauth2_client_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->oauth2_client_id());
        }

        // optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
        if (has_device_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
        }
    }
    // repeated string auth_scope = 1;
    total_size += 1 * this->auth_scope_size();
    for (int i = 0; i < this->auth_scope_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->auth_scope(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceServiceApiAccessRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceServiceApiAccessRequest*>(&from));
}

void DeviceServiceApiAccessRequest::MergeFrom(const DeviceServiceApiAccessRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceServiceApiAccessRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    auth_scope_.MergeFrom(from.auth_scope_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
        if (from.has_oauth2_client_id()) {
            set_has_oauth2_client_id();
            oauth2_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth2_client_id_);
        }
        if (from.has_device_type()) {
            set_device_type(from.device_type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceServiceApiAccessRequest::CopyFrom(const DeviceServiceApiAccessRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceServiceApiAccessRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceServiceApiAccessRequest::IsInitialized() const
{

    return true;
}

void DeviceServiceApiAccessRequest::Swap(DeviceServiceApiAccessRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceServiceApiAccessRequest::InternalSwap(DeviceServiceApiAccessRequest* other)
{
    auth_scope_.UnsafeArenaSwap(&other->auth_scope_);
    oauth2_client_id_.Swap(&other->oauth2_client_id_);
    std::swap(device_type_, other->device_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceServiceApiAccessRequest::GetTypeName() const
{
    return "enterprise_management.DeviceServiceApiAccessRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceServiceApiAccessRequest

// repeated string auth_scope = 1;
int DeviceServiceApiAccessRequest::auth_scope_size() const
{
    return auth_scope_.size();
}
void DeviceServiceApiAccessRequest::clear_auth_scope()
{
    auth_scope_.Clear();
}
const ::std::string& DeviceServiceApiAccessRequest::auth_scope(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
    return auth_scope_.Get(index);
}
::std::string* DeviceServiceApiAccessRequest::mutable_auth_scope(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
    return auth_scope_.Mutable(index);
}
void DeviceServiceApiAccessRequest::set_auth_scope(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
    auth_scope_.Mutable(index)->assign(value);
}
void DeviceServiceApiAccessRequest::set_auth_scope(int index, const char* value)
{
    auth_scope_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
void DeviceServiceApiAccessRequest::set_auth_scope(int index, const char* value, size_t size)
{
    auth_scope_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
::std::string* DeviceServiceApiAccessRequest::add_auth_scope()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
    return auth_scope_.Add();
}
void DeviceServiceApiAccessRequest::add_auth_scope(const ::std::string& value)
{
    auth_scope_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
void DeviceServiceApiAccessRequest::add_auth_scope(const char* value)
{
    auth_scope_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
void DeviceServiceApiAccessRequest::add_auth_scope(const char* value, size_t size)
{
    auth_scope_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
DeviceServiceApiAccessRequest::auth_scope() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
    return auth_scope_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
DeviceServiceApiAccessRequest::mutable_auth_scope()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceServiceApiAccessRequest.auth_scope)
    return &auth_scope_;
}

// optional string oauth2_client_id = 2;
bool DeviceServiceApiAccessRequest::has_oauth2_client_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceServiceApiAccessRequest::set_has_oauth2_client_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceServiceApiAccessRequest::clear_has_oauth2_client_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceServiceApiAccessRequest::clear_oauth2_client_id()
{
    oauth2_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_oauth2_client_id();
}
const ::std::string& DeviceServiceApiAccessRequest::oauth2_client_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
    return oauth2_client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceServiceApiAccessRequest::set_oauth2_client_id(const ::std::string& value)
{
    set_has_oauth2_client_id();
    oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
void DeviceServiceApiAccessRequest::set_oauth2_client_id(const char* value)
{
    set_has_oauth2_client_id();
    oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
void DeviceServiceApiAccessRequest::set_oauth2_client_id(const char* value, size_t size)
{
    set_has_oauth2_client_id();
    oauth2_client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}
::std::string* DeviceServiceApiAccessRequest::mutable_oauth2_client_id()
{
    set_has_oauth2_client_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
    return oauth2_client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceServiceApiAccessRequest::release_oauth2_client_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
    clear_has_oauth2_client_id();
    return oauth2_client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceServiceApiAccessRequest::set_allocated_oauth2_client_id(::std::string* oauth2_client_id)
{
    if (oauth2_client_id != NULL) {
        set_has_oauth2_client_id();
    } else {
        clear_has_oauth2_client_id();
    }
    oauth2_client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth2_client_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceServiceApiAccessRequest.oauth2_client_id)
}

// optional .enterprise_management.DeviceServiceApiAccessRequest.DeviceType device_type = 3;
bool DeviceServiceApiAccessRequest::has_device_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceServiceApiAccessRequest::set_has_device_type()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceServiceApiAccessRequest::clear_has_device_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceServiceApiAccessRequest::clear_device_type()
{
    device_type_ = 0;
    clear_has_device_type();
}
::enterprise_management::DeviceServiceApiAccessRequest_DeviceType DeviceServiceApiAccessRequest::device_type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessRequest.device_type)
    return static_cast<::enterprise_management::DeviceServiceApiAccessRequest_DeviceType>(device_type_);
}
void DeviceServiceApiAccessRequest::set_device_type(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType value)
{
    assert(::enterprise_management::DeviceServiceApiAccessRequest_DeviceType_IsValid(value));
    set_has_device_type();
    device_type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessRequest.device_type)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceServiceApiAccessResponse(
    DeviceServiceApiAccessResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceServiceApiAccessResponse::kAuthCodeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceServiceApiAccessResponse::DeviceServiceApiAccessResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceServiceApiAccessResponse)
}

void DeviceServiceApiAccessResponse::InitAsDefaultInstance()
{
}

DeviceServiceApiAccessResponse::DeviceServiceApiAccessResponse(const DeviceServiceApiAccessResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceServiceApiAccessResponse)
}

void DeviceServiceApiAccessResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceServiceApiAccessResponse::~DeviceServiceApiAccessResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceServiceApiAccessResponse)
    SharedDtor();
}

void DeviceServiceApiAccessResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceServiceApiAccessResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceServiceApiAccessResponse& DeviceServiceApiAccessResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceServiceApiAccessResponse* DeviceServiceApiAccessResponse::default_instance_ = NULL;

DeviceServiceApiAccessResponse* DeviceServiceApiAccessResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceServiceApiAccessResponse* n = new DeviceServiceApiAccessResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceServiceApiAccessResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceServiceApiAccessResponse)
    if (has_auth_code()) {
        auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceServiceApiAccessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceServiceApiAccessResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceServiceApiAccessResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string auth_code = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_auth_code()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceServiceApiAccessResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceServiceApiAccessResponse)
    return false;
#undef DO_
}

void DeviceServiceApiAccessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceServiceApiAccessResponse)
    // optional string auth_code = 1;
    if (has_auth_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->auth_code(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceServiceApiAccessResponse)
}

int DeviceServiceApiAccessResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceServiceApiAccessResponse)
    int total_size = 0;

    // optional string auth_code = 1;
    if (has_auth_code()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->auth_code());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceServiceApiAccessResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceServiceApiAccessResponse*>(&from));
}

void DeviceServiceApiAccessResponse::MergeFrom(const DeviceServiceApiAccessResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceServiceApiAccessResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_auth_code()) {
            set_has_auth_code();
            auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceServiceApiAccessResponse::CopyFrom(const DeviceServiceApiAccessResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceServiceApiAccessResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceServiceApiAccessResponse::IsInitialized() const
{

    return true;
}

void DeviceServiceApiAccessResponse::Swap(DeviceServiceApiAccessResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceServiceApiAccessResponse::InternalSwap(DeviceServiceApiAccessResponse* other)
{
    auth_code_.Swap(&other->auth_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceServiceApiAccessResponse::GetTypeName() const
{
    return "enterprise_management.DeviceServiceApiAccessResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceServiceApiAccessResponse

// optional string auth_code = 1;
bool DeviceServiceApiAccessResponse::has_auth_code() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceServiceApiAccessResponse::set_has_auth_code()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceServiceApiAccessResponse::clear_has_auth_code()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceServiceApiAccessResponse::clear_auth_code()
{
    auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_auth_code();
}
const ::std::string& DeviceServiceApiAccessResponse::auth_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
    return auth_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceServiceApiAccessResponse::set_auth_code(const ::std::string& value)
{
    set_has_auth_code();
    auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
void DeviceServiceApiAccessResponse::set_auth_code(const char* value)
{
    set_has_auth_code();
    auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
void DeviceServiceApiAccessResponse::set_auth_code(const char* value, size_t size)
{
    set_has_auth_code();
    auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}
::std::string* DeviceServiceApiAccessResponse::mutable_auth_code()
{
    set_has_auth_code();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
    return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceServiceApiAccessResponse::release_auth_code()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
    clear_has_auth_code();
    return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceServiceApiAccessResponse::set_allocated_auth_code(::std::string* auth_code)
{
    if (auth_code != NULL) {
        set_has_auth_code();
    } else {
        clear_has_auth_code();
    }
    auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceServiceApiAccessResponse.auth_code)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPolicyFetchRequest(
    PolicyFetchRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool PolicyFetchRequest_SignatureType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyFetchRequest_SignatureType PolicyFetchRequest::NONE;
const PolicyFetchRequest_SignatureType PolicyFetchRequest::SHA1_RSA;
const PolicyFetchRequest_SignatureType PolicyFetchRequest::SignatureType_MIN;
const PolicyFetchRequest_SignatureType PolicyFetchRequest::SignatureType_MAX;
const int PolicyFetchRequest::SignatureType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyFetchRequest::kPolicyTypeFieldNumber;
const int PolicyFetchRequest::kTimestampFieldNumber;
const int PolicyFetchRequest::kSignatureTypeFieldNumber;
const int PolicyFetchRequest::kPublicKeyVersionFieldNumber;
const int PolicyFetchRequest::kMachineIdFieldNumber;
const int PolicyFetchRequest::kSettingsEntityIdFieldNumber;
const int PolicyFetchRequest::kInvalidationVersionFieldNumber;
const int PolicyFetchRequest::kInvalidationPayloadFieldNumber;
const int PolicyFetchRequest::kVerificationKeyHashFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyFetchRequest::PolicyFetchRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchRequest)
}

void PolicyFetchRequest::InitAsDefaultInstance()
{
}

PolicyFetchRequest::PolicyFetchRequest(const PolicyFetchRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchRequest)
}

void PolicyFetchRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    timestamp_ = GOOGLE_LONGLONG(0);
    signature_type_ = 0;
    public_key_version_ = 0;
    machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    settings_entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    invalidation_version_ = GOOGLE_LONGLONG(0);
    invalidation_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    verification_key_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyFetchRequest::~PolicyFetchRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchRequest)
    SharedDtor();
}

void PolicyFetchRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    settings_entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    invalidation_payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    verification_key_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PolicyFetchRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyFetchRequest& PolicyFetchRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

PolicyFetchRequest* PolicyFetchRequest::default_instance_ = NULL;

PolicyFetchRequest* PolicyFetchRequest::New(::google::protobuf::Arena* arena) const
{
    PolicyFetchRequest* n = new PolicyFetchRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PolicyFetchRequest::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchRequest)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                        \
    _Pragma("clang diagnostic push")                                                                         \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PolicyFetchRequest, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PolicyFetchRequest*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(timestamp_, public_key_version_);
        if (has_policy_type()) {
            policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_machine_id()) {
            machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_settings_entity_id()) {
            settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        invalidation_version_ = GOOGLE_LONGLONG(0);
        if (has_invalidation_payload()) {
            invalidation_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (has_verification_key_hash()) {
        verification_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PolicyFetchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPolicyFetchRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string policy_type = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_policy_type()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_timestamp;
            break;
        }

        // optional int64 timestamp = 2;
        case 2: {
            if (tag == 16) {
            parse_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &timestamp_)));
                set_has_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_signature_type;
            break;
        }

        // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
        case 3: {
            if (tag == 24) {
            parse_signature_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(value)) {
                    set_signature_type(static_cast<::enterprise_management::PolicyFetchRequest_SignatureType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(24);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_public_key_version;
            break;
        }

        // optional int32 public_key_version = 4;
        case 4: {
            if (tag == 32) {
            parse_public_key_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &public_key_version_)));
                set_has_public_key_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_machine_id;
            break;
        }

        // optional string machine_id = 5;
        case 5: {
            if (tag == 42) {
            parse_machine_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_machine_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_settings_entity_id;
            break;
        }

        // optional string settings_entity_id = 6;
        case 6: {
            if (tag == 50) {
            parse_settings_entity_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_settings_entity_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(56))
                goto parse_invalidation_version;
            break;
        }

        // optional int64 invalidation_version = 7;
        case 7: {
            if (tag == 56) {
            parse_invalidation_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &invalidation_version_)));
                set_has_invalidation_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_invalidation_payload;
            break;
        }

        // optional bytes invalidation_payload = 8;
        case 8: {
            if (tag == 66) {
            parse_invalidation_payload:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_invalidation_payload()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_verification_key_hash;
            break;
        }

        // optional string verification_key_hash = 9;
        case 9: {
            if (tag == 74) {
            parse_verification_key_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_verification_key_hash()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchRequest)
    return false;
#undef DO_
}

void PolicyFetchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchRequest)
    // optional string policy_type = 1;
    if (has_policy_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->policy_type(), output);
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
    }

    // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
    if (has_signature_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            3, this->signature_type(), output);
    }

    // optional int32 public_key_version = 4;
    if (has_public_key_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->public_key_version(), output);
    }

    // optional string machine_id = 5;
    if (has_machine_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->machine_id(), output);
    }

    // optional string settings_entity_id = 6;
    if (has_settings_entity_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            6, this->settings_entity_id(), output);
    }

    // optional int64 invalidation_version = 7;
    if (has_invalidation_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->invalidation_version(), output);
    }

    // optional bytes invalidation_payload = 8;
    if (has_invalidation_payload()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            8, this->invalidation_payload(), output);
    }

    // optional string verification_key_hash = 9;
    if (has_verification_key_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            9, this->verification_key_hash(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchRequest)
}

int PolicyFetchRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional string policy_type = 1;
        if (has_policy_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->policy_type());
        }

        // optional int64 timestamp = 2;
        if (has_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
        }

        // optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
        if (has_signature_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_type());
        }

        // optional int32 public_key_version = 4;
        if (has_public_key_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->public_key_version());
        }

        // optional string machine_id = 5;
        if (has_machine_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->machine_id());
        }

        // optional string settings_entity_id = 6;
        if (has_settings_entity_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->settings_entity_id());
        }

        // optional int64 invalidation_version = 7;
        if (has_invalidation_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->invalidation_version());
        }

        // optional bytes invalidation_payload = 8;
        if (has_invalidation_payload()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->invalidation_payload());
        }
    }
    // optional string verification_key_hash = 9;
    if (has_verification_key_hash()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->verification_key_hash());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PolicyFetchRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PolicyFetchRequest*>(&from));
}

void PolicyFetchRequest::MergeFrom(const PolicyFetchRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_policy_type()) {
            set_has_policy_type();
            policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
        }
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
        if (from.has_signature_type()) {
            set_signature_type(from.signature_type());
        }
        if (from.has_public_key_version()) {
            set_public_key_version(from.public_key_version());
        }
        if (from.has_machine_id()) {
            set_has_machine_id();
            machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
        }
        if (from.has_settings_entity_id()) {
            set_has_settings_entity_id();
            settings_entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
        }
        if (from.has_invalidation_version()) {
            set_invalidation_version(from.invalidation_version());
        }
        if (from.has_invalidation_payload()) {
            set_has_invalidation_payload();
            invalidation_payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidation_payload_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_verification_key_hash()) {
            set_has_verification_key_hash();
            verification_key_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verification_key_hash_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PolicyFetchRequest::CopyFrom(const PolicyFetchRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PolicyFetchRequest::IsInitialized() const
{

    return true;
}

void PolicyFetchRequest::Swap(PolicyFetchRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PolicyFetchRequest::InternalSwap(PolicyFetchRequest* other)
{
    policy_type_.Swap(&other->policy_type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(signature_type_, other->signature_type_);
    std::swap(public_key_version_, other->public_key_version_);
    machine_id_.Swap(&other->machine_id_);
    settings_entity_id_.Swap(&other->settings_entity_id_);
    std::swap(invalidation_version_, other->invalidation_version_);
    invalidation_payload_.Swap(&other->invalidation_payload_);
    verification_key_hash_.Swap(&other->verification_key_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyFetchRequest::GetTypeName() const
{
    return "enterprise_management.PolicyFetchRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyFetchRequest

// optional string policy_type = 1;
bool PolicyFetchRequest::has_policy_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyFetchRequest::set_has_policy_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void PolicyFetchRequest::clear_has_policy_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PolicyFetchRequest::clear_policy_type()
{
    policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_policy_type();
}
const ::std::string& PolicyFetchRequest::policy_type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.policy_type)
    return policy_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_policy_type(const ::std::string& value)
{
    set_has_policy_type();
    policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.policy_type)
}
void PolicyFetchRequest::set_policy_type(const char* value)
{
    set_has_policy_type();
    policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.policy_type)
}
void PolicyFetchRequest::set_policy_type(const char* value, size_t size)
{
    set_has_policy_type();
    policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.policy_type)
}
::std::string* PolicyFetchRequest::mutable_policy_type()
{
    set_has_policy_type();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.policy_type)
    return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_policy_type()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.policy_type)
    clear_has_policy_type();
    return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_policy_type(::std::string* policy_type)
{
    if (policy_type != NULL) {
        set_has_policy_type();
    } else {
        clear_has_policy_type();
    }
    policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.policy_type)
}

// optional int64 timestamp = 2;
bool PolicyFetchRequest::has_timestamp() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyFetchRequest::set_has_timestamp()
{
    _has_bits_[0] |= 0x00000002u;
}
void PolicyFetchRequest::clear_has_timestamp()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PolicyFetchRequest::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_timestamp();
}
::google::protobuf::int64 PolicyFetchRequest::timestamp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.timestamp)
    return timestamp_;
}
void PolicyFetchRequest::set_timestamp(::google::protobuf::int64 value)
{
    set_has_timestamp();
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.timestamp)
}

// optional .enterprise_management.PolicyFetchRequest.SignatureType signature_type = 3 [default = NONE];
bool PolicyFetchRequest::has_signature_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyFetchRequest::set_has_signature_type()
{
    _has_bits_[0] |= 0x00000004u;
}
void PolicyFetchRequest::clear_has_signature_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PolicyFetchRequest::clear_signature_type()
{
    signature_type_ = 0;
    clear_has_signature_type();
}
::enterprise_management::PolicyFetchRequest_SignatureType PolicyFetchRequest::signature_type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.signature_type)
    return static_cast<::enterprise_management::PolicyFetchRequest_SignatureType>(signature_type_);
}
void PolicyFetchRequest::set_signature_type(::enterprise_management::PolicyFetchRequest_SignatureType value)
{
    assert(::enterprise_management::PolicyFetchRequest_SignatureType_IsValid(value));
    set_has_signature_type();
    signature_type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.signature_type)
}

// optional int32 public_key_version = 4;
bool PolicyFetchRequest::has_public_key_version() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyFetchRequest::set_has_public_key_version()
{
    _has_bits_[0] |= 0x00000008u;
}
void PolicyFetchRequest::clear_has_public_key_version()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PolicyFetchRequest::clear_public_key_version()
{
    public_key_version_ = 0;
    clear_has_public_key_version();
}
::google::protobuf::int32 PolicyFetchRequest::public_key_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.public_key_version)
    return public_key_version_;
}
void PolicyFetchRequest::set_public_key_version(::google::protobuf::int32 value)
{
    set_has_public_key_version();
    public_key_version_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.public_key_version)
}

// optional string machine_id = 5;
bool PolicyFetchRequest::has_machine_id() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyFetchRequest::set_has_machine_id()
{
    _has_bits_[0] |= 0x00000010u;
}
void PolicyFetchRequest::clear_has_machine_id()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PolicyFetchRequest::clear_machine_id()
{
    machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_machine_id();
}
const ::std::string& PolicyFetchRequest::machine_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.machine_id)
    return machine_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_machine_id(const ::std::string& value)
{
    set_has_machine_id();
    machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.machine_id)
}
void PolicyFetchRequest::set_machine_id(const char* value)
{
    set_has_machine_id();
    machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.machine_id)
}
void PolicyFetchRequest::set_machine_id(const char* value, size_t size)
{
    set_has_machine_id();
    machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.machine_id)
}
::std::string* PolicyFetchRequest::mutable_machine_id()
{
    set_has_machine_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.machine_id)
    return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_machine_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.machine_id)
    clear_has_machine_id();
    return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_machine_id(::std::string* machine_id)
{
    if (machine_id != NULL) {
        set_has_machine_id();
    } else {
        clear_has_machine_id();
    }
    machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.machine_id)
}

// optional string settings_entity_id = 6;
bool PolicyFetchRequest::has_settings_entity_id() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolicyFetchRequest::set_has_settings_entity_id()
{
    _has_bits_[0] |= 0x00000020u;
}
void PolicyFetchRequest::clear_has_settings_entity_id()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PolicyFetchRequest::clear_settings_entity_id()
{
    settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_settings_entity_id();
}
const ::std::string& PolicyFetchRequest::settings_entity_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.settings_entity_id)
    return settings_entity_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_settings_entity_id(const ::std::string& value)
{
    set_has_settings_entity_id();
    settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
void PolicyFetchRequest::set_settings_entity_id(const char* value)
{
    set_has_settings_entity_id();
    settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
void PolicyFetchRequest::set_settings_entity_id(const char* value, size_t size)
{
    set_has_settings_entity_id();
    settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.settings_entity_id)
}
::std::string* PolicyFetchRequest::mutable_settings_entity_id()
{
    set_has_settings_entity_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.settings_entity_id)
    return settings_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_settings_entity_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.settings_entity_id)
    clear_has_settings_entity_id();
    return settings_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_settings_entity_id(::std::string* settings_entity_id)
{
    if (settings_entity_id != NULL) {
        set_has_settings_entity_id();
    } else {
        clear_has_settings_entity_id();
    }
    settings_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings_entity_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.settings_entity_id)
}

// optional int64 invalidation_version = 7;
bool PolicyFetchRequest::has_invalidation_version() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolicyFetchRequest::set_has_invalidation_version()
{
    _has_bits_[0] |= 0x00000040u;
}
void PolicyFetchRequest::clear_has_invalidation_version()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PolicyFetchRequest::clear_invalidation_version()
{
    invalidation_version_ = GOOGLE_LONGLONG(0);
    clear_has_invalidation_version();
}
::google::protobuf::int64 PolicyFetchRequest::invalidation_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_version)
    return invalidation_version_;
}
void PolicyFetchRequest::set_invalidation_version(::google::protobuf::int64 value)
{
    set_has_invalidation_version();
    invalidation_version_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_version)
}

// optional bytes invalidation_payload = 8;
bool PolicyFetchRequest::has_invalidation_payload() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolicyFetchRequest::set_has_invalidation_payload()
{
    _has_bits_[0] |= 0x00000080u;
}
void PolicyFetchRequest::clear_has_invalidation_payload()
{
    _has_bits_[0] &= ~0x00000080u;
}
void PolicyFetchRequest::clear_invalidation_payload()
{
    invalidation_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_invalidation_payload();
}
const ::std::string& PolicyFetchRequest::invalidation_payload() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.invalidation_payload)
    return invalidation_payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_invalidation_payload(const ::std::string& value)
{
    set_has_invalidation_payload();
    invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
void PolicyFetchRequest::set_invalidation_payload(const char* value)
{
    set_has_invalidation_payload();
    invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
void PolicyFetchRequest::set_invalidation_payload(const void* value, size_t size)
{
    set_has_invalidation_payload();
    invalidation_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.invalidation_payload)
}
::std::string* PolicyFetchRequest::mutable_invalidation_payload()
{
    set_has_invalidation_payload();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.invalidation_payload)
    return invalidation_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_invalidation_payload()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.invalidation_payload)
    clear_has_invalidation_payload();
    return invalidation_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_invalidation_payload(::std::string* invalidation_payload)
{
    if (invalidation_payload != NULL) {
        set_has_invalidation_payload();
    } else {
        clear_has_invalidation_payload();
    }
    invalidation_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidation_payload);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.invalidation_payload)
}

// optional string verification_key_hash = 9;
bool PolicyFetchRequest::has_verification_key_hash() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolicyFetchRequest::set_has_verification_key_hash()
{
    _has_bits_[0] |= 0x00000100u;
}
void PolicyFetchRequest::clear_has_verification_key_hash()
{
    _has_bits_[0] &= ~0x00000100u;
}
void PolicyFetchRequest::clear_verification_key_hash()
{
    verification_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_verification_key_hash();
}
const ::std::string& PolicyFetchRequest::verification_key_hash() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchRequest.verification_key_hash)
    return verification_key_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_verification_key_hash(const ::std::string& value)
{
    set_has_verification_key_hash();
    verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
void PolicyFetchRequest::set_verification_key_hash(const char* value)
{
    set_has_verification_key_hash();
    verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
void PolicyFetchRequest::set_verification_key_hash(const char* value, size_t size)
{
    set_has_verification_key_hash();
    verification_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchRequest.verification_key_hash)
}
::std::string* PolicyFetchRequest::mutable_verification_key_hash()
{
    set_has_verification_key_hash();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchRequest.verification_key_hash)
    return verification_key_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchRequest::release_verification_key_hash()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchRequest.verification_key_hash)
    clear_has_verification_key_hash();
    return verification_key_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchRequest::set_allocated_verification_key_hash(::std::string* verification_key_hash)
{
    if (verification_key_hash != NULL) {
        set_has_verification_key_hash();
    } else {
        clear_has_verification_key_hash();
    }
    verification_key_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_key_hash);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchRequest.verification_key_hash)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDisabledState(
    DisabledState* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisabledState::kMessageFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DisabledState::DisabledState()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DisabledState)
}

void DisabledState::InitAsDefaultInstance()
{
}

DisabledState::DisabledState(const DisabledState& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DisabledState)
}

void DisabledState::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisabledState::~DisabledState()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DisabledState)
    SharedDtor();
}

void DisabledState::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DisabledState::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DisabledState& DisabledState::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DisabledState* DisabledState::default_instance_ = NULL;

DisabledState* DisabledState::New(::google::protobuf::Arena* arena) const
{
    DisabledState* n = new DisabledState;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DisabledState::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DisabledState)
    if (has_message()) {
        message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DisabledState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDisabledState, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DisabledState)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string message = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_message()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DisabledState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DisabledState)
    return false;
#undef DO_
}

void DisabledState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DisabledState)
    // optional string message = 1;
    if (has_message()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->message(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DisabledState)
}

int DisabledState::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DisabledState)
    int total_size = 0;

    // optional string message = 1;
    if (has_message()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->message());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DisabledState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DisabledState*>(&from));
}

void DisabledState::MergeFrom(const DisabledState& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DisabledState)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_message()) {
            set_has_message();
            message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DisabledState::CopyFrom(const DisabledState& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DisabledState)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DisabledState::IsInitialized() const
{

    return true;
}

void DisabledState::Swap(DisabledState* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DisabledState::InternalSwap(DisabledState* other)
{
    message_.Swap(&other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DisabledState::GetTypeName() const
{
    return "enterprise_management.DisabledState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisabledState

// optional string message = 1;
bool DisabledState::has_message() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DisabledState::set_has_message()
{
    _has_bits_[0] |= 0x00000001u;
}
void DisabledState::clear_has_message()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DisabledState::clear_message()
{
    message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
}
const ::std::string& DisabledState::message() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DisabledState.message)
    return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DisabledState::set_message(const ::std::string& value)
{
    set_has_message();
    message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DisabledState.message)
}
void DisabledState::set_message(const char* value)
{
    set_has_message();
    message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DisabledState.message)
}
void DisabledState::set_message(const char* value, size_t size)
{
    set_has_message();
    message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DisabledState.message)
}
::std::string* DisabledState::mutable_message()
{
    set_has_message();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DisabledState.message)
    return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DisabledState::release_message()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DisabledState.message)
    clear_has_message();
    return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DisabledState::set_allocated_message(::std::string* message)
{
    if (message != NULL) {
        set_has_message();
    } else {
        clear_has_message();
    }
    message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DisabledState.message)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceState(
    DeviceState* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceState_DeviceMode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceState_DeviceMode DeviceState::DEVICE_MODE_NORMAL;
const DeviceState_DeviceMode DeviceState::DEVICE_MODE_DISABLED;
const DeviceState_DeviceMode DeviceState::DeviceMode_MIN;
const DeviceState_DeviceMode DeviceState::DeviceMode_MAX;
const int DeviceState::DeviceMode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceState::kDeviceModeFieldNumber;
const int DeviceState::kDisabledStateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceState::DeviceState()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceState)
}

void DeviceState::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    disabled_state_ = const_cast<::enterprise_management::DisabledState*>(
        ::enterprise_management::DisabledState::internal_default_instance());
#else
    disabled_state_ = const_cast<::enterprise_management::DisabledState*>(&::enterprise_management::DisabledState::default_instance());
#endif
}

DeviceState::DeviceState(const DeviceState& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceState)
}

void DeviceState::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_mode_ = 0;
    disabled_state_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceState::~DeviceState()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceState)
    SharedDtor();
}

void DeviceState::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete disabled_state_;
    }
}

void DeviceState::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceState& DeviceState::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceState* DeviceState::default_instance_ = NULL;

DeviceState* DeviceState::New(::google::protobuf::Arena* arena) const
{
    DeviceState* n = new DeviceState;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceState::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceState)
    if (_has_bits_[0 / 32] & 3u) {
        device_mode_ = 0;
        if (has_disabled_state()) {
            if (disabled_state_ != NULL)
                disabled_state_->::enterprise_management::DisabledState::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceState, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceState)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceState_DeviceMode_IsValid(value)) {
                    set_device_mode(static_cast<::enterprise_management::DeviceState_DeviceMode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_disabled_state;
            break;
        }

        // optional .enterprise_management.DisabledState disabled_state = 2;
        case 2: {
            if (tag == 18) {
            parse_disabled_state:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_disabled_state()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceState)
    return false;
#undef DO_
}

void DeviceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceState)
    // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
    if (has_device_mode()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->device_mode(), output);
    }

    // optional .enterprise_management.DisabledState disabled_state = 2;
    if (has_disabled_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->disabled_state_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceState)
}

int DeviceState::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceState)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
        if (has_device_mode()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_mode());
        }

        // optional .enterprise_management.DisabledState disabled_state = 2;
        if (has_disabled_state()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->disabled_state_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceState*>(&from));
}

void DeviceState::MergeFrom(const DeviceState& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceState)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_device_mode()) {
            set_device_mode(from.device_mode());
        }
        if (from.has_disabled_state()) {
            mutable_disabled_state()->::enterprise_management::DisabledState::MergeFrom(from.disabled_state());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceState::CopyFrom(const DeviceState& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceState)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceState::IsInitialized() const
{

    return true;
}

void DeviceState::Swap(DeviceState* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceState::InternalSwap(DeviceState* other)
{
    std::swap(device_mode_, other->device_mode_);
    std::swap(disabled_state_, other->disabled_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceState::GetTypeName() const
{
    return "enterprise_management.DeviceState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceState

// optional .enterprise_management.DeviceState.DeviceMode device_mode = 1 [default = DEVICE_MODE_NORMAL];
bool DeviceState::has_device_mode() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceState::set_has_device_mode()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceState::clear_has_device_mode()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceState::clear_device_mode()
{
    device_mode_ = 0;
    clear_has_device_mode();
}
::enterprise_management::DeviceState_DeviceMode DeviceState::device_mode() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceState.device_mode)
    return static_cast<::enterprise_management::DeviceState_DeviceMode>(device_mode_);
}
void DeviceState::set_device_mode(::enterprise_management::DeviceState_DeviceMode value)
{
    assert(::enterprise_management::DeviceState_DeviceMode_IsValid(value));
    set_has_device_mode();
    device_mode_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceState.device_mode)
}

// optional .enterprise_management.DisabledState disabled_state = 2;
bool DeviceState::has_disabled_state() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceState::set_has_disabled_state()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceState::clear_has_disabled_state()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceState::clear_disabled_state()
{
    if (disabled_state_ != NULL)
        disabled_state_->::enterprise_management::DisabledState::Clear();
    clear_has_disabled_state();
}
const ::enterprise_management::DisabledState& DeviceState::disabled_state() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceState.disabled_state)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return disabled_state_ != NULL ? *disabled_state_ : *default_instance().disabled_state_;
#else
    return disabled_state_ != NULL ? *disabled_state_ : *default_instance_->disabled_state_;
#endif
}
::enterprise_management::DisabledState* DeviceState::mutable_disabled_state()
{
    set_has_disabled_state();
    if (disabled_state_ == NULL) {
        disabled_state_ = new ::enterprise_management::DisabledState;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceState.disabled_state)
    return disabled_state_;
}
::enterprise_management::DisabledState* DeviceState::release_disabled_state()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceState.disabled_state)
    clear_has_disabled_state();
    ::enterprise_management::DisabledState* temp = disabled_state_;
    disabled_state_ = NULL;
    return temp;
}
void DeviceState::set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state)
{
    delete disabled_state_;
    disabled_state_ = disabled_state;
    if (disabled_state) {
        set_has_disabled_state();
    } else {
        clear_has_disabled_state();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceState.disabled_state)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPolicyData(
    PolicyData* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool PolicyData_AssociationState_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyData_AssociationState PolicyData::ACTIVE;
const PolicyData_AssociationState PolicyData::UNMANAGED;
const PolicyData_AssociationState PolicyData::DEPROVISIONED;
const PolicyData_AssociationState PolicyData::AssociationState_MIN;
const PolicyData_AssociationState PolicyData::AssociationState_MAX;
const int PolicyData::AssociationState_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PolicyData_ManagementMode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PolicyData_ManagementMode PolicyData::LOCAL_OWNER;
const PolicyData_ManagementMode PolicyData::ENTERPRISE_MANAGED;
const PolicyData_ManagementMode PolicyData::CONSUMER_MANAGED;
const PolicyData_ManagementMode PolicyData::ManagementMode_MIN;
const PolicyData_ManagementMode PolicyData::ManagementMode_MAX;
const int PolicyData::ManagementMode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyData::kPolicyTypeFieldNumber;
const int PolicyData::kTimestampFieldNumber;
const int PolicyData::kRequestTokenFieldNumber;
const int PolicyData::kPolicyValueFieldNumber;
const int PolicyData::kMachineNameFieldNumber;
const int PolicyData::kPublicKeyVersionFieldNumber;
const int PolicyData::kUsernameFieldNumber;
const int PolicyData::kDeviceIdFieldNumber;
const int PolicyData::kStateFieldNumber;
const int PolicyData::kValidSerialNumberMissingFieldNumber;
const int PolicyData::kSettingsEntityIdFieldNumber;
const int PolicyData::kServiceAccountIdentityFieldNumber;
const int PolicyData::kInvalidationSourceFieldNumber;
const int PolicyData::kInvalidationNameFieldNumber;
const int PolicyData::kPolicyTokenFieldNumber;
const int PolicyData::kManagementModeFieldNumber;
const int PolicyData::kDeviceStateFieldNumber;
const int PolicyData::kCommandInvalidationSourceFieldNumber;
const int PolicyData::kCommandInvalidationNameFieldNumber;
const int PolicyData::kAnnotatedLocationFieldNumber;
const int PolicyData::kAnnotatedAssetIdFieldNumber;
const int PolicyData::kDirectoryApiIdFieldNumber;
const int PolicyData::kDeviceAffiliationIdsFieldNumber;
const int PolicyData::kUserAffiliationIdsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyData::PolicyData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.PolicyData)
}

void PolicyData::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_state_ = const_cast<::enterprise_management::DeviceState*>(
        ::enterprise_management::DeviceState::internal_default_instance());
#else
    device_state_ = const_cast<::enterprise_management::DeviceState*>(&::enterprise_management::DeviceState::default_instance());
#endif
}

PolicyData::PolicyData(const PolicyData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyData)
}

void PolicyData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    timestamp_ = GOOGLE_LONGLONG(0);
    request_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    public_key_version_ = 0;
    username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    state_ = 0;
    valid_serial_number_missing_ = false;
    settings_entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    service_account_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    invalidation_source_ = 0;
    invalidation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    management_mode_ = 0;
    device_state_ = NULL;
    command_invalidation_source_ = 0;
    command_invalidation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    annotated_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    annotated_asset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    directory_api_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyData::~PolicyData()
{
    // @@protoc_insertion_point(destructor:enterprise_management.PolicyData)
    SharedDtor();
}

void PolicyData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    request_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    machine_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    settings_entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    service_account_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    invalidation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    command_invalidation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    annotated_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    annotated_asset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    directory_api_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete device_state_;
    }
}

void PolicyData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyData& PolicyData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

PolicyData* PolicyData::default_instance_ = NULL;

PolicyData* PolicyData::New(::google::protobuf::Arena* arena) const
{
    PolicyData* n = new PolicyData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PolicyData::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyData)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                \
    _Pragma("clang diagnostic push")                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(PolicyData, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<PolicyData*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        if (has_policy_type()) {
            policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        timestamp_ = GOOGLE_LONGLONG(0);
        if (has_request_token()) {
            request_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_policy_value()) {
            policy_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_machine_name()) {
            machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        public_key_version_ = 0;
        if (has_username()) {
            username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_device_id()) {
            device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        ZR_(valid_serial_number_missing_, invalidation_source_);
        state_ = 0;
        if (has_settings_entity_id()) {
            settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_service_account_identity()) {
            service_account_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_invalidation_name()) {
            invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_policy_token()) {
            policy_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        management_mode_ = 0;
    }
    if (_has_bits_[16 / 32] & 4128768u) {
        if (has_device_state()) {
            if (device_state_ != NULL)
                device_state_->::enterprise_management::DeviceState::Clear();
        }
        command_invalidation_source_ = 0;
        if (has_command_invalidation_name()) {
            command_invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_annotated_location()) {
            annotated_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_annotated_asset_id()) {
            annotated_asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_directory_api_id()) {
            directory_api_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    device_affiliation_ids_.Clear();
    user_affiliation_ids_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PolicyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPolicyData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.PolicyData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string policy_type = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_policy_type()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_timestamp;
            break;
        }

        // optional int64 timestamp = 2;
        case 2: {
            if (tag == 16) {
            parse_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &timestamp_)));
                set_has_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_request_token;
            break;
        }

        // optional string request_token = 3;
        case 3: {
            if (tag == 26) {
            parse_request_token:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_request_token()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_policy_value;
            break;
        }

        // optional bytes policy_value = 4;
        case 4: {
            if (tag == 34) {
            parse_policy_value:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_policy_value()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_machine_name;
            break;
        }

        // optional string machine_name = 5;
        case 5: {
            if (tag == 42) {
            parse_machine_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_machine_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(48))
                goto parse_public_key_version;
            break;
        }

        // optional int32 public_key_version = 6;
        case 6: {
            if (tag == 48) {
            parse_public_key_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &public_key_version_)));
                set_has_public_key_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_username;
            break;
        }

        // optional string username = 7;
        case 7: {
            if (tag == 58) {
            parse_username:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_username()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_device_id;
            break;
        }

        // optional string device_id = 8;
        case 8: {
            if (tag == 66) {
            parse_device_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_state;
            break;
        }

        // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
        case 9: {
            if (tag == 72) {
            parse_state:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::PolicyData_AssociationState_IsValid(value)) {
                    set_state(static_cast<::enterprise_management::PolicyData_AssociationState>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(72);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(80))
                goto parse_valid_serial_number_missing;
            break;
        }

        // optional bool valid_serial_number_missing = 10;
        case 10: {
            if (tag == 80) {
            parse_valid_serial_number_missing:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &valid_serial_number_missing_)));
                set_has_valid_serial_number_missing();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_settings_entity_id;
            break;
        }

        // optional string settings_entity_id = 11;
        case 11: {
            if (tag == 90) {
            parse_settings_entity_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_settings_entity_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_service_account_identity;
            break;
        }

        // optional string service_account_identity = 12;
        case 12: {
            if (tag == 98) {
            parse_service_account_identity:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_service_account_identity()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(104))
                goto parse_invalidation_source;
            break;
        }

        // optional int32 invalidation_source = 13;
        case 13: {
            if (tag == 104) {
            parse_invalidation_source:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &invalidation_source_)));
                set_has_invalidation_source();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(114))
                goto parse_invalidation_name;
            break;
        }

        // optional bytes invalidation_name = 14;
        case 14: {
            if (tag == 114) {
            parse_invalidation_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_invalidation_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_policy_token;
            break;
        }

        // optional string policy_token = 15;
        case 15: {
            if (tag == 122) {
            parse_policy_token:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_policy_token()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(128))
                goto parse_management_mode;
            break;
        }

        // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
        case 16: {
            if (tag == 128) {
            parse_management_mode:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::PolicyData_ManagementMode_IsValid(value)) {
                    set_management_mode(static_cast<::enterprise_management::PolicyData_ManagementMode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(128);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(138))
                goto parse_device_state;
            break;
        }

        // optional .enterprise_management.DeviceState device_state = 17;
        case 17: {
            if (tag == 138) {
            parse_device_state:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_state()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_command_invalidation_source;
            break;
        }

        // optional int32 command_invalidation_source = 18;
        case 18: {
            if (tag == 144) {
            parse_command_invalidation_source:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &command_invalidation_source_)));
                set_has_command_invalidation_source();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(154))
                goto parse_command_invalidation_name;
            break;
        }

        // optional bytes command_invalidation_name = 19;
        case 19: {
            if (tag == 154) {
            parse_command_invalidation_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_command_invalidation_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(162))
                goto parse_annotated_location;
            break;
        }

        // optional string annotated_location = 20;
        case 20: {
            if (tag == 162) {
            parse_annotated_location:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_annotated_location()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(170))
                goto parse_annotated_asset_id;
            break;
        }

        // optional string annotated_asset_id = 21;
        case 21: {
            if (tag == 170) {
            parse_annotated_asset_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_annotated_asset_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(178))
                goto parse_directory_api_id;
            break;
        }

        // optional string directory_api_id = 22;
        case 22: {
            if (tag == 178) {
            parse_directory_api_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_directory_api_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(186))
                goto parse_device_affiliation_ids;
            break;
        }

        // repeated string device_affiliation_ids = 23;
        case 23: {
            if (tag == 186) {
            parse_device_affiliation_ids:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_device_affiliation_ids()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(186))
                goto parse_device_affiliation_ids;
            if (input->ExpectTag(194))
                goto parse_user_affiliation_ids;
            break;
        }

        // repeated string user_affiliation_ids = 24;
        case 24: {
            if (tag == 194) {
            parse_user_affiliation_ids:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_user_affiliation_ids()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(194))
                goto parse_user_affiliation_ids;
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.PolicyData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyData)
    return false;
#undef DO_
}

void PolicyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyData)
    // optional string policy_type = 1;
    if (has_policy_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->policy_type(), output);
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
    }

    // optional string request_token = 3;
    if (has_request_token()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->request_token(), output);
    }

    // optional bytes policy_value = 4;
    if (has_policy_value()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            4, this->policy_value(), output);
    }

    // optional string machine_name = 5;
    if (has_machine_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->machine_name(), output);
    }

    // optional int32 public_key_version = 6;
    if (has_public_key_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->public_key_version(), output);
    }

    // optional string username = 7;
    if (has_username()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            7, this->username(), output);
    }

    // optional string device_id = 8;
    if (has_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->device_id(), output);
    }

    // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
    if (has_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            9, this->state(), output);
    }

    // optional bool valid_serial_number_missing = 10;
    if (has_valid_serial_number_missing()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->valid_serial_number_missing(), output);
    }

    // optional string settings_entity_id = 11;
    if (has_settings_entity_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            11, this->settings_entity_id(), output);
    }

    // optional string service_account_identity = 12;
    if (has_service_account_identity()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            12, this->service_account_identity(), output);
    }

    // optional int32 invalidation_source = 13;
    if (has_invalidation_source()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->invalidation_source(), output);
    }

    // optional bytes invalidation_name = 14;
    if (has_invalidation_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            14, this->invalidation_name(), output);
    }

    // optional string policy_token = 15;
    if (has_policy_token()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            15, this->policy_token(), output);
    }

    // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
    if (has_management_mode()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            16, this->management_mode(), output);
    }

    // optional .enterprise_management.DeviceState device_state = 17;
    if (has_device_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            17, *this->device_state_, output);
    }

    // optional int32 command_invalidation_source = 18;
    if (has_command_invalidation_source()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->command_invalidation_source(), output);
    }

    // optional bytes command_invalidation_name = 19;
    if (has_command_invalidation_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            19, this->command_invalidation_name(), output);
    }

    // optional string annotated_location = 20;
    if (has_annotated_location()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            20, this->annotated_location(), output);
    }

    // optional string annotated_asset_id = 21;
    if (has_annotated_asset_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            21, this->annotated_asset_id(), output);
    }

    // optional string directory_api_id = 22;
    if (has_directory_api_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            22, this->directory_api_id(), output);
    }

    // repeated string device_affiliation_ids = 23;
    for (int i = 0; i < this->device_affiliation_ids_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            23, this->device_affiliation_ids(i), output);
    }

    // repeated string user_affiliation_ids = 24;
    for (int i = 0; i < this->user_affiliation_ids_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            24, this->user_affiliation_ids(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyData)
}

int PolicyData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyData)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional string policy_type = 1;
        if (has_policy_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->policy_type());
        }

        // optional int64 timestamp = 2;
        if (has_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
        }

        // optional string request_token = 3;
        if (has_request_token()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->request_token());
        }

        // optional bytes policy_value = 4;
        if (has_policy_value()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->policy_value());
        }

        // optional string machine_name = 5;
        if (has_machine_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->machine_name());
        }

        // optional int32 public_key_version = 6;
        if (has_public_key_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->public_key_version());
        }

        // optional string username = 7;
        if (has_username()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->username());
        }

        // optional string device_id = 8;
        if (has_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_id());
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        // optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
        if (has_state()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
        }

        // optional bool valid_serial_number_missing = 10;
        if (has_valid_serial_number_missing()) {
            total_size += 1 + 1;
        }

        // optional string settings_entity_id = 11;
        if (has_settings_entity_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->settings_entity_id());
        }

        // optional string service_account_identity = 12;
        if (has_service_account_identity()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->service_account_identity());
        }

        // optional int32 invalidation_source = 13;
        if (has_invalidation_source()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->invalidation_source());
        }

        // optional bytes invalidation_name = 14;
        if (has_invalidation_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->invalidation_name());
        }

        // optional string policy_token = 15;
        if (has_policy_token()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->policy_token());
        }

        // optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
        if (has_management_mode()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->management_mode());
        }
    }
    if (_has_bits_[16 / 32] & 4128768u) {
        // optional .enterprise_management.DeviceState device_state = 17;
        if (has_device_state()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_state_);
        }

        // optional int32 command_invalidation_source = 18;
        if (has_command_invalidation_source()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->command_invalidation_source());
        }

        // optional bytes command_invalidation_name = 19;
        if (has_command_invalidation_name()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->command_invalidation_name());
        }

        // optional string annotated_location = 20;
        if (has_annotated_location()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->annotated_location());
        }

        // optional string annotated_asset_id = 21;
        if (has_annotated_asset_id()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->annotated_asset_id());
        }

        // optional string directory_api_id = 22;
        if (has_directory_api_id()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->directory_api_id());
        }
    }
    // repeated string device_affiliation_ids = 23;
    total_size += 2 * this->device_affiliation_ids_size();
    for (int i = 0; i < this->device_affiliation_ids_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->device_affiliation_ids(i));
    }

    // repeated string user_affiliation_ids = 24;
    total_size += 2 * this->user_affiliation_ids_size();
    for (int i = 0; i < this->user_affiliation_ids_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->user_affiliation_ids(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PolicyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PolicyData*>(&from));
}

void PolicyData::MergeFrom(const PolicyData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    device_affiliation_ids_.MergeFrom(from.device_affiliation_ids_);
    user_affiliation_ids_.MergeFrom(from.user_affiliation_ids_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_policy_type()) {
            set_has_policy_type();
            policy_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_type_);
        }
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
        if (from.has_request_token()) {
            set_has_request_token();
            request_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_token_);
        }
        if (from.has_policy_value()) {
            set_has_policy_value();
            policy_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_value_);
        }
        if (from.has_machine_name()) {
            set_has_machine_name();
            machine_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_name_);
        }
        if (from.has_public_key_version()) {
            set_public_key_version(from.public_key_version());
        }
        if (from.has_username()) {
            set_has_username();
            username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
        }
        if (from.has_device_id()) {
            set_has_device_id();
            device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_state()) {
            set_state(from.state());
        }
        if (from.has_valid_serial_number_missing()) {
            set_valid_serial_number_missing(from.valid_serial_number_missing());
        }
        if (from.has_settings_entity_id()) {
            set_has_settings_entity_id();
            settings_entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settings_entity_id_);
        }
        if (from.has_service_account_identity()) {
            set_has_service_account_identity();
            service_account_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_account_identity_);
        }
        if (from.has_invalidation_source()) {
            set_invalidation_source(from.invalidation_source());
        }
        if (from.has_invalidation_name()) {
            set_has_invalidation_name();
            invalidation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invalidation_name_);
        }
        if (from.has_policy_token()) {
            set_has_policy_token();
            policy_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_token_);
        }
        if (from.has_management_mode()) {
            set_management_mode(from.management_mode());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_device_state()) {
            mutable_device_state()->::enterprise_management::DeviceState::MergeFrom(from.device_state());
        }
        if (from.has_command_invalidation_source()) {
            set_command_invalidation_source(from.command_invalidation_source());
        }
        if (from.has_command_invalidation_name()) {
            set_has_command_invalidation_name();
            command_invalidation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_invalidation_name_);
        }
        if (from.has_annotated_location()) {
            set_has_annotated_location();
            annotated_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotated_location_);
        }
        if (from.has_annotated_asset_id()) {
            set_has_annotated_asset_id();
            annotated_asset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotated_asset_id_);
        }
        if (from.has_directory_api_id()) {
            set_has_directory_api_id();
            directory_api_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_api_id_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PolicyData::CopyFrom(const PolicyData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PolicyData::IsInitialized() const
{

    return true;
}

void PolicyData::Swap(PolicyData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PolicyData::InternalSwap(PolicyData* other)
{
    policy_type_.Swap(&other->policy_type_);
    std::swap(timestamp_, other->timestamp_);
    request_token_.Swap(&other->request_token_);
    policy_value_.Swap(&other->policy_value_);
    machine_name_.Swap(&other->machine_name_);
    std::swap(public_key_version_, other->public_key_version_);
    username_.Swap(&other->username_);
    device_id_.Swap(&other->device_id_);
    std::swap(state_, other->state_);
    std::swap(valid_serial_number_missing_, other->valid_serial_number_missing_);
    settings_entity_id_.Swap(&other->settings_entity_id_);
    service_account_identity_.Swap(&other->service_account_identity_);
    std::swap(invalidation_source_, other->invalidation_source_);
    invalidation_name_.Swap(&other->invalidation_name_);
    policy_token_.Swap(&other->policy_token_);
    std::swap(management_mode_, other->management_mode_);
    std::swap(device_state_, other->device_state_);
    std::swap(command_invalidation_source_, other->command_invalidation_source_);
    command_invalidation_name_.Swap(&other->command_invalidation_name_);
    annotated_location_.Swap(&other->annotated_location_);
    annotated_asset_id_.Swap(&other->annotated_asset_id_);
    directory_api_id_.Swap(&other->directory_api_id_);
    device_affiliation_ids_.UnsafeArenaSwap(&other->device_affiliation_ids_);
    user_affiliation_ids_.UnsafeArenaSwap(&other->user_affiliation_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyData::GetTypeName() const
{
    return "enterprise_management.PolicyData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyData

// optional string policy_type = 1;
bool PolicyData::has_policy_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyData::set_has_policy_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void PolicyData::clear_has_policy_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PolicyData::clear_policy_type()
{
    policy_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_policy_type();
}
const ::std::string& PolicyData::policy_type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_type)
    return policy_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_policy_type(const ::std::string& value)
{
    set_has_policy_type();
    policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_type)
}
void PolicyData::set_policy_type(const char* value)
{
    set_has_policy_type();
    policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_type)
}
void PolicyData::set_policy_type(const char* value, size_t size)
{
    set_has_policy_type();
    policy_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_type)
}
::std::string* PolicyData::mutable_policy_type()
{
    set_has_policy_type();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_type)
    return policy_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_type()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_type)
    clear_has_policy_type();
    return policy_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_type(::std::string* policy_type)
{
    if (policy_type != NULL) {
        set_has_policy_type();
    } else {
        clear_has_policy_type();
    }
    policy_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_type);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_type)
}

// optional int64 timestamp = 2;
bool PolicyData::has_timestamp() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyData::set_has_timestamp()
{
    _has_bits_[0] |= 0x00000002u;
}
void PolicyData::clear_has_timestamp()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PolicyData::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_timestamp();
}
::google::protobuf::int64 PolicyData::timestamp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.timestamp)
    return timestamp_;
}
void PolicyData::set_timestamp(::google::protobuf::int64 value)
{
    set_has_timestamp();
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.timestamp)
}

// optional string request_token = 3;
bool PolicyData::has_request_token() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyData::set_has_request_token()
{
    _has_bits_[0] |= 0x00000004u;
}
void PolicyData::clear_has_request_token()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PolicyData::clear_request_token()
{
    request_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_request_token();
}
const ::std::string& PolicyData::request_token() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.request_token)
    return request_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_request_token(const ::std::string& value)
{
    set_has_request_token();
    request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.request_token)
}
void PolicyData::set_request_token(const char* value)
{
    set_has_request_token();
    request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.request_token)
}
void PolicyData::set_request_token(const char* value, size_t size)
{
    set_has_request_token();
    request_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.request_token)
}
::std::string* PolicyData::mutable_request_token()
{
    set_has_request_token();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.request_token)
    return request_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_request_token()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.request_token)
    clear_has_request_token();
    return request_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_request_token(::std::string* request_token)
{
    if (request_token != NULL) {
        set_has_request_token();
    } else {
        clear_has_request_token();
    }
    request_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_token);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.request_token)
}

// optional bytes policy_value = 4;
bool PolicyData::has_policy_value() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyData::set_has_policy_value()
{
    _has_bits_[0] |= 0x00000008u;
}
void PolicyData::clear_has_policy_value()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PolicyData::clear_policy_value()
{
    policy_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_policy_value();
}
const ::std::string& PolicyData::policy_value() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_value)
    return policy_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_policy_value(const ::std::string& value)
{
    set_has_policy_value();
    policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_value)
}
void PolicyData::set_policy_value(const char* value)
{
    set_has_policy_value();
    policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_value)
}
void PolicyData::set_policy_value(const void* value, size_t size)
{
    set_has_policy_value();
    policy_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_value)
}
::std::string* PolicyData::mutable_policy_value()
{
    set_has_policy_value();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_value)
    return policy_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_value()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_value)
    clear_has_policy_value();
    return policy_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_value(::std::string* policy_value)
{
    if (policy_value != NULL) {
        set_has_policy_value();
    } else {
        clear_has_policy_value();
    }
    policy_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_value);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_value)
}

// optional string machine_name = 5;
bool PolicyData::has_machine_name() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyData::set_has_machine_name()
{
    _has_bits_[0] |= 0x00000010u;
}
void PolicyData::clear_has_machine_name()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PolicyData::clear_machine_name()
{
    machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_machine_name();
}
const ::std::string& PolicyData::machine_name() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.machine_name)
    return machine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_machine_name(const ::std::string& value)
{
    set_has_machine_name();
    machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.machine_name)
}
void PolicyData::set_machine_name(const char* value)
{
    set_has_machine_name();
    machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.machine_name)
}
void PolicyData::set_machine_name(const char* value, size_t size)
{
    set_has_machine_name();
    machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.machine_name)
}
::std::string* PolicyData::mutable_machine_name()
{
    set_has_machine_name();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.machine_name)
    return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_machine_name()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.machine_name)
    clear_has_machine_name();
    return machine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_machine_name(::std::string* machine_name)
{
    if (machine_name != NULL) {
        set_has_machine_name();
    } else {
        clear_has_machine_name();
    }
    machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.machine_name)
}

// optional int32 public_key_version = 6;
bool PolicyData::has_public_key_version() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolicyData::set_has_public_key_version()
{
    _has_bits_[0] |= 0x00000020u;
}
void PolicyData::clear_has_public_key_version()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PolicyData::clear_public_key_version()
{
    public_key_version_ = 0;
    clear_has_public_key_version();
}
::google::protobuf::int32 PolicyData::public_key_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.public_key_version)
    return public_key_version_;
}
void PolicyData::set_public_key_version(::google::protobuf::int32 value)
{
    set_has_public_key_version();
    public_key_version_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.public_key_version)
}

// optional string username = 7;
bool PolicyData::has_username() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolicyData::set_has_username()
{
    _has_bits_[0] |= 0x00000040u;
}
void PolicyData::clear_has_username()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PolicyData::clear_username()
{
    username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_username();
}
const ::std::string& PolicyData::username() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.username)
    return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_username(const ::std::string& value)
{
    set_has_username();
    username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.username)
}
void PolicyData::set_username(const char* value)
{
    set_has_username();
    username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.username)
}
void PolicyData::set_username(const char* value, size_t size)
{
    set_has_username();
    username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.username)
}
::std::string* PolicyData::mutable_username()
{
    set_has_username();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.username)
    return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_username()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.username)
    clear_has_username();
    return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_username(::std::string* username)
{
    if (username != NULL) {
        set_has_username();
    } else {
        clear_has_username();
    }
    username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.username)
}

// optional string device_id = 8;
bool PolicyData::has_device_id() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolicyData::set_has_device_id()
{
    _has_bits_[0] |= 0x00000080u;
}
void PolicyData::clear_has_device_id()
{
    _has_bits_[0] &= ~0x00000080u;
}
void PolicyData::clear_device_id()
{
    device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_id();
}
const ::std::string& PolicyData::device_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_id)
    return device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_device_id(const ::std::string& value)
{
    set_has_device_id();
    device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_id)
}
void PolicyData::set_device_id(const char* value)
{
    set_has_device_id();
    device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.device_id)
}
void PolicyData::set_device_id(const char* value, size_t size)
{
    set_has_device_id();
    device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.device_id)
}
::std::string* PolicyData::mutable_device_id()
{
    set_has_device_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_id)
    return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_device_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.device_id)
    clear_has_device_id();
    return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_device_id(::std::string* device_id)
{
    if (device_id != NULL) {
        set_has_device_id();
    } else {
        clear_has_device_id();
    }
    device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.device_id)
}

// optional .enterprise_management.PolicyData.AssociationState state = 9 [default = ACTIVE];
bool PolicyData::has_state() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolicyData::set_has_state()
{
    _has_bits_[0] |= 0x00000100u;
}
void PolicyData::clear_has_state()
{
    _has_bits_[0] &= ~0x00000100u;
}
void PolicyData::clear_state()
{
    state_ = 0;
    clear_has_state();
}
::enterprise_management::PolicyData_AssociationState PolicyData::state() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.state)
    return static_cast<::enterprise_management::PolicyData_AssociationState>(state_);
}
void PolicyData::set_state(::enterprise_management::PolicyData_AssociationState value)
{
    assert(::enterprise_management::PolicyData_AssociationState_IsValid(value));
    set_has_state();
    state_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.state)
}

// optional bool valid_serial_number_missing = 10;
bool PolicyData::has_valid_serial_number_missing() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void PolicyData::set_has_valid_serial_number_missing()
{
    _has_bits_[0] |= 0x00000200u;
}
void PolicyData::clear_has_valid_serial_number_missing()
{
    _has_bits_[0] &= ~0x00000200u;
}
void PolicyData::clear_valid_serial_number_missing()
{
    valid_serial_number_missing_ = false;
    clear_has_valid_serial_number_missing();
}
bool PolicyData::valid_serial_number_missing() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.valid_serial_number_missing)
    return valid_serial_number_missing_;
}
void PolicyData::set_valid_serial_number_missing(bool value)
{
    set_has_valid_serial_number_missing();
    valid_serial_number_missing_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.valid_serial_number_missing)
}

// optional string settings_entity_id = 11;
bool PolicyData::has_settings_entity_id() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void PolicyData::set_has_settings_entity_id()
{
    _has_bits_[0] |= 0x00000400u;
}
void PolicyData::clear_has_settings_entity_id()
{
    _has_bits_[0] &= ~0x00000400u;
}
void PolicyData::clear_settings_entity_id()
{
    settings_entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_settings_entity_id();
}
const ::std::string& PolicyData::settings_entity_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.settings_entity_id)
    return settings_entity_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_settings_entity_id(const ::std::string& value)
{
    set_has_settings_entity_id();
    settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.settings_entity_id)
}
void PolicyData::set_settings_entity_id(const char* value)
{
    set_has_settings_entity_id();
    settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.settings_entity_id)
}
void PolicyData::set_settings_entity_id(const char* value, size_t size)
{
    set_has_settings_entity_id();
    settings_entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.settings_entity_id)
}
::std::string* PolicyData::mutable_settings_entity_id()
{
    set_has_settings_entity_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.settings_entity_id)
    return settings_entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_settings_entity_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.settings_entity_id)
    clear_has_settings_entity_id();
    return settings_entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_settings_entity_id(::std::string* settings_entity_id)
{
    if (settings_entity_id != NULL) {
        set_has_settings_entity_id();
    } else {
        clear_has_settings_entity_id();
    }
    settings_entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings_entity_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.settings_entity_id)
}

// optional string service_account_identity = 12;
bool PolicyData::has_service_account_identity() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void PolicyData::set_has_service_account_identity()
{
    _has_bits_[0] |= 0x00000800u;
}
void PolicyData::clear_has_service_account_identity()
{
    _has_bits_[0] &= ~0x00000800u;
}
void PolicyData::clear_service_account_identity()
{
    service_account_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_service_account_identity();
}
const ::std::string& PolicyData::service_account_identity() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.service_account_identity)
    return service_account_identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_service_account_identity(const ::std::string& value)
{
    set_has_service_account_identity();
    service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.service_account_identity)
}
void PolicyData::set_service_account_identity(const char* value)
{
    set_has_service_account_identity();
    service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.service_account_identity)
}
void PolicyData::set_service_account_identity(const char* value, size_t size)
{
    set_has_service_account_identity();
    service_account_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.service_account_identity)
}
::std::string* PolicyData::mutable_service_account_identity()
{
    set_has_service_account_identity();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.service_account_identity)
    return service_account_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_service_account_identity()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.service_account_identity)
    clear_has_service_account_identity();
    return service_account_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_service_account_identity(::std::string* service_account_identity)
{
    if (service_account_identity != NULL) {
        set_has_service_account_identity();
    } else {
        clear_has_service_account_identity();
    }
    service_account_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account_identity);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.service_account_identity)
}

// optional int32 invalidation_source = 13;
bool PolicyData::has_invalidation_source() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void PolicyData::set_has_invalidation_source()
{
    _has_bits_[0] |= 0x00001000u;
}
void PolicyData::clear_has_invalidation_source()
{
    _has_bits_[0] &= ~0x00001000u;
}
void PolicyData::clear_invalidation_source()
{
    invalidation_source_ = 0;
    clear_has_invalidation_source();
}
::google::protobuf::int32 PolicyData::invalidation_source() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.invalidation_source)
    return invalidation_source_;
}
void PolicyData::set_invalidation_source(::google::protobuf::int32 value)
{
    set_has_invalidation_source();
    invalidation_source_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.invalidation_source)
}

// optional bytes invalidation_name = 14;
bool PolicyData::has_invalidation_name() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void PolicyData::set_has_invalidation_name()
{
    _has_bits_[0] |= 0x00002000u;
}
void PolicyData::clear_has_invalidation_name()
{
    _has_bits_[0] &= ~0x00002000u;
}
void PolicyData::clear_invalidation_name()
{
    invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_invalidation_name();
}
const ::std::string& PolicyData::invalidation_name() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.invalidation_name)
    return invalidation_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_invalidation_name(const ::std::string& value)
{
    set_has_invalidation_name();
    invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.invalidation_name)
}
void PolicyData::set_invalidation_name(const char* value)
{
    set_has_invalidation_name();
    invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.invalidation_name)
}
void PolicyData::set_invalidation_name(const void* value, size_t size)
{
    set_has_invalidation_name();
    invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.invalidation_name)
}
::std::string* PolicyData::mutable_invalidation_name()
{
    set_has_invalidation_name();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.invalidation_name)
    return invalidation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_invalidation_name()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.invalidation_name)
    clear_has_invalidation_name();
    return invalidation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_invalidation_name(::std::string* invalidation_name)
{
    if (invalidation_name != NULL) {
        set_has_invalidation_name();
    } else {
        clear_has_invalidation_name();
    }
    invalidation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invalidation_name);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.invalidation_name)
}

// optional string policy_token = 15;
bool PolicyData::has_policy_token() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void PolicyData::set_has_policy_token()
{
    _has_bits_[0] |= 0x00004000u;
}
void PolicyData::clear_has_policy_token()
{
    _has_bits_[0] &= ~0x00004000u;
}
void PolicyData::clear_policy_token()
{
    policy_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_policy_token();
}
const ::std::string& PolicyData::policy_token() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.policy_token)
    return policy_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_policy_token(const ::std::string& value)
{
    set_has_policy_token();
    policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.policy_token)
}
void PolicyData::set_policy_token(const char* value)
{
    set_has_policy_token();
    policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.policy_token)
}
void PolicyData::set_policy_token(const char* value, size_t size)
{
    set_has_policy_token();
    policy_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.policy_token)
}
::std::string* PolicyData::mutable_policy_token()
{
    set_has_policy_token();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.policy_token)
    return policy_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_policy_token()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.policy_token)
    clear_has_policy_token();
    return policy_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_policy_token(::std::string* policy_token)
{
    if (policy_token != NULL) {
        set_has_policy_token();
    } else {
        clear_has_policy_token();
    }
    policy_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_token);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.policy_token)
}

// optional .enterprise_management.PolicyData.ManagementMode management_mode = 16;
bool PolicyData::has_management_mode() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void PolicyData::set_has_management_mode()
{
    _has_bits_[0] |= 0x00008000u;
}
void PolicyData::clear_has_management_mode()
{
    _has_bits_[0] &= ~0x00008000u;
}
void PolicyData::clear_management_mode()
{
    management_mode_ = 0;
    clear_has_management_mode();
}
::enterprise_management::PolicyData_ManagementMode PolicyData::management_mode() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.management_mode)
    return static_cast<::enterprise_management::PolicyData_ManagementMode>(management_mode_);
}
void PolicyData::set_management_mode(::enterprise_management::PolicyData_ManagementMode value)
{
    assert(::enterprise_management::PolicyData_ManagementMode_IsValid(value));
    set_has_management_mode();
    management_mode_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.management_mode)
}

// optional .enterprise_management.DeviceState device_state = 17;
bool PolicyData::has_device_state() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void PolicyData::set_has_device_state()
{
    _has_bits_[0] |= 0x00010000u;
}
void PolicyData::clear_has_device_state()
{
    _has_bits_[0] &= ~0x00010000u;
}
void PolicyData::clear_device_state()
{
    if (device_state_ != NULL)
        device_state_->::enterprise_management::DeviceState::Clear();
    clear_has_device_state();
}
const ::enterprise_management::DeviceState& PolicyData::device_state() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_state)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_state_ != NULL ? *device_state_ : *default_instance().device_state_;
#else
    return device_state_ != NULL ? *device_state_ : *default_instance_->device_state_;
#endif
}
::enterprise_management::DeviceState* PolicyData::mutable_device_state()
{
    set_has_device_state();
    if (device_state_ == NULL) {
        device_state_ = new ::enterprise_management::DeviceState;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_state)
    return device_state_;
}
::enterprise_management::DeviceState* PolicyData::release_device_state()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.device_state)
    clear_has_device_state();
    ::enterprise_management::DeviceState* temp = device_state_;
    device_state_ = NULL;
    return temp;
}
void PolicyData::set_allocated_device_state(::enterprise_management::DeviceState* device_state)
{
    delete device_state_;
    device_state_ = device_state;
    if (device_state) {
        set_has_device_state();
    } else {
        clear_has_device_state();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.device_state)
}

// optional int32 command_invalidation_source = 18;
bool PolicyData::has_command_invalidation_source() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void PolicyData::set_has_command_invalidation_source()
{
    _has_bits_[0] |= 0x00020000u;
}
void PolicyData::clear_has_command_invalidation_source()
{
    _has_bits_[0] &= ~0x00020000u;
}
void PolicyData::clear_command_invalidation_source()
{
    command_invalidation_source_ = 0;
    clear_has_command_invalidation_source();
}
::google::protobuf::int32 PolicyData::command_invalidation_source() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_source)
    return command_invalidation_source_;
}
void PolicyData::set_command_invalidation_source(::google::protobuf::int32 value)
{
    set_has_command_invalidation_source();
    command_invalidation_source_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_source)
}

// optional bytes command_invalidation_name = 19;
bool PolicyData::has_command_invalidation_name() const
{
    return (_has_bits_[0] & 0x00040000u) != 0;
}
void PolicyData::set_has_command_invalidation_name()
{
    _has_bits_[0] |= 0x00040000u;
}
void PolicyData::clear_has_command_invalidation_name()
{
    _has_bits_[0] &= ~0x00040000u;
}
void PolicyData::clear_command_invalidation_name()
{
    command_invalidation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_command_invalidation_name();
}
const ::std::string& PolicyData::command_invalidation_name() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.command_invalidation_name)
    return command_invalidation_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_command_invalidation_name(const ::std::string& value)
{
    set_has_command_invalidation_name();
    command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.command_invalidation_name)
}
void PolicyData::set_command_invalidation_name(const char* value)
{
    set_has_command_invalidation_name();
    command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.command_invalidation_name)
}
void PolicyData::set_command_invalidation_name(const void* value, size_t size)
{
    set_has_command_invalidation_name();
    command_invalidation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.command_invalidation_name)
}
::std::string* PolicyData::mutable_command_invalidation_name()
{
    set_has_command_invalidation_name();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.command_invalidation_name)
    return command_invalidation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_command_invalidation_name()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.command_invalidation_name)
    clear_has_command_invalidation_name();
    return command_invalidation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_command_invalidation_name(::std::string* command_invalidation_name)
{
    if (command_invalidation_name != NULL) {
        set_has_command_invalidation_name();
    } else {
        clear_has_command_invalidation_name();
    }
    command_invalidation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_invalidation_name);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.command_invalidation_name)
}

// optional string annotated_location = 20;
bool PolicyData::has_annotated_location() const
{
    return (_has_bits_[0] & 0x00080000u) != 0;
}
void PolicyData::set_has_annotated_location()
{
    _has_bits_[0] |= 0x00080000u;
}
void PolicyData::clear_has_annotated_location()
{
    _has_bits_[0] &= ~0x00080000u;
}
void PolicyData::clear_annotated_location()
{
    annotated_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_annotated_location();
}
const ::std::string& PolicyData::annotated_location() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.annotated_location)
    return annotated_location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_annotated_location(const ::std::string& value)
{
    set_has_annotated_location();
    annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.annotated_location)
}
void PolicyData::set_annotated_location(const char* value)
{
    set_has_annotated_location();
    annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.annotated_location)
}
void PolicyData::set_annotated_location(const char* value, size_t size)
{
    set_has_annotated_location();
    annotated_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.annotated_location)
}
::std::string* PolicyData::mutable_annotated_location()
{
    set_has_annotated_location();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.annotated_location)
    return annotated_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_annotated_location()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.annotated_location)
    clear_has_annotated_location();
    return annotated_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_annotated_location(::std::string* annotated_location)
{
    if (annotated_location != NULL) {
        set_has_annotated_location();
    } else {
        clear_has_annotated_location();
    }
    annotated_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotated_location);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.annotated_location)
}

// optional string annotated_asset_id = 21;
bool PolicyData::has_annotated_asset_id() const
{
    return (_has_bits_[0] & 0x00100000u) != 0;
}
void PolicyData::set_has_annotated_asset_id()
{
    _has_bits_[0] |= 0x00100000u;
}
void PolicyData::clear_has_annotated_asset_id()
{
    _has_bits_[0] &= ~0x00100000u;
}
void PolicyData::clear_annotated_asset_id()
{
    annotated_asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_annotated_asset_id();
}
const ::std::string& PolicyData::annotated_asset_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.annotated_asset_id)
    return annotated_asset_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_annotated_asset_id(const ::std::string& value)
{
    set_has_annotated_asset_id();
    annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.annotated_asset_id)
}
void PolicyData::set_annotated_asset_id(const char* value)
{
    set_has_annotated_asset_id();
    annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.annotated_asset_id)
}
void PolicyData::set_annotated_asset_id(const char* value, size_t size)
{
    set_has_annotated_asset_id();
    annotated_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.annotated_asset_id)
}
::std::string* PolicyData::mutable_annotated_asset_id()
{
    set_has_annotated_asset_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.annotated_asset_id)
    return annotated_asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_annotated_asset_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.annotated_asset_id)
    clear_has_annotated_asset_id();
    return annotated_asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_annotated_asset_id(::std::string* annotated_asset_id)
{
    if (annotated_asset_id != NULL) {
        set_has_annotated_asset_id();
    } else {
        clear_has_annotated_asset_id();
    }
    annotated_asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotated_asset_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.annotated_asset_id)
}

// optional string directory_api_id = 22;
bool PolicyData::has_directory_api_id() const
{
    return (_has_bits_[0] & 0x00200000u) != 0;
}
void PolicyData::set_has_directory_api_id()
{
    _has_bits_[0] |= 0x00200000u;
}
void PolicyData::clear_has_directory_api_id()
{
    _has_bits_[0] &= ~0x00200000u;
}
void PolicyData::clear_directory_api_id()
{
    directory_api_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_directory_api_id();
}
const ::std::string& PolicyData::directory_api_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.directory_api_id)
    return directory_api_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_directory_api_id(const ::std::string& value)
{
    set_has_directory_api_id();
    directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.directory_api_id)
}
void PolicyData::set_directory_api_id(const char* value)
{
    set_has_directory_api_id();
    directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.directory_api_id)
}
void PolicyData::set_directory_api_id(const char* value, size_t size)
{
    set_has_directory_api_id();
    directory_api_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.directory_api_id)
}
::std::string* PolicyData::mutable_directory_api_id()
{
    set_has_directory_api_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.directory_api_id)
    return directory_api_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyData::release_directory_api_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyData.directory_api_id)
    clear_has_directory_api_id();
    return directory_api_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyData::set_allocated_directory_api_id(::std::string* directory_api_id)
{
    if (directory_api_id != NULL) {
        set_has_directory_api_id();
    } else {
        clear_has_directory_api_id();
    }
    directory_api_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory_api_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyData.directory_api_id)
}

// repeated string device_affiliation_ids = 23;
int PolicyData::device_affiliation_ids_size() const
{
    return device_affiliation_ids_.size();
}
void PolicyData::clear_device_affiliation_ids()
{
    device_affiliation_ids_.Clear();
}
const ::std::string& PolicyData::device_affiliation_ids(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.device_affiliation_ids)
    return device_affiliation_ids_.Get(index);
}
::std::string* PolicyData::mutable_device_affiliation_ids(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.device_affiliation_ids)
    return device_affiliation_ids_.Mutable(index);
}
void PolicyData::set_device_affiliation_ids(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.device_affiliation_ids)
    device_affiliation_ids_.Mutable(index)->assign(value);
}
void PolicyData::set_device_affiliation_ids(int index, const char* value)
{
    device_affiliation_ids_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.device_affiliation_ids)
}
void PolicyData::set_device_affiliation_ids(int index, const char* value, size_t size)
{
    device_affiliation_ids_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.device_affiliation_ids)
}
::std::string* PolicyData::add_device_affiliation_ids()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.PolicyData.device_affiliation_ids)
    return device_affiliation_ids_.Add();
}
void PolicyData::add_device_affiliation_ids(const ::std::string& value)
{
    device_affiliation_ids_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.PolicyData.device_affiliation_ids)
}
void PolicyData::add_device_affiliation_ids(const char* value)
{
    device_affiliation_ids_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.PolicyData.device_affiliation_ids)
}
void PolicyData::add_device_affiliation_ids(const char* value, size_t size)
{
    device_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.PolicyData.device_affiliation_ids)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
PolicyData::device_affiliation_ids() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.PolicyData.device_affiliation_ids)
    return device_affiliation_ids_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
PolicyData::mutable_device_affiliation_ids()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyData.device_affiliation_ids)
    return &device_affiliation_ids_;
}

// repeated string user_affiliation_ids = 24;
int PolicyData::user_affiliation_ids_size() const
{
    return user_affiliation_ids_.size();
}
void PolicyData::clear_user_affiliation_ids()
{
    user_affiliation_ids_.Clear();
}
const ::std::string& PolicyData::user_affiliation_ids(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyData.user_affiliation_ids)
    return user_affiliation_ids_.Get(index);
}
::std::string* PolicyData::mutable_user_affiliation_ids(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyData.user_affiliation_ids)
    return user_affiliation_ids_.Mutable(index);
}
void PolicyData::set_user_affiliation_ids(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyData.user_affiliation_ids)
    user_affiliation_ids_.Mutable(index)->assign(value);
}
void PolicyData::set_user_affiliation_ids(int index, const char* value)
{
    user_affiliation_ids_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyData.user_affiliation_ids)
}
void PolicyData::set_user_affiliation_ids(int index, const char* value, size_t size)
{
    user_affiliation_ids_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyData.user_affiliation_ids)
}
::std::string* PolicyData::add_user_affiliation_ids()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.PolicyData.user_affiliation_ids)
    return user_affiliation_ids_.Add();
}
void PolicyData::add_user_affiliation_ids(const ::std::string& value)
{
    user_affiliation_ids_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.PolicyData.user_affiliation_ids)
}
void PolicyData::add_user_affiliation_ids(const char* value)
{
    user_affiliation_ids_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.PolicyData.user_affiliation_ids)
}
void PolicyData::add_user_affiliation_ids(const char* value, size_t size)
{
    user_affiliation_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.PolicyData.user_affiliation_ids)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
PolicyData::user_affiliation_ids() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.PolicyData.user_affiliation_ids)
    return user_affiliation_ids_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
PolicyData::mutable_user_affiliation_ids()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.PolicyData.user_affiliation_ids)
    return &user_affiliation_ids_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPolicyFetchResponse(
    PolicyFetchResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolicyFetchResponse::kErrorCodeFieldNumber;
const int PolicyFetchResponse::kErrorMessageFieldNumber;
const int PolicyFetchResponse::kPolicyDataFieldNumber;
const int PolicyFetchResponse::kPolicyDataSignatureFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyFieldNumber;
const int PolicyFetchResponse::kNewPublicKeySignatureFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyVerificationSignatureDeprecatedFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyVerificationDataFieldNumber;
const int PolicyFetchResponse::kNewPublicKeyVerificationDataSignatureFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PolicyFetchResponse::PolicyFetchResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.PolicyFetchResponse)
}

void PolicyFetchResponse::InitAsDefaultInstance()
{
}

PolicyFetchResponse::PolicyFetchResponse(const PolicyFetchResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyFetchResponse)
}

void PolicyFetchResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_code_ = 0;
    error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_data_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_verification_signature_deprecated_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_verification_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_verification_data_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyFetchResponse::~PolicyFetchResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.PolicyFetchResponse)
    SharedDtor();
}

void PolicyFetchResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    policy_data_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_verification_signature_deprecated_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_verification_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_verification_data_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PolicyFetchResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolicyFetchResponse& PolicyFetchResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

PolicyFetchResponse* PolicyFetchResponse::default_instance_ = NULL;

PolicyFetchResponse* PolicyFetchResponse::New(::google::protobuf::Arena* arena) const
{
    PolicyFetchResponse* n = new PolicyFetchResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PolicyFetchResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyFetchResponse)
    if (_has_bits_[0 / 32] & 255u) {
        error_code_ = 0;
        if (has_error_message()) {
            error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_policy_data()) {
            policy_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_policy_data_signature()) {
            policy_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_new_public_key()) {
            new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_new_public_key_signature()) {
            new_public_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_new_public_key_verification_signature_deprecated()) {
            new_public_key_verification_signature_deprecated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_new_public_key_verification_data()) {
            new_public_key_verification_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (has_new_public_key_verification_data_signature()) {
        new_public_key_verification_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PolicyFetchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPolicyFetchResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.PolicyFetchResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 error_code = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &error_code_)));
                set_has_error_code();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_error_message;
            break;
        }

        // optional string error_message = 2;
        case 2: {
            if (tag == 18) {
            parse_error_message:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_error_message()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_policy_data;
            break;
        }

        // optional bytes policy_data = 3;
        case 3: {
            if (tag == 26) {
            parse_policy_data:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_policy_data()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_policy_data_signature;
            break;
        }

        // optional bytes policy_data_signature = 4;
        case 4: {
            if (tag == 34) {
            parse_policy_data_signature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_policy_data_signature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_new_public_key;
            break;
        }

        // optional bytes new_public_key = 5;
        case 5: {
            if (tag == 42) {
            parse_new_public_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_new_public_key_signature;
            break;
        }

        // optional bytes new_public_key_signature = 6;
        case 6: {
            if (tag == 50) {
            parse_new_public_key_signature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key_signature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_new_public_key_verification_signature_deprecated;
            break;
        }

        // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
        case 7: {
            if (tag == 58) {
            parse_new_public_key_verification_signature_deprecated:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key_verification_signature_deprecated()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_new_public_key_verification_data;
            break;
        }

        // optional bytes new_public_key_verification_data = 8;
        case 8: {
            if (tag == 66) {
            parse_new_public_key_verification_data:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key_verification_data()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_new_public_key_verification_data_signature;
            break;
        }

        // optional bytes new_public_key_verification_data_signature = 9;
        case 9: {
            if (tag == 74) {
            parse_new_public_key_verification_data_signature:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key_verification_data_signature()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.PolicyFetchResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.PolicyFetchResponse)
    return false;
#undef DO_
}

void PolicyFetchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.PolicyFetchResponse)
    // optional int32 error_code = 1;
    if (has_error_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
    }

    // optional string error_message = 2;
    if (has_error_message()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->error_message(), output);
    }

    // optional bytes policy_data = 3;
    if (has_policy_data()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            3, this->policy_data(), output);
    }

    // optional bytes policy_data_signature = 4;
    if (has_policy_data_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            4, this->policy_data_signature(), output);
    }

    // optional bytes new_public_key = 5;
    if (has_new_public_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            5, this->new_public_key(), output);
    }

    // optional bytes new_public_key_signature = 6;
    if (has_new_public_key_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            6, this->new_public_key_signature(), output);
    }

    // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
    if (has_new_public_key_verification_signature_deprecated()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            7, this->new_public_key_verification_signature_deprecated(), output);
    }

    // optional bytes new_public_key_verification_data = 8;
    if (has_new_public_key_verification_data()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            8, this->new_public_key_verification_data(), output);
    }

    // optional bytes new_public_key_verification_data_signature = 9;
    if (has_new_public_key_verification_data_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            9, this->new_public_key_verification_data_signature(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.PolicyFetchResponse)
}

int PolicyFetchResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyFetchResponse)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional int32 error_code = 1;
        if (has_error_code()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->error_code());
        }

        // optional string error_message = 2;
        if (has_error_message()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->error_message());
        }

        // optional bytes policy_data = 3;
        if (has_policy_data()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->policy_data());
        }

        // optional bytes policy_data_signature = 4;
        if (has_policy_data_signature()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->policy_data_signature());
        }

        // optional bytes new_public_key = 5;
        if (has_new_public_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key());
        }

        // optional bytes new_public_key_signature = 6;
        if (has_new_public_key_signature()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key_signature());
        }

        // optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
        if (has_new_public_key_verification_signature_deprecated()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key_verification_signature_deprecated());
        }

        // optional bytes new_public_key_verification_data = 8;
        if (has_new_public_key_verification_data()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key_verification_data());
        }
    }
    // optional bytes new_public_key_verification_data_signature = 9;
    if (has_new_public_key_verification_data_signature()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key_verification_data_signature());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PolicyFetchResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PolicyFetchResponse*>(&from));
}

void PolicyFetchResponse::MergeFrom(const PolicyFetchResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyFetchResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_error_code()) {
            set_error_code(from.error_code());
        }
        if (from.has_error_message()) {
            set_has_error_message();
            error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
        }
        if (from.has_policy_data()) {
            set_has_policy_data();
            policy_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_);
        }
        if (from.has_policy_data_signature()) {
            set_has_policy_data_signature();
            policy_data_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_data_signature_);
        }
        if (from.has_new_public_key()) {
            set_has_new_public_key();
            new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
        }
        if (from.has_new_public_key_signature()) {
            set_has_new_public_key_signature();
            new_public_key_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_signature_);
        }
        if (from.has_new_public_key_verification_signature_deprecated()) {
            set_has_new_public_key_verification_signature_deprecated();
            new_public_key_verification_signature_deprecated_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_signature_deprecated_);
        }
        if (from.has_new_public_key_verification_data()) {
            set_has_new_public_key_verification_data();
            new_public_key_verification_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_new_public_key_verification_data_signature()) {
            set_has_new_public_key_verification_data_signature();
            new_public_key_verification_data_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_verification_data_signature_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PolicyFetchResponse::CopyFrom(const PolicyFetchResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyFetchResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PolicyFetchResponse::IsInitialized() const
{

    return true;
}

void PolicyFetchResponse::Swap(PolicyFetchResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PolicyFetchResponse::InternalSwap(PolicyFetchResponse* other)
{
    std::swap(error_code_, other->error_code_);
    error_message_.Swap(&other->error_message_);
    policy_data_.Swap(&other->policy_data_);
    policy_data_signature_.Swap(&other->policy_data_signature_);
    new_public_key_.Swap(&other->new_public_key_);
    new_public_key_signature_.Swap(&other->new_public_key_signature_);
    new_public_key_verification_signature_deprecated_.Swap(&other->new_public_key_verification_signature_deprecated_);
    new_public_key_verification_data_.Swap(&other->new_public_key_verification_data_);
    new_public_key_verification_data_signature_.Swap(&other->new_public_key_verification_data_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PolicyFetchResponse::GetTypeName() const
{
    return "enterprise_management.PolicyFetchResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyFetchResponse

// optional int32 error_code = 1;
bool PolicyFetchResponse::has_error_code() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PolicyFetchResponse::set_has_error_code()
{
    _has_bits_[0] |= 0x00000001u;
}
void PolicyFetchResponse::clear_has_error_code()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PolicyFetchResponse::clear_error_code()
{
    error_code_ = 0;
    clear_has_error_code();
}
::google::protobuf::int32 PolicyFetchResponse::error_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.error_code)
    return error_code_;
}
void PolicyFetchResponse::set_error_code(::google::protobuf::int32 value)
{
    set_has_error_code();
    error_code_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.error_code)
}

// optional string error_message = 2;
bool PolicyFetchResponse::has_error_message() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PolicyFetchResponse::set_has_error_message()
{
    _has_bits_[0] |= 0x00000002u;
}
void PolicyFetchResponse::clear_has_error_message()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PolicyFetchResponse::clear_error_message()
{
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_message();
}
const ::std::string& PolicyFetchResponse::error_message() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.error_message)
    return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_error_message(const ::std::string& value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.error_message)
}
void PolicyFetchResponse::set_error_message(const char* value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.error_message)
}
void PolicyFetchResponse::set_error_message(const char* value, size_t size)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.error_message)
}
::std::string* PolicyFetchResponse::mutable_error_message()
{
    set_has_error_message();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.error_message)
    return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_error_message()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.error_message)
    clear_has_error_message();
    return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_error_message(::std::string* error_message)
{
    if (error_message != NULL) {
        set_has_error_message();
    } else {
        clear_has_error_message();
    }
    error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.error_message)
}

// optional bytes policy_data = 3;
bool PolicyFetchResponse::has_policy_data() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PolicyFetchResponse::set_has_policy_data()
{
    _has_bits_[0] |= 0x00000004u;
}
void PolicyFetchResponse::clear_has_policy_data()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PolicyFetchResponse::clear_policy_data()
{
    policy_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_policy_data();
}
const ::std::string& PolicyFetchResponse::policy_data() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.policy_data)
    return policy_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_policy_data(const ::std::string& value)
{
    set_has_policy_data();
    policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.policy_data)
}
void PolicyFetchResponse::set_policy_data(const char* value)
{
    set_has_policy_data();
    policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.policy_data)
}
void PolicyFetchResponse::set_policy_data(const void* value, size_t size)
{
    set_has_policy_data();
    policy_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.policy_data)
}
::std::string* PolicyFetchResponse::mutable_policy_data()
{
    set_has_policy_data();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.policy_data)
    return policy_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_policy_data()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.policy_data)
    clear_has_policy_data();
    return policy_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_policy_data(::std::string* policy_data)
{
    if (policy_data != NULL) {
        set_has_policy_data();
    } else {
        clear_has_policy_data();
    }
    policy_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.policy_data)
}

// optional bytes policy_data_signature = 4;
bool PolicyFetchResponse::has_policy_data_signature() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void PolicyFetchResponse::set_has_policy_data_signature()
{
    _has_bits_[0] |= 0x00000008u;
}
void PolicyFetchResponse::clear_has_policy_data_signature()
{
    _has_bits_[0] &= ~0x00000008u;
}
void PolicyFetchResponse::clear_policy_data_signature()
{
    policy_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_policy_data_signature();
}
const ::std::string& PolicyFetchResponse::policy_data_signature() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.policy_data_signature)
    return policy_data_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_policy_data_signature(const ::std::string& value)
{
    set_has_policy_data_signature();
    policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
void PolicyFetchResponse::set_policy_data_signature(const char* value)
{
    set_has_policy_data_signature();
    policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
void PolicyFetchResponse::set_policy_data_signature(const void* value, size_t size)
{
    set_has_policy_data_signature();
    policy_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.policy_data_signature)
}
::std::string* PolicyFetchResponse::mutable_policy_data_signature()
{
    set_has_policy_data_signature();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.policy_data_signature)
    return policy_data_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_policy_data_signature()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.policy_data_signature)
    clear_has_policy_data_signature();
    return policy_data_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_policy_data_signature(::std::string* policy_data_signature)
{
    if (policy_data_signature != NULL) {
        set_has_policy_data_signature();
    } else {
        clear_has_policy_data_signature();
    }
    policy_data_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy_data_signature);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.policy_data_signature)
}

// optional bytes new_public_key = 5;
bool PolicyFetchResponse::has_new_public_key() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key()
{
    _has_bits_[0] |= 0x00000010u;
}
void PolicyFetchResponse::clear_has_new_public_key()
{
    _has_bits_[0] &= ~0x00000010u;
}
void PolicyFetchResponse::clear_new_public_key()
{
    new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key();
}
const ::std::string& PolicyFetchResponse::new_public_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key)
    return new_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_new_public_key(const ::std::string& value)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key)
}
void PolicyFetchResponse::set_new_public_key(const char* value)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key)
}
void PolicyFetchResponse::set_new_public_key(const void* value, size_t size)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key)
}
::std::string* PolicyFetchResponse::mutable_new_public_key()
{
    set_has_new_public_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key)
    return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key)
    clear_has_new_public_key();
    return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key(::std::string* new_public_key)
{
    if (new_public_key != NULL) {
        set_has_new_public_key();
    } else {
        clear_has_new_public_key();
    }
    new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key)
}

// optional bytes new_public_key_signature = 6;
bool PolicyFetchResponse::has_new_public_key_signature() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_signature()
{
    _has_bits_[0] |= 0x00000020u;
}
void PolicyFetchResponse::clear_has_new_public_key_signature()
{
    _has_bits_[0] &= ~0x00000020u;
}
void PolicyFetchResponse::clear_new_public_key_signature()
{
    new_public_key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key_signature();
}
const ::std::string& PolicyFetchResponse::new_public_key_signature() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_signature)
    return new_public_key_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_new_public_key_signature(const ::std::string& value)
{
    set_has_new_public_key_signature();
    new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
void PolicyFetchResponse::set_new_public_key_signature(const char* value)
{
    set_has_new_public_key_signature();
    new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
void PolicyFetchResponse::set_new_public_key_signature(const void* value, size_t size)
{
    set_has_new_public_key_signature();
    new_public_key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_signature()
{
    set_has_new_public_key_signature();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_signature)
    return new_public_key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_signature()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_signature)
    clear_has_new_public_key_signature();
    return new_public_key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_signature(::std::string* new_public_key_signature)
{
    if (new_public_key_signature != NULL) {
        set_has_new_public_key_signature();
    } else {
        clear_has_new_public_key_signature();
    }
    new_public_key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_signature);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_signature)
}

// optional bytes new_public_key_verification_signature_deprecated = 7 [deprecated = true];
bool PolicyFetchResponse::has_new_public_key_verification_signature_deprecated() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_verification_signature_deprecated()
{
    _has_bits_[0] |= 0x00000040u;
}
void PolicyFetchResponse::clear_has_new_public_key_verification_signature_deprecated()
{
    _has_bits_[0] &= ~0x00000040u;
}
void PolicyFetchResponse::clear_new_public_key_verification_signature_deprecated()
{
    new_public_key_verification_signature_deprecated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key_verification_signature_deprecated();
}
const ::std::string& PolicyFetchResponse::new_public_key_verification_signature_deprecated() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
    return new_public_key_verification_signature_deprecated_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const ::std::string& value)
{
    set_has_new_public_key_verification_signature_deprecated();
    new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const char* value)
{
    set_has_new_public_key_verification_signature_deprecated();
    new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
void PolicyFetchResponse::set_new_public_key_verification_signature_deprecated(const void* value, size_t size)
{
    set_has_new_public_key_verification_signature_deprecated();
    new_public_key_verification_signature_deprecated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_verification_signature_deprecated()
{
    set_has_new_public_key_verification_signature_deprecated();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
    return new_public_key_verification_signature_deprecated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_verification_signature_deprecated()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
    clear_has_new_public_key_verification_signature_deprecated();
    return new_public_key_verification_signature_deprecated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_verification_signature_deprecated(::std::string* new_public_key_verification_signature_deprecated)
{
    if (new_public_key_verification_signature_deprecated != NULL) {
        set_has_new_public_key_verification_signature_deprecated();
    } else {
        clear_has_new_public_key_verification_signature_deprecated();
    }
    new_public_key_verification_signature_deprecated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_signature_deprecated);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_signature_deprecated)
}

// optional bytes new_public_key_verification_data = 8;
bool PolicyFetchResponse::has_new_public_key_verification_data() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_verification_data()
{
    _has_bits_[0] |= 0x00000080u;
}
void PolicyFetchResponse::clear_has_new_public_key_verification_data()
{
    _has_bits_[0] &= ~0x00000080u;
}
void PolicyFetchResponse::clear_new_public_key_verification_data()
{
    new_public_key_verification_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key_verification_data();
}
const ::std::string& PolicyFetchResponse::new_public_key_verification_data() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
    return new_public_key_verification_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_new_public_key_verification_data(const ::std::string& value)
{
    set_has_new_public_key_verification_data();
    new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
void PolicyFetchResponse::set_new_public_key_verification_data(const char* value)
{
    set_has_new_public_key_verification_data();
    new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
void PolicyFetchResponse::set_new_public_key_verification_data(const void* value, size_t size)
{
    set_has_new_public_key_verification_data();
    new_public_key_verification_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_verification_data()
{
    set_has_new_public_key_verification_data();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
    return new_public_key_verification_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_verification_data()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
    clear_has_new_public_key_verification_data();
    return new_public_key_verification_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_verification_data(::std::string* new_public_key_verification_data)
{
    if (new_public_key_verification_data != NULL) {
        set_has_new_public_key_verification_data();
    } else {
        clear_has_new_public_key_verification_data();
    }
    new_public_key_verification_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_data);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_data)
}

// optional bytes new_public_key_verification_data_signature = 9;
bool PolicyFetchResponse::has_new_public_key_verification_data_signature() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void PolicyFetchResponse::set_has_new_public_key_verification_data_signature()
{
    _has_bits_[0] |= 0x00000100u;
}
void PolicyFetchResponse::clear_has_new_public_key_verification_data_signature()
{
    _has_bits_[0] &= ~0x00000100u;
}
void PolicyFetchResponse::clear_new_public_key_verification_data_signature()
{
    new_public_key_verification_data_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key_verification_data_signature();
}
const ::std::string& PolicyFetchResponse::new_public_key_verification_data_signature() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
    return new_public_key_verification_data_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_new_public_key_verification_data_signature(const ::std::string& value)
{
    set_has_new_public_key_verification_data_signature();
    new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
void PolicyFetchResponse::set_new_public_key_verification_data_signature(const char* value)
{
    set_has_new_public_key_verification_data_signature();
    new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
void PolicyFetchResponse::set_new_public_key_verification_data_signature(const void* value, size_t size)
{
    set_has_new_public_key_verification_data_signature();
    new_public_key_verification_data_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}
::std::string* PolicyFetchResponse::mutable_new_public_key_verification_data_signature()
{
    set_has_new_public_key_verification_data_signature();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
    return new_public_key_verification_data_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PolicyFetchResponse::release_new_public_key_verification_data_signature()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
    clear_has_new_public_key_verification_data_signature();
    return new_public_key_verification_data_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PolicyFetchResponse::set_allocated_new_public_key_verification_data_signature(::std::string* new_public_key_verification_data_signature)
{
    if (new_public_key_verification_data_signature != NULL) {
        set_has_new_public_key_verification_data_signature();
    } else {
        clear_has_new_public_key_verification_data_signature();
    }
    new_public_key_verification_data_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key_verification_data_signature);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicyFetchResponse.new_public_key_verification_data_signature)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDEPRECATEDPolicyPublicKeyAndDomain(
    DEPRECATEDPolicyPublicKeyAndDomain* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DEPRECATEDPolicyPublicKeyAndDomain::kNewPublicKeyFieldNumber;
const int DEPRECATEDPolicyPublicKeyAndDomain::kDomainFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DEPRECATEDPolicyPublicKeyAndDomain::DEPRECATEDPolicyPublicKeyAndDomain()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

void DEPRECATEDPolicyPublicKeyAndDomain::InitAsDefaultInstance()
{
}

DEPRECATEDPolicyPublicKeyAndDomain::DEPRECATEDPolicyPublicKeyAndDomain(const DEPRECATEDPolicyPublicKeyAndDomain& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

void DEPRECATEDPolicyPublicKeyAndDomain::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DEPRECATEDPolicyPublicKeyAndDomain::~DEPRECATEDPolicyPublicKeyAndDomain()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    SharedDtor();
}

void DEPRECATEDPolicyPublicKeyAndDomain::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DEPRECATEDPolicyPublicKeyAndDomain::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DEPRECATEDPolicyPublicKeyAndDomain& DEPRECATEDPolicyPublicKeyAndDomain::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DEPRECATEDPolicyPublicKeyAndDomain* DEPRECATEDPolicyPublicKeyAndDomain::default_instance_ = NULL;

DEPRECATEDPolicyPublicKeyAndDomain* DEPRECATEDPolicyPublicKeyAndDomain::New(::google::protobuf::Arena* arena) const
{
    DEPRECATEDPolicyPublicKeyAndDomain* n = new DEPRECATEDPolicyPublicKeyAndDomain;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DEPRECATEDPolicyPublicKeyAndDomain::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_new_public_key()) {
            new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_domain()) {
            domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DEPRECATEDPolicyPublicKeyAndDomain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDEPRECATEDPolicyPublicKeyAndDomain, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes new_public_key = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_domain;
            break;
        }

        // optional string domain = 2;
        case 2: {
            if (tag == 18) {
            parse_domain:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_domain()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    return false;
#undef DO_
}

void DEPRECATEDPolicyPublicKeyAndDomain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    // optional bytes new_public_key = 1;
    if (has_new_public_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->new_public_key(), output);
    }

    // optional string domain = 2;
    if (has_domain()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->domain(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
}

int DEPRECATEDPolicyPublicKeyAndDomain::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional bytes new_public_key = 1;
        if (has_new_public_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key());
        }

        // optional string domain = 2;
        if (has_domain()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->domain());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DEPRECATEDPolicyPublicKeyAndDomain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DEPRECATEDPolicyPublicKeyAndDomain*>(&from));
}

void DEPRECATEDPolicyPublicKeyAndDomain::MergeFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_new_public_key()) {
            set_has_new_public_key();
            new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
        }
        if (from.has_domain()) {
            set_has_domain();
            domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DEPRECATEDPolicyPublicKeyAndDomain::CopyFrom(const DEPRECATEDPolicyPublicKeyAndDomain& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DEPRECATEDPolicyPublicKeyAndDomain::IsInitialized() const
{

    return true;
}

void DEPRECATEDPolicyPublicKeyAndDomain::Swap(DEPRECATEDPolicyPublicKeyAndDomain* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DEPRECATEDPolicyPublicKeyAndDomain::InternalSwap(DEPRECATEDPolicyPublicKeyAndDomain* other)
{
    new_public_key_.Swap(&other->new_public_key_);
    domain_.Swap(&other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DEPRECATEDPolicyPublicKeyAndDomain::GetTypeName() const
{
    return "enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DEPRECATEDPolicyPublicKeyAndDomain

// optional bytes new_public_key = 1;
bool DEPRECATEDPolicyPublicKeyAndDomain::has_new_public_key() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_has_new_public_key()
{
    _has_bits_[0] |= 0x00000001u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_has_new_public_key()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_new_public_key()
{
    new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key();
}
const ::std::string& DEPRECATEDPolicyPublicKeyAndDomain::new_public_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
    return new_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const ::std::string& value)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const char* value)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_new_public_key(const void* value, size_t size)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::mutable_new_public_key()
{
    set_has_new_public_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
    return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::release_new_public_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
    clear_has_new_public_key();
    return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_allocated_new_public_key(::std::string* new_public_key)
{
    if (new_public_key != NULL) {
        set_has_new_public_key();
    } else {
        clear_has_new_public_key();
    }
    new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.new_public_key)
}

// optional string domain = 2;
bool DEPRECATEDPolicyPublicKeyAndDomain::has_domain() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_has_domain()
{
    _has_bits_[0] |= 0x00000002u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_has_domain()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DEPRECATEDPolicyPublicKeyAndDomain::clear_domain()
{
    domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_domain();
}
const ::std::string& DEPRECATEDPolicyPublicKeyAndDomain::domain() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
    return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const ::std::string& value)
{
    set_has_domain();
    domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const char* value)
{
    set_has_domain();
    domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_domain(const char* value, size_t size)
{
    set_has_domain();
    domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::mutable_domain()
{
    set_has_domain();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
    return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DEPRECATEDPolicyPublicKeyAndDomain::release_domain()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
    clear_has_domain();
    return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DEPRECATEDPolicyPublicKeyAndDomain::set_allocated_domain(::std::string* domain)
{
    if (domain != NULL) {
        set_has_domain();
    } else {
        clear_has_domain();
    }
    domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DEPRECATEDPolicyPublicKeyAndDomain.domain)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPublicKeyVerificationData(
    PublicKeyVerificationData* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicKeyVerificationData::kNewPublicKeyFieldNumber;
const int PublicKeyVerificationData::kDomainFieldNumber;
const int PublicKeyVerificationData::kNewPublicKeyVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicKeyVerificationData::PublicKeyVerificationData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.PublicKeyVerificationData)
}

void PublicKeyVerificationData::InitAsDefaultInstance()
{
}

PublicKeyVerificationData::PublicKeyVerificationData(const PublicKeyVerificationData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.PublicKeyVerificationData)
}

void PublicKeyVerificationData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_version_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicKeyVerificationData::~PublicKeyVerificationData()
{
    // @@protoc_insertion_point(destructor:enterprise_management.PublicKeyVerificationData)
    SharedDtor();
}

void PublicKeyVerificationData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void PublicKeyVerificationData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PublicKeyVerificationData& PublicKeyVerificationData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

PublicKeyVerificationData* PublicKeyVerificationData::default_instance_ = NULL;

PublicKeyVerificationData* PublicKeyVerificationData::New(::google::protobuf::Arena* arena) const
{
    PublicKeyVerificationData* n = new PublicKeyVerificationData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void PublicKeyVerificationData::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.PublicKeyVerificationData)
    if (_has_bits_[0 / 32] & 7u) {
        if (has_new_public_key()) {
            new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_domain()) {
            domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        new_public_key_version_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PublicKeyVerificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForPublicKeyVerificationData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.PublicKeyVerificationData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes new_public_key = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_new_public_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_domain;
            break;
        }

        // optional string domain = 2;
        case 2: {
            if (tag == 18) {
            parse_domain:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_domain()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_new_public_key_version;
            break;
        }

        // optional int32 new_public_key_version = 3;
        case 3: {
            if (tag == 24) {
            parse_new_public_key_version:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &new_public_key_version_)));
                set_has_new_public_key_version();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.PublicKeyVerificationData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.PublicKeyVerificationData)
    return false;
#undef DO_
}

void PublicKeyVerificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.PublicKeyVerificationData)
    // optional bytes new_public_key = 1;
    if (has_new_public_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->new_public_key(), output);
    }

    // optional string domain = 2;
    if (has_domain()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->domain(), output);
    }

    // optional int32 new_public_key_version = 3;
    if (has_new_public_key_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_public_key_version(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.PublicKeyVerificationData)
}

int PublicKeyVerificationData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.PublicKeyVerificationData)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional bytes new_public_key = 1;
        if (has_new_public_key()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->new_public_key());
        }

        // optional string domain = 2;
        if (has_domain()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->domain());
        }

        // optional int32 new_public_key_version = 3;
        if (has_new_public_key_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->new_public_key_version());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void PublicKeyVerificationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const PublicKeyVerificationData*>(&from));
}

void PublicKeyVerificationData::MergeFrom(const PublicKeyVerificationData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PublicKeyVerificationData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_new_public_key()) {
            set_has_new_public_key();
            new_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_public_key_);
        }
        if (from.has_domain()) {
            set_has_domain();
            domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
        }
        if (from.has_new_public_key_version()) {
            set_new_public_key_version(from.new_public_key_version());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void PublicKeyVerificationData::CopyFrom(const PublicKeyVerificationData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PublicKeyVerificationData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool PublicKeyVerificationData::IsInitialized() const
{

    return true;
}

void PublicKeyVerificationData::Swap(PublicKeyVerificationData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void PublicKeyVerificationData::InternalSwap(PublicKeyVerificationData* other)
{
    new_public_key_.Swap(&other->new_public_key_);
    domain_.Swap(&other->domain_);
    std::swap(new_public_key_version_, other->new_public_key_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string PublicKeyVerificationData::GetTypeName() const
{
    return "enterprise_management.PublicKeyVerificationData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicKeyVerificationData

// optional bytes new_public_key = 1;
bool PublicKeyVerificationData::has_new_public_key() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublicKeyVerificationData::set_has_new_public_key()
{
    _has_bits_[0] |= 0x00000001u;
}
void PublicKeyVerificationData::clear_has_new_public_key()
{
    _has_bits_[0] &= ~0x00000001u;
}
void PublicKeyVerificationData::clear_new_public_key()
{
    new_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_public_key();
}
const ::std::string& PublicKeyVerificationData::new_public_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.new_public_key)
    return new_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKeyVerificationData::set_new_public_key(const ::std::string& value)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.new_public_key)
}
void PublicKeyVerificationData::set_new_public_key(const char* value)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PublicKeyVerificationData.new_public_key)
}
void PublicKeyVerificationData::set_new_public_key(const void* value, size_t size)
{
    set_has_new_public_key();
    new_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PublicKeyVerificationData.new_public_key)
}
::std::string* PublicKeyVerificationData::mutable_new_public_key()
{
    set_has_new_public_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PublicKeyVerificationData.new_public_key)
    return new_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicKeyVerificationData::release_new_public_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PublicKeyVerificationData.new_public_key)
    clear_has_new_public_key();
    return new_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKeyVerificationData::set_allocated_new_public_key(::std::string* new_public_key)
{
    if (new_public_key != NULL) {
        set_has_new_public_key();
    } else {
        clear_has_new_public_key();
    }
    new_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_public_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PublicKeyVerificationData.new_public_key)
}

// optional string domain = 2;
bool PublicKeyVerificationData::has_domain() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublicKeyVerificationData::set_has_domain()
{
    _has_bits_[0] |= 0x00000002u;
}
void PublicKeyVerificationData::clear_has_domain()
{
    _has_bits_[0] &= ~0x00000002u;
}
void PublicKeyVerificationData::clear_domain()
{
    domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_domain();
}
const ::std::string& PublicKeyVerificationData::domain() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.domain)
    return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKeyVerificationData::set_domain(const ::std::string& value)
{
    set_has_domain();
    domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.domain)
}
void PublicKeyVerificationData::set_domain(const char* value)
{
    set_has_domain();
    domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.PublicKeyVerificationData.domain)
}
void PublicKeyVerificationData::set_domain(const char* value, size_t size)
{
    set_has_domain();
    domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.PublicKeyVerificationData.domain)
}
::std::string* PublicKeyVerificationData::mutable_domain()
{
    set_has_domain();
    // @@protoc_insertion_point(field_mutable:enterprise_management.PublicKeyVerificationData.domain)
    return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicKeyVerificationData::release_domain()
{
    // @@protoc_insertion_point(field_release:enterprise_management.PublicKeyVerificationData.domain)
    clear_has_domain();
    return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKeyVerificationData::set_allocated_domain(::std::string* domain)
{
    if (domain != NULL) {
        set_has_domain();
    } else {
        clear_has_domain();
    }
    domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.PublicKeyVerificationData.domain)
}

// optional int32 new_public_key_version = 3;
bool PublicKeyVerificationData::has_new_public_key_version() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublicKeyVerificationData::set_has_new_public_key_version()
{
    _has_bits_[0] |= 0x00000004u;
}
void PublicKeyVerificationData::clear_has_new_public_key_version()
{
    _has_bits_[0] &= ~0x00000004u;
}
void PublicKeyVerificationData::clear_new_public_key_version()
{
    new_public_key_version_ = 0;
    clear_has_new_public_key_version();
}
::google::protobuf::int32 PublicKeyVerificationData::new_public_key_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.PublicKeyVerificationData.new_public_key_version)
    return new_public_key_version_;
}
void PublicKeyVerificationData::set_new_public_key_version(::google::protobuf::int32 value)
{
    set_has_new_public_key_version();
    new_public_key_version_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.PublicKeyVerificationData.new_public_key_version)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDevicePolicyRequest(
    DevicePolicyRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePolicyRequest::kRequestFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePolicyRequest::DevicePolicyRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DevicePolicyRequest)
}

void DevicePolicyRequest::InitAsDefaultInstance()
{
}

DevicePolicyRequest::DevicePolicyRequest(const DevicePolicyRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyRequest)
}

void DevicePolicyRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevicePolicyRequest::~DevicePolicyRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyRequest)
    SharedDtor();
}

void DevicePolicyRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DevicePolicyRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePolicyRequest& DevicePolicyRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DevicePolicyRequest* DevicePolicyRequest::default_instance_ = NULL;

DevicePolicyRequest* DevicePolicyRequest::New(::google::protobuf::Arena* arena) const
{
    DevicePolicyRequest* n = new DevicePolicyRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DevicePolicyRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyRequest)
    request_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DevicePolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDevicePolicyRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DevicePolicyRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .enterprise_management.PolicyFetchRequest request = 3;
        case 3: {
            if (tag == 26) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_loop_request;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DevicePolicyRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePolicyRequest)
    return false;
#undef DO_
}

void DevicePolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePolicyRequest)
    // repeated .enterprise_management.PolicyFetchRequest request = 3;
    for (unsigned int i = 0, n = this->request_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, this->request(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePolicyRequest)
}

int DevicePolicyRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyRequest)
    int total_size = 0;

    // repeated .enterprise_management.PolicyFetchRequest request = 3;
    total_size += 1 * this->request_size();
    for (int i = 0; i < this->request_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->request(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DevicePolicyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DevicePolicyRequest*>(&from));
}

void DevicePolicyRequest::MergeFrom(const DevicePolicyRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    request_.MergeFrom(from.request_);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DevicePolicyRequest::CopyFrom(const DevicePolicyRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DevicePolicyRequest::IsInitialized() const
{

    return true;
}

void DevicePolicyRequest::Swap(DevicePolicyRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DevicePolicyRequest::InternalSwap(DevicePolicyRequest* other)
{
    request_.UnsafeArenaSwap(&other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePolicyRequest::GetTypeName() const
{
    return "enterprise_management.DevicePolicyRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePolicyRequest

// repeated .enterprise_management.PolicyFetchRequest request = 3;
int DevicePolicyRequest::request_size() const
{
    return request_.size();
}
void DevicePolicyRequest::clear_request()
{
    request_.Clear();
}
const ::enterprise_management::PolicyFetchRequest& DevicePolicyRequest::request(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyRequest.request)
    return request_.Get(index);
}
::enterprise_management::PolicyFetchRequest* DevicePolicyRequest::mutable_request(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePolicyRequest.request)
    return request_.Mutable(index);
}
::enterprise_management::PolicyFetchRequest* DevicePolicyRequest::add_request()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DevicePolicyRequest.request)
    return request_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::PolicyFetchRequest>*
DevicePolicyRequest::mutable_request()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DevicePolicyRequest.request)
    return &request_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::PolicyFetchRequest>&
DevicePolicyRequest::request() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DevicePolicyRequest.request)
    return request_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDevicePolicyResponse(
    DevicePolicyResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePolicyResponse::kResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePolicyResponse::DevicePolicyResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DevicePolicyResponse)
}

void DevicePolicyResponse::InitAsDefaultInstance()
{
}

DevicePolicyResponse::DevicePolicyResponse(const DevicePolicyResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePolicyResponse)
}

void DevicePolicyResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevicePolicyResponse::~DevicePolicyResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DevicePolicyResponse)
    SharedDtor();
}

void DevicePolicyResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DevicePolicyResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePolicyResponse& DevicePolicyResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DevicePolicyResponse* DevicePolicyResponse::default_instance_ = NULL;

DevicePolicyResponse* DevicePolicyResponse::New(::google::protobuf::Arena* arena) const
{
    DevicePolicyResponse* n = new DevicePolicyResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DevicePolicyResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePolicyResponse)
    response_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DevicePolicyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDevicePolicyResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DevicePolicyResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .enterprise_management.PolicyFetchResponse response = 3;
        case 3: {
            if (tag == 26) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_loop_response;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DevicePolicyResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePolicyResponse)
    return false;
#undef DO_
}

void DevicePolicyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePolicyResponse)
    // repeated .enterprise_management.PolicyFetchResponse response = 3;
    for (unsigned int i = 0, n = this->response_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, this->response(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePolicyResponse)
}

int DevicePolicyResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePolicyResponse)
    int total_size = 0;

    // repeated .enterprise_management.PolicyFetchResponse response = 3;
    total_size += 1 * this->response_size();
    for (int i = 0; i < this->response_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->response(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DevicePolicyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DevicePolicyResponse*>(&from));
}

void DevicePolicyResponse::MergeFrom(const DevicePolicyResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePolicyResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    response_.MergeFrom(from.response_);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DevicePolicyResponse::CopyFrom(const DevicePolicyResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePolicyResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DevicePolicyResponse::IsInitialized() const
{

    return true;
}

void DevicePolicyResponse::Swap(DevicePolicyResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DevicePolicyResponse::InternalSwap(DevicePolicyResponse* other)
{
    response_.UnsafeArenaSwap(&other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePolicyResponse::GetTypeName() const
{
    return "enterprise_management.DevicePolicyResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePolicyResponse

// repeated .enterprise_management.PolicyFetchResponse response = 3;
int DevicePolicyResponse::response_size() const
{
    return response_.size();
}
void DevicePolicyResponse::clear_response()
{
    response_.Clear();
}
const ::enterprise_management::PolicyFetchResponse& DevicePolicyResponse::response(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DevicePolicyResponse.response)
    return response_.Get(index);
}
::enterprise_management::PolicyFetchResponse* DevicePolicyResponse::mutable_response(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePolicyResponse.response)
    return response_.Mutable(index);
}
::enterprise_management::PolicyFetchResponse* DevicePolicyResponse::add_response()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DevicePolicyResponse.response)
    return response_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::PolicyFetchResponse>*
DevicePolicyResponse::mutable_response()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DevicePolicyResponse.response)
    return &response_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::PolicyFetchResponse>&
DevicePolicyResponse::response() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DevicePolicyResponse.response)
    return response_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTimePeriod(
    TimePeriod* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimePeriod::kStartTimestampFieldNumber;
const int TimePeriod::kEndTimestampFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

TimePeriod::TimePeriod()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.TimePeriod)
}

void TimePeriod::InitAsDefaultInstance()
{
}

TimePeriod::TimePeriod(const TimePeriod& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.TimePeriod)
}

void TimePeriod::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    start_timestamp_ = GOOGLE_LONGLONG(0);
    end_timestamp_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimePeriod::~TimePeriod()
{
    // @@protoc_insertion_point(destructor:enterprise_management.TimePeriod)
    SharedDtor();
}

void TimePeriod::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void TimePeriod::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimePeriod& TimePeriod::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

TimePeriod* TimePeriod::default_instance_ = NULL;

TimePeriod* TimePeriod::New(::google::protobuf::Arena* arena) const
{
    TimePeriod* n = new TimePeriod;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void TimePeriod::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.TimePeriod)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                \
    _Pragma("clang diagnostic push")                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(TimePeriod, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<TimePeriod*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(start_timestamp_, end_timestamp_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TimePeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForTimePeriod, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.TimePeriod)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 start_timestamp = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &start_timestamp_)));
                set_has_start_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_end_timestamp;
            break;
        }

        // optional int64 end_timestamp = 2;
        case 2: {
            if (tag == 16) {
            parse_end_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &end_timestamp_)));
                set_has_end_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.TimePeriod)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.TimePeriod)
    return false;
#undef DO_
}

void TimePeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.TimePeriod)
    // optional int64 start_timestamp = 1;
    if (has_start_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp(), output);
    }

    // optional int64 end_timestamp = 2;
    if (has_end_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_timestamp(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.TimePeriod)
}

int TimePeriod::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.TimePeriod)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional int64 start_timestamp = 1;
        if (has_start_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->start_timestamp());
        }

        // optional int64 end_timestamp = 2;
        if (has_end_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->end_timestamp());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TimePeriod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const TimePeriod*>(&from));
}

void TimePeriod::MergeFrom(const TimePeriod& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.TimePeriod)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_start_timestamp()) {
            set_start_timestamp(from.start_timestamp());
        }
        if (from.has_end_timestamp()) {
            set_end_timestamp(from.end_timestamp());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void TimePeriod::CopyFrom(const TimePeriod& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.TimePeriod)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool TimePeriod::IsInitialized() const
{

    return true;
}

void TimePeriod::Swap(TimePeriod* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void TimePeriod::InternalSwap(TimePeriod* other)
{
    std::swap(start_timestamp_, other->start_timestamp_);
    std::swap(end_timestamp_, other->end_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimePeriod::GetTypeName() const
{
    return "enterprise_management.TimePeriod";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimePeriod

// optional int64 start_timestamp = 1;
bool TimePeriod::has_start_timestamp() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimePeriod::set_has_start_timestamp()
{
    _has_bits_[0] |= 0x00000001u;
}
void TimePeriod::clear_has_start_timestamp()
{
    _has_bits_[0] &= ~0x00000001u;
}
void TimePeriod::clear_start_timestamp()
{
    start_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_start_timestamp();
}
::google::protobuf::int64 TimePeriod::start_timestamp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.TimePeriod.start_timestamp)
    return start_timestamp_;
}
void TimePeriod::set_start_timestamp(::google::protobuf::int64 value)
{
    set_has_start_timestamp();
    start_timestamp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.TimePeriod.start_timestamp)
}

// optional int64 end_timestamp = 2;
bool TimePeriod::has_end_timestamp() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimePeriod::set_has_end_timestamp()
{
    _has_bits_[0] |= 0x00000002u;
}
void TimePeriod::clear_has_end_timestamp()
{
    _has_bits_[0] &= ~0x00000002u;
}
void TimePeriod::clear_end_timestamp()
{
    end_timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_end_timestamp();
}
::google::protobuf::int64 TimePeriod::end_timestamp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.TimePeriod.end_timestamp)
    return end_timestamp_;
}
void TimePeriod::set_end_timestamp(::google::protobuf::int64 value)
{
    set_has_end_timestamp();
    end_timestamp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.TimePeriod.end_timestamp)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForActiveTimePeriod(
    ActiveTimePeriod* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveTimePeriod::kTimePeriodFieldNumber;
const int ActiveTimePeriod::kActiveDurationFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveTimePeriod::ActiveTimePeriod()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.ActiveTimePeriod)
}

void ActiveTimePeriod::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    time_period_ = const_cast<::enterprise_management::TimePeriod*>(
        ::enterprise_management::TimePeriod::internal_default_instance());
#else
    time_period_ = const_cast<::enterprise_management::TimePeriod*>(&::enterprise_management::TimePeriod::default_instance());
#endif
}

ActiveTimePeriod::ActiveTimePeriod(const ActiveTimePeriod& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.ActiveTimePeriod)
}

void ActiveTimePeriod::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    time_period_ = NULL;
    active_duration_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveTimePeriod::~ActiveTimePeriod()
{
    // @@protoc_insertion_point(destructor:enterprise_management.ActiveTimePeriod)
    SharedDtor();
}

void ActiveTimePeriod::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete time_period_;
    }
}

void ActiveTimePeriod::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActiveTimePeriod& ActiveTimePeriod::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

ActiveTimePeriod* ActiveTimePeriod::default_instance_ = NULL;

ActiveTimePeriod* ActiveTimePeriod::New(::google::protobuf::Arena* arena) const
{
    ActiveTimePeriod* n = new ActiveTimePeriod;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void ActiveTimePeriod::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.ActiveTimePeriod)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_time_period()) {
            if (time_period_ != NULL)
                time_period_->::enterprise_management::TimePeriod::Clear();
        }
        active_duration_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ActiveTimePeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForActiveTimePeriod, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.ActiveTimePeriod)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.TimePeriod time_period = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_time_period()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_active_duration;
            break;
        }

        // optional int32 active_duration = 2;
        case 2: {
            if (tag == 16) {
            parse_active_duration:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &active_duration_)));
                set_has_active_duration();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.ActiveTimePeriod)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.ActiveTimePeriod)
    return false;
#undef DO_
}

void ActiveTimePeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.ActiveTimePeriod)
    // optional .enterprise_management.TimePeriod time_period = 1;
    if (has_time_period()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->time_period_, output);
    }

    // optional int32 active_duration = 2;
    if (has_active_duration()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_duration(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.ActiveTimePeriod)
}

int ActiveTimePeriod::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.ActiveTimePeriod)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional .enterprise_management.TimePeriod time_period = 1;
        if (has_time_period()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->time_period_);
        }

        // optional int32 active_duration = 2;
        if (has_active_duration()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->active_duration());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void ActiveTimePeriod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const ActiveTimePeriod*>(&from));
}

void ActiveTimePeriod::MergeFrom(const ActiveTimePeriod& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.ActiveTimePeriod)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_time_period()) {
            mutable_time_period()->::enterprise_management::TimePeriod::MergeFrom(from.time_period());
        }
        if (from.has_active_duration()) {
            set_active_duration(from.active_duration());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void ActiveTimePeriod::CopyFrom(const ActiveTimePeriod& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.ActiveTimePeriod)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ActiveTimePeriod::IsInitialized() const
{

    return true;
}

void ActiveTimePeriod::Swap(ActiveTimePeriod* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ActiveTimePeriod::InternalSwap(ActiveTimePeriod* other)
{
    std::swap(time_period_, other->time_period_);
    std::swap(active_duration_, other->active_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActiveTimePeriod::GetTypeName() const
{
    return "enterprise_management.ActiveTimePeriod";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActiveTimePeriod

// optional .enterprise_management.TimePeriod time_period = 1;
bool ActiveTimePeriod::has_time_period() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActiveTimePeriod::set_has_time_period()
{
    _has_bits_[0] |= 0x00000001u;
}
void ActiveTimePeriod::clear_has_time_period()
{
    _has_bits_[0] &= ~0x00000001u;
}
void ActiveTimePeriod::clear_time_period()
{
    if (time_period_ != NULL)
        time_period_->::enterprise_management::TimePeriod::Clear();
    clear_has_time_period();
}
const ::enterprise_management::TimePeriod& ActiveTimePeriod::time_period() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.time_period)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return time_period_ != NULL ? *time_period_ : *default_instance().time_period_;
#else
    return time_period_ != NULL ? *time_period_ : *default_instance_->time_period_;
#endif
}
::enterprise_management::TimePeriod* ActiveTimePeriod::mutable_time_period()
{
    set_has_time_period();
    if (time_period_ == NULL) {
        time_period_ = new ::enterprise_management::TimePeriod;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.ActiveTimePeriod.time_period)
    return time_period_;
}
::enterprise_management::TimePeriod* ActiveTimePeriod::release_time_period()
{
    // @@protoc_insertion_point(field_release:enterprise_management.ActiveTimePeriod.time_period)
    clear_has_time_period();
    ::enterprise_management::TimePeriod* temp = time_period_;
    time_period_ = NULL;
    return temp;
}
void ActiveTimePeriod::set_allocated_time_period(::enterprise_management::TimePeriod* time_period)
{
    delete time_period_;
    time_period_ = time_period;
    if (time_period) {
        set_has_time_period();
    } else {
        clear_has_time_period();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.ActiveTimePeriod.time_period)
}

// optional int32 active_duration = 2;
bool ActiveTimePeriod::has_active_duration() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActiveTimePeriod::set_has_active_duration()
{
    _has_bits_[0] |= 0x00000002u;
}
void ActiveTimePeriod::clear_has_active_duration()
{
    _has_bits_[0] &= ~0x00000002u;
}
void ActiveTimePeriod::clear_active_duration()
{
    active_duration_ = 0;
    clear_has_active_duration();
}
::google::protobuf::int32 ActiveTimePeriod::active_duration() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.ActiveTimePeriod.active_duration)
    return active_duration_;
}
void ActiveTimePeriod::set_active_duration(::google::protobuf::int32 value)
{
    set_has_active_duration();
    active_duration_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.ActiveTimePeriod.active_duration)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInstallableLaunch(
    InstallableLaunch* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallableLaunch::kInstallIdFieldNumber;
const int InstallableLaunch::kDurationFieldNumber;
const int InstallableLaunch::kTimestampFieldNumber;
const int InstallableLaunch::kTotalCountFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallableLaunch::InstallableLaunch()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.InstallableLaunch)
}

void InstallableLaunch::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    duration_ = const_cast<::enterprise_management::TimePeriod*>(
        ::enterprise_management::TimePeriod::internal_default_instance());
#else
    duration_ = const_cast<::enterprise_management::TimePeriod*>(&::enterprise_management::TimePeriod::default_instance());
#endif
}

InstallableLaunch::InstallableLaunch(const InstallableLaunch& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.InstallableLaunch)
}

void InstallableLaunch::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    install_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    duration_ = NULL;
    total_count_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallableLaunch::~InstallableLaunch()
{
    // @@protoc_insertion_point(destructor:enterprise_management.InstallableLaunch)
    SharedDtor();
}

void InstallableLaunch::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    install_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete duration_;
    }
}

void InstallableLaunch::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstallableLaunch& InstallableLaunch::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

InstallableLaunch* InstallableLaunch::default_instance_ = NULL;

InstallableLaunch* InstallableLaunch::New(::google::protobuf::Arena* arena) const
{
    InstallableLaunch* n = new InstallableLaunch;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void InstallableLaunch::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.InstallableLaunch)
    if (_has_bits_[0 / 32] & 11u) {
        if (has_install_id()) {
            install_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_duration()) {
            if (duration_ != NULL)
                duration_->::enterprise_management::TimePeriod::Clear();
        }
        total_count_ = GOOGLE_LONGLONG(0);
    }
    timestamp_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InstallableLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForInstallableLaunch, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.InstallableLaunch)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string install_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_install_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_duration;
            break;
        }

        // optional .enterprise_management.TimePeriod duration = 2;
        case 2: {
            if (tag == 18) {
            parse_duration:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_duration()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_timestamp;
            break;
        }

        // repeated int64 timestamp = 3;
        case 3: {
            if (tag == 24) {
            parse_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    1, 24, input, this->mutable_timestamp())));
            } else if (tag == 26) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, this->mutable_timestamp())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_timestamp;
            if (input->ExpectTag(32))
                goto parse_total_count;
            break;
        }

        // optional int64 total_count = 4;
        case 4: {
            if (tag == 32) {
            parse_total_count:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &total_count_)));
                set_has_total_count();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.InstallableLaunch)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.InstallableLaunch)
    return false;
#undef DO_
}

void InstallableLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.InstallableLaunch)
    // optional string install_id = 1;
    if (has_install_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->install_id(), output);
    }

    // optional .enterprise_management.TimePeriod duration = 2;
    if (has_duration()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->duration_, output);
    }

    // repeated int64 timestamp = 3;
    for (int i = 0; i < this->timestamp_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(
            3, this->timestamp(i), output);
    }

    // optional int64 total_count = 4;
    if (has_total_count()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_count(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.InstallableLaunch)
}

int InstallableLaunch::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.InstallableLaunch)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 11u) {
        // optional string install_id = 1;
        if (has_install_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->install_id());
        }

        // optional .enterprise_management.TimePeriod duration = 2;
        if (has_duration()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->duration_);
        }

        // optional int64 total_count = 4;
        if (has_total_count()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->total_count());
        }
    }
    // repeated int64 timestamp = 3;
    {
        int data_size = 0;
        for (int i = 0; i < this->timestamp_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int64Size(this->timestamp(i));
        }
        total_size += 1 * this->timestamp_size() + data_size;
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void InstallableLaunch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const InstallableLaunch*>(&from));
}

void InstallableLaunch::MergeFrom(const InstallableLaunch& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.InstallableLaunch)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    timestamp_.MergeFrom(from.timestamp_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_install_id()) {
            set_has_install_id();
            install_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.install_id_);
        }
        if (from.has_duration()) {
            mutable_duration()->::enterprise_management::TimePeriod::MergeFrom(from.duration());
        }
        if (from.has_total_count()) {
            set_total_count(from.total_count());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void InstallableLaunch::CopyFrom(const InstallableLaunch& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.InstallableLaunch)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool InstallableLaunch::IsInitialized() const
{

    return true;
}

void InstallableLaunch::Swap(InstallableLaunch* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void InstallableLaunch::InternalSwap(InstallableLaunch* other)
{
    install_id_.Swap(&other->install_id_);
    std::swap(duration_, other->duration_);
    timestamp_.UnsafeArenaSwap(&other->timestamp_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string InstallableLaunch::GetTypeName() const
{
    return "enterprise_management.InstallableLaunch";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallableLaunch

// optional string install_id = 1;
bool InstallableLaunch::has_install_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstallableLaunch::set_has_install_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void InstallableLaunch::clear_has_install_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void InstallableLaunch::clear_install_id()
{
    install_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_install_id();
}
const ::std::string& InstallableLaunch::install_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.InstallableLaunch.install_id)
    return install_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallableLaunch::set_install_id(const ::std::string& value)
{
    set_has_install_id();
    install_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.InstallableLaunch.install_id)
}
void InstallableLaunch::set_install_id(const char* value)
{
    set_has_install_id();
    install_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.InstallableLaunch.install_id)
}
void InstallableLaunch::set_install_id(const char* value, size_t size)
{
    set_has_install_id();
    install_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.InstallableLaunch.install_id)
}
::std::string* InstallableLaunch::mutable_install_id()
{
    set_has_install_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.InstallableLaunch.install_id)
    return install_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallableLaunch::release_install_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.InstallableLaunch.install_id)
    clear_has_install_id();
    return install_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallableLaunch::set_allocated_install_id(::std::string* install_id)
{
    if (install_id != NULL) {
        set_has_install_id();
    } else {
        clear_has_install_id();
    }
    install_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), install_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.InstallableLaunch.install_id)
}

// optional .enterprise_management.TimePeriod duration = 2;
bool InstallableLaunch::has_duration() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstallableLaunch::set_has_duration()
{
    _has_bits_[0] |= 0x00000002u;
}
void InstallableLaunch::clear_has_duration()
{
    _has_bits_[0] &= ~0x00000002u;
}
void InstallableLaunch::clear_duration()
{
    if (duration_ != NULL)
        duration_->::enterprise_management::TimePeriod::Clear();
    clear_has_duration();
}
const ::enterprise_management::TimePeriod& InstallableLaunch::duration() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.InstallableLaunch.duration)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return duration_ != NULL ? *duration_ : *default_instance().duration_;
#else
    return duration_ != NULL ? *duration_ : *default_instance_->duration_;
#endif
}
::enterprise_management::TimePeriod* InstallableLaunch::mutable_duration()
{
    set_has_duration();
    if (duration_ == NULL) {
        duration_ = new ::enterprise_management::TimePeriod;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.InstallableLaunch.duration)
    return duration_;
}
::enterprise_management::TimePeriod* InstallableLaunch::release_duration()
{
    // @@protoc_insertion_point(field_release:enterprise_management.InstallableLaunch.duration)
    clear_has_duration();
    ::enterprise_management::TimePeriod* temp = duration_;
    duration_ = NULL;
    return temp;
}
void InstallableLaunch::set_allocated_duration(::enterprise_management::TimePeriod* duration)
{
    delete duration_;
    duration_ = duration;
    if (duration) {
        set_has_duration();
    } else {
        clear_has_duration();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.InstallableLaunch.duration)
}

// repeated int64 timestamp = 3;
int InstallableLaunch::timestamp_size() const
{
    return timestamp_.size();
}
void InstallableLaunch::clear_timestamp()
{
    timestamp_.Clear();
}
::google::protobuf::int64 InstallableLaunch::timestamp(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.InstallableLaunch.timestamp)
    return timestamp_.Get(index);
}
void InstallableLaunch::set_timestamp(int index, ::google::protobuf::int64 value)
{
    timestamp_.Set(index, value);
    // @@protoc_insertion_point(field_set:enterprise_management.InstallableLaunch.timestamp)
}
void InstallableLaunch::add_timestamp(::google::protobuf::int64 value)
{
    timestamp_.Add(value);
    // @@protoc_insertion_point(field_add:enterprise_management.InstallableLaunch.timestamp)
}
const ::google::protobuf::RepeatedField<::google::protobuf::int64>&
InstallableLaunch::timestamp() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.InstallableLaunch.timestamp)
    return timestamp_;
}
::google::protobuf::RepeatedField<::google::protobuf::int64>*
InstallableLaunch::mutable_timestamp()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.InstallableLaunch.timestamp)
    return &timestamp_;
}

// optional int64 total_count = 4;
bool InstallableLaunch::has_total_count() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void InstallableLaunch::set_has_total_count()
{
    _has_bits_[0] |= 0x00000008u;
}
void InstallableLaunch::clear_has_total_count()
{
    _has_bits_[0] &= ~0x00000008u;
}
void InstallableLaunch::clear_total_count()
{
    total_count_ = GOOGLE_LONGLONG(0);
    clear_has_total_count();
}
::google::protobuf::int64 InstallableLaunch::total_count() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.InstallableLaunch.total_count)
    return total_count_;
}
void InstallableLaunch::set_total_count(::google::protobuf::int64 value)
{
    set_has_total_count();
    total_count_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.InstallableLaunch.total_count)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForOBSOLETE_DeviceLocation(
    OBSOLETE_DeviceLocation* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool OBSOLETE_DeviceLocation_ErrorCode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OBSOLETE_DeviceLocation_ErrorCode OBSOLETE_DeviceLocation::ERROR_CODE_NONE;
const OBSOLETE_DeviceLocation_ErrorCode OBSOLETE_DeviceLocation::ERROR_CODE_POSITION_UNAVAILABLE;
const OBSOLETE_DeviceLocation_ErrorCode OBSOLETE_DeviceLocation::ErrorCode_MIN;
const OBSOLETE_DeviceLocation_ErrorCode OBSOLETE_DeviceLocation::ErrorCode_MAX;
const int OBSOLETE_DeviceLocation::ErrorCode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OBSOLETE_DeviceLocation::kLatitudeFieldNumber;
const int OBSOLETE_DeviceLocation::kLongitudeFieldNumber;
const int OBSOLETE_DeviceLocation::kAltitudeFieldNumber;
const int OBSOLETE_DeviceLocation::kAccuracyFieldNumber;
const int OBSOLETE_DeviceLocation::kAltitudeAccuracyFieldNumber;
const int OBSOLETE_DeviceLocation::kHeadingFieldNumber;
const int OBSOLETE_DeviceLocation::kSpeedFieldNumber;
const int OBSOLETE_DeviceLocation::kTimestampFieldNumber;
const int OBSOLETE_DeviceLocation::kErrorCodeFieldNumber;
const int OBSOLETE_DeviceLocation::kErrorMessageFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

OBSOLETE_DeviceLocation::OBSOLETE_DeviceLocation()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.OBSOLETE_DeviceLocation)
}

void OBSOLETE_DeviceLocation::InitAsDefaultInstance()
{
}

OBSOLETE_DeviceLocation::OBSOLETE_DeviceLocation(const OBSOLETE_DeviceLocation& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.OBSOLETE_DeviceLocation)
}

void OBSOLETE_DeviceLocation::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
    accuracy_ = 0;
    altitude_accuracy_ = 0;
    heading_ = 0;
    speed_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    error_code_ = 0;
    error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OBSOLETE_DeviceLocation::~OBSOLETE_DeviceLocation()
{
    // @@protoc_insertion_point(destructor:enterprise_management.OBSOLETE_DeviceLocation)
    SharedDtor();
}

void OBSOLETE_DeviceLocation::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void OBSOLETE_DeviceLocation::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OBSOLETE_DeviceLocation& OBSOLETE_DeviceLocation::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

OBSOLETE_DeviceLocation* OBSOLETE_DeviceLocation::default_instance_ = NULL;

OBSOLETE_DeviceLocation* OBSOLETE_DeviceLocation::New(::google::protobuf::Arena* arena) const
{
    OBSOLETE_DeviceLocation* n = new OBSOLETE_DeviceLocation;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void OBSOLETE_DeviceLocation::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.OBSOLETE_DeviceLocation)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                             \
    _Pragma("clang diagnostic push")                                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(OBSOLETE_DeviceLocation, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<OBSOLETE_DeviceLocation*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(latitude_, timestamp_);
    }
    if (_has_bits_[8 / 32] & 768u) {
        error_code_ = 0;
        if (has_error_message()) {
            error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OBSOLETE_DeviceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForOBSOLETE_DeviceLocation, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.OBSOLETE_DeviceLocation)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional double latitude = 1;
        case 1: {
            if (tag == 9) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &latitude_)));
                set_has_latitude();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(17))
                goto parse_longitude;
            break;
        }

        // optional double longitude = 2;
        case 2: {
            if (tag == 17) {
            parse_longitude:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &longitude_)));
                set_has_longitude();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(25))
                goto parse_altitude;
            break;
        }

        // optional double altitude = 3;
        case 3: {
            if (tag == 25) {
            parse_altitude:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &altitude_)));
                set_has_altitude();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(33))
                goto parse_accuracy;
            break;
        }

        // optional double accuracy = 4;
        case 4: {
            if (tag == 33) {
            parse_accuracy:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &accuracy_)));
                set_has_accuracy();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(41))
                goto parse_altitude_accuracy;
            break;
        }

        // optional double altitude_accuracy = 5;
        case 5: {
            if (tag == 41) {
            parse_altitude_accuracy:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &altitude_accuracy_)));
                set_has_altitude_accuracy();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(49))
                goto parse_heading;
            break;
        }

        // optional double heading = 6;
        case 6: {
            if (tag == 49) {
            parse_heading:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &heading_)));
                set_has_heading();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(57))
                goto parse_speed;
            break;
        }

        // optional double speed = 7;
        case 7: {
            if (tag == 57) {
            parse_speed:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                    input, &speed_)));
                set_has_speed();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(64))
                goto parse_timestamp;
            break;
        }

        // optional int64 timestamp = 8;
        case 8: {
            if (tag == 64) {
            parse_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &timestamp_)));
                set_has_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(72))
                goto parse_error_code;
            break;
        }

        // optional .enterprise_management.OBSOLETE_DeviceLocation.ErrorCode error_code = 9;
        case 9: {
            if (tag == 72) {
            parse_error_code:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::OBSOLETE_DeviceLocation_ErrorCode_IsValid(value)) {
                    set_error_code(static_cast<::enterprise_management::OBSOLETE_DeviceLocation_ErrorCode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(72);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_error_message;
            break;
        }

        // optional string error_message = 10;
        case 10: {
            if (tag == 82) {
            parse_error_message:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_error_message()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.OBSOLETE_DeviceLocation)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.OBSOLETE_DeviceLocation)
    return false;
#undef DO_
}

void OBSOLETE_DeviceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.OBSOLETE_DeviceLocation)
    // optional double latitude = 1;
    if (has_latitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
    }

    // optional double longitude = 2;
    if (has_longitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
    }

    // optional double altitude = 3;
    if (has_altitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
    }

    // optional double accuracy = 4;
    if (has_accuracy()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accuracy(), output);
    }

    // optional double altitude_accuracy = 5;
    if (has_altitude_accuracy()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->altitude_accuracy(), output);
    }

    // optional double heading = 6;
    if (has_heading()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
    }

    // optional double speed = 7;
    if (has_speed()) {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed(), output);
    }

    // optional int64 timestamp = 8;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
    }

    // optional .enterprise_management.OBSOLETE_DeviceLocation.ErrorCode error_code = 9;
    if (has_error_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            9, this->error_code(), output);
    }

    // optional string error_message = 10;
    if (has_error_message()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            10, this->error_message(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.OBSOLETE_DeviceLocation)
}

int OBSOLETE_DeviceLocation::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.OBSOLETE_DeviceLocation)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional double latitude = 1;
        if (has_latitude()) {
            total_size += 1 + 8;
        }

        // optional double longitude = 2;
        if (has_longitude()) {
            total_size += 1 + 8;
        }

        // optional double altitude = 3;
        if (has_altitude()) {
            total_size += 1 + 8;
        }

        // optional double accuracy = 4;
        if (has_accuracy()) {
            total_size += 1 + 8;
        }

        // optional double altitude_accuracy = 5;
        if (has_altitude_accuracy()) {
            total_size += 1 + 8;
        }

        // optional double heading = 6;
        if (has_heading()) {
            total_size += 1 + 8;
        }

        // optional double speed = 7;
        if (has_speed()) {
            total_size += 1 + 8;
        }

        // optional int64 timestamp = 8;
        if (has_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
        }
    }
    if (_has_bits_[8 / 32] & 768u) {
        // optional .enterprise_management.OBSOLETE_DeviceLocation.ErrorCode error_code = 9;
        if (has_error_code()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
        }

        // optional string error_message = 10;
        if (has_error_message()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->error_message());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void OBSOLETE_DeviceLocation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const OBSOLETE_DeviceLocation*>(&from));
}

void OBSOLETE_DeviceLocation::MergeFrom(const OBSOLETE_DeviceLocation& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OBSOLETE_DeviceLocation)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_latitude()) {
            set_latitude(from.latitude());
        }
        if (from.has_longitude()) {
            set_longitude(from.longitude());
        }
        if (from.has_altitude()) {
            set_altitude(from.altitude());
        }
        if (from.has_accuracy()) {
            set_accuracy(from.accuracy());
        }
        if (from.has_altitude_accuracy()) {
            set_altitude_accuracy(from.altitude_accuracy());
        }
        if (from.has_heading()) {
            set_heading(from.heading());
        }
        if (from.has_speed()) {
            set_speed(from.speed());
        }
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_error_code()) {
            set_error_code(from.error_code());
        }
        if (from.has_error_message()) {
            set_has_error_message();
            error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void OBSOLETE_DeviceLocation::CopyFrom(const OBSOLETE_DeviceLocation& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OBSOLETE_DeviceLocation)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool OBSOLETE_DeviceLocation::IsInitialized() const
{

    return true;
}

void OBSOLETE_DeviceLocation::Swap(OBSOLETE_DeviceLocation* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void OBSOLETE_DeviceLocation::InternalSwap(OBSOLETE_DeviceLocation* other)
{
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(altitude_accuracy_, other->altitude_accuracy_);
    std::swap(heading_, other->heading_);
    std::swap(speed_, other->speed_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(error_code_, other->error_code_);
    error_message_.Swap(&other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string OBSOLETE_DeviceLocation::GetTypeName() const
{
    return "enterprise_management.OBSOLETE_DeviceLocation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OBSOLETE_DeviceLocation

// optional double latitude = 1;
bool OBSOLETE_DeviceLocation::has_latitude() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_latitude()
{
    _has_bits_[0] |= 0x00000001u;
}
void OBSOLETE_DeviceLocation::clear_has_latitude()
{
    _has_bits_[0] &= ~0x00000001u;
}
void OBSOLETE_DeviceLocation::clear_latitude()
{
    latitude_ = 0;
    clear_has_latitude();
}
double OBSOLETE_DeviceLocation::latitude() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.latitude)
    return latitude_;
}
void OBSOLETE_DeviceLocation::set_latitude(double value)
{
    set_has_latitude();
    latitude_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.latitude)
}

// optional double longitude = 2;
bool OBSOLETE_DeviceLocation::has_longitude() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_longitude()
{
    _has_bits_[0] |= 0x00000002u;
}
void OBSOLETE_DeviceLocation::clear_has_longitude()
{
    _has_bits_[0] &= ~0x00000002u;
}
void OBSOLETE_DeviceLocation::clear_longitude()
{
    longitude_ = 0;
    clear_has_longitude();
}
double OBSOLETE_DeviceLocation::longitude() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.longitude)
    return longitude_;
}
void OBSOLETE_DeviceLocation::set_longitude(double value)
{
    set_has_longitude();
    longitude_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.longitude)
}

// optional double altitude = 3;
bool OBSOLETE_DeviceLocation::has_altitude() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_altitude()
{
    _has_bits_[0] |= 0x00000004u;
}
void OBSOLETE_DeviceLocation::clear_has_altitude()
{
    _has_bits_[0] &= ~0x00000004u;
}
void OBSOLETE_DeviceLocation::clear_altitude()
{
    altitude_ = 0;
    clear_has_altitude();
}
double OBSOLETE_DeviceLocation::altitude() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.altitude)
    return altitude_;
}
void OBSOLETE_DeviceLocation::set_altitude(double value)
{
    set_has_altitude();
    altitude_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.altitude)
}

// optional double accuracy = 4;
bool OBSOLETE_DeviceLocation::has_accuracy() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_accuracy()
{
    _has_bits_[0] |= 0x00000008u;
}
void OBSOLETE_DeviceLocation::clear_has_accuracy()
{
    _has_bits_[0] &= ~0x00000008u;
}
void OBSOLETE_DeviceLocation::clear_accuracy()
{
    accuracy_ = 0;
    clear_has_accuracy();
}
double OBSOLETE_DeviceLocation::accuracy() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.accuracy)
    return accuracy_;
}
void OBSOLETE_DeviceLocation::set_accuracy(double value)
{
    set_has_accuracy();
    accuracy_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.accuracy)
}

// optional double altitude_accuracy = 5;
bool OBSOLETE_DeviceLocation::has_altitude_accuracy() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_altitude_accuracy()
{
    _has_bits_[0] |= 0x00000010u;
}
void OBSOLETE_DeviceLocation::clear_has_altitude_accuracy()
{
    _has_bits_[0] &= ~0x00000010u;
}
void OBSOLETE_DeviceLocation::clear_altitude_accuracy()
{
    altitude_accuracy_ = 0;
    clear_has_altitude_accuracy();
}
double OBSOLETE_DeviceLocation::altitude_accuracy() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.altitude_accuracy)
    return altitude_accuracy_;
}
void OBSOLETE_DeviceLocation::set_altitude_accuracy(double value)
{
    set_has_altitude_accuracy();
    altitude_accuracy_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.altitude_accuracy)
}

// optional double heading = 6;
bool OBSOLETE_DeviceLocation::has_heading() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_heading()
{
    _has_bits_[0] |= 0x00000020u;
}
void OBSOLETE_DeviceLocation::clear_has_heading()
{
    _has_bits_[0] &= ~0x00000020u;
}
void OBSOLETE_DeviceLocation::clear_heading()
{
    heading_ = 0;
    clear_has_heading();
}
double OBSOLETE_DeviceLocation::heading() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.heading)
    return heading_;
}
void OBSOLETE_DeviceLocation::set_heading(double value)
{
    set_has_heading();
    heading_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.heading)
}

// optional double speed = 7;
bool OBSOLETE_DeviceLocation::has_speed() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_speed()
{
    _has_bits_[0] |= 0x00000040u;
}
void OBSOLETE_DeviceLocation::clear_has_speed()
{
    _has_bits_[0] &= ~0x00000040u;
}
void OBSOLETE_DeviceLocation::clear_speed()
{
    speed_ = 0;
    clear_has_speed();
}
double OBSOLETE_DeviceLocation::speed() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.speed)
    return speed_;
}
void OBSOLETE_DeviceLocation::set_speed(double value)
{
    set_has_speed();
    speed_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.speed)
}

// optional int64 timestamp = 8;
bool OBSOLETE_DeviceLocation::has_timestamp() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_timestamp()
{
    _has_bits_[0] |= 0x00000080u;
}
void OBSOLETE_DeviceLocation::clear_has_timestamp()
{
    _has_bits_[0] &= ~0x00000080u;
}
void OBSOLETE_DeviceLocation::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_timestamp();
}
::google::protobuf::int64 OBSOLETE_DeviceLocation::timestamp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.timestamp)
    return timestamp_;
}
void OBSOLETE_DeviceLocation::set_timestamp(::google::protobuf::int64 value)
{
    set_has_timestamp();
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.timestamp)
}

// optional .enterprise_management.OBSOLETE_DeviceLocation.ErrorCode error_code = 9;
bool OBSOLETE_DeviceLocation::has_error_code() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_error_code()
{
    _has_bits_[0] |= 0x00000100u;
}
void OBSOLETE_DeviceLocation::clear_has_error_code()
{
    _has_bits_[0] &= ~0x00000100u;
}
void OBSOLETE_DeviceLocation::clear_error_code()
{
    error_code_ = 0;
    clear_has_error_code();
}
::enterprise_management::OBSOLETE_DeviceLocation_ErrorCode OBSOLETE_DeviceLocation::error_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.error_code)
    return static_cast<::enterprise_management::OBSOLETE_DeviceLocation_ErrorCode>(error_code_);
}
void OBSOLETE_DeviceLocation::set_error_code(::enterprise_management::OBSOLETE_DeviceLocation_ErrorCode value)
{
    assert(::enterprise_management::OBSOLETE_DeviceLocation_ErrorCode_IsValid(value));
    set_has_error_code();
    error_code_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.error_code)
}

// optional string error_message = 10;
bool OBSOLETE_DeviceLocation::has_error_message() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void OBSOLETE_DeviceLocation::set_has_error_message()
{
    _has_bits_[0] |= 0x00000200u;
}
void OBSOLETE_DeviceLocation::clear_has_error_message()
{
    _has_bits_[0] &= ~0x00000200u;
}
void OBSOLETE_DeviceLocation::clear_error_message()
{
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_message();
}
const ::std::string& OBSOLETE_DeviceLocation::error_message() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OBSOLETE_DeviceLocation.error_message)
    return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OBSOLETE_DeviceLocation::set_error_message(const ::std::string& value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.OBSOLETE_DeviceLocation.error_message)
}
void OBSOLETE_DeviceLocation::set_error_message(const char* value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.OBSOLETE_DeviceLocation.error_message)
}
void OBSOLETE_DeviceLocation::set_error_message(const char* value, size_t size)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.OBSOLETE_DeviceLocation.error_message)
}
::std::string* OBSOLETE_DeviceLocation::mutable_error_message()
{
    set_has_error_message();
    // @@protoc_insertion_point(field_mutable:enterprise_management.OBSOLETE_DeviceLocation.error_message)
    return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OBSOLETE_DeviceLocation::release_error_message()
{
    // @@protoc_insertion_point(field_release:enterprise_management.OBSOLETE_DeviceLocation.error_message)
    clear_has_error_message();
    return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OBSOLETE_DeviceLocation::set_allocated_error_message(::std::string* error_message)
{
    if (error_message != NULL) {
        set_has_error_message();
    } else {
        clear_has_error_message();
    }
    error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.OBSOLETE_DeviceLocation.error_message)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForNetworkInterface(
    NetworkInterface* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool NetworkInterface_NetworkDeviceType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_ETHERNET;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_WIFI;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_WIMAX;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_BLUETOOTH;
const NetworkInterface_NetworkDeviceType NetworkInterface::TYPE_CELLULAR;
const NetworkInterface_NetworkDeviceType NetworkInterface::NetworkDeviceType_MIN;
const NetworkInterface_NetworkDeviceType NetworkInterface::NetworkDeviceType_MAX;
const int NetworkInterface::NetworkDeviceType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInterface::kTypeFieldNumber;
const int NetworkInterface::kMacAddressFieldNumber;
const int NetworkInterface::kMeidFieldNumber;
const int NetworkInterface::kImeiFieldNumber;
const int NetworkInterface::kDevicePathFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInterface::NetworkInterface()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.NetworkInterface)
}

void NetworkInterface::InitAsDefaultInstance()
{
}

NetworkInterface::NetworkInterface(const NetworkInterface& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkInterface)
}

void NetworkInterface::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = 0;
    mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    meid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkInterface::~NetworkInterface()
{
    // @@protoc_insertion_point(destructor:enterprise_management.NetworkInterface)
    SharedDtor();
}

void NetworkInterface::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    meid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void NetworkInterface::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkInterface& NetworkInterface::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

NetworkInterface* NetworkInterface::default_instance_ = NULL;

NetworkInterface* NetworkInterface::New(::google::protobuf::Arena* arena) const
{
    NetworkInterface* n = new NetworkInterface;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void NetworkInterface::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkInterface)
    if (_has_bits_[0 / 32] & 31u) {
        type_ = 0;
        if (has_mac_address()) {
            mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_meid()) {
            meid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_imei()) {
            imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_device_path()) {
            device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetworkInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForNetworkInterface, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.NetworkInterface)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(value)) {
                    set_type(static_cast<::enterprise_management::NetworkInterface_NetworkDeviceType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_mac_address;
            break;
        }

        // optional string mac_address = 2;
        case 2: {
            if (tag == 18) {
            parse_mac_address:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_mac_address()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_meid;
            break;
        }

        // optional string meid = 3;
        case 3: {
            if (tag == 26) {
            parse_meid:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_meid()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_imei;
            break;
        }

        // optional string imei = 4;
        case 4: {
            if (tag == 34) {
            parse_imei:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_imei()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_device_path;
            break;
        }

        // optional string device_path = 5;
        case 5: {
            if (tag == 42) {
            parse_device_path:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_path()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.NetworkInterface)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.NetworkInterface)
    return false;
#undef DO_
}

void NetworkInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.NetworkInterface)
    // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->type(), output);
    }

    // optional string mac_address = 2;
    if (has_mac_address()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->mac_address(), output);
    }

    // optional string meid = 3;
    if (has_meid()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->meid(), output);
    }

    // optional string imei = 4;
    if (has_imei()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->imei(), output);
    }

    // optional string device_path = 5;
    if (has_device_path()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->device_path(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.NetworkInterface)
}

int NetworkInterface::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkInterface)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        // optional string mac_address = 2;
        if (has_mac_address()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->mac_address());
        }

        // optional string meid = 3;
        if (has_meid()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->meid());
        }

        // optional string imei = 4;
        if (has_imei()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->imei());
        }

        // optional string device_path = 5;
        if (has_device_path()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_path());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void NetworkInterface::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const NetworkInterface*>(&from));
}

void NetworkInterface::MergeFrom(const NetworkInterface& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkInterface)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_mac_address()) {
            set_has_mac_address();
            mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
        }
        if (from.has_meid()) {
            set_has_meid();
            meid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meid_);
        }
        if (from.has_imei()) {
            set_has_imei();
            imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
        }
        if (from.has_device_path()) {
            set_has_device_path();
            device_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_path_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void NetworkInterface::CopyFrom(const NetworkInterface& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkInterface)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool NetworkInterface::IsInitialized() const
{

    return true;
}

void NetworkInterface::Swap(NetworkInterface* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void NetworkInterface::InternalSwap(NetworkInterface* other)
{
    std::swap(type_, other->type_);
    mac_address_.Swap(&other->mac_address_);
    meid_.Swap(&other->meid_);
    imei_.Swap(&other->imei_);
    device_path_.Swap(&other->device_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkInterface::GetTypeName() const
{
    return "enterprise_management.NetworkInterface";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkInterface

// optional .enterprise_management.NetworkInterface.NetworkDeviceType type = 1;
bool NetworkInterface::has_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkInterface::set_has_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void NetworkInterface::clear_has_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void NetworkInterface::clear_type()
{
    type_ = 0;
    clear_has_type();
}
::enterprise_management::NetworkInterface_NetworkDeviceType NetworkInterface::type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.type)
    return static_cast<::enterprise_management::NetworkInterface_NetworkDeviceType>(type_);
}
void NetworkInterface::set_type(::enterprise_management::NetworkInterface_NetworkDeviceType value)
{
    assert(::enterprise_management::NetworkInterface_NetworkDeviceType_IsValid(value));
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.type)
}

// optional string mac_address = 2;
bool NetworkInterface::has_mac_address() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkInterface::set_has_mac_address()
{
    _has_bits_[0] |= 0x00000002u;
}
void NetworkInterface::clear_has_mac_address()
{
    _has_bits_[0] &= ~0x00000002u;
}
void NetworkInterface::clear_mac_address()
{
    mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_mac_address();
}
const ::std::string& NetworkInterface::mac_address() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.mac_address)
    return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_mac_address(const ::std::string& value)
{
    set_has_mac_address();
    mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.mac_address)
}
void NetworkInterface::set_mac_address(const char* value)
{
    set_has_mac_address();
    mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.mac_address)
}
void NetworkInterface::set_mac_address(const char* value, size_t size)
{
    set_has_mac_address();
    mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.mac_address)
}
::std::string* NetworkInterface::mutable_mac_address()
{
    set_has_mac_address();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.mac_address)
    return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_mac_address()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.mac_address)
    clear_has_mac_address();
    return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_mac_address(::std::string* mac_address)
{
    if (mac_address != NULL) {
        set_has_mac_address();
    } else {
        clear_has_mac_address();
    }
    mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.mac_address)
}

// optional string meid = 3;
bool NetworkInterface::has_meid() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkInterface::set_has_meid()
{
    _has_bits_[0] |= 0x00000004u;
}
void NetworkInterface::clear_has_meid()
{
    _has_bits_[0] &= ~0x00000004u;
}
void NetworkInterface::clear_meid()
{
    meid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_meid();
}
const ::std::string& NetworkInterface::meid() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.meid)
    return meid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_meid(const ::std::string& value)
{
    set_has_meid();
    meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.meid)
}
void NetworkInterface::set_meid(const char* value)
{
    set_has_meid();
    meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.meid)
}
void NetworkInterface::set_meid(const char* value, size_t size)
{
    set_has_meid();
    meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.meid)
}
::std::string* NetworkInterface::mutable_meid()
{
    set_has_meid();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.meid)
    return meid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_meid()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.meid)
    clear_has_meid();
    return meid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_meid(::std::string* meid)
{
    if (meid != NULL) {
        set_has_meid();
    } else {
        clear_has_meid();
    }
    meid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meid);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.meid)
}

// optional string imei = 4;
bool NetworkInterface::has_imei() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkInterface::set_has_imei()
{
    _has_bits_[0] |= 0x00000008u;
}
void NetworkInterface::clear_has_imei()
{
    _has_bits_[0] &= ~0x00000008u;
}
void NetworkInterface::clear_imei()
{
    imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_imei();
}
const ::std::string& NetworkInterface::imei() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.imei)
    return imei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_imei(const ::std::string& value)
{
    set_has_imei();
    imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.imei)
}
void NetworkInterface::set_imei(const char* value)
{
    set_has_imei();
    imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.imei)
}
void NetworkInterface::set_imei(const char* value, size_t size)
{
    set_has_imei();
    imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.imei)
}
::std::string* NetworkInterface::mutable_imei()
{
    set_has_imei();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.imei)
    return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_imei()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.imei)
    clear_has_imei();
    return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_imei(::std::string* imei)
{
    if (imei != NULL) {
        set_has_imei();
    } else {
        clear_has_imei();
    }
    imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.imei)
}

// optional string device_path = 5;
bool NetworkInterface::has_device_path() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkInterface::set_has_device_path()
{
    _has_bits_[0] |= 0x00000010u;
}
void NetworkInterface::clear_has_device_path()
{
    _has_bits_[0] &= ~0x00000010u;
}
void NetworkInterface::clear_device_path()
{
    device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_path();
}
const ::std::string& NetworkInterface::device_path() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkInterface.device_path)
    return device_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_device_path(const ::std::string& value)
{
    set_has_device_path();
    device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkInterface.device_path)
}
void NetworkInterface::set_device_path(const char* value)
{
    set_has_device_path();
    device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkInterface.device_path)
}
void NetworkInterface::set_device_path(const char* value, size_t size)
{
    set_has_device_path();
    device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkInterface.device_path)
}
::std::string* NetworkInterface::mutable_device_path()
{
    set_has_device_path();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkInterface.device_path)
    return device_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInterface::release_device_path()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkInterface.device_path)
    clear_has_device_path();
    return device_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInterface::set_allocated_device_path(::std::string* device_path)
{
    if (device_path != NULL) {
        set_has_device_path();
    } else {
        clear_has_device_path();
    }
    device_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_path);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkInterface.device_path)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForNetworkState(
    NetworkState* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool NetworkState_ConnectionState_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkState_ConnectionState NetworkState::IDLE;
const NetworkState_ConnectionState NetworkState::CARRIER;
const NetworkState_ConnectionState NetworkState::ASSOCIATION;
const NetworkState_ConnectionState NetworkState::CONFIGURATION;
const NetworkState_ConnectionState NetworkState::READY;
const NetworkState_ConnectionState NetworkState::PORTAL;
const NetworkState_ConnectionState NetworkState::OFFLINE;
const NetworkState_ConnectionState NetworkState::ONLINE;
const NetworkState_ConnectionState NetworkState::DISCONNECT;
const NetworkState_ConnectionState NetworkState::FAILURE;
const NetworkState_ConnectionState NetworkState::ACTIVATION_FAILURE;
const NetworkState_ConnectionState NetworkState::UNKNOWN;
const NetworkState_ConnectionState NetworkState::ConnectionState_MIN;
const NetworkState_ConnectionState NetworkState::ConnectionState_MAX;
const int NetworkState::ConnectionState_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkState::kDevicePathFieldNumber;
const int NetworkState::kConnectionStateFieldNumber;
const int NetworkState::kSignalStrengthFieldNumber;
const int NetworkState::kIpAddressFieldNumber;
const int NetworkState::kGatewayFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkState::NetworkState()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.NetworkState)
}

void NetworkState::InitAsDefaultInstance()
{
}

NetworkState::NetworkState(const NetworkState& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.NetworkState)
}

void NetworkState::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    connection_state_ = 0;
    signal_strength_ = 0;
    ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gateway_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkState::~NetworkState()
{
    // @@protoc_insertion_point(destructor:enterprise_management.NetworkState)
    SharedDtor();
}

void NetworkState::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gateway_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void NetworkState::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkState& NetworkState::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

NetworkState* NetworkState::default_instance_ = NULL;

NetworkState* NetworkState::New(::google::protobuf::Arena* arena) const
{
    NetworkState* n = new NetworkState;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void NetworkState::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.NetworkState)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                  \
    _Pragma("clang diagnostic push")                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(NetworkState, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<NetworkState*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 31u) {
        ZR_(connection_state_, signal_strength_);
        if (has_device_path()) {
            device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_ip_address()) {
            ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_gateway()) {
            gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetworkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForNetworkState, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.NetworkState)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string device_path = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_path()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_connection_state;
            break;
        }

        // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
        case 2: {
            if (tag == 16) {
            parse_connection_state:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::NetworkState_ConnectionState_IsValid(value)) {
                    set_connection_state(static_cast<::enterprise_management::NetworkState_ConnectionState>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(16);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_signal_strength;
            break;
        }

        // optional int32 signal_strength = 3;
        case 3: {
            if (tag == 24) {
            parse_signal_strength:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &signal_strength_)));
                set_has_signal_strength();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_ip_address;
            break;
        }

        // optional string ip_address = 4;
        case 4: {
            if (tag == 34) {
            parse_ip_address:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_ip_address()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_gateway;
            break;
        }

        // optional string gateway = 5;
        case 5: {
            if (tag == 42) {
            parse_gateway:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_gateway()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.NetworkState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.NetworkState)
    return false;
#undef DO_
}

void NetworkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.NetworkState)
    // optional string device_path = 1;
    if (has_device_path()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->device_path(), output);
    }

    // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
    if (has_connection_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            2, this->connection_state(), output);
    }

    // optional int32 signal_strength = 3;
    if (has_signal_strength()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_strength(), output);
    }

    // optional string ip_address = 4;
    if (has_ip_address()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->ip_address(), output);
    }

    // optional string gateway = 5;
    if (has_gateway()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->gateway(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.NetworkState)
}

int NetworkState::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.NetworkState)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string device_path = 1;
        if (has_device_path()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_path());
        }

        // optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
        if (has_connection_state()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_state());
        }

        // optional int32 signal_strength = 3;
        if (has_signal_strength()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->signal_strength());
        }

        // optional string ip_address = 4;
        if (has_ip_address()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->ip_address());
        }

        // optional string gateway = 5;
        if (has_gateway()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->gateway());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void NetworkState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const NetworkState*>(&from));
}

void NetworkState::MergeFrom(const NetworkState& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.NetworkState)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_device_path()) {
            set_has_device_path();
            device_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_path_);
        }
        if (from.has_connection_state()) {
            set_connection_state(from.connection_state());
        }
        if (from.has_signal_strength()) {
            set_signal_strength(from.signal_strength());
        }
        if (from.has_ip_address()) {
            set_has_ip_address();
            ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
        }
        if (from.has_gateway()) {
            set_has_gateway();
            gateway_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gateway_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void NetworkState::CopyFrom(const NetworkState& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.NetworkState)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool NetworkState::IsInitialized() const
{

    return true;
}

void NetworkState::Swap(NetworkState* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void NetworkState::InternalSwap(NetworkState* other)
{
    device_path_.Swap(&other->device_path_);
    std::swap(connection_state_, other->connection_state_);
    std::swap(signal_strength_, other->signal_strength_);
    ip_address_.Swap(&other->ip_address_);
    gateway_.Swap(&other->gateway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkState::GetTypeName() const
{
    return "enterprise_management.NetworkState";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkState

// optional string device_path = 1;
bool NetworkState::has_device_path() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkState::set_has_device_path()
{
    _has_bits_[0] |= 0x00000001u;
}
void NetworkState::clear_has_device_path()
{
    _has_bits_[0] &= ~0x00000001u;
}
void NetworkState::clear_device_path()
{
    device_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_path();
}
const ::std::string& NetworkState::device_path() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.device_path)
    return device_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_device_path(const ::std::string& value)
{
    set_has_device_path();
    device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.device_path)
}
void NetworkState::set_device_path(const char* value)
{
    set_has_device_path();
    device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.device_path)
}
void NetworkState::set_device_path(const char* value, size_t size)
{
    set_has_device_path();
    device_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.device_path)
}
::std::string* NetworkState::mutable_device_path()
{
    set_has_device_path();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.device_path)
    return device_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkState::release_device_path()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkState.device_path)
    clear_has_device_path();
    return device_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_allocated_device_path(::std::string* device_path)
{
    if (device_path != NULL) {
        set_has_device_path();
    } else {
        clear_has_device_path();
    }
    device_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_path);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.device_path)
}

// optional .enterprise_management.NetworkState.ConnectionState connection_state = 2;
bool NetworkState::has_connection_state() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkState::set_has_connection_state()
{
    _has_bits_[0] |= 0x00000002u;
}
void NetworkState::clear_has_connection_state()
{
    _has_bits_[0] &= ~0x00000002u;
}
void NetworkState::clear_connection_state()
{
    connection_state_ = 0;
    clear_has_connection_state();
}
::enterprise_management::NetworkState_ConnectionState NetworkState::connection_state() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.connection_state)
    return static_cast<::enterprise_management::NetworkState_ConnectionState>(connection_state_);
}
void NetworkState::set_connection_state(::enterprise_management::NetworkState_ConnectionState value)
{
    assert(::enterprise_management::NetworkState_ConnectionState_IsValid(value));
    set_has_connection_state();
    connection_state_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.connection_state)
}

// optional int32 signal_strength = 3;
bool NetworkState::has_signal_strength() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkState::set_has_signal_strength()
{
    _has_bits_[0] |= 0x00000004u;
}
void NetworkState::clear_has_signal_strength()
{
    _has_bits_[0] &= ~0x00000004u;
}
void NetworkState::clear_signal_strength()
{
    signal_strength_ = 0;
    clear_has_signal_strength();
}
::google::protobuf::int32 NetworkState::signal_strength() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.signal_strength)
    return signal_strength_;
}
void NetworkState::set_signal_strength(::google::protobuf::int32 value)
{
    set_has_signal_strength();
    signal_strength_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.signal_strength)
}

// optional string ip_address = 4;
bool NetworkState::has_ip_address() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkState::set_has_ip_address()
{
    _has_bits_[0] |= 0x00000008u;
}
void NetworkState::clear_has_ip_address()
{
    _has_bits_[0] &= ~0x00000008u;
}
void NetworkState::clear_ip_address()
{
    ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ip_address();
}
const ::std::string& NetworkState::ip_address() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.ip_address)
    return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_ip_address(const ::std::string& value)
{
    set_has_ip_address();
    ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.ip_address)
}
void NetworkState::set_ip_address(const char* value)
{
    set_has_ip_address();
    ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.ip_address)
}
void NetworkState::set_ip_address(const char* value, size_t size)
{
    set_has_ip_address();
    ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.ip_address)
}
::std::string* NetworkState::mutable_ip_address()
{
    set_has_ip_address();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.ip_address)
    return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkState::release_ip_address()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkState.ip_address)
    clear_has_ip_address();
    return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_allocated_ip_address(::std::string* ip_address)
{
    if (ip_address != NULL) {
        set_has_ip_address();
    } else {
        clear_has_ip_address();
    }
    ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.ip_address)
}

// optional string gateway = 5;
bool NetworkState::has_gateway() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkState::set_has_gateway()
{
    _has_bits_[0] |= 0x00000010u;
}
void NetworkState::clear_has_gateway()
{
    _has_bits_[0] &= ~0x00000010u;
}
void NetworkState::clear_gateway()
{
    gateway_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gateway();
}
const ::std::string& NetworkState::gateway() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.NetworkState.gateway)
    return gateway_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_gateway(const ::std::string& value)
{
    set_has_gateway();
    gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.NetworkState.gateway)
}
void NetworkState::set_gateway(const char* value)
{
    set_has_gateway();
    gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.NetworkState.gateway)
}
void NetworkState::set_gateway(const char* value, size_t size)
{
    set_has_gateway();
    gateway_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.NetworkState.gateway)
}
::std::string* NetworkState::mutable_gateway()
{
    set_has_gateway();
    // @@protoc_insertion_point(field_mutable:enterprise_management.NetworkState.gateway)
    return gateway_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkState::release_gateway()
{
    // @@protoc_insertion_point(field_release:enterprise_management.NetworkState.gateway)
    clear_has_gateway();
    return gateway_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkState::set_allocated_gateway(::std::string* gateway)
{
    if (gateway != NULL) {
        set_has_gateway();
    } else {
        clear_has_gateway();
    }
    gateway_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.NetworkState.gateway)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceUser(
    DeviceUser* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceUser_UserType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceUser_UserType DeviceUser::USER_TYPE_MANAGED;
const DeviceUser_UserType DeviceUser::USER_TYPE_UNMANAGED;
const DeviceUser_UserType DeviceUser::UserType_MIN;
const DeviceUser_UserType DeviceUser::UserType_MAX;
const int DeviceUser::UserType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUser::kTypeFieldNumber;
const int DeviceUser::kEmailFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUser::DeviceUser()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceUser)
}

void DeviceUser::InitAsDefaultInstance()
{
}

DeviceUser::DeviceUser(const DeviceUser& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceUser)
}

void DeviceUser::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = 0;
    email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceUser::~DeviceUser()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceUser)
    SharedDtor();
}

void DeviceUser::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceUser::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUser& DeviceUser::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceUser* DeviceUser::default_instance_ = NULL;

DeviceUser* DeviceUser::New(::google::protobuf::Arena* arena) const
{
    DeviceUser* n = new DeviceUser;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceUser::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceUser)
    if (_has_bits_[0 / 32] & 3u) {
        type_ = 0;
        if (has_email()) {
            email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceUser, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceUser)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required .enterprise_management.DeviceUser.UserType type = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceUser_UserType_IsValid(value)) {
                    set_type(static_cast<::enterprise_management::DeviceUser_UserType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_email;
            break;
        }

        // optional string email = 2;
        case 2: {
            if (tag == 18) {
            parse_email:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_email()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceUser)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceUser)
    return false;
#undef DO_
}

void DeviceUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceUser)
    // required .enterprise_management.DeviceUser.UserType type = 1;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->type(), output);
    }

    // optional string email = 2;
    if (has_email()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->email(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceUser)
}

int DeviceUser::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceUser)
    int total_size = 0;

    // required .enterprise_management.DeviceUser.UserType type = 1;
    if (has_type()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    // optional string email = 2;
    if (has_email()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->email());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceUser*>(&from));
}

void DeviceUser::MergeFrom(const DeviceUser& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceUser)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_email()) {
            set_has_email();
            email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceUser::CopyFrom(const DeviceUser& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceUser)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceUser::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    return true;
}

void DeviceUser::Swap(DeviceUser* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceUser::InternalSwap(DeviceUser* other)
{
    std::swap(type_, other->type_);
    email_.Swap(&other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUser::GetTypeName() const
{
    return "enterprise_management.DeviceUser";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUser

// required .enterprise_management.DeviceUser.UserType type = 1;
bool DeviceUser::has_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceUser::set_has_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceUser::clear_has_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceUser::clear_type()
{
    type_ = 0;
    clear_has_type();
}
::enterprise_management::DeviceUser_UserType DeviceUser::type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceUser.type)
    return static_cast<::enterprise_management::DeviceUser_UserType>(type_);
}
void DeviceUser::set_type(::enterprise_management::DeviceUser_UserType value)
{
    assert(::enterprise_management::DeviceUser_UserType_IsValid(value));
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceUser.type)
}

// optional string email = 2;
bool DeviceUser::has_email() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceUser::set_has_email()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceUser::clear_has_email()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceUser::clear_email()
{
    email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_email();
}
const ::std::string& DeviceUser::email() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceUser.email)
    return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceUser::set_email(const ::std::string& value)
{
    set_has_email();
    email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceUser.email)
}
void DeviceUser::set_email(const char* value)
{
    set_has_email();
    email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceUser.email)
}
void DeviceUser::set_email(const char* value, size_t size)
{
    set_has_email();
    email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceUser.email)
}
::std::string* DeviceUser::mutable_email()
{
    set_has_email();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceUser.email)
    return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceUser::release_email()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceUser.email)
    clear_has_email();
    return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceUser::set_allocated_email(::std::string* email)
{
    if (email != NULL) {
        set_has_email();
    } else {
        clear_has_email();
    }
    email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceUser.email)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForVolumeInfo(
    VolumeInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VolumeInfo::kVolumeIdFieldNumber;
const int VolumeInfo::kStorageTotalFieldNumber;
const int VolumeInfo::kStorageFreeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

VolumeInfo::VolumeInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.VolumeInfo)
}

void VolumeInfo::InitAsDefaultInstance()
{
}

VolumeInfo::VolumeInfo(const VolumeInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.VolumeInfo)
}

void VolumeInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    volume_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    storage_total_ = GOOGLE_LONGLONG(0);
    storage_free_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeInfo::~VolumeInfo()
{
    // @@protoc_insertion_point(destructor:enterprise_management.VolumeInfo)
    SharedDtor();
}

void VolumeInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    volume_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void VolumeInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VolumeInfo& VolumeInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

VolumeInfo* VolumeInfo::default_instance_ = NULL;

VolumeInfo* VolumeInfo::New(::google::protobuf::Arena* arena) const
{
    VolumeInfo* n = new VolumeInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void VolumeInfo::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.VolumeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                \
    _Pragma("clang diagnostic push")                                                                 \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(VolumeInfo, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<VolumeInfo*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 7u) {
        ZR_(storage_total_, storage_free_);
        if (has_volume_id()) {
            volume_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VolumeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForVolumeInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.VolumeInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string volume_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_volume_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_storage_total;
            break;
        }

        // optional int64 storage_total = 2;
        case 2: {
            if (tag == 16) {
            parse_storage_total:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &storage_total_)));
                set_has_storage_total();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_storage_free;
            break;
        }

        // optional int64 storage_free = 3;
        case 3: {
            if (tag == 24) {
            parse_storage_free:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &storage_free_)));
                set_has_storage_free();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.VolumeInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.VolumeInfo)
    return false;
#undef DO_
}

void VolumeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.VolumeInfo)
    // optional string volume_id = 1;
    if (has_volume_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->volume_id(), output);
    }

    // optional int64 storage_total = 2;
    if (has_storage_total()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->storage_total(), output);
    }

    // optional int64 storage_free = 3;
    if (has_storage_free()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->storage_free(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.VolumeInfo)
}

int VolumeInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.VolumeInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional string volume_id = 1;
        if (has_volume_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->volume_id());
        }

        // optional int64 storage_total = 2;
        if (has_storage_total()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->storage_total());
        }

        // optional int64 storage_free = 3;
        if (has_storage_free()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->storage_free());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void VolumeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const VolumeInfo*>(&from));
}

void VolumeInfo::MergeFrom(const VolumeInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.VolumeInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_volume_id()) {
            set_has_volume_id();
            volume_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_id_);
        }
        if (from.has_storage_total()) {
            set_storage_total(from.storage_total());
        }
        if (from.has_storage_free()) {
            set_storage_free(from.storage_free());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void VolumeInfo::CopyFrom(const VolumeInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.VolumeInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool VolumeInfo::IsInitialized() const
{

    return true;
}

void VolumeInfo::Swap(VolumeInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void VolumeInfo::InternalSwap(VolumeInfo* other)
{
    volume_id_.Swap(&other->volume_id_);
    std::swap(storage_total_, other->storage_total_);
    std::swap(storage_free_, other->storage_free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string VolumeInfo::GetTypeName() const
{
    return "enterprise_management.VolumeInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VolumeInfo

// optional string volume_id = 1;
bool VolumeInfo::has_volume_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void VolumeInfo::set_has_volume_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void VolumeInfo::clear_has_volume_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void VolumeInfo::clear_volume_id()
{
    volume_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_volume_id();
}
const ::std::string& VolumeInfo::volume_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.volume_id)
    return volume_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VolumeInfo::set_volume_id(const ::std::string& value)
{
    set_has_volume_id();
    volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.volume_id)
}
void VolumeInfo::set_volume_id(const char* value)
{
    set_has_volume_id();
    volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.VolumeInfo.volume_id)
}
void VolumeInfo::set_volume_id(const char* value, size_t size)
{
    set_has_volume_id();
    volume_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.VolumeInfo.volume_id)
}
::std::string* VolumeInfo::mutable_volume_id()
{
    set_has_volume_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.VolumeInfo.volume_id)
    return volume_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VolumeInfo::release_volume_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.VolumeInfo.volume_id)
    clear_has_volume_id();
    return volume_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VolumeInfo::set_allocated_volume_id(::std::string* volume_id)
{
    if (volume_id != NULL) {
        set_has_volume_id();
    } else {
        clear_has_volume_id();
    }
    volume_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.VolumeInfo.volume_id)
}

// optional int64 storage_total = 2;
bool VolumeInfo::has_storage_total() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void VolumeInfo::set_has_storage_total()
{
    _has_bits_[0] |= 0x00000002u;
}
void VolumeInfo::clear_has_storage_total()
{
    _has_bits_[0] &= ~0x00000002u;
}
void VolumeInfo::clear_storage_total()
{
    storage_total_ = GOOGLE_LONGLONG(0);
    clear_has_storage_total();
}
::google::protobuf::int64 VolumeInfo::storage_total() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.storage_total)
    return storage_total_;
}
void VolumeInfo::set_storage_total(::google::protobuf::int64 value)
{
    set_has_storage_total();
    storage_total_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.storage_total)
}

// optional int64 storage_free = 3;
bool VolumeInfo::has_storage_free() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void VolumeInfo::set_has_storage_free()
{
    _has_bits_[0] |= 0x00000004u;
}
void VolumeInfo::clear_has_storage_free()
{
    _has_bits_[0] &= ~0x00000004u;
}
void VolumeInfo::clear_storage_free()
{
    storage_free_ = GOOGLE_LONGLONG(0);
    clear_has_storage_free();
}
::google::protobuf::int64 VolumeInfo::storage_free() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.VolumeInfo.storage_free)
    return storage_free_;
}
void VolumeInfo::set_storage_free(::google::protobuf::int64 value)
{
    set_has_storage_free();
    storage_free_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.VolumeInfo.storage_free)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCPUTempInfo(
    CPUTempInfo* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPUTempInfo::kCpuLabelFieldNumber;
const int CPUTempInfo::kCpuTempFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CPUTempInfo::CPUTempInfo()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CPUTempInfo)
}

void CPUTempInfo::InitAsDefaultInstance()
{
}

CPUTempInfo::CPUTempInfo(const CPUTempInfo& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CPUTempInfo)
}

void CPUTempInfo::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cpu_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cpu_temp_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPUTempInfo::~CPUTempInfo()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CPUTempInfo)
    SharedDtor();
}

void CPUTempInfo::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cpu_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void CPUTempInfo::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CPUTempInfo& CPUTempInfo::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CPUTempInfo* CPUTempInfo::default_instance_ = NULL;

CPUTempInfo* CPUTempInfo::New(::google::protobuf::Arena* arena) const
{
    CPUTempInfo* n = new CPUTempInfo;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CPUTempInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CPUTempInfo)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_cpu_label()) {
            cpu_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        cpu_temp_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CPUTempInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCPUTempInfo, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CPUTempInfo)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string cpu_label = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_cpu_label()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_cpu_temp;
            break;
        }

        // optional int32 cpu_temp = 2;
        case 2: {
            if (tag == 16) {
            parse_cpu_temp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &cpu_temp_)));
                set_has_cpu_temp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CPUTempInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CPUTempInfo)
    return false;
#undef DO_
}

void CPUTempInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CPUTempInfo)
    // optional string cpu_label = 1;
    if (has_cpu_label()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->cpu_label(), output);
    }

    // optional int32 cpu_temp = 2;
    if (has_cpu_temp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpu_temp(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CPUTempInfo)
}

int CPUTempInfo::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CPUTempInfo)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string cpu_label = 1;
        if (has_cpu_label()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->cpu_label());
        }

        // optional int32 cpu_temp = 2;
        if (has_cpu_temp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cpu_temp());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CPUTempInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CPUTempInfo*>(&from));
}

void CPUTempInfo::MergeFrom(const CPUTempInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CPUTempInfo)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_cpu_label()) {
            set_has_cpu_label();
            cpu_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpu_label_);
        }
        if (from.has_cpu_temp()) {
            set_cpu_temp(from.cpu_temp());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CPUTempInfo::CopyFrom(const CPUTempInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CPUTempInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CPUTempInfo::IsInitialized() const
{

    return true;
}

void CPUTempInfo::Swap(CPUTempInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CPUTempInfo::InternalSwap(CPUTempInfo* other)
{
    cpu_label_.Swap(&other->cpu_label_);
    std::swap(cpu_temp_, other->cpu_temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CPUTempInfo::GetTypeName() const
{
    return "enterprise_management.CPUTempInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPUTempInfo

// optional string cpu_label = 1;
bool CPUTempInfo::has_cpu_label() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPUTempInfo::set_has_cpu_label()
{
    _has_bits_[0] |= 0x00000001u;
}
void CPUTempInfo::clear_has_cpu_label()
{
    _has_bits_[0] &= ~0x00000001u;
}
void CPUTempInfo::clear_cpu_label()
{
    cpu_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cpu_label();
}
const ::std::string& CPUTempInfo::cpu_label() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CPUTempInfo.cpu_label)
    return cpu_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPUTempInfo::set_cpu_label(const ::std::string& value)
{
    set_has_cpu_label();
    cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.CPUTempInfo.cpu_label)
}
void CPUTempInfo::set_cpu_label(const char* value)
{
    set_has_cpu_label();
    cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.CPUTempInfo.cpu_label)
}
void CPUTempInfo::set_cpu_label(const char* value, size_t size)
{
    set_has_cpu_label();
    cpu_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.CPUTempInfo.cpu_label)
}
::std::string* CPUTempInfo::mutable_cpu_label()
{
    set_has_cpu_label();
    // @@protoc_insertion_point(field_mutable:enterprise_management.CPUTempInfo.cpu_label)
    return cpu_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPUTempInfo::release_cpu_label()
{
    // @@protoc_insertion_point(field_release:enterprise_management.CPUTempInfo.cpu_label)
    clear_has_cpu_label();
    return cpu_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPUTempInfo::set_allocated_cpu_label(::std::string* cpu_label)
{
    if (cpu_label != NULL) {
        set_has_cpu_label();
    } else {
        clear_has_cpu_label();
    }
    cpu_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_label);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.CPUTempInfo.cpu_label)
}

// optional int32 cpu_temp = 2;
bool CPUTempInfo::has_cpu_temp() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPUTempInfo::set_has_cpu_temp()
{
    _has_bits_[0] |= 0x00000002u;
}
void CPUTempInfo::clear_has_cpu_temp()
{
    _has_bits_[0] &= ~0x00000002u;
}
void CPUTempInfo::clear_cpu_temp()
{
    cpu_temp_ = 0;
    clear_has_cpu_temp();
}
::google::protobuf::int32 CPUTempInfo::cpu_temp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CPUTempInfo.cpu_temp)
    return cpu_temp_;
}
void CPUTempInfo::set_cpu_temp(::google::protobuf::int32 value)
{
    set_has_cpu_temp();
    cpu_temp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.CPUTempInfo.cpu_temp)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceStatusReportRequest(
    DeviceStatusReportRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStatusReportRequest::kOsVersionFieldNumber;
const int DeviceStatusReportRequest::kFirmwareVersionFieldNumber;
const int DeviceStatusReportRequest::kBootModeFieldNumber;
const int DeviceStatusReportRequest::kOBSOLETEActiveTimeFieldNumber;
const int DeviceStatusReportRequest::kBrowserVersionFieldNumber;
const int DeviceStatusReportRequest::kActivePeriodFieldNumber;
const int DeviceStatusReportRequest::kOBSOLETEDeviceLocationFieldNumber;
const int DeviceStatusReportRequest::kNetworkInterfaceFieldNumber;
const int DeviceStatusReportRequest::kUserFieldNumber;
const int DeviceStatusReportRequest::kVolumeInfoFieldNumber;
const int DeviceStatusReportRequest::kNetworkStateFieldNumber;
const int DeviceStatusReportRequest::kCpuUtilizationPctFieldNumber;
const int DeviceStatusReportRequest::kOBSOLETESystemRamFreeFieldNumber;
const int DeviceStatusReportRequest::kSystemRamTotalFieldNumber;
const int DeviceStatusReportRequest::kSystemRamFreeFieldNumber;
const int DeviceStatusReportRequest::kCpuTempInfoFieldNumber;
const int DeviceStatusReportRequest::kOsUpdateStatusFieldNumber;
const int DeviceStatusReportRequest::kRunningKioskAppFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStatusReportRequest::DeviceStatusReportRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceStatusReportRequest)
}

void DeviceStatusReportRequest::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    obsolete_device_location_ = const_cast<::enterprise_management::OBSOLETE_DeviceLocation*>(
        ::enterprise_management::OBSOLETE_DeviceLocation::internal_default_instance());
#else
    obsolete_device_location_ = const_cast<::enterprise_management::OBSOLETE_DeviceLocation*>(&::enterprise_management::OBSOLETE_DeviceLocation::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    os_update_status_ = const_cast<::enterprise_management::OsUpdateStatus*>(
        ::enterprise_management::OsUpdateStatus::internal_default_instance());
#else
    os_update_status_ = const_cast<::enterprise_management::OsUpdateStatus*>(&::enterprise_management::OsUpdateStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    running_kiosk_app_ = const_cast<::enterprise_management::AppStatus*>(
        ::enterprise_management::AppStatus::internal_default_instance());
#else
    running_kiosk_app_ = const_cast<::enterprise_management::AppStatus*>(&::enterprise_management::AppStatus::default_instance());
#endif
}

DeviceStatusReportRequest::DeviceStatusReportRequest(const DeviceStatusReportRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStatusReportRequest)
}

void DeviceStatusReportRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    boot_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    obsolete_device_location_ = NULL;
    obsolete_system_ram_free_ = GOOGLE_LONGLONG(0);
    system_ram_total_ = GOOGLE_LONGLONG(0);
    os_update_status_ = NULL;
    running_kiosk_app_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceStatusReportRequest::~DeviceStatusReportRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceStatusReportRequest)
    SharedDtor();
}

void DeviceStatusReportRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    boot_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete obsolete_device_location_;
        delete os_update_status_;
        delete running_kiosk_app_;
    }
}

void DeviceStatusReportRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStatusReportRequest& DeviceStatusReportRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceStatusReportRequest* DeviceStatusReportRequest::default_instance_ = NULL;

DeviceStatusReportRequest* DeviceStatusReportRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceStatusReportRequest* n = new DeviceStatusReportRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceStatusReportRequest::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStatusReportRequest)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                               \
    _Pragma("clang diagnostic push")                                                                                \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(DeviceStatusReportRequest, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<DeviceStatusReportRequest*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 87u) {
        if (has_os_version()) {
            os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_firmware_version()) {
            firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_boot_mode()) {
            boot_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_browser_version()) {
            browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_obsolete_device_location()) {
            if (obsolete_device_location_ != NULL)
                obsolete_device_location_->::enterprise_management::OBSOLETE_DeviceLocation::Clear();
        }
    }
    ZR_(obsolete_system_ram_free_, system_ram_total_);
    if (_has_bits_[16 / 32] & 196608u) {
        if (has_os_update_status()) {
            if (os_update_status_ != NULL)
                os_update_status_->::enterprise_management::OsUpdateStatus::Clear();
        }
        if (has_running_kiosk_app()) {
            if (running_kiosk_app_ != NULL)
                running_kiosk_app_->::enterprise_management::AppStatus::Clear();
        }
    }

#undef ZR_HELPER_
#undef ZR_

    obsolete_active_time_.Clear();
    active_period_.Clear();
    network_interface_.Clear();
    user_.Clear();
    volume_info_.Clear();
    network_state_.Clear();
    cpu_utilization_pct_.Clear();
    system_ram_free_.Clear();
    cpu_temp_info_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceStatusReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceStatusReportRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStatusReportRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string os_version = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_os_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_firmware_version;
            break;
        }

        // optional string firmware_version = 2;
        case 2: {
            if (tag == 18) {
            parse_firmware_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_firmware_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_boot_mode;
            break;
        }

        // optional string boot_mode = 3;
        case 3: {
            if (tag == 26) {
            parse_boot_mode:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_boot_mode()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_OBSOLETE_active_time;
            break;
        }

        // repeated .enterprise_management.TimePeriod OBSOLETE_active_time = 4 [deprecated = true];
        case 4: {
            if (tag == 34) {
            parse_OBSOLETE_active_time:
                DO_(input->IncrementRecursionDepth());
            parse_loop_OBSOLETE_active_time:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_obsolete_active_time()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_loop_OBSOLETE_active_time;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(42))
                goto parse_browser_version;
            break;
        }

        // optional string browser_version = 5;
        case 5: {
            if (tag == 42) {
            parse_browser_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_browser_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_active_period;
            break;
        }

        // repeated .enterprise_management.ActiveTimePeriod active_period = 6;
        case 6: {
            if (tag == 50) {
            parse_active_period:
                DO_(input->IncrementRecursionDepth());
            parse_loop_active_period:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_active_period()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_loop_active_period;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(58))
                goto parse_OBSOLETE_device_location;
            break;
        }

        // optional .enterprise_management.OBSOLETE_DeviceLocation OBSOLETE_device_location = 7 [deprecated = true];
        case 7: {
            if (tag == 58) {
            parse_OBSOLETE_device_location:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_obsolete_device_location()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_network_interface;
            break;
        }

        // repeated .enterprise_management.NetworkInterface network_interface = 8;
        case 8: {
            if (tag == 66) {
            parse_network_interface:
                DO_(input->IncrementRecursionDepth());
            parse_loop_network_interface:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_network_interface()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_loop_network_interface;
            if (input->ExpectTag(74))
                goto parse_loop_user;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .enterprise_management.DeviceUser user = 9;
        case 9: {
            if (tag == 74) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_user:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_user()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_loop_user;
            if (input->ExpectTag(82))
                goto parse_loop_volume_info;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .enterprise_management.VolumeInfo volume_info = 10;
        case 10: {
            if (tag == 82) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_volume_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_volume_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_loop_volume_info;
            if (input->ExpectTag(90))
                goto parse_loop_network_state;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .enterprise_management.NetworkState network_state = 11;
        case 11: {
            if (tag == 90) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_network_state:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_network_state()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_loop_network_state;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(96))
                goto parse_cpu_utilization_pct;
            break;
        }

        // repeated int32 cpu_utilization_pct = 12;
        case 12: {
            if (tag == 96) {
            parse_cpu_utilization_pct:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    1, 96, input, this->mutable_cpu_utilization_pct())));
            } else if (tag == 98) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, this->mutable_cpu_utilization_pct())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(96))
                goto parse_cpu_utilization_pct;
            if (input->ExpectTag(104))
                goto parse_OBSOLETE_system_ram_free;
            break;
        }

        // optional int64 OBSOLETE_system_ram_free = 13 [deprecated = true];
        case 13: {
            if (tag == 104) {
            parse_OBSOLETE_system_ram_free:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &obsolete_system_ram_free_)));
                set_has_obsolete_system_ram_free();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(112))
                goto parse_system_ram_total;
            break;
        }

        // optional int64 system_ram_total = 14;
        case 14: {
            if (tag == 112) {
            parse_system_ram_total:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &system_ram_total_)));
                set_has_system_ram_total();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_system_ram_free;
            break;
        }

        // repeated int64 system_ram_free = 15;
        case 15: {
            if (tag == 120) {
            parse_system_ram_free:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    1, 120, input, this->mutable_system_ram_free())));
            } else if (tag == 122) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, this->mutable_system_ram_free())));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_system_ram_free;
            if (input->ExpectTag(130))
                goto parse_cpu_temp_info;
            break;
        }

        // repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
        case 16: {
            if (tag == 130) {
            parse_cpu_temp_info:
                DO_(input->IncrementRecursionDepth());
            parse_loop_cpu_temp_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_cpu_temp_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(130))
                goto parse_loop_cpu_temp_info;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(138))
                goto parse_os_update_status;
            break;
        }

        // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
        case 17: {
            if (tag == 138) {
            parse_os_update_status:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_os_update_status()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(146))
                goto parse_running_kiosk_app;
            break;
        }

        // optional .enterprise_management.AppStatus running_kiosk_app = 18;
        case 18: {
            if (tag == 146) {
            parse_running_kiosk_app:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_running_kiosk_app()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStatusReportRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStatusReportRequest)
    return false;
#undef DO_
}

void DeviceStatusReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStatusReportRequest)
    // optional string os_version = 1;
    if (has_os_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->os_version(), output);
    }

    // optional string firmware_version = 2;
    if (has_firmware_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->firmware_version(), output);
    }

    // optional string boot_mode = 3;
    if (has_boot_mode()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->boot_mode(), output);
    }

    // repeated .enterprise_management.TimePeriod OBSOLETE_active_time = 4 [deprecated = true];
    for (unsigned int i = 0, n = this->obsolete_active_time_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, this->obsolete_active_time(i), output);
    }

    // optional string browser_version = 5;
    if (has_browser_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->browser_version(), output);
    }

    // repeated .enterprise_management.ActiveTimePeriod active_period = 6;
    for (unsigned int i = 0, n = this->active_period_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, this->active_period(i), output);
    }

    // optional .enterprise_management.OBSOLETE_DeviceLocation OBSOLETE_device_location = 7 [deprecated = true];
    if (has_obsolete_device_location()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, *this->obsolete_device_location_, output);
    }

    // repeated .enterprise_management.NetworkInterface network_interface = 8;
    for (unsigned int i = 0, n = this->network_interface_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, this->network_interface(i), output);
    }

    // repeated .enterprise_management.DeviceUser user = 9;
    for (unsigned int i = 0, n = this->user_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, this->user(i), output);
    }

    // repeated .enterprise_management.VolumeInfo volume_info = 10;
    for (unsigned int i = 0, n = this->volume_info_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            10, this->volume_info(i), output);
    }

    // repeated .enterprise_management.NetworkState network_state = 11;
    for (unsigned int i = 0, n = this->network_state_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, this->network_state(i), output);
    }

    // repeated int32 cpu_utilization_pct = 12;
    for (int i = 0; i < this->cpu_utilization_pct_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
            12, this->cpu_utilization_pct(i), output);
    }

    // optional int64 OBSOLETE_system_ram_free = 13 [deprecated = true];
    if (has_obsolete_system_ram_free()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->obsolete_system_ram_free(), output);
    }

    // optional int64 system_ram_total = 14;
    if (has_system_ram_total()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->system_ram_total(), output);
    }

    // repeated int64 system_ram_free = 15;
    for (int i = 0; i < this->system_ram_free_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(
            15, this->system_ram_free(i), output);
    }

    // repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
    for (unsigned int i = 0, n = this->cpu_temp_info_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            16, this->cpu_temp_info(i), output);
    }

    // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
    if (has_os_update_status()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            17, *this->os_update_status_, output);
    }

    // optional .enterprise_management.AppStatus running_kiosk_app = 18;
    if (has_running_kiosk_app()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            18, *this->running_kiosk_app_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStatusReportRequest)
}

int DeviceStatusReportRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStatusReportRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 87u) {
        // optional string os_version = 1;
        if (has_os_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->os_version());
        }

        // optional string firmware_version = 2;
        if (has_firmware_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->firmware_version());
        }

        // optional string boot_mode = 3;
        if (has_boot_mode()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->boot_mode());
        }

        // optional string browser_version = 5;
        if (has_browser_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->browser_version());
        }

        // optional .enterprise_management.OBSOLETE_DeviceLocation OBSOLETE_device_location = 7 [deprecated = true];
        if (has_obsolete_device_location()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->obsolete_device_location_);
        }
    }
    if (_has_bits_[12 / 32] & 12288u) {
        // optional int64 OBSOLETE_system_ram_free = 13 [deprecated = true];
        if (has_obsolete_system_ram_free()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->obsolete_system_ram_free());
        }

        // optional int64 system_ram_total = 14;
        if (has_system_ram_total()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->system_ram_total());
        }
    }
    if (_has_bits_[16 / 32] & 196608u) {
        // optional .enterprise_management.OsUpdateStatus os_update_status = 17;
        if (has_os_update_status()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->os_update_status_);
        }

        // optional .enterprise_management.AppStatus running_kiosk_app = 18;
        if (has_running_kiosk_app()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->running_kiosk_app_);
        }
    }
    // repeated .enterprise_management.TimePeriod OBSOLETE_active_time = 4 [deprecated = true];
    total_size += 1 * this->obsolete_active_time_size();
    for (int i = 0; i < this->obsolete_active_time_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->obsolete_active_time(i));
    }

    // repeated .enterprise_management.ActiveTimePeriod active_period = 6;
    total_size += 1 * this->active_period_size();
    for (int i = 0; i < this->active_period_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->active_period(i));
    }

    // repeated .enterprise_management.NetworkInterface network_interface = 8;
    total_size += 1 * this->network_interface_size();
    for (int i = 0; i < this->network_interface_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->network_interface(i));
    }

    // repeated .enterprise_management.DeviceUser user = 9;
    total_size += 1 * this->user_size();
    for (int i = 0; i < this->user_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->user(i));
    }

    // repeated .enterprise_management.VolumeInfo volume_info = 10;
    total_size += 1 * this->volume_info_size();
    for (int i = 0; i < this->volume_info_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->volume_info(i));
    }

    // repeated .enterprise_management.NetworkState network_state = 11;
    total_size += 1 * this->network_state_size();
    for (int i = 0; i < this->network_state_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->network_state(i));
    }

    // repeated int32 cpu_utilization_pct = 12;
    {
        int data_size = 0;
        for (int i = 0; i < this->cpu_utilization_pct_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int32Size(this->cpu_utilization_pct(i));
        }
        total_size += 1 * this->cpu_utilization_pct_size() + data_size;
    }

    // repeated int64 system_ram_free = 15;
    {
        int data_size = 0;
        for (int i = 0; i < this->system_ram_free_size(); i++) {
            data_size += ::google::protobuf::internal::WireFormatLite::
                Int64Size(this->system_ram_free(i));
        }
        total_size += 1 * this->system_ram_free_size() + data_size;
    }

    // repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
    total_size += 2 * this->cpu_temp_info_size();
    for (int i = 0; i < this->cpu_temp_info_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->cpu_temp_info(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceStatusReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceStatusReportRequest*>(&from));
}

void DeviceStatusReportRequest::MergeFrom(const DeviceStatusReportRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStatusReportRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    obsolete_active_time_.MergeFrom(from.obsolete_active_time_);
    active_period_.MergeFrom(from.active_period_);
    network_interface_.MergeFrom(from.network_interface_);
    user_.MergeFrom(from.user_);
    volume_info_.MergeFrom(from.volume_info_);
    network_state_.MergeFrom(from.network_state_);
    cpu_utilization_pct_.MergeFrom(from.cpu_utilization_pct_);
    system_ram_free_.MergeFrom(from.system_ram_free_);
    cpu_temp_info_.MergeFrom(from.cpu_temp_info_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_os_version()) {
            set_has_os_version();
            os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
        }
        if (from.has_firmware_version()) {
            set_has_firmware_version();
            firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
        }
        if (from.has_boot_mode()) {
            set_has_boot_mode();
            boot_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boot_mode_);
        }
        if (from.has_browser_version()) {
            set_has_browser_version();
            browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_version_);
        }
        if (from.has_obsolete_device_location()) {
            mutable_obsolete_device_location()->::enterprise_management::OBSOLETE_DeviceLocation::MergeFrom(from.obsolete_device_location());
        }
    }
    if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
        if (from.has_obsolete_system_ram_free()) {
            set_obsolete_system_ram_free(from.obsolete_system_ram_free());
        }
        if (from.has_system_ram_total()) {
            set_system_ram_total(from.system_ram_total());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_os_update_status()) {
            mutable_os_update_status()->::enterprise_management::OsUpdateStatus::MergeFrom(from.os_update_status());
        }
        if (from.has_running_kiosk_app()) {
            mutable_running_kiosk_app()->::enterprise_management::AppStatus::MergeFrom(from.running_kiosk_app());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceStatusReportRequest::CopyFrom(const DeviceStatusReportRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStatusReportRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceStatusReportRequest::IsInitialized() const
{

    if (!::google::protobuf::internal::AllAreInitialized(this->user()))
        return false;
    return true;
}

void DeviceStatusReportRequest::Swap(DeviceStatusReportRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceStatusReportRequest::InternalSwap(DeviceStatusReportRequest* other)
{
    os_version_.Swap(&other->os_version_);
    firmware_version_.Swap(&other->firmware_version_);
    boot_mode_.Swap(&other->boot_mode_);
    obsolete_active_time_.UnsafeArenaSwap(&other->obsolete_active_time_);
    browser_version_.Swap(&other->browser_version_);
    active_period_.UnsafeArenaSwap(&other->active_period_);
    std::swap(obsolete_device_location_, other->obsolete_device_location_);
    network_interface_.UnsafeArenaSwap(&other->network_interface_);
    user_.UnsafeArenaSwap(&other->user_);
    volume_info_.UnsafeArenaSwap(&other->volume_info_);
    network_state_.UnsafeArenaSwap(&other->network_state_);
    cpu_utilization_pct_.UnsafeArenaSwap(&other->cpu_utilization_pct_);
    std::swap(obsolete_system_ram_free_, other->obsolete_system_ram_free_);
    std::swap(system_ram_total_, other->system_ram_total_);
    system_ram_free_.UnsafeArenaSwap(&other->system_ram_free_);
    cpu_temp_info_.UnsafeArenaSwap(&other->cpu_temp_info_);
    std::swap(os_update_status_, other->os_update_status_);
    std::swap(running_kiosk_app_, other->running_kiosk_app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStatusReportRequest::GetTypeName() const
{
    return "enterprise_management.DeviceStatusReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStatusReportRequest

// optional string os_version = 1;
bool DeviceStatusReportRequest::has_os_version() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStatusReportRequest::set_has_os_version()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceStatusReportRequest::clear_has_os_version()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceStatusReportRequest::clear_os_version()
{
    os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_os_version();
}
const ::std::string& DeviceStatusReportRequest::os_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.os_version)
    return os_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_os_version(const ::std::string& value)
{
    set_has_os_version();
    os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.os_version)
}
void DeviceStatusReportRequest::set_os_version(const char* value)
{
    set_has_os_version();
    os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.os_version)
}
void DeviceStatusReportRequest::set_os_version(const char* value, size_t size)
{
    set_has_os_version();
    os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.os_version)
}
::std::string* DeviceStatusReportRequest::mutable_os_version()
{
    set_has_os_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.os_version)
    return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_os_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.os_version)
    clear_has_os_version();
    return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_os_version(::std::string* os_version)
{
    if (os_version != NULL) {
        set_has_os_version();
    } else {
        clear_has_os_version();
    }
    os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.os_version)
}

// optional string firmware_version = 2;
bool DeviceStatusReportRequest::has_firmware_version() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceStatusReportRequest::set_has_firmware_version()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceStatusReportRequest::clear_has_firmware_version()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceStatusReportRequest::clear_firmware_version()
{
    firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_firmware_version();
}
const ::std::string& DeviceStatusReportRequest::firmware_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.firmware_version)
    return firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_firmware_version(const ::std::string& value)
{
    set_has_firmware_version();
    firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
void DeviceStatusReportRequest::set_firmware_version(const char* value)
{
    set_has_firmware_version();
    firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
void DeviceStatusReportRequest::set_firmware_version(const char* value, size_t size)
{
    set_has_firmware_version();
    firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.firmware_version)
}
::std::string* DeviceStatusReportRequest::mutable_firmware_version()
{
    set_has_firmware_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.firmware_version)
    return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_firmware_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.firmware_version)
    clear_has_firmware_version();
    return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_firmware_version(::std::string* firmware_version)
{
    if (firmware_version != NULL) {
        set_has_firmware_version();
    } else {
        clear_has_firmware_version();
    }
    firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.firmware_version)
}

// optional string boot_mode = 3;
bool DeviceStatusReportRequest::has_boot_mode() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceStatusReportRequest::set_has_boot_mode()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceStatusReportRequest::clear_has_boot_mode()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceStatusReportRequest::clear_boot_mode()
{
    boot_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_boot_mode();
}
const ::std::string& DeviceStatusReportRequest::boot_mode() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.boot_mode)
    return boot_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_boot_mode(const ::std::string& value)
{
    set_has_boot_mode();
    boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
void DeviceStatusReportRequest::set_boot_mode(const char* value)
{
    set_has_boot_mode();
    boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
void DeviceStatusReportRequest::set_boot_mode(const char* value, size_t size)
{
    set_has_boot_mode();
    boot_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.boot_mode)
}
::std::string* DeviceStatusReportRequest::mutable_boot_mode()
{
    set_has_boot_mode();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.boot_mode)
    return boot_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_boot_mode()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.boot_mode)
    clear_has_boot_mode();
    return boot_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_boot_mode(::std::string* boot_mode)
{
    if (boot_mode != NULL) {
        set_has_boot_mode();
    } else {
        clear_has_boot_mode();
    }
    boot_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boot_mode);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.boot_mode)
}

// repeated .enterprise_management.TimePeriod OBSOLETE_active_time = 4 [deprecated = true];
int DeviceStatusReportRequest::obsolete_active_time_size() const
{
    return obsolete_active_time_.size();
}
void DeviceStatusReportRequest::clear_obsolete_active_time()
{
    obsolete_active_time_.Clear();
}
const ::enterprise_management::TimePeriod& DeviceStatusReportRequest::obsolete_active_time(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.OBSOLETE_active_time)
    return obsolete_active_time_.Get(index);
}
::enterprise_management::TimePeriod* DeviceStatusReportRequest::mutable_obsolete_active_time(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.OBSOLETE_active_time)
    return obsolete_active_time_.Mutable(index);
}
::enterprise_management::TimePeriod* DeviceStatusReportRequest::add_obsolete_active_time()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.OBSOLETE_active_time)
    return obsolete_active_time_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::TimePeriod>*
DeviceStatusReportRequest::mutable_obsolete_active_time()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.OBSOLETE_active_time)
    return &obsolete_active_time_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::TimePeriod>&
DeviceStatusReportRequest::obsolete_active_time() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.OBSOLETE_active_time)
    return obsolete_active_time_;
}

// optional string browser_version = 5;
bool DeviceStatusReportRequest::has_browser_version() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceStatusReportRequest::set_has_browser_version()
{
    _has_bits_[0] |= 0x00000010u;
}
void DeviceStatusReportRequest::clear_has_browser_version()
{
    _has_bits_[0] &= ~0x00000010u;
}
void DeviceStatusReportRequest::clear_browser_version()
{
    browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_browser_version();
}
const ::std::string& DeviceStatusReportRequest::browser_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.browser_version)
    return browser_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_browser_version(const ::std::string& value)
{
    set_has_browser_version();
    browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.browser_version)
}
void DeviceStatusReportRequest::set_browser_version(const char* value)
{
    set_has_browser_version();
    browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportRequest.browser_version)
}
void DeviceStatusReportRequest::set_browser_version(const char* value, size_t size)
{
    set_has_browser_version();
    browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportRequest.browser_version)
}
::std::string* DeviceStatusReportRequest::mutable_browser_version()
{
    set_has_browser_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.browser_version)
    return browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportRequest::release_browser_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.browser_version)
    clear_has_browser_version();
    return browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportRequest::set_allocated_browser_version(::std::string* browser_version)
{
    if (browser_version != NULL) {
        set_has_browser_version();
    } else {
        clear_has_browser_version();
    }
    browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.browser_version)
}

// repeated .enterprise_management.ActiveTimePeriod active_period = 6;
int DeviceStatusReportRequest::active_period_size() const
{
    return active_period_.size();
}
void DeviceStatusReportRequest::clear_active_period()
{
    active_period_.Clear();
}
const ::enterprise_management::ActiveTimePeriod& DeviceStatusReportRequest::active_period(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.active_period)
    return active_period_.Get(index);
}
::enterprise_management::ActiveTimePeriod* DeviceStatusReportRequest::mutable_active_period(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.active_period)
    return active_period_.Mutable(index);
}
::enterprise_management::ActiveTimePeriod* DeviceStatusReportRequest::add_active_period()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.active_period)
    return active_period_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::ActiveTimePeriod>*
DeviceStatusReportRequest::mutable_active_period()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.active_period)
    return &active_period_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::ActiveTimePeriod>&
DeviceStatusReportRequest::active_period() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.active_period)
    return active_period_;
}

// optional .enterprise_management.OBSOLETE_DeviceLocation OBSOLETE_device_location = 7 [deprecated = true];
bool DeviceStatusReportRequest::has_obsolete_device_location() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceStatusReportRequest::set_has_obsolete_device_location()
{
    _has_bits_[0] |= 0x00000040u;
}
void DeviceStatusReportRequest::clear_has_obsolete_device_location()
{
    _has_bits_[0] &= ~0x00000040u;
}
void DeviceStatusReportRequest::clear_obsolete_device_location()
{
    if (obsolete_device_location_ != NULL)
        obsolete_device_location_->::enterprise_management::OBSOLETE_DeviceLocation::Clear();
    clear_has_obsolete_device_location();
}
const ::enterprise_management::OBSOLETE_DeviceLocation& DeviceStatusReportRequest::obsolete_device_location() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.OBSOLETE_device_location)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return obsolete_device_location_ != NULL ? *obsolete_device_location_ : *default_instance().obsolete_device_location_;
#else
    return obsolete_device_location_ != NULL ? *obsolete_device_location_ : *default_instance_->obsolete_device_location_;
#endif
}
::enterprise_management::OBSOLETE_DeviceLocation* DeviceStatusReportRequest::mutable_obsolete_device_location()
{
    set_has_obsolete_device_location();
    if (obsolete_device_location_ == NULL) {
        obsolete_device_location_ = new ::enterprise_management::OBSOLETE_DeviceLocation;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.OBSOLETE_device_location)
    return obsolete_device_location_;
}
::enterprise_management::OBSOLETE_DeviceLocation* DeviceStatusReportRequest::release_obsolete_device_location()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.OBSOLETE_device_location)
    clear_has_obsolete_device_location();
    ::enterprise_management::OBSOLETE_DeviceLocation* temp = obsolete_device_location_;
    obsolete_device_location_ = NULL;
    return temp;
}
void DeviceStatusReportRequest::set_allocated_obsolete_device_location(::enterprise_management::OBSOLETE_DeviceLocation* obsolete_device_location)
{
    delete obsolete_device_location_;
    obsolete_device_location_ = obsolete_device_location;
    if (obsolete_device_location) {
        set_has_obsolete_device_location();
    } else {
        clear_has_obsolete_device_location();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.OBSOLETE_device_location)
}

// repeated .enterprise_management.NetworkInterface network_interface = 8;
int DeviceStatusReportRequest::network_interface_size() const
{
    return network_interface_.size();
}
void DeviceStatusReportRequest::clear_network_interface()
{
    network_interface_.Clear();
}
const ::enterprise_management::NetworkInterface& DeviceStatusReportRequest::network_interface(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.network_interface)
    return network_interface_.Get(index);
}
::enterprise_management::NetworkInterface* DeviceStatusReportRequest::mutable_network_interface(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.network_interface)
    return network_interface_.Mutable(index);
}
::enterprise_management::NetworkInterface* DeviceStatusReportRequest::add_network_interface()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.network_interface)
    return network_interface_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::NetworkInterface>*
DeviceStatusReportRequest::mutable_network_interface()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.network_interface)
    return &network_interface_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::NetworkInterface>&
DeviceStatusReportRequest::network_interface() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.network_interface)
    return network_interface_;
}

// repeated .enterprise_management.DeviceUser user = 9;
int DeviceStatusReportRequest::user_size() const
{
    return user_.size();
}
void DeviceStatusReportRequest::clear_user()
{
    user_.Clear();
}
const ::enterprise_management::DeviceUser& DeviceStatusReportRequest::user(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.user)
    return user_.Get(index);
}
::enterprise_management::DeviceUser* DeviceStatusReportRequest::mutable_user(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.user)
    return user_.Mutable(index);
}
::enterprise_management::DeviceUser* DeviceStatusReportRequest::add_user()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.user)
    return user_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::DeviceUser>*
DeviceStatusReportRequest::mutable_user()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.user)
    return &user_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::DeviceUser>&
DeviceStatusReportRequest::user() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.user)
    return user_;
}

// repeated .enterprise_management.VolumeInfo volume_info = 10;
int DeviceStatusReportRequest::volume_info_size() const
{
    return volume_info_.size();
}
void DeviceStatusReportRequest::clear_volume_info()
{
    volume_info_.Clear();
}
const ::enterprise_management::VolumeInfo& DeviceStatusReportRequest::volume_info(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.volume_info)
    return volume_info_.Get(index);
}
::enterprise_management::VolumeInfo* DeviceStatusReportRequest::mutable_volume_info(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.volume_info)
    return volume_info_.Mutable(index);
}
::enterprise_management::VolumeInfo* DeviceStatusReportRequest::add_volume_info()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.volume_info)
    return volume_info_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::VolumeInfo>*
DeviceStatusReportRequest::mutable_volume_info()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.volume_info)
    return &volume_info_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::VolumeInfo>&
DeviceStatusReportRequest::volume_info() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.volume_info)
    return volume_info_;
}

// repeated .enterprise_management.NetworkState network_state = 11;
int DeviceStatusReportRequest::network_state_size() const
{
    return network_state_.size();
}
void DeviceStatusReportRequest::clear_network_state()
{
    network_state_.Clear();
}
const ::enterprise_management::NetworkState& DeviceStatusReportRequest::network_state(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.network_state)
    return network_state_.Get(index);
}
::enterprise_management::NetworkState* DeviceStatusReportRequest::mutable_network_state(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.network_state)
    return network_state_.Mutable(index);
}
::enterprise_management::NetworkState* DeviceStatusReportRequest::add_network_state()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.network_state)
    return network_state_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::NetworkState>*
DeviceStatusReportRequest::mutable_network_state()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.network_state)
    return &network_state_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::NetworkState>&
DeviceStatusReportRequest::network_state() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.network_state)
    return network_state_;
}

// repeated int32 cpu_utilization_pct = 12;
int DeviceStatusReportRequest::cpu_utilization_pct_size() const
{
    return cpu_utilization_pct_.size();
}
void DeviceStatusReportRequest::clear_cpu_utilization_pct()
{
    cpu_utilization_pct_.Clear();
}
::google::protobuf::int32 DeviceStatusReportRequest::cpu_utilization_pct(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
    return cpu_utilization_pct_.Get(index);
}
void DeviceStatusReportRequest::set_cpu_utilization_pct(int index, ::google::protobuf::int32 value)
{
    cpu_utilization_pct_.Set(index, value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
}
void DeviceStatusReportRequest::add_cpu_utilization_pct(::google::protobuf::int32 value)
{
    cpu_utilization_pct_.Add(value);
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
}
const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
DeviceStatusReportRequest::cpu_utilization_pct() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
    return cpu_utilization_pct_;
}
::google::protobuf::RepeatedField<::google::protobuf::int32>*
DeviceStatusReportRequest::mutable_cpu_utilization_pct()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.cpu_utilization_pct)
    return &cpu_utilization_pct_;
}

// optional int64 OBSOLETE_system_ram_free = 13 [deprecated = true];
bool DeviceStatusReportRequest::has_obsolete_system_ram_free() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void DeviceStatusReportRequest::set_has_obsolete_system_ram_free()
{
    _has_bits_[0] |= 0x00001000u;
}
void DeviceStatusReportRequest::clear_has_obsolete_system_ram_free()
{
    _has_bits_[0] &= ~0x00001000u;
}
void DeviceStatusReportRequest::clear_obsolete_system_ram_free()
{
    obsolete_system_ram_free_ = GOOGLE_LONGLONG(0);
    clear_has_obsolete_system_ram_free();
}
::google::protobuf::int64 DeviceStatusReportRequest::obsolete_system_ram_free() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.OBSOLETE_system_ram_free)
    return obsolete_system_ram_free_;
}
void DeviceStatusReportRequest::set_obsolete_system_ram_free(::google::protobuf::int64 value)
{
    set_has_obsolete_system_ram_free();
    obsolete_system_ram_free_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.OBSOLETE_system_ram_free)
}

// optional int64 system_ram_total = 14;
bool DeviceStatusReportRequest::has_system_ram_total() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void DeviceStatusReportRequest::set_has_system_ram_total()
{
    _has_bits_[0] |= 0x00002000u;
}
void DeviceStatusReportRequest::clear_has_system_ram_total()
{
    _has_bits_[0] &= ~0x00002000u;
}
void DeviceStatusReportRequest::clear_system_ram_total()
{
    system_ram_total_ = GOOGLE_LONGLONG(0);
    clear_has_system_ram_total();
}
::google::protobuf::int64 DeviceStatusReportRequest::system_ram_total() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.system_ram_total)
    return system_ram_total_;
}
void DeviceStatusReportRequest::set_system_ram_total(::google::protobuf::int64 value)
{
    set_has_system_ram_total();
    system_ram_total_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.system_ram_total)
}

// repeated int64 system_ram_free = 15;
int DeviceStatusReportRequest::system_ram_free_size() const
{
    return system_ram_free_.size();
}
void DeviceStatusReportRequest::clear_system_ram_free()
{
    system_ram_free_.Clear();
}
::google::protobuf::int64 DeviceStatusReportRequest::system_ram_free(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.system_ram_free)
    return system_ram_free_.Get(index);
}
void DeviceStatusReportRequest::set_system_ram_free(int index, ::google::protobuf::int64 value)
{
    system_ram_free_.Set(index, value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportRequest.system_ram_free)
}
void DeviceStatusReportRequest::add_system_ram_free(::google::protobuf::int64 value)
{
    system_ram_free_.Add(value);
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.system_ram_free)
}
const ::google::protobuf::RepeatedField<::google::protobuf::int64>&
DeviceStatusReportRequest::system_ram_free() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.system_ram_free)
    return system_ram_free_;
}
::google::protobuf::RepeatedField<::google::protobuf::int64>*
DeviceStatusReportRequest::mutable_system_ram_free()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.system_ram_free)
    return &system_ram_free_;
}

// repeated .enterprise_management.CPUTempInfo cpu_temp_info = 16;
int DeviceStatusReportRequest::cpu_temp_info_size() const
{
    return cpu_temp_info_.size();
}
void DeviceStatusReportRequest::clear_cpu_temp_info()
{
    cpu_temp_info_.Clear();
}
const ::enterprise_management::CPUTempInfo& DeviceStatusReportRequest::cpu_temp_info(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
    return cpu_temp_info_.Get(index);
}
::enterprise_management::CPUTempInfo* DeviceStatusReportRequest::mutable_cpu_temp_info(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
    return cpu_temp_info_.Mutable(index);
}
::enterprise_management::CPUTempInfo* DeviceStatusReportRequest::add_cpu_temp_info()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
    return cpu_temp_info_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::CPUTempInfo>*
DeviceStatusReportRequest::mutable_cpu_temp_info()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
    return &cpu_temp_info_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::CPUTempInfo>&
DeviceStatusReportRequest::cpu_temp_info() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStatusReportRequest.cpu_temp_info)
    return cpu_temp_info_;
}

// optional .enterprise_management.OsUpdateStatus os_update_status = 17;
bool DeviceStatusReportRequest::has_os_update_status() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void DeviceStatusReportRequest::set_has_os_update_status()
{
    _has_bits_[0] |= 0x00010000u;
}
void DeviceStatusReportRequest::clear_has_os_update_status()
{
    _has_bits_[0] &= ~0x00010000u;
}
void DeviceStatusReportRequest::clear_os_update_status()
{
    if (os_update_status_ != NULL)
        os_update_status_->::enterprise_management::OsUpdateStatus::Clear();
    clear_has_os_update_status();
}
const ::enterprise_management::OsUpdateStatus& DeviceStatusReportRequest::os_update_status() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.os_update_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return os_update_status_ != NULL ? *os_update_status_ : *default_instance().os_update_status_;
#else
    return os_update_status_ != NULL ? *os_update_status_ : *default_instance_->os_update_status_;
#endif
}
::enterprise_management::OsUpdateStatus* DeviceStatusReportRequest::mutable_os_update_status()
{
    set_has_os_update_status();
    if (os_update_status_ == NULL) {
        os_update_status_ = new ::enterprise_management::OsUpdateStatus;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.os_update_status)
    return os_update_status_;
}
::enterprise_management::OsUpdateStatus* DeviceStatusReportRequest::release_os_update_status()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.os_update_status)
    clear_has_os_update_status();
    ::enterprise_management::OsUpdateStatus* temp = os_update_status_;
    os_update_status_ = NULL;
    return temp;
}
void DeviceStatusReportRequest::set_allocated_os_update_status(::enterprise_management::OsUpdateStatus* os_update_status)
{
    delete os_update_status_;
    os_update_status_ = os_update_status;
    if (os_update_status) {
        set_has_os_update_status();
    } else {
        clear_has_os_update_status();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.os_update_status)
}

// optional .enterprise_management.AppStatus running_kiosk_app = 18;
bool DeviceStatusReportRequest::has_running_kiosk_app() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void DeviceStatusReportRequest::set_has_running_kiosk_app()
{
    _has_bits_[0] |= 0x00020000u;
}
void DeviceStatusReportRequest::clear_has_running_kiosk_app()
{
    _has_bits_[0] &= ~0x00020000u;
}
void DeviceStatusReportRequest::clear_running_kiosk_app()
{
    if (running_kiosk_app_ != NULL)
        running_kiosk_app_->::enterprise_management::AppStatus::Clear();
    clear_has_running_kiosk_app();
}
const ::enterprise_management::AppStatus& DeviceStatusReportRequest::running_kiosk_app() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return running_kiosk_app_ != NULL ? *running_kiosk_app_ : *default_instance().running_kiosk_app_;
#else
    return running_kiosk_app_ != NULL ? *running_kiosk_app_ : *default_instance_->running_kiosk_app_;
#endif
}
::enterprise_management::AppStatus* DeviceStatusReportRequest::mutable_running_kiosk_app()
{
    set_has_running_kiosk_app();
    if (running_kiosk_app_ == NULL) {
        running_kiosk_app_ = new ::enterprise_management::AppStatus;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
    return running_kiosk_app_;
}
::enterprise_management::AppStatus* DeviceStatusReportRequest::release_running_kiosk_app()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
    clear_has_running_kiosk_app();
    ::enterprise_management::AppStatus* temp = running_kiosk_app_;
    running_kiosk_app_ = NULL;
    return temp;
}
void DeviceStatusReportRequest::set_allocated_running_kiosk_app(::enterprise_management::AppStatus* running_kiosk_app)
{
    delete running_kiosk_app_;
    running_kiosk_app_ = running_kiosk_app;
    if (running_kiosk_app) {
        set_has_running_kiosk_app();
    } else {
        clear_has_running_kiosk_app();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportRequest.running_kiosk_app)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForOsUpdateStatus(
    OsUpdateStatus* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool OsUpdateStatus_UpdateStatus_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_UP_TO_DATE;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_IMAGE_DOWNLOAD_NOT_STARTED;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_IMAGE_DOWNLOAD_IN_PROGRESS;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::OS_UPDATE_NEED_REBOOT;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::UpdateStatus_MIN;
const OsUpdateStatus_UpdateStatus OsUpdateStatus::UpdateStatus_MAX;
const int OsUpdateStatus::UpdateStatus_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OsUpdateStatus::kUpdateStatusFieldNumber;
const int OsUpdateStatus::kNewPlatformVersionFieldNumber;
const int OsUpdateStatus::kNewRequiredPlatformVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

OsUpdateStatus::OsUpdateStatus()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.OsUpdateStatus)
}

void OsUpdateStatus::InitAsDefaultInstance()
{
}

OsUpdateStatus::OsUpdateStatus(const OsUpdateStatus& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.OsUpdateStatus)
}

void OsUpdateStatus::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    update_status_ = 0;
    new_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_required_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsUpdateStatus::~OsUpdateStatus()
{
    // @@protoc_insertion_point(destructor:enterprise_management.OsUpdateStatus)
    SharedDtor();
}

void OsUpdateStatus::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    new_required_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void OsUpdateStatus::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OsUpdateStatus& OsUpdateStatus::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

OsUpdateStatus* OsUpdateStatus::default_instance_ = NULL;

OsUpdateStatus* OsUpdateStatus::New(::google::protobuf::Arena* arena) const
{
    OsUpdateStatus* n = new OsUpdateStatus;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void OsUpdateStatus::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.OsUpdateStatus)
    if (_has_bits_[0 / 32] & 7u) {
        update_status_ = 0;
        if (has_new_platform_version()) {
            new_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_new_required_platform_version()) {
            new_required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OsUpdateStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForOsUpdateStatus, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.OsUpdateStatus)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(value)) {
                    set_update_status(static_cast<::enterprise_management::OsUpdateStatus_UpdateStatus>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_new_platform_version;
            break;
        }

        // optional string new_platform_version = 2;
        case 2: {
            if (tag == 18) {
            parse_new_platform_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_new_platform_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_new_required_platform_version;
            break;
        }

        // optional string new_required_platform_version = 3;
        case 3: {
            if (tag == 26) {
            parse_new_required_platform_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_new_required_platform_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.OsUpdateStatus)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.OsUpdateStatus)
    return false;
#undef DO_
}

void OsUpdateStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.OsUpdateStatus)
    // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
    if (has_update_status()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->update_status(), output);
    }

    // optional string new_platform_version = 2;
    if (has_new_platform_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->new_platform_version(), output);
    }

    // optional string new_required_platform_version = 3;
    if (has_new_required_platform_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->new_required_platform_version(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.OsUpdateStatus)
}

int OsUpdateStatus::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.OsUpdateStatus)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
        if (has_update_status()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_status());
        }

        // optional string new_platform_version = 2;
        if (has_new_platform_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->new_platform_version());
        }

        // optional string new_required_platform_version = 3;
        if (has_new_required_platform_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->new_required_platform_version());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void OsUpdateStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const OsUpdateStatus*>(&from));
}

void OsUpdateStatus::MergeFrom(const OsUpdateStatus& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.OsUpdateStatus)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_update_status()) {
            set_update_status(from.update_status());
        }
        if (from.has_new_platform_version()) {
            set_has_new_platform_version();
            new_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_platform_version_);
        }
        if (from.has_new_required_platform_version()) {
            set_has_new_required_platform_version();
            new_required_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_required_platform_version_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void OsUpdateStatus::CopyFrom(const OsUpdateStatus& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.OsUpdateStatus)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool OsUpdateStatus::IsInitialized() const
{

    return true;
}

void OsUpdateStatus::Swap(OsUpdateStatus* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void OsUpdateStatus::InternalSwap(OsUpdateStatus* other)
{
    std::swap(update_status_, other->update_status_);
    new_platform_version_.Swap(&other->new_platform_version_);
    new_required_platform_version_.Swap(&other->new_required_platform_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string OsUpdateStatus::GetTypeName() const
{
    return "enterprise_management.OsUpdateStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OsUpdateStatus

// optional .enterprise_management.OsUpdateStatus.UpdateStatus update_status = 1;
bool OsUpdateStatus::has_update_status() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void OsUpdateStatus::set_has_update_status()
{
    _has_bits_[0] |= 0x00000001u;
}
void OsUpdateStatus::clear_has_update_status()
{
    _has_bits_[0] &= ~0x00000001u;
}
void OsUpdateStatus::clear_update_status()
{
    update_status_ = 0;
    clear_has_update_status();
}
::enterprise_management::OsUpdateStatus_UpdateStatus OsUpdateStatus::update_status() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.update_status)
    return static_cast<::enterprise_management::OsUpdateStatus_UpdateStatus>(update_status_);
}
void OsUpdateStatus::set_update_status(::enterprise_management::OsUpdateStatus_UpdateStatus value)
{
    assert(::enterprise_management::OsUpdateStatus_UpdateStatus_IsValid(value));
    set_has_update_status();
    update_status_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.update_status)
}

// optional string new_platform_version = 2;
bool OsUpdateStatus::has_new_platform_version() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void OsUpdateStatus::set_has_new_platform_version()
{
    _has_bits_[0] |= 0x00000002u;
}
void OsUpdateStatus::clear_has_new_platform_version()
{
    _has_bits_[0] &= ~0x00000002u;
}
void OsUpdateStatus::clear_new_platform_version()
{
    new_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_platform_version();
}
const ::std::string& OsUpdateStatus::new_platform_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.new_platform_version)
    return new_platform_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OsUpdateStatus::set_new_platform_version(const ::std::string& value)
{
    set_has_new_platform_version();
    new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.new_platform_version)
}
void OsUpdateStatus::set_new_platform_version(const char* value)
{
    set_has_new_platform_version();
    new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.OsUpdateStatus.new_platform_version)
}
void OsUpdateStatus::set_new_platform_version(const char* value, size_t size)
{
    set_has_new_platform_version();
    new_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.OsUpdateStatus.new_platform_version)
}
::std::string* OsUpdateStatus::mutable_new_platform_version()
{
    set_has_new_platform_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.OsUpdateStatus.new_platform_version)
    return new_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OsUpdateStatus::release_new_platform_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.OsUpdateStatus.new_platform_version)
    clear_has_new_platform_version();
    return new_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OsUpdateStatus::set_allocated_new_platform_version(::std::string* new_platform_version)
{
    if (new_platform_version != NULL) {
        set_has_new_platform_version();
    } else {
        clear_has_new_platform_version();
    }
    new_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_platform_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.OsUpdateStatus.new_platform_version)
}

// optional string new_required_platform_version = 3;
bool OsUpdateStatus::has_new_required_platform_version() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void OsUpdateStatus::set_has_new_required_platform_version()
{
    _has_bits_[0] |= 0x00000004u;
}
void OsUpdateStatus::clear_has_new_required_platform_version()
{
    _has_bits_[0] &= ~0x00000004u;
}
void OsUpdateStatus::clear_new_required_platform_version()
{
    new_required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_new_required_platform_version();
}
const ::std::string& OsUpdateStatus::new_required_platform_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.OsUpdateStatus.new_required_platform_version)
    return new_required_platform_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OsUpdateStatus::set_new_required_platform_version(const ::std::string& value)
{
    set_has_new_required_platform_version();
    new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
void OsUpdateStatus::set_new_required_platform_version(const char* value)
{
    set_has_new_required_platform_version();
    new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
void OsUpdateStatus::set_new_required_platform_version(const char* value, size_t size)
{
    set_has_new_required_platform_version();
    new_required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.OsUpdateStatus.new_required_platform_version)
}
::std::string* OsUpdateStatus::mutable_new_required_platform_version()
{
    set_has_new_required_platform_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.OsUpdateStatus.new_required_platform_version)
    return new_required_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OsUpdateStatus::release_new_required_platform_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.OsUpdateStatus.new_required_platform_version)
    clear_has_new_required_platform_version();
    return new_required_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OsUpdateStatus::set_allocated_new_required_platform_version(::std::string* new_required_platform_version)
{
    if (new_required_platform_version != NULL) {
        set_has_new_required_platform_version();
    } else {
        clear_has_new_required_platform_version();
    }
    new_required_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_required_platform_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.OsUpdateStatus.new_required_platform_version)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAppStatus(
    AppStatus* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppStatus::kAppIdFieldNumber;
const int AppStatus::kExtensionVersionFieldNumber;
const int AppStatus::kStatusFieldNumber;
const int AppStatus::kErrorFieldNumber;
const int AppStatus::kRequiredPlatformVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AppStatus::AppStatus()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.AppStatus)
}

void AppStatus::InitAsDefaultInstance()
{
}

AppStatus::AppStatus(const AppStatus& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.AppStatus)
}

void AppStatus::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extension_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_ = false;
    required_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppStatus::~AppStatus()
{
    // @@protoc_insertion_point(destructor:enterprise_management.AppStatus)
    SharedDtor();
}

void AppStatus::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extension_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    required_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AppStatus::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppStatus& AppStatus::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

AppStatus* AppStatus::default_instance_ = NULL;

AppStatus* AppStatus::New(::google::protobuf::Arena* arena) const
{
    AppStatus* n = new AppStatus;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AppStatus::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.AppStatus)
    if (_has_bits_[0 / 32] & 31u) {
        if (has_app_id()) {
            app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_extension_version()) {
            extension_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_status()) {
            status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        error_ = false;
        if (has_required_platform_version()) {
            required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAppStatus, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.AppStatus)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string app_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_app_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_extension_version;
            break;
        }

        // optional string extension_version = 2;
        case 2: {
            if (tag == 18) {
            parse_extension_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_extension_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_status;
            break;
        }

        // optional string status = 3;
        case 3: {
            if (tag == 26) {
            parse_status:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_status()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(32))
                goto parse_error;
            break;
        }

        // optional bool error = 4;
        case 4: {
            if (tag == 32) {
            parse_error:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &error_)));
                set_has_error();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_required_platform_version;
            break;
        }

        // optional string required_platform_version = 5;
        case 5: {
            if (tag == 42) {
            parse_required_platform_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_required_platform_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.AppStatus)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.AppStatus)
    return false;
#undef DO_
}

void AppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.AppStatus)
    // optional string app_id = 1;
    if (has_app_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->app_id(), output);
    }

    // optional string extension_version = 2;
    if (has_extension_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->extension_version(), output);
    }

    // optional string status = 3;
    if (has_status()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            3, this->status(), output);
    }

    // optional bool error = 4;
    if (has_error()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->error(), output);
    }

    // optional string required_platform_version = 5;
    if (has_required_platform_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            5, this->required_platform_version(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.AppStatus)
}

int AppStatus::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.AppStatus)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 31u) {
        // optional string app_id = 1;
        if (has_app_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->app_id());
        }

        // optional string extension_version = 2;
        if (has_extension_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->extension_version());
        }

        // optional string status = 3;
        if (has_status()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->status());
        }

        // optional bool error = 4;
        if (has_error()) {
            total_size += 1 + 1;
        }

        // optional string required_platform_version = 5;
        if (has_required_platform_version()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->required_platform_version());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AppStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AppStatus*>(&from));
}

void AppStatus::MergeFrom(const AppStatus& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AppStatus)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_app_id()) {
            set_has_app_id();
            app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
        }
        if (from.has_extension_version()) {
            set_has_extension_version();
            extension_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_version_);
        }
        if (from.has_status()) {
            set_has_status();
            status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
        }
        if (from.has_error()) {
            set_error(from.error());
        }
        if (from.has_required_platform_version()) {
            set_has_required_platform_version();
            required_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.required_platform_version_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AppStatus::CopyFrom(const AppStatus& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AppStatus)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AppStatus::IsInitialized() const
{

    return true;
}

void AppStatus::Swap(AppStatus* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AppStatus::InternalSwap(AppStatus* other)
{
    app_id_.Swap(&other->app_id_);
    extension_version_.Swap(&other->extension_version_);
    status_.Swap(&other->status_);
    std::swap(error_, other->error_);
    required_platform_version_.Swap(&other->required_platform_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppStatus::GetTypeName() const
{
    return "enterprise_management.AppStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppStatus

// optional string app_id = 1;
bool AppStatus::has_app_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppStatus::set_has_app_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void AppStatus::clear_has_app_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AppStatus::clear_app_id()
{
    app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_app_id();
}
const ::std::string& AppStatus::app_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.app_id)
    return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_app_id(const ::std::string& value)
{
    set_has_app_id();
    app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.app_id)
}
void AppStatus::set_app_id(const char* value)
{
    set_has_app_id();
    app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.app_id)
}
void AppStatus::set_app_id(const char* value, size_t size)
{
    set_has_app_id();
    app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.app_id)
}
::std::string* AppStatus::mutable_app_id()
{
    set_has_app_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.app_id)
    return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_app_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.app_id)
    clear_has_app_id();
    return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_app_id(::std::string* app_id)
{
    if (app_id != NULL) {
        set_has_app_id();
    } else {
        clear_has_app_id();
    }
    app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.app_id)
}

// optional string extension_version = 2;
bool AppStatus::has_extension_version() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AppStatus::set_has_extension_version()
{
    _has_bits_[0] |= 0x00000002u;
}
void AppStatus::clear_has_extension_version()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AppStatus::clear_extension_version()
{
    extension_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_extension_version();
}
const ::std::string& AppStatus::extension_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.extension_version)
    return extension_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_extension_version(const ::std::string& value)
{
    set_has_extension_version();
    extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.extension_version)
}
void AppStatus::set_extension_version(const char* value)
{
    set_has_extension_version();
    extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.extension_version)
}
void AppStatus::set_extension_version(const char* value, size_t size)
{
    set_has_extension_version();
    extension_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.extension_version)
}
::std::string* AppStatus::mutable_extension_version()
{
    set_has_extension_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.extension_version)
    return extension_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_extension_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.extension_version)
    clear_has_extension_version();
    return extension_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_extension_version(::std::string* extension_version)
{
    if (extension_version != NULL) {
        set_has_extension_version();
    } else {
        clear_has_extension_version();
    }
    extension_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.extension_version)
}

// optional string status = 3;
bool AppStatus::has_status() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void AppStatus::set_has_status()
{
    _has_bits_[0] |= 0x00000004u;
}
void AppStatus::clear_has_status()
{
    _has_bits_[0] &= ~0x00000004u;
}
void AppStatus::clear_status()
{
    status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_status();
}
const ::std::string& AppStatus::status() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.status)
    return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_status(const ::std::string& value)
{
    set_has_status();
    status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.status)
}
void AppStatus::set_status(const char* value)
{
    set_has_status();
    status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.status)
}
void AppStatus::set_status(const char* value, size_t size)
{
    set_has_status();
    status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.status)
}
::std::string* AppStatus::mutable_status()
{
    set_has_status();
    // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.status)
    return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_status()
{
    // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.status)
    clear_has_status();
    return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_status(::std::string* status)
{
    if (status != NULL) {
        set_has_status();
    } else {
        clear_has_status();
    }
    status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.status)
}

// optional bool error = 4;
bool AppStatus::has_error() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void AppStatus::set_has_error()
{
    _has_bits_[0] |= 0x00000008u;
}
void AppStatus::clear_has_error()
{
    _has_bits_[0] &= ~0x00000008u;
}
void AppStatus::clear_error()
{
    error_ = false;
    clear_has_error();
}
bool AppStatus::error() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.error)
    return error_;
}
void AppStatus::set_error(bool value)
{
    set_has_error();
    error_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.error)
}

// optional string required_platform_version = 5;
bool AppStatus::has_required_platform_version() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void AppStatus::set_has_required_platform_version()
{
    _has_bits_[0] |= 0x00000010u;
}
void AppStatus::clear_has_required_platform_version()
{
    _has_bits_[0] &= ~0x00000010u;
}
void AppStatus::clear_required_platform_version()
{
    required_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_required_platform_version();
}
const ::std::string& AppStatus::required_platform_version() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AppStatus.required_platform_version)
    return required_platform_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_required_platform_version(const ::std::string& value)
{
    set_has_required_platform_version();
    required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.AppStatus.required_platform_version)
}
void AppStatus::set_required_platform_version(const char* value)
{
    set_has_required_platform_version();
    required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.AppStatus.required_platform_version)
}
void AppStatus::set_required_platform_version(const char* value, size_t size)
{
    set_has_required_platform_version();
    required_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.AppStatus.required_platform_version)
}
::std::string* AppStatus::mutable_required_platform_version()
{
    set_has_required_platform_version();
    // @@protoc_insertion_point(field_mutable:enterprise_management.AppStatus.required_platform_version)
    return required_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AppStatus::release_required_platform_version()
{
    // @@protoc_insertion_point(field_release:enterprise_management.AppStatus.required_platform_version)
    clear_has_required_platform_version();
    return required_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AppStatus::set_allocated_required_platform_version(::std::string* required_platform_version)
{
    if (required_platform_version != NULL) {
        set_has_required_platform_version();
    } else {
        clear_has_required_platform_version();
    }
    required_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), required_platform_version);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.AppStatus.required_platform_version)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAndroidStatus(
    AndroidStatus* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndroidStatus::kStatusPayloadFieldNumber;
const int AndroidStatus::kDroidGuardInfoFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AndroidStatus::AndroidStatus()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.AndroidStatus)
}

void AndroidStatus::InitAsDefaultInstance()
{
}

AndroidStatus::AndroidStatus(const AndroidStatus& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.AndroidStatus)
}

void AndroidStatus::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    status_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    droid_guard_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AndroidStatus::~AndroidStatus()
{
    // @@protoc_insertion_point(destructor:enterprise_management.AndroidStatus)
    SharedDtor();
}

void AndroidStatus::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    status_payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    droid_guard_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AndroidStatus::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AndroidStatus& AndroidStatus::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

AndroidStatus* AndroidStatus::default_instance_ = NULL;

AndroidStatus* AndroidStatus::New(::google::protobuf::Arena* arena) const
{
    AndroidStatus* n = new AndroidStatus;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AndroidStatus::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.AndroidStatus)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_status_payload()) {
            status_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_droid_guard_info()) {
            droid_guard_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AndroidStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAndroidStatus, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.AndroidStatus)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string status_payload = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_status_payload()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_droid_guard_info;
            break;
        }

        // optional string droid_guard_info = 2;
        case 2: {
            if (tag == 18) {
            parse_droid_guard_info:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_droid_guard_info()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.AndroidStatus)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.AndroidStatus)
    return false;
#undef DO_
}

void AndroidStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.AndroidStatus)
    // optional string status_payload = 1;
    if (has_status_payload()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->status_payload(), output);
    }

    // optional string droid_guard_info = 2;
    if (has_droid_guard_info()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->droid_guard_info(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.AndroidStatus)
}

int AndroidStatus::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.AndroidStatus)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string status_payload = 1;
        if (has_status_payload()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->status_payload());
        }

        // optional string droid_guard_info = 2;
        if (has_droid_guard_info()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->droid_guard_info());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AndroidStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AndroidStatus*>(&from));
}

void AndroidStatus::MergeFrom(const AndroidStatus& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.AndroidStatus)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_status_payload()) {
            set_has_status_payload();
            status_payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_payload_);
        }
        if (from.has_droid_guard_info()) {
            set_has_droid_guard_info();
            droid_guard_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.droid_guard_info_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AndroidStatus::CopyFrom(const AndroidStatus& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.AndroidStatus)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AndroidStatus::IsInitialized() const
{

    return true;
}

void AndroidStatus::Swap(AndroidStatus* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AndroidStatus::InternalSwap(AndroidStatus* other)
{
    status_payload_.Swap(&other->status_payload_);
    droid_guard_info_.Swap(&other->droid_guard_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AndroidStatus::GetTypeName() const
{
    return "enterprise_management.AndroidStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndroidStatus

// optional string status_payload = 1;
bool AndroidStatus::has_status_payload() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AndroidStatus::set_has_status_payload()
{
    _has_bits_[0] |= 0x00000001u;
}
void AndroidStatus::clear_has_status_payload()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AndroidStatus::clear_status_payload()
{
    status_payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_status_payload();
}
const ::std::string& AndroidStatus::status_payload() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AndroidStatus.status_payload)
    return status_payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidStatus::set_status_payload(const ::std::string& value)
{
    set_has_status_payload();
    status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.AndroidStatus.status_payload)
}
void AndroidStatus::set_status_payload(const char* value)
{
    set_has_status_payload();
    status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidStatus.status_payload)
}
void AndroidStatus::set_status_payload(const char* value, size_t size)
{
    set_has_status_payload();
    status_payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidStatus.status_payload)
}
::std::string* AndroidStatus::mutable_status_payload()
{
    set_has_status_payload();
    // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidStatus.status_payload)
    return status_payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidStatus::release_status_payload()
{
    // @@protoc_insertion_point(field_release:enterprise_management.AndroidStatus.status_payload)
    clear_has_status_payload();
    return status_payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidStatus::set_allocated_status_payload(::std::string* status_payload)
{
    if (status_payload != NULL) {
        set_has_status_payload();
    } else {
        clear_has_status_payload();
    }
    status_payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_payload);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidStatus.status_payload)
}

// optional string droid_guard_info = 2;
bool AndroidStatus::has_droid_guard_info() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AndroidStatus::set_has_droid_guard_info()
{
    _has_bits_[0] |= 0x00000002u;
}
void AndroidStatus::clear_has_droid_guard_info()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AndroidStatus::clear_droid_guard_info()
{
    droid_guard_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_droid_guard_info();
}
const ::std::string& AndroidStatus::droid_guard_info() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.AndroidStatus.droid_guard_info)
    return droid_guard_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidStatus::set_droid_guard_info(const ::std::string& value)
{
    set_has_droid_guard_info();
    droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.AndroidStatus.droid_guard_info)
}
void AndroidStatus::set_droid_guard_info(const char* value)
{
    set_has_droid_guard_info();
    droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.AndroidStatus.droid_guard_info)
}
void AndroidStatus::set_droid_guard_info(const char* value, size_t size)
{
    set_has_droid_guard_info();
    droid_guard_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.AndroidStatus.droid_guard_info)
}
::std::string* AndroidStatus::mutable_droid_guard_info()
{
    set_has_droid_guard_info();
    // @@protoc_insertion_point(field_mutable:enterprise_management.AndroidStatus.droid_guard_info)
    return droid_guard_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AndroidStatus::release_droid_guard_info()
{
    // @@protoc_insertion_point(field_release:enterprise_management.AndroidStatus.droid_guard_info)
    clear_has_droid_guard_info();
    return droid_guard_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AndroidStatus::set_allocated_droid_guard_info(::std::string* droid_guard_info)
{
    if (droid_guard_info != NULL) {
        set_has_droid_guard_info();
    } else {
        clear_has_droid_guard_info();
    }
    droid_guard_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), droid_guard_info);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.AndroidStatus.droid_guard_info)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSessionStatusReportRequest(
    SessionStatusReportRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStatusReportRequest::kOBSOLETEInstalledAppIdFieldNumber;
const int SessionStatusReportRequest::kOBSOLETEInstalledExtensionIdFieldNumber;
const int SessionStatusReportRequest::kAppLaunchStatFieldNumber;
const int SessionStatusReportRequest::kDeviceLocalAccountIdFieldNumber;
const int SessionStatusReportRequest::kInstalledAppsFieldNumber;
const int SessionStatusReportRequest::kInstalledExtensionsFieldNumber;
const int SessionStatusReportRequest::kAndroidStatusFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStatusReportRequest::SessionStatusReportRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.SessionStatusReportRequest)
}

void SessionStatusReportRequest::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    android_status_ = const_cast<::enterprise_management::AndroidStatus*>(
        ::enterprise_management::AndroidStatus::internal_default_instance());
#else
    android_status_ = const_cast<::enterprise_management::AndroidStatus*>(&::enterprise_management::AndroidStatus::default_instance());
#endif
}

SessionStatusReportRequest::SessionStatusReportRequest(const SessionStatusReportRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.SessionStatusReportRequest)
}

void SessionStatusReportRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_local_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    android_status_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionStatusReportRequest::~SessionStatusReportRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.SessionStatusReportRequest)
    SharedDtor();
}

void SessionStatusReportRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_local_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete android_status_;
    }
}

void SessionStatusReportRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionStatusReportRequest& SessionStatusReportRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

SessionStatusReportRequest* SessionStatusReportRequest::default_instance_ = NULL;

SessionStatusReportRequest* SessionStatusReportRequest::New(::google::protobuf::Arena* arena) const
{
    SessionStatusReportRequest* n = new SessionStatusReportRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SessionStatusReportRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.SessionStatusReportRequest)
    if (_has_bits_[0 / 32] & 72u) {
        if (has_device_local_account_id()) {
            device_local_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_android_status()) {
            if (android_status_ != NULL)
                android_status_->::enterprise_management::AndroidStatus::Clear();
        }
    }
    obsolete_installed_app_id_.Clear();
    obsolete_installed_extension_id_.Clear();
    app_launch_stat_.Clear();
    installed_apps_.Clear();
    installed_extensions_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SessionStatusReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSessionStatusReportRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.SessionStatusReportRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated string OBSOLETE_installed_app_id = 1 [deprecated = true];
        case 1: {
            if (tag == 10) {
            parse_OBSOLETE_installed_app_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_obsolete_installed_app_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_OBSOLETE_installed_app_id;
            if (input->ExpectTag(18))
                goto parse_OBSOLETE_installed_extension_id;
            break;
        }

        // repeated string OBSOLETE_installed_extension_id = 2 [deprecated = true];
        case 2: {
            if (tag == 18) {
            parse_OBSOLETE_installed_extension_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->add_obsolete_installed_extension_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_OBSOLETE_installed_extension_id;
            if (input->ExpectTag(26))
                goto parse_app_launch_stat;
            break;
        }

        // repeated .enterprise_management.InstallableLaunch app_launch_stat = 3;
        case 3: {
            if (tag == 26) {
            parse_app_launch_stat:
                DO_(input->IncrementRecursionDepth());
            parse_loop_app_launch_stat:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_app_launch_stat()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_loop_app_launch_stat;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(34))
                goto parse_device_local_account_id;
            break;
        }

        // optional string device_local_account_id = 4;
        case 4: {
            if (tag == 34) {
            parse_device_local_account_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_device_local_account_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_installed_apps;
            break;
        }

        // repeated .enterprise_management.AppStatus installed_apps = 5;
        case 5: {
            if (tag == 42) {
            parse_installed_apps:
                DO_(input->IncrementRecursionDepth());
            parse_loop_installed_apps:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_installed_apps()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_loop_installed_apps;
            if (input->ExpectTag(50))
                goto parse_loop_installed_extensions;
            input->UnsafeDecrementRecursionDepth();
            break;
        }

        // repeated .enterprise_management.AppStatus installed_extensions = 6;
        case 6: {
            if (tag == 50) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_installed_extensions:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_installed_extensions()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_loop_installed_extensions;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(58))
                goto parse_android_status;
            break;
        }

        // optional .enterprise_management.AndroidStatus android_status = 7;
        case 7: {
            if (tag == 58) {
            parse_android_status:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_android_status()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.SessionStatusReportRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.SessionStatusReportRequest)
    return false;
#undef DO_
}

void SessionStatusReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.SessionStatusReportRequest)
    // repeated string OBSOLETE_installed_app_id = 1 [deprecated = true];
    for (int i = 0; i < this->obsolete_installed_app_id_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            1, this->obsolete_installed_app_id(i), output);
    }

    // repeated string OBSOLETE_installed_extension_id = 2 [deprecated = true];
    for (int i = 0; i < this->obsolete_installed_extension_id_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteString(
            2, this->obsolete_installed_extension_id(i), output);
    }

    // repeated .enterprise_management.InstallableLaunch app_launch_stat = 3;
    for (unsigned int i = 0, n = this->app_launch_stat_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, this->app_launch_stat(i), output);
    }

    // optional string device_local_account_id = 4;
    if (has_device_local_account_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->device_local_account_id(), output);
    }

    // repeated .enterprise_management.AppStatus installed_apps = 5;
    for (unsigned int i = 0, n = this->installed_apps_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, this->installed_apps(i), output);
    }

    // repeated .enterprise_management.AppStatus installed_extensions = 6;
    for (unsigned int i = 0, n = this->installed_extensions_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, this->installed_extensions(i), output);
    }

    // optional .enterprise_management.AndroidStatus android_status = 7;
    if (has_android_status()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, *this->android_status_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.SessionStatusReportRequest)
}

int SessionStatusReportRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.SessionStatusReportRequest)
    int total_size = 0;

    if (_has_bits_[3 / 32] & 72u) {
        // optional string device_local_account_id = 4;
        if (has_device_local_account_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->device_local_account_id());
        }

        // optional .enterprise_management.AndroidStatus android_status = 7;
        if (has_android_status()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->android_status_);
        }
    }
    // repeated string OBSOLETE_installed_app_id = 1 [deprecated = true];
    total_size += 1 * this->obsolete_installed_app_id_size();
    for (int i = 0; i < this->obsolete_installed_app_id_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->obsolete_installed_app_id(i));
    }

    // repeated string OBSOLETE_installed_extension_id = 2 [deprecated = true];
    total_size += 1 * this->obsolete_installed_extension_id_size();
    for (int i = 0; i < this->obsolete_installed_extension_id_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this->obsolete_installed_extension_id(i));
    }

    // repeated .enterprise_management.InstallableLaunch app_launch_stat = 3;
    total_size += 1 * this->app_launch_stat_size();
    for (int i = 0; i < this->app_launch_stat_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->app_launch_stat(i));
    }

    // repeated .enterprise_management.AppStatus installed_apps = 5;
    total_size += 1 * this->installed_apps_size();
    for (int i = 0; i < this->installed_apps_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->installed_apps(i));
    }

    // repeated .enterprise_management.AppStatus installed_extensions = 6;
    total_size += 1 * this->installed_extensions_size();
    for (int i = 0; i < this->installed_extensions_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->installed_extensions(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SessionStatusReportRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SessionStatusReportRequest*>(&from));
}

void SessionStatusReportRequest::MergeFrom(const SessionStatusReportRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SessionStatusReportRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    obsolete_installed_app_id_.MergeFrom(from.obsolete_installed_app_id_);
    obsolete_installed_extension_id_.MergeFrom(from.obsolete_installed_extension_id_);
    app_launch_stat_.MergeFrom(from.app_launch_stat_);
    installed_apps_.MergeFrom(from.installed_apps_);
    installed_extensions_.MergeFrom(from.installed_extensions_);
    if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
        if (from.has_device_local_account_id()) {
            set_has_device_local_account_id();
            device_local_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_local_account_id_);
        }
        if (from.has_android_status()) {
            mutable_android_status()->::enterprise_management::AndroidStatus::MergeFrom(from.android_status());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SessionStatusReportRequest::CopyFrom(const SessionStatusReportRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SessionStatusReportRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SessionStatusReportRequest::IsInitialized() const
{

    return true;
}

void SessionStatusReportRequest::Swap(SessionStatusReportRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SessionStatusReportRequest::InternalSwap(SessionStatusReportRequest* other)
{
    obsolete_installed_app_id_.UnsafeArenaSwap(&other->obsolete_installed_app_id_);
    obsolete_installed_extension_id_.UnsafeArenaSwap(&other->obsolete_installed_extension_id_);
    app_launch_stat_.UnsafeArenaSwap(&other->app_launch_stat_);
    device_local_account_id_.Swap(&other->device_local_account_id_);
    installed_apps_.UnsafeArenaSwap(&other->installed_apps_);
    installed_extensions_.UnsafeArenaSwap(&other->installed_extensions_);
    std::swap(android_status_, other->android_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionStatusReportRequest::GetTypeName() const
{
    return "enterprise_management.SessionStatusReportRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionStatusReportRequest

// repeated string OBSOLETE_installed_app_id = 1 [deprecated = true];
int SessionStatusReportRequest::obsolete_installed_app_id_size() const
{
    return obsolete_installed_app_id_.size();
}
void SessionStatusReportRequest::clear_obsolete_installed_app_id()
{
    obsolete_installed_app_id_.Clear();
}
const ::std::string& SessionStatusReportRequest::obsolete_installed_app_id(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
    return obsolete_installed_app_id_.Get(index);
}
::std::string* SessionStatusReportRequest::mutable_obsolete_installed_app_id(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
    return obsolete_installed_app_id_.Mutable(index);
}
void SessionStatusReportRequest::set_obsolete_installed_app_id(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
    obsolete_installed_app_id_.Mutable(index)->assign(value);
}
void SessionStatusReportRequest::set_obsolete_installed_app_id(int index, const char* value)
{
    obsolete_installed_app_id_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
}
void SessionStatusReportRequest::set_obsolete_installed_app_id(int index, const char* value, size_t size)
{
    obsolete_installed_app_id_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
}
::std::string* SessionStatusReportRequest::add_obsolete_installed_app_id()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
    return obsolete_installed_app_id_.Add();
}
void SessionStatusReportRequest::add_obsolete_installed_app_id(const ::std::string& value)
{
    obsolete_installed_app_id_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
}
void SessionStatusReportRequest::add_obsolete_installed_app_id(const char* value)
{
    obsolete_installed_app_id_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
}
void SessionStatusReportRequest::add_obsolete_installed_app_id(const char* value, size_t size)
{
    obsolete_installed_app_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
SessionStatusReportRequest::obsolete_installed_app_id() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
    return obsolete_installed_app_id_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
SessionStatusReportRequest::mutable_obsolete_installed_app_id()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_app_id)
    return &obsolete_installed_app_id_;
}

// repeated string OBSOLETE_installed_extension_id = 2 [deprecated = true];
int SessionStatusReportRequest::obsolete_installed_extension_id_size() const
{
    return obsolete_installed_extension_id_.size();
}
void SessionStatusReportRequest::clear_obsolete_installed_extension_id()
{
    obsolete_installed_extension_id_.Clear();
}
const ::std::string& SessionStatusReportRequest::obsolete_installed_extension_id(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
    return obsolete_installed_extension_id_.Get(index);
}
::std::string* SessionStatusReportRequest::mutable_obsolete_installed_extension_id(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
    return obsolete_installed_extension_id_.Mutable(index);
}
void SessionStatusReportRequest::set_obsolete_installed_extension_id(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
    obsolete_installed_extension_id_.Mutable(index)->assign(value);
}
void SessionStatusReportRequest::set_obsolete_installed_extension_id(int index, const char* value)
{
    obsolete_installed_extension_id_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
}
void SessionStatusReportRequest::set_obsolete_installed_extension_id(int index, const char* value, size_t size)
{
    obsolete_installed_extension_id_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
}
::std::string* SessionStatusReportRequest::add_obsolete_installed_extension_id()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
    return obsolete_installed_extension_id_.Add();
}
void SessionStatusReportRequest::add_obsolete_installed_extension_id(const ::std::string& value)
{
    obsolete_installed_extension_id_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
}
void SessionStatusReportRequest::add_obsolete_installed_extension_id(const char* value)
{
    obsolete_installed_extension_id_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
}
void SessionStatusReportRequest::add_obsolete_installed_extension_id(const char* value, size_t size)
{
    obsolete_installed_extension_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
SessionStatusReportRequest::obsolete_installed_extension_id() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
    return obsolete_installed_extension_id_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
SessionStatusReportRequest::mutable_obsolete_installed_extension_id()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.OBSOLETE_installed_extension_id)
    return &obsolete_installed_extension_id_;
}

// repeated .enterprise_management.InstallableLaunch app_launch_stat = 3;
int SessionStatusReportRequest::app_launch_stat_size() const
{
    return app_launch_stat_.size();
}
void SessionStatusReportRequest::clear_app_launch_stat()
{
    app_launch_stat_.Clear();
}
const ::enterprise_management::InstallableLaunch& SessionStatusReportRequest::app_launch_stat(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.app_launch_stat)
    return app_launch_stat_.Get(index);
}
::enterprise_management::InstallableLaunch* SessionStatusReportRequest::mutable_app_launch_stat(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.app_launch_stat)
    return app_launch_stat_.Mutable(index);
}
::enterprise_management::InstallableLaunch* SessionStatusReportRequest::add_app_launch_stat()
{
    // @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.app_launch_stat)
    return app_launch_stat_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::InstallableLaunch>*
SessionStatusReportRequest::mutable_app_launch_stat()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.app_launch_stat)
    return &app_launch_stat_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::InstallableLaunch>&
SessionStatusReportRequest::app_launch_stat() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.app_launch_stat)
    return app_launch_stat_;
}

// optional string device_local_account_id = 4;
bool SessionStatusReportRequest::has_device_local_account_id() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionStatusReportRequest::set_has_device_local_account_id()
{
    _has_bits_[0] |= 0x00000008u;
}
void SessionStatusReportRequest::clear_has_device_local_account_id()
{
    _has_bits_[0] &= ~0x00000008u;
}
void SessionStatusReportRequest::clear_device_local_account_id()
{
    device_local_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_local_account_id();
}
const ::std::string& SessionStatusReportRequest::device_local_account_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.device_local_account_id)
    return device_local_account_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportRequest::set_device_local_account_id(const ::std::string& value)
{
    set_has_device_local_account_id();
    device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
void SessionStatusReportRequest::set_device_local_account_id(const char* value)
{
    set_has_device_local_account_id();
    device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
void SessionStatusReportRequest::set_device_local_account_id(const char* value, size_t size)
{
    set_has_device_local_account_id();
    device_local_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}
::std::string* SessionStatusReportRequest::mutable_device_local_account_id()
{
    set_has_device_local_account_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.device_local_account_id)
    return device_local_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionStatusReportRequest::release_device_local_account_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.device_local_account_id)
    clear_has_device_local_account_id();
    return device_local_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportRequest::set_allocated_device_local_account_id(::std::string* device_local_account_id)
{
    if (device_local_account_id != NULL) {
        set_has_device_local_account_id();
    } else {
        clear_has_device_local_account_id();
    }
    device_local_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_local_account_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.device_local_account_id)
}

// repeated .enterprise_management.AppStatus installed_apps = 5;
int SessionStatusReportRequest::installed_apps_size() const
{
    return installed_apps_.size();
}
void SessionStatusReportRequest::clear_installed_apps()
{
    installed_apps_.Clear();
}
const ::enterprise_management::AppStatus& SessionStatusReportRequest::installed_apps(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.installed_apps)
    return installed_apps_.Get(index);
}
::enterprise_management::AppStatus* SessionStatusReportRequest::mutable_installed_apps(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.installed_apps)
    return installed_apps_.Mutable(index);
}
::enterprise_management::AppStatus* SessionStatusReportRequest::add_installed_apps()
{
    // @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.installed_apps)
    return installed_apps_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::AppStatus>*
SessionStatusReportRequest::mutable_installed_apps()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.installed_apps)
    return &installed_apps_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::AppStatus>&
SessionStatusReportRequest::installed_apps() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.installed_apps)
    return installed_apps_;
}

// repeated .enterprise_management.AppStatus installed_extensions = 6;
int SessionStatusReportRequest::installed_extensions_size() const
{
    return installed_extensions_.size();
}
void SessionStatusReportRequest::clear_installed_extensions()
{
    installed_extensions_.Clear();
}
const ::enterprise_management::AppStatus& SessionStatusReportRequest::installed_extensions(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.installed_extensions)
    return installed_extensions_.Get(index);
}
::enterprise_management::AppStatus* SessionStatusReportRequest::mutable_installed_extensions(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.installed_extensions)
    return installed_extensions_.Mutable(index);
}
::enterprise_management::AppStatus* SessionStatusReportRequest::add_installed_extensions()
{
    // @@protoc_insertion_point(field_add:enterprise_management.SessionStatusReportRequest.installed_extensions)
    return installed_extensions_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::AppStatus>*
SessionStatusReportRequest::mutable_installed_extensions()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.SessionStatusReportRequest.installed_extensions)
    return &installed_extensions_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::AppStatus>&
SessionStatusReportRequest::installed_extensions() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.SessionStatusReportRequest.installed_extensions)
    return installed_extensions_;
}

// optional .enterprise_management.AndroidStatus android_status = 7;
bool SessionStatusReportRequest::has_android_status() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void SessionStatusReportRequest::set_has_android_status()
{
    _has_bits_[0] |= 0x00000040u;
}
void SessionStatusReportRequest::clear_has_android_status()
{
    _has_bits_[0] &= ~0x00000040u;
}
void SessionStatusReportRequest::clear_android_status()
{
    if (android_status_ != NULL)
        android_status_->::enterprise_management::AndroidStatus::Clear();
    clear_has_android_status();
}
const ::enterprise_management::AndroidStatus& SessionStatusReportRequest::android_status() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportRequest.android_status)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return android_status_ != NULL ? *android_status_ : *default_instance().android_status_;
#else
    return android_status_ != NULL ? *android_status_ : *default_instance_->android_status_;
#endif
}
::enterprise_management::AndroidStatus* SessionStatusReportRequest::mutable_android_status()
{
    set_has_android_status();
    if (android_status_ == NULL) {
        android_status_ = new ::enterprise_management::AndroidStatus;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportRequest.android_status)
    return android_status_;
}
::enterprise_management::AndroidStatus* SessionStatusReportRequest::release_android_status()
{
    // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportRequest.android_status)
    clear_has_android_status();
    ::enterprise_management::AndroidStatus* temp = android_status_;
    android_status_ = NULL;
    return temp;
}
void SessionStatusReportRequest::set_allocated_android_status(::enterprise_management::AndroidStatus* android_status)
{
    delete android_status_;
    android_status_ = android_status;
    if (android_status) {
        set_has_android_status();
    } else {
        clear_has_android_status();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportRequest.android_status)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceStatusReportResponse(
    DeviceStatusReportResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStatusReportResponse::kErrorCodeFieldNumber;
const int DeviceStatusReportResponse::kErrorMessageFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStatusReportResponse::DeviceStatusReportResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceStatusReportResponse)
}

void DeviceStatusReportResponse::InitAsDefaultInstance()
{
}

DeviceStatusReportResponse::DeviceStatusReportResponse(const DeviceStatusReportResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStatusReportResponse)
}

void DeviceStatusReportResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_code_ = 0;
    error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceStatusReportResponse::~DeviceStatusReportResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceStatusReportResponse)
    SharedDtor();
}

void DeviceStatusReportResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceStatusReportResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStatusReportResponse& DeviceStatusReportResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceStatusReportResponse* DeviceStatusReportResponse::default_instance_ = NULL;

DeviceStatusReportResponse* DeviceStatusReportResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceStatusReportResponse* n = new DeviceStatusReportResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceStatusReportResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStatusReportResponse)
    if (_has_bits_[0 / 32] & 3u) {
        error_code_ = 0;
        if (has_error_message()) {
            error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceStatusReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceStatusReportResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStatusReportResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 error_code = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &error_code_)));
                set_has_error_code();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_error_message;
            break;
        }

        // optional string error_message = 2;
        case 2: {
            if (tag == 18) {
            parse_error_message:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_error_message()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStatusReportResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStatusReportResponse)
    return false;
#undef DO_
}

void DeviceStatusReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStatusReportResponse)
    // optional int32 error_code = 1;
    if (has_error_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
    }

    // optional string error_message = 2;
    if (has_error_message()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->error_message(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStatusReportResponse)
}

int DeviceStatusReportResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStatusReportResponse)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional int32 error_code = 1;
        if (has_error_code()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->error_code());
        }

        // optional string error_message = 2;
        if (has_error_message()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->error_message());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceStatusReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceStatusReportResponse*>(&from));
}

void DeviceStatusReportResponse::MergeFrom(const DeviceStatusReportResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStatusReportResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_error_code()) {
            set_error_code(from.error_code());
        }
        if (from.has_error_message()) {
            set_has_error_message();
            error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceStatusReportResponse::CopyFrom(const DeviceStatusReportResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStatusReportResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceStatusReportResponse::IsInitialized() const
{

    return true;
}

void DeviceStatusReportResponse::Swap(DeviceStatusReportResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceStatusReportResponse::InternalSwap(DeviceStatusReportResponse* other)
{
    std::swap(error_code_, other->error_code_);
    error_message_.Swap(&other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStatusReportResponse::GetTypeName() const
{
    return "enterprise_management.DeviceStatusReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStatusReportResponse

// optional int32 error_code = 1;
bool DeviceStatusReportResponse::has_error_code() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStatusReportResponse::set_has_error_code()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceStatusReportResponse::clear_has_error_code()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceStatusReportResponse::clear_error_code()
{
    error_code_ = 0;
    clear_has_error_code();
}
::google::protobuf::int32 DeviceStatusReportResponse::error_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportResponse.error_code)
    return error_code_;
}
void DeviceStatusReportResponse::set_error_code(::google::protobuf::int32 value)
{
    set_has_error_code();
    error_code_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportResponse.error_code)
}

// optional string error_message = 2;
bool DeviceStatusReportResponse::has_error_message() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceStatusReportResponse::set_has_error_message()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceStatusReportResponse::clear_has_error_message()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceStatusReportResponse::clear_error_message()
{
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_message();
}
const ::std::string& DeviceStatusReportResponse::error_message() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStatusReportResponse.error_message)
    return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportResponse::set_error_message(const ::std::string& value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStatusReportResponse.error_message)
}
void DeviceStatusReportResponse::set_error_message(const char* value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStatusReportResponse.error_message)
}
void DeviceStatusReportResponse::set_error_message(const char* value, size_t size)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStatusReportResponse.error_message)
}
::std::string* DeviceStatusReportResponse::mutable_error_message()
{
    set_has_error_message();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStatusReportResponse.error_message)
    return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatusReportResponse::release_error_message()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStatusReportResponse.error_message)
    clear_has_error_message();
    return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatusReportResponse::set_allocated_error_message(::std::string* error_message)
{
    if (error_message != NULL) {
        set_has_error_message();
    } else {
        clear_has_error_message();
    }
    error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStatusReportResponse.error_message)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSessionStatusReportResponse(
    SessionStatusReportResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStatusReportResponse::kErrorCodeFieldNumber;
const int SessionStatusReportResponse::kErrorMessageFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStatusReportResponse::SessionStatusReportResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.SessionStatusReportResponse)
}

void SessionStatusReportResponse::InitAsDefaultInstance()
{
}

SessionStatusReportResponse::SessionStatusReportResponse(const SessionStatusReportResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.SessionStatusReportResponse)
}

void SessionStatusReportResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_code_ = 0;
    error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionStatusReportResponse::~SessionStatusReportResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.SessionStatusReportResponse)
    SharedDtor();
}

void SessionStatusReportResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void SessionStatusReportResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionStatusReportResponse& SessionStatusReportResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

SessionStatusReportResponse* SessionStatusReportResponse::default_instance_ = NULL;

SessionStatusReportResponse* SessionStatusReportResponse::New(::google::protobuf::Arena* arena) const
{
    SessionStatusReportResponse* n = new SessionStatusReportResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void SessionStatusReportResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.SessionStatusReportResponse)
    if (_has_bits_[0 / 32] & 3u) {
        error_code_ = 0;
        if (has_error_message()) {
            error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SessionStatusReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForSessionStatusReportResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.SessionStatusReportResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 error_code = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &error_code_)));
                set_has_error_code();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_error_message;
            break;
        }

        // optional string error_message = 2;
        case 2: {
            if (tag == 18) {
            parse_error_message:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_error_message()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.SessionStatusReportResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.SessionStatusReportResponse)
    return false;
#undef DO_
}

void SessionStatusReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.SessionStatusReportResponse)
    // optional int32 error_code = 1;
    if (has_error_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
    }

    // optional string error_message = 2;
    if (has_error_message()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->error_message(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.SessionStatusReportResponse)
}

int SessionStatusReportResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.SessionStatusReportResponse)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional int32 error_code = 1;
        if (has_error_code()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->error_code());
        }

        // optional string error_message = 2;
        if (has_error_message()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->error_message());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void SessionStatusReportResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const SessionStatusReportResponse*>(&from));
}

void SessionStatusReportResponse::MergeFrom(const SessionStatusReportResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.SessionStatusReportResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_error_code()) {
            set_error_code(from.error_code());
        }
        if (from.has_error_message()) {
            set_has_error_message();
            error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void SessionStatusReportResponse::CopyFrom(const SessionStatusReportResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.SessionStatusReportResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool SessionStatusReportResponse::IsInitialized() const
{

    return true;
}

void SessionStatusReportResponse::Swap(SessionStatusReportResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void SessionStatusReportResponse::InternalSwap(SessionStatusReportResponse* other)
{
    std::swap(error_code_, other->error_code_);
    error_message_.Swap(&other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionStatusReportResponse::GetTypeName() const
{
    return "enterprise_management.SessionStatusReportResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionStatusReportResponse

// optional int32 error_code = 1;
bool SessionStatusReportResponse::has_error_code() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionStatusReportResponse::set_has_error_code()
{
    _has_bits_[0] |= 0x00000001u;
}
void SessionStatusReportResponse::clear_has_error_code()
{
    _has_bits_[0] &= ~0x00000001u;
}
void SessionStatusReportResponse::clear_error_code()
{
    error_code_ = 0;
    clear_has_error_code();
}
::google::protobuf::int32 SessionStatusReportResponse::error_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportResponse.error_code)
    return error_code_;
}
void SessionStatusReportResponse::set_error_code(::google::protobuf::int32 value)
{
    set_has_error_code();
    error_code_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportResponse.error_code)
}

// optional string error_message = 2;
bool SessionStatusReportResponse::has_error_message() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionStatusReportResponse::set_has_error_message()
{
    _has_bits_[0] |= 0x00000002u;
}
void SessionStatusReportResponse::clear_has_error_message()
{
    _has_bits_[0] &= ~0x00000002u;
}
void SessionStatusReportResponse::clear_error_message()
{
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_message();
}
const ::std::string& SessionStatusReportResponse::error_message() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.SessionStatusReportResponse.error_message)
    return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportResponse::set_error_message(const ::std::string& value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.SessionStatusReportResponse.error_message)
}
void SessionStatusReportResponse::set_error_message(const char* value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.SessionStatusReportResponse.error_message)
}
void SessionStatusReportResponse::set_error_message(const char* value, size_t size)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.SessionStatusReportResponse.error_message)
}
::std::string* SessionStatusReportResponse::mutable_error_message()
{
    set_has_error_message();
    // @@protoc_insertion_point(field_mutable:enterprise_management.SessionStatusReportResponse.error_message)
    return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionStatusReportResponse::release_error_message()
{
    // @@protoc_insertion_point(field_release:enterprise_management.SessionStatusReportResponse.error_message)
    clear_has_error_message();
    return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionStatusReportResponse::set_allocated_error_message(::std::string* error_message)
{
    if (error_message != NULL) {
        set_has_error_message();
    } else {
        clear_has_error_message();
    }
    error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.SessionStatusReportResponse.error_message)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAutoEnrollmentRequest(
    DeviceAutoEnrollmentRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAutoEnrollmentRequest::kRemainderFieldNumber;
const int DeviceAutoEnrollmentRequest::kModulusFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAutoEnrollmentRequest::DeviceAutoEnrollmentRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceAutoEnrollmentRequest)
}

void DeviceAutoEnrollmentRequest::InitAsDefaultInstance()
{
}

DeviceAutoEnrollmentRequest::DeviceAutoEnrollmentRequest(const DeviceAutoEnrollmentRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAutoEnrollmentRequest)
}

void DeviceAutoEnrollmentRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    remainder_ = GOOGLE_LONGLONG(0);
    modulus_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAutoEnrollmentRequest::~DeviceAutoEnrollmentRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceAutoEnrollmentRequest)
    SharedDtor();
}

void DeviceAutoEnrollmentRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceAutoEnrollmentRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAutoEnrollmentRequest& DeviceAutoEnrollmentRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceAutoEnrollmentRequest* DeviceAutoEnrollmentRequest::default_instance_ = NULL;

DeviceAutoEnrollmentRequest* DeviceAutoEnrollmentRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceAutoEnrollmentRequest* n = new DeviceAutoEnrollmentRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceAutoEnrollmentRequest::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAutoEnrollmentRequest)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                 \
    _Pragma("clang diagnostic push")                                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(DeviceAutoEnrollmentRequest, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<DeviceAutoEnrollmentRequest*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    ZR_(remainder_, modulus_);

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAutoEnrollmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceAutoEnrollmentRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAutoEnrollmentRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 remainder = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &remainder_)));
                set_has_remainder();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_modulus;
            break;
        }

        // optional int64 modulus = 2;
        case 2: {
            if (tag == 16) {
            parse_modulus:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &modulus_)));
                set_has_modulus();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAutoEnrollmentRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAutoEnrollmentRequest)
    return false;
#undef DO_
}

void DeviceAutoEnrollmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAutoEnrollmentRequest)
    // optional int64 remainder = 1;
    if (has_remainder()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->remainder(), output);
    }

    // optional int64 modulus = 2;
    if (has_modulus()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->modulus(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAutoEnrollmentRequest)
}

int DeviceAutoEnrollmentRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAutoEnrollmentRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional int64 remainder = 1;
        if (has_remainder()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->remainder());
        }

        // optional int64 modulus = 2;
        if (has_modulus()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->modulus());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceAutoEnrollmentRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceAutoEnrollmentRequest*>(&from));
}

void DeviceAutoEnrollmentRequest::MergeFrom(const DeviceAutoEnrollmentRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAutoEnrollmentRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_remainder()) {
            set_remainder(from.remainder());
        }
        if (from.has_modulus()) {
            set_modulus(from.modulus());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceAutoEnrollmentRequest::CopyFrom(const DeviceAutoEnrollmentRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAutoEnrollmentRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceAutoEnrollmentRequest::IsInitialized() const
{

    return true;
}

void DeviceAutoEnrollmentRequest::Swap(DeviceAutoEnrollmentRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceAutoEnrollmentRequest::InternalSwap(DeviceAutoEnrollmentRequest* other)
{
    std::swap(remainder_, other->remainder_);
    std::swap(modulus_, other->modulus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAutoEnrollmentRequest::GetTypeName() const
{
    return "enterprise_management.DeviceAutoEnrollmentRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAutoEnrollmentRequest

// optional int64 remainder = 1;
bool DeviceAutoEnrollmentRequest::has_remainder() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAutoEnrollmentRequest::set_has_remainder()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceAutoEnrollmentRequest::clear_has_remainder()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceAutoEnrollmentRequest::clear_remainder()
{
    remainder_ = GOOGLE_LONGLONG(0);
    clear_has_remainder();
}
::google::protobuf::int64 DeviceAutoEnrollmentRequest::remainder() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.remainder)
    return remainder_;
}
void DeviceAutoEnrollmentRequest::set_remainder(::google::protobuf::int64 value)
{
    set_has_remainder();
    remainder_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.remainder)
}

// optional int64 modulus = 2;
bool DeviceAutoEnrollmentRequest::has_modulus() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceAutoEnrollmentRequest::set_has_modulus()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceAutoEnrollmentRequest::clear_has_modulus()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceAutoEnrollmentRequest::clear_modulus()
{
    modulus_ = GOOGLE_LONGLONG(0);
    clear_has_modulus();
}
::google::protobuf::int64 DeviceAutoEnrollmentRequest::modulus() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentRequest.modulus)
    return modulus_;
}
void DeviceAutoEnrollmentRequest::set_modulus(::google::protobuf::int64 value)
{
    set_has_modulus();
    modulus_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentRequest.modulus)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAutoEnrollmentResponse(
    DeviceAutoEnrollmentResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAutoEnrollmentResponse::kExpectedModulusFieldNumber;
const int DeviceAutoEnrollmentResponse::kHashFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAutoEnrollmentResponse::DeviceAutoEnrollmentResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceAutoEnrollmentResponse)
}

void DeviceAutoEnrollmentResponse::InitAsDefaultInstance()
{
}

DeviceAutoEnrollmentResponse::DeviceAutoEnrollmentResponse(const DeviceAutoEnrollmentResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAutoEnrollmentResponse)
}

void DeviceAutoEnrollmentResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    expected_modulus_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAutoEnrollmentResponse::~DeviceAutoEnrollmentResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceAutoEnrollmentResponse)
    SharedDtor();
}

void DeviceAutoEnrollmentResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceAutoEnrollmentResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAutoEnrollmentResponse& DeviceAutoEnrollmentResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceAutoEnrollmentResponse* DeviceAutoEnrollmentResponse::default_instance_ = NULL;

DeviceAutoEnrollmentResponse* DeviceAutoEnrollmentResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceAutoEnrollmentResponse* n = new DeviceAutoEnrollmentResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceAutoEnrollmentResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAutoEnrollmentResponse)
    expected_modulus_ = GOOGLE_LONGLONG(0);
    hash_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAutoEnrollmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceAutoEnrollmentResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAutoEnrollmentResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 expected_modulus = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &expected_modulus_)));
                set_has_expected_modulus();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_hash;
            break;
        }

        // repeated bytes hash = 2;
        case 2: {
            if (tag == 18) {
            parse_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->add_hash()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_hash;
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAutoEnrollmentResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAutoEnrollmentResponse)
    return false;
#undef DO_
}

void DeviceAutoEnrollmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAutoEnrollmentResponse)
    // optional int64 expected_modulus = 1;
    if (has_expected_modulus()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expected_modulus(), output);
    }

    // repeated bytes hash = 2;
    for (int i = 0; i < this->hash_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteBytes(
            2, this->hash(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAutoEnrollmentResponse)
}

int DeviceAutoEnrollmentResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAutoEnrollmentResponse)
    int total_size = 0;

    // optional int64 expected_modulus = 1;
    if (has_expected_modulus()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->expected_modulus());
    }

    // repeated bytes hash = 2;
    total_size += 1 * this->hash_size();
    for (int i = 0; i < this->hash_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
            this->hash(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceAutoEnrollmentResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceAutoEnrollmentResponse*>(&from));
}

void DeviceAutoEnrollmentResponse::MergeFrom(const DeviceAutoEnrollmentResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAutoEnrollmentResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    hash_.MergeFrom(from.hash_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_expected_modulus()) {
            set_expected_modulus(from.expected_modulus());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceAutoEnrollmentResponse::CopyFrom(const DeviceAutoEnrollmentResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAutoEnrollmentResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceAutoEnrollmentResponse::IsInitialized() const
{

    return true;
}

void DeviceAutoEnrollmentResponse::Swap(DeviceAutoEnrollmentResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceAutoEnrollmentResponse::InternalSwap(DeviceAutoEnrollmentResponse* other)
{
    std::swap(expected_modulus_, other->expected_modulus_);
    hash_.UnsafeArenaSwap(&other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAutoEnrollmentResponse::GetTypeName() const
{
    return "enterprise_management.DeviceAutoEnrollmentResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAutoEnrollmentResponse

// optional int64 expected_modulus = 1;
bool DeviceAutoEnrollmentResponse::has_expected_modulus() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAutoEnrollmentResponse::set_has_expected_modulus()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceAutoEnrollmentResponse::clear_has_expected_modulus()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceAutoEnrollmentResponse::clear_expected_modulus()
{
    expected_modulus_ = GOOGLE_LONGLONG(0);
    clear_has_expected_modulus();
}
::google::protobuf::int64 DeviceAutoEnrollmentResponse::expected_modulus() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentResponse.expected_modulus)
    return expected_modulus_;
}
void DeviceAutoEnrollmentResponse::set_expected_modulus(::google::protobuf::int64 value)
{
    set_has_expected_modulus();
    expected_modulus_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.expected_modulus)
}

// repeated bytes hash = 2;
int DeviceAutoEnrollmentResponse::hash_size() const
{
    return hash_.size();
}
void DeviceAutoEnrollmentResponse::clear_hash()
{
    hash_.Clear();
}
const ::std::string& DeviceAutoEnrollmentResponse::hash(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAutoEnrollmentResponse.hash)
    return hash_.Get(index);
}
::std::string* DeviceAutoEnrollmentResponse::mutable_hash(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAutoEnrollmentResponse.hash)
    return hash_.Mutable(index);
}
void DeviceAutoEnrollmentResponse::set_hash(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAutoEnrollmentResponse.hash)
    hash_.Mutable(index)->assign(value);
}
void DeviceAutoEnrollmentResponse::set_hash(int index, const char* value)
{
    hash_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
void DeviceAutoEnrollmentResponse::set_hash(int index, const void* value, size_t size)
{
    hash_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
::std::string* DeviceAutoEnrollmentResponse::add_hash()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceAutoEnrollmentResponse.hash)
    return hash_.Add();
}
void DeviceAutoEnrollmentResponse::add_hash(const ::std::string& value)
{
    hash_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
void DeviceAutoEnrollmentResponse::add_hash(const char* value)
{
    hash_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
void DeviceAutoEnrollmentResponse::add_hash(const void* value, size_t size)
{
    hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceAutoEnrollmentResponse.hash)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
DeviceAutoEnrollmentResponse::hash() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceAutoEnrollmentResponse.hash)
    return hash_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
DeviceAutoEnrollmentResponse::mutable_hash()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceAutoEnrollmentResponse.hash)
    return &hash_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceStateRetrievalRequest(
    DeviceStateRetrievalRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateRetrievalRequest::kServerBackedStateKeyFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateRetrievalRequest::DeviceStateRetrievalRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateRetrievalRequest)
}

void DeviceStateRetrievalRequest::InitAsDefaultInstance()
{
}

DeviceStateRetrievalRequest::DeviceStateRetrievalRequest(const DeviceStateRetrievalRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateRetrievalRequest)
}

void DeviceStateRetrievalRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    server_backed_state_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceStateRetrievalRequest::~DeviceStateRetrievalRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateRetrievalRequest)
    SharedDtor();
}

void DeviceStateRetrievalRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    server_backed_state_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceStateRetrievalRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStateRetrievalRequest& DeviceStateRetrievalRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceStateRetrievalRequest* DeviceStateRetrievalRequest::default_instance_ = NULL;

DeviceStateRetrievalRequest* DeviceStateRetrievalRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceStateRetrievalRequest* n = new DeviceStateRetrievalRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceStateRetrievalRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateRetrievalRequest)
    if (has_server_backed_state_key()) {
        server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceStateRetrievalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceStateRetrievalRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateRetrievalRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bytes server_backed_state_key = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_server_backed_state_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateRetrievalRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateRetrievalRequest)
    return false;
#undef DO_
}

void DeviceStateRetrievalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateRetrievalRequest)
    // optional bytes server_backed_state_key = 1;
    if (has_server_backed_state_key()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            1, this->server_backed_state_key(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateRetrievalRequest)
}

int DeviceStateRetrievalRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateRetrievalRequest)
    int total_size = 0;

    // optional bytes server_backed_state_key = 1;
    if (has_server_backed_state_key()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->server_backed_state_key());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceStateRetrievalRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceStateRetrievalRequest*>(&from));
}

void DeviceStateRetrievalRequest::MergeFrom(const DeviceStateRetrievalRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateRetrievalRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_server_backed_state_key()) {
            set_has_server_backed_state_key();
            server_backed_state_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_backed_state_key_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceStateRetrievalRequest::CopyFrom(const DeviceStateRetrievalRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateRetrievalRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceStateRetrievalRequest::IsInitialized() const
{

    return true;
}

void DeviceStateRetrievalRequest::Swap(DeviceStateRetrievalRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceStateRetrievalRequest::InternalSwap(DeviceStateRetrievalRequest* other)
{
    server_backed_state_key_.Swap(&other->server_backed_state_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStateRetrievalRequest::GetTypeName() const
{
    return "enterprise_management.DeviceStateRetrievalRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateRetrievalRequest

// optional bytes server_backed_state_key = 1;
bool DeviceStateRetrievalRequest::has_server_backed_state_key() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStateRetrievalRequest::set_has_server_backed_state_key()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceStateRetrievalRequest::clear_has_server_backed_state_key()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceStateRetrievalRequest::clear_server_backed_state_key()
{
    server_backed_state_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_server_backed_state_key();
}
const ::std::string& DeviceStateRetrievalRequest::server_backed_state_key() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
    return server_backed_state_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStateRetrievalRequest::set_server_backed_state_key(const ::std::string& value)
{
    set_has_server_backed_state_key();
    server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
void DeviceStateRetrievalRequest::set_server_backed_state_key(const char* value)
{
    set_has_server_backed_state_key();
    server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
void DeviceStateRetrievalRequest::set_server_backed_state_key(const void* value, size_t size)
{
    set_has_server_backed_state_key();
    server_backed_state_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}
::std::string* DeviceStateRetrievalRequest::mutable_server_backed_state_key()
{
    set_has_server_backed_state_key();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
    return server_backed_state_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStateRetrievalRequest::release_server_backed_state_key()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
    clear_has_server_backed_state_key();
    return server_backed_state_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStateRetrievalRequest::set_allocated_server_backed_state_key(::std::string* server_backed_state_key)
{
    if (server_backed_state_key != NULL) {
        set_has_server_backed_state_key();
    } else {
        clear_has_server_backed_state_key();
    }
    server_backed_state_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_backed_state_key);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalRequest.server_backed_state_key)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceStateKeyUpdateRequest(
    DeviceStateKeyUpdateRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateKeyUpdateRequest::kServerBackedStateKeyFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateKeyUpdateRequest::DeviceStateKeyUpdateRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateKeyUpdateRequest)
}

void DeviceStateKeyUpdateRequest::InitAsDefaultInstance()
{
}

DeviceStateKeyUpdateRequest::DeviceStateKeyUpdateRequest(const DeviceStateKeyUpdateRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateKeyUpdateRequest)
}

void DeviceStateKeyUpdateRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceStateKeyUpdateRequest::~DeviceStateKeyUpdateRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateKeyUpdateRequest)
    SharedDtor();
}

void DeviceStateKeyUpdateRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceStateKeyUpdateRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStateKeyUpdateRequest& DeviceStateKeyUpdateRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceStateKeyUpdateRequest* DeviceStateKeyUpdateRequest::default_instance_ = NULL;

DeviceStateKeyUpdateRequest* DeviceStateKeyUpdateRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceStateKeyUpdateRequest* n = new DeviceStateKeyUpdateRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceStateKeyUpdateRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateKeyUpdateRequest)
    server_backed_state_key_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceStateKeyUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceStateKeyUpdateRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateKeyUpdateRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated bytes server_backed_state_key = 1;
        case 1: {
            if (tag == 10) {
            parse_server_backed_state_key:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->add_server_backed_state_key()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_server_backed_state_key;
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateKeyUpdateRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateKeyUpdateRequest)
    return false;
#undef DO_
}

void DeviceStateKeyUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateKeyUpdateRequest)
    // repeated bytes server_backed_state_key = 1;
    for (int i = 0; i < this->server_backed_state_key_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteBytes(
            1, this->server_backed_state_key(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateKeyUpdateRequest)
}

int DeviceStateKeyUpdateRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateKeyUpdateRequest)
    int total_size = 0;

    // repeated bytes server_backed_state_key = 1;
    total_size += 1 * this->server_backed_state_key_size();
    for (int i = 0; i < this->server_backed_state_key_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
            this->server_backed_state_key(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceStateKeyUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceStateKeyUpdateRequest*>(&from));
}

void DeviceStateKeyUpdateRequest::MergeFrom(const DeviceStateKeyUpdateRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateKeyUpdateRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    server_backed_state_key_.MergeFrom(from.server_backed_state_key_);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceStateKeyUpdateRequest::CopyFrom(const DeviceStateKeyUpdateRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateKeyUpdateRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceStateKeyUpdateRequest::IsInitialized() const
{

    return true;
}

void DeviceStateKeyUpdateRequest::Swap(DeviceStateKeyUpdateRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceStateKeyUpdateRequest::InternalSwap(DeviceStateKeyUpdateRequest* other)
{
    server_backed_state_key_.UnsafeArenaSwap(&other->server_backed_state_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStateKeyUpdateRequest::GetTypeName() const
{
    return "enterprise_management.DeviceStateKeyUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateKeyUpdateRequest

// repeated bytes server_backed_state_key = 1;
int DeviceStateKeyUpdateRequest::server_backed_state_key_size() const
{
    return server_backed_state_key_.size();
}
void DeviceStateKeyUpdateRequest::clear_server_backed_state_key()
{
    server_backed_state_key_.Clear();
}
const ::std::string& DeviceStateKeyUpdateRequest::server_backed_state_key(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
    return server_backed_state_key_.Get(index);
}
::std::string* DeviceStateKeyUpdateRequest::mutable_server_backed_state_key(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
    return server_backed_state_key_.Mutable(index);
}
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const ::std::string& value)
{
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
    server_backed_state_key_.Mutable(index)->assign(value);
}
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const char* value)
{
    server_backed_state_key_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
void DeviceStateKeyUpdateRequest::set_server_backed_state_key(int index, const void* value, size_t size)
{
    server_backed_state_key_.Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
::std::string* DeviceStateKeyUpdateRequest::add_server_backed_state_key()
{
    // @@protoc_insertion_point(field_add_mutable:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
    return server_backed_state_key_.Add();
}
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const ::std::string& value)
{
    server_backed_state_key_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const char* value)
{
    server_backed_state_key_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
void DeviceStateKeyUpdateRequest::add_server_backed_state_key(const void* value, size_t size)
{
    server_backed_state_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
}
const ::google::protobuf::RepeatedPtrField<::std::string>&
DeviceStateKeyUpdateRequest::server_backed_state_key() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
    return server_backed_state_key_;
}
::google::protobuf::RepeatedPtrField<::std::string>*
DeviceStateKeyUpdateRequest::mutable_server_backed_state_key()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceStateKeyUpdateRequest.server_backed_state_key)
    return &server_backed_state_key_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceStateRetrievalResponse(
    DeviceStateRetrievalResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceStateRetrievalResponse_RestoreMode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_NONE;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_REQUESTED;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_REENROLLMENT_ENFORCED;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RESTORE_MODE_DISABLED;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RestoreMode_MIN;
const DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::RestoreMode_MAX;
const int DeviceStateRetrievalResponse::RestoreMode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStateRetrievalResponse::kRestoreModeFieldNumber;
const int DeviceStateRetrievalResponse::kManagementDomainFieldNumber;
const int DeviceStateRetrievalResponse::kDisabledStateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStateRetrievalResponse::DeviceStateRetrievalResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceStateRetrievalResponse)
}

void DeviceStateRetrievalResponse::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    disabled_state_ = const_cast<::enterprise_management::DisabledState*>(
        ::enterprise_management::DisabledState::internal_default_instance());
#else
    disabled_state_ = const_cast<::enterprise_management::DisabledState*>(&::enterprise_management::DisabledState::default_instance());
#endif
}

DeviceStateRetrievalResponse::DeviceStateRetrievalResponse(const DeviceStateRetrievalResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceStateRetrievalResponse)
}

void DeviceStateRetrievalResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    restore_mode_ = 0;
    management_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    disabled_state_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceStateRetrievalResponse::~DeviceStateRetrievalResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceStateRetrievalResponse)
    SharedDtor();
}

void DeviceStateRetrievalResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    management_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete disabled_state_;
    }
}

void DeviceStateRetrievalResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceStateRetrievalResponse& DeviceStateRetrievalResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceStateRetrievalResponse* DeviceStateRetrievalResponse::default_instance_ = NULL;

DeviceStateRetrievalResponse* DeviceStateRetrievalResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceStateRetrievalResponse* n = new DeviceStateRetrievalResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceStateRetrievalResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceStateRetrievalResponse)
    if (_has_bits_[0 / 32] & 7u) {
        restore_mode_ = 0;
        if (has_management_domain()) {
            management_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_disabled_state()) {
            if (disabled_state_ != NULL)
                disabled_state_->::enterprise_management::DisabledState::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceStateRetrievalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceStateRetrievalResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceStateRetrievalResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(value)) {
                    set_restore_mode(static_cast<::enterprise_management::DeviceStateRetrievalResponse_RestoreMode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_management_domain;
            break;
        }

        // optional string management_domain = 2;
        case 2: {
            if (tag == 18) {
            parse_management_domain:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_management_domain()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_disabled_state;
            break;
        }

        // optional .enterprise_management.DisabledState disabled_state = 3;
        case 3: {
            if (tag == 26) {
            parse_disabled_state:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_disabled_state()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceStateRetrievalResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceStateRetrievalResponse)
    return false;
#undef DO_
}

void DeviceStateRetrievalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceStateRetrievalResponse)
    // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
    if (has_restore_mode()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->restore_mode(), output);
    }

    // optional string management_domain = 2;
    if (has_management_domain()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->management_domain(), output);
    }

    // optional .enterprise_management.DisabledState disabled_state = 3;
    if (has_disabled_state()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->disabled_state_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceStateRetrievalResponse)
}

int DeviceStateRetrievalResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceStateRetrievalResponse)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
        if (has_restore_mode()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->restore_mode());
        }

        // optional string management_domain = 2;
        if (has_management_domain()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->management_domain());
        }

        // optional .enterprise_management.DisabledState disabled_state = 3;
        if (has_disabled_state()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->disabled_state_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceStateRetrievalResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceStateRetrievalResponse*>(&from));
}

void DeviceStateRetrievalResponse::MergeFrom(const DeviceStateRetrievalResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceStateRetrievalResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_restore_mode()) {
            set_restore_mode(from.restore_mode());
        }
        if (from.has_management_domain()) {
            set_has_management_domain();
            management_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_domain_);
        }
        if (from.has_disabled_state()) {
            mutable_disabled_state()->::enterprise_management::DisabledState::MergeFrom(from.disabled_state());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceStateRetrievalResponse::CopyFrom(const DeviceStateRetrievalResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceStateRetrievalResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceStateRetrievalResponse::IsInitialized() const
{

    return true;
}

void DeviceStateRetrievalResponse::Swap(DeviceStateRetrievalResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceStateRetrievalResponse::InternalSwap(DeviceStateRetrievalResponse* other)
{
    std::swap(restore_mode_, other->restore_mode_);
    management_domain_.Swap(&other->management_domain_);
    std::swap(disabled_state_, other->disabled_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceStateRetrievalResponse::GetTypeName() const
{
    return "enterprise_management.DeviceStateRetrievalResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStateRetrievalResponse

// optional .enterprise_management.DeviceStateRetrievalResponse.RestoreMode restore_mode = 1 [default = RESTORE_MODE_NONE];
bool DeviceStateRetrievalResponse::has_restore_mode() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceStateRetrievalResponse::set_has_restore_mode()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceStateRetrievalResponse::clear_has_restore_mode()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceStateRetrievalResponse::clear_restore_mode()
{
    restore_mode_ = 0;
    clear_has_restore_mode();
}
::enterprise_management::DeviceStateRetrievalResponse_RestoreMode DeviceStateRetrievalResponse::restore_mode() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.restore_mode)
    return static_cast<::enterprise_management::DeviceStateRetrievalResponse_RestoreMode>(restore_mode_);
}
void DeviceStateRetrievalResponse::set_restore_mode(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode value)
{
    assert(::enterprise_management::DeviceStateRetrievalResponse_RestoreMode_IsValid(value));
    set_has_restore_mode();
    restore_mode_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalResponse.restore_mode)
}

// optional string management_domain = 2;
bool DeviceStateRetrievalResponse::has_management_domain() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceStateRetrievalResponse::set_has_management_domain()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceStateRetrievalResponse::clear_has_management_domain()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceStateRetrievalResponse::clear_management_domain()
{
    management_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_management_domain();
}
const ::std::string& DeviceStateRetrievalResponse::management_domain() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.management_domain)
    return management_domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStateRetrievalResponse::set_management_domain(const ::std::string& value)
{
    set_has_management_domain();
    management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
void DeviceStateRetrievalResponse::set_management_domain(const char* value)
{
    set_has_management_domain();
    management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
void DeviceStateRetrievalResponse::set_management_domain(const char* value, size_t size)
{
    set_has_management_domain();
    management_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}
::std::string* DeviceStateRetrievalResponse::mutable_management_domain()
{
    set_has_management_domain();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalResponse.management_domain)
    return management_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStateRetrievalResponse::release_management_domain()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalResponse.management_domain)
    clear_has_management_domain();
    return management_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStateRetrievalResponse::set_allocated_management_domain(::std::string* management_domain)
{
    if (management_domain != NULL) {
        set_has_management_domain();
    } else {
        clear_has_management_domain();
    }
    management_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_domain);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalResponse.management_domain)
}

// optional .enterprise_management.DisabledState disabled_state = 3;
bool DeviceStateRetrievalResponse::has_disabled_state() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceStateRetrievalResponse::set_has_disabled_state()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceStateRetrievalResponse::clear_has_disabled_state()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceStateRetrievalResponse::clear_disabled_state()
{
    if (disabled_state_ != NULL)
        disabled_state_->::enterprise_management::DisabledState::Clear();
    clear_has_disabled_state();
}
const ::enterprise_management::DisabledState& DeviceStateRetrievalResponse::disabled_state() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return disabled_state_ != NULL ? *disabled_state_ : *default_instance().disabled_state_;
#else
    return disabled_state_ != NULL ? *disabled_state_ : *default_instance_->disabled_state_;
#endif
}
::enterprise_management::DisabledState* DeviceStateRetrievalResponse::mutable_disabled_state()
{
    set_has_disabled_state();
    if (disabled_state_ == NULL) {
        disabled_state_ = new ::enterprise_management::DisabledState;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
    return disabled_state_;
}
::enterprise_management::DisabledState* DeviceStateRetrievalResponse::release_disabled_state()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
    clear_has_disabled_state();
    ::enterprise_management::DisabledState* temp = disabled_state_;
    disabled_state_ = NULL;
    return temp;
}
void DeviceStateRetrievalResponse::set_allocated_disabled_state(::enterprise_management::DisabledState* disabled_state)
{
    delete disabled_state_;
    disabled_state_ = disabled_state;
    if (disabled_state) {
        set_has_disabled_state();
    } else {
        clear_has_disabled_state();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceStateRetrievalResponse.disabled_state)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDevicePairingRequest(
    DevicePairingRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePairingRequest::kHostDeviceIdFieldNumber;
const int DevicePairingRequest::kControllerDeviceIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePairingRequest::DevicePairingRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DevicePairingRequest)
}

void DevicePairingRequest::InitAsDefaultInstance()
{
}

DevicePairingRequest::DevicePairingRequest(const DevicePairingRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePairingRequest)
}

void DevicePairingRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    host_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    controller_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevicePairingRequest::~DevicePairingRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DevicePairingRequest)
    SharedDtor();
}

void DevicePairingRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    host_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    controller_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DevicePairingRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePairingRequest& DevicePairingRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DevicePairingRequest* DevicePairingRequest::default_instance_ = NULL;

DevicePairingRequest* DevicePairingRequest::New(::google::protobuf::Arena* arena) const
{
    DevicePairingRequest* n = new DevicePairingRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DevicePairingRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePairingRequest)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_host_device_id()) {
            host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_controller_device_id()) {
            controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DevicePairingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDevicePairingRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DevicePairingRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string host_device_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_host_device_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_controller_device_id;
            break;
        }

        // optional string controller_device_id = 2;
        case 2: {
            if (tag == 18) {
            parse_controller_device_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_controller_device_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DevicePairingRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePairingRequest)
    return false;
#undef DO_
}

void DevicePairingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePairingRequest)
    // optional string host_device_id = 1;
    if (has_host_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->host_device_id(), output);
    }

    // optional string controller_device_id = 2;
    if (has_controller_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->controller_device_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePairingRequest)
}

int DevicePairingRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePairingRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string host_device_id = 1;
        if (has_host_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->host_device_id());
        }

        // optional string controller_device_id = 2;
        if (has_controller_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->controller_device_id());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DevicePairingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DevicePairingRequest*>(&from));
}

void DevicePairingRequest::MergeFrom(const DevicePairingRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePairingRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_host_device_id()) {
            set_has_host_device_id();
            host_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
        }
        if (from.has_controller_device_id()) {
            set_has_controller_device_id();
            controller_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DevicePairingRequest::CopyFrom(const DevicePairingRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePairingRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DevicePairingRequest::IsInitialized() const
{

    return true;
}

void DevicePairingRequest::Swap(DevicePairingRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DevicePairingRequest::InternalSwap(DevicePairingRequest* other)
{
    host_device_id_.Swap(&other->host_device_id_);
    controller_device_id_.Swap(&other->controller_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePairingRequest::GetTypeName() const
{
    return "enterprise_management.DevicePairingRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePairingRequest

// optional string host_device_id = 1;
bool DevicePairingRequest::has_host_device_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DevicePairingRequest::set_has_host_device_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void DevicePairingRequest::clear_has_host_device_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DevicePairingRequest::clear_host_device_id()
{
    host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_host_device_id();
}
const ::std::string& DevicePairingRequest::host_device_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DevicePairingRequest.host_device_id)
    return host_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DevicePairingRequest::set_host_device_id(const ::std::string& value)
{
    set_has_host_device_id();
    host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DevicePairingRequest.host_device_id)
}
void DevicePairingRequest::set_host_device_id(const char* value)
{
    set_has_host_device_id();
    host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DevicePairingRequest.host_device_id)
}
void DevicePairingRequest::set_host_device_id(const char* value, size_t size)
{
    set_has_host_device_id();
    host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePairingRequest.host_device_id)
}
::std::string* DevicePairingRequest::mutable_host_device_id()
{
    set_has_host_device_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePairingRequest.host_device_id)
    return host_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DevicePairingRequest::release_host_device_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DevicePairingRequest.host_device_id)
    clear_has_host_device_id();
    return host_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DevicePairingRequest::set_allocated_host_device_id(::std::string* host_device_id)
{
    if (host_device_id != NULL) {
        set_has_host_device_id();
    } else {
        clear_has_host_device_id();
    }
    host_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePairingRequest.host_device_id)
}

// optional string controller_device_id = 2;
bool DevicePairingRequest::has_controller_device_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DevicePairingRequest::set_has_controller_device_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void DevicePairingRequest::clear_has_controller_device_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DevicePairingRequest::clear_controller_device_id()
{
    controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_controller_device_id();
}
const ::std::string& DevicePairingRequest::controller_device_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DevicePairingRequest.controller_device_id)
    return controller_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DevicePairingRequest::set_controller_device_id(const ::std::string& value)
{
    set_has_controller_device_id();
    controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DevicePairingRequest.controller_device_id)
}
void DevicePairingRequest::set_controller_device_id(const char* value)
{
    set_has_controller_device_id();
    controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DevicePairingRequest.controller_device_id)
}
void DevicePairingRequest::set_controller_device_id(const char* value, size_t size)
{
    set_has_controller_device_id();
    controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DevicePairingRequest.controller_device_id)
}
::std::string* DevicePairingRequest::mutable_controller_device_id()
{
    set_has_controller_device_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DevicePairingRequest.controller_device_id)
    return controller_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DevicePairingRequest::release_controller_device_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DevicePairingRequest.controller_device_id)
    clear_has_controller_device_id();
    return controller_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DevicePairingRequest::set_allocated_controller_device_id(::std::string* controller_device_id)
{
    if (controller_device_id != NULL) {
        set_has_controller_device_id();
    } else {
        clear_has_controller_device_id();
    }
    controller_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_device_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DevicePairingRequest.controller_device_id)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDevicePairingResponse(
    DevicePairingResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DevicePairingResponse_StatusCode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DevicePairingResponse_StatusCode DevicePairingResponse::SUCCESS;
const DevicePairingResponse_StatusCode DevicePairingResponse::FAILED;
const DevicePairingResponse_StatusCode DevicePairingResponse::HOST_DEVICE_NOT_FOUND;
const DevicePairingResponse_StatusCode DevicePairingResponse::CONTROLLER_DEVICE_NOT_FOUND;
const DevicePairingResponse_StatusCode DevicePairingResponse::HOST_DEVICE_DEPROVISIONED;
const DevicePairingResponse_StatusCode DevicePairingResponse::CONTROLLER_DEVICE_DEPROVISIONED;
const DevicePairingResponse_StatusCode DevicePairingResponse::StatusCode_MIN;
const DevicePairingResponse_StatusCode DevicePairingResponse::StatusCode_MAX;
const int DevicePairingResponse::StatusCode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePairingResponse::kStatusCodeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePairingResponse::DevicePairingResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DevicePairingResponse)
}

void DevicePairingResponse::InitAsDefaultInstance()
{
}

DevicePairingResponse::DevicePairingResponse(const DevicePairingResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DevicePairingResponse)
}

void DevicePairingResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    status_code_ = 1;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevicePairingResponse::~DevicePairingResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DevicePairingResponse)
    SharedDtor();
}

void DevicePairingResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DevicePairingResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DevicePairingResponse& DevicePairingResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DevicePairingResponse* DevicePairingResponse::default_instance_ = NULL;

DevicePairingResponse* DevicePairingResponse::New(::google::protobuf::Arena* arena) const
{
    DevicePairingResponse* n = new DevicePairingResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DevicePairingResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DevicePairingResponse)
    status_code_ = 1;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DevicePairingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDevicePairingResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DevicePairingResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DevicePairingResponse_StatusCode_IsValid(value)) {
                    set_status_code(static_cast<::enterprise_management::DevicePairingResponse_StatusCode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DevicePairingResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DevicePairingResponse)
    return false;
#undef DO_
}

void DevicePairingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DevicePairingResponse)
    // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
    if (has_status_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->status_code(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DevicePairingResponse)
}

int DevicePairingResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DevicePairingResponse)
    int total_size = 0;

    // optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
    if (has_status_code()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DevicePairingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DevicePairingResponse*>(&from));
}

void DevicePairingResponse::MergeFrom(const DevicePairingResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DevicePairingResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_status_code()) {
            set_status_code(from.status_code());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DevicePairingResponse::CopyFrom(const DevicePairingResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DevicePairingResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DevicePairingResponse::IsInitialized() const
{

    return true;
}

void DevicePairingResponse::Swap(DevicePairingResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DevicePairingResponse::InternalSwap(DevicePairingResponse* other)
{
    std::swap(status_code_, other->status_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DevicePairingResponse::GetTypeName() const
{
    return "enterprise_management.DevicePairingResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevicePairingResponse

// optional .enterprise_management.DevicePairingResponse.StatusCode status_code = 1 [default = FAILED];
bool DevicePairingResponse::has_status_code() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DevicePairingResponse::set_has_status_code()
{
    _has_bits_[0] |= 0x00000001u;
}
void DevicePairingResponse::clear_has_status_code()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DevicePairingResponse::clear_status_code()
{
    status_code_ = 1;
    clear_has_status_code();
}
::enterprise_management::DevicePairingResponse_StatusCode DevicePairingResponse::status_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DevicePairingResponse.status_code)
    return static_cast<::enterprise_management::DevicePairingResponse_StatusCode>(status_code_);
}
void DevicePairingResponse::set_status_code(::enterprise_management::DevicePairingResponse_StatusCode value)
{
    assert(::enterprise_management::DevicePairingResponse_StatusCode_IsValid(value));
    set_has_status_code();
    status_code_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DevicePairingResponse.status_code)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCheckDevicePairingRequest(
    CheckDevicePairingRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckDevicePairingRequest::kHostDeviceIdFieldNumber;
const int CheckDevicePairingRequest::kControllerDeviceIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckDevicePairingRequest::CheckDevicePairingRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CheckDevicePairingRequest)
}

void CheckDevicePairingRequest::InitAsDefaultInstance()
{
}

CheckDevicePairingRequest::CheckDevicePairingRequest(const CheckDevicePairingRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDevicePairingRequest)
}

void CheckDevicePairingRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    host_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    controller_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckDevicePairingRequest::~CheckDevicePairingRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CheckDevicePairingRequest)
    SharedDtor();
}

void CheckDevicePairingRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    host_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    controller_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void CheckDevicePairingRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckDevicePairingRequest& CheckDevicePairingRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CheckDevicePairingRequest* CheckDevicePairingRequest::default_instance_ = NULL;

CheckDevicePairingRequest* CheckDevicePairingRequest::New(::google::protobuf::Arena* arena) const
{
    CheckDevicePairingRequest* n = new CheckDevicePairingRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CheckDevicePairingRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDevicePairingRequest)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_host_device_id()) {
            host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_controller_device_id()) {
            controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckDevicePairingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCheckDevicePairingRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CheckDevicePairingRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string host_device_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_host_device_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_controller_device_id;
            break;
        }

        // optional string controller_device_id = 2;
        case 2: {
            if (tag == 18) {
            parse_controller_device_id:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_controller_device_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CheckDevicePairingRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDevicePairingRequest)
    return false;
#undef DO_
}

void CheckDevicePairingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDevicePairingRequest)
    // optional string host_device_id = 1;
    if (has_host_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->host_device_id(), output);
    }

    // optional string controller_device_id = 2;
    if (has_controller_device_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->controller_device_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDevicePairingRequest)
}

int CheckDevicePairingRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDevicePairingRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string host_device_id = 1;
        if (has_host_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->host_device_id());
        }

        // optional string controller_device_id = 2;
        if (has_controller_device_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->controller_device_id());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CheckDevicePairingRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CheckDevicePairingRequest*>(&from));
}

void CheckDevicePairingRequest::MergeFrom(const CheckDevicePairingRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDevicePairingRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_host_device_id()) {
            set_has_host_device_id();
            host_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_id_);
        }
        if (from.has_controller_device_id()) {
            set_has_controller_device_id();
            controller_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.controller_device_id_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CheckDevicePairingRequest::CopyFrom(const CheckDevicePairingRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDevicePairingRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CheckDevicePairingRequest::IsInitialized() const
{

    return true;
}

void CheckDevicePairingRequest::Swap(CheckDevicePairingRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CheckDevicePairingRequest::InternalSwap(CheckDevicePairingRequest* other)
{
    host_device_id_.Swap(&other->host_device_id_);
    controller_device_id_.Swap(&other->controller_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckDevicePairingRequest::GetTypeName() const
{
    return "enterprise_management.CheckDevicePairingRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckDevicePairingRequest

// optional string host_device_id = 1;
bool CheckDevicePairingRequest::has_host_device_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckDevicePairingRequest::set_has_host_device_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void CheckDevicePairingRequest::clear_has_host_device_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void CheckDevicePairingRequest::clear_host_device_id()
{
    host_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_host_device_id();
}
const ::std::string& CheckDevicePairingRequest::host_device_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingRequest.host_device_id)
    return host_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckDevicePairingRequest::set_host_device_id(const ::std::string& value)
{
    set_has_host_device_id();
    host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
void CheckDevicePairingRequest::set_host_device_id(const char* value)
{
    set_has_host_device_id();
    host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
void CheckDevicePairingRequest::set_host_device_id(const char* value, size_t size)
{
    set_has_host_device_id();
    host_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.CheckDevicePairingRequest.host_device_id)
}
::std::string* CheckDevicePairingRequest::mutable_host_device_id()
{
    set_has_host_device_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.CheckDevicePairingRequest.host_device_id)
    return host_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckDevicePairingRequest::release_host_device_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.CheckDevicePairingRequest.host_device_id)
    clear_has_host_device_id();
    return host_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckDevicePairingRequest::set_allocated_host_device_id(::std::string* host_device_id)
{
    if (host_device_id != NULL) {
        set_has_host_device_id();
    } else {
        clear_has_host_device_id();
    }
    host_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.CheckDevicePairingRequest.host_device_id)
}

// optional string controller_device_id = 2;
bool CheckDevicePairingRequest::has_controller_device_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckDevicePairingRequest::set_has_controller_device_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void CheckDevicePairingRequest::clear_has_controller_device_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void CheckDevicePairingRequest::clear_controller_device_id()
{
    controller_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_controller_device_id();
}
const ::std::string& CheckDevicePairingRequest::controller_device_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingRequest.controller_device_id)
    return controller_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckDevicePairingRequest::set_controller_device_id(const ::std::string& value)
{
    set_has_controller_device_id();
    controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
void CheckDevicePairingRequest::set_controller_device_id(const char* value)
{
    set_has_controller_device_id();
    controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
void CheckDevicePairingRequest::set_controller_device_id(const char* value, size_t size)
{
    set_has_controller_device_id();
    controller_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}
::std::string* CheckDevicePairingRequest::mutable_controller_device_id()
{
    set_has_controller_device_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.CheckDevicePairingRequest.controller_device_id)
    return controller_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckDevicePairingRequest::release_controller_device_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.CheckDevicePairingRequest.controller_device_id)
    clear_has_controller_device_id();
    return controller_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckDevicePairingRequest::set_allocated_controller_device_id(::std::string* controller_device_id)
{
    if (controller_device_id != NULL) {
        set_has_controller_device_id();
    } else {
        clear_has_controller_device_id();
    }
    controller_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_device_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.CheckDevicePairingRequest.controller_device_id)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCheckDevicePairingResponse(
    CheckDevicePairingResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool CheckDevicePairingResponse_StatusCode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::PAIRED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::NOT_PAIRED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::HOST_DEVICE_NOT_FOUND;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::CONTROLLER_DEVICE_NOT_FOUND;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::HOST_DEVICE_DEPROVISIONED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::CONTROLLER_DEVICE_DEPROVISIONED;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::INVALID_CONTROLLER_DEVICE_IDENTITY;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::StatusCode_MIN;
const CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::StatusCode_MAX;
const int CheckDevicePairingResponse::StatusCode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckDevicePairingResponse::kStatusCodeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckDevicePairingResponse::CheckDevicePairingResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CheckDevicePairingResponse)
}

void CheckDevicePairingResponse::InitAsDefaultInstance()
{
}

CheckDevicePairingResponse::CheckDevicePairingResponse(const CheckDevicePairingResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckDevicePairingResponse)
}

void CheckDevicePairingResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    status_code_ = 1;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckDevicePairingResponse::~CheckDevicePairingResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CheckDevicePairingResponse)
    SharedDtor();
}

void CheckDevicePairingResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void CheckDevicePairingResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckDevicePairingResponse& CheckDevicePairingResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CheckDevicePairingResponse* CheckDevicePairingResponse::default_instance_ = NULL;

CheckDevicePairingResponse* CheckDevicePairingResponse::New(::google::protobuf::Arena* arena) const
{
    CheckDevicePairingResponse* n = new CheckDevicePairingResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CheckDevicePairingResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CheckDevicePairingResponse)
    status_code_ = 1;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckDevicePairingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCheckDevicePairingResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CheckDevicePairingResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(value)) {
                    set_status_code(static_cast<::enterprise_management::CheckDevicePairingResponse_StatusCode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CheckDevicePairingResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CheckDevicePairingResponse)
    return false;
#undef DO_
}

void CheckDevicePairingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CheckDevicePairingResponse)
    // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
    if (has_status_code()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->status_code(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CheckDevicePairingResponse)
}

int CheckDevicePairingResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckDevicePairingResponse)
    int total_size = 0;

    // optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
    if (has_status_code()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CheckDevicePairingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CheckDevicePairingResponse*>(&from));
}

void CheckDevicePairingResponse::MergeFrom(const CheckDevicePairingResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckDevicePairingResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_status_code()) {
            set_status_code(from.status_code());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CheckDevicePairingResponse::CopyFrom(const CheckDevicePairingResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckDevicePairingResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CheckDevicePairingResponse::IsInitialized() const
{

    return true;
}

void CheckDevicePairingResponse::Swap(CheckDevicePairingResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CheckDevicePairingResponse::InternalSwap(CheckDevicePairingResponse* other)
{
    std::swap(status_code_, other->status_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckDevicePairingResponse::GetTypeName() const
{
    return "enterprise_management.CheckDevicePairingResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckDevicePairingResponse

// optional .enterprise_management.CheckDevicePairingResponse.StatusCode status_code = 1 [default = NOT_PAIRED];
bool CheckDevicePairingResponse::has_status_code() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckDevicePairingResponse::set_has_status_code()
{
    _has_bits_[0] |= 0x00000001u;
}
void CheckDevicePairingResponse::clear_has_status_code()
{
    _has_bits_[0] &= ~0x00000001u;
}
void CheckDevicePairingResponse::clear_status_code()
{
    status_code_ = 1;
    clear_has_status_code();
}
::enterprise_management::CheckDevicePairingResponse_StatusCode CheckDevicePairingResponse::status_code() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CheckDevicePairingResponse.status_code)
    return static_cast<::enterprise_management::CheckDevicePairingResponse_StatusCode>(status_code_);
}
void CheckDevicePairingResponse::set_status_code(::enterprise_management::CheckDevicePairingResponse_StatusCode value)
{
    assert(::enterprise_management::CheckDevicePairingResponse_StatusCode_IsValid(value));
    set_has_status_code();
    status_code_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.CheckDevicePairingResponse.status_code)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRemoteCommand(
    RemoteCommand* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool RemoteCommand_Type_IsValid(int value)
{
    switch (value) {
    case -1:
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteCommand_Type RemoteCommand::COMMAND_ECHO_TEST;
const RemoteCommand_Type RemoteCommand::DEVICE_REBOOT;
const RemoteCommand_Type RemoteCommand::DEVICE_SCREENSHOT;
const RemoteCommand_Type RemoteCommand::Type_MIN;
const RemoteCommand_Type RemoteCommand::Type_MAX;
const int RemoteCommand::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteCommand::kTypeFieldNumber;
const int RemoteCommand::kCommandIdFieldNumber;
const int RemoteCommand::kAgeOfCommandFieldNumber;
const int RemoteCommand::kPayloadFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteCommand::RemoteCommand()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.RemoteCommand)
}

void RemoteCommand::InitAsDefaultInstance()
{
}

RemoteCommand::RemoteCommand(const RemoteCommand& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.RemoteCommand)
}

void RemoteCommand::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = -1;
    command_id_ = GOOGLE_LONGLONG(0);
    age_of_command_ = GOOGLE_LONGLONG(0);
    payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteCommand::~RemoteCommand()
{
    // @@protoc_insertion_point(destructor:enterprise_management.RemoteCommand)
    SharedDtor();
}

void RemoteCommand::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void RemoteCommand::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteCommand& RemoteCommand::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

RemoteCommand* RemoteCommand::default_instance_ = NULL;

RemoteCommand* RemoteCommand::New(::google::protobuf::Arena* arena) const
{
    RemoteCommand* n = new RemoteCommand;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RemoteCommand::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.RemoteCommand)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                   \
    _Pragma("clang diagnostic push")                                                                    \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(RemoteCommand, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<RemoteCommand*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 15u) {
        ZR_(command_id_, age_of_command_);
        type_ = -1;
        if (has_payload()) {
            payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoteCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForRemoteCommand, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.RemoteCommand)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.RemoteCommand.Type type = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::RemoteCommand_Type_IsValid(value)) {
                    set_type(static_cast<::enterprise_management::RemoteCommand_Type>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_command_id;
            break;
        }

        // optional int64 command_id = 2;
        case 2: {
            if (tag == 16) {
            parse_command_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &command_id_)));
                set_has_command_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_age_of_command;
            break;
        }

        // optional int64 age_of_command = 3;
        case 3: {
            if (tag == 24) {
            parse_age_of_command:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &age_of_command_)));
                set_has_age_of_command();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_payload;
            break;
        }

        // optional string payload = 4;
        case 4: {
            if (tag == 34) {
            parse_payload:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_payload()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.RemoteCommand)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.RemoteCommand)
    return false;
#undef DO_
}

void RemoteCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.RemoteCommand)
    // optional .enterprise_management.RemoteCommand.Type type = 1;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->type(), output);
    }

    // optional int64 command_id = 2;
    if (has_command_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->command_id(), output);
    }

    // optional int64 age_of_command = 3;
    if (has_age_of_command()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->age_of_command(), output);
    }

    // optional string payload = 4;
    if (has_payload()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->payload(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.RemoteCommand)
}

int RemoteCommand::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.RemoteCommand)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional .enterprise_management.RemoteCommand.Type type = 1;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
        }

        // optional int64 command_id = 2;
        if (has_command_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->command_id());
        }

        // optional int64 age_of_command = 3;
        if (has_age_of_command()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->age_of_command());
        }

        // optional string payload = 4;
        if (has_payload()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->payload());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RemoteCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const RemoteCommand*>(&from));
}

void RemoteCommand::MergeFrom(const RemoteCommand& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RemoteCommand)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_type()) {
            set_type(from.type());
        }
        if (from.has_command_id()) {
            set_command_id(from.command_id());
        }
        if (from.has_age_of_command()) {
            set_age_of_command(from.age_of_command());
        }
        if (from.has_payload()) {
            set_has_payload();
            payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void RemoteCommand::CopyFrom(const RemoteCommand& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RemoteCommand)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool RemoteCommand::IsInitialized() const
{

    return true;
}

void RemoteCommand::Swap(RemoteCommand* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void RemoteCommand::InternalSwap(RemoteCommand* other)
{
    std::swap(type_, other->type_);
    std::swap(command_id_, other->command_id_);
    std::swap(age_of_command_, other->age_of_command_);
    payload_.Swap(&other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoteCommand::GetTypeName() const
{
    return "enterprise_management.RemoteCommand";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteCommand

// optional .enterprise_management.RemoteCommand.Type type = 1;
bool RemoteCommand::has_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoteCommand::set_has_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void RemoteCommand::clear_has_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void RemoteCommand::clear_type()
{
    type_ = -1;
    clear_has_type();
}
::enterprise_management::RemoteCommand_Type RemoteCommand::type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.type)
    return static_cast<::enterprise_management::RemoteCommand_Type>(type_);
}
void RemoteCommand::set_type(::enterprise_management::RemoteCommand_Type value)
{
    assert(::enterprise_management::RemoteCommand_Type_IsValid(value));
    set_has_type();
    type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.type)
}

// optional int64 command_id = 2;
bool RemoteCommand::has_command_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoteCommand::set_has_command_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void RemoteCommand::clear_has_command_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void RemoteCommand::clear_command_id()
{
    command_id_ = GOOGLE_LONGLONG(0);
    clear_has_command_id();
}
::google::protobuf::int64 RemoteCommand::command_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.command_id)
    return command_id_;
}
void RemoteCommand::set_command_id(::google::protobuf::int64 value)
{
    set_has_command_id();
    command_id_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.command_id)
}

// optional int64 age_of_command = 3;
bool RemoteCommand::has_age_of_command() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemoteCommand::set_has_age_of_command()
{
    _has_bits_[0] |= 0x00000004u;
}
void RemoteCommand::clear_has_age_of_command()
{
    _has_bits_[0] &= ~0x00000004u;
}
void RemoteCommand::clear_age_of_command()
{
    age_of_command_ = GOOGLE_LONGLONG(0);
    clear_has_age_of_command();
}
::google::protobuf::int64 RemoteCommand::age_of_command() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.age_of_command)
    return age_of_command_;
}
void RemoteCommand::set_age_of_command(::google::protobuf::int64 value)
{
    set_has_age_of_command();
    age_of_command_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.age_of_command)
}

// optional string payload = 4;
bool RemoteCommand::has_payload() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemoteCommand::set_has_payload()
{
    _has_bits_[0] |= 0x00000008u;
}
void RemoteCommand::clear_has_payload()
{
    _has_bits_[0] &= ~0x00000008u;
}
void RemoteCommand::clear_payload()
{
    payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
}
const ::std::string& RemoteCommand::payload() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommand.payload)
    return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteCommand::set_payload(const ::std::string& value)
{
    set_has_payload();
    payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommand.payload)
}
void RemoteCommand::set_payload(const char* value)
{
    set_has_payload();
    payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.RemoteCommand.payload)
}
void RemoteCommand::set_payload(const char* value, size_t size)
{
    set_has_payload();
    payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.RemoteCommand.payload)
}
::std::string* RemoteCommand::mutable_payload()
{
    set_has_payload();
    // @@protoc_insertion_point(field_mutable:enterprise_management.RemoteCommand.payload)
    return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteCommand::release_payload()
{
    // @@protoc_insertion_point(field_release:enterprise_management.RemoteCommand.payload)
    clear_has_payload();
    return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteCommand::set_allocated_payload(::std::string* payload)
{
    if (payload != NULL) {
        set_has_payload();
    } else {
        clear_has_payload();
    }
    payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.RemoteCommand.payload)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRemoteCommandResult(
    RemoteCommandResult* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool RemoteCommandResult_ResultType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteCommandResult_ResultType RemoteCommandResult::RESULT_IGNORED;
const RemoteCommandResult_ResultType RemoteCommandResult::RESULT_FAILURE;
const RemoteCommandResult_ResultType RemoteCommandResult::RESULT_SUCCESS;
const RemoteCommandResult_ResultType RemoteCommandResult::ResultType_MIN;
const RemoteCommandResult_ResultType RemoteCommandResult::ResultType_MAX;
const int RemoteCommandResult::ResultType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteCommandResult::kResultFieldNumber;
const int RemoteCommandResult::kCommandIdFieldNumber;
const int RemoteCommandResult::kTimestampFieldNumber;
const int RemoteCommandResult::kPayloadFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteCommandResult::RemoteCommandResult()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.RemoteCommandResult)
}

void RemoteCommandResult::InitAsDefaultInstance()
{
}

RemoteCommandResult::RemoteCommandResult(const RemoteCommandResult& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.RemoteCommandResult)
}

void RemoteCommandResult::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    result_ = 0;
    command_id_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
    payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteCommandResult::~RemoteCommandResult()
{
    // @@protoc_insertion_point(destructor:enterprise_management.RemoteCommandResult)
    SharedDtor();
}

void RemoteCommandResult::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void RemoteCommandResult::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteCommandResult& RemoteCommandResult::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

RemoteCommandResult* RemoteCommandResult::default_instance_ = NULL;

RemoteCommandResult* RemoteCommandResult::New(::google::protobuf::Arena* arena) const
{
    RemoteCommandResult* n = new RemoteCommandResult;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RemoteCommandResult::Clear()
{
// @@protoc_insertion_point(message_clear_start:enterprise_management.RemoteCommandResult)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                         \
    _Pragma("clang diagnostic push")                                                                          \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(RemoteCommandResult, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<RemoteCommandResult*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 15u) {
        ZR_(command_id_, timestamp_);
        result_ = 0;
        if (has_payload()) {
            payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoteCommandResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForRemoteCommandResult, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.RemoteCommandResult)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::RemoteCommandResult_ResultType_IsValid(value)) {
                    set_result(static_cast<::enterprise_management::RemoteCommandResult_ResultType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(16))
                goto parse_command_id;
            break;
        }

        // optional int64 command_id = 2;
        case 2: {
            if (tag == 16) {
            parse_command_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &command_id_)));
                set_has_command_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_timestamp;
            break;
        }

        // optional int64 timestamp = 3;
        case 3: {
            if (tag == 24) {
            parse_timestamp:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &timestamp_)));
                set_has_timestamp();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_payload;
            break;
        }

        // optional string payload = 4;
        case 4: {
            if (tag == 34) {
            parse_payload:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_payload()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.RemoteCommandResult)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.RemoteCommandResult)
    return false;
#undef DO_
}

void RemoteCommandResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.RemoteCommandResult)
    // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
    if (has_result()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->result(), output);
    }

    // optional int64 command_id = 2;
    if (has_command_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->command_id(), output);
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
    }

    // optional string payload = 4;
    if (has_payload()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->payload(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.RemoteCommandResult)
}

int RemoteCommandResult::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.RemoteCommandResult)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 15u) {
        // optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
        if (has_result()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
        }

        // optional int64 command_id = 2;
        if (has_command_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->command_id());
        }

        // optional int64 timestamp = 3;
        if (has_timestamp()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
        }

        // optional string payload = 4;
        if (has_payload()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->payload());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RemoteCommandResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const RemoteCommandResult*>(&from));
}

void RemoteCommandResult::MergeFrom(const RemoteCommandResult& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.RemoteCommandResult)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_result()) {
            set_result(from.result());
        }
        if (from.has_command_id()) {
            set_command_id(from.command_id());
        }
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
        if (from.has_payload()) {
            set_has_payload();
            payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void RemoteCommandResult::CopyFrom(const RemoteCommandResult& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.RemoteCommandResult)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool RemoteCommandResult::IsInitialized() const
{

    return true;
}

void RemoteCommandResult::Swap(RemoteCommandResult* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void RemoteCommandResult::InternalSwap(RemoteCommandResult* other)
{
    std::swap(result_, other->result_);
    std::swap(command_id_, other->command_id_);
    std::swap(timestamp_, other->timestamp_);
    payload_.Swap(&other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoteCommandResult::GetTypeName() const
{
    return "enterprise_management.RemoteCommandResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoteCommandResult

// optional .enterprise_management.RemoteCommandResult.ResultType result = 1;
bool RemoteCommandResult::has_result() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoteCommandResult::set_has_result()
{
    _has_bits_[0] |= 0x00000001u;
}
void RemoteCommandResult::clear_has_result()
{
    _has_bits_[0] &= ~0x00000001u;
}
void RemoteCommandResult::clear_result()
{
    result_ = 0;
    clear_has_result();
}
::enterprise_management::RemoteCommandResult_ResultType RemoteCommandResult::result() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.result)
    return static_cast<::enterprise_management::RemoteCommandResult_ResultType>(result_);
}
void RemoteCommandResult::set_result(::enterprise_management::RemoteCommandResult_ResultType value)
{
    assert(::enterprise_management::RemoteCommandResult_ResultType_IsValid(value));
    set_has_result();
    result_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.result)
}

// optional int64 command_id = 2;
bool RemoteCommandResult::has_command_id() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoteCommandResult::set_has_command_id()
{
    _has_bits_[0] |= 0x00000002u;
}
void RemoteCommandResult::clear_has_command_id()
{
    _has_bits_[0] &= ~0x00000002u;
}
void RemoteCommandResult::clear_command_id()
{
    command_id_ = GOOGLE_LONGLONG(0);
    clear_has_command_id();
}
::google::protobuf::int64 RemoteCommandResult::command_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.command_id)
    return command_id_;
}
void RemoteCommandResult::set_command_id(::google::protobuf::int64 value)
{
    set_has_command_id();
    command_id_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.command_id)
}

// optional int64 timestamp = 3;
bool RemoteCommandResult::has_timestamp() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void RemoteCommandResult::set_has_timestamp()
{
    _has_bits_[0] |= 0x00000004u;
}
void RemoteCommandResult::clear_has_timestamp()
{
    _has_bits_[0] &= ~0x00000004u;
}
void RemoteCommandResult::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
    clear_has_timestamp();
}
::google::protobuf::int64 RemoteCommandResult::timestamp() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.timestamp)
    return timestamp_;
}
void RemoteCommandResult::set_timestamp(::google::protobuf::int64 value)
{
    set_has_timestamp();
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.timestamp)
}

// optional string payload = 4;
bool RemoteCommandResult::has_payload() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void RemoteCommandResult::set_has_payload()
{
    _has_bits_[0] |= 0x00000008u;
}
void RemoteCommandResult::clear_has_payload()
{
    _has_bits_[0] &= ~0x00000008u;
}
void RemoteCommandResult::clear_payload()
{
    payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
}
const ::std::string& RemoteCommandResult::payload() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.RemoteCommandResult.payload)
    return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteCommandResult::set_payload(const ::std::string& value)
{
    set_has_payload();
    payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.RemoteCommandResult.payload)
}
void RemoteCommandResult::set_payload(const char* value)
{
    set_has_payload();
    payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.RemoteCommandResult.payload)
}
void RemoteCommandResult::set_payload(const char* value, size_t size)
{
    set_has_payload();
    payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.RemoteCommandResult.payload)
}
::std::string* RemoteCommandResult::mutable_payload()
{
    set_has_payload();
    // @@protoc_insertion_point(field_mutable:enterprise_management.RemoteCommandResult.payload)
    return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoteCommandResult::release_payload()
{
    // @@protoc_insertion_point(field_release:enterprise_management.RemoteCommandResult.payload)
    clear_has_payload();
    return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoteCommandResult::set_allocated_payload(::std::string* payload)
{
    if (payload != NULL) {
        set_has_payload();
    } else {
        clear_has_payload();
    }
    payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.RemoteCommandResult.payload)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceRemoteCommandRequest(
    DeviceRemoteCommandRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRemoteCommandRequest::kLastCommandUniqueIdFieldNumber;
const int DeviceRemoteCommandRequest::kCommandResultsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRemoteCommandRequest::DeviceRemoteCommandRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceRemoteCommandRequest)
}

void DeviceRemoteCommandRequest::InitAsDefaultInstance()
{
}

DeviceRemoteCommandRequest::DeviceRemoteCommandRequest(const DeviceRemoteCommandRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRemoteCommandRequest)
}

void DeviceRemoteCommandRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    last_command_unique_id_ = GOOGLE_LONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRemoteCommandRequest::~DeviceRemoteCommandRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceRemoteCommandRequest)
    SharedDtor();
}

void DeviceRemoteCommandRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceRemoteCommandRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRemoteCommandRequest& DeviceRemoteCommandRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceRemoteCommandRequest* DeviceRemoteCommandRequest::default_instance_ = NULL;

DeviceRemoteCommandRequest* DeviceRemoteCommandRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceRemoteCommandRequest* n = new DeviceRemoteCommandRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceRemoteCommandRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRemoteCommandRequest)
    last_command_unique_id_ = GOOGLE_LONGLONG(0);
    command_results_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceRemoteCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceRemoteCommandRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRemoteCommandRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int64 last_command_unique_id = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                    input, &last_command_unique_id_)));
                set_has_last_command_unique_id();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_command_results;
            break;
        }

        // repeated .enterprise_management.RemoteCommandResult command_results = 2;
        case 2: {
            if (tag == 18) {
            parse_command_results:
                DO_(input->IncrementRecursionDepth());
            parse_loop_command_results:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_command_results()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_loop_command_results;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRemoteCommandRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRemoteCommandRequest)
    return false;
#undef DO_
}

void DeviceRemoteCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRemoteCommandRequest)
    // optional int64 last_command_unique_id = 1;
    if (has_last_command_unique_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_command_unique_id(), output);
    }

    // repeated .enterprise_management.RemoteCommandResult command_results = 2;
    for (unsigned int i = 0, n = this->command_results_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, this->command_results(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRemoteCommandRequest)
}

int DeviceRemoteCommandRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRemoteCommandRequest)
    int total_size = 0;

    // optional int64 last_command_unique_id = 1;
    if (has_last_command_unique_id()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->last_command_unique_id());
    }

    // repeated .enterprise_management.RemoteCommandResult command_results = 2;
    total_size += 1 * this->command_results_size();
    for (int i = 0; i < this->command_results_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->command_results(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceRemoteCommandRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceRemoteCommandRequest*>(&from));
}

void DeviceRemoteCommandRequest::MergeFrom(const DeviceRemoteCommandRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRemoteCommandRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    command_results_.MergeFrom(from.command_results_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_last_command_unique_id()) {
            set_last_command_unique_id(from.last_command_unique_id());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceRemoteCommandRequest::CopyFrom(const DeviceRemoteCommandRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRemoteCommandRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceRemoteCommandRequest::IsInitialized() const
{

    return true;
}

void DeviceRemoteCommandRequest::Swap(DeviceRemoteCommandRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceRemoteCommandRequest::InternalSwap(DeviceRemoteCommandRequest* other)
{
    std::swap(last_command_unique_id_, other->last_command_unique_id_);
    command_results_.UnsafeArenaSwap(&other->command_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRemoteCommandRequest::GetTypeName() const
{
    return "enterprise_management.DeviceRemoteCommandRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRemoteCommandRequest

// optional int64 last_command_unique_id = 1;
bool DeviceRemoteCommandRequest::has_last_command_unique_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceRemoteCommandRequest::set_has_last_command_unique_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceRemoteCommandRequest::clear_has_last_command_unique_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceRemoteCommandRequest::clear_last_command_unique_id()
{
    last_command_unique_id_ = GOOGLE_LONGLONG(0);
    clear_has_last_command_unique_id();
}
::google::protobuf::int64 DeviceRemoteCommandRequest::last_command_unique_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandRequest.last_command_unique_id)
    return last_command_unique_id_;
}
void DeviceRemoteCommandRequest::set_last_command_unique_id(::google::protobuf::int64 value)
{
    set_has_last_command_unique_id();
    last_command_unique_id_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceRemoteCommandRequest.last_command_unique_id)
}

// repeated .enterprise_management.RemoteCommandResult command_results = 2;
int DeviceRemoteCommandRequest::command_results_size() const
{
    return command_results_.size();
}
void DeviceRemoteCommandRequest::clear_command_results()
{
    command_results_.Clear();
}
const ::enterprise_management::RemoteCommandResult& DeviceRemoteCommandRequest::command_results(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandRequest.command_results)
    return command_results_.Get(index);
}
::enterprise_management::RemoteCommandResult* DeviceRemoteCommandRequest::mutable_command_results(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRemoteCommandRequest.command_results)
    return command_results_.Mutable(index);
}
::enterprise_management::RemoteCommandResult* DeviceRemoteCommandRequest::add_command_results()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceRemoteCommandRequest.command_results)
    return command_results_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::RemoteCommandResult>*
DeviceRemoteCommandRequest::mutable_command_results()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRemoteCommandRequest.command_results)
    return &command_results_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::RemoteCommandResult>&
DeviceRemoteCommandRequest::command_results() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceRemoteCommandRequest.command_results)
    return command_results_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceRemoteCommandResponse(
    DeviceRemoteCommandResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceRemoteCommandResponse::kCommandsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceRemoteCommandResponse::DeviceRemoteCommandResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceRemoteCommandResponse)
}

void DeviceRemoteCommandResponse::InitAsDefaultInstance()
{
}

DeviceRemoteCommandResponse::DeviceRemoteCommandResponse(const DeviceRemoteCommandResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceRemoteCommandResponse)
}

void DeviceRemoteCommandResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceRemoteCommandResponse::~DeviceRemoteCommandResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceRemoteCommandResponse)
    SharedDtor();
}

void DeviceRemoteCommandResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceRemoteCommandResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceRemoteCommandResponse& DeviceRemoteCommandResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceRemoteCommandResponse* DeviceRemoteCommandResponse::default_instance_ = NULL;

DeviceRemoteCommandResponse* DeviceRemoteCommandResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceRemoteCommandResponse* n = new DeviceRemoteCommandResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceRemoteCommandResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceRemoteCommandResponse)
    commands_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceRemoteCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceRemoteCommandResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceRemoteCommandResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // repeated .enterprise_management.RemoteCommand commands = 1;
        case 1: {
            if (tag == 10) {
                DO_(input->IncrementRecursionDepth());
            parse_loop_commands:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_commands()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(10))
                goto parse_loop_commands;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceRemoteCommandResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceRemoteCommandResponse)
    return false;
#undef DO_
}

void DeviceRemoteCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceRemoteCommandResponse)
    // repeated .enterprise_management.RemoteCommand commands = 1;
    for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, this->commands(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceRemoteCommandResponse)
}

int DeviceRemoteCommandResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceRemoteCommandResponse)
    int total_size = 0;

    // repeated .enterprise_management.RemoteCommand commands = 1;
    total_size += 1 * this->commands_size();
    for (int i = 0; i < this->commands_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->commands(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceRemoteCommandResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceRemoteCommandResponse*>(&from));
}

void DeviceRemoteCommandResponse::MergeFrom(const DeviceRemoteCommandResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceRemoteCommandResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    commands_.MergeFrom(from.commands_);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceRemoteCommandResponse::CopyFrom(const DeviceRemoteCommandResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceRemoteCommandResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceRemoteCommandResponse::IsInitialized() const
{

    return true;
}

void DeviceRemoteCommandResponse::Swap(DeviceRemoteCommandResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceRemoteCommandResponse::InternalSwap(DeviceRemoteCommandResponse* other)
{
    commands_.UnsafeArenaSwap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceRemoteCommandResponse::GetTypeName() const
{
    return "enterprise_management.DeviceRemoteCommandResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRemoteCommandResponse

// repeated .enterprise_management.RemoteCommand commands = 1;
int DeviceRemoteCommandResponse::commands_size() const
{
    return commands_.size();
}
void DeviceRemoteCommandResponse::clear_commands()
{
    commands_.Clear();
}
const ::enterprise_management::RemoteCommand& DeviceRemoteCommandResponse::commands(int index) const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceRemoteCommandResponse.commands)
    return commands_.Get(index);
}
::enterprise_management::RemoteCommand* DeviceRemoteCommandResponse::mutable_commands(int index)
{
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceRemoteCommandResponse.commands)
    return commands_.Mutable(index);
}
::enterprise_management::RemoteCommand* DeviceRemoteCommandResponse::add_commands()
{
    // @@protoc_insertion_point(field_add:enterprise_management.DeviceRemoteCommandResponse.commands)
    return commands_.Add();
}
::google::protobuf::RepeatedPtrField<::enterprise_management::RemoteCommand>*
DeviceRemoteCommandResponse::mutable_commands()
{
    // @@protoc_insertion_point(field_mutable_list:enterprise_management.DeviceRemoteCommandResponse.commands)
    return &commands_;
}
const ::google::protobuf::RepeatedPtrField<::enterprise_management::RemoteCommand>&
DeviceRemoteCommandResponse::commands() const
{
    // @@protoc_insertion_point(field_list:enterprise_management.DeviceRemoteCommandResponse.commands)
    return commands_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAttributeUpdatePermissionRequest(
    DeviceAttributeUpdatePermissionRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdatePermissionRequest::DeviceAttributeUpdatePermissionRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

void DeviceAttributeUpdatePermissionRequest::InitAsDefaultInstance()
{
}

DeviceAttributeUpdatePermissionRequest::DeviceAttributeUpdatePermissionRequest(const DeviceAttributeUpdatePermissionRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

void DeviceAttributeUpdatePermissionRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAttributeUpdatePermissionRequest::~DeviceAttributeUpdatePermissionRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    SharedDtor();
}

void DeviceAttributeUpdatePermissionRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceAttributeUpdatePermissionRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdatePermissionRequest& DeviceAttributeUpdatePermissionRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceAttributeUpdatePermissionRequest* DeviceAttributeUpdatePermissionRequest::default_instance_ = NULL;

DeviceAttributeUpdatePermissionRequest* DeviceAttributeUpdatePermissionRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceAttributeUpdatePermissionRequest* n = new DeviceAttributeUpdatePermissionRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceAttributeUpdatePermissionRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAttributeUpdatePermissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceAttributeUpdatePermissionRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    return false;
#undef DO_
}

void DeviceAttributeUpdatePermissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdatePermissionRequest)
}

int DeviceAttributeUpdatePermissionRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceAttributeUpdatePermissionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdatePermissionRequest*>(&from));
}

void DeviceAttributeUpdatePermissionRequest::MergeFrom(const DeviceAttributeUpdatePermissionRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceAttributeUpdatePermissionRequest::CopyFrom(const DeviceAttributeUpdatePermissionRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdatePermissionRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceAttributeUpdatePermissionRequest::IsInitialized() const
{

    return true;
}

void DeviceAttributeUpdatePermissionRequest::Swap(DeviceAttributeUpdatePermissionRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceAttributeUpdatePermissionRequest::InternalSwap(DeviceAttributeUpdatePermissionRequest* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdatePermissionRequest::GetTypeName() const
{
    return "enterprise_management.DeviceAttributeUpdatePermissionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdatePermissionRequest

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAttributeUpdatePermissionResponse(
    DeviceAttributeUpdatePermissionResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ATTRIBUTE_UPDATE_DISALLOWED;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ATTRIBUTE_UPDATE_ALLOWED;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ResultType_MIN;
const DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::ResultType_MAX;
const int DeviceAttributeUpdatePermissionResponse::ResultType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributeUpdatePermissionResponse::kResultFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdatePermissionResponse::DeviceAttributeUpdatePermissionResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

void DeviceAttributeUpdatePermissionResponse::InitAsDefaultInstance()
{
}

DeviceAttributeUpdatePermissionResponse::DeviceAttributeUpdatePermissionResponse(const DeviceAttributeUpdatePermissionResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

void DeviceAttributeUpdatePermissionResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    result_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAttributeUpdatePermissionResponse::~DeviceAttributeUpdatePermissionResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    SharedDtor();
}

void DeviceAttributeUpdatePermissionResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceAttributeUpdatePermissionResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdatePermissionResponse& DeviceAttributeUpdatePermissionResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceAttributeUpdatePermissionResponse* DeviceAttributeUpdatePermissionResponse::default_instance_ = NULL;

DeviceAttributeUpdatePermissionResponse* DeviceAttributeUpdatePermissionResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceAttributeUpdatePermissionResponse* n = new DeviceAttributeUpdatePermissionResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceAttributeUpdatePermissionResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    result_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAttributeUpdatePermissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceAttributeUpdatePermissionResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value)) {
                    set_result(static_cast<::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    return false;
#undef DO_
}

void DeviceAttributeUpdatePermissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
    if (has_result()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->result(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdatePermissionResponse)
}

int DeviceAttributeUpdatePermissionResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    int total_size = 0;

    // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
    if (has_result()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceAttributeUpdatePermissionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdatePermissionResponse*>(&from));
}

void DeviceAttributeUpdatePermissionResponse::MergeFrom(const DeviceAttributeUpdatePermissionResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_result()) {
            set_result(from.result());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceAttributeUpdatePermissionResponse::CopyFrom(const DeviceAttributeUpdatePermissionResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdatePermissionResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceAttributeUpdatePermissionResponse::IsInitialized() const
{

    return true;
}

void DeviceAttributeUpdatePermissionResponse::Swap(DeviceAttributeUpdatePermissionResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceAttributeUpdatePermissionResponse::InternalSwap(DeviceAttributeUpdatePermissionResponse* other)
{
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdatePermissionResponse::GetTypeName() const
{
    return "enterprise_management.DeviceAttributeUpdatePermissionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdatePermissionResponse

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse.ResultType result = 1;
bool DeviceAttributeUpdatePermissionResponse::has_result() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAttributeUpdatePermissionResponse::set_has_result()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceAttributeUpdatePermissionResponse::clear_has_result()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceAttributeUpdatePermissionResponse::clear_result()
{
    result_ = 0;
    clear_has_result();
}
::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType DeviceAttributeUpdatePermissionResponse::result() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdatePermissionResponse.result)
    return static_cast<::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType>(result_);
}
void DeviceAttributeUpdatePermissionResponse::set_result(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType value)
{
    assert(::enterprise_management::DeviceAttributeUpdatePermissionResponse_ResultType_IsValid(value));
    set_has_result();
    result_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdatePermissionResponse.result)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAttributeUpdateRequest(
    DeviceAttributeUpdateRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributeUpdateRequest::kAssetIdFieldNumber;
const int DeviceAttributeUpdateRequest::kLocationFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdateRequest::DeviceAttributeUpdateRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdateRequest)
}

void DeviceAttributeUpdateRequest::InitAsDefaultInstance()
{
}

DeviceAttributeUpdateRequest::DeviceAttributeUpdateRequest(const DeviceAttributeUpdateRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdateRequest)
}

void DeviceAttributeUpdateRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    asset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAttributeUpdateRequest::~DeviceAttributeUpdateRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdateRequest)
    SharedDtor();
}

void DeviceAttributeUpdateRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    asset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceAttributeUpdateRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdateRequest& DeviceAttributeUpdateRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceAttributeUpdateRequest* DeviceAttributeUpdateRequest::default_instance_ = NULL;

DeviceAttributeUpdateRequest* DeviceAttributeUpdateRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceAttributeUpdateRequest* n = new DeviceAttributeUpdateRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceAttributeUpdateRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdateRequest)
    if (_has_bits_[0 / 32] & 3u) {
        if (has_asset_id()) {
            asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_location()) {
            location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAttributeUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceAttributeUpdateRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdateRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string asset_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_asset_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_location;
            break;
        }

        // optional string location = 2;
        case 2: {
            if (tag == 18) {
            parse_location:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_location()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdateRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdateRequest)
    return false;
#undef DO_
}

void DeviceAttributeUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdateRequest)
    // optional string asset_id = 1;
    if (has_asset_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->asset_id(), output);
    }

    // optional string location = 2;
    if (has_location()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->location(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdateRequest)
}

int DeviceAttributeUpdateRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdateRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional string asset_id = 1;
        if (has_asset_id()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->asset_id());
        }

        // optional string location = 2;
        if (has_location()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->location());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceAttributeUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdateRequest*>(&from));
}

void DeviceAttributeUpdateRequest::MergeFrom(const DeviceAttributeUpdateRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdateRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_asset_id()) {
            set_has_asset_id();
            asset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_id_);
        }
        if (from.has_location()) {
            set_has_location();
            location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceAttributeUpdateRequest::CopyFrom(const DeviceAttributeUpdateRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdateRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceAttributeUpdateRequest::IsInitialized() const
{

    return true;
}

void DeviceAttributeUpdateRequest::Swap(DeviceAttributeUpdateRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceAttributeUpdateRequest::InternalSwap(DeviceAttributeUpdateRequest* other)
{
    asset_id_.Swap(&other->asset_id_);
    location_.Swap(&other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdateRequest::GetTypeName() const
{
    return "enterprise_management.DeviceAttributeUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdateRequest

// optional string asset_id = 1;
bool DeviceAttributeUpdateRequest::has_asset_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAttributeUpdateRequest::set_has_asset_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceAttributeUpdateRequest::clear_has_asset_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceAttributeUpdateRequest::clear_asset_id()
{
    asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_asset_id();
}
const ::std::string& DeviceAttributeUpdateRequest::asset_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
    return asset_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributeUpdateRequest::set_asset_id(const ::std::string& value)
{
    set_has_asset_id();
    asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
void DeviceAttributeUpdateRequest::set_asset_id(const char* value)
{
    set_has_asset_id();
    asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
void DeviceAttributeUpdateRequest::set_asset_id(const char* value, size_t size)
{
    set_has_asset_id();
    asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}
::std::string* DeviceAttributeUpdateRequest::mutable_asset_id()
{
    set_has_asset_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
    return asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceAttributeUpdateRequest::release_asset_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
    clear_has_asset_id();
    return asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributeUpdateRequest::set_allocated_asset_id(::std::string* asset_id)
{
    if (asset_id != NULL) {
        set_has_asset_id();
    } else {
        clear_has_asset_id();
    }
    asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAttributeUpdateRequest.asset_id)
}

// optional string location = 2;
bool DeviceAttributeUpdateRequest::has_location() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceAttributeUpdateRequest::set_has_location()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceAttributeUpdateRequest::clear_has_location()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceAttributeUpdateRequest::clear_location()
{
    location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_location();
}
const ::std::string& DeviceAttributeUpdateRequest::location() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateRequest.location)
    return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributeUpdateRequest::set_location(const ::std::string& value)
{
    set_has_location();
    location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateRequest.location)
}
void DeviceAttributeUpdateRequest::set_location(const char* value)
{
    set_has_location();
    location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceAttributeUpdateRequest.location)
}
void DeviceAttributeUpdateRequest::set_location(const char* value, size_t size)
{
    set_has_location();
    location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceAttributeUpdateRequest.location)
}
::std::string* DeviceAttributeUpdateRequest::mutable_location()
{
    set_has_location();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceAttributeUpdateRequest.location)
    return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceAttributeUpdateRequest::release_location()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceAttributeUpdateRequest.location)
    clear_has_location();
    return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceAttributeUpdateRequest::set_allocated_location(::std::string* location)
{
    if (location != NULL) {
        set_has_location();
    } else {
        clear_has_location();
    }
    location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceAttributeUpdateRequest.location)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceAttributeUpdateResponse(
    DeviceAttributeUpdateResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceAttributeUpdateResponse_ResultType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ATTRIBUTE_UPDATE_ERROR;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ATTRIBUTE_UPDATE_SUCCESS;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ResultType_MIN;
const DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::ResultType_MAX;
const int DeviceAttributeUpdateResponse::ResultType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAttributeUpdateResponse::kResultFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAttributeUpdateResponse::DeviceAttributeUpdateResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceAttributeUpdateResponse)
}

void DeviceAttributeUpdateResponse::InitAsDefaultInstance()
{
}

DeviceAttributeUpdateResponse::DeviceAttributeUpdateResponse(const DeviceAttributeUpdateResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceAttributeUpdateResponse)
}

void DeviceAttributeUpdateResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    result_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAttributeUpdateResponse::~DeviceAttributeUpdateResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceAttributeUpdateResponse)
    SharedDtor();
}

void DeviceAttributeUpdateResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void DeviceAttributeUpdateResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAttributeUpdateResponse& DeviceAttributeUpdateResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceAttributeUpdateResponse* DeviceAttributeUpdateResponse::default_instance_ = NULL;

DeviceAttributeUpdateResponse* DeviceAttributeUpdateResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceAttributeUpdateResponse* n = new DeviceAttributeUpdateResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceAttributeUpdateResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceAttributeUpdateResponse)
    result_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceAttributeUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceAttributeUpdateResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceAttributeUpdateResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(value)) {
                    set_result(static_cast<::enterprise_management::DeviceAttributeUpdateResponse_ResultType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceAttributeUpdateResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceAttributeUpdateResponse)
    return false;
#undef DO_
}

void DeviceAttributeUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceAttributeUpdateResponse)
    // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
    if (has_result()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->result(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceAttributeUpdateResponse)
}

int DeviceAttributeUpdateResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceAttributeUpdateResponse)
    int total_size = 0;

    // optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
    if (has_result()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceAttributeUpdateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceAttributeUpdateResponse*>(&from));
}

void DeviceAttributeUpdateResponse::MergeFrom(const DeviceAttributeUpdateResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceAttributeUpdateResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_result()) {
            set_result(from.result());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceAttributeUpdateResponse::CopyFrom(const DeviceAttributeUpdateResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceAttributeUpdateResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceAttributeUpdateResponse::IsInitialized() const
{

    return true;
}

void DeviceAttributeUpdateResponse::Swap(DeviceAttributeUpdateResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceAttributeUpdateResponse::InternalSwap(DeviceAttributeUpdateResponse* other)
{
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAttributeUpdateResponse::GetTypeName() const
{
    return "enterprise_management.DeviceAttributeUpdateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAttributeUpdateResponse

// optional .enterprise_management.DeviceAttributeUpdateResponse.ResultType result = 1;
bool DeviceAttributeUpdateResponse::has_result() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAttributeUpdateResponse::set_has_result()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceAttributeUpdateResponse::clear_has_result()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceAttributeUpdateResponse::clear_result()
{
    result_ = 0;
    clear_has_result();
}
::enterprise_management::DeviceAttributeUpdateResponse_ResultType DeviceAttributeUpdateResponse::result() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceAttributeUpdateResponse.result)
    return static_cast<::enterprise_management::DeviceAttributeUpdateResponse_ResultType>(result_);
}
void DeviceAttributeUpdateResponse::set_result(::enterprise_management::DeviceAttributeUpdateResponse_ResultType value)
{
    assert(::enterprise_management::DeviceAttributeUpdateResponse_ResultType_IsValid(value));
    set_has_result();
    result_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceAttributeUpdateResponse.result)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGcmIdUpdateRequest(
    GcmIdUpdateRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcmIdUpdateRequest::kGcmIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

GcmIdUpdateRequest::GcmIdUpdateRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.GcmIdUpdateRequest)
}

void GcmIdUpdateRequest::InitAsDefaultInstance()
{
}

GcmIdUpdateRequest::GcmIdUpdateRequest(const GcmIdUpdateRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.GcmIdUpdateRequest)
}

void GcmIdUpdateRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gcm_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GcmIdUpdateRequest::~GcmIdUpdateRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.GcmIdUpdateRequest)
    SharedDtor();
}

void GcmIdUpdateRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    gcm_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void GcmIdUpdateRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmIdUpdateRequest& GcmIdUpdateRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

GcmIdUpdateRequest* GcmIdUpdateRequest::default_instance_ = NULL;

GcmIdUpdateRequest* GcmIdUpdateRequest::New(::google::protobuf::Arena* arena) const
{
    GcmIdUpdateRequest* n = new GcmIdUpdateRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void GcmIdUpdateRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.GcmIdUpdateRequest)
    if (has_gcm_id()) {
        gcm_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GcmIdUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForGcmIdUpdateRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.GcmIdUpdateRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional string gcm_id = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_gcm_id()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.GcmIdUpdateRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.GcmIdUpdateRequest)
    return false;
#undef DO_
}

void GcmIdUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.GcmIdUpdateRequest)
    // optional string gcm_id = 1;
    if (has_gcm_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->gcm_id(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.GcmIdUpdateRequest)
}

int GcmIdUpdateRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.GcmIdUpdateRequest)
    int total_size = 0;

    // optional string gcm_id = 1;
    if (has_gcm_id()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->gcm_id());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void GcmIdUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const GcmIdUpdateRequest*>(&from));
}

void GcmIdUpdateRequest::MergeFrom(const GcmIdUpdateRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GcmIdUpdateRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_gcm_id()) {
            set_has_gcm_id();
            gcm_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gcm_id_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void GcmIdUpdateRequest::CopyFrom(const GcmIdUpdateRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GcmIdUpdateRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool GcmIdUpdateRequest::IsInitialized() const
{

    return true;
}

void GcmIdUpdateRequest::Swap(GcmIdUpdateRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void GcmIdUpdateRequest::InternalSwap(GcmIdUpdateRequest* other)
{
    gcm_id_.Swap(&other->gcm_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string GcmIdUpdateRequest::GetTypeName() const
{
    return "enterprise_management.GcmIdUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcmIdUpdateRequest

// optional string gcm_id = 1;
bool GcmIdUpdateRequest::has_gcm_id() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void GcmIdUpdateRequest::set_has_gcm_id()
{
    _has_bits_[0] |= 0x00000001u;
}
void GcmIdUpdateRequest::clear_has_gcm_id()
{
    _has_bits_[0] &= ~0x00000001u;
}
void GcmIdUpdateRequest::clear_gcm_id()
{
    gcm_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_gcm_id();
}
const ::std::string& GcmIdUpdateRequest::gcm_id() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.GcmIdUpdateRequest.gcm_id)
    return gcm_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GcmIdUpdateRequest::set_gcm_id(const ::std::string& value)
{
    set_has_gcm_id();
    gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
void GcmIdUpdateRequest::set_gcm_id(const char* value)
{
    set_has_gcm_id();
    gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
void GcmIdUpdateRequest::set_gcm_id(const char* value, size_t size)
{
    set_has_gcm_id();
    gcm_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.GcmIdUpdateRequest.gcm_id)
}
::std::string* GcmIdUpdateRequest::mutable_gcm_id()
{
    set_has_gcm_id();
    // @@protoc_insertion_point(field_mutable:enterprise_management.GcmIdUpdateRequest.gcm_id)
    return gcm_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GcmIdUpdateRequest::release_gcm_id()
{
    // @@protoc_insertion_point(field_release:enterprise_management.GcmIdUpdateRequest.gcm_id)
    clear_has_gcm_id();
    return gcm_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GcmIdUpdateRequest::set_allocated_gcm_id(::std::string* gcm_id)
{
    if (gcm_id != NULL) {
        set_has_gcm_id();
    } else {
        clear_has_gcm_id();
    }
    gcm_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcm_id);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.GcmIdUpdateRequest.gcm_id)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForGcmIdUpdateResponse(
    GcmIdUpdateResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

GcmIdUpdateResponse::GcmIdUpdateResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.GcmIdUpdateResponse)
}

void GcmIdUpdateResponse::InitAsDefaultInstance()
{
}

GcmIdUpdateResponse::GcmIdUpdateResponse(const GcmIdUpdateResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.GcmIdUpdateResponse)
}

void GcmIdUpdateResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GcmIdUpdateResponse::~GcmIdUpdateResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.GcmIdUpdateResponse)
    SharedDtor();
}

void GcmIdUpdateResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void GcmIdUpdateResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmIdUpdateResponse& GcmIdUpdateResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

GcmIdUpdateResponse* GcmIdUpdateResponse::default_instance_ = NULL;

GcmIdUpdateResponse* GcmIdUpdateResponse::New(::google::protobuf::Arena* arena) const
{
    GcmIdUpdateResponse* n = new GcmIdUpdateResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void GcmIdUpdateResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.GcmIdUpdateResponse)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GcmIdUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForGcmIdUpdateResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.GcmIdUpdateResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.GcmIdUpdateResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.GcmIdUpdateResponse)
    return false;
#undef DO_
}

void GcmIdUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.GcmIdUpdateResponse)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.GcmIdUpdateResponse)
}

int GcmIdUpdateResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.GcmIdUpdateResponse)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void GcmIdUpdateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const GcmIdUpdateResponse*>(&from));
}

void GcmIdUpdateResponse::MergeFrom(const GcmIdUpdateResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GcmIdUpdateResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void GcmIdUpdateResponse::CopyFrom(const GcmIdUpdateResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GcmIdUpdateResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool GcmIdUpdateResponse::IsInitialized() const
{

    return true;
}

void GcmIdUpdateResponse::Swap(GcmIdUpdateResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void GcmIdUpdateResponse::InternalSwap(GcmIdUpdateResponse* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string GcmIdUpdateResponse::GetTypeName() const
{
    return "enterprise_management.GcmIdUpdateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcmIdUpdateResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCheckAndroidManagementRequest(
    CheckAndroidManagementRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndroidManagementRequest::CheckAndroidManagementRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CheckAndroidManagementRequest)
}

void CheckAndroidManagementRequest::InitAsDefaultInstance()
{
}

CheckAndroidManagementRequest::CheckAndroidManagementRequest(const CheckAndroidManagementRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckAndroidManagementRequest)
}

void CheckAndroidManagementRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckAndroidManagementRequest::~CheckAndroidManagementRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CheckAndroidManagementRequest)
    SharedDtor();
}

void CheckAndroidManagementRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void CheckAndroidManagementRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckAndroidManagementRequest& CheckAndroidManagementRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CheckAndroidManagementRequest* CheckAndroidManagementRequest::default_instance_ = NULL;

CheckAndroidManagementRequest* CheckAndroidManagementRequest::New(::google::protobuf::Arena* arena) const
{
    CheckAndroidManagementRequest* n = new CheckAndroidManagementRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CheckAndroidManagementRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CheckAndroidManagementRequest)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckAndroidManagementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCheckAndroidManagementRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CheckAndroidManagementRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CheckAndroidManagementRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CheckAndroidManagementRequest)
    return false;
#undef DO_
}

void CheckAndroidManagementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CheckAndroidManagementRequest)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CheckAndroidManagementRequest)
}

int CheckAndroidManagementRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckAndroidManagementRequest)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CheckAndroidManagementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CheckAndroidManagementRequest*>(&from));
}

void CheckAndroidManagementRequest::MergeFrom(const CheckAndroidManagementRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckAndroidManagementRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CheckAndroidManagementRequest::CopyFrom(const CheckAndroidManagementRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckAndroidManagementRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CheckAndroidManagementRequest::IsInitialized() const
{

    return true;
}

void CheckAndroidManagementRequest::Swap(CheckAndroidManagementRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CheckAndroidManagementRequest::InternalSwap(CheckAndroidManagementRequest* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckAndroidManagementRequest::GetTypeName() const
{
    return "enterprise_management.CheckAndroidManagementRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndroidManagementRequest

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCheckAndroidManagementResponse(
    CheckAndroidManagementResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndroidManagementResponse::CheckAndroidManagementResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CheckAndroidManagementResponse)
}

void CheckAndroidManagementResponse::InitAsDefaultInstance()
{
}

CheckAndroidManagementResponse::CheckAndroidManagementResponse(const CheckAndroidManagementResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CheckAndroidManagementResponse)
}

void CheckAndroidManagementResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckAndroidManagementResponse::~CheckAndroidManagementResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CheckAndroidManagementResponse)
    SharedDtor();
}

void CheckAndroidManagementResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void CheckAndroidManagementResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckAndroidManagementResponse& CheckAndroidManagementResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CheckAndroidManagementResponse* CheckAndroidManagementResponse::default_instance_ = NULL;

CheckAndroidManagementResponse* CheckAndroidManagementResponse::New(::google::protobuf::Arena* arena) const
{
    CheckAndroidManagementResponse* n = new CheckAndroidManagementResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CheckAndroidManagementResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CheckAndroidManagementResponse)
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckAndroidManagementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCheckAndroidManagementResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CheckAndroidManagementResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
    handle_unusual:
        if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
            goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CheckAndroidManagementResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CheckAndroidManagementResponse)
    return false;
#undef DO_
}

void CheckAndroidManagementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CheckAndroidManagementResponse)
    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CheckAndroidManagementResponse)
}

int CheckAndroidManagementResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CheckAndroidManagementResponse)
    int total_size = 0;

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CheckAndroidManagementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CheckAndroidManagementResponse*>(&from));
}

void CheckAndroidManagementResponse::MergeFrom(const CheckAndroidManagementResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CheckAndroidManagementResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CheckAndroidManagementResponse::CopyFrom(const CheckAndroidManagementResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CheckAndroidManagementResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CheckAndroidManagementResponse::IsInitialized() const
{

    return true;
}

void CheckAndroidManagementResponse::Swap(CheckAndroidManagementResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CheckAndroidManagementResponse::InternalSwap(CheckAndroidManagementResponse* other)
{
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CheckAndroidManagementResponse::GetTypeName() const
{
    return "enterprise_management.CheckAndroidManagementResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndroidManagementResponse

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCertificateBasedDeviceRegisterRequest(
    CertificateBasedDeviceRegisterRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateBasedDeviceRegisterRequest::kSignedRequestFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateBasedDeviceRegisterRequest::CertificateBasedDeviceRegisterRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

void CertificateBasedDeviceRegisterRequest::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    signed_request_ = const_cast<::enterprise_management::SignedData*>(
        ::enterprise_management::SignedData::internal_default_instance());
#else
    signed_request_ = const_cast<::enterprise_management::SignedData*>(&::enterprise_management::SignedData::default_instance());
#endif
}

CertificateBasedDeviceRegisterRequest::CertificateBasedDeviceRegisterRequest(const CertificateBasedDeviceRegisterRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

void CertificateBasedDeviceRegisterRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signed_request_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertificateBasedDeviceRegisterRequest::~CertificateBasedDeviceRegisterRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CertificateBasedDeviceRegisterRequest)
    SharedDtor();
}

void CertificateBasedDeviceRegisterRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete signed_request_;
    }
}

void CertificateBasedDeviceRegisterRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertificateBasedDeviceRegisterRequest& CertificateBasedDeviceRegisterRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CertificateBasedDeviceRegisterRequest* CertificateBasedDeviceRegisterRequest::default_instance_ = NULL;

CertificateBasedDeviceRegisterRequest* CertificateBasedDeviceRegisterRequest::New(::google::protobuf::Arena* arena) const
{
    CertificateBasedDeviceRegisterRequest* n = new CertificateBasedDeviceRegisterRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CertificateBasedDeviceRegisterRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
    if (has_signed_request()) {
        if (signed_request_ != NULL)
            signed_request_->::enterprise_management::SignedData::Clear();
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CertificateBasedDeviceRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCertificateBasedDeviceRegisterRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.SignedData signed_request = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_signed_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CertificateBasedDeviceRegisterRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CertificateBasedDeviceRegisterRequest)
    return false;
#undef DO_
}

void CertificateBasedDeviceRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
    // optional .enterprise_management.SignedData signed_request = 1;
    if (has_signed_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->signed_request_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CertificateBasedDeviceRegisterRequest)
}

int CertificateBasedDeviceRegisterRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
    int total_size = 0;

    // optional .enterprise_management.SignedData signed_request = 1;
    if (has_signed_request()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->signed_request_);
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CertificateBasedDeviceRegisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CertificateBasedDeviceRegisterRequest*>(&from));
}

void CertificateBasedDeviceRegisterRequest::MergeFrom(const CertificateBasedDeviceRegisterRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_signed_request()) {
            mutable_signed_request()->::enterprise_management::SignedData::MergeFrom(from.signed_request());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CertificateBasedDeviceRegisterRequest::CopyFrom(const CertificateBasedDeviceRegisterRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CertificateBasedDeviceRegisterRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CertificateBasedDeviceRegisterRequest::IsInitialized() const
{

    return true;
}

void CertificateBasedDeviceRegisterRequest::Swap(CertificateBasedDeviceRegisterRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CertificateBasedDeviceRegisterRequest::InternalSwap(CertificateBasedDeviceRegisterRequest* other)
{
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertificateBasedDeviceRegisterRequest::GetTypeName() const
{
    return "enterprise_management.CertificateBasedDeviceRegisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateBasedDeviceRegisterRequest

// optional .enterprise_management.SignedData signed_request = 1;
bool CertificateBasedDeviceRegisterRequest::has_signed_request() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertificateBasedDeviceRegisterRequest::set_has_signed_request()
{
    _has_bits_[0] |= 0x00000001u;
}
void CertificateBasedDeviceRegisterRequest::clear_has_signed_request()
{
    _has_bits_[0] &= ~0x00000001u;
}
void CertificateBasedDeviceRegisterRequest::clear_signed_request()
{
    if (signed_request_ != NULL)
        signed_request_->::enterprise_management::SignedData::Clear();
    clear_has_signed_request();
}
const ::enterprise_management::SignedData& CertificateBasedDeviceRegisterRequest::signed_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return signed_request_ != NULL ? *signed_request_ : *default_instance().signed_request_;
#else
    return signed_request_ != NULL ? *signed_request_ : *default_instance_->signed_request_;
#endif
}
::enterprise_management::SignedData* CertificateBasedDeviceRegisterRequest::mutable_signed_request()
{
    set_has_signed_request();
    if (signed_request_ == NULL) {
        signed_request_ = new ::enterprise_management::SignedData;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
    return signed_request_;
}
::enterprise_management::SignedData* CertificateBasedDeviceRegisterRequest::release_signed_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
    clear_has_signed_request();
    ::enterprise_management::SignedData* temp = signed_request_;
    signed_request_ = NULL;
    return temp;
}
void CertificateBasedDeviceRegisterRequest::set_allocated_signed_request(::enterprise_management::SignedData* signed_request)
{
    delete signed_request_;
    signed_request_ = signed_request;
    if (signed_request) {
        set_has_signed_request();
    } else {
        clear_has_signed_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegisterRequest.signed_request)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCertificateBasedDeviceRegistrationData(
    CertificateBasedDeviceRegistrationData* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool CertificateBasedDeviceRegistrationData_CertificateType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::UNKNOWN;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::ENTERPRISE_ENROLLMENT_CERTIFICATE;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::CertificateType_MIN;
const CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::CertificateType_MAX;
const int CertificateBasedDeviceRegistrationData::CertificateType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateBasedDeviceRegistrationData::kCertificateTypeFieldNumber;
const int CertificateBasedDeviceRegistrationData::kDeviceCertificateFieldNumber;
const int CertificateBasedDeviceRegistrationData::kDeviceRegisterRequestFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateBasedDeviceRegistrationData::CertificateBasedDeviceRegistrationData()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.CertificateBasedDeviceRegistrationData)
}

void CertificateBasedDeviceRegistrationData::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_register_request_ = const_cast<::enterprise_management::DeviceRegisterRequest*>(
        ::enterprise_management::DeviceRegisterRequest::internal_default_instance());
#else
    device_register_request_ = const_cast<::enterprise_management::DeviceRegisterRequest*>(&::enterprise_management::DeviceRegisterRequest::default_instance());
#endif
}

CertificateBasedDeviceRegistrationData::CertificateBasedDeviceRegistrationData(const CertificateBasedDeviceRegistrationData& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.CertificateBasedDeviceRegistrationData)
}

void CertificateBasedDeviceRegistrationData::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    certificate_type_ = 0;
    device_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_register_request_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertificateBasedDeviceRegistrationData::~CertificateBasedDeviceRegistrationData()
{
    // @@protoc_insertion_point(destructor:enterprise_management.CertificateBasedDeviceRegistrationData)
    SharedDtor();
}

void CertificateBasedDeviceRegistrationData::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    device_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete device_register_request_;
    }
}

void CertificateBasedDeviceRegistrationData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CertificateBasedDeviceRegistrationData& CertificateBasedDeviceRegistrationData::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

CertificateBasedDeviceRegistrationData* CertificateBasedDeviceRegistrationData::default_instance_ = NULL;

CertificateBasedDeviceRegistrationData* CertificateBasedDeviceRegistrationData::New(::google::protobuf::Arena* arena) const
{
    CertificateBasedDeviceRegistrationData* n = new CertificateBasedDeviceRegistrationData;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CertificateBasedDeviceRegistrationData::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.CertificateBasedDeviceRegistrationData)
    if (_has_bits_[0 / 32] & 7u) {
        certificate_type_ = 0;
        if (has_device_certificate()) {
            device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_device_register_request()) {
            if (device_register_request_ != NULL)
                device_register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CertificateBasedDeviceRegistrationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForCertificateBasedDeviceRegistrationData, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.CertificateBasedDeviceRegistrationData)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value)) {
                    set_certificate_type(static_cast<::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_device_certificate;
            break;
        }

        // optional bytes device_certificate = 2;
        case 2: {
            if (tag == 18) {
            parse_device_certificate:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_device_certificate()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_device_register_request;
            break;
        }

        // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
        case 3: {
            if (tag == 26) {
            parse_device_register_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_register_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.CertificateBasedDeviceRegistrationData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.CertificateBasedDeviceRegistrationData)
    return false;
#undef DO_
}

void CertificateBasedDeviceRegistrationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.CertificateBasedDeviceRegistrationData)
    // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
    if (has_certificate_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->certificate_type(), output);
    }

    // optional bytes device_certificate = 2;
    if (has_device_certificate()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            2, this->device_certificate(), output);
    }

    // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
    if (has_device_register_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->device_register_request_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.CertificateBasedDeviceRegistrationData)
}

int CertificateBasedDeviceRegistrationData::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.CertificateBasedDeviceRegistrationData)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 7u) {
        // optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
        if (has_certificate_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->certificate_type());
        }

        // optional bytes device_certificate = 2;
        if (has_device_certificate()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->device_certificate());
        }

        // optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
        if (has_device_register_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_register_request_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CertificateBasedDeviceRegistrationData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const CertificateBasedDeviceRegistrationData*>(&from));
}

void CertificateBasedDeviceRegistrationData::MergeFrom(const CertificateBasedDeviceRegistrationData& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CertificateBasedDeviceRegistrationData)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_certificate_type()) {
            set_certificate_type(from.certificate_type());
        }
        if (from.has_device_certificate()) {
            set_has_device_certificate();
            device_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_certificate_);
        }
        if (from.has_device_register_request()) {
            mutable_device_register_request()->::enterprise_management::DeviceRegisterRequest::MergeFrom(from.device_register_request());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void CertificateBasedDeviceRegistrationData::CopyFrom(const CertificateBasedDeviceRegistrationData& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CertificateBasedDeviceRegistrationData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool CertificateBasedDeviceRegistrationData::IsInitialized() const
{

    return true;
}

void CertificateBasedDeviceRegistrationData::Swap(CertificateBasedDeviceRegistrationData* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void CertificateBasedDeviceRegistrationData::InternalSwap(CertificateBasedDeviceRegistrationData* other)
{
    std::swap(certificate_type_, other->certificate_type_);
    device_certificate_.Swap(&other->device_certificate_);
    std::swap(device_register_request_, other->device_register_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string CertificateBasedDeviceRegistrationData::GetTypeName() const
{
    return "enterprise_management.CertificateBasedDeviceRegistrationData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateBasedDeviceRegistrationData

// optional .enterprise_management.CertificateBasedDeviceRegistrationData.CertificateType certificate_type = 1;
bool CertificateBasedDeviceRegistrationData::has_certificate_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void CertificateBasedDeviceRegistrationData::set_has_certificate_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void CertificateBasedDeviceRegistrationData::clear_has_certificate_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void CertificateBasedDeviceRegistrationData::clear_certificate_type()
{
    certificate_type_ = 0;
    clear_has_certificate_type();
}
::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType CertificateBasedDeviceRegistrationData::certificate_type() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.certificate_type)
    return static_cast<::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType>(certificate_type_);
}
void CertificateBasedDeviceRegistrationData::set_certificate_type(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType value)
{
    assert(::enterprise_management::CertificateBasedDeviceRegistrationData_CertificateType_IsValid(value));
    set_has_certificate_type();
    certificate_type_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.CertificateBasedDeviceRegistrationData.certificate_type)
}

// optional bytes device_certificate = 2;
bool CertificateBasedDeviceRegistrationData::has_device_certificate() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void CertificateBasedDeviceRegistrationData::set_has_device_certificate()
{
    _has_bits_[0] |= 0x00000002u;
}
void CertificateBasedDeviceRegistrationData::clear_has_device_certificate()
{
    _has_bits_[0] &= ~0x00000002u;
}
void CertificateBasedDeviceRegistrationData::clear_device_certificate()
{
    device_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_device_certificate();
}
const ::std::string& CertificateBasedDeviceRegistrationData::device_certificate() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
    return device_certificate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CertificateBasedDeviceRegistrationData::set_device_certificate(const ::std::string& value)
{
    set_has_device_certificate();
    device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
void CertificateBasedDeviceRegistrationData::set_device_certificate(const char* value)
{
    set_has_device_certificate();
    device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
void CertificateBasedDeviceRegistrationData::set_device_certificate(const void* value, size_t size)
{
    set_has_device_certificate();
    device_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}
::std::string* CertificateBasedDeviceRegistrationData::mutable_device_certificate()
{
    set_has_device_certificate();
    // @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
    return device_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CertificateBasedDeviceRegistrationData::release_device_certificate()
{
    // @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
    clear_has_device_certificate();
    return device_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CertificateBasedDeviceRegistrationData::set_allocated_device_certificate(::std::string* device_certificate)
{
    if (device_certificate != NULL) {
        set_has_device_certificate();
    } else {
        clear_has_device_certificate();
    }
    device_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_certificate);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegistrationData.device_certificate)
}

// optional .enterprise_management.DeviceRegisterRequest device_register_request = 3;
bool CertificateBasedDeviceRegistrationData::has_device_register_request() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void CertificateBasedDeviceRegistrationData::set_has_device_register_request()
{
    _has_bits_[0] |= 0x00000004u;
}
void CertificateBasedDeviceRegistrationData::clear_has_device_register_request()
{
    _has_bits_[0] &= ~0x00000004u;
}
void CertificateBasedDeviceRegistrationData::clear_device_register_request()
{
    if (device_register_request_ != NULL)
        device_register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
    clear_has_device_register_request();
}
const ::enterprise_management::DeviceRegisterRequest& CertificateBasedDeviceRegistrationData::device_register_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_register_request_ != NULL ? *device_register_request_ : *default_instance().device_register_request_;
#else
    return device_register_request_ != NULL ? *device_register_request_ : *default_instance_->device_register_request_;
#endif
}
::enterprise_management::DeviceRegisterRequest* CertificateBasedDeviceRegistrationData::mutable_device_register_request()
{
    set_has_device_register_request();
    if (device_register_request_ == NULL) {
        device_register_request_ = new ::enterprise_management::DeviceRegisterRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
    return device_register_request_;
}
::enterprise_management::DeviceRegisterRequest* CertificateBasedDeviceRegistrationData::release_device_register_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
    clear_has_device_register_request();
    ::enterprise_management::DeviceRegisterRequest* temp = device_register_request_;
    device_register_request_ = NULL;
    return temp;
}
void CertificateBasedDeviceRegistrationData::set_allocated_device_register_request(::enterprise_management::DeviceRegisterRequest* device_register_request)
{
    delete device_register_request_;
    device_register_request_ = device_register_request;
    if (device_register_request) {
        set_has_device_register_request();
    } else {
        clear_has_device_register_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.CertificateBasedDeviceRegistrationData.device_register_request)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceManagementRequest(
    DeviceManagementRequest* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceManagementRequest::kRegisterRequestFieldNumber;
const int DeviceManagementRequest::kUnregisterRequestFieldNumber;
const int DeviceManagementRequest::kPolicyRequestFieldNumber;
const int DeviceManagementRequest::kDeviceStatusReportRequestFieldNumber;
const int DeviceManagementRequest::kSessionStatusReportRequestFieldNumber;
const int DeviceManagementRequest::kAutoEnrollmentRequestFieldNumber;
const int DeviceManagementRequest::kCertUploadRequestFieldNumber;
const int DeviceManagementRequest::kServiceApiAccessRequestFieldNumber;
const int DeviceManagementRequest::kDeviceStateRetrievalRequestFieldNumber;
const int DeviceManagementRequest::kDeviceStateKeyUpdateRequestFieldNumber;
const int DeviceManagementRequest::kDevicePairingRequestFieldNumber;
const int DeviceManagementRequest::kCheckDevicePairingRequestFieldNumber;
const int DeviceManagementRequest::kRemoteCommandRequestFieldNumber;
const int DeviceManagementRequest::kDeviceAttributeUpdatePermissionRequestFieldNumber;
const int DeviceManagementRequest::kDeviceAttributeUpdateRequestFieldNumber;
const int DeviceManagementRequest::kGcmIdUpdateRequestFieldNumber;
const int DeviceManagementRequest::kCheckAndroidManagementRequestFieldNumber;
const int DeviceManagementRequest::kCertificateBasedRegisterRequestFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceManagementRequest::DeviceManagementRequest()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceManagementRequest)
}

void DeviceManagementRequest::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    register_request_ = const_cast<::enterprise_management::DeviceRegisterRequest*>(
        ::enterprise_management::DeviceRegisterRequest::internal_default_instance());
#else
    register_request_ = const_cast<::enterprise_management::DeviceRegisterRequest*>(&::enterprise_management::DeviceRegisterRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    unregister_request_ = const_cast<::enterprise_management::DeviceUnregisterRequest*>(
        ::enterprise_management::DeviceUnregisterRequest::internal_default_instance());
#else
    unregister_request_ = const_cast<::enterprise_management::DeviceUnregisterRequest*>(&::enterprise_management::DeviceUnregisterRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    policy_request_ = const_cast<::enterprise_management::DevicePolicyRequest*>(
        ::enterprise_management::DevicePolicyRequest::internal_default_instance());
#else
    policy_request_ = const_cast<::enterprise_management::DevicePolicyRequest*>(&::enterprise_management::DevicePolicyRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_status_report_request_ = const_cast<::enterprise_management::DeviceStatusReportRequest*>(
        ::enterprise_management::DeviceStatusReportRequest::internal_default_instance());
#else
    device_status_report_request_ = const_cast<::enterprise_management::DeviceStatusReportRequest*>(&::enterprise_management::DeviceStatusReportRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    session_status_report_request_ = const_cast<::enterprise_management::SessionStatusReportRequest*>(
        ::enterprise_management::SessionStatusReportRequest::internal_default_instance());
#else
    session_status_report_request_ = const_cast<::enterprise_management::SessionStatusReportRequest*>(&::enterprise_management::SessionStatusReportRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    auto_enrollment_request_ = const_cast<::enterprise_management::DeviceAutoEnrollmentRequest*>(
        ::enterprise_management::DeviceAutoEnrollmentRequest::internal_default_instance());
#else
    auto_enrollment_request_ = const_cast<::enterprise_management::DeviceAutoEnrollmentRequest*>(&::enterprise_management::DeviceAutoEnrollmentRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    cert_upload_request_ = const_cast<::enterprise_management::DeviceCertUploadRequest*>(
        ::enterprise_management::DeviceCertUploadRequest::internal_default_instance());
#else
    cert_upload_request_ = const_cast<::enterprise_management::DeviceCertUploadRequest*>(&::enterprise_management::DeviceCertUploadRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    service_api_access_request_ = const_cast<::enterprise_management::DeviceServiceApiAccessRequest*>(
        ::enterprise_management::DeviceServiceApiAccessRequest::internal_default_instance());
#else
    service_api_access_request_ = const_cast<::enterprise_management::DeviceServiceApiAccessRequest*>(&::enterprise_management::DeviceServiceApiAccessRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_state_retrieval_request_ = const_cast<::enterprise_management::DeviceStateRetrievalRequest*>(
        ::enterprise_management::DeviceStateRetrievalRequest::internal_default_instance());
#else
    device_state_retrieval_request_ = const_cast<::enterprise_management::DeviceStateRetrievalRequest*>(&::enterprise_management::DeviceStateRetrievalRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_state_key_update_request_ = const_cast<::enterprise_management::DeviceStateKeyUpdateRequest*>(
        ::enterprise_management::DeviceStateKeyUpdateRequest::internal_default_instance());
#else
    device_state_key_update_request_ = const_cast<::enterprise_management::DeviceStateKeyUpdateRequest*>(&::enterprise_management::DeviceStateKeyUpdateRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_pairing_request_ = const_cast<::enterprise_management::DevicePairingRequest*>(
        ::enterprise_management::DevicePairingRequest::internal_default_instance());
#else
    device_pairing_request_ = const_cast<::enterprise_management::DevicePairingRequest*>(&::enterprise_management::DevicePairingRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    check_device_pairing_request_ = const_cast<::enterprise_management::CheckDevicePairingRequest*>(
        ::enterprise_management::CheckDevicePairingRequest::internal_default_instance());
#else
    check_device_pairing_request_ = const_cast<::enterprise_management::CheckDevicePairingRequest*>(&::enterprise_management::CheckDevicePairingRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    remote_command_request_ = const_cast<::enterprise_management::DeviceRemoteCommandRequest*>(
        ::enterprise_management::DeviceRemoteCommandRequest::internal_default_instance());
#else
    remote_command_request_ = const_cast<::enterprise_management::DeviceRemoteCommandRequest*>(&::enterprise_management::DeviceRemoteCommandRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_attribute_update_permission_request_ = const_cast<::enterprise_management::DeviceAttributeUpdatePermissionRequest*>(
        ::enterprise_management::DeviceAttributeUpdatePermissionRequest::internal_default_instance());
#else
    device_attribute_update_permission_request_ = const_cast<::enterprise_management::DeviceAttributeUpdatePermissionRequest*>(&::enterprise_management::DeviceAttributeUpdatePermissionRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_attribute_update_request_ = const_cast<::enterprise_management::DeviceAttributeUpdateRequest*>(
        ::enterprise_management::DeviceAttributeUpdateRequest::internal_default_instance());
#else
    device_attribute_update_request_ = const_cast<::enterprise_management::DeviceAttributeUpdateRequest*>(&::enterprise_management::DeviceAttributeUpdateRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    gcm_id_update_request_ = const_cast<::enterprise_management::GcmIdUpdateRequest*>(
        ::enterprise_management::GcmIdUpdateRequest::internal_default_instance());
#else
    gcm_id_update_request_ = const_cast<::enterprise_management::GcmIdUpdateRequest*>(&::enterprise_management::GcmIdUpdateRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    check_android_management_request_ = const_cast<::enterprise_management::CheckAndroidManagementRequest*>(
        ::enterprise_management::CheckAndroidManagementRequest::internal_default_instance());
#else
    check_android_management_request_ = const_cast<::enterprise_management::CheckAndroidManagementRequest*>(&::enterprise_management::CheckAndroidManagementRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    certificate_based_register_request_ = const_cast<::enterprise_management::CertificateBasedDeviceRegisterRequest*>(
        ::enterprise_management::CertificateBasedDeviceRegisterRequest::internal_default_instance());
#else
    certificate_based_register_request_ = const_cast<::enterprise_management::CertificateBasedDeviceRegisterRequest*>(&::enterprise_management::CertificateBasedDeviceRegisterRequest::default_instance());
#endif
}

DeviceManagementRequest::DeviceManagementRequest(const DeviceManagementRequest& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceManagementRequest)
}

void DeviceManagementRequest::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    register_request_ = NULL;
    unregister_request_ = NULL;
    policy_request_ = NULL;
    device_status_report_request_ = NULL;
    session_status_report_request_ = NULL;
    auto_enrollment_request_ = NULL;
    cert_upload_request_ = NULL;
    service_api_access_request_ = NULL;
    device_state_retrieval_request_ = NULL;
    device_state_key_update_request_ = NULL;
    device_pairing_request_ = NULL;
    check_device_pairing_request_ = NULL;
    remote_command_request_ = NULL;
    device_attribute_update_permission_request_ = NULL;
    device_attribute_update_request_ = NULL;
    gcm_id_update_request_ = NULL;
    check_android_management_request_ = NULL;
    certificate_based_register_request_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceManagementRequest::~DeviceManagementRequest()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceManagementRequest)
    SharedDtor();
}

void DeviceManagementRequest::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete register_request_;
        delete unregister_request_;
        delete policy_request_;
        delete device_status_report_request_;
        delete session_status_report_request_;
        delete auto_enrollment_request_;
        delete cert_upload_request_;
        delete service_api_access_request_;
        delete device_state_retrieval_request_;
        delete device_state_key_update_request_;
        delete device_pairing_request_;
        delete check_device_pairing_request_;
        delete remote_command_request_;
        delete device_attribute_update_permission_request_;
        delete device_attribute_update_request_;
        delete gcm_id_update_request_;
        delete check_android_management_request_;
        delete certificate_based_register_request_;
    }
}

void DeviceManagementRequest::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceManagementRequest& DeviceManagementRequest::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceManagementRequest* DeviceManagementRequest::default_instance_ = NULL;

DeviceManagementRequest* DeviceManagementRequest::New(::google::protobuf::Arena* arena) const
{
    DeviceManagementRequest* n = new DeviceManagementRequest;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceManagementRequest::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceManagementRequest)
    if (_has_bits_[0 / 32] & 255u) {
        if (has_register_request()) {
            if (register_request_ != NULL)
                register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
        }
        if (has_unregister_request()) {
            if (unregister_request_ != NULL)
                unregister_request_->::enterprise_management::DeviceUnregisterRequest::Clear();
        }
        if (has_policy_request()) {
            if (policy_request_ != NULL)
                policy_request_->::enterprise_management::DevicePolicyRequest::Clear();
        }
        if (has_device_status_report_request()) {
            if (device_status_report_request_ != NULL)
                device_status_report_request_->::enterprise_management::DeviceStatusReportRequest::Clear();
        }
        if (has_session_status_report_request()) {
            if (session_status_report_request_ != NULL)
                session_status_report_request_->::enterprise_management::SessionStatusReportRequest::Clear();
        }
        if (has_auto_enrollment_request()) {
            if (auto_enrollment_request_ != NULL)
                auto_enrollment_request_->::enterprise_management::DeviceAutoEnrollmentRequest::Clear();
        }
        if (has_cert_upload_request()) {
            if (cert_upload_request_ != NULL)
                cert_upload_request_->::enterprise_management::DeviceCertUploadRequest::Clear();
        }
        if (has_service_api_access_request()) {
            if (service_api_access_request_ != NULL)
                service_api_access_request_->::enterprise_management::DeviceServiceApiAccessRequest::Clear();
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        if (has_device_state_retrieval_request()) {
            if (device_state_retrieval_request_ != NULL)
                device_state_retrieval_request_->::enterprise_management::DeviceStateRetrievalRequest::Clear();
        }
        if (has_device_state_key_update_request()) {
            if (device_state_key_update_request_ != NULL)
                device_state_key_update_request_->::enterprise_management::DeviceStateKeyUpdateRequest::Clear();
        }
        if (has_device_pairing_request()) {
            if (device_pairing_request_ != NULL)
                device_pairing_request_->::enterprise_management::DevicePairingRequest::Clear();
        }
        if (has_check_device_pairing_request()) {
            if (check_device_pairing_request_ != NULL)
                check_device_pairing_request_->::enterprise_management::CheckDevicePairingRequest::Clear();
        }
        if (has_remote_command_request()) {
            if (remote_command_request_ != NULL)
                remote_command_request_->::enterprise_management::DeviceRemoteCommandRequest::Clear();
        }
        if (has_device_attribute_update_permission_request()) {
            if (device_attribute_update_permission_request_ != NULL)
                device_attribute_update_permission_request_->::enterprise_management::DeviceAttributeUpdatePermissionRequest::Clear();
        }
        if (has_device_attribute_update_request()) {
            if (device_attribute_update_request_ != NULL)
                device_attribute_update_request_->::enterprise_management::DeviceAttributeUpdateRequest::Clear();
        }
        if (has_gcm_id_update_request()) {
            if (gcm_id_update_request_ != NULL)
                gcm_id_update_request_->::enterprise_management::GcmIdUpdateRequest::Clear();
        }
    }
    if (_has_bits_[16 / 32] & 196608u) {
        if (has_check_android_management_request()) {
            if (check_android_management_request_ != NULL)
                check_android_management_request_->::enterprise_management::CheckAndroidManagementRequest::Clear();
        }
        if (has_certificate_based_register_request()) {
            if (certificate_based_register_request_ != NULL)
                certificate_based_register_request_->::enterprise_management::CertificateBasedDeviceRegisterRequest::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceManagementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceManagementRequest, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceManagementRequest)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_register_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_unregister_request;
            break;
        }

        // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
        case 2: {
            if (tag == 18) {
            parse_unregister_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_unregister_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_policy_request;
            break;
        }

        // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
        case 3: {
            if (tag == 26) {
            parse_policy_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_policy_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_device_status_report_request;
            break;
        }

        // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
        case 4: {
            if (tag == 34) {
            parse_device_status_report_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_status_report_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_session_status_report_request;
            break;
        }

        // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
        case 5: {
            if (tag == 42) {
            parse_session_status_report_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_session_status_report_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_auto_enrollment_request;
            break;
        }

        // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
        case 6: {
            if (tag == 50) {
            parse_auto_enrollment_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_auto_enrollment_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_cert_upload_request;
            break;
        }

        // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
        case 7: {
            if (tag == 58) {
            parse_cert_upload_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_cert_upload_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_service_api_access_request;
            break;
        }

        // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
        case 8: {
            if (tag == 66) {
            parse_service_api_access_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_service_api_access_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_device_state_retrieval_request;
            break;
        }

        // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
        case 9: {
            if (tag == 74) {
            parse_device_state_retrieval_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_state_retrieval_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_device_state_key_update_request;
            break;
        }

        // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
        case 10: {
            if (tag == 82) {
            parse_device_state_key_update_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_state_key_update_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_device_pairing_request;
            break;
        }

        // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
        case 11: {
            if (tag == 90) {
            parse_device_pairing_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_pairing_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_check_device_pairing_request;
            break;
        }

        // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
        case 12: {
            if (tag == 98) {
            parse_check_device_pairing_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_check_device_pairing_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_remote_command_request;
            break;
        }

        // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
        case 13: {
            if (tag == 106) {
            parse_remote_command_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_remote_command_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(114))
                goto parse_device_attribute_update_permission_request;
            break;
        }

        // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
        case 14: {
            if (tag == 114) {
            parse_device_attribute_update_permission_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_attribute_update_permission_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_device_attribute_update_request;
            break;
        }

        // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
        case 15: {
            if (tag == 122) {
            parse_device_attribute_update_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_attribute_update_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(130))
                goto parse_gcm_id_update_request;
            break;
        }

        // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
        case 16: {
            if (tag == 130) {
            parse_gcm_id_update_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_gcm_id_update_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(138))
                goto parse_check_android_management_request;
            break;
        }

        // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
        case 17: {
            if (tag == 138) {
            parse_check_android_management_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_check_android_management_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(146))
                goto parse_certificate_based_register_request;
            break;
        }

        // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
        case 18: {
            if (tag == 146) {
            parse_certificate_based_register_request:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_certificate_based_register_request()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceManagementRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceManagementRequest)
    return false;
#undef DO_
}

void DeviceManagementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceManagementRequest)
    // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
    if (has_register_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            1, *this->register_request_, output);
    }

    // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
    if (has_unregister_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *this->unregister_request_, output);
    }

    // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
    if (has_policy_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->policy_request_, output);
    }

    // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
    if (has_device_status_report_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->device_status_report_request_, output);
    }

    // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
    if (has_session_status_report_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->session_status_report_request_, output);
    }

    // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
    if (has_auto_enrollment_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *this->auto_enrollment_request_, output);
    }

    // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
    if (has_cert_upload_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, *this->cert_upload_request_, output);
    }

    // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
    if (has_service_api_access_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->service_api_access_request_, output);
    }

    // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
    if (has_device_state_retrieval_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, *this->device_state_retrieval_request_, output);
    }

    // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
    if (has_device_state_key_update_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            10, *this->device_state_key_update_request_, output);
    }

    // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
    if (has_device_pairing_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *this->device_pairing_request_, output);
    }

    // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
    if (has_check_device_pairing_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *this->check_device_pairing_request_, output);
    }

    // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
    if (has_remote_command_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *this->remote_command_request_, output);
    }

    // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
    if (has_device_attribute_update_permission_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            14, *this->device_attribute_update_permission_request_, output);
    }

    // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
    if (has_device_attribute_update_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            15, *this->device_attribute_update_request_, output);
    }

    // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
    if (has_gcm_id_update_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            16, *this->gcm_id_update_request_, output);
    }

    // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
    if (has_check_android_management_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            17, *this->check_android_management_request_, output);
    }

    // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
    if (has_certificate_based_register_request()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            18, *this->certificate_based_register_request_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceManagementRequest)
}

int DeviceManagementRequest::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceManagementRequest)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional .enterprise_management.DeviceRegisterRequest register_request = 1;
        if (has_register_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->register_request_);
        }

        // optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
        if (has_unregister_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->unregister_request_);
        }

        // optional .enterprise_management.DevicePolicyRequest policy_request = 3;
        if (has_policy_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->policy_request_);
        }

        // optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
        if (has_device_status_report_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_status_report_request_);
        }

        // optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
        if (has_session_status_report_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->session_status_report_request_);
        }

        // optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
        if (has_auto_enrollment_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->auto_enrollment_request_);
        }

        // optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
        if (has_cert_upload_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->cert_upload_request_);
        }

        // optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
        if (has_service_api_access_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->service_api_access_request_);
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        // optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
        if (has_device_state_retrieval_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_state_retrieval_request_);
        }

        // optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
        if (has_device_state_key_update_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_state_key_update_request_);
        }

        // optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
        if (has_device_pairing_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_pairing_request_);
        }

        // optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
        if (has_check_device_pairing_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->check_device_pairing_request_);
        }

        // optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
        if (has_remote_command_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->remote_command_request_);
        }

        // optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
        if (has_device_attribute_update_permission_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_attribute_update_permission_request_);
        }

        // optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
        if (has_device_attribute_update_request()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_attribute_update_request_);
        }

        // optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
        if (has_gcm_id_update_request()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->gcm_id_update_request_);
        }
    }
    if (_has_bits_[16 / 32] & 196608u) {
        // optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
        if (has_check_android_management_request()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->check_android_management_request_);
        }

        // optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
        if (has_certificate_based_register_request()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->certificate_based_register_request_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceManagementRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceManagementRequest*>(&from));
}

void DeviceManagementRequest::MergeFrom(const DeviceManagementRequest& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceManagementRequest)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_register_request()) {
            mutable_register_request()->::enterprise_management::DeviceRegisterRequest::MergeFrom(from.register_request());
        }
        if (from.has_unregister_request()) {
            mutable_unregister_request()->::enterprise_management::DeviceUnregisterRequest::MergeFrom(from.unregister_request());
        }
        if (from.has_policy_request()) {
            mutable_policy_request()->::enterprise_management::DevicePolicyRequest::MergeFrom(from.policy_request());
        }
        if (from.has_device_status_report_request()) {
            mutable_device_status_report_request()->::enterprise_management::DeviceStatusReportRequest::MergeFrom(from.device_status_report_request());
        }
        if (from.has_session_status_report_request()) {
            mutable_session_status_report_request()->::enterprise_management::SessionStatusReportRequest::MergeFrom(from.session_status_report_request());
        }
        if (from.has_auto_enrollment_request()) {
            mutable_auto_enrollment_request()->::enterprise_management::DeviceAutoEnrollmentRequest::MergeFrom(from.auto_enrollment_request());
        }
        if (from.has_cert_upload_request()) {
            mutable_cert_upload_request()->::enterprise_management::DeviceCertUploadRequest::MergeFrom(from.cert_upload_request());
        }
        if (from.has_service_api_access_request()) {
            mutable_service_api_access_request()->::enterprise_management::DeviceServiceApiAccessRequest::MergeFrom(from.service_api_access_request());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_device_state_retrieval_request()) {
            mutable_device_state_retrieval_request()->::enterprise_management::DeviceStateRetrievalRequest::MergeFrom(from.device_state_retrieval_request());
        }
        if (from.has_device_state_key_update_request()) {
            mutable_device_state_key_update_request()->::enterprise_management::DeviceStateKeyUpdateRequest::MergeFrom(from.device_state_key_update_request());
        }
        if (from.has_device_pairing_request()) {
            mutable_device_pairing_request()->::enterprise_management::DevicePairingRequest::MergeFrom(from.device_pairing_request());
        }
        if (from.has_check_device_pairing_request()) {
            mutable_check_device_pairing_request()->::enterprise_management::CheckDevicePairingRequest::MergeFrom(from.check_device_pairing_request());
        }
        if (from.has_remote_command_request()) {
            mutable_remote_command_request()->::enterprise_management::DeviceRemoteCommandRequest::MergeFrom(from.remote_command_request());
        }
        if (from.has_device_attribute_update_permission_request()) {
            mutable_device_attribute_update_permission_request()->::enterprise_management::DeviceAttributeUpdatePermissionRequest::MergeFrom(from.device_attribute_update_permission_request());
        }
        if (from.has_device_attribute_update_request()) {
            mutable_device_attribute_update_request()->::enterprise_management::DeviceAttributeUpdateRequest::MergeFrom(from.device_attribute_update_request());
        }
        if (from.has_gcm_id_update_request()) {
            mutable_gcm_id_update_request()->::enterprise_management::GcmIdUpdateRequest::MergeFrom(from.gcm_id_update_request());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_check_android_management_request()) {
            mutable_check_android_management_request()->::enterprise_management::CheckAndroidManagementRequest::MergeFrom(from.check_android_management_request());
        }
        if (from.has_certificate_based_register_request()) {
            mutable_certificate_based_register_request()->::enterprise_management::CertificateBasedDeviceRegisterRequest::MergeFrom(from.certificate_based_register_request());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceManagementRequest::CopyFrom(const DeviceManagementRequest& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceManagementRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceManagementRequest::IsInitialized() const
{

    if (has_device_status_report_request()) {
        if (!this->device_status_report_request_->IsInitialized())
            return false;
    }
    return true;
}

void DeviceManagementRequest::Swap(DeviceManagementRequest* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceManagementRequest::InternalSwap(DeviceManagementRequest* other)
{
    std::swap(register_request_, other->register_request_);
    std::swap(unregister_request_, other->unregister_request_);
    std::swap(policy_request_, other->policy_request_);
    std::swap(device_status_report_request_, other->device_status_report_request_);
    std::swap(session_status_report_request_, other->session_status_report_request_);
    std::swap(auto_enrollment_request_, other->auto_enrollment_request_);
    std::swap(cert_upload_request_, other->cert_upload_request_);
    std::swap(service_api_access_request_, other->service_api_access_request_);
    std::swap(device_state_retrieval_request_, other->device_state_retrieval_request_);
    std::swap(device_state_key_update_request_, other->device_state_key_update_request_);
    std::swap(device_pairing_request_, other->device_pairing_request_);
    std::swap(check_device_pairing_request_, other->check_device_pairing_request_);
    std::swap(remote_command_request_, other->remote_command_request_);
    std::swap(device_attribute_update_permission_request_, other->device_attribute_update_permission_request_);
    std::swap(device_attribute_update_request_, other->device_attribute_update_request_);
    std::swap(gcm_id_update_request_, other->gcm_id_update_request_);
    std::swap(check_android_management_request_, other->check_android_management_request_);
    std::swap(certificate_based_register_request_, other->certificate_based_register_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceManagementRequest::GetTypeName() const
{
    return "enterprise_management.DeviceManagementRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceManagementRequest

// optional .enterprise_management.DeviceRegisterRequest register_request = 1;
bool DeviceManagementRequest::has_register_request() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceManagementRequest::set_has_register_request()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceManagementRequest::clear_has_register_request()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceManagementRequest::clear_register_request()
{
    if (register_request_ != NULL)
        register_request_->::enterprise_management::DeviceRegisterRequest::Clear();
    clear_has_register_request();
}
const ::enterprise_management::DeviceRegisterRequest& DeviceManagementRequest::register_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.register_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return register_request_ != NULL ? *register_request_ : *default_instance().register_request_;
#else
    return register_request_ != NULL ? *register_request_ : *default_instance_->register_request_;
#endif
}
::enterprise_management::DeviceRegisterRequest* DeviceManagementRequest::mutable_register_request()
{
    set_has_register_request();
    if (register_request_ == NULL) {
        register_request_ = new ::enterprise_management::DeviceRegisterRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.register_request)
    return register_request_;
}
::enterprise_management::DeviceRegisterRequest* DeviceManagementRequest::release_register_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.register_request)
    clear_has_register_request();
    ::enterprise_management::DeviceRegisterRequest* temp = register_request_;
    register_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_register_request(::enterprise_management::DeviceRegisterRequest* register_request)
{
    delete register_request_;
    register_request_ = register_request;
    if (register_request) {
        set_has_register_request();
    } else {
        clear_has_register_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.register_request)
}

// optional .enterprise_management.DeviceUnregisterRequest unregister_request = 2;
bool DeviceManagementRequest::has_unregister_request() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceManagementRequest::set_has_unregister_request()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceManagementRequest::clear_has_unregister_request()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceManagementRequest::clear_unregister_request()
{
    if (unregister_request_ != NULL)
        unregister_request_->::enterprise_management::DeviceUnregisterRequest::Clear();
    clear_has_unregister_request();
}
const ::enterprise_management::DeviceUnregisterRequest& DeviceManagementRequest::unregister_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.unregister_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return unregister_request_ != NULL ? *unregister_request_ : *default_instance().unregister_request_;
#else
    return unregister_request_ != NULL ? *unregister_request_ : *default_instance_->unregister_request_;
#endif
}
::enterprise_management::DeviceUnregisterRequest* DeviceManagementRequest::mutable_unregister_request()
{
    set_has_unregister_request();
    if (unregister_request_ == NULL) {
        unregister_request_ = new ::enterprise_management::DeviceUnregisterRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.unregister_request)
    return unregister_request_;
}
::enterprise_management::DeviceUnregisterRequest* DeviceManagementRequest::release_unregister_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.unregister_request)
    clear_has_unregister_request();
    ::enterprise_management::DeviceUnregisterRequest* temp = unregister_request_;
    unregister_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_unregister_request(::enterprise_management::DeviceUnregisterRequest* unregister_request)
{
    delete unregister_request_;
    unregister_request_ = unregister_request;
    if (unregister_request) {
        set_has_unregister_request();
    } else {
        clear_has_unregister_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.unregister_request)
}

// optional .enterprise_management.DevicePolicyRequest policy_request = 3;
bool DeviceManagementRequest::has_policy_request() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceManagementRequest::set_has_policy_request()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceManagementRequest::clear_has_policy_request()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceManagementRequest::clear_policy_request()
{
    if (policy_request_ != NULL)
        policy_request_->::enterprise_management::DevicePolicyRequest::Clear();
    clear_has_policy_request();
}
const ::enterprise_management::DevicePolicyRequest& DeviceManagementRequest::policy_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.policy_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return policy_request_ != NULL ? *policy_request_ : *default_instance().policy_request_;
#else
    return policy_request_ != NULL ? *policy_request_ : *default_instance_->policy_request_;
#endif
}
::enterprise_management::DevicePolicyRequest* DeviceManagementRequest::mutable_policy_request()
{
    set_has_policy_request();
    if (policy_request_ == NULL) {
        policy_request_ = new ::enterprise_management::DevicePolicyRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.policy_request)
    return policy_request_;
}
::enterprise_management::DevicePolicyRequest* DeviceManagementRequest::release_policy_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.policy_request)
    clear_has_policy_request();
    ::enterprise_management::DevicePolicyRequest* temp = policy_request_;
    policy_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_policy_request(::enterprise_management::DevicePolicyRequest* policy_request)
{
    delete policy_request_;
    policy_request_ = policy_request;
    if (policy_request) {
        set_has_policy_request();
    } else {
        clear_has_policy_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.policy_request)
}

// optional .enterprise_management.DeviceStatusReportRequest device_status_report_request = 4;
bool DeviceManagementRequest::has_device_status_report_request() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceManagementRequest::set_has_device_status_report_request()
{
    _has_bits_[0] |= 0x00000008u;
}
void DeviceManagementRequest::clear_has_device_status_report_request()
{
    _has_bits_[0] &= ~0x00000008u;
}
void DeviceManagementRequest::clear_device_status_report_request()
{
    if (device_status_report_request_ != NULL)
        device_status_report_request_->::enterprise_management::DeviceStatusReportRequest::Clear();
    clear_has_device_status_report_request();
}
const ::enterprise_management::DeviceStatusReportRequest& DeviceManagementRequest::device_status_report_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_status_report_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_status_report_request_ != NULL ? *device_status_report_request_ : *default_instance().device_status_report_request_;
#else
    return device_status_report_request_ != NULL ? *device_status_report_request_ : *default_instance_->device_status_report_request_;
#endif
}
::enterprise_management::DeviceStatusReportRequest* DeviceManagementRequest::mutable_device_status_report_request()
{
    set_has_device_status_report_request();
    if (device_status_report_request_ == NULL) {
        device_status_report_request_ = new ::enterprise_management::DeviceStatusReportRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_status_report_request)
    return device_status_report_request_;
}
::enterprise_management::DeviceStatusReportRequest* DeviceManagementRequest::release_device_status_report_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_status_report_request)
    clear_has_device_status_report_request();
    ::enterprise_management::DeviceStatusReportRequest* temp = device_status_report_request_;
    device_status_report_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_device_status_report_request(::enterprise_management::DeviceStatusReportRequest* device_status_report_request)
{
    delete device_status_report_request_;
    device_status_report_request_ = device_status_report_request;
    if (device_status_report_request) {
        set_has_device_status_report_request();
    } else {
        clear_has_device_status_report_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_status_report_request)
}

// optional .enterprise_management.SessionStatusReportRequest session_status_report_request = 5;
bool DeviceManagementRequest::has_session_status_report_request() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceManagementRequest::set_has_session_status_report_request()
{
    _has_bits_[0] |= 0x00000010u;
}
void DeviceManagementRequest::clear_has_session_status_report_request()
{
    _has_bits_[0] &= ~0x00000010u;
}
void DeviceManagementRequest::clear_session_status_report_request()
{
    if (session_status_report_request_ != NULL)
        session_status_report_request_->::enterprise_management::SessionStatusReportRequest::Clear();
    clear_has_session_status_report_request();
}
const ::enterprise_management::SessionStatusReportRequest& DeviceManagementRequest::session_status_report_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.session_status_report_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return session_status_report_request_ != NULL ? *session_status_report_request_ : *default_instance().session_status_report_request_;
#else
    return session_status_report_request_ != NULL ? *session_status_report_request_ : *default_instance_->session_status_report_request_;
#endif
}
::enterprise_management::SessionStatusReportRequest* DeviceManagementRequest::mutable_session_status_report_request()
{
    set_has_session_status_report_request();
    if (session_status_report_request_ == NULL) {
        session_status_report_request_ = new ::enterprise_management::SessionStatusReportRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.session_status_report_request)
    return session_status_report_request_;
}
::enterprise_management::SessionStatusReportRequest* DeviceManagementRequest::release_session_status_report_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.session_status_report_request)
    clear_has_session_status_report_request();
    ::enterprise_management::SessionStatusReportRequest* temp = session_status_report_request_;
    session_status_report_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_session_status_report_request(::enterprise_management::SessionStatusReportRequest* session_status_report_request)
{
    delete session_status_report_request_;
    session_status_report_request_ = session_status_report_request;
    if (session_status_report_request) {
        set_has_session_status_report_request();
    } else {
        clear_has_session_status_report_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.session_status_report_request)
}

// optional .enterprise_management.DeviceAutoEnrollmentRequest auto_enrollment_request = 6;
bool DeviceManagementRequest::has_auto_enrollment_request() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceManagementRequest::set_has_auto_enrollment_request()
{
    _has_bits_[0] |= 0x00000020u;
}
void DeviceManagementRequest::clear_has_auto_enrollment_request()
{
    _has_bits_[0] &= ~0x00000020u;
}
void DeviceManagementRequest::clear_auto_enrollment_request()
{
    if (auto_enrollment_request_ != NULL)
        auto_enrollment_request_->::enterprise_management::DeviceAutoEnrollmentRequest::Clear();
    clear_has_auto_enrollment_request();
}
const ::enterprise_management::DeviceAutoEnrollmentRequest& DeviceManagementRequest::auto_enrollment_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return auto_enrollment_request_ != NULL ? *auto_enrollment_request_ : *default_instance().auto_enrollment_request_;
#else
    return auto_enrollment_request_ != NULL ? *auto_enrollment_request_ : *default_instance_->auto_enrollment_request_;
#endif
}
::enterprise_management::DeviceAutoEnrollmentRequest* DeviceManagementRequest::mutable_auto_enrollment_request()
{
    set_has_auto_enrollment_request();
    if (auto_enrollment_request_ == NULL) {
        auto_enrollment_request_ = new ::enterprise_management::DeviceAutoEnrollmentRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
    return auto_enrollment_request_;
}
::enterprise_management::DeviceAutoEnrollmentRequest* DeviceManagementRequest::release_auto_enrollment_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
    clear_has_auto_enrollment_request();
    ::enterprise_management::DeviceAutoEnrollmentRequest* temp = auto_enrollment_request_;
    auto_enrollment_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_auto_enrollment_request(::enterprise_management::DeviceAutoEnrollmentRequest* auto_enrollment_request)
{
    delete auto_enrollment_request_;
    auto_enrollment_request_ = auto_enrollment_request;
    if (auto_enrollment_request) {
        set_has_auto_enrollment_request();
    } else {
        clear_has_auto_enrollment_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.auto_enrollment_request)
}

// optional .enterprise_management.DeviceCertUploadRequest cert_upload_request = 7;
bool DeviceManagementRequest::has_cert_upload_request() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceManagementRequest::set_has_cert_upload_request()
{
    _has_bits_[0] |= 0x00000040u;
}
void DeviceManagementRequest::clear_has_cert_upload_request()
{
    _has_bits_[0] &= ~0x00000040u;
}
void DeviceManagementRequest::clear_cert_upload_request()
{
    if (cert_upload_request_ != NULL)
        cert_upload_request_->::enterprise_management::DeviceCertUploadRequest::Clear();
    clear_has_cert_upload_request();
}
const ::enterprise_management::DeviceCertUploadRequest& DeviceManagementRequest::cert_upload_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.cert_upload_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return cert_upload_request_ != NULL ? *cert_upload_request_ : *default_instance().cert_upload_request_;
#else
    return cert_upload_request_ != NULL ? *cert_upload_request_ : *default_instance_->cert_upload_request_;
#endif
}
::enterprise_management::DeviceCertUploadRequest* DeviceManagementRequest::mutable_cert_upload_request()
{
    set_has_cert_upload_request();
    if (cert_upload_request_ == NULL) {
        cert_upload_request_ = new ::enterprise_management::DeviceCertUploadRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.cert_upload_request)
    return cert_upload_request_;
}
::enterprise_management::DeviceCertUploadRequest* DeviceManagementRequest::release_cert_upload_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.cert_upload_request)
    clear_has_cert_upload_request();
    ::enterprise_management::DeviceCertUploadRequest* temp = cert_upload_request_;
    cert_upload_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_cert_upload_request(::enterprise_management::DeviceCertUploadRequest* cert_upload_request)
{
    delete cert_upload_request_;
    cert_upload_request_ = cert_upload_request;
    if (cert_upload_request) {
        set_has_cert_upload_request();
    } else {
        clear_has_cert_upload_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.cert_upload_request)
}

// optional .enterprise_management.DeviceServiceApiAccessRequest service_api_access_request = 8;
bool DeviceManagementRequest::has_service_api_access_request() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceManagementRequest::set_has_service_api_access_request()
{
    _has_bits_[0] |= 0x00000080u;
}
void DeviceManagementRequest::clear_has_service_api_access_request()
{
    _has_bits_[0] &= ~0x00000080u;
}
void DeviceManagementRequest::clear_service_api_access_request()
{
    if (service_api_access_request_ != NULL)
        service_api_access_request_->::enterprise_management::DeviceServiceApiAccessRequest::Clear();
    clear_has_service_api_access_request();
}
const ::enterprise_management::DeviceServiceApiAccessRequest& DeviceManagementRequest::service_api_access_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.service_api_access_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return service_api_access_request_ != NULL ? *service_api_access_request_ : *default_instance().service_api_access_request_;
#else
    return service_api_access_request_ != NULL ? *service_api_access_request_ : *default_instance_->service_api_access_request_;
#endif
}
::enterprise_management::DeviceServiceApiAccessRequest* DeviceManagementRequest::mutable_service_api_access_request()
{
    set_has_service_api_access_request();
    if (service_api_access_request_ == NULL) {
        service_api_access_request_ = new ::enterprise_management::DeviceServiceApiAccessRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.service_api_access_request)
    return service_api_access_request_;
}
::enterprise_management::DeviceServiceApiAccessRequest* DeviceManagementRequest::release_service_api_access_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.service_api_access_request)
    clear_has_service_api_access_request();
    ::enterprise_management::DeviceServiceApiAccessRequest* temp = service_api_access_request_;
    service_api_access_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_service_api_access_request(::enterprise_management::DeviceServiceApiAccessRequest* service_api_access_request)
{
    delete service_api_access_request_;
    service_api_access_request_ = service_api_access_request;
    if (service_api_access_request) {
        set_has_service_api_access_request();
    } else {
        clear_has_service_api_access_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.service_api_access_request)
}

// optional .enterprise_management.DeviceStateRetrievalRequest device_state_retrieval_request = 9;
bool DeviceManagementRequest::has_device_state_retrieval_request() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceManagementRequest::set_has_device_state_retrieval_request()
{
    _has_bits_[0] |= 0x00000100u;
}
void DeviceManagementRequest::clear_has_device_state_retrieval_request()
{
    _has_bits_[0] &= ~0x00000100u;
}
void DeviceManagementRequest::clear_device_state_retrieval_request()
{
    if (device_state_retrieval_request_ != NULL)
        device_state_retrieval_request_->::enterprise_management::DeviceStateRetrievalRequest::Clear();
    clear_has_device_state_retrieval_request();
}
const ::enterprise_management::DeviceStateRetrievalRequest& DeviceManagementRequest::device_state_retrieval_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_state_retrieval_request_ != NULL ? *device_state_retrieval_request_ : *default_instance().device_state_retrieval_request_;
#else
    return device_state_retrieval_request_ != NULL ? *device_state_retrieval_request_ : *default_instance_->device_state_retrieval_request_;
#endif
}
::enterprise_management::DeviceStateRetrievalRequest* DeviceManagementRequest::mutable_device_state_retrieval_request()
{
    set_has_device_state_retrieval_request();
    if (device_state_retrieval_request_ == NULL) {
        device_state_retrieval_request_ = new ::enterprise_management::DeviceStateRetrievalRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
    return device_state_retrieval_request_;
}
::enterprise_management::DeviceStateRetrievalRequest* DeviceManagementRequest::release_device_state_retrieval_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
    clear_has_device_state_retrieval_request();
    ::enterprise_management::DeviceStateRetrievalRequest* temp = device_state_retrieval_request_;
    device_state_retrieval_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_device_state_retrieval_request(::enterprise_management::DeviceStateRetrievalRequest* device_state_retrieval_request)
{
    delete device_state_retrieval_request_;
    device_state_retrieval_request_ = device_state_retrieval_request;
    if (device_state_retrieval_request) {
        set_has_device_state_retrieval_request();
    } else {
        clear_has_device_state_retrieval_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_state_retrieval_request)
}

// optional .enterprise_management.DeviceStateKeyUpdateRequest device_state_key_update_request = 10;
bool DeviceManagementRequest::has_device_state_key_update_request() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeviceManagementRequest::set_has_device_state_key_update_request()
{
    _has_bits_[0] |= 0x00000200u;
}
void DeviceManagementRequest::clear_has_device_state_key_update_request()
{
    _has_bits_[0] &= ~0x00000200u;
}
void DeviceManagementRequest::clear_device_state_key_update_request()
{
    if (device_state_key_update_request_ != NULL)
        device_state_key_update_request_->::enterprise_management::DeviceStateKeyUpdateRequest::Clear();
    clear_has_device_state_key_update_request();
}
const ::enterprise_management::DeviceStateKeyUpdateRequest& DeviceManagementRequest::device_state_key_update_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_state_key_update_request_ != NULL ? *device_state_key_update_request_ : *default_instance().device_state_key_update_request_;
#else
    return device_state_key_update_request_ != NULL ? *device_state_key_update_request_ : *default_instance_->device_state_key_update_request_;
#endif
}
::enterprise_management::DeviceStateKeyUpdateRequest* DeviceManagementRequest::mutable_device_state_key_update_request()
{
    set_has_device_state_key_update_request();
    if (device_state_key_update_request_ == NULL) {
        device_state_key_update_request_ = new ::enterprise_management::DeviceStateKeyUpdateRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
    return device_state_key_update_request_;
}
::enterprise_management::DeviceStateKeyUpdateRequest* DeviceManagementRequest::release_device_state_key_update_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
    clear_has_device_state_key_update_request();
    ::enterprise_management::DeviceStateKeyUpdateRequest* temp = device_state_key_update_request_;
    device_state_key_update_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_device_state_key_update_request(::enterprise_management::DeviceStateKeyUpdateRequest* device_state_key_update_request)
{
    delete device_state_key_update_request_;
    device_state_key_update_request_ = device_state_key_update_request;
    if (device_state_key_update_request) {
        set_has_device_state_key_update_request();
    } else {
        clear_has_device_state_key_update_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_state_key_update_request)
}

// optional .enterprise_management.DevicePairingRequest device_pairing_request = 11;
bool DeviceManagementRequest::has_device_pairing_request() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void DeviceManagementRequest::set_has_device_pairing_request()
{
    _has_bits_[0] |= 0x00000400u;
}
void DeviceManagementRequest::clear_has_device_pairing_request()
{
    _has_bits_[0] &= ~0x00000400u;
}
void DeviceManagementRequest::clear_device_pairing_request()
{
    if (device_pairing_request_ != NULL)
        device_pairing_request_->::enterprise_management::DevicePairingRequest::Clear();
    clear_has_device_pairing_request();
}
const ::enterprise_management::DevicePairingRequest& DeviceManagementRequest::device_pairing_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_pairing_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_pairing_request_ != NULL ? *device_pairing_request_ : *default_instance().device_pairing_request_;
#else
    return device_pairing_request_ != NULL ? *device_pairing_request_ : *default_instance_->device_pairing_request_;
#endif
}
::enterprise_management::DevicePairingRequest* DeviceManagementRequest::mutable_device_pairing_request()
{
    set_has_device_pairing_request();
    if (device_pairing_request_ == NULL) {
        device_pairing_request_ = new ::enterprise_management::DevicePairingRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_pairing_request)
    return device_pairing_request_;
}
::enterprise_management::DevicePairingRequest* DeviceManagementRequest::release_device_pairing_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_pairing_request)
    clear_has_device_pairing_request();
    ::enterprise_management::DevicePairingRequest* temp = device_pairing_request_;
    device_pairing_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_device_pairing_request(::enterprise_management::DevicePairingRequest* device_pairing_request)
{
    delete device_pairing_request_;
    device_pairing_request_ = device_pairing_request;
    if (device_pairing_request) {
        set_has_device_pairing_request();
    } else {
        clear_has_device_pairing_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_pairing_request)
}

// optional .enterprise_management.CheckDevicePairingRequest check_device_pairing_request = 12;
bool DeviceManagementRequest::has_check_device_pairing_request() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void DeviceManagementRequest::set_has_check_device_pairing_request()
{
    _has_bits_[0] |= 0x00000800u;
}
void DeviceManagementRequest::clear_has_check_device_pairing_request()
{
    _has_bits_[0] &= ~0x00000800u;
}
void DeviceManagementRequest::clear_check_device_pairing_request()
{
    if (check_device_pairing_request_ != NULL)
        check_device_pairing_request_->::enterprise_management::CheckDevicePairingRequest::Clear();
    clear_has_check_device_pairing_request();
}
const ::enterprise_management::CheckDevicePairingRequest& DeviceManagementRequest::check_device_pairing_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return check_device_pairing_request_ != NULL ? *check_device_pairing_request_ : *default_instance().check_device_pairing_request_;
#else
    return check_device_pairing_request_ != NULL ? *check_device_pairing_request_ : *default_instance_->check_device_pairing_request_;
#endif
}
::enterprise_management::CheckDevicePairingRequest* DeviceManagementRequest::mutable_check_device_pairing_request()
{
    set_has_check_device_pairing_request();
    if (check_device_pairing_request_ == NULL) {
        check_device_pairing_request_ = new ::enterprise_management::CheckDevicePairingRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
    return check_device_pairing_request_;
}
::enterprise_management::CheckDevicePairingRequest* DeviceManagementRequest::release_check_device_pairing_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
    clear_has_check_device_pairing_request();
    ::enterprise_management::CheckDevicePairingRequest* temp = check_device_pairing_request_;
    check_device_pairing_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_check_device_pairing_request(::enterprise_management::CheckDevicePairingRequest* check_device_pairing_request)
{
    delete check_device_pairing_request_;
    check_device_pairing_request_ = check_device_pairing_request;
    if (check_device_pairing_request) {
        set_has_check_device_pairing_request();
    } else {
        clear_has_check_device_pairing_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_device_pairing_request)
}

// optional .enterprise_management.DeviceRemoteCommandRequest remote_command_request = 13;
bool DeviceManagementRequest::has_remote_command_request() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void DeviceManagementRequest::set_has_remote_command_request()
{
    _has_bits_[0] |= 0x00001000u;
}
void DeviceManagementRequest::clear_has_remote_command_request()
{
    _has_bits_[0] &= ~0x00001000u;
}
void DeviceManagementRequest::clear_remote_command_request()
{
    if (remote_command_request_ != NULL)
        remote_command_request_->::enterprise_management::DeviceRemoteCommandRequest::Clear();
    clear_has_remote_command_request();
}
const ::enterprise_management::DeviceRemoteCommandRequest& DeviceManagementRequest::remote_command_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.remote_command_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return remote_command_request_ != NULL ? *remote_command_request_ : *default_instance().remote_command_request_;
#else
    return remote_command_request_ != NULL ? *remote_command_request_ : *default_instance_->remote_command_request_;
#endif
}
::enterprise_management::DeviceRemoteCommandRequest* DeviceManagementRequest::mutable_remote_command_request()
{
    set_has_remote_command_request();
    if (remote_command_request_ == NULL) {
        remote_command_request_ = new ::enterprise_management::DeviceRemoteCommandRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.remote_command_request)
    return remote_command_request_;
}
::enterprise_management::DeviceRemoteCommandRequest* DeviceManagementRequest::release_remote_command_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.remote_command_request)
    clear_has_remote_command_request();
    ::enterprise_management::DeviceRemoteCommandRequest* temp = remote_command_request_;
    remote_command_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_remote_command_request(::enterprise_management::DeviceRemoteCommandRequest* remote_command_request)
{
    delete remote_command_request_;
    remote_command_request_ = remote_command_request;
    if (remote_command_request) {
        set_has_remote_command_request();
    } else {
        clear_has_remote_command_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.remote_command_request)
}

// optional .enterprise_management.DeviceAttributeUpdatePermissionRequest device_attribute_update_permission_request = 14;
bool DeviceManagementRequest::has_device_attribute_update_permission_request() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void DeviceManagementRequest::set_has_device_attribute_update_permission_request()
{
    _has_bits_[0] |= 0x00002000u;
}
void DeviceManagementRequest::clear_has_device_attribute_update_permission_request()
{
    _has_bits_[0] &= ~0x00002000u;
}
void DeviceManagementRequest::clear_device_attribute_update_permission_request()
{
    if (device_attribute_update_permission_request_ != NULL)
        device_attribute_update_permission_request_->::enterprise_management::DeviceAttributeUpdatePermissionRequest::Clear();
    clear_has_device_attribute_update_permission_request();
}
const ::enterprise_management::DeviceAttributeUpdatePermissionRequest& DeviceManagementRequest::device_attribute_update_permission_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_attribute_update_permission_request_ != NULL ? *device_attribute_update_permission_request_ : *default_instance().device_attribute_update_permission_request_;
#else
    return device_attribute_update_permission_request_ != NULL ? *device_attribute_update_permission_request_ : *default_instance_->device_attribute_update_permission_request_;
#endif
}
::enterprise_management::DeviceAttributeUpdatePermissionRequest* DeviceManagementRequest::mutable_device_attribute_update_permission_request()
{
    set_has_device_attribute_update_permission_request();
    if (device_attribute_update_permission_request_ == NULL) {
        device_attribute_update_permission_request_ = new ::enterprise_management::DeviceAttributeUpdatePermissionRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
    return device_attribute_update_permission_request_;
}
::enterprise_management::DeviceAttributeUpdatePermissionRequest* DeviceManagementRequest::release_device_attribute_update_permission_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
    clear_has_device_attribute_update_permission_request();
    ::enterprise_management::DeviceAttributeUpdatePermissionRequest* temp = device_attribute_update_permission_request_;
    device_attribute_update_permission_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_device_attribute_update_permission_request(::enterprise_management::DeviceAttributeUpdatePermissionRequest* device_attribute_update_permission_request)
{
    delete device_attribute_update_permission_request_;
    device_attribute_update_permission_request_ = device_attribute_update_permission_request;
    if (device_attribute_update_permission_request) {
        set_has_device_attribute_update_permission_request();
    } else {
        clear_has_device_attribute_update_permission_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_attribute_update_permission_request)
}

// optional .enterprise_management.DeviceAttributeUpdateRequest device_attribute_update_request = 15;
bool DeviceManagementRequest::has_device_attribute_update_request() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void DeviceManagementRequest::set_has_device_attribute_update_request()
{
    _has_bits_[0] |= 0x00004000u;
}
void DeviceManagementRequest::clear_has_device_attribute_update_request()
{
    _has_bits_[0] &= ~0x00004000u;
}
void DeviceManagementRequest::clear_device_attribute_update_request()
{
    if (device_attribute_update_request_ != NULL)
        device_attribute_update_request_->::enterprise_management::DeviceAttributeUpdateRequest::Clear();
    clear_has_device_attribute_update_request();
}
const ::enterprise_management::DeviceAttributeUpdateRequest& DeviceManagementRequest::device_attribute_update_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_attribute_update_request_ != NULL ? *device_attribute_update_request_ : *default_instance().device_attribute_update_request_;
#else
    return device_attribute_update_request_ != NULL ? *device_attribute_update_request_ : *default_instance_->device_attribute_update_request_;
#endif
}
::enterprise_management::DeviceAttributeUpdateRequest* DeviceManagementRequest::mutable_device_attribute_update_request()
{
    set_has_device_attribute_update_request();
    if (device_attribute_update_request_ == NULL) {
        device_attribute_update_request_ = new ::enterprise_management::DeviceAttributeUpdateRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
    return device_attribute_update_request_;
}
::enterprise_management::DeviceAttributeUpdateRequest* DeviceManagementRequest::release_device_attribute_update_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
    clear_has_device_attribute_update_request();
    ::enterprise_management::DeviceAttributeUpdateRequest* temp = device_attribute_update_request_;
    device_attribute_update_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_device_attribute_update_request(::enterprise_management::DeviceAttributeUpdateRequest* device_attribute_update_request)
{
    delete device_attribute_update_request_;
    device_attribute_update_request_ = device_attribute_update_request;
    if (device_attribute_update_request) {
        set_has_device_attribute_update_request();
    } else {
        clear_has_device_attribute_update_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.device_attribute_update_request)
}

// optional .enterprise_management.GcmIdUpdateRequest gcm_id_update_request = 16;
bool DeviceManagementRequest::has_gcm_id_update_request() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void DeviceManagementRequest::set_has_gcm_id_update_request()
{
    _has_bits_[0] |= 0x00008000u;
}
void DeviceManagementRequest::clear_has_gcm_id_update_request()
{
    _has_bits_[0] &= ~0x00008000u;
}
void DeviceManagementRequest::clear_gcm_id_update_request()
{
    if (gcm_id_update_request_ != NULL)
        gcm_id_update_request_->::enterprise_management::GcmIdUpdateRequest::Clear();
    clear_has_gcm_id_update_request();
}
const ::enterprise_management::GcmIdUpdateRequest& DeviceManagementRequest::gcm_id_update_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return gcm_id_update_request_ != NULL ? *gcm_id_update_request_ : *default_instance().gcm_id_update_request_;
#else
    return gcm_id_update_request_ != NULL ? *gcm_id_update_request_ : *default_instance_->gcm_id_update_request_;
#endif
}
::enterprise_management::GcmIdUpdateRequest* DeviceManagementRequest::mutable_gcm_id_update_request()
{
    set_has_gcm_id_update_request();
    if (gcm_id_update_request_ == NULL) {
        gcm_id_update_request_ = new ::enterprise_management::GcmIdUpdateRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
    return gcm_id_update_request_;
}
::enterprise_management::GcmIdUpdateRequest* DeviceManagementRequest::release_gcm_id_update_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
    clear_has_gcm_id_update_request();
    ::enterprise_management::GcmIdUpdateRequest* temp = gcm_id_update_request_;
    gcm_id_update_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_gcm_id_update_request(::enterprise_management::GcmIdUpdateRequest* gcm_id_update_request)
{
    delete gcm_id_update_request_;
    gcm_id_update_request_ = gcm_id_update_request;
    if (gcm_id_update_request) {
        set_has_gcm_id_update_request();
    } else {
        clear_has_gcm_id_update_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.gcm_id_update_request)
}

// optional .enterprise_management.CheckAndroidManagementRequest check_android_management_request = 17;
bool DeviceManagementRequest::has_check_android_management_request() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void DeviceManagementRequest::set_has_check_android_management_request()
{
    _has_bits_[0] |= 0x00010000u;
}
void DeviceManagementRequest::clear_has_check_android_management_request()
{
    _has_bits_[0] &= ~0x00010000u;
}
void DeviceManagementRequest::clear_check_android_management_request()
{
    if (check_android_management_request_ != NULL)
        check_android_management_request_->::enterprise_management::CheckAndroidManagementRequest::Clear();
    clear_has_check_android_management_request();
}
const ::enterprise_management::CheckAndroidManagementRequest& DeviceManagementRequest::check_android_management_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.check_android_management_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return check_android_management_request_ != NULL ? *check_android_management_request_ : *default_instance().check_android_management_request_;
#else
    return check_android_management_request_ != NULL ? *check_android_management_request_ : *default_instance_->check_android_management_request_;
#endif
}
::enterprise_management::CheckAndroidManagementRequest* DeviceManagementRequest::mutable_check_android_management_request()
{
    set_has_check_android_management_request();
    if (check_android_management_request_ == NULL) {
        check_android_management_request_ = new ::enterprise_management::CheckAndroidManagementRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.check_android_management_request)
    return check_android_management_request_;
}
::enterprise_management::CheckAndroidManagementRequest* DeviceManagementRequest::release_check_android_management_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.check_android_management_request)
    clear_has_check_android_management_request();
    ::enterprise_management::CheckAndroidManagementRequest* temp = check_android_management_request_;
    check_android_management_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_check_android_management_request(::enterprise_management::CheckAndroidManagementRequest* check_android_management_request)
{
    delete check_android_management_request_;
    check_android_management_request_ = check_android_management_request;
    if (check_android_management_request) {
        set_has_check_android_management_request();
    } else {
        clear_has_check_android_management_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.check_android_management_request)
}

// optional .enterprise_management.CertificateBasedDeviceRegisterRequest certificate_based_register_request = 18;
bool DeviceManagementRequest::has_certificate_based_register_request() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void DeviceManagementRequest::set_has_certificate_based_register_request()
{
    _has_bits_[0] |= 0x00020000u;
}
void DeviceManagementRequest::clear_has_certificate_based_register_request()
{
    _has_bits_[0] &= ~0x00020000u;
}
void DeviceManagementRequest::clear_certificate_based_register_request()
{
    if (certificate_based_register_request_ != NULL)
        certificate_based_register_request_->::enterprise_management::CertificateBasedDeviceRegisterRequest::Clear();
    clear_has_certificate_based_register_request();
}
const ::enterprise_management::CertificateBasedDeviceRegisterRequest& DeviceManagementRequest::certificate_based_register_request() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return certificate_based_register_request_ != NULL ? *certificate_based_register_request_ : *default_instance().certificate_based_register_request_;
#else
    return certificate_based_register_request_ != NULL ? *certificate_based_register_request_ : *default_instance_->certificate_based_register_request_;
#endif
}
::enterprise_management::CertificateBasedDeviceRegisterRequest* DeviceManagementRequest::mutable_certificate_based_register_request()
{
    set_has_certificate_based_register_request();
    if (certificate_based_register_request_ == NULL) {
        certificate_based_register_request_ = new ::enterprise_management::CertificateBasedDeviceRegisterRequest;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
    return certificate_based_register_request_;
}
::enterprise_management::CertificateBasedDeviceRegisterRequest* DeviceManagementRequest::release_certificate_based_register_request()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
    clear_has_certificate_based_register_request();
    ::enterprise_management::CertificateBasedDeviceRegisterRequest* temp = certificate_based_register_request_;
    certificate_based_register_request_ = NULL;
    return temp;
}
void DeviceManagementRequest::set_allocated_certificate_based_register_request(::enterprise_management::CertificateBasedDeviceRegisterRequest* certificate_based_register_request)
{
    delete certificate_based_register_request_;
    certificate_based_register_request_ = certificate_based_register_request;
    if (certificate_based_register_request) {
        set_has_certificate_based_register_request();
    } else {
        clear_has_certificate_based_register_request();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementRequest.certificate_based_register_request)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceManagementResponse(
    DeviceManagementResponse* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool DeviceManagementResponse_ErrorCode_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::SUCCESS;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::DEVICE_MANAGEMENT_NOT_SUPPORTED;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::DEVICE_NOT_FOUND;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::DEVICE_MANAGEMENT_TOKEN_INVALID;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::ACTIVATION_PENDING;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::POLICY_NOT_FOUND;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::ErrorCode_MIN;
const DeviceManagementResponse_ErrorCode DeviceManagementResponse::ErrorCode_MAX;
const int DeviceManagementResponse::ErrorCode_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceManagementResponse::kErrorFieldNumber;
const int DeviceManagementResponse::kErrorMessageFieldNumber;
const int DeviceManagementResponse::kRegisterResponseFieldNumber;
const int DeviceManagementResponse::kUnregisterResponseFieldNumber;
const int DeviceManagementResponse::kPolicyResponseFieldNumber;
const int DeviceManagementResponse::kDeviceStatusReportResponseFieldNumber;
const int DeviceManagementResponse::kSessionStatusReportResponseFieldNumber;
const int DeviceManagementResponse::kAutoEnrollmentResponseFieldNumber;
const int DeviceManagementResponse::kCertUploadResponseFieldNumber;
const int DeviceManagementResponse::kServiceApiAccessResponseFieldNumber;
const int DeviceManagementResponse::kDeviceStateRetrievalResponseFieldNumber;
const int DeviceManagementResponse::kDevicePairingResponseFieldNumber;
const int DeviceManagementResponse::kCheckDevicePairingResponseFieldNumber;
const int DeviceManagementResponse::kRemoteCommandResponseFieldNumber;
const int DeviceManagementResponse::kDeviceAttributeUpdatePermissionResponseFieldNumber;
const int DeviceManagementResponse::kDeviceAttributeUpdateResponseFieldNumber;
const int DeviceManagementResponse::kGcmIdUpdateResponseFieldNumber;
const int DeviceManagementResponse::kCheckAndroidManagementResponseFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceManagementResponse::DeviceManagementResponse()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:enterprise_management.DeviceManagementResponse)
}

void DeviceManagementResponse::InitAsDefaultInstance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    register_response_ = const_cast<::enterprise_management::DeviceRegisterResponse*>(
        ::enterprise_management::DeviceRegisterResponse::internal_default_instance());
#else
    register_response_ = const_cast<::enterprise_management::DeviceRegisterResponse*>(&::enterprise_management::DeviceRegisterResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    unregister_response_ = const_cast<::enterprise_management::DeviceUnregisterResponse*>(
        ::enterprise_management::DeviceUnregisterResponse::internal_default_instance());
#else
    unregister_response_ = const_cast<::enterprise_management::DeviceUnregisterResponse*>(&::enterprise_management::DeviceUnregisterResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    policy_response_ = const_cast<::enterprise_management::DevicePolicyResponse*>(
        ::enterprise_management::DevicePolicyResponse::internal_default_instance());
#else
    policy_response_ = const_cast<::enterprise_management::DevicePolicyResponse*>(&::enterprise_management::DevicePolicyResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_status_report_response_ = const_cast<::enterprise_management::DeviceStatusReportResponse*>(
        ::enterprise_management::DeviceStatusReportResponse::internal_default_instance());
#else
    device_status_report_response_ = const_cast<::enterprise_management::DeviceStatusReportResponse*>(&::enterprise_management::DeviceStatusReportResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    session_status_report_response_ = const_cast<::enterprise_management::SessionStatusReportResponse*>(
        ::enterprise_management::SessionStatusReportResponse::internal_default_instance());
#else
    session_status_report_response_ = const_cast<::enterprise_management::SessionStatusReportResponse*>(&::enterprise_management::SessionStatusReportResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    auto_enrollment_response_ = const_cast<::enterprise_management::DeviceAutoEnrollmentResponse*>(
        ::enterprise_management::DeviceAutoEnrollmentResponse::internal_default_instance());
#else
    auto_enrollment_response_ = const_cast<::enterprise_management::DeviceAutoEnrollmentResponse*>(&::enterprise_management::DeviceAutoEnrollmentResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    cert_upload_response_ = const_cast<::enterprise_management::DeviceCertUploadResponse*>(
        ::enterprise_management::DeviceCertUploadResponse::internal_default_instance());
#else
    cert_upload_response_ = const_cast<::enterprise_management::DeviceCertUploadResponse*>(&::enterprise_management::DeviceCertUploadResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    service_api_access_response_ = const_cast<::enterprise_management::DeviceServiceApiAccessResponse*>(
        ::enterprise_management::DeviceServiceApiAccessResponse::internal_default_instance());
#else
    service_api_access_response_ = const_cast<::enterprise_management::DeviceServiceApiAccessResponse*>(&::enterprise_management::DeviceServiceApiAccessResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_state_retrieval_response_ = const_cast<::enterprise_management::DeviceStateRetrievalResponse*>(
        ::enterprise_management::DeviceStateRetrievalResponse::internal_default_instance());
#else
    device_state_retrieval_response_ = const_cast<::enterprise_management::DeviceStateRetrievalResponse*>(&::enterprise_management::DeviceStateRetrievalResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_pairing_response_ = const_cast<::enterprise_management::DevicePairingResponse*>(
        ::enterprise_management::DevicePairingResponse::internal_default_instance());
#else
    device_pairing_response_ = const_cast<::enterprise_management::DevicePairingResponse*>(&::enterprise_management::DevicePairingResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    check_device_pairing_response_ = const_cast<::enterprise_management::CheckDevicePairingResponse*>(
        ::enterprise_management::CheckDevicePairingResponse::internal_default_instance());
#else
    check_device_pairing_response_ = const_cast<::enterprise_management::CheckDevicePairingResponse*>(&::enterprise_management::CheckDevicePairingResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    remote_command_response_ = const_cast<::enterprise_management::DeviceRemoteCommandResponse*>(
        ::enterprise_management::DeviceRemoteCommandResponse::internal_default_instance());
#else
    remote_command_response_ = const_cast<::enterprise_management::DeviceRemoteCommandResponse*>(&::enterprise_management::DeviceRemoteCommandResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_attribute_update_permission_response_ = const_cast<::enterprise_management::DeviceAttributeUpdatePermissionResponse*>(
        ::enterprise_management::DeviceAttributeUpdatePermissionResponse::internal_default_instance());
#else
    device_attribute_update_permission_response_ = const_cast<::enterprise_management::DeviceAttributeUpdatePermissionResponse*>(&::enterprise_management::DeviceAttributeUpdatePermissionResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    device_attribute_update_response_ = const_cast<::enterprise_management::DeviceAttributeUpdateResponse*>(
        ::enterprise_management::DeviceAttributeUpdateResponse::internal_default_instance());
#else
    device_attribute_update_response_ = const_cast<::enterprise_management::DeviceAttributeUpdateResponse*>(&::enterprise_management::DeviceAttributeUpdateResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    gcm_id_update_response_ = const_cast<::enterprise_management::GcmIdUpdateResponse*>(
        ::enterprise_management::GcmIdUpdateResponse::internal_default_instance());
#else
    gcm_id_update_response_ = const_cast<::enterprise_management::GcmIdUpdateResponse*>(&::enterprise_management::GcmIdUpdateResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    check_android_management_response_ = const_cast<::enterprise_management::CheckAndroidManagementResponse*>(
        ::enterprise_management::CheckAndroidManagementResponse::internal_default_instance());
#else
    check_android_management_response_ = const_cast<::enterprise_management::CheckAndroidManagementResponse*>(&::enterprise_management::CheckAndroidManagementResponse::default_instance());
#endif
}

DeviceManagementResponse::DeviceManagementResponse(const DeviceManagementResponse& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:enterprise_management.DeviceManagementResponse)
}

void DeviceManagementResponse::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_ = 0;
    error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    register_response_ = NULL;
    unregister_response_ = NULL;
    policy_response_ = NULL;
    device_status_report_response_ = NULL;
    session_status_report_response_ = NULL;
    auto_enrollment_response_ = NULL;
    cert_upload_response_ = NULL;
    service_api_access_response_ = NULL;
    device_state_retrieval_response_ = NULL;
    device_pairing_response_ = NULL;
    check_device_pairing_response_ = NULL;
    remote_command_response_ = NULL;
    device_attribute_update_permission_response_ = NULL;
    device_attribute_update_response_ = NULL;
    gcm_id_update_response_ = NULL;
    check_android_management_response_ = NULL;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceManagementResponse::~DeviceManagementResponse()
{
    // @@protoc_insertion_point(destructor:enterprise_management.DeviceManagementResponse)
    SharedDtor();
}

void DeviceManagementResponse::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
        delete register_response_;
        delete unregister_response_;
        delete policy_response_;
        delete device_status_report_response_;
        delete session_status_report_response_;
        delete auto_enrollment_response_;
        delete cert_upload_response_;
        delete service_api_access_response_;
        delete device_state_retrieval_response_;
        delete device_pairing_response_;
        delete check_device_pairing_response_;
        delete remote_command_response_;
        delete device_attribute_update_permission_response_;
        delete device_attribute_update_response_;
        delete gcm_id_update_response_;
        delete check_android_management_response_;
    }
}

void DeviceManagementResponse::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceManagementResponse& DeviceManagementResponse::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_device_5fmanagement_5fbackend_2eproto();
#endif
    return *default_instance_;
}

DeviceManagementResponse* DeviceManagementResponse::default_instance_ = NULL;

DeviceManagementResponse* DeviceManagementResponse::New(::google::protobuf::Arena* arena) const
{
    DeviceManagementResponse* n = new DeviceManagementResponse;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void DeviceManagementResponse::Clear()
{
    // @@protoc_insertion_point(message_clear_start:enterprise_management.DeviceManagementResponse)
    if (_has_bits_[0 / 32] & 255u) {
        error_ = 0;
        if (has_error_message()) {
            error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_register_response()) {
            if (register_response_ != NULL)
                register_response_->::enterprise_management::DeviceRegisterResponse::Clear();
        }
        if (has_unregister_response()) {
            if (unregister_response_ != NULL)
                unregister_response_->::enterprise_management::DeviceUnregisterResponse::Clear();
        }
        if (has_policy_response()) {
            if (policy_response_ != NULL)
                policy_response_->::enterprise_management::DevicePolicyResponse::Clear();
        }
        if (has_device_status_report_response()) {
            if (device_status_report_response_ != NULL)
                device_status_report_response_->::enterprise_management::DeviceStatusReportResponse::Clear();
        }
        if (has_session_status_report_response()) {
            if (session_status_report_response_ != NULL)
                session_status_report_response_->::enterprise_management::SessionStatusReportResponse::Clear();
        }
        if (has_auto_enrollment_response()) {
            if (auto_enrollment_response_ != NULL)
                auto_enrollment_response_->::enterprise_management::DeviceAutoEnrollmentResponse::Clear();
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        if (has_cert_upload_response()) {
            if (cert_upload_response_ != NULL)
                cert_upload_response_->::enterprise_management::DeviceCertUploadResponse::Clear();
        }
        if (has_service_api_access_response()) {
            if (service_api_access_response_ != NULL)
                service_api_access_response_->::enterprise_management::DeviceServiceApiAccessResponse::Clear();
        }
        if (has_device_state_retrieval_response()) {
            if (device_state_retrieval_response_ != NULL)
                device_state_retrieval_response_->::enterprise_management::DeviceStateRetrievalResponse::Clear();
        }
        if (has_device_pairing_response()) {
            if (device_pairing_response_ != NULL)
                device_pairing_response_->::enterprise_management::DevicePairingResponse::Clear();
        }
        if (has_check_device_pairing_response()) {
            if (check_device_pairing_response_ != NULL)
                check_device_pairing_response_->::enterprise_management::CheckDevicePairingResponse::Clear();
        }
        if (has_remote_command_response()) {
            if (remote_command_response_ != NULL)
                remote_command_response_->::enterprise_management::DeviceRemoteCommandResponse::Clear();
        }
        if (has_device_attribute_update_permission_response()) {
            if (device_attribute_update_permission_response_ != NULL)
                device_attribute_update_permission_response_->::enterprise_management::DeviceAttributeUpdatePermissionResponse::Clear();
        }
        if (has_device_attribute_update_response()) {
            if (device_attribute_update_response_ != NULL)
                device_attribute_update_response_->::enterprise_management::DeviceAttributeUpdateResponse::Clear();
        }
    }
    if (_has_bits_[16 / 32] & 196608u) {
        if (has_gcm_id_update_response()) {
            if (gcm_id_update_response_ != NULL)
                gcm_id_update_response_->::enterprise_management::GcmIdUpdateResponse::Clear();
        }
        if (has_check_android_management_response()) {
            if (check_android_management_response_ != NULL)
                check_android_management_response_->::enterprise_management::CheckAndroidManagementResponse::Clear();
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceManagementResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForDeviceManagementResponse, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:enterprise_management.DeviceManagementResponse)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
        case 1: {
            if (tag == 8) {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::enterprise_management::DeviceManagementResponse_ErrorCode_IsValid(value)) {
                    set_error(static_cast<::enterprise_management::DeviceManagementResponse_ErrorCode>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(8);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_error_message;
            break;
        }

        // optional string error_message = 2;
        case 2: {
            if (tag == 18) {
            parse_error_message:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_error_message()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(26))
                goto parse_register_response;
            break;
        }

        // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
        case 3: {
            if (tag == 26) {
            parse_register_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_register_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_unregister_response;
            break;
        }

        // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
        case 4: {
            if (tag == 34) {
            parse_unregister_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_unregister_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(42))
                goto parse_policy_response;
            break;
        }

        // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
        case 5: {
            if (tag == 42) {
            parse_policy_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_policy_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(50))
                goto parse_device_status_report_response;
            break;
        }

        // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
        case 6: {
            if (tag == 50) {
            parse_device_status_report_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_status_report_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(58))
                goto parse_session_status_report_response;
            break;
        }

        // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
        case 7: {
            if (tag == 58) {
            parse_session_status_report_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_session_status_report_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_auto_enrollment_response;
            break;
        }

        // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
        case 8: {
            if (tag == 66) {
            parse_auto_enrollment_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_auto_enrollment_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_cert_upload_response;
            break;
        }

        // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
        case 9: {
            if (tag == 74) {
            parse_cert_upload_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_cert_upload_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_service_api_access_response;
            break;
        }

        // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
        case 10: {
            if (tag == 82) {
            parse_service_api_access_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_service_api_access_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(90))
                goto parse_device_state_retrieval_response;
            break;
        }

        // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
        case 11: {
            if (tag == 90) {
            parse_device_state_retrieval_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_state_retrieval_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(98))
                goto parse_device_pairing_response;
            break;
        }

        // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
        case 12: {
            if (tag == 98) {
            parse_device_pairing_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_pairing_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(106))
                goto parse_check_device_pairing_response;
            break;
        }

        // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
        case 13: {
            if (tag == 106) {
            parse_check_device_pairing_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_check_device_pairing_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(114))
                goto parse_remote_command_response;
            break;
        }

        // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
        case 14: {
            if (tag == 114) {
            parse_remote_command_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_remote_command_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(122))
                goto parse_device_attribute_update_permission_response;
            break;
        }

        // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
        case 15: {
            if (tag == 122) {
            parse_device_attribute_update_permission_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_attribute_update_permission_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(130))
                goto parse_device_attribute_update_response;
            break;
        }

        // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
        case 16: {
            if (tag == 130) {
            parse_device_attribute_update_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_device_attribute_update_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(138))
                goto parse_gcm_id_update_response;
            break;
        }

        // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
        case 17: {
            if (tag == 138) {
            parse_gcm_id_update_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_gcm_id_update_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(146))
                goto parse_check_android_management_response;
            break;
        }

        // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
        case 18: {
            if (tag == 146) {
            parse_check_android_management_response:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                    input, mutable_check_android_management_response()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:enterprise_management.DeviceManagementResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:enterprise_management.DeviceManagementResponse)
    return false;
#undef DO_
}

void DeviceManagementResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:enterprise_management.DeviceManagementResponse)
    // optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
    if (has_error()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            1, this->error(), output);
    }

    // optional string error_message = 2;
    if (has_error_message()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            2, this->error_message(), output);
    }

    // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
    if (has_register_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *this->register_response_, output);
    }

    // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
    if (has_unregister_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            4, *this->unregister_response_, output);
    }

    // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
    if (has_policy_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *this->policy_response_, output);
    }

    // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
    if (has_device_status_report_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *this->device_status_report_response_, output);
    }

    // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
    if (has_session_status_report_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            7, *this->session_status_report_response_, output);
    }

    // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
    if (has_auto_enrollment_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            8, *this->auto_enrollment_response_, output);
    }

    // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
    if (has_cert_upload_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            9, *this->cert_upload_response_, output);
    }

    // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
    if (has_service_api_access_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            10, *this->service_api_access_response_, output);
    }

    // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
    if (has_device_state_retrieval_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *this->device_state_retrieval_response_, output);
    }

    // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
    if (has_device_pairing_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *this->device_pairing_response_, output);
    }

    // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
    if (has_check_device_pairing_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *this->check_device_pairing_response_, output);
    }

    // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
    if (has_remote_command_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            14, *this->remote_command_response_, output);
    }

    // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
    if (has_device_attribute_update_permission_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            15, *this->device_attribute_update_permission_response_, output);
    }

    // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
    if (has_device_attribute_update_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            16, *this->device_attribute_update_response_, output);
    }

    // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
    if (has_gcm_id_update_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            17, *this->gcm_id_update_response_, output);
    }

    // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
    if (has_check_android_management_response()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            18, *this->check_android_management_response_, output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:enterprise_management.DeviceManagementResponse)
}

int DeviceManagementResponse::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:enterprise_management.DeviceManagementResponse)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 255u) {
        // optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
        if (has_error()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
        }

        // optional string error_message = 2;
        if (has_error_message()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->error_message());
        }

        // optional .enterprise_management.DeviceRegisterResponse register_response = 3;
        if (has_register_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->register_response_);
        }

        // optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
        if (has_unregister_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->unregister_response_);
        }

        // optional .enterprise_management.DevicePolicyResponse policy_response = 5;
        if (has_policy_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->policy_response_);
        }

        // optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
        if (has_device_status_report_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_status_report_response_);
        }

        // optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
        if (has_session_status_report_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->session_status_report_response_);
        }

        // optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
        if (has_auto_enrollment_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->auto_enrollment_response_);
        }
    }
    if (_has_bits_[8 / 32] & 65280u) {
        // optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
        if (has_cert_upload_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->cert_upload_response_);
        }

        // optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
        if (has_service_api_access_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->service_api_access_response_);
        }

        // optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
        if (has_device_state_retrieval_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_state_retrieval_response_);
        }

        // optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
        if (has_device_pairing_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_pairing_response_);
        }

        // optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
        if (has_check_device_pairing_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->check_device_pairing_response_);
        }

        // optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
        if (has_remote_command_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->remote_command_response_);
        }

        // optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
        if (has_device_attribute_update_permission_response()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_attribute_update_permission_response_);
        }

        // optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
        if (has_device_attribute_update_response()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_attribute_update_response_);
        }
    }
    if (_has_bits_[16 / 32] & 196608u) {
        // optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
        if (has_gcm_id_update_response()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->gcm_id_update_response_);
        }

        // optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
        if (has_check_android_management_response()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->check_android_management_response_);
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void DeviceManagementResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const DeviceManagementResponse*>(&from));
}

void DeviceManagementResponse::MergeFrom(const DeviceManagementResponse& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.DeviceManagementResponse)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_error()) {
            set_error(from.error());
        }
        if (from.has_error_message()) {
            set_has_error_message();
            error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
        }
        if (from.has_register_response()) {
            mutable_register_response()->::enterprise_management::DeviceRegisterResponse::MergeFrom(from.register_response());
        }
        if (from.has_unregister_response()) {
            mutable_unregister_response()->::enterprise_management::DeviceUnregisterResponse::MergeFrom(from.unregister_response());
        }
        if (from.has_policy_response()) {
            mutable_policy_response()->::enterprise_management::DevicePolicyResponse::MergeFrom(from.policy_response());
        }
        if (from.has_device_status_report_response()) {
            mutable_device_status_report_response()->::enterprise_management::DeviceStatusReportResponse::MergeFrom(from.device_status_report_response());
        }
        if (from.has_session_status_report_response()) {
            mutable_session_status_report_response()->::enterprise_management::SessionStatusReportResponse::MergeFrom(from.session_status_report_response());
        }
        if (from.has_auto_enrollment_response()) {
            mutable_auto_enrollment_response()->::enterprise_management::DeviceAutoEnrollmentResponse::MergeFrom(from.auto_enrollment_response());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_cert_upload_response()) {
            mutable_cert_upload_response()->::enterprise_management::DeviceCertUploadResponse::MergeFrom(from.cert_upload_response());
        }
        if (from.has_service_api_access_response()) {
            mutable_service_api_access_response()->::enterprise_management::DeviceServiceApiAccessResponse::MergeFrom(from.service_api_access_response());
        }
        if (from.has_device_state_retrieval_response()) {
            mutable_device_state_retrieval_response()->::enterprise_management::DeviceStateRetrievalResponse::MergeFrom(from.device_state_retrieval_response());
        }
        if (from.has_device_pairing_response()) {
            mutable_device_pairing_response()->::enterprise_management::DevicePairingResponse::MergeFrom(from.device_pairing_response());
        }
        if (from.has_check_device_pairing_response()) {
            mutable_check_device_pairing_response()->::enterprise_management::CheckDevicePairingResponse::MergeFrom(from.check_device_pairing_response());
        }
        if (from.has_remote_command_response()) {
            mutable_remote_command_response()->::enterprise_management::DeviceRemoteCommandResponse::MergeFrom(from.remote_command_response());
        }
        if (from.has_device_attribute_update_permission_response()) {
            mutable_device_attribute_update_permission_response()->::enterprise_management::DeviceAttributeUpdatePermissionResponse::MergeFrom(from.device_attribute_update_permission_response());
        }
        if (from.has_device_attribute_update_response()) {
            mutable_device_attribute_update_response()->::enterprise_management::DeviceAttributeUpdateResponse::MergeFrom(from.device_attribute_update_response());
        }
    }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
        if (from.has_gcm_id_update_response()) {
            mutable_gcm_id_update_response()->::enterprise_management::GcmIdUpdateResponse::MergeFrom(from.gcm_id_update_response());
        }
        if (from.has_check_android_management_response()) {
            mutable_check_android_management_response()->::enterprise_management::CheckAndroidManagementResponse::MergeFrom(from.check_android_management_response());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void DeviceManagementResponse::CopyFrom(const DeviceManagementResponse& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.DeviceManagementResponse)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool DeviceManagementResponse::IsInitialized() const
{

    if (has_register_response()) {
        if (!this->register_response_->IsInitialized())
            return false;
    }
    return true;
}

void DeviceManagementResponse::Swap(DeviceManagementResponse* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void DeviceManagementResponse::InternalSwap(DeviceManagementResponse* other)
{
    std::swap(error_, other->error_);
    error_message_.Swap(&other->error_message_);
    std::swap(register_response_, other->register_response_);
    std::swap(unregister_response_, other->unregister_response_);
    std::swap(policy_response_, other->policy_response_);
    std::swap(device_status_report_response_, other->device_status_report_response_);
    std::swap(session_status_report_response_, other->session_status_report_response_);
    std::swap(auto_enrollment_response_, other->auto_enrollment_response_);
    std::swap(cert_upload_response_, other->cert_upload_response_);
    std::swap(service_api_access_response_, other->service_api_access_response_);
    std::swap(device_state_retrieval_response_, other->device_state_retrieval_response_);
    std::swap(device_pairing_response_, other->device_pairing_response_);
    std::swap(check_device_pairing_response_, other->check_device_pairing_response_);
    std::swap(remote_command_response_, other->remote_command_response_);
    std::swap(device_attribute_update_permission_response_, other->device_attribute_update_permission_response_);
    std::swap(device_attribute_update_response_, other->device_attribute_update_response_);
    std::swap(gcm_id_update_response_, other->gcm_id_update_response_);
    std::swap(check_android_management_response_, other->check_android_management_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceManagementResponse::GetTypeName() const
{
    return "enterprise_management.DeviceManagementResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceManagementResponse

// optional .enterprise_management.DeviceManagementResponse.ErrorCode error = 1 [default = SUCCESS];
bool DeviceManagementResponse::has_error() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceManagementResponse::set_has_error()
{
    _has_bits_[0] |= 0x00000001u;
}
void DeviceManagementResponse::clear_has_error()
{
    _has_bits_[0] &= ~0x00000001u;
}
void DeviceManagementResponse::clear_error()
{
    error_ = 0;
    clear_has_error();
}
::enterprise_management::DeviceManagementResponse_ErrorCode DeviceManagementResponse::error() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.error)
    return static_cast<::enterprise_management::DeviceManagementResponse_ErrorCode>(error_);
}
void DeviceManagementResponse::set_error(::enterprise_management::DeviceManagementResponse_ErrorCode value)
{
    assert(::enterprise_management::DeviceManagementResponse_ErrorCode_IsValid(value));
    set_has_error();
    error_ = value;
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceManagementResponse.error)
}

// optional string error_message = 2;
bool DeviceManagementResponse::has_error_message() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceManagementResponse::set_has_error_message()
{
    _has_bits_[0] |= 0x00000002u;
}
void DeviceManagementResponse::clear_has_error_message()
{
    _has_bits_[0] &= ~0x00000002u;
}
void DeviceManagementResponse::clear_error_message()
{
    error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_error_message();
}
const ::std::string& DeviceManagementResponse::error_message() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.error_message)
    return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceManagementResponse::set_error_message(const ::std::string& value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:enterprise_management.DeviceManagementResponse.error_message)
}
void DeviceManagementResponse::set_error_message(const char* value)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:enterprise_management.DeviceManagementResponse.error_message)
}
void DeviceManagementResponse::set_error_message(const char* value, size_t size)
{
    set_has_error_message();
    error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:enterprise_management.DeviceManagementResponse.error_message)
}
::std::string* DeviceManagementResponse::mutable_error_message()
{
    set_has_error_message();
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.error_message)
    return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceManagementResponse::release_error_message()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.error_message)
    clear_has_error_message();
    return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceManagementResponse::set_allocated_error_message(::std::string* error_message)
{
    if (error_message != NULL) {
        set_has_error_message();
    } else {
        clear_has_error_message();
    }
    error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.error_message)
}

// optional .enterprise_management.DeviceRegisterResponse register_response = 3;
bool DeviceManagementResponse::has_register_response() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceManagementResponse::set_has_register_response()
{
    _has_bits_[0] |= 0x00000004u;
}
void DeviceManagementResponse::clear_has_register_response()
{
    _has_bits_[0] &= ~0x00000004u;
}
void DeviceManagementResponse::clear_register_response()
{
    if (register_response_ != NULL)
        register_response_->::enterprise_management::DeviceRegisterResponse::Clear();
    clear_has_register_response();
}
const ::enterprise_management::DeviceRegisterResponse& DeviceManagementResponse::register_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.register_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return register_response_ != NULL ? *register_response_ : *default_instance().register_response_;
#else
    return register_response_ != NULL ? *register_response_ : *default_instance_->register_response_;
#endif
}
::enterprise_management::DeviceRegisterResponse* DeviceManagementResponse::mutable_register_response()
{
    set_has_register_response();
    if (register_response_ == NULL) {
        register_response_ = new ::enterprise_management::DeviceRegisterResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.register_response)
    return register_response_;
}
::enterprise_management::DeviceRegisterResponse* DeviceManagementResponse::release_register_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.register_response)
    clear_has_register_response();
    ::enterprise_management::DeviceRegisterResponse* temp = register_response_;
    register_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_register_response(::enterprise_management::DeviceRegisterResponse* register_response)
{
    delete register_response_;
    register_response_ = register_response;
    if (register_response) {
        set_has_register_response();
    } else {
        clear_has_register_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.register_response)
}

// optional .enterprise_management.DeviceUnregisterResponse unregister_response = 4;
bool DeviceManagementResponse::has_unregister_response() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceManagementResponse::set_has_unregister_response()
{
    _has_bits_[0] |= 0x00000008u;
}
void DeviceManagementResponse::clear_has_unregister_response()
{
    _has_bits_[0] &= ~0x00000008u;
}
void DeviceManagementResponse::clear_unregister_response()
{
    if (unregister_response_ != NULL)
        unregister_response_->::enterprise_management::DeviceUnregisterResponse::Clear();
    clear_has_unregister_response();
}
const ::enterprise_management::DeviceUnregisterResponse& DeviceManagementResponse::unregister_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.unregister_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return unregister_response_ != NULL ? *unregister_response_ : *default_instance().unregister_response_;
#else
    return unregister_response_ != NULL ? *unregister_response_ : *default_instance_->unregister_response_;
#endif
}
::enterprise_management::DeviceUnregisterResponse* DeviceManagementResponse::mutable_unregister_response()
{
    set_has_unregister_response();
    if (unregister_response_ == NULL) {
        unregister_response_ = new ::enterprise_management::DeviceUnregisterResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.unregister_response)
    return unregister_response_;
}
::enterprise_management::DeviceUnregisterResponse* DeviceManagementResponse::release_unregister_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.unregister_response)
    clear_has_unregister_response();
    ::enterprise_management::DeviceUnregisterResponse* temp = unregister_response_;
    unregister_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_unregister_response(::enterprise_management::DeviceUnregisterResponse* unregister_response)
{
    delete unregister_response_;
    unregister_response_ = unregister_response;
    if (unregister_response) {
        set_has_unregister_response();
    } else {
        clear_has_unregister_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.unregister_response)
}

// optional .enterprise_management.DevicePolicyResponse policy_response = 5;
bool DeviceManagementResponse::has_policy_response() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceManagementResponse::set_has_policy_response()
{
    _has_bits_[0] |= 0x00000010u;
}
void DeviceManagementResponse::clear_has_policy_response()
{
    _has_bits_[0] &= ~0x00000010u;
}
void DeviceManagementResponse::clear_policy_response()
{
    if (policy_response_ != NULL)
        policy_response_->::enterprise_management::DevicePolicyResponse::Clear();
    clear_has_policy_response();
}
const ::enterprise_management::DevicePolicyResponse& DeviceManagementResponse::policy_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.policy_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return policy_response_ != NULL ? *policy_response_ : *default_instance().policy_response_;
#else
    return policy_response_ != NULL ? *policy_response_ : *default_instance_->policy_response_;
#endif
}
::enterprise_management::DevicePolicyResponse* DeviceManagementResponse::mutable_policy_response()
{
    set_has_policy_response();
    if (policy_response_ == NULL) {
        policy_response_ = new ::enterprise_management::DevicePolicyResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.policy_response)
    return policy_response_;
}
::enterprise_management::DevicePolicyResponse* DeviceManagementResponse::release_policy_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.policy_response)
    clear_has_policy_response();
    ::enterprise_management::DevicePolicyResponse* temp = policy_response_;
    policy_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_policy_response(::enterprise_management::DevicePolicyResponse* policy_response)
{
    delete policy_response_;
    policy_response_ = policy_response;
    if (policy_response) {
        set_has_policy_response();
    } else {
        clear_has_policy_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.policy_response)
}

// optional .enterprise_management.DeviceStatusReportResponse device_status_report_response = 6;
bool DeviceManagementResponse::has_device_status_report_response() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceManagementResponse::set_has_device_status_report_response()
{
    _has_bits_[0] |= 0x00000020u;
}
void DeviceManagementResponse::clear_has_device_status_report_response()
{
    _has_bits_[0] &= ~0x00000020u;
}
void DeviceManagementResponse::clear_device_status_report_response()
{
    if (device_status_report_response_ != NULL)
        device_status_report_response_->::enterprise_management::DeviceStatusReportResponse::Clear();
    clear_has_device_status_report_response();
}
const ::enterprise_management::DeviceStatusReportResponse& DeviceManagementResponse::device_status_report_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_status_report_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_status_report_response_ != NULL ? *device_status_report_response_ : *default_instance().device_status_report_response_;
#else
    return device_status_report_response_ != NULL ? *device_status_report_response_ : *default_instance_->device_status_report_response_;
#endif
}
::enterprise_management::DeviceStatusReportResponse* DeviceManagementResponse::mutable_device_status_report_response()
{
    set_has_device_status_report_response();
    if (device_status_report_response_ == NULL) {
        device_status_report_response_ = new ::enterprise_management::DeviceStatusReportResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_status_report_response)
    return device_status_report_response_;
}
::enterprise_management::DeviceStatusReportResponse* DeviceManagementResponse::release_device_status_report_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_status_report_response)
    clear_has_device_status_report_response();
    ::enterprise_management::DeviceStatusReportResponse* temp = device_status_report_response_;
    device_status_report_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_device_status_report_response(::enterprise_management::DeviceStatusReportResponse* device_status_report_response)
{
    delete device_status_report_response_;
    device_status_report_response_ = device_status_report_response;
    if (device_status_report_response) {
        set_has_device_status_report_response();
    } else {
        clear_has_device_status_report_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_status_report_response)
}

// optional .enterprise_management.SessionStatusReportResponse session_status_report_response = 7;
bool DeviceManagementResponse::has_session_status_report_response() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceManagementResponse::set_has_session_status_report_response()
{
    _has_bits_[0] |= 0x00000040u;
}
void DeviceManagementResponse::clear_has_session_status_report_response()
{
    _has_bits_[0] &= ~0x00000040u;
}
void DeviceManagementResponse::clear_session_status_report_response()
{
    if (session_status_report_response_ != NULL)
        session_status_report_response_->::enterprise_management::SessionStatusReportResponse::Clear();
    clear_has_session_status_report_response();
}
const ::enterprise_management::SessionStatusReportResponse& DeviceManagementResponse::session_status_report_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.session_status_report_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return session_status_report_response_ != NULL ? *session_status_report_response_ : *default_instance().session_status_report_response_;
#else
    return session_status_report_response_ != NULL ? *session_status_report_response_ : *default_instance_->session_status_report_response_;
#endif
}
::enterprise_management::SessionStatusReportResponse* DeviceManagementResponse::mutable_session_status_report_response()
{
    set_has_session_status_report_response();
    if (session_status_report_response_ == NULL) {
        session_status_report_response_ = new ::enterprise_management::SessionStatusReportResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.session_status_report_response)
    return session_status_report_response_;
}
::enterprise_management::SessionStatusReportResponse* DeviceManagementResponse::release_session_status_report_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.session_status_report_response)
    clear_has_session_status_report_response();
    ::enterprise_management::SessionStatusReportResponse* temp = session_status_report_response_;
    session_status_report_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_session_status_report_response(::enterprise_management::SessionStatusReportResponse* session_status_report_response)
{
    delete session_status_report_response_;
    session_status_report_response_ = session_status_report_response;
    if (session_status_report_response) {
        set_has_session_status_report_response();
    } else {
        clear_has_session_status_report_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.session_status_report_response)
}

// optional .enterprise_management.DeviceAutoEnrollmentResponse auto_enrollment_response = 8;
bool DeviceManagementResponse::has_auto_enrollment_response() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceManagementResponse::set_has_auto_enrollment_response()
{
    _has_bits_[0] |= 0x00000080u;
}
void DeviceManagementResponse::clear_has_auto_enrollment_response()
{
    _has_bits_[0] &= ~0x00000080u;
}
void DeviceManagementResponse::clear_auto_enrollment_response()
{
    if (auto_enrollment_response_ != NULL)
        auto_enrollment_response_->::enterprise_management::DeviceAutoEnrollmentResponse::Clear();
    clear_has_auto_enrollment_response();
}
const ::enterprise_management::DeviceAutoEnrollmentResponse& DeviceManagementResponse::auto_enrollment_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return auto_enrollment_response_ != NULL ? *auto_enrollment_response_ : *default_instance().auto_enrollment_response_;
#else
    return auto_enrollment_response_ != NULL ? *auto_enrollment_response_ : *default_instance_->auto_enrollment_response_;
#endif
}
::enterprise_management::DeviceAutoEnrollmentResponse* DeviceManagementResponse::mutable_auto_enrollment_response()
{
    set_has_auto_enrollment_response();
    if (auto_enrollment_response_ == NULL) {
        auto_enrollment_response_ = new ::enterprise_management::DeviceAutoEnrollmentResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
    return auto_enrollment_response_;
}
::enterprise_management::DeviceAutoEnrollmentResponse* DeviceManagementResponse::release_auto_enrollment_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
    clear_has_auto_enrollment_response();
    ::enterprise_management::DeviceAutoEnrollmentResponse* temp = auto_enrollment_response_;
    auto_enrollment_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_auto_enrollment_response(::enterprise_management::DeviceAutoEnrollmentResponse* auto_enrollment_response)
{
    delete auto_enrollment_response_;
    auto_enrollment_response_ = auto_enrollment_response;
    if (auto_enrollment_response) {
        set_has_auto_enrollment_response();
    } else {
        clear_has_auto_enrollment_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.auto_enrollment_response)
}

// optional .enterprise_management.DeviceCertUploadResponse cert_upload_response = 9;
bool DeviceManagementResponse::has_cert_upload_response() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceManagementResponse::set_has_cert_upload_response()
{
    _has_bits_[0] |= 0x00000100u;
}
void DeviceManagementResponse::clear_has_cert_upload_response()
{
    _has_bits_[0] &= ~0x00000100u;
}
void DeviceManagementResponse::clear_cert_upload_response()
{
    if (cert_upload_response_ != NULL)
        cert_upload_response_->::enterprise_management::DeviceCertUploadResponse::Clear();
    clear_has_cert_upload_response();
}
const ::enterprise_management::DeviceCertUploadResponse& DeviceManagementResponse::cert_upload_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.cert_upload_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return cert_upload_response_ != NULL ? *cert_upload_response_ : *default_instance().cert_upload_response_;
#else
    return cert_upload_response_ != NULL ? *cert_upload_response_ : *default_instance_->cert_upload_response_;
#endif
}
::enterprise_management::DeviceCertUploadResponse* DeviceManagementResponse::mutable_cert_upload_response()
{
    set_has_cert_upload_response();
    if (cert_upload_response_ == NULL) {
        cert_upload_response_ = new ::enterprise_management::DeviceCertUploadResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.cert_upload_response)
    return cert_upload_response_;
}
::enterprise_management::DeviceCertUploadResponse* DeviceManagementResponse::release_cert_upload_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.cert_upload_response)
    clear_has_cert_upload_response();
    ::enterprise_management::DeviceCertUploadResponse* temp = cert_upload_response_;
    cert_upload_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_cert_upload_response(::enterprise_management::DeviceCertUploadResponse* cert_upload_response)
{
    delete cert_upload_response_;
    cert_upload_response_ = cert_upload_response;
    if (cert_upload_response) {
        set_has_cert_upload_response();
    } else {
        clear_has_cert_upload_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.cert_upload_response)
}

// optional .enterprise_management.DeviceServiceApiAccessResponse service_api_access_response = 10;
bool DeviceManagementResponse::has_service_api_access_response() const
{
    return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeviceManagementResponse::set_has_service_api_access_response()
{
    _has_bits_[0] |= 0x00000200u;
}
void DeviceManagementResponse::clear_has_service_api_access_response()
{
    _has_bits_[0] &= ~0x00000200u;
}
void DeviceManagementResponse::clear_service_api_access_response()
{
    if (service_api_access_response_ != NULL)
        service_api_access_response_->::enterprise_management::DeviceServiceApiAccessResponse::Clear();
    clear_has_service_api_access_response();
}
const ::enterprise_management::DeviceServiceApiAccessResponse& DeviceManagementResponse::service_api_access_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.service_api_access_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return service_api_access_response_ != NULL ? *service_api_access_response_ : *default_instance().service_api_access_response_;
#else
    return service_api_access_response_ != NULL ? *service_api_access_response_ : *default_instance_->service_api_access_response_;
#endif
}
::enterprise_management::DeviceServiceApiAccessResponse* DeviceManagementResponse::mutable_service_api_access_response()
{
    set_has_service_api_access_response();
    if (service_api_access_response_ == NULL) {
        service_api_access_response_ = new ::enterprise_management::DeviceServiceApiAccessResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.service_api_access_response)
    return service_api_access_response_;
}
::enterprise_management::DeviceServiceApiAccessResponse* DeviceManagementResponse::release_service_api_access_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.service_api_access_response)
    clear_has_service_api_access_response();
    ::enterprise_management::DeviceServiceApiAccessResponse* temp = service_api_access_response_;
    service_api_access_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_service_api_access_response(::enterprise_management::DeviceServiceApiAccessResponse* service_api_access_response)
{
    delete service_api_access_response_;
    service_api_access_response_ = service_api_access_response;
    if (service_api_access_response) {
        set_has_service_api_access_response();
    } else {
        clear_has_service_api_access_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.service_api_access_response)
}

// optional .enterprise_management.DeviceStateRetrievalResponse device_state_retrieval_response = 11;
bool DeviceManagementResponse::has_device_state_retrieval_response() const
{
    return (_has_bits_[0] & 0x00000400u) != 0;
}
void DeviceManagementResponse::set_has_device_state_retrieval_response()
{
    _has_bits_[0] |= 0x00000400u;
}
void DeviceManagementResponse::clear_has_device_state_retrieval_response()
{
    _has_bits_[0] &= ~0x00000400u;
}
void DeviceManagementResponse::clear_device_state_retrieval_response()
{
    if (device_state_retrieval_response_ != NULL)
        device_state_retrieval_response_->::enterprise_management::DeviceStateRetrievalResponse::Clear();
    clear_has_device_state_retrieval_response();
}
const ::enterprise_management::DeviceStateRetrievalResponse& DeviceManagementResponse::device_state_retrieval_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_state_retrieval_response_ != NULL ? *device_state_retrieval_response_ : *default_instance().device_state_retrieval_response_;
#else
    return device_state_retrieval_response_ != NULL ? *device_state_retrieval_response_ : *default_instance_->device_state_retrieval_response_;
#endif
}
::enterprise_management::DeviceStateRetrievalResponse* DeviceManagementResponse::mutable_device_state_retrieval_response()
{
    set_has_device_state_retrieval_response();
    if (device_state_retrieval_response_ == NULL) {
        device_state_retrieval_response_ = new ::enterprise_management::DeviceStateRetrievalResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
    return device_state_retrieval_response_;
}
::enterprise_management::DeviceStateRetrievalResponse* DeviceManagementResponse::release_device_state_retrieval_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
    clear_has_device_state_retrieval_response();
    ::enterprise_management::DeviceStateRetrievalResponse* temp = device_state_retrieval_response_;
    device_state_retrieval_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_device_state_retrieval_response(::enterprise_management::DeviceStateRetrievalResponse* device_state_retrieval_response)
{
    delete device_state_retrieval_response_;
    device_state_retrieval_response_ = device_state_retrieval_response;
    if (device_state_retrieval_response) {
        set_has_device_state_retrieval_response();
    } else {
        clear_has_device_state_retrieval_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_state_retrieval_response)
}

// optional .enterprise_management.DevicePairingResponse device_pairing_response = 12;
bool DeviceManagementResponse::has_device_pairing_response() const
{
    return (_has_bits_[0] & 0x00000800u) != 0;
}
void DeviceManagementResponse::set_has_device_pairing_response()
{
    _has_bits_[0] |= 0x00000800u;
}
void DeviceManagementResponse::clear_has_device_pairing_response()
{
    _has_bits_[0] &= ~0x00000800u;
}
void DeviceManagementResponse::clear_device_pairing_response()
{
    if (device_pairing_response_ != NULL)
        device_pairing_response_->::enterprise_management::DevicePairingResponse::Clear();
    clear_has_device_pairing_response();
}
const ::enterprise_management::DevicePairingResponse& DeviceManagementResponse::device_pairing_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_pairing_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_pairing_response_ != NULL ? *device_pairing_response_ : *default_instance().device_pairing_response_;
#else
    return device_pairing_response_ != NULL ? *device_pairing_response_ : *default_instance_->device_pairing_response_;
#endif
}
::enterprise_management::DevicePairingResponse* DeviceManagementResponse::mutable_device_pairing_response()
{
    set_has_device_pairing_response();
    if (device_pairing_response_ == NULL) {
        device_pairing_response_ = new ::enterprise_management::DevicePairingResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_pairing_response)
    return device_pairing_response_;
}
::enterprise_management::DevicePairingResponse* DeviceManagementResponse::release_device_pairing_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_pairing_response)
    clear_has_device_pairing_response();
    ::enterprise_management::DevicePairingResponse* temp = device_pairing_response_;
    device_pairing_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_device_pairing_response(::enterprise_management::DevicePairingResponse* device_pairing_response)
{
    delete device_pairing_response_;
    device_pairing_response_ = device_pairing_response;
    if (device_pairing_response) {
        set_has_device_pairing_response();
    } else {
        clear_has_device_pairing_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_pairing_response)
}

// optional .enterprise_management.CheckDevicePairingResponse check_device_pairing_response = 13;
bool DeviceManagementResponse::has_check_device_pairing_response() const
{
    return (_has_bits_[0] & 0x00001000u) != 0;
}
void DeviceManagementResponse::set_has_check_device_pairing_response()
{
    _has_bits_[0] |= 0x00001000u;
}
void DeviceManagementResponse::clear_has_check_device_pairing_response()
{
    _has_bits_[0] &= ~0x00001000u;
}
void DeviceManagementResponse::clear_check_device_pairing_response()
{
    if (check_device_pairing_response_ != NULL)
        check_device_pairing_response_->::enterprise_management::CheckDevicePairingResponse::Clear();
    clear_has_check_device_pairing_response();
}
const ::enterprise_management::CheckDevicePairingResponse& DeviceManagementResponse::check_device_pairing_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return check_device_pairing_response_ != NULL ? *check_device_pairing_response_ : *default_instance().check_device_pairing_response_;
#else
    return check_device_pairing_response_ != NULL ? *check_device_pairing_response_ : *default_instance_->check_device_pairing_response_;
#endif
}
::enterprise_management::CheckDevicePairingResponse* DeviceManagementResponse::mutable_check_device_pairing_response()
{
    set_has_check_device_pairing_response();
    if (check_device_pairing_response_ == NULL) {
        check_device_pairing_response_ = new ::enterprise_management::CheckDevicePairingResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
    return check_device_pairing_response_;
}
::enterprise_management::CheckDevicePairingResponse* DeviceManagementResponse::release_check_device_pairing_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
    clear_has_check_device_pairing_response();
    ::enterprise_management::CheckDevicePairingResponse* temp = check_device_pairing_response_;
    check_device_pairing_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_check_device_pairing_response(::enterprise_management::CheckDevicePairingResponse* check_device_pairing_response)
{
    delete check_device_pairing_response_;
    check_device_pairing_response_ = check_device_pairing_response;
    if (check_device_pairing_response) {
        set_has_check_device_pairing_response();
    } else {
        clear_has_check_device_pairing_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_device_pairing_response)
}

// optional .enterprise_management.DeviceRemoteCommandResponse remote_command_response = 14;
bool DeviceManagementResponse::has_remote_command_response() const
{
    return (_has_bits_[0] & 0x00002000u) != 0;
}
void DeviceManagementResponse::set_has_remote_command_response()
{
    _has_bits_[0] |= 0x00002000u;
}
void DeviceManagementResponse::clear_has_remote_command_response()
{
    _has_bits_[0] &= ~0x00002000u;
}
void DeviceManagementResponse::clear_remote_command_response()
{
    if (remote_command_response_ != NULL)
        remote_command_response_->::enterprise_management::DeviceRemoteCommandResponse::Clear();
    clear_has_remote_command_response();
}
const ::enterprise_management::DeviceRemoteCommandResponse& DeviceManagementResponse::remote_command_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.remote_command_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return remote_command_response_ != NULL ? *remote_command_response_ : *default_instance().remote_command_response_;
#else
    return remote_command_response_ != NULL ? *remote_command_response_ : *default_instance_->remote_command_response_;
#endif
}
::enterprise_management::DeviceRemoteCommandResponse* DeviceManagementResponse::mutable_remote_command_response()
{
    set_has_remote_command_response();
    if (remote_command_response_ == NULL) {
        remote_command_response_ = new ::enterprise_management::DeviceRemoteCommandResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.remote_command_response)
    return remote_command_response_;
}
::enterprise_management::DeviceRemoteCommandResponse* DeviceManagementResponse::release_remote_command_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.remote_command_response)
    clear_has_remote_command_response();
    ::enterprise_management::DeviceRemoteCommandResponse* temp = remote_command_response_;
    remote_command_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_remote_command_response(::enterprise_management::DeviceRemoteCommandResponse* remote_command_response)
{
    delete remote_command_response_;
    remote_command_response_ = remote_command_response;
    if (remote_command_response) {
        set_has_remote_command_response();
    } else {
        clear_has_remote_command_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.remote_command_response)
}

// optional .enterprise_management.DeviceAttributeUpdatePermissionResponse device_attribute_update_permission_response = 15;
bool DeviceManagementResponse::has_device_attribute_update_permission_response() const
{
    return (_has_bits_[0] & 0x00004000u) != 0;
}
void DeviceManagementResponse::set_has_device_attribute_update_permission_response()
{
    _has_bits_[0] |= 0x00004000u;
}
void DeviceManagementResponse::clear_has_device_attribute_update_permission_response()
{
    _has_bits_[0] &= ~0x00004000u;
}
void DeviceManagementResponse::clear_device_attribute_update_permission_response()
{
    if (device_attribute_update_permission_response_ != NULL)
        device_attribute_update_permission_response_->::enterprise_management::DeviceAttributeUpdatePermissionResponse::Clear();
    clear_has_device_attribute_update_permission_response();
}
const ::enterprise_management::DeviceAttributeUpdatePermissionResponse& DeviceManagementResponse::device_attribute_update_permission_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_attribute_update_permission_response_ != NULL ? *device_attribute_update_permission_response_ : *default_instance().device_attribute_update_permission_response_;
#else
    return device_attribute_update_permission_response_ != NULL ? *device_attribute_update_permission_response_ : *default_instance_->device_attribute_update_permission_response_;
#endif
}
::enterprise_management::DeviceAttributeUpdatePermissionResponse* DeviceManagementResponse::mutable_device_attribute_update_permission_response()
{
    set_has_device_attribute_update_permission_response();
    if (device_attribute_update_permission_response_ == NULL) {
        device_attribute_update_permission_response_ = new ::enterprise_management::DeviceAttributeUpdatePermissionResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
    return device_attribute_update_permission_response_;
}
::enterprise_management::DeviceAttributeUpdatePermissionResponse* DeviceManagementResponse::release_device_attribute_update_permission_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
    clear_has_device_attribute_update_permission_response();
    ::enterprise_management::DeviceAttributeUpdatePermissionResponse* temp = device_attribute_update_permission_response_;
    device_attribute_update_permission_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_device_attribute_update_permission_response(::enterprise_management::DeviceAttributeUpdatePermissionResponse* device_attribute_update_permission_response)
{
    delete device_attribute_update_permission_response_;
    device_attribute_update_permission_response_ = device_attribute_update_permission_response;
    if (device_attribute_update_permission_response) {
        set_has_device_attribute_update_permission_response();
    } else {
        clear_has_device_attribute_update_permission_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_attribute_update_permission_response)
}

// optional .enterprise_management.DeviceAttributeUpdateResponse device_attribute_update_response = 16;
bool DeviceManagementResponse::has_device_attribute_update_response() const
{
    return (_has_bits_[0] & 0x00008000u) != 0;
}
void DeviceManagementResponse::set_has_device_attribute_update_response()
{
    _has_bits_[0] |= 0x00008000u;
}
void DeviceManagementResponse::clear_has_device_attribute_update_response()
{
    _has_bits_[0] &= ~0x00008000u;
}
void DeviceManagementResponse::clear_device_attribute_update_response()
{
    if (device_attribute_update_response_ != NULL)
        device_attribute_update_response_->::enterprise_management::DeviceAttributeUpdateResponse::Clear();
    clear_has_device_attribute_update_response();
}
const ::enterprise_management::DeviceAttributeUpdateResponse& DeviceManagementResponse::device_attribute_update_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return device_attribute_update_response_ != NULL ? *device_attribute_update_response_ : *default_instance().device_attribute_update_response_;
#else
    return device_attribute_update_response_ != NULL ? *device_attribute_update_response_ : *default_instance_->device_attribute_update_response_;
#endif
}
::enterprise_management::DeviceAttributeUpdateResponse* DeviceManagementResponse::mutable_device_attribute_update_response()
{
    set_has_device_attribute_update_response();
    if (device_attribute_update_response_ == NULL) {
        device_attribute_update_response_ = new ::enterprise_management::DeviceAttributeUpdateResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
    return device_attribute_update_response_;
}
::enterprise_management::DeviceAttributeUpdateResponse* DeviceManagementResponse::release_device_attribute_update_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
    clear_has_device_attribute_update_response();
    ::enterprise_management::DeviceAttributeUpdateResponse* temp = device_attribute_update_response_;
    device_attribute_update_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_device_attribute_update_response(::enterprise_management::DeviceAttributeUpdateResponse* device_attribute_update_response)
{
    delete device_attribute_update_response_;
    device_attribute_update_response_ = device_attribute_update_response;
    if (device_attribute_update_response) {
        set_has_device_attribute_update_response();
    } else {
        clear_has_device_attribute_update_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.device_attribute_update_response)
}

// optional .enterprise_management.GcmIdUpdateResponse gcm_id_update_response = 17;
bool DeviceManagementResponse::has_gcm_id_update_response() const
{
    return (_has_bits_[0] & 0x00010000u) != 0;
}
void DeviceManagementResponse::set_has_gcm_id_update_response()
{
    _has_bits_[0] |= 0x00010000u;
}
void DeviceManagementResponse::clear_has_gcm_id_update_response()
{
    _has_bits_[0] &= ~0x00010000u;
}
void DeviceManagementResponse::clear_gcm_id_update_response()
{
    if (gcm_id_update_response_ != NULL)
        gcm_id_update_response_->::enterprise_management::GcmIdUpdateResponse::Clear();
    clear_has_gcm_id_update_response();
}
const ::enterprise_management::GcmIdUpdateResponse& DeviceManagementResponse::gcm_id_update_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return gcm_id_update_response_ != NULL ? *gcm_id_update_response_ : *default_instance().gcm_id_update_response_;
#else
    return gcm_id_update_response_ != NULL ? *gcm_id_update_response_ : *default_instance_->gcm_id_update_response_;
#endif
}
::enterprise_management::GcmIdUpdateResponse* DeviceManagementResponse::mutable_gcm_id_update_response()
{
    set_has_gcm_id_update_response();
    if (gcm_id_update_response_ == NULL) {
        gcm_id_update_response_ = new ::enterprise_management::GcmIdUpdateResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
    return gcm_id_update_response_;
}
::enterprise_management::GcmIdUpdateResponse* DeviceManagementResponse::release_gcm_id_update_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
    clear_has_gcm_id_update_response();
    ::enterprise_management::GcmIdUpdateResponse* temp = gcm_id_update_response_;
    gcm_id_update_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_gcm_id_update_response(::enterprise_management::GcmIdUpdateResponse* gcm_id_update_response)
{
    delete gcm_id_update_response_;
    gcm_id_update_response_ = gcm_id_update_response;
    if (gcm_id_update_response) {
        set_has_gcm_id_update_response();
    } else {
        clear_has_gcm_id_update_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.gcm_id_update_response)
}

// optional .enterprise_management.CheckAndroidManagementResponse check_android_management_response = 18;
bool DeviceManagementResponse::has_check_android_management_response() const
{
    return (_has_bits_[0] & 0x00020000u) != 0;
}
void DeviceManagementResponse::set_has_check_android_management_response()
{
    _has_bits_[0] |= 0x00020000u;
}
void DeviceManagementResponse::clear_has_check_android_management_response()
{
    _has_bits_[0] &= ~0x00020000u;
}
void DeviceManagementResponse::clear_check_android_management_response()
{
    if (check_android_management_response_ != NULL)
        check_android_management_response_->::enterprise_management::CheckAndroidManagementResponse::Clear();
    clear_has_check_android_management_response();
}
const ::enterprise_management::CheckAndroidManagementResponse& DeviceManagementResponse::check_android_management_response() const
{
    // @@protoc_insertion_point(field_get:enterprise_management.DeviceManagementResponse.check_android_management_response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    return check_android_management_response_ != NULL ? *check_android_management_response_ : *default_instance().check_android_management_response_;
#else
    return check_android_management_response_ != NULL ? *check_android_management_response_ : *default_instance_->check_android_management_response_;
#endif
}
::enterprise_management::CheckAndroidManagementResponse* DeviceManagementResponse::mutable_check_android_management_response()
{
    set_has_check_android_management_response();
    if (check_android_management_response_ == NULL) {
        check_android_management_response_ = new ::enterprise_management::CheckAndroidManagementResponse;
    }
    // @@protoc_insertion_point(field_mutable:enterprise_management.DeviceManagementResponse.check_android_management_response)
    return check_android_management_response_;
}
::enterprise_management::CheckAndroidManagementResponse* DeviceManagementResponse::release_check_android_management_response()
{
    // @@protoc_insertion_point(field_release:enterprise_management.DeviceManagementResponse.check_android_management_response)
    clear_has_check_android_management_response();
    ::enterprise_management::CheckAndroidManagementResponse* temp = check_android_management_response_;
    check_android_management_response_ = NULL;
    return temp;
}
void DeviceManagementResponse::set_allocated_check_android_management_response(::enterprise_management::CheckAndroidManagementResponse* check_android_management_response)
{
    delete check_android_management_response_;
    check_android_management_response_ = check_android_management_response;
    if (check_android_management_response) {
        set_has_check_android_management_response();
    } else {
        clear_has_check_android_management_response();
    }
    // @@protoc_insertion_point(field_set_allocated:enterprise_management.DeviceManagementResponse.check_android_management_response)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace enterprise_management

// @@protoc_insertion_point(global_scope)
