// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/policy/PolicyConverter

#ifndef org_chromium_policy_PolicyConverter_JNI
#define org_chromium_policy_PolicyConverter_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPolicyConverterClassPath[] = "org/chromium/policy/PolicyConverter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PolicyConverter_clazz __attribute__((unused)) = 0;
#define PolicyConverter_clazz(env) base::android::LazyGetClass(env, kPolicyConverterClassPath, &g_PolicyConverter_clazz)

} // namespace

namespace policy {
namespace android {

    // Step 2: method stubs.
    JNI_GENERATOR_EXPORT void
    Java_org_chromium_policy_PolicyConverter_nativeSetPolicyBoolean(JNIEnv* env,
        jobject jcaller,
        jlong nativePolicyConverter,
        jstring policyKey,
        jboolean value)
    {
        PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
        CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyBoolean");
        return native->SetPolicyBoolean(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, policyKey), value);
    }

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_policy_PolicyConverter_nativeSetPolicyInteger(JNIEnv* env,
        jobject jcaller,
        jlong nativePolicyConverter,
        jstring policyKey,
        jint value)
    {
        PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
        CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyInteger");
        return native->SetPolicyInteger(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, policyKey), value);
    }

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_policy_PolicyConverter_nativeSetPolicyString(JNIEnv* env,
        jobject jcaller,
        jlong nativePolicyConverter,
        jstring policyKey,
        jstring value)
    {
        PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
        CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyString");
        return native->SetPolicyString(env, base::android::JavaParamRef<jobject>(env, jcaller), base::android::JavaParamRef<jstring>(env, policyKey),
            base::android::JavaParamRef<jstring>(env, value));
    }

    JNI_GENERATOR_EXPORT void
    Java_org_chromium_policy_PolicyConverter_nativeSetPolicyStringArray(JNIEnv*
                                                                            env,
        jobject jcaller,
        jlong nativePolicyConverter,
        jstring policyKey,
        jobjectArray value)
    {
        PolicyConverter* native = reinterpret_cast<PolicyConverter*>(nativePolicyConverter);
        CHECK_NATIVE_PTR(env, jcaller, native, "SetPolicyStringArray");
        return native->SetPolicyStringArray(env,
            base::android::JavaParamRef<jobject>(env, jcaller),
            base::android::JavaParamRef<jstring>(env, policyKey),
            base::android::JavaParamRef<jobjectArray>(env, value));
    }

    static base::subtle::AtomicWord g_PolicyConverter_create = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_PolicyConverter_create(JNIEnv* env, jlong nativePolicyConverter)
    {
        CHECK_CLAZZ(env, PolicyConverter_clazz(env),
            PolicyConverter_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, PolicyConverter_clazz(env),
            "create",
            "("
            "J"
            ")"
            "Lorg/chromium/policy/PolicyConverter;",
            &g_PolicyConverter_create);

        jobject ret = env->CallStaticObjectMethod(PolicyConverter_clazz(env),
            method_id, nativePolicyConverter);
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_PolicyConverter_onNativeDestroyed = 0;
    static void Java_PolicyConverter_onNativeDestroyed(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
    {
        CHECK_CLAZZ(env, obj.obj(),
            PolicyConverter_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_INSTANCE>(
            env, PolicyConverter_clazz(env),
            "onNativeDestroyed",
            "("
            ")"
            "V",
            &g_PolicyConverter_onNativeDestroyed);

        env->CallVoidMethod(obj.obj(),
            method_id);
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsPolicyConverter[] = {
        { "nativeSetPolicyBoolean",
            "("
            "J"
            "Ljava/lang/String;"
            "Z"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_policy_PolicyConverter_nativeSetPolicyBoolean) },
        { "nativeSetPolicyInteger",
            "("
            "J"
            "Ljava/lang/String;"
            "I"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_policy_PolicyConverter_nativeSetPolicyInteger) },
        { "nativeSetPolicyString",
            "("
            "J"
            "Ljava/lang/String;"
            "Ljava/lang/String;"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_policy_PolicyConverter_nativeSetPolicyString) },
        { "nativeSetPolicyStringArray",
            "("
            "J"
            "Ljava/lang/String;"
            "[Ljava/lang/String;"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_policy_PolicyConverter_nativeSetPolicyStringArray) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsPolicyConverterSize = arraysize(kMethodsPolicyConverter);

        if (env->RegisterNatives(PolicyConverter_clazz(env),
                kMethodsPolicyConverter,
                kMethodsPolicyConverterSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, PolicyConverter_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace policy

#endif // org_chromium_policy_PolicyConverter_JNI
