// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/policy/CombinedPolicyProvider

#ifndef org_chromium_policy_CombinedPolicyProvider_JNI
#define org_chromium_policy_CombinedPolicyProvider_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kCombinedPolicyProviderClassPath[] = "org/chromium/policy/CombinedPolicyProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_CombinedPolicyProvider_clazz __attribute__((unused))
= 0;
#define CombinedPolicyProvider_clazz(env) base::android::LazyGetClass(env, kCombinedPolicyProviderClassPath, &g_CombinedPolicyProvider_clazz)

} // namespace

namespace policy {
namespace android {

    // Step 2: method stubs.
    JNI_GENERATOR_EXPORT void
    Java_org_chromium_policy_CombinedPolicyProvider_nativeFlushPolicies(JNIEnv*
                                                                            env,
        jobject jcaller,
        jlong nativeAndroidCombinedPolicyProvider)
    {
        AndroidCombinedPolicyProvider* native = reinterpret_cast<AndroidCombinedPolicyProvider*>(nativeAndroidCombinedPolicyProvider);
        CHECK_NATIVE_PTR(env, jcaller, native, "FlushPolicies");
        return native->FlushPolicies(env, base::android::JavaParamRef<jobject>(env, jcaller));
    }

    static base::subtle::AtomicWord g_CombinedPolicyProvider_linkNative = 0;
    static base::android::ScopedJavaLocalRef<jobject>
    Java_CombinedPolicyProvider_linkNative(JNIEnv* env, jlong nativeCombinedPolicyProvider,
        const base::android::JavaRefOrBare<jobject>& policyConverter)
    {
        CHECK_CLAZZ(env, CombinedPolicyProvider_clazz(env),
            CombinedPolicyProvider_clazz(env), NULL);
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_STATIC>(
            env, CombinedPolicyProvider_clazz(env),
            "linkNative",
            "("
            "J"
            "Lorg/chromium/policy/PolicyConverter;"
            ")"
            "Lorg/chromium/policy/CombinedPolicyProvider;",
            &g_CombinedPolicyProvider_linkNative);

        jobject ret = env->CallStaticObjectMethod(CombinedPolicyProvider_clazz(env),
            method_id, nativeCombinedPolicyProvider, policyConverter.obj());
        jni_generator::CheckException(env);
        return base::android::ScopedJavaLocalRef<jobject>(env, ret);
    }

    static base::subtle::AtomicWord g_CombinedPolicyProvider_refreshPolicies = 0;
    static void Java_CombinedPolicyProvider_refreshPolicies(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
    {
        CHECK_CLAZZ(env, obj.obj(),
            CombinedPolicyProvider_clazz(env));
        jmethodID method_id = base::android::MethodID::LazyGet<
            base::android::MethodID::TYPE_INSTANCE>(
            env, CombinedPolicyProvider_clazz(env),
            "refreshPolicies",
            "("
            ")"
            "V",
            &g_CombinedPolicyProvider_refreshPolicies);

        env->CallVoidMethod(obj.obj(),
            method_id);
        jni_generator::CheckException(env);
    }

    // Step 3: RegisterNatives.

    static const JNINativeMethod kMethodsCombinedPolicyProvider[] = {
        { "nativeFlushPolicies",
            "("
            "J"
            ")"
            "V",
            reinterpret_cast<void*>(Java_org_chromium_policy_CombinedPolicyProvider_nativeFlushPolicies) },
    };

    static bool RegisterNativesImpl(JNIEnv* env)
    {
        if (base::android::IsManualJniRegistrationDisabled())
            return true;

        const int kMethodsCombinedPolicyProviderSize = arraysize(kMethodsCombinedPolicyProvider);

        if (env->RegisterNatives(CombinedPolicyProvider_clazz(env),
                kMethodsCombinedPolicyProvider,
                kMethodsCombinedPolicyProviderSize)
            < 0) {
            jni_generator::HandleRegistrationError(
                env, CombinedPolicyProvider_clazz(env), __FILE__);
            return false;
        }

        return true;
    }

} // namespace android
} // namespace policy

#endif // org_chromium_policy_CombinedPolicyProvider_JNI
