// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#ifndef PROTOBUF_rules_2eproto__INCLUDED
#define PROTOBUF_rules_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
// @@protoc_insertion_point(includes)

namespace subresource_filter {
namespace proto {

    // Internal implementation detail -- do not call these.
    void protobuf_AddDesc_rules_2eproto();
    void protobuf_AssignDesc_rules_2eproto();
    void protobuf_ShutdownFile_rules_2eproto();

    class Comment;
    class CssRule;
    class DomainListItem;
    class FilteringRules;
    class UrlRule;

    enum RuleType {
        RULE_TYPE_UNSPECIFIED = 0,
        RULE_TYPE_COMMENT = 1,
        RULE_TYPE_URL = 2,
        RULE_TYPE_CSS = 3
    };
    bool RuleType_IsValid(int value);
    const RuleType RuleType_MIN = RULE_TYPE_UNSPECIFIED;
    const RuleType RuleType_MAX = RULE_TYPE_CSS;
    const int RuleType_ARRAYSIZE = RuleType_MAX + 1;

    enum UrlPatternType {
        URL_PATTERN_TYPE_UNSPECIFIED = 0,
        URL_PATTERN_TYPE_SUBSTRING = 1,
        URL_PATTERN_TYPE_WILDCARDED = 2,
        URL_PATTERN_TYPE_REGEXP = 3
    };
    bool UrlPatternType_IsValid(int value);
    const UrlPatternType UrlPatternType_MIN = URL_PATTERN_TYPE_UNSPECIFIED;
    const UrlPatternType UrlPatternType_MAX = URL_PATTERN_TYPE_REGEXP;
    const int UrlPatternType_ARRAYSIZE = UrlPatternType_MAX + 1;

    enum AnchorType {
        ANCHOR_TYPE_UNSPECIFIED = 0,
        ANCHOR_TYPE_NONE = 1,
        ANCHOR_TYPE_BOUNDARY = 2,
        ANCHOR_TYPE_SUBDOMAIN = 3
    };
    bool AnchorType_IsValid(int value);
    const AnchorType AnchorType_MIN = ANCHOR_TYPE_UNSPECIFIED;
    const AnchorType AnchorType_MAX = ANCHOR_TYPE_SUBDOMAIN;
    const int AnchorType_ARRAYSIZE = AnchorType_MAX + 1;

    enum ElementType {
        ELEMENT_TYPE_UNSPECIFIED = 0,
        ELEMENT_TYPE_OTHER = 1,
        ELEMENT_TYPE_SCRIPT = 2,
        ELEMENT_TYPE_IMAGE = 4,
        ELEMENT_TYPE_STYLESHEET = 8,
        ELEMENT_TYPE_OBJECT = 16,
        ELEMENT_TYPE_XMLHTTPREQUEST = 32,
        ELEMENT_TYPE_OBJECT_SUBREQUEST = 64,
        ELEMENT_TYPE_SUBDOCUMENT = 128,
        ELEMENT_TYPE_PING = 256,
        ELEMENT_TYPE_MEDIA = 512,
        ELEMENT_TYPE_FONT = 1024,
        ELEMENT_TYPE_POPUP = 2048,
        ELEMENT_TYPE_MAX = 2048,
        ELEMENT_TYPE_ALL = 4095
    };
    bool ElementType_IsValid(int value);
    const ElementType ElementType_MIN = ELEMENT_TYPE_UNSPECIFIED;
    const ElementType ElementType_MAX = ELEMENT_TYPE_ALL;
    const int ElementType_ARRAYSIZE = ElementType_MAX + 1;

    enum ActivationType {
        ACTIVATION_TYPE_UNSPECIFIED = 0,
        ACTIVATION_TYPE_DOCUMENT = 1,
        ACTIVATION_TYPE_ELEMHIDE = 2,
        ACTIVATION_TYPE_GENERICHIDE = 4,
        ACTIVATION_TYPE_GENERICBLOCK = 8,
        ACTIVATION_TYPE_MAX = 8,
        ACTIVATION_TYPE_ALL = 15
    };
    bool ActivationType_IsValid(int value);
    const ActivationType ActivationType_MIN = ACTIVATION_TYPE_UNSPECIFIED;
    const ActivationType ActivationType_MAX = ACTIVATION_TYPE_ALL;
    const int ActivationType_ARRAYSIZE = ActivationType_MAX + 1;

    enum RuleSemantics {
        RULE_SEMANTICS_UNSPECIFIED = 0,
        RULE_SEMANTICS_BLACKLIST = 1,
        RULE_SEMANTICS_WHITELIST = 2
    };
    bool RuleSemantics_IsValid(int value);
    const RuleSemantics RuleSemantics_MIN = RULE_SEMANTICS_UNSPECIFIED;
    const RuleSemantics RuleSemantics_MAX = RULE_SEMANTICS_WHITELIST;
    const int RuleSemantics_ARRAYSIZE = RuleSemantics_MAX + 1;

    enum SourceType {
        SOURCE_TYPE_UNSPECIFIED = 0,
        SOURCE_TYPE_ANY = 1,
        SOURCE_TYPE_THIRD_PARTY = 2,
        SOURCE_TYPE_FIRST_PARTY = 3
    };
    bool SourceType_IsValid(int value);
    const SourceType SourceType_MIN = SOURCE_TYPE_UNSPECIFIED;
    const SourceType SourceType_MAX = SOURCE_TYPE_FIRST_PARTY;
    const int SourceType_ARRAYSIZE = SourceType_MAX + 1;

    // ===================================================================

    class DomainListItem : public ::google::protobuf::MessageLite {
    public:
        DomainListItem();
        virtual ~DomainListItem();

        DomainListItem(const DomainListItem& from);

        inline DomainListItem& operator=(const DomainListItem& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const DomainListItem& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const DomainListItem* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(DomainListItem* other);

        // implements Message ----------------------------------------------

        inline DomainListItem* New() const { return New(NULL); }

        DomainListItem* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const DomainListItem& from);
        void MergeFrom(const DomainListItem& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(DomainListItem* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional string domain = 1;
        bool has_domain() const;
        void clear_domain();
        static const int kDomainFieldNumber = 1;
        const ::std::string& domain() const;
        void set_domain(const ::std::string& value);
        void set_domain(const char* value);
        void set_domain(const char* value, size_t size);
        ::std::string* mutable_domain();
        ::std::string* release_domain();
        void set_allocated_domain(::std::string* domain);

        // optional bool exclude = 2;
        bool has_exclude() const;
        void clear_exclude();
        static const int kExcludeFieldNumber = 2;
        bool exclude() const;
        void set_exclude(bool value);

        // @@protoc_insertion_point(class_scope:subresource_filter.proto.DomainListItem)
    private:
        inline void set_has_domain();
        inline void clear_has_domain();
        inline void set_has_exclude();
        inline void clear_has_exclude();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::google::protobuf::internal::ArenaStringPtr domain_;
        bool exclude_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void protobuf_AddDesc_rules_2eproto_impl();
#else
        friend void protobuf_AddDesc_rules_2eproto();
#endif
        friend void protobuf_AssignDesc_rules_2eproto();
        friend void protobuf_ShutdownFile_rules_2eproto();

        void InitAsDefaultInstance();
        static DomainListItem* default_instance_;
    };
    // -------------------------------------------------------------------

    class UrlRule : public ::google::protobuf::MessageLite {
    public:
        UrlRule();
        virtual ~UrlRule();

        UrlRule(const UrlRule& from);

        inline UrlRule& operator=(const UrlRule& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const UrlRule& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const UrlRule* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(UrlRule* other);

        // implements Message ----------------------------------------------

        inline UrlRule* New() const { return New(NULL); }

        UrlRule* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const UrlRule& from);
        void MergeFrom(const UrlRule& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(UrlRule* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional .subresource_filter.proto.RuleSemantics semantics = 1;
        bool has_semantics() const;
        void clear_semantics();
        static const int kSemanticsFieldNumber = 1;
        ::subresource_filter::proto::RuleSemantics semantics() const;
        void set_semantics(::subresource_filter::proto::RuleSemantics value);

        // optional .subresource_filter.proto.SourceType source_type = 2;
        bool has_source_type() const;
        void clear_source_type();
        static const int kSourceTypeFieldNumber = 2;
        ::subresource_filter::proto::SourceType source_type() const;
        void set_source_type(::subresource_filter::proto::SourceType value);

        // optional int32 element_types = 3;
        bool has_element_types() const;
        void clear_element_types();
        static const int kElementTypesFieldNumber = 3;
        ::google::protobuf::int32 element_types() const;
        void set_element_types(::google::protobuf::int32 value);

        // optional int32 activation_types = 4;
        bool has_activation_types() const;
        void clear_activation_types();
        static const int kActivationTypesFieldNumber = 4;
        ::google::protobuf::int32 activation_types() const;
        void set_activation_types(::google::protobuf::int32 value);

        // repeated .subresource_filter.proto.DomainListItem domains = 5;
        int domains_size() const;
        void clear_domains();
        static const int kDomainsFieldNumber = 5;
        const ::subresource_filter::proto::DomainListItem& domains(int index) const;
        ::subresource_filter::proto::DomainListItem* mutable_domains(int index);
        ::subresource_filter::proto::DomainListItem* add_domains();
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>*
        mutable_domains();
        const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>&
        domains() const;

        // optional .subresource_filter.proto.UrlPatternType url_pattern_type = 6;
        bool has_url_pattern_type() const;
        void clear_url_pattern_type();
        static const int kUrlPatternTypeFieldNumber = 6;
        ::subresource_filter::proto::UrlPatternType url_pattern_type() const;
        void set_url_pattern_type(::subresource_filter::proto::UrlPatternType value);

        // optional .subresource_filter.proto.AnchorType anchor_left = 7;
        bool has_anchor_left() const;
        void clear_anchor_left();
        static const int kAnchorLeftFieldNumber = 7;
        ::subresource_filter::proto::AnchorType anchor_left() const;
        void set_anchor_left(::subresource_filter::proto::AnchorType value);

        // optional .subresource_filter.proto.AnchorType anchor_right = 8;
        bool has_anchor_right() const;
        void clear_anchor_right();
        static const int kAnchorRightFieldNumber = 8;
        ::subresource_filter::proto::AnchorType anchor_right() const;
        void set_anchor_right(::subresource_filter::proto::AnchorType value);

        // optional bool match_case = 9;
        bool has_match_case() const;
        void clear_match_case();
        static const int kMatchCaseFieldNumber = 9;
        bool match_case() const;
        void set_match_case(bool value);

        // optional string url_pattern = 10;
        bool has_url_pattern() const;
        void clear_url_pattern();
        static const int kUrlPatternFieldNumber = 10;
        const ::std::string& url_pattern() const;
        void set_url_pattern(const ::std::string& value);
        void set_url_pattern(const char* value);
        void set_url_pattern(const char* value, size_t size);
        ::std::string* mutable_url_pattern();
        ::std::string* release_url_pattern();
        void set_allocated_url_pattern(::std::string* url_pattern);

        // @@protoc_insertion_point(class_scope:subresource_filter.proto.UrlRule)
    private:
        inline void set_has_semantics();
        inline void clear_has_semantics();
        inline void set_has_source_type();
        inline void clear_has_source_type();
        inline void set_has_element_types();
        inline void clear_has_element_types();
        inline void set_has_activation_types();
        inline void clear_has_activation_types();
        inline void set_has_url_pattern_type();
        inline void clear_has_url_pattern_type();
        inline void set_has_anchor_left();
        inline void clear_has_anchor_left();
        inline void set_has_anchor_right();
        inline void clear_has_anchor_right();
        inline void set_has_match_case();
        inline void clear_has_match_case();
        inline void set_has_url_pattern();
        inline void clear_has_url_pattern();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        int semantics_;
        int source_type_;
        ::google::protobuf::int32 element_types_;
        ::google::protobuf::int32 activation_types_;
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem> domains_;
        int url_pattern_type_;
        int anchor_left_;
        int anchor_right_;
        bool match_case_;
        ::google::protobuf::internal::ArenaStringPtr url_pattern_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void protobuf_AddDesc_rules_2eproto_impl();
#else
        friend void protobuf_AddDesc_rules_2eproto();
#endif
        friend void protobuf_AssignDesc_rules_2eproto();
        friend void protobuf_ShutdownFile_rules_2eproto();

        void InitAsDefaultInstance();
        static UrlRule* default_instance_;
    };
    // -------------------------------------------------------------------

    class CssRule : public ::google::protobuf::MessageLite {
    public:
        CssRule();
        virtual ~CssRule();

        CssRule(const CssRule& from);

        inline CssRule& operator=(const CssRule& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const CssRule& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const CssRule* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(CssRule* other);

        // implements Message ----------------------------------------------

        inline CssRule* New() const { return New(NULL); }

        CssRule* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const CssRule& from);
        void MergeFrom(const CssRule& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(CssRule* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional .subresource_filter.proto.RuleSemantics semantics = 1;
        bool has_semantics() const;
        void clear_semantics();
        static const int kSemanticsFieldNumber = 1;
        ::subresource_filter::proto::RuleSemantics semantics() const;
        void set_semantics(::subresource_filter::proto::RuleSemantics value);

        // repeated .subresource_filter.proto.DomainListItem domains = 2;
        int domains_size() const;
        void clear_domains();
        static const int kDomainsFieldNumber = 2;
        const ::subresource_filter::proto::DomainListItem& domains(int index) const;
        ::subresource_filter::proto::DomainListItem* mutable_domains(int index);
        ::subresource_filter::proto::DomainListItem* add_domains();
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>*
        mutable_domains();
        const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>&
        domains() const;

        // optional string css_selector = 3;
        bool has_css_selector() const;
        void clear_css_selector();
        static const int kCssSelectorFieldNumber = 3;
        const ::std::string& css_selector() const;
        void set_css_selector(const ::std::string& value);
        void set_css_selector(const char* value);
        void set_css_selector(const char* value, size_t size);
        ::std::string* mutable_css_selector();
        ::std::string* release_css_selector();
        void set_allocated_css_selector(::std::string* css_selector);

        // @@protoc_insertion_point(class_scope:subresource_filter.proto.CssRule)
    private:
        inline void set_has_semantics();
        inline void clear_has_semantics();
        inline void set_has_css_selector();
        inline void clear_has_css_selector();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem> domains_;
        ::google::protobuf::internal::ArenaStringPtr css_selector_;
        int semantics_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void protobuf_AddDesc_rules_2eproto_impl();
#else
        friend void protobuf_AddDesc_rules_2eproto();
#endif
        friend void protobuf_AssignDesc_rules_2eproto();
        friend void protobuf_ShutdownFile_rules_2eproto();

        void InitAsDefaultInstance();
        static CssRule* default_instance_;
    };
    // -------------------------------------------------------------------

    class Comment : public ::google::protobuf::MessageLite {
    public:
        Comment();
        virtual ~Comment();

        Comment(const Comment& from);

        inline Comment& operator=(const Comment& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const Comment& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const Comment* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(Comment* other);

        // implements Message ----------------------------------------------

        inline Comment* New() const { return New(NULL); }

        Comment* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const Comment& from);
        void MergeFrom(const Comment& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(Comment* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional string text = 1;
        bool has_text() const;
        void clear_text();
        static const int kTextFieldNumber = 1;
        const ::std::string& text() const;
        void set_text(const ::std::string& value);
        void set_text(const char* value);
        void set_text(const char* value, size_t size);
        ::std::string* mutable_text();
        ::std::string* release_text();
        void set_allocated_text(::std::string* text);

        // optional string key = 2;
        bool has_key() const;
        void clear_key();
        static const int kKeyFieldNumber = 2;
        const ::std::string& key() const;
        void set_key(const ::std::string& value);
        void set_key(const char* value);
        void set_key(const char* value, size_t size);
        ::std::string* mutable_key();
        ::std::string* release_key();
        void set_allocated_key(::std::string* key);

        // optional string value = 3;
        bool has_value() const;
        void clear_value();
        static const int kValueFieldNumber = 3;
        const ::std::string& value() const;
        void set_value(const ::std::string& value);
        void set_value(const char* value);
        void set_value(const char* value, size_t size);
        ::std::string* mutable_value();
        ::std::string* release_value();
        void set_allocated_value(::std::string* value);

        // @@protoc_insertion_point(class_scope:subresource_filter.proto.Comment)
    private:
        inline void set_has_text();
        inline void clear_has_text();
        inline void set_has_key();
        inline void clear_has_key();
        inline void set_has_value();
        inline void clear_has_value();

        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::google::protobuf::internal::ArenaStringPtr text_;
        ::google::protobuf::internal::ArenaStringPtr key_;
        ::google::protobuf::internal::ArenaStringPtr value_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void protobuf_AddDesc_rules_2eproto_impl();
#else
        friend void protobuf_AddDesc_rules_2eproto();
#endif
        friend void protobuf_AssignDesc_rules_2eproto();
        friend void protobuf_ShutdownFile_rules_2eproto();

        void InitAsDefaultInstance();
        static Comment* default_instance_;
    };
    // -------------------------------------------------------------------

    class FilteringRules : public ::google::protobuf::MessageLite {
    public:
        FilteringRules();
        virtual ~FilteringRules();

        FilteringRules(const FilteringRules& from);

        inline FilteringRules& operator=(const FilteringRules& from)
        {
            CopyFrom(from);
            return *this;
        }

        inline const ::std::string& unknown_fields() const
        {
            return _unknown_fields_.GetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        inline ::std::string* mutable_unknown_fields()
        {
            return _unknown_fields_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }

        static const FilteringRules& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        // Returns the internal default instance pointer. This function can
        // return NULL thus should not be used by the user. This is intended
        // for Protobuf internal code. Please use default_instance() declared
        // above instead.
        static inline const FilteringRules* internal_default_instance()
        {
            return default_instance_;
        }
#endif

        GOOGLE_ATTRIBUTE_NOINLINE void Swap(FilteringRules* other);

        // implements Message ----------------------------------------------

        inline FilteringRules* New() const { return New(NULL); }

        FilteringRules* New(::google::protobuf::Arena* arena) const;
        void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
        void CopyFrom(const FilteringRules& from);
        void MergeFrom(const FilteringRules& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        void DiscardUnknownFields();
        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(FilteringRules* other);

    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const
        {
            return _arena_ptr_;
        }
        inline ::google::protobuf::Arena* MaybeArenaPtr() const
        {
            return _arena_ptr_;
        }

    public:
        ::std::string GetTypeName() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // repeated .subresource_filter.proto.UrlRule url_rules = 1;
        int url_rules_size() const;
        void clear_url_rules();
        static const int kUrlRulesFieldNumber = 1;
        const ::subresource_filter::proto::UrlRule& url_rules(int index) const;
        ::subresource_filter::proto::UrlRule* mutable_url_rules(int index);
        ::subresource_filter::proto::UrlRule* add_url_rules();
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule>*
        mutable_url_rules();
        const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule>&
        url_rules() const;

        // repeated .subresource_filter.proto.CssRule css_rules = 2;
        int css_rules_size() const;
        void clear_css_rules();
        static const int kCssRulesFieldNumber = 2;
        const ::subresource_filter::proto::CssRule& css_rules(int index) const;
        ::subresource_filter::proto::CssRule* mutable_css_rules(int index);
        ::subresource_filter::proto::CssRule* add_css_rules();
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule>*
        mutable_css_rules();
        const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule>&
        css_rules() const;

        // @@protoc_insertion_point(class_scope:subresource_filter.proto.FilteringRules)
    private:
        ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
        ::google::protobuf::Arena* _arena_ptr_;

        ::google::protobuf::uint32 _has_bits_[1];
        mutable int _cached_size_;
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule> url_rules_;
        ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule> css_rules_;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        friend void protobuf_AddDesc_rules_2eproto_impl();
#else
        friend void protobuf_AddDesc_rules_2eproto();
#endif
        friend void protobuf_AssignDesc_rules_2eproto();
        friend void protobuf_ShutdownFile_rules_2eproto();

        void InitAsDefaultInstance();
        static FilteringRules* default_instance_;
    };
    // ===================================================================

    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // DomainListItem

    // optional string domain = 1;
    inline bool DomainListItem::has_domain() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void DomainListItem::set_has_domain()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void DomainListItem::clear_has_domain()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void DomainListItem::clear_domain()
    {
        domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_domain();
    }
    inline const ::std::string& DomainListItem::domain() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.DomainListItem.domain)
        return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void DomainListItem::set_domain(const ::std::string& value)
    {
        set_has_domain();
        domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.DomainListItem.domain)
    }
    inline void DomainListItem::set_domain(const char* value)
    {
        set_has_domain();
        domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.DomainListItem.domain)
    }
    inline void DomainListItem::set_domain(const char* value, size_t size)
    {
        set_has_domain();
        domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.DomainListItem.domain)
    }
    inline ::std::string* DomainListItem::mutable_domain()
    {
        set_has_domain();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.DomainListItem.domain)
        return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* DomainListItem::release_domain()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.DomainListItem.domain)
        clear_has_domain();
        return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void DomainListItem::set_allocated_domain(::std::string* domain)
    {
        if (domain != NULL) {
            set_has_domain();
        } else {
            clear_has_domain();
        }
        domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.DomainListItem.domain)
    }

    // optional bool exclude = 2;
    inline bool DomainListItem::has_exclude() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void DomainListItem::set_has_exclude()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void DomainListItem::clear_has_exclude()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void DomainListItem::clear_exclude()
    {
        exclude_ = false;
        clear_has_exclude();
    }
    inline bool DomainListItem::exclude() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.DomainListItem.exclude)
        return exclude_;
    }
    inline void DomainListItem::set_exclude(bool value)
    {
        set_has_exclude();
        exclude_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.DomainListItem.exclude)
    }

    // -------------------------------------------------------------------

    // UrlRule

    // optional .subresource_filter.proto.RuleSemantics semantics = 1;
    inline bool UrlRule::has_semantics() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void UrlRule::set_has_semantics()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void UrlRule::clear_has_semantics()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void UrlRule::clear_semantics()
    {
        semantics_ = 0;
        clear_has_semantics();
    }
    inline ::subresource_filter::proto::RuleSemantics UrlRule::semantics() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.semantics)
        return static_cast<::subresource_filter::proto::RuleSemantics>(semantics_);
    }
    inline void UrlRule::set_semantics(::subresource_filter::proto::RuleSemantics value)
    {
        assert(::subresource_filter::proto::RuleSemantics_IsValid(value));
        set_has_semantics();
        semantics_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.semantics)
    }

    // optional .subresource_filter.proto.SourceType source_type = 2;
    inline bool UrlRule::has_source_type() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void UrlRule::set_has_source_type()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void UrlRule::clear_has_source_type()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void UrlRule::clear_source_type()
    {
        source_type_ = 0;
        clear_has_source_type();
    }
    inline ::subresource_filter::proto::SourceType UrlRule::source_type() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.source_type)
        return static_cast<::subresource_filter::proto::SourceType>(source_type_);
    }
    inline void UrlRule::set_source_type(::subresource_filter::proto::SourceType value)
    {
        assert(::subresource_filter::proto::SourceType_IsValid(value));
        set_has_source_type();
        source_type_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.source_type)
    }

    // optional int32 element_types = 3;
    inline bool UrlRule::has_element_types() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void UrlRule::set_has_element_types()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void UrlRule::clear_has_element_types()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void UrlRule::clear_element_types()
    {
        element_types_ = 0;
        clear_has_element_types();
    }
    inline ::google::protobuf::int32 UrlRule::element_types() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.element_types)
        return element_types_;
    }
    inline void UrlRule::set_element_types(::google::protobuf::int32 value)
    {
        set_has_element_types();
        element_types_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.element_types)
    }

    // optional int32 activation_types = 4;
    inline bool UrlRule::has_activation_types() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    inline void UrlRule::set_has_activation_types()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    inline void UrlRule::clear_has_activation_types()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    inline void UrlRule::clear_activation_types()
    {
        activation_types_ = 0;
        clear_has_activation_types();
    }
    inline ::google::protobuf::int32 UrlRule::activation_types() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.activation_types)
        return activation_types_;
    }
    inline void UrlRule::set_activation_types(::google::protobuf::int32 value)
    {
        set_has_activation_types();
        activation_types_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.activation_types)
    }

    // repeated .subresource_filter.proto.DomainListItem domains = 5;
    inline int UrlRule::domains_size() const
    {
        return domains_.size();
    }
    inline void UrlRule::clear_domains()
    {
        domains_.Clear();
    }
    inline const ::subresource_filter::proto::DomainListItem& UrlRule::domains(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.domains)
        return domains_.Get(index);
    }
    inline ::subresource_filter::proto::DomainListItem* UrlRule::mutable_domains(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.UrlRule.domains)
        return domains_.Mutable(index);
    }
    inline ::subresource_filter::proto::DomainListItem* UrlRule::add_domains()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.UrlRule.domains)
        return domains_.Add();
    }
    inline ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>*
    UrlRule::mutable_domains()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.UrlRule.domains)
        return &domains_;
    }
    inline const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>&
    UrlRule::domains() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.UrlRule.domains)
        return domains_;
    }

    // optional .subresource_filter.proto.UrlPatternType url_pattern_type = 6;
    inline bool UrlRule::has_url_pattern_type() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    inline void UrlRule::set_has_url_pattern_type()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    inline void UrlRule::clear_has_url_pattern_type()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    inline void UrlRule::clear_url_pattern_type()
    {
        url_pattern_type_ = 0;
        clear_has_url_pattern_type();
    }
    inline ::subresource_filter::proto::UrlPatternType UrlRule::url_pattern_type() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.url_pattern_type)
        return static_cast<::subresource_filter::proto::UrlPatternType>(url_pattern_type_);
    }
    inline void UrlRule::set_url_pattern_type(::subresource_filter::proto::UrlPatternType value)
    {
        assert(::subresource_filter::proto::UrlPatternType_IsValid(value));
        set_has_url_pattern_type();
        url_pattern_type_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.url_pattern_type)
    }

    // optional .subresource_filter.proto.AnchorType anchor_left = 7;
    inline bool UrlRule::has_anchor_left() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    inline void UrlRule::set_has_anchor_left()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    inline void UrlRule::clear_has_anchor_left()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    inline void UrlRule::clear_anchor_left()
    {
        anchor_left_ = 0;
        clear_has_anchor_left();
    }
    inline ::subresource_filter::proto::AnchorType UrlRule::anchor_left() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.anchor_left)
        return static_cast<::subresource_filter::proto::AnchorType>(anchor_left_);
    }
    inline void UrlRule::set_anchor_left(::subresource_filter::proto::AnchorType value)
    {
        assert(::subresource_filter::proto::AnchorType_IsValid(value));
        set_has_anchor_left();
        anchor_left_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.anchor_left)
    }

    // optional .subresource_filter.proto.AnchorType anchor_right = 8;
    inline bool UrlRule::has_anchor_right() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    inline void UrlRule::set_has_anchor_right()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    inline void UrlRule::clear_has_anchor_right()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    inline void UrlRule::clear_anchor_right()
    {
        anchor_right_ = 0;
        clear_has_anchor_right();
    }
    inline ::subresource_filter::proto::AnchorType UrlRule::anchor_right() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.anchor_right)
        return static_cast<::subresource_filter::proto::AnchorType>(anchor_right_);
    }
    inline void UrlRule::set_anchor_right(::subresource_filter::proto::AnchorType value)
    {
        assert(::subresource_filter::proto::AnchorType_IsValid(value));
        set_has_anchor_right();
        anchor_right_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.anchor_right)
    }

    // optional bool match_case = 9;
    inline bool UrlRule::has_match_case() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    inline void UrlRule::set_has_match_case()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    inline void UrlRule::clear_has_match_case()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    inline void UrlRule::clear_match_case()
    {
        match_case_ = false;
        clear_has_match_case();
    }
    inline bool UrlRule::match_case() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.match_case)
        return match_case_;
    }
    inline void UrlRule::set_match_case(bool value)
    {
        set_has_match_case();
        match_case_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.match_case)
    }

    // optional string url_pattern = 10;
    inline bool UrlRule::has_url_pattern() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    inline void UrlRule::set_has_url_pattern()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    inline void UrlRule::clear_has_url_pattern()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    inline void UrlRule::clear_url_pattern()
    {
        url_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_url_pattern();
    }
    inline const ::std::string& UrlRule::url_pattern() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.url_pattern)
        return url_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void UrlRule::set_url_pattern(const ::std::string& value)
    {
        set_has_url_pattern();
        url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.url_pattern)
    }
    inline void UrlRule::set_url_pattern(const char* value)
    {
        set_has_url_pattern();
        url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.UrlRule.url_pattern)
    }
    inline void UrlRule::set_url_pattern(const char* value, size_t size)
    {
        set_has_url_pattern();
        url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.UrlRule.url_pattern)
    }
    inline ::std::string* UrlRule::mutable_url_pattern()
    {
        set_has_url_pattern();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.UrlRule.url_pattern)
        return url_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* UrlRule::release_url_pattern()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.UrlRule.url_pattern)
        clear_has_url_pattern();
        return url_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void UrlRule::set_allocated_url_pattern(::std::string* url_pattern)
    {
        if (url_pattern != NULL) {
            set_has_url_pattern();
        } else {
            clear_has_url_pattern();
        }
        url_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_pattern);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.UrlRule.url_pattern)
    }

    // -------------------------------------------------------------------

    // CssRule

    // optional .subresource_filter.proto.RuleSemantics semantics = 1;
    inline bool CssRule::has_semantics() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void CssRule::set_has_semantics()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void CssRule::clear_has_semantics()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void CssRule::clear_semantics()
    {
        semantics_ = 0;
        clear_has_semantics();
    }
    inline ::subresource_filter::proto::RuleSemantics CssRule::semantics() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.CssRule.semantics)
        return static_cast<::subresource_filter::proto::RuleSemantics>(semantics_);
    }
    inline void CssRule::set_semantics(::subresource_filter::proto::RuleSemantics value)
    {
        assert(::subresource_filter::proto::RuleSemantics_IsValid(value));
        set_has_semantics();
        semantics_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.CssRule.semantics)
    }

    // repeated .subresource_filter.proto.DomainListItem domains = 2;
    inline int CssRule::domains_size() const
    {
        return domains_.size();
    }
    inline void CssRule::clear_domains()
    {
        domains_.Clear();
    }
    inline const ::subresource_filter::proto::DomainListItem& CssRule::domains(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.CssRule.domains)
        return domains_.Get(index);
    }
    inline ::subresource_filter::proto::DomainListItem* CssRule::mutable_domains(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.CssRule.domains)
        return domains_.Mutable(index);
    }
    inline ::subresource_filter::proto::DomainListItem* CssRule::add_domains()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.CssRule.domains)
        return domains_.Add();
    }
    inline ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>*
    CssRule::mutable_domains()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.CssRule.domains)
        return &domains_;
    }
    inline const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>&
    CssRule::domains() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.CssRule.domains)
        return domains_;
    }

    // optional string css_selector = 3;
    inline bool CssRule::has_css_selector() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void CssRule::set_has_css_selector()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void CssRule::clear_has_css_selector()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void CssRule::clear_css_selector()
    {
        css_selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_css_selector();
    }
    inline const ::std::string& CssRule::css_selector() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.CssRule.css_selector)
        return css_selector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void CssRule::set_css_selector(const ::std::string& value)
    {
        set_has_css_selector();
        css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.CssRule.css_selector)
    }
    inline void CssRule::set_css_selector(const char* value)
    {
        set_has_css_selector();
        css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.CssRule.css_selector)
    }
    inline void CssRule::set_css_selector(const char* value, size_t size)
    {
        set_has_css_selector();
        css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.CssRule.css_selector)
    }
    inline ::std::string* CssRule::mutable_css_selector()
    {
        set_has_css_selector();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.CssRule.css_selector)
        return css_selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* CssRule::release_css_selector()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.CssRule.css_selector)
        clear_has_css_selector();
        return css_selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void CssRule::set_allocated_css_selector(::std::string* css_selector)
    {
        if (css_selector != NULL) {
            set_has_css_selector();
        } else {
            clear_has_css_selector();
        }
        css_selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), css_selector);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.CssRule.css_selector)
    }

    // -------------------------------------------------------------------

    // Comment

    // optional string text = 1;
    inline bool Comment::has_text() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Comment::set_has_text()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Comment::clear_has_text()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Comment::clear_text()
    {
        text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_text();
    }
    inline const ::std::string& Comment::text() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.Comment.text)
        return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void Comment::set_text(const ::std::string& value)
    {
        set_has_text();
        text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.Comment.text)
    }
    inline void Comment::set_text(const char* value)
    {
        set_has_text();
        text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.Comment.text)
    }
    inline void Comment::set_text(const char* value, size_t size)
    {
        set_has_text();
        text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.Comment.text)
    }
    inline ::std::string* Comment::mutable_text()
    {
        set_has_text();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.Comment.text)
        return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* Comment::release_text()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.Comment.text)
        clear_has_text();
        return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void Comment::set_allocated_text(::std::string* text)
    {
        if (text != NULL) {
            set_has_text();
        } else {
            clear_has_text();
        }
        text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.Comment.text)
    }

    // optional string key = 2;
    inline bool Comment::has_key() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void Comment::set_has_key()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void Comment::clear_has_key()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void Comment::clear_key()
    {
        key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_key();
    }
    inline const ::std::string& Comment::key() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.Comment.key)
        return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void Comment::set_key(const ::std::string& value)
    {
        set_has_key();
        key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.Comment.key)
    }
    inline void Comment::set_key(const char* value)
    {
        set_has_key();
        key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.Comment.key)
    }
    inline void Comment::set_key(const char* value, size_t size)
    {
        set_has_key();
        key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.Comment.key)
    }
    inline ::std::string* Comment::mutable_key()
    {
        set_has_key();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.Comment.key)
        return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* Comment::release_key()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.Comment.key)
        clear_has_key();
        return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void Comment::set_allocated_key(::std::string* key)
    {
        if (key != NULL) {
            set_has_key();
        } else {
            clear_has_key();
        }
        key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.Comment.key)
    }

    // optional string value = 3;
    inline bool Comment::has_value() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void Comment::set_has_value()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void Comment::clear_has_value()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void Comment::clear_value()
    {
        value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_value();
    }
    inline const ::std::string& Comment::value() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.Comment.value)
        return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void Comment::set_value(const ::std::string& value)
    {
        set_has_value();
        value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.Comment.value)
    }
    inline void Comment::set_value(const char* value)
    {
        set_has_value();
        value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.Comment.value)
    }
    inline void Comment::set_value(const char* value, size_t size)
    {
        set_has_value();
        value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.Comment.value)
    }
    inline ::std::string* Comment::mutable_value()
    {
        set_has_value();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.Comment.value)
        return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* Comment::release_value()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.Comment.value)
        clear_has_value();
        return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void Comment::set_allocated_value(::std::string* value)
    {
        if (value != NULL) {
            set_has_value();
        } else {
            clear_has_value();
        }
        value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.Comment.value)
    }

    // -------------------------------------------------------------------

    // FilteringRules

    // repeated .subresource_filter.proto.UrlRule url_rules = 1;
    inline int FilteringRules::url_rules_size() const
    {
        return url_rules_.size();
    }
    inline void FilteringRules::clear_url_rules()
    {
        url_rules_.Clear();
    }
    inline const ::subresource_filter::proto::UrlRule& FilteringRules::url_rules(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_.Get(index);
    }
    inline ::subresource_filter::proto::UrlRule* FilteringRules::mutable_url_rules(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_.Mutable(index);
    }
    inline ::subresource_filter::proto::UrlRule* FilteringRules::add_url_rules()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_.Add();
    }
    inline ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule>*
    FilteringRules::mutable_url_rules()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.FilteringRules.url_rules)
        return &url_rules_;
    }
    inline const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule>&
    FilteringRules::url_rules() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_;
    }

    // repeated .subresource_filter.proto.CssRule css_rules = 2;
    inline int FilteringRules::css_rules_size() const
    {
        return css_rules_.size();
    }
    inline void FilteringRules::clear_css_rules()
    {
        css_rules_.Clear();
    }
    inline const ::subresource_filter::proto::CssRule& FilteringRules::css_rules(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_.Get(index);
    }
    inline ::subresource_filter::proto::CssRule* FilteringRules::mutable_css_rules(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_.Mutable(index);
    }
    inline ::subresource_filter::proto::CssRule* FilteringRules::add_css_rules()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_.Add();
    }
    inline ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule>*
    FilteringRules::mutable_css_rules()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.FilteringRules.css_rules)
        return &css_rules_;
    }
    inline const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule>&
    FilteringRules::css_rules() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_;
    }

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace subresource_filter

#ifndef SWIG
namespace google {
namespace protobuf {

    template <>
    struct is_proto_enum<::subresource_filter::proto::RuleType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::subresource_filter::proto::UrlPatternType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::subresource_filter::proto::AnchorType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::subresource_filter::proto::ElementType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::subresource_filter::proto::ActivationType> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::subresource_filter::proto::RuleSemantics> : ::google::protobuf::internal::true_type {
    };
    template <>
    struct is_proto_enum<::subresource_filter::proto::SourceType> : ::google::protobuf::internal::true_type {
    };

} // namespace protobuf
} // namespace google
#endif // SWIG

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_rules_2eproto__INCLUDED
