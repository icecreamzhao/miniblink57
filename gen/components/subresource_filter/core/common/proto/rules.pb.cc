// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rules.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace subresource_filter {
namespace proto {

    void protobuf_ShutdownFile_rules_2eproto()
    {
        delete DomainListItem::default_instance_;
        delete UrlRule::default_instance_;
        delete CssRule::default_instance_;
        delete Comment::default_instance_;
        delete FilteringRules::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_rules_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_rules_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        DomainListItem::default_instance_ = new DomainListItem();
        UrlRule::default_instance_ = new UrlRule();
        CssRule::default_instance_ = new CssRule();
        Comment::default_instance_ = new Comment();
        FilteringRules::default_instance_ = new FilteringRules();
        DomainListItem::default_instance_->InitAsDefaultInstance();
        UrlRule::default_instance_->InitAsDefaultInstance();
        CssRule::default_instance_->InitAsDefaultInstance();
        Comment::default_instance_->InitAsDefaultInstance();
        FilteringRules::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rules_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rules_2eproto_once_);
    void protobuf_AddDesc_rules_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rules_2eproto_once_,
            &protobuf_AddDesc_rules_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_rules_2eproto {
        StaticDescriptorInitializer_rules_2eproto()
        {
            protobuf_AddDesc_rules_2eproto();
        }
    } static_descriptor_initializer_rules_2eproto_;
#endif
    bool RuleType_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
            return true;
        default:
            return false;
        }
    }

    bool UrlPatternType_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
            return true;
        default:
            return false;
        }
    }

    bool AnchorType_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
            return true;
        default:
            return false;
        }
    }

    bool ElementType_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 4:
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4095:
            return true;
        default:
            return false;
        }
    }

    bool ActivationType_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 4:
        case 8:
        case 15:
            return true;
        default:
            return false;
        }
    }

    bool RuleSemantics_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
            return true;
        default:
            return false;
        }
    }

    bool SourceType_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
            return true;
        default:
            return false;
        }
    }

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForDomainListItem(
        DomainListItem* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int DomainListItem::kDomainFieldNumber;
    const int DomainListItem::kExcludeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    DomainListItem::DomainListItem()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:subresource_filter.proto.DomainListItem)
    }

    void DomainListItem::InitAsDefaultInstance()
    {
    }

    DomainListItem::DomainListItem(const DomainListItem& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:subresource_filter.proto.DomainListItem)
    }

    void DomainListItem::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        exclude_ = false;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    DomainListItem::~DomainListItem()
    {
        // @@protoc_insertion_point(destructor:subresource_filter.proto.DomainListItem)
        SharedDtor();
    }

    void DomainListItem::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void DomainListItem::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const DomainListItem& DomainListItem::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_rules_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_rules_2eproto();
#endif
        return *default_instance_;
    }

    DomainListItem* DomainListItem::default_instance_ = NULL;

    DomainListItem* DomainListItem::New(::google::protobuf::Arena* arena) const
    {
        DomainListItem* n = new DomainListItem;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void DomainListItem::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:subresource_filter.proto.DomainListItem)
        if (_has_bits_[0 / 32] & 3u) {
            if (has_domain()) {
                domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            exclude_ = false;
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool DomainListItem::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForDomainListItem, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:subresource_filter.proto.DomainListItem)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string domain = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_domain()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_exclude;
                break;
            }

            // optional bool exclude = 2;
            case 2: {
                if (tag == 16) {
                parse_exclude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &exclude_)));
                    set_has_exclude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:subresource_filter.proto.DomainListItem)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:subresource_filter.proto.DomainListItem)
        return false;
#undef DO_
    }

    void DomainListItem::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:subresource_filter.proto.DomainListItem)
        // optional string domain = 1;
        if (has_domain()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->domain(), output);
        }

        // optional bool exclude = 2;
        if (has_exclude()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exclude(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:subresource_filter.proto.DomainListItem)
    }

    int DomainListItem::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:subresource_filter.proto.DomainListItem)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 3u) {
            // optional string domain = 1;
            if (has_domain()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->domain());
            }

            // optional bool exclude = 2;
            if (has_exclude()) {
                total_size += 1 + 1;
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void DomainListItem::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const DomainListItem*>(&from));
    }

    void DomainListItem::MergeFrom(const DomainListItem& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:subresource_filter.proto.DomainListItem)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_domain()) {
                set_has_domain();
                domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
            }
            if (from.has_exclude()) {
                set_exclude(from.exclude());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void DomainListItem::CopyFrom(const DomainListItem& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:subresource_filter.proto.DomainListItem)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool DomainListItem::IsInitialized() const
    {

        return true;
    }

    void DomainListItem::Swap(DomainListItem* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void DomainListItem::InternalSwap(DomainListItem* other)
    {
        domain_.Swap(&other->domain_);
        std::swap(exclude_, other->exclude_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string DomainListItem::GetTypeName() const
    {
        return "subresource_filter.proto.DomainListItem";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // DomainListItem

    // optional string domain = 1;
    bool DomainListItem::has_domain() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void DomainListItem::set_has_domain()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void DomainListItem::clear_has_domain()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void DomainListItem::clear_domain()
    {
        domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_domain();
    }
    const ::std::string& DomainListItem::domain() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.DomainListItem.domain)
        return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void DomainListItem::set_domain(const ::std::string& value)
    {
        set_has_domain();
        domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.DomainListItem.domain)
    }
    void DomainListItem::set_domain(const char* value)
    {
        set_has_domain();
        domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.DomainListItem.domain)
    }
    void DomainListItem::set_domain(const char* value, size_t size)
    {
        set_has_domain();
        domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.DomainListItem.domain)
    }
    ::std::string* DomainListItem::mutable_domain()
    {
        set_has_domain();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.DomainListItem.domain)
        return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* DomainListItem::release_domain()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.DomainListItem.domain)
        clear_has_domain();
        return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void DomainListItem::set_allocated_domain(::std::string* domain)
    {
        if (domain != NULL) {
            set_has_domain();
        } else {
            clear_has_domain();
        }
        domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.DomainListItem.domain)
    }

    // optional bool exclude = 2;
    bool DomainListItem::has_exclude() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void DomainListItem::set_has_exclude()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void DomainListItem::clear_has_exclude()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void DomainListItem::clear_exclude()
    {
        exclude_ = false;
        clear_has_exclude();
    }
    bool DomainListItem::exclude() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.DomainListItem.exclude)
        return exclude_;
    }
    void DomainListItem::set_exclude(bool value)
    {
        set_has_exclude();
        exclude_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.DomainListItem.exclude)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForUrlRule(
        UrlRule* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int UrlRule::kSemanticsFieldNumber;
    const int UrlRule::kSourceTypeFieldNumber;
    const int UrlRule::kElementTypesFieldNumber;
    const int UrlRule::kActivationTypesFieldNumber;
    const int UrlRule::kDomainsFieldNumber;
    const int UrlRule::kUrlPatternTypeFieldNumber;
    const int UrlRule::kAnchorLeftFieldNumber;
    const int UrlRule::kAnchorRightFieldNumber;
    const int UrlRule::kMatchCaseFieldNumber;
    const int UrlRule::kUrlPatternFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    UrlRule::UrlRule()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:subresource_filter.proto.UrlRule)
    }

    void UrlRule::InitAsDefaultInstance()
    {
    }

    UrlRule::UrlRule(const UrlRule& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:subresource_filter.proto.UrlRule)
    }

    void UrlRule::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        semantics_ = 0;
        source_type_ = 0;
        element_types_ = 0;
        activation_types_ = 0;
        url_pattern_type_ = 0;
        anchor_left_ = 0;
        anchor_right_ = 0;
        match_case_ = false;
        url_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    UrlRule::~UrlRule()
    {
        // @@protoc_insertion_point(destructor:subresource_filter.proto.UrlRule)
        SharedDtor();
    }

    void UrlRule::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        url_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void UrlRule::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const UrlRule& UrlRule::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_rules_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_rules_2eproto();
#endif
        return *default_instance_;
    }

    UrlRule* UrlRule::default_instance_ = NULL;

    UrlRule* UrlRule::New(::google::protobuf::Arena* arena) const
    {
        UrlRule* n = new UrlRule;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void UrlRule::Clear()
    {
// @@protoc_insertion_point(message_clear_start:subresource_filter.proto.UrlRule)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                             \
    _Pragma("clang diagnostic push")                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(UrlRule, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<UrlRule*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 239u) {
            ZR_(semantics_, activation_types_);
            ZR_(url_pattern_type_, anchor_right_);
        }
        if (_has_bits_[8 / 32] & 768u) {
            match_case_ = false;
            if (has_url_pattern()) {
                url_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }

#undef ZR_HELPER_
#undef ZR_

        domains_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool UrlRule::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForUrlRule, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:subresource_filter.proto.UrlRule)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .subresource_filter.proto.RuleSemantics semantics = 1;
            case 1: {
                if (tag == 8) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::subresource_filter::proto::RuleSemantics_IsValid(value)) {
                        set_semantics(static_cast<::subresource_filter::proto::RuleSemantics>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(8);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_source_type;
                break;
            }

            // optional .subresource_filter.proto.SourceType source_type = 2;
            case 2: {
                if (tag == 16) {
                parse_source_type:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::subresource_filter::proto::SourceType_IsValid(value)) {
                        set_source_type(static_cast<::subresource_filter::proto::SourceType>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(16);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_element_types;
                break;
            }

            // optional int32 element_types = 3;
            case 3: {
                if (tag == 24) {
                parse_element_types:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &element_types_)));
                    set_has_element_types();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32))
                    goto parse_activation_types;
                break;
            }

            // optional int32 activation_types = 4;
            case 4: {
                if (tag == 32) {
                parse_activation_types:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &activation_types_)));
                    set_has_activation_types();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_domains;
                break;
            }

            // repeated .subresource_filter.proto.DomainListItem domains = 5;
            case 5: {
                if (tag == 42) {
                parse_domains:
                    DO_(input->IncrementRecursionDepth());
                parse_loop_domains:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_domains()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_loop_domains;
                input->UnsafeDecrementRecursionDepth();
                if (input->ExpectTag(48))
                    goto parse_url_pattern_type;
                break;
            }

            // optional .subresource_filter.proto.UrlPatternType url_pattern_type = 6;
            case 6: {
                if (tag == 48) {
                parse_url_pattern_type:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::subresource_filter::proto::UrlPatternType_IsValid(value)) {
                        set_url_pattern_type(static_cast<::subresource_filter::proto::UrlPatternType>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(48);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(56))
                    goto parse_anchor_left;
                break;
            }

            // optional .subresource_filter.proto.AnchorType anchor_left = 7;
            case 7: {
                if (tag == 56) {
                parse_anchor_left:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::subresource_filter::proto::AnchorType_IsValid(value)) {
                        set_anchor_left(static_cast<::subresource_filter::proto::AnchorType>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(56);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(64))
                    goto parse_anchor_right;
                break;
            }

            // optional .subresource_filter.proto.AnchorType anchor_right = 8;
            case 8: {
                if (tag == 64) {
                parse_anchor_right:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::subresource_filter::proto::AnchorType_IsValid(value)) {
                        set_anchor_right(static_cast<::subresource_filter::proto::AnchorType>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(64);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(72))
                    goto parse_match_case;
                break;
            }

            // optional bool match_case = 9;
            case 9: {
                if (tag == 72) {
                parse_match_case:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &match_case_)));
                    set_has_match_case();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(82))
                    goto parse_url_pattern;
                break;
            }

            // optional string url_pattern = 10;
            case 10: {
                if (tag == 82) {
                parse_url_pattern:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_url_pattern()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:subresource_filter.proto.UrlRule)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:subresource_filter.proto.UrlRule)
        return false;
#undef DO_
    }

    void UrlRule::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:subresource_filter.proto.UrlRule)
        // optional .subresource_filter.proto.RuleSemantics semantics = 1;
        if (has_semantics()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->semantics(), output);
        }

        // optional .subresource_filter.proto.SourceType source_type = 2;
        if (has_source_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                2, this->source_type(), output);
        }

        // optional int32 element_types = 3;
        if (has_element_types()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->element_types(), output);
        }

        // optional int32 activation_types = 4;
        if (has_activation_types()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activation_types(), output);
        }

        // repeated .subresource_filter.proto.DomainListItem domains = 5;
        for (unsigned int i = 0, n = this->domains_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, this->domains(i), output);
        }

        // optional .subresource_filter.proto.UrlPatternType url_pattern_type = 6;
        if (has_url_pattern_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                6, this->url_pattern_type(), output);
        }

        // optional .subresource_filter.proto.AnchorType anchor_left = 7;
        if (has_anchor_left()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                7, this->anchor_left(), output);
        }

        // optional .subresource_filter.proto.AnchorType anchor_right = 8;
        if (has_anchor_right()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                8, this->anchor_right(), output);
        }

        // optional bool match_case = 9;
        if (has_match_case()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->match_case(), output);
        }

        // optional string url_pattern = 10;
        if (has_url_pattern()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                10, this->url_pattern(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:subresource_filter.proto.UrlRule)
    }

    int UrlRule::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:subresource_filter.proto.UrlRule)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 239u) {
            // optional .subresource_filter.proto.RuleSemantics semantics = 1;
            if (has_semantics()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->semantics());
            }

            // optional .subresource_filter.proto.SourceType source_type = 2;
            if (has_source_type()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
            }

            // optional int32 element_types = 3;
            if (has_element_types()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->element_types());
            }

            // optional int32 activation_types = 4;
            if (has_activation_types()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->activation_types());
            }

            // optional .subresource_filter.proto.UrlPatternType url_pattern_type = 6;
            if (has_url_pattern_type()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->url_pattern_type());
            }

            // optional .subresource_filter.proto.AnchorType anchor_left = 7;
            if (has_anchor_left()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor_left());
            }

            // optional .subresource_filter.proto.AnchorType anchor_right = 8;
            if (has_anchor_right()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->anchor_right());
            }
        }
        if (_has_bits_[8 / 32] & 768u) {
            // optional bool match_case = 9;
            if (has_match_case()) {
                total_size += 1 + 1;
            }

            // optional string url_pattern = 10;
            if (has_url_pattern()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->url_pattern());
            }
        }
        // repeated .subresource_filter.proto.DomainListItem domains = 5;
        total_size += 1 * this->domains_size();
        for (int i = 0; i < this->domains_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->domains(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void UrlRule::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const UrlRule*>(&from));
    }

    void UrlRule::MergeFrom(const UrlRule& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:subresource_filter.proto.UrlRule)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        domains_.MergeFrom(from.domains_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_semantics()) {
                set_semantics(from.semantics());
            }
            if (from.has_source_type()) {
                set_source_type(from.source_type());
            }
            if (from.has_element_types()) {
                set_element_types(from.element_types());
            }
            if (from.has_activation_types()) {
                set_activation_types(from.activation_types());
            }
            if (from.has_url_pattern_type()) {
                set_url_pattern_type(from.url_pattern_type());
            }
            if (from.has_anchor_left()) {
                set_anchor_left(from.anchor_left());
            }
            if (from.has_anchor_right()) {
                set_anchor_right(from.anchor_right());
            }
        }
        if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
            if (from.has_match_case()) {
                set_match_case(from.match_case());
            }
            if (from.has_url_pattern()) {
                set_has_url_pattern();
                url_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_pattern_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void UrlRule::CopyFrom(const UrlRule& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:subresource_filter.proto.UrlRule)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool UrlRule::IsInitialized() const
    {

        return true;
    }

    void UrlRule::Swap(UrlRule* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void UrlRule::InternalSwap(UrlRule* other)
    {
        std::swap(semantics_, other->semantics_);
        std::swap(source_type_, other->source_type_);
        std::swap(element_types_, other->element_types_);
        std::swap(activation_types_, other->activation_types_);
        domains_.UnsafeArenaSwap(&other->domains_);
        std::swap(url_pattern_type_, other->url_pattern_type_);
        std::swap(anchor_left_, other->anchor_left_);
        std::swap(anchor_right_, other->anchor_right_);
        std::swap(match_case_, other->match_case_);
        url_pattern_.Swap(&other->url_pattern_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string UrlRule::GetTypeName() const
    {
        return "subresource_filter.proto.UrlRule";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // UrlRule

    // optional .subresource_filter.proto.RuleSemantics semantics = 1;
    bool UrlRule::has_semantics() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void UrlRule::set_has_semantics()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void UrlRule::clear_has_semantics()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void UrlRule::clear_semantics()
    {
        semantics_ = 0;
        clear_has_semantics();
    }
    ::subresource_filter::proto::RuleSemantics UrlRule::semantics() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.semantics)
        return static_cast<::subresource_filter::proto::RuleSemantics>(semantics_);
    }
    void UrlRule::set_semantics(::subresource_filter::proto::RuleSemantics value)
    {
        assert(::subresource_filter::proto::RuleSemantics_IsValid(value));
        set_has_semantics();
        semantics_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.semantics)
    }

    // optional .subresource_filter.proto.SourceType source_type = 2;
    bool UrlRule::has_source_type() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void UrlRule::set_has_source_type()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void UrlRule::clear_has_source_type()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void UrlRule::clear_source_type()
    {
        source_type_ = 0;
        clear_has_source_type();
    }
    ::subresource_filter::proto::SourceType UrlRule::source_type() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.source_type)
        return static_cast<::subresource_filter::proto::SourceType>(source_type_);
    }
    void UrlRule::set_source_type(::subresource_filter::proto::SourceType value)
    {
        assert(::subresource_filter::proto::SourceType_IsValid(value));
        set_has_source_type();
        source_type_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.source_type)
    }

    // optional int32 element_types = 3;
    bool UrlRule::has_element_types() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void UrlRule::set_has_element_types()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void UrlRule::clear_has_element_types()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void UrlRule::clear_element_types()
    {
        element_types_ = 0;
        clear_has_element_types();
    }
    ::google::protobuf::int32 UrlRule::element_types() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.element_types)
        return element_types_;
    }
    void UrlRule::set_element_types(::google::protobuf::int32 value)
    {
        set_has_element_types();
        element_types_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.element_types)
    }

    // optional int32 activation_types = 4;
    bool UrlRule::has_activation_types() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void UrlRule::set_has_activation_types()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void UrlRule::clear_has_activation_types()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void UrlRule::clear_activation_types()
    {
        activation_types_ = 0;
        clear_has_activation_types();
    }
    ::google::protobuf::int32 UrlRule::activation_types() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.activation_types)
        return activation_types_;
    }
    void UrlRule::set_activation_types(::google::protobuf::int32 value)
    {
        set_has_activation_types();
        activation_types_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.activation_types)
    }

    // repeated .subresource_filter.proto.DomainListItem domains = 5;
    int UrlRule::domains_size() const
    {
        return domains_.size();
    }
    void UrlRule::clear_domains()
    {
        domains_.Clear();
    }
    const ::subresource_filter::proto::DomainListItem& UrlRule::domains(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.domains)
        return domains_.Get(index);
    }
    ::subresource_filter::proto::DomainListItem* UrlRule::mutable_domains(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.UrlRule.domains)
        return domains_.Mutable(index);
    }
    ::subresource_filter::proto::DomainListItem* UrlRule::add_domains()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.UrlRule.domains)
        return domains_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>*
    UrlRule::mutable_domains()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.UrlRule.domains)
        return &domains_;
    }
    const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>&
    UrlRule::domains() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.UrlRule.domains)
        return domains_;
    }

    // optional .subresource_filter.proto.UrlPatternType url_pattern_type = 6;
    bool UrlRule::has_url_pattern_type() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void UrlRule::set_has_url_pattern_type()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void UrlRule::clear_has_url_pattern_type()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void UrlRule::clear_url_pattern_type()
    {
        url_pattern_type_ = 0;
        clear_has_url_pattern_type();
    }
    ::subresource_filter::proto::UrlPatternType UrlRule::url_pattern_type() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.url_pattern_type)
        return static_cast<::subresource_filter::proto::UrlPatternType>(url_pattern_type_);
    }
    void UrlRule::set_url_pattern_type(::subresource_filter::proto::UrlPatternType value)
    {
        assert(::subresource_filter::proto::UrlPatternType_IsValid(value));
        set_has_url_pattern_type();
        url_pattern_type_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.url_pattern_type)
    }

    // optional .subresource_filter.proto.AnchorType anchor_left = 7;
    bool UrlRule::has_anchor_left() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void UrlRule::set_has_anchor_left()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void UrlRule::clear_has_anchor_left()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void UrlRule::clear_anchor_left()
    {
        anchor_left_ = 0;
        clear_has_anchor_left();
    }
    ::subresource_filter::proto::AnchorType UrlRule::anchor_left() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.anchor_left)
        return static_cast<::subresource_filter::proto::AnchorType>(anchor_left_);
    }
    void UrlRule::set_anchor_left(::subresource_filter::proto::AnchorType value)
    {
        assert(::subresource_filter::proto::AnchorType_IsValid(value));
        set_has_anchor_left();
        anchor_left_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.anchor_left)
    }

    // optional .subresource_filter.proto.AnchorType anchor_right = 8;
    bool UrlRule::has_anchor_right() const
    {
        return (_has_bits_[0] & 0x00000080u) != 0;
    }
    void UrlRule::set_has_anchor_right()
    {
        _has_bits_[0] |= 0x00000080u;
    }
    void UrlRule::clear_has_anchor_right()
    {
        _has_bits_[0] &= ~0x00000080u;
    }
    void UrlRule::clear_anchor_right()
    {
        anchor_right_ = 0;
        clear_has_anchor_right();
    }
    ::subresource_filter::proto::AnchorType UrlRule::anchor_right() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.anchor_right)
        return static_cast<::subresource_filter::proto::AnchorType>(anchor_right_);
    }
    void UrlRule::set_anchor_right(::subresource_filter::proto::AnchorType value)
    {
        assert(::subresource_filter::proto::AnchorType_IsValid(value));
        set_has_anchor_right();
        anchor_right_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.anchor_right)
    }

    // optional bool match_case = 9;
    bool UrlRule::has_match_case() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    void UrlRule::set_has_match_case()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    void UrlRule::clear_has_match_case()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    void UrlRule::clear_match_case()
    {
        match_case_ = false;
        clear_has_match_case();
    }
    bool UrlRule::match_case() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.match_case)
        return match_case_;
    }
    void UrlRule::set_match_case(bool value)
    {
        set_has_match_case();
        match_case_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.match_case)
    }

    // optional string url_pattern = 10;
    bool UrlRule::has_url_pattern() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    void UrlRule::set_has_url_pattern()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    void UrlRule::clear_has_url_pattern()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    void UrlRule::clear_url_pattern()
    {
        url_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_url_pattern();
    }
    const ::std::string& UrlRule::url_pattern() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.UrlRule.url_pattern)
        return url_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void UrlRule::set_url_pattern(const ::std::string& value)
    {
        set_has_url_pattern();
        url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.UrlRule.url_pattern)
    }
    void UrlRule::set_url_pattern(const char* value)
    {
        set_has_url_pattern();
        url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.UrlRule.url_pattern)
    }
    void UrlRule::set_url_pattern(const char* value, size_t size)
    {
        set_has_url_pattern();
        url_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.UrlRule.url_pattern)
    }
    ::std::string* UrlRule::mutable_url_pattern()
    {
        set_has_url_pattern();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.UrlRule.url_pattern)
        return url_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* UrlRule::release_url_pattern()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.UrlRule.url_pattern)
        clear_has_url_pattern();
        return url_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void UrlRule::set_allocated_url_pattern(::std::string* url_pattern)
    {
        if (url_pattern != NULL) {
            set_has_url_pattern();
        } else {
            clear_has_url_pattern();
        }
        url_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_pattern);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.UrlRule.url_pattern)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForCssRule(
        CssRule* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int CssRule::kSemanticsFieldNumber;
    const int CssRule::kDomainsFieldNumber;
    const int CssRule::kCssSelectorFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    CssRule::CssRule()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:subresource_filter.proto.CssRule)
    }

    void CssRule::InitAsDefaultInstance()
    {
    }

    CssRule::CssRule(const CssRule& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:subresource_filter.proto.CssRule)
    }

    void CssRule::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        semantics_ = 0;
        css_selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    CssRule::~CssRule()
    {
        // @@protoc_insertion_point(destructor:subresource_filter.proto.CssRule)
        SharedDtor();
    }

    void CssRule::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        css_selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void CssRule::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const CssRule& CssRule::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_rules_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_rules_2eproto();
#endif
        return *default_instance_;
    }

    CssRule* CssRule::default_instance_ = NULL;

    CssRule* CssRule::New(::google::protobuf::Arena* arena) const
    {
        CssRule* n = new CssRule;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void CssRule::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:subresource_filter.proto.CssRule)
        if (_has_bits_[0 / 32] & 5u) {
            semantics_ = 0;
            if (has_css_selector()) {
                css_selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        domains_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool CssRule::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForCssRule, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:subresource_filter.proto.CssRule)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .subresource_filter.proto.RuleSemantics semantics = 1;
            case 1: {
                if (tag == 8) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::subresource_filter::proto::RuleSemantics_IsValid(value)) {
                        set_semantics(static_cast<::subresource_filter::proto::RuleSemantics>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(8);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_domains;
                break;
            }

            // repeated .subresource_filter.proto.DomainListItem domains = 2;
            case 2: {
                if (tag == 18) {
                parse_domains:
                    DO_(input->IncrementRecursionDepth());
                parse_loop_domains:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_domains()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_loop_domains;
                input->UnsafeDecrementRecursionDepth();
                if (input->ExpectTag(26))
                    goto parse_css_selector;
                break;
            }

            // optional string css_selector = 3;
            case 3: {
                if (tag == 26) {
                parse_css_selector:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_css_selector()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:subresource_filter.proto.CssRule)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:subresource_filter.proto.CssRule)
        return false;
#undef DO_
    }

    void CssRule::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:subresource_filter.proto.CssRule)
        // optional .subresource_filter.proto.RuleSemantics semantics = 1;
        if (has_semantics()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                1, this->semantics(), output);
        }

        // repeated .subresource_filter.proto.DomainListItem domains = 2;
        for (unsigned int i = 0, n = this->domains_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, this->domains(i), output);
        }

        // optional string css_selector = 3;
        if (has_css_selector()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                3, this->css_selector(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:subresource_filter.proto.CssRule)
    }

    int CssRule::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:subresource_filter.proto.CssRule)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 5u) {
            // optional .subresource_filter.proto.RuleSemantics semantics = 1;
            if (has_semantics()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->semantics());
            }

            // optional string css_selector = 3;
            if (has_css_selector()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->css_selector());
            }
        }
        // repeated .subresource_filter.proto.DomainListItem domains = 2;
        total_size += 1 * this->domains_size();
        for (int i = 0; i < this->domains_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->domains(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void CssRule::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const CssRule*>(&from));
    }

    void CssRule::MergeFrom(const CssRule& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:subresource_filter.proto.CssRule)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        domains_.MergeFrom(from.domains_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_semantics()) {
                set_semantics(from.semantics());
            }
            if (from.has_css_selector()) {
                set_has_css_selector();
                css_selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.css_selector_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void CssRule::CopyFrom(const CssRule& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:subresource_filter.proto.CssRule)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool CssRule::IsInitialized() const
    {

        return true;
    }

    void CssRule::Swap(CssRule* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void CssRule::InternalSwap(CssRule* other)
    {
        std::swap(semantics_, other->semantics_);
        domains_.UnsafeArenaSwap(&other->domains_);
        css_selector_.Swap(&other->css_selector_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string CssRule::GetTypeName() const
    {
        return "subresource_filter.proto.CssRule";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // CssRule

    // optional .subresource_filter.proto.RuleSemantics semantics = 1;
    bool CssRule::has_semantics() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void CssRule::set_has_semantics()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void CssRule::clear_has_semantics()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void CssRule::clear_semantics()
    {
        semantics_ = 0;
        clear_has_semantics();
    }
    ::subresource_filter::proto::RuleSemantics CssRule::semantics() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.CssRule.semantics)
        return static_cast<::subresource_filter::proto::RuleSemantics>(semantics_);
    }
    void CssRule::set_semantics(::subresource_filter::proto::RuleSemantics value)
    {
        assert(::subresource_filter::proto::RuleSemantics_IsValid(value));
        set_has_semantics();
        semantics_ = value;
        // @@protoc_insertion_point(field_set:subresource_filter.proto.CssRule.semantics)
    }

    // repeated .subresource_filter.proto.DomainListItem domains = 2;
    int CssRule::domains_size() const
    {
        return domains_.size();
    }
    void CssRule::clear_domains()
    {
        domains_.Clear();
    }
    const ::subresource_filter::proto::DomainListItem& CssRule::domains(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.CssRule.domains)
        return domains_.Get(index);
    }
    ::subresource_filter::proto::DomainListItem* CssRule::mutable_domains(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.CssRule.domains)
        return domains_.Mutable(index);
    }
    ::subresource_filter::proto::DomainListItem* CssRule::add_domains()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.CssRule.domains)
        return domains_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>*
    CssRule::mutable_domains()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.CssRule.domains)
        return &domains_;
    }
    const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::DomainListItem>&
    CssRule::domains() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.CssRule.domains)
        return domains_;
    }

    // optional string css_selector = 3;
    bool CssRule::has_css_selector() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void CssRule::set_has_css_selector()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void CssRule::clear_has_css_selector()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void CssRule::clear_css_selector()
    {
        css_selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_css_selector();
    }
    const ::std::string& CssRule::css_selector() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.CssRule.css_selector)
        return css_selector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void CssRule::set_css_selector(const ::std::string& value)
    {
        set_has_css_selector();
        css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.CssRule.css_selector)
    }
    void CssRule::set_css_selector(const char* value)
    {
        set_has_css_selector();
        css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.CssRule.css_selector)
    }
    void CssRule::set_css_selector(const char* value, size_t size)
    {
        set_has_css_selector();
        css_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.CssRule.css_selector)
    }
    ::std::string* CssRule::mutable_css_selector()
    {
        set_has_css_selector();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.CssRule.css_selector)
        return css_selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* CssRule::release_css_selector()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.CssRule.css_selector)
        clear_has_css_selector();
        return css_selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void CssRule::set_allocated_css_selector(::std::string* css_selector)
    {
        if (css_selector != NULL) {
            set_has_css_selector();
        } else {
            clear_has_css_selector();
        }
        css_selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), css_selector);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.CssRule.css_selector)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForComment(
        Comment* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Comment::kTextFieldNumber;
    const int Comment::kKeyFieldNumber;
    const int Comment::kValueFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Comment::Comment()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:subresource_filter.proto.Comment)
    }

    void Comment::InitAsDefaultInstance()
    {
    }

    Comment::Comment(const Comment& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:subresource_filter.proto.Comment)
    }

    void Comment::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Comment::~Comment()
    {
        // @@protoc_insertion_point(destructor:subresource_filter.proto.Comment)
        SharedDtor();
    }

    void Comment::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Comment::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Comment& Comment::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_rules_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_rules_2eproto();
#endif
        return *default_instance_;
    }

    Comment* Comment::default_instance_ = NULL;

    Comment* Comment::New(::google::protobuf::Arena* arena) const
    {
        Comment* n = new Comment;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Comment::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:subresource_filter.proto.Comment)
        if (_has_bits_[0 / 32] & 7u) {
            if (has_text()) {
                text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_key()) {
                key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_value()) {
                value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Comment::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForComment, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:subresource_filter.proto.Comment)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string text = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_text()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_key;
                break;
            }

            // optional string key = 2;
            case 2: {
                if (tag == 18) {
                parse_key:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_key()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_value;
                break;
            }

            // optional string value = 3;
            case 3: {
                if (tag == 26) {
                parse_value:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_value()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:subresource_filter.proto.Comment)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:subresource_filter.proto.Comment)
        return false;
#undef DO_
    }

    void Comment::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:subresource_filter.proto.Comment)
        // optional string text = 1;
        if (has_text()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->text(), output);
        }

        // optional string key = 2;
        if (has_key()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->key(), output);
        }

        // optional string value = 3;
        if (has_value()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                3, this->value(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:subresource_filter.proto.Comment)
    }

    int Comment::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:subresource_filter.proto.Comment)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 7u) {
            // optional string text = 1;
            if (has_text()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->text());
            }

            // optional string key = 2;
            if (has_key()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->key());
            }

            // optional string value = 3;
            if (has_value()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->value());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Comment::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Comment*>(&from));
    }

    void Comment::MergeFrom(const Comment& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:subresource_filter.proto.Comment)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_text()) {
                set_has_text();
                text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
            }
            if (from.has_key()) {
                set_has_key();
                key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
            }
            if (from.has_value()) {
                set_has_value();
                value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Comment::CopyFrom(const Comment& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:subresource_filter.proto.Comment)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Comment::IsInitialized() const
    {

        return true;
    }

    void Comment::Swap(Comment* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Comment::InternalSwap(Comment* other)
    {
        text_.Swap(&other->text_);
        key_.Swap(&other->key_);
        value_.Swap(&other->value_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Comment::GetTypeName() const
    {
        return "subresource_filter.proto.Comment";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Comment

    // optional string text = 1;
    bool Comment::has_text() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Comment::set_has_text()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Comment::clear_has_text()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Comment::clear_text()
    {
        text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_text();
    }
    const ::std::string& Comment::text() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.Comment.text)
        return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Comment::set_text(const ::std::string& value)
    {
        set_has_text();
        text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.Comment.text)
    }
    void Comment::set_text(const char* value)
    {
        set_has_text();
        text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.Comment.text)
    }
    void Comment::set_text(const char* value, size_t size)
    {
        set_has_text();
        text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.Comment.text)
    }
    ::std::string* Comment::mutable_text()
    {
        set_has_text();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.Comment.text)
        return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Comment::release_text()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.Comment.text)
        clear_has_text();
        return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Comment::set_allocated_text(::std::string* text)
    {
        if (text != NULL) {
            set_has_text();
        } else {
            clear_has_text();
        }
        text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.Comment.text)
    }

    // optional string key = 2;
    bool Comment::has_key() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Comment::set_has_key()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Comment::clear_has_key()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Comment::clear_key()
    {
        key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_key();
    }
    const ::std::string& Comment::key() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.Comment.key)
        return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Comment::set_key(const ::std::string& value)
    {
        set_has_key();
        key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.Comment.key)
    }
    void Comment::set_key(const char* value)
    {
        set_has_key();
        key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.Comment.key)
    }
    void Comment::set_key(const char* value, size_t size)
    {
        set_has_key();
        key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.Comment.key)
    }
    ::std::string* Comment::mutable_key()
    {
        set_has_key();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.Comment.key)
        return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Comment::release_key()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.Comment.key)
        clear_has_key();
        return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Comment::set_allocated_key(::std::string* key)
    {
        if (key != NULL) {
            set_has_key();
        } else {
            clear_has_key();
        }
        key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.Comment.key)
    }

    // optional string value = 3;
    bool Comment::has_value() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Comment::set_has_value()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Comment::clear_has_value()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Comment::clear_value()
    {
        value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_value();
    }
    const ::std::string& Comment::value() const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.Comment.value)
        return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Comment::set_value(const ::std::string& value)
    {
        set_has_value();
        value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:subresource_filter.proto.Comment.value)
    }
    void Comment::set_value(const char* value)
    {
        set_has_value();
        value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:subresource_filter.proto.Comment.value)
    }
    void Comment::set_value(const char* value, size_t size)
    {
        set_has_value();
        value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:subresource_filter.proto.Comment.value)
    }
    ::std::string* Comment::mutable_value()
    {
        set_has_value();
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.Comment.value)
        return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Comment::release_value()
    {
        // @@protoc_insertion_point(field_release:subresource_filter.proto.Comment.value)
        clear_has_value();
        return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Comment::set_allocated_value(::std::string* value)
    {
        if (value != NULL) {
            set_has_value();
        } else {
            clear_has_value();
        }
        value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set_allocated:subresource_filter.proto.Comment.value)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForFilteringRules(
        FilteringRules* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int FilteringRules::kUrlRulesFieldNumber;
    const int FilteringRules::kCssRulesFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    FilteringRules::FilteringRules()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:subresource_filter.proto.FilteringRules)
    }

    void FilteringRules::InitAsDefaultInstance()
    {
    }

    FilteringRules::FilteringRules(const FilteringRules& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:subresource_filter.proto.FilteringRules)
    }

    void FilteringRules::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    FilteringRules::~FilteringRules()
    {
        // @@protoc_insertion_point(destructor:subresource_filter.proto.FilteringRules)
        SharedDtor();
    }

    void FilteringRules::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void FilteringRules::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const FilteringRules& FilteringRules::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_rules_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_rules_2eproto();
#endif
        return *default_instance_;
    }

    FilteringRules* FilteringRules::default_instance_ = NULL;

    FilteringRules* FilteringRules::New(::google::protobuf::Arena* arena) const
    {
        FilteringRules* n = new FilteringRules;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void FilteringRules::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:subresource_filter.proto.FilteringRules)
        url_rules_.Clear();
        css_rules_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool FilteringRules::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFilteringRules, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:subresource_filter.proto.FilteringRules)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // repeated .subresource_filter.proto.UrlRule url_rules = 1;
            case 1: {
                if (tag == 10) {
                    DO_(input->IncrementRecursionDepth());
                parse_loop_url_rules:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_url_rules()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(10))
                    goto parse_loop_url_rules;
                if (input->ExpectTag(18))
                    goto parse_loop_css_rules;
                input->UnsafeDecrementRecursionDepth();
                break;
            }

            // repeated .subresource_filter.proto.CssRule css_rules = 2;
            case 2: {
                if (tag == 18) {
                    DO_(input->IncrementRecursionDepth());
                parse_loop_css_rules:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_css_rules()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_loop_css_rules;
                input->UnsafeDecrementRecursionDepth();
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:subresource_filter.proto.FilteringRules)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:subresource_filter.proto.FilteringRules)
        return false;
#undef DO_
    }

    void FilteringRules::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:subresource_filter.proto.FilteringRules)
        // repeated .subresource_filter.proto.UrlRule url_rules = 1;
        for (unsigned int i = 0, n = this->url_rules_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                1, this->url_rules(i), output);
        }

        // repeated .subresource_filter.proto.CssRule css_rules = 2;
        for (unsigned int i = 0, n = this->css_rules_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, this->css_rules(i), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:subresource_filter.proto.FilteringRules)
    }

    int FilteringRules::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:subresource_filter.proto.FilteringRules)
        int total_size = 0;

        // repeated .subresource_filter.proto.UrlRule url_rules = 1;
        total_size += 1 * this->url_rules_size();
        for (int i = 0; i < this->url_rules_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->url_rules(i));
        }

        // repeated .subresource_filter.proto.CssRule css_rules = 2;
        total_size += 1 * this->css_rules_size();
        for (int i = 0; i < this->css_rules_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->css_rules(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void FilteringRules::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const FilteringRules*>(&from));
    }

    void FilteringRules::MergeFrom(const FilteringRules& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:subresource_filter.proto.FilteringRules)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        url_rules_.MergeFrom(from.url_rules_);
        css_rules_.MergeFrom(from.css_rules_);
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void FilteringRules::CopyFrom(const FilteringRules& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:subresource_filter.proto.FilteringRules)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool FilteringRules::IsInitialized() const
    {

        return true;
    }

    void FilteringRules::Swap(FilteringRules* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void FilteringRules::InternalSwap(FilteringRules* other)
    {
        url_rules_.UnsafeArenaSwap(&other->url_rules_);
        css_rules_.UnsafeArenaSwap(&other->css_rules_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string FilteringRules::GetTypeName() const
    {
        return "subresource_filter.proto.FilteringRules";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // FilteringRules

    // repeated .subresource_filter.proto.UrlRule url_rules = 1;
    int FilteringRules::url_rules_size() const
    {
        return url_rules_.size();
    }
    void FilteringRules::clear_url_rules()
    {
        url_rules_.Clear();
    }
    const ::subresource_filter::proto::UrlRule& FilteringRules::url_rules(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_.Get(index);
    }
    ::subresource_filter::proto::UrlRule* FilteringRules::mutable_url_rules(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_.Mutable(index);
    }
    ::subresource_filter::proto::UrlRule* FilteringRules::add_url_rules()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule>*
    FilteringRules::mutable_url_rules()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.FilteringRules.url_rules)
        return &url_rules_;
    }
    const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::UrlRule>&
    FilteringRules::url_rules() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.FilteringRules.url_rules)
        return url_rules_;
    }

    // repeated .subresource_filter.proto.CssRule css_rules = 2;
    int FilteringRules::css_rules_size() const
    {
        return css_rules_.size();
    }
    void FilteringRules::clear_css_rules()
    {
        css_rules_.Clear();
    }
    const ::subresource_filter::proto::CssRule& FilteringRules::css_rules(int index) const
    {
        // @@protoc_insertion_point(field_get:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_.Get(index);
    }
    ::subresource_filter::proto::CssRule* FilteringRules::mutable_css_rules(int index)
    {
        // @@protoc_insertion_point(field_mutable:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_.Mutable(index);
    }
    ::subresource_filter::proto::CssRule* FilteringRules::add_css_rules()
    {
        // @@protoc_insertion_point(field_add:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule>*
    FilteringRules::mutable_css_rules()
    {
        // @@protoc_insertion_point(field_mutable_list:subresource_filter.proto.FilteringRules.css_rules)
        return &css_rules_;
    }
    const ::google::protobuf::RepeatedPtrField<::subresource_filter::proto::CssRule>&
    FilteringRules::css_rules() const
    {
        // @@protoc_insertion_point(field_list:subresource_filter.proto.FilteringRules.css_rules)
        return css_rules_;
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace proto
} // namespace subresource_filter

// @@protoc_insertion_point(global_scope)
