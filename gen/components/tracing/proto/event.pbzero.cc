// Autogenerated. DO NOT EDIT.
// Protobuf compiler (protoc) has generated these stubs with
// //components/tracing/tools/proto_zero_plugin.

#include "event.pbzero.h"

namespace {
static const ::tracing::v2::proto::ProtoFieldDescriptor kInvalidField = { "", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false };
}

namespace pbzero {
namespace tracing {
    namespace proto {

        static const ::tracing::v2::proto::ProtoFieldDescriptor kFields_Event[] = {
            { "type", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_ENUM, 1, 0 },
            { "name_id", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_INT64, 2, 0 },
            { "name_str", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_STRING, 16, 0 },
            { "category_id", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_INT64, 4, 0 },
            { "timestamp", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_UINT64, 5, 0 },
            { "thread_timestamp", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_UINT64, 6, 0 },
        };

        const ::tracing::v2::proto::ProtoFieldDescriptor* Event::GetFieldDescriptor(uint32_t field_id)
        {
            switch (field_id) {
            case kTypeFieldNumber:
                return &kFields_Event[0];
            case kNameIdFieldNumber:
                return &kFields_Event[1];
            case kNameStrFieldNumber:
                return &kFields_Event[2];
            case kCategoryIdFieldNumber:
                return &kFields_Event[3];
            case kTimestampFieldNumber:
                return &kFields_Event[4];
            case kThreadTimestampFieldNumber:
                return &kFields_Event[5];
            default:
                return &kInvalidField;
            }
        }

    } // Namespace.
} // Namespace.
} // Namespace.
