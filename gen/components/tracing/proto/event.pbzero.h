// Autogenerated. DO NOT EDIT.
// Protobuf compiler (protoc) has generated these stubs with
// //components/tracing/tools/proto_zero_plugin.

#ifndef TRACING_PROTO_EVENT_PROTO_H_
#define TRACING_PROTO_EVENT_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "components/tracing/core/proto_zero_message.h"

namespace pbzero {
namespace tracing {
    namespace proto {

        enum Event_EventType : int32_t;

        enum Event_EventType : int32_t {
            Event_EventType_METADATA = 77,
            Event_EventType_COMPLETE = 88,
        };

        class Event : public ::tracing::v2::ProtoZeroMessage {
        public:
            enum : int32_t {
                kTypeFieldNumber = 1,
                kNameIdFieldNumber = 2,
                kNameStrFieldNumber = 16,
                kCategoryIdFieldNumber = 4,
                kTimestampFieldNumber = 5,
                kThreadTimestampFieldNumber = 6,
            };
            static const ::tracing::v2::proto::ProtoFieldDescriptor* GetFieldDescriptor(uint32_t field_id);
            using EventType = ::pbzero::tracing::proto::Event_EventType;
            static const EventType METADATA = Event_EventType_METADATA;
            static const EventType COMPLETE = Event_EventType_COMPLETE;
            void set_type(::pbzero::tracing::proto::Event_EventType value)
            {
                AppendTinyVarInt(1, value);
            }
            void set_name_id(int64_t value)
            {
                AppendVarInt(2, value);
            }
            void set_name_str(const char* value)
            {
                AppendString(16, value);
            }
            void set_category_id(int64_t value)
            {
                AppendVarInt(4, value);
            }
            void set_timestamp(uint64_t value)
            {
                AppendVarInt(5, value);
            }
            void set_thread_timestamp(uint64_t value)
            {
                AppendVarInt(6, value);
            }
        };

    } // Namespace.
} // Namespace.
} // Namespace.
#endif // Include guard.
