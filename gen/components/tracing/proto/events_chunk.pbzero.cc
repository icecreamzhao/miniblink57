// Autogenerated. DO NOT EDIT.
// Protobuf compiler (protoc) has generated these stubs with
// //components/tracing/tools/proto_zero_plugin.

#include "events_chunk.pbzero.h"

namespace {
static const ::tracing::v2::proto::ProtoFieldDescriptor kInvalidField = { "", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_INVALID, 0, false };
}

namespace pbzero {
namespace tracing {
    namespace proto {

        static const ::tracing::v2::proto::ProtoFieldDescriptor kFields_EventsChunk[] = {
            { "writer_id", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_UINT32, 1, 0 },
            { "seq_id", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_UINT32, 2, 0 },
            { "events", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_BYTES, 3, 1 },
            { "first_event_continues_from_prev_chunk", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_BOOL, 4, 0 },
            { "last_event_continues_on_next_chunk", ::tracing::v2::proto::ProtoFieldDescriptor::Type::TYPE_BOOL, 5, 0 },
        };

        const ::tracing::v2::proto::ProtoFieldDescriptor* EventsChunk::GetFieldDescriptor(uint32_t field_id)
        {
            switch (field_id) {
            case kWriterIdFieldNumber:
                return &kFields_EventsChunk[0];
            case kSeqIdFieldNumber:
                return &kFields_EventsChunk[1];
            case kEventsFieldNumber:
                return &kFields_EventsChunk[2];
            case kFirstEventContinuesFromPrevChunkFieldNumber:
                return &kFields_EventsChunk[3];
            case kLastEventContinuesOnNextChunkFieldNumber:
                return &kFields_EventsChunk[4];
            default:
                return &kInvalidField;
            }
        }

    } // Namespace.
} // Namespace.
} // Namespace.
