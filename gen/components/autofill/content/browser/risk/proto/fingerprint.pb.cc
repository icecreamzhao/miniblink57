// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fingerprint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fingerprint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace autofill {
namespace risk {

    void protobuf_ShutdownFile_fingerprint_2eproto()
    {
        delete Fingerprint::default_instance_;
        delete Fingerprint_Dimension::default_instance_;
        delete Fingerprint_MachineCharacteristics::default_instance_;
        delete Fingerprint_MachineCharacteristics_Plugin::default_instance_;
        delete Fingerprint_MachineCharacteristics_Cpu::default_instance_;
        delete Fingerprint_MachineCharacteristics_Graphics::default_instance_;
        delete Fingerprint_TransientState::default_instance_;
        delete Fingerprint_Performance::default_instance_;
        delete Fingerprint_UserCharacteristics::default_instance_;
        delete Fingerprint_UserCharacteristics_Vector::default_instance_;
        delete Fingerprint_UserCharacteristics_Location::default_instance_;
        delete Fingerprint_Metadata::default_instance_;
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    void protobuf_AddDesc_fingerprint_2eproto_impl()
    {
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
    void protobuf_AddDesc_fingerprint_2eproto()
    {
        static bool already_here = false;
        if (already_here)
            return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
        Fingerprint::default_instance_ = new Fingerprint();
        Fingerprint_Dimension::default_instance_ = new Fingerprint_Dimension();
        Fingerprint_MachineCharacteristics::default_instance_ = new Fingerprint_MachineCharacteristics();
        Fingerprint_MachineCharacteristics_Plugin::default_instance_ = new Fingerprint_MachineCharacteristics_Plugin();
        Fingerprint_MachineCharacteristics_Cpu::default_instance_ = new Fingerprint_MachineCharacteristics_Cpu();
        Fingerprint_MachineCharacteristics_Graphics::default_instance_ = new Fingerprint_MachineCharacteristics_Graphics();
        Fingerprint_TransientState::default_instance_ = new Fingerprint_TransientState();
        Fingerprint_Performance::default_instance_ = new Fingerprint_Performance();
        Fingerprint_UserCharacteristics::default_instance_ = new Fingerprint_UserCharacteristics();
        Fingerprint_UserCharacteristics_Vector::default_instance_ = new Fingerprint_UserCharacteristics_Vector();
        Fingerprint_UserCharacteristics_Location::default_instance_ = new Fingerprint_UserCharacteristics_Location();
        Fingerprint_Metadata::default_instance_ = new Fingerprint_Metadata();
        Fingerprint::default_instance_->InitAsDefaultInstance();
        Fingerprint_Dimension::default_instance_->InitAsDefaultInstance();
        Fingerprint_MachineCharacteristics::default_instance_->InitAsDefaultInstance();
        Fingerprint_MachineCharacteristics_Plugin::default_instance_->InitAsDefaultInstance();
        Fingerprint_MachineCharacteristics_Cpu::default_instance_->InitAsDefaultInstance();
        Fingerprint_MachineCharacteristics_Graphics::default_instance_->InitAsDefaultInstance();
        Fingerprint_TransientState::default_instance_->InitAsDefaultInstance();
        Fingerprint_Performance::default_instance_->InitAsDefaultInstance();
        Fingerprint_UserCharacteristics::default_instance_->InitAsDefaultInstance();
        Fingerprint_UserCharacteristics_Vector::default_instance_->InitAsDefaultInstance();
        Fingerprint_UserCharacteristics_Location::default_instance_->InitAsDefaultInstance();
        Fingerprint_Metadata::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fingerprint_2eproto);
    }

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fingerprint_2eproto_once_);
    void protobuf_AddDesc_fingerprint_2eproto()
    {
        ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_fingerprint_2eproto_once_,
            &protobuf_AddDesc_fingerprint_2eproto_impl);
    }
#else
    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_fingerprint_2eproto {
        StaticDescriptorInitializer_fingerprint_2eproto()
        {
            protobuf_AddDesc_fingerprint_2eproto();
        }
    } static_descriptor_initializer_fingerprint_2eproto_;
#endif

    namespace {

        static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
        GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
        {
            GOOGLE_CHECK(false) << __FILE__ << ":" << line;
        }

    } // namespace

    // ===================================================================

    static ::std::string* MutableUnknownFieldsForFingerprint(
        Fingerprint* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    static ::std::string* MutableUnknownFieldsForFingerprint_Dimension(
        Fingerprint_Dimension* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_Dimension::kWidthFieldNumber;
    const int Fingerprint_Dimension::kHeightFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_Dimension::Fingerprint_Dimension()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Dimension)
    }

    void Fingerprint_Dimension::InitAsDefaultInstance()
    {
    }

    Fingerprint_Dimension::Fingerprint_Dimension(const Fingerprint_Dimension& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Dimension)
    }

    void Fingerprint_Dimension::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        width_ = 0;
        height_ = 0;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_Dimension::~Fingerprint_Dimension()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Dimension)
        SharedDtor();
    }

    void Fingerprint_Dimension::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_Dimension::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_Dimension& Fingerprint_Dimension::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_Dimension* Fingerprint_Dimension::default_instance_ = NULL;

    Fingerprint_Dimension* Fingerprint_Dimension::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_Dimension* n = new Fingerprint_Dimension;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_Dimension::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Dimension)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                           \
    _Pragma("clang diagnostic push")                                                                            \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_Dimension, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_Dimension*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_Dimension::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_Dimension, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Dimension)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional int32 width = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &width_)));
                    set_has_width();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_height;
                break;
            }

            // optional int32 height = 2;
            case 2: {
                if (tag == 16) {
                parse_height:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &height_)));
                    set_has_height();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Dimension)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Dimension)
        return false;
#undef DO_
    }

    void Fingerprint_Dimension::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Dimension)
        // optional int32 width = 1;
        if (has_width()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
        }

        // optional int32 height = 2;
        if (has_height()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Dimension)
    }

    int Fingerprint_Dimension::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Dimension)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 3u) {
            // optional int32 width = 1;
            if (has_width()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->width());
            }

            // optional int32 height = 2;
            if (has_height()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->height());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_Dimension::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_Dimension*>(&from));
    }

    void Fingerprint_Dimension::MergeFrom(const Fingerprint_Dimension& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Dimension)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_width()) {
                set_width(from.width());
            }
            if (from.has_height()) {
                set_height(from.height());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_Dimension::CopyFrom(const Fingerprint_Dimension& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Dimension)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_Dimension::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_Dimension::Swap(Fingerprint_Dimension* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_Dimension::InternalSwap(Fingerprint_Dimension* other)
    {
        std::swap(width_, other->width_);
        std::swap(height_, other->height_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_Dimension::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.Dimension";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_MachineCharacteristics(
        Fingerprint_MachineCharacteristics* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    bool Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(int value)
    {
        switch (value) {
        case 0:
        case 1:
        case 2:
            return true;
        default:
            return false;
        }
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::FEATURE_UNKNOWN;
    const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::DEPRECATED_FEATURE_AUTOCHECKOUT;
    const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::FEATURE_REQUEST_AUTOCOMPLETE;
    const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::BrowserFeature_MIN;
    const Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::BrowserFeature_MAX;
    const int Fingerprint_MachineCharacteristics::BrowserFeature_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
    static ::std::string* MutableUnknownFieldsForFingerprint_MachineCharacteristics_Plugin(
        Fingerprint_MachineCharacteristics_Plugin* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_MachineCharacteristics_Plugin::kNameFieldNumber;
    const int Fingerprint_MachineCharacteristics_Plugin::kDescriptionFieldNumber;
    const int Fingerprint_MachineCharacteristics_Plugin::kMimeTypeFieldNumber;
    const int Fingerprint_MachineCharacteristics_Plugin::kVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_MachineCharacteristics_Plugin::Fingerprint_MachineCharacteristics_Plugin()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
    }

    void Fingerprint_MachineCharacteristics_Plugin::InitAsDefaultInstance()
    {
    }

    Fingerprint_MachineCharacteristics_Plugin::Fingerprint_MachineCharacteristics_Plugin(const Fingerprint_MachineCharacteristics_Plugin& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
    }

    void Fingerprint_MachineCharacteristics_Plugin::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_MachineCharacteristics_Plugin::~Fingerprint_MachineCharacteristics_Plugin()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        SharedDtor();
    }

    void Fingerprint_MachineCharacteristics_Plugin::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_MachineCharacteristics_Plugin::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_MachineCharacteristics_Plugin& Fingerprint_MachineCharacteristics_Plugin::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics_Plugin::default_instance_ = NULL;

    Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics_Plugin::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_MachineCharacteristics_Plugin* n = new Fingerprint_MachineCharacteristics_Plugin;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_MachineCharacteristics_Plugin::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        if (_has_bits_[0 / 32] & 11u) {
            if (has_name()) {
                name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_description()) {
                description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_version()) {
                version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        mime_type_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_MachineCharacteristics_Plugin::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_MachineCharacteristics_Plugin, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string name = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_name()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_description;
                break;
            }

            // optional string description = 2;
            case 2: {
                if (tag == 18) {
                parse_description:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_description()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_mime_type;
                break;
            }

            // repeated string mime_type = 3;
            case 3: {
                if (tag == 26) {
                parse_mime_type:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->add_mime_type()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_mime_type;
                if (input->ExpectTag(34))
                    goto parse_version;
                break;
            }

            // optional string version = 4;
            case 4: {
                if (tag == 34) {
                parse_version:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_version()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        return false;
#undef DO_
    }

    void Fingerprint_MachineCharacteristics_Plugin::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        // optional string name = 1;
        if (has_name()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->name(), output);
        }

        // optional string description = 2;
        if (has_description()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->description(), output);
        }

        // repeated string mime_type = 3;
        for (int i = 0; i < this->mime_type_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteString(
                3, this->mime_type(i), output);
        }

        // optional string version = 4;
        if (has_version()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                4, this->version(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
    }

    int Fingerprint_MachineCharacteristics_Plugin::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 11u) {
            // optional string name = 1;
            if (has_name()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
            }

            // optional string description = 2;
            if (has_description()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->description());
            }

            // optional string version = 4;
            if (has_version()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->version());
            }
        }
        // repeated string mime_type = 3;
        total_size += 1 * this->mime_type_size();
        for (int i = 0; i < this->mime_type_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                this->mime_type(i));
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_MachineCharacteristics_Plugin::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics_Plugin*>(&from));
    }

    void Fingerprint_MachineCharacteristics_Plugin::MergeFrom(const Fingerprint_MachineCharacteristics_Plugin& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        mime_type_.MergeFrom(from.mime_type_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_name()) {
                set_has_name();
                name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
            }
            if (from.has_description()) {
                set_has_description();
                description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
            }
            if (from.has_version()) {
                set_has_version();
                version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_MachineCharacteristics_Plugin::CopyFrom(const Fingerprint_MachineCharacteristics_Plugin& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Plugin)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_MachineCharacteristics_Plugin::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_MachineCharacteristics_Plugin::Swap(Fingerprint_MachineCharacteristics_Plugin* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_MachineCharacteristics_Plugin::InternalSwap(Fingerprint_MachineCharacteristics_Plugin* other)
    {
        name_.Swap(&other->name_);
        description_.Swap(&other->description_);
        mime_type_.UnsafeArenaSwap(&other->mime_type_);
        version_.Swap(&other->version_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_MachineCharacteristics_Plugin::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.MachineCharacteristics.Plugin";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_MachineCharacteristics_Cpu(
        Fingerprint_MachineCharacteristics_Cpu* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_MachineCharacteristics_Cpu::kVendorNameFieldNumber;
    const int Fingerprint_MachineCharacteristics_Cpu::kBrandFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_MachineCharacteristics_Cpu::Fingerprint_MachineCharacteristics_Cpu()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
    }

    void Fingerprint_MachineCharacteristics_Cpu::InitAsDefaultInstance()
    {
    }

    Fingerprint_MachineCharacteristics_Cpu::Fingerprint_MachineCharacteristics_Cpu(const Fingerprint_MachineCharacteristics_Cpu& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
    }

    void Fingerprint_MachineCharacteristics_Cpu::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        vendor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_MachineCharacteristics_Cpu::~Fingerprint_MachineCharacteristics_Cpu()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        SharedDtor();
    }

    void Fingerprint_MachineCharacteristics_Cpu::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        vendor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_MachineCharacteristics_Cpu::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_MachineCharacteristics_Cpu& Fingerprint_MachineCharacteristics_Cpu::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics_Cpu::default_instance_ = NULL;

    Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics_Cpu::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_MachineCharacteristics_Cpu* n = new Fingerprint_MachineCharacteristics_Cpu;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_MachineCharacteristics_Cpu::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        if (_has_bits_[0 / 32] & 3u) {
            if (has_vendor_name()) {
                vendor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_brand()) {
                brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_MachineCharacteristics_Cpu::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_MachineCharacteristics_Cpu, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional string vendor_name = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_vendor_name()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_brand;
                break;
            }

            // optional string brand = 2;
            case 2: {
                if (tag == 18) {
                parse_brand:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_brand()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        return false;
#undef DO_
    }

    void Fingerprint_MachineCharacteristics_Cpu::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        // optional string vendor_name = 1;
        if (has_vendor_name()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->vendor_name(), output);
        }

        // optional string brand = 2;
        if (has_brand()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->brand(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
    }

    int Fingerprint_MachineCharacteristics_Cpu::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 3u) {
            // optional string vendor_name = 1;
            if (has_vendor_name()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->vendor_name());
            }

            // optional string brand = 2;
            if (has_brand()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->brand());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_MachineCharacteristics_Cpu::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics_Cpu*>(&from));
    }

    void Fingerprint_MachineCharacteristics_Cpu::MergeFrom(const Fingerprint_MachineCharacteristics_Cpu& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_vendor_name()) {
                set_has_vendor_name();
                vendor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_name_);
            }
            if (from.has_brand()) {
                set_has_brand();
                brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_MachineCharacteristics_Cpu::CopyFrom(const Fingerprint_MachineCharacteristics_Cpu& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Cpu)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_MachineCharacteristics_Cpu::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_MachineCharacteristics_Cpu::Swap(Fingerprint_MachineCharacteristics_Cpu* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_MachineCharacteristics_Cpu::InternalSwap(Fingerprint_MachineCharacteristics_Cpu* other)
    {
        vendor_name_.Swap(&other->vendor_name_);
        brand_.Swap(&other->brand_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_MachineCharacteristics_Cpu::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.MachineCharacteristics.Cpu";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_MachineCharacteristics_Graphics(
        Fingerprint_MachineCharacteristics_Graphics* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_MachineCharacteristics_Graphics::kVendorIdFieldNumber;
    const int Fingerprint_MachineCharacteristics_Graphics::kDeviceIdFieldNumber;
    const int Fingerprint_MachineCharacteristics_Graphics::kDriverVersionFieldNumber;
    const int Fingerprint_MachineCharacteristics_Graphics::kDriverDateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_MachineCharacteristics_Graphics::Fingerprint_MachineCharacteristics_Graphics()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
    }

    void Fingerprint_MachineCharacteristics_Graphics::InitAsDefaultInstance()
    {
    }

    Fingerprint_MachineCharacteristics_Graphics::Fingerprint_MachineCharacteristics_Graphics(const Fingerprint_MachineCharacteristics_Graphics& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
    }

    void Fingerprint_MachineCharacteristics_Graphics::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        vendor_id_ = 0u;
        device_id_ = 0u;
        driver_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        driver_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_MachineCharacteristics_Graphics::~Fingerprint_MachineCharacteristics_Graphics()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        SharedDtor();
    }

    void Fingerprint_MachineCharacteristics_Graphics::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        driver_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        driver_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_MachineCharacteristics_Graphics::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_MachineCharacteristics_Graphics& Fingerprint_MachineCharacteristics_Graphics::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics_Graphics::default_instance_ = NULL;

    Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics_Graphics::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_MachineCharacteristics_Graphics* n = new Fingerprint_MachineCharacteristics_Graphics;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_MachineCharacteristics_Graphics::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                                 \
    _Pragma("clang diagnostic push")                                                                                                  \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_MachineCharacteristics_Graphics, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_MachineCharacteristics_Graphics*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 15u) {
            ZR_(vendor_id_, device_id_);
            if (has_driver_version()) {
                driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_driver_date()) {
                driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_MachineCharacteristics_Graphics::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_MachineCharacteristics_Graphics, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional uint32 vendor_id = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                        input, &vendor_id_)));
                    set_has_vendor_id();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_device_id;
                break;
            }

            // optional uint32 device_id = 2;
            case 2: {
                if (tag == 16) {
                parse_device_id:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                        input, &device_id_)));
                    set_has_device_id();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_driver_version;
                break;
            }

            // optional string driver_version = 3;
            case 3: {
                if (tag == 26) {
                parse_driver_version:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_driver_version()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_driver_date;
                break;
            }

            // optional string driver_date = 4;
            case 4: {
                if (tag == 34) {
                parse_driver_date:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_driver_date()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        return false;
#undef DO_
    }

    void Fingerprint_MachineCharacteristics_Graphics::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        // optional uint32 vendor_id = 1;
        if (has_vendor_id()) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vendor_id(), output);
        }

        // optional uint32 device_id = 2;
        if (has_device_id()) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_id(), output);
        }

        // optional string driver_version = 3;
        if (has_driver_version()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                3, this->driver_version(), output);
        }

        // optional string driver_date = 4;
        if (has_driver_date()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                4, this->driver_date(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
    }

    int Fingerprint_MachineCharacteristics_Graphics::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 15u) {
            // optional uint32 vendor_id = 1;
            if (has_vendor_id()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->vendor_id());
            }

            // optional uint32 device_id = 2;
            if (has_device_id()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->device_id());
            }

            // optional string driver_version = 3;
            if (has_driver_version()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->driver_version());
            }

            // optional string driver_date = 4;
            if (has_driver_date()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->driver_date());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_MachineCharacteristics_Graphics::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics_Graphics*>(&from));
    }

    void Fingerprint_MachineCharacteristics_Graphics::MergeFrom(const Fingerprint_MachineCharacteristics_Graphics& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_vendor_id()) {
                set_vendor_id(from.vendor_id());
            }
            if (from.has_device_id()) {
                set_device_id(from.device_id());
            }
            if (from.has_driver_version()) {
                set_has_driver_version();
                driver_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_version_);
            }
            if (from.has_driver_date()) {
                set_has_driver_date();
                driver_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_date_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_MachineCharacteristics_Graphics::CopyFrom(const Fingerprint_MachineCharacteristics_Graphics& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics.Graphics)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_MachineCharacteristics_Graphics::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_MachineCharacteristics_Graphics::Swap(Fingerprint_MachineCharacteristics_Graphics* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_MachineCharacteristics_Graphics::InternalSwap(Fingerprint_MachineCharacteristics_Graphics* other)
    {
        std::swap(vendor_id_, other->vendor_id_);
        std::swap(device_id_, other->device_id_);
        driver_version_.Swap(&other->driver_version_);
        driver_date_.Swap(&other->driver_date_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_MachineCharacteristics_Graphics::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.MachineCharacteristics.Graphics";
    }

    // -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_MachineCharacteristics::kUserAndDeviceNameHashFieldNumber;
    const int Fingerprint_MachineCharacteristics::kOperatingSystemBuildFieldNumber;
    const int Fingerprint_MachineCharacteristics::kBrowserInstallTimeHoursFieldNumber;
    const int Fingerprint_MachineCharacteristics::kFontFieldNumber;
    const int Fingerprint_MachineCharacteristics::kPluginFieldNumber;
    const int Fingerprint_MachineCharacteristics::kUtcOffsetMsFieldNumber;
    const int Fingerprint_MachineCharacteristics::kBrowserLanguageFieldNumber;
    const int Fingerprint_MachineCharacteristics::kRequestedLanguageFieldNumber;
    const int Fingerprint_MachineCharacteristics::kCharsetFieldNumber;
    const int Fingerprint_MachineCharacteristics::kScreenCountFieldNumber;
    const int Fingerprint_MachineCharacteristics::kScreenSizeFieldNumber;
    const int Fingerprint_MachineCharacteristics::kScreenColorDepthFieldNumber;
    const int Fingerprint_MachineCharacteristics::kUnavailableScreenSizeFieldNumber;
    const int Fingerprint_MachineCharacteristics::kUserAgentFieldNumber;
    const int Fingerprint_MachineCharacteristics::kPartitionSizeFieldNumber;
    const int Fingerprint_MachineCharacteristics::kCpuFieldNumber;
    const int Fingerprint_MachineCharacteristics::kRamFieldNumber;
    const int Fingerprint_MachineCharacteristics::kGraphicsCardFieldNumber;
    const int Fingerprint_MachineCharacteristics::kBrowserBuildFieldNumber;
    const int Fingerprint_MachineCharacteristics::kBrowserFeatureFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_MachineCharacteristics::Fingerprint_MachineCharacteristics()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.MachineCharacteristics)
    }

    void Fingerprint_MachineCharacteristics::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        screen_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(
            ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
#else
        screen_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(&::autofill::risk::Fingerprint_Dimension::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        unavailable_screen_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(
            ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
#else
        unavailable_screen_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(&::autofill::risk::Fingerprint_Dimension::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        cpu_ = const_cast<::autofill::risk::Fingerprint_MachineCharacteristics_Cpu*>(
            ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::internal_default_instance());
#else
        cpu_ = const_cast<::autofill::risk::Fingerprint_MachineCharacteristics_Cpu*>(&::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        graphics_card_ = const_cast<::autofill::risk::Fingerprint_MachineCharacteristics_Graphics*>(
            ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::internal_default_instance());
#else
        graphics_card_ = const_cast<::autofill::risk::Fingerprint_MachineCharacteristics_Graphics*>(&::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::default_instance());
#endif
    }

    Fingerprint_MachineCharacteristics::Fingerprint_MachineCharacteristics(const Fingerprint_MachineCharacteristics& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.MachineCharacteristics)
    }

    void Fingerprint_MachineCharacteristics::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        user_and_device_name_hash_ = GOOGLE_ULONGLONG(0);
        operating_system_build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        browser_install_time_hours_ = GOOGLE_LONGLONG(0);
        utc_offset_ms_ = GOOGLE_LONGLONG(0);
        browser_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        charset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        screen_count_ = 0;
        screen_size_ = NULL;
        screen_color_depth_ = 0;
        unavailable_screen_size_ = NULL;
        user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        cpu_ = NULL;
        ram_ = GOOGLE_LONGLONG(0);
        graphics_card_ = NULL;
        browser_build_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        browser_feature_ = 0;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_MachineCharacteristics::~Fingerprint_MachineCharacteristics()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.MachineCharacteristics)
        SharedDtor();
    }

    void Fingerprint_MachineCharacteristics::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        operating_system_build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        browser_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        charset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        browser_build_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete screen_size_;
            delete unavailable_screen_size_;
            delete cpu_;
            delete graphics_card_;
        }
    }

    void Fingerprint_MachineCharacteristics::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_MachineCharacteristics& Fingerprint_MachineCharacteristics::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_MachineCharacteristics* Fingerprint_MachineCharacteristics::default_instance_ = NULL;

    Fingerprint_MachineCharacteristics* Fingerprint_MachineCharacteristics::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_MachineCharacteristics* n = new Fingerprint_MachineCharacteristics;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_MachineCharacteristics::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.MachineCharacteristics)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                        \
    _Pragma("clang diagnostic push")                                                                                         \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_MachineCharacteristics, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_MachineCharacteristics*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 103u) {
            user_and_device_name_hash_ = GOOGLE_ULONGLONG(0);
            if (has_operating_system_build()) {
                operating_system_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            browser_install_time_hours_ = GOOGLE_LONGLONG(0);
            utc_offset_ms_ = GOOGLE_LONGLONG(0);
            if (has_browser_language()) {
                browser_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }
        if (_has_bits_[8 / 32] & 48896u) {
            ZR_(screen_count_, screen_color_depth_);
            if (has_charset()) {
                charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_screen_size()) {
                if (screen_size_ != NULL)
                    screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
            }
            if (has_unavailable_screen_size()) {
                if (unavailable_screen_size_ != NULL)
                    unavailable_screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
            }
            if (has_user_agent()) {
                user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            if (has_cpu()) {
                if (cpu_ != NULL)
                    cpu_->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::Clear();
            }
        }
        if (_has_bits_[16 / 32] & 983040u) {
            ram_ = GOOGLE_LONGLONG(0);
            if (has_graphics_card()) {
                if (graphics_card_ != NULL)
                    graphics_card_->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::Clear();
            }
            if (has_browser_build()) {
                browser_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
            browser_feature_ = 0;
        }

#undef ZR_HELPER_
#undef ZR_

        font_.Clear();
        plugin_.Clear();
        requested_language_.Clear();
        partition_size_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_MachineCharacteristics::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_MachineCharacteristics, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.MachineCharacteristics)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional fixed64 user_and_device_name_hash = 1;
            case 1: {
                if (tag == 9) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                        input, &user_and_device_name_hash_)));
                    set_has_user_and_device_name_hash();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_operating_system_build;
                break;
            }

            // optional string operating_system_build = 2;
            case 2: {
                if (tag == 18) {
                parse_operating_system_build:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_operating_system_build()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_browser_install_time_hours;
                break;
            }

            // optional int64 browser_install_time_hours = 3;
            case 3: {
                if (tag == 24) {
                parse_browser_install_time_hours:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &browser_install_time_hours_)));
                    set_has_browser_install_time_hours();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_font;
                break;
            }

            // repeated string font = 4;
            case 4: {
                if (tag == 34) {
                parse_font:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->add_font()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_font;
                if (input->ExpectTag(42))
                    goto parse_plugin;
                break;
            }

            // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
            case 5: {
                if (tag == 42) {
                parse_plugin:
                    DO_(input->IncrementRecursionDepth());
                parse_loop_plugin:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                        input, add_plugin()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_loop_plugin;
                input->UnsafeDecrementRecursionDepth();
                if (input->ExpectTag(48))
                    goto parse_utc_offset_ms;
                break;
            }

            // optional int64 utc_offset_ms = 6;
            case 6: {
                if (tag == 48) {
                parse_utc_offset_ms:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &utc_offset_ms_)));
                    set_has_utc_offset_ms();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(58))
                    goto parse_browser_language;
                break;
            }

            // optional string browser_language = 7;
            case 7: {
                if (tag == 58) {
                parse_browser_language:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_browser_language()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(66))
                    goto parse_requested_language;
                break;
            }

            // repeated string requested_language = 8;
            case 8: {
                if (tag == 66) {
                parse_requested_language:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->add_requested_language()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(66))
                    goto parse_requested_language;
                if (input->ExpectTag(74))
                    goto parse_charset;
                break;
            }

            // optional string charset = 9;
            case 9: {
                if (tag == 74) {
                parse_charset:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_charset()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(80))
                    goto parse_screen_count;
                break;
            }

            // optional int32 screen_count = 10;
            case 10: {
                if (tag == 80) {
                parse_screen_count:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &screen_count_)));
                    set_has_screen_count();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(90))
                    goto parse_screen_size;
                break;
            }

            // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
            case 11: {
                if (tag == 90) {
                parse_screen_size:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_screen_size()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(96))
                    goto parse_screen_color_depth;
                break;
            }

            // optional int32 screen_color_depth = 12;
            case 12: {
                if (tag == 96) {
                parse_screen_color_depth:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &screen_color_depth_)));
                    set_has_screen_color_depth();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(106))
                    goto parse_unavailable_screen_size;
                break;
            }

            // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
            case 13: {
                if (tag == 106) {
                parse_unavailable_screen_size:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_unavailable_screen_size()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(114))
                    goto parse_user_agent;
                break;
            }

            // optional string user_agent = 14;
            case 14: {
                if (tag == 114) {
                parse_user_agent:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_user_agent()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(120))
                    goto parse_partition_size;
                break;
            }

            // repeated int32 partition_size = 15;
            case 15: {
                if (tag == 120) {
                parse_partition_size:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        1, 120, input, this->mutable_partition_size())));
                } else if (tag == 122) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, this->mutable_partition_size())));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(120))
                    goto parse_partition_size;
                if (input->ExpectTag(130))
                    goto parse_cpu;
                break;
            }

            // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
            case 16: {
                if (tag == 130) {
                parse_cpu:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_cpu()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(136))
                    goto parse_ram;
                break;
            }

            // optional int64 ram = 17;
            case 17: {
                if (tag == 136) {
                parse_ram:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &ram_)));
                    set_has_ram();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(146))
                    goto parse_graphics_card;
                break;
            }

            // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
            case 18: {
                if (tag == 146) {
                parse_graphics_card:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_graphics_card()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(154))
                    goto parse_browser_build;
                break;
            }

            // optional string browser_build = 19;
            case 19: {
                if (tag == 154) {
                parse_browser_build:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_browser_build()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(160))
                    goto parse_browser_feature;
                break;
            }

            // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
            case 20: {
                if (tag == 160) {
                parse_browser_feature:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                        input, &value)));
                    if (::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(value)) {
                        set_browser_feature(static_cast<::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature>(value));
                    } else {
                        unknown_fields_stream.WriteVarint32(160);
                        unknown_fields_stream.WriteVarint32(value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.MachineCharacteristics)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.MachineCharacteristics)
        return false;
#undef DO_
    }

    void Fingerprint_MachineCharacteristics::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.MachineCharacteristics)
        // optional fixed64 user_and_device_name_hash = 1;
        if (has_user_and_device_name_hash()) {
            ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_and_device_name_hash(), output);
        }

        // optional string operating_system_build = 2;
        if (has_operating_system_build()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->operating_system_build(), output);
        }

        // optional int64 browser_install_time_hours = 3;
        if (has_browser_install_time_hours()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->browser_install_time_hours(), output);
        }

        // repeated string font = 4;
        for (int i = 0; i < this->font_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteString(
                4, this->font(i), output);
        }

        // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
        for (unsigned int i = 0, n = this->plugin_size(); i < n; i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, this->plugin(i), output);
        }

        // optional int64 utc_offset_ms = 6;
        if (has_utc_offset_ms()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->utc_offset_ms(), output);
        }

        // optional string browser_language = 7;
        if (has_browser_language()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                7, this->browser_language(), output);
        }

        // repeated string requested_language = 8;
        for (int i = 0; i < this->requested_language_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteString(
                8, this->requested_language(i), output);
        }

        // optional string charset = 9;
        if (has_charset()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                9, this->charset(), output);
        }

        // optional int32 screen_count = 10;
        if (has_screen_count()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->screen_count(), output);
        }

        // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
        if (has_screen_size()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                11, *this->screen_size_, output);
        }

        // optional int32 screen_color_depth = 12;
        if (has_screen_color_depth()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->screen_color_depth(), output);
        }

        // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
        if (has_unavailable_screen_size()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                13, *this->unavailable_screen_size_, output);
        }

        // optional string user_agent = 14;
        if (has_user_agent()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                14, this->user_agent(), output);
        }

        // repeated int32 partition_size = 15;
        for (int i = 0; i < this->partition_size_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(
                15, this->partition_size(i), output);
        }

        // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
        if (has_cpu()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                16, *this->cpu_, output);
        }

        // optional int64 ram = 17;
        if (has_ram()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->ram(), output);
        }

        // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
        if (has_graphics_card()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                18, *this->graphics_card_, output);
        }

        // optional string browser_build = 19;
        if (has_browser_build()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                19, this->browser_build(), output);
        }

        // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
        if (has_browser_feature()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                20, this->browser_feature(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.MachineCharacteristics)
    }

    int Fingerprint_MachineCharacteristics::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.MachineCharacteristics)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 103u) {
            // optional fixed64 user_and_device_name_hash = 1;
            if (has_user_and_device_name_hash()) {
                total_size += 1 + 8;
            }

            // optional string operating_system_build = 2;
            if (has_operating_system_build()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->operating_system_build());
            }

            // optional int64 browser_install_time_hours = 3;
            if (has_browser_install_time_hours()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->browser_install_time_hours());
            }

            // optional int64 utc_offset_ms = 6;
            if (has_utc_offset_ms()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->utc_offset_ms());
            }

            // optional string browser_language = 7;
            if (has_browser_language()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->browser_language());
            }
        }
        if (_has_bits_[8 / 32] & 48896u) {
            // optional string charset = 9;
            if (has_charset()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->charset());
            }

            // optional int32 screen_count = 10;
            if (has_screen_count()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->screen_count());
            }

            // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
            if (has_screen_size()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->screen_size_);
            }

            // optional int32 screen_color_depth = 12;
            if (has_screen_color_depth()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->screen_color_depth());
            }

            // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
            if (has_unavailable_screen_size()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->unavailable_screen_size_);
            }

            // optional string user_agent = 14;
            if (has_user_agent()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->user_agent());
            }

            // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
            if (has_cpu()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->cpu_);
            }
        }
        if (_has_bits_[16 / 32] & 983040u) {
            // optional int64 ram = 17;
            if (has_ram()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->ram());
            }

            // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
            if (has_graphics_card()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->graphics_card_);
            }

            // optional string browser_build = 19;
            if (has_browser_build()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->browser_build());
            }

            // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
            if (has_browser_feature()) {
                total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->browser_feature());
            }
        }
        // repeated string font = 4;
        total_size += 1 * this->font_size();
        for (int i = 0; i < this->font_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                this->font(i));
        }

        // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
        total_size += 1 * this->plugin_size();
        for (int i = 0; i < this->plugin_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->plugin(i));
        }

        // repeated string requested_language = 8;
        total_size += 1 * this->requested_language_size();
        for (int i = 0; i < this->requested_language_size(); i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                this->requested_language(i));
        }

        // repeated int32 partition_size = 15;
        {
            int data_size = 0;
            for (int i = 0; i < this->partition_size_size(); i++) {
                data_size += ::google::protobuf::internal::WireFormatLite::
                    Int32Size(this->partition_size(i));
            }
            total_size += 1 * this->partition_size_size() + data_size;
        }

        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_MachineCharacteristics::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_MachineCharacteristics*>(&from));
    }

    void Fingerprint_MachineCharacteristics::MergeFrom(const Fingerprint_MachineCharacteristics& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.MachineCharacteristics)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        font_.MergeFrom(from.font_);
        plugin_.MergeFrom(from.plugin_);
        requested_language_.MergeFrom(from.requested_language_);
        partition_size_.MergeFrom(from.partition_size_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_user_and_device_name_hash()) {
                set_user_and_device_name_hash(from.user_and_device_name_hash());
            }
            if (from.has_operating_system_build()) {
                set_has_operating_system_build();
                operating_system_build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operating_system_build_);
            }
            if (from.has_browser_install_time_hours()) {
                set_browser_install_time_hours(from.browser_install_time_hours());
            }
            if (from.has_utc_offset_ms()) {
                set_utc_offset_ms(from.utc_offset_ms());
            }
            if (from.has_browser_language()) {
                set_has_browser_language();
                browser_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_language_);
            }
        }
        if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
            if (from.has_charset()) {
                set_has_charset();
                charset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.charset_);
            }
            if (from.has_screen_count()) {
                set_screen_count(from.screen_count());
            }
            if (from.has_screen_size()) {
                mutable_screen_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.screen_size());
            }
            if (from.has_screen_color_depth()) {
                set_screen_color_depth(from.screen_color_depth());
            }
            if (from.has_unavailable_screen_size()) {
                mutable_unavailable_screen_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.unavailable_screen_size());
            }
            if (from.has_user_agent()) {
                set_has_user_agent();
                user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
            }
            if (from.has_cpu()) {
                mutable_cpu()->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::MergeFrom(from.cpu());
            }
        }
        if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
            if (from.has_ram()) {
                set_ram(from.ram());
            }
            if (from.has_graphics_card()) {
                mutable_graphics_card()->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::MergeFrom(from.graphics_card());
            }
            if (from.has_browser_build()) {
                set_has_browser_build();
                browser_build_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.browser_build_);
            }
            if (from.has_browser_feature()) {
                set_browser_feature(from.browser_feature());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_MachineCharacteristics::CopyFrom(const Fingerprint_MachineCharacteristics& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.MachineCharacteristics)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_MachineCharacteristics::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_MachineCharacteristics::Swap(Fingerprint_MachineCharacteristics* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_MachineCharacteristics::InternalSwap(Fingerprint_MachineCharacteristics* other)
    {
        std::swap(user_and_device_name_hash_, other->user_and_device_name_hash_);
        operating_system_build_.Swap(&other->operating_system_build_);
        std::swap(browser_install_time_hours_, other->browser_install_time_hours_);
        font_.UnsafeArenaSwap(&other->font_);
        plugin_.UnsafeArenaSwap(&other->plugin_);
        std::swap(utc_offset_ms_, other->utc_offset_ms_);
        browser_language_.Swap(&other->browser_language_);
        requested_language_.UnsafeArenaSwap(&other->requested_language_);
        charset_.Swap(&other->charset_);
        std::swap(screen_count_, other->screen_count_);
        std::swap(screen_size_, other->screen_size_);
        std::swap(screen_color_depth_, other->screen_color_depth_);
        std::swap(unavailable_screen_size_, other->unavailable_screen_size_);
        user_agent_.Swap(&other->user_agent_);
        partition_size_.UnsafeArenaSwap(&other->partition_size_);
        std::swap(cpu_, other->cpu_);
        std::swap(ram_, other->ram_);
        std::swap(graphics_card_, other->graphics_card_);
        browser_build_.Swap(&other->browser_build_);
        std::swap(browser_feature_, other->browser_feature_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_MachineCharacteristics::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.MachineCharacteristics";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_TransientState(
        Fingerprint_TransientState* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_TransientState::kInnerWindowSizeFieldNumber;
    const int Fingerprint_TransientState::kOuterWindowSizeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_TransientState::Fingerprint_TransientState()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.TransientState)
    }

    void Fingerprint_TransientState::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        inner_window_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(
            ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
#else
        inner_window_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(&::autofill::risk::Fingerprint_Dimension::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        outer_window_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(
            ::autofill::risk::Fingerprint_Dimension::internal_default_instance());
#else
        outer_window_size_ = const_cast<::autofill::risk::Fingerprint_Dimension*>(&::autofill::risk::Fingerprint_Dimension::default_instance());
#endif
    }

    Fingerprint_TransientState::Fingerprint_TransientState(const Fingerprint_TransientState& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.TransientState)
    }

    void Fingerprint_TransientState::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        inner_window_size_ = NULL;
        outer_window_size_ = NULL;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_TransientState::~Fingerprint_TransientState()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.TransientState)
        SharedDtor();
    }

    void Fingerprint_TransientState::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete inner_window_size_;
            delete outer_window_size_;
        }
    }

    void Fingerprint_TransientState::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_TransientState& Fingerprint_TransientState::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_TransientState* Fingerprint_TransientState::default_instance_ = NULL;

    Fingerprint_TransientState* Fingerprint_TransientState::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_TransientState* n = new Fingerprint_TransientState;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_TransientState::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.TransientState)
        if (_has_bits_[0 / 32] & 3u) {
            if (has_inner_window_size()) {
                if (inner_window_size_ != NULL)
                    inner_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
            }
            if (has_outer_window_size()) {
                if (outer_window_size_ != NULL)
                    outer_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_TransientState::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_TransientState, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.TransientState)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_inner_window_size()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_outer_window_size;
                break;
            }

            // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
            case 2: {
                if (tag == 18) {
                parse_outer_window_size:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_outer_window_size()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.TransientState)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.TransientState)
        return false;
#undef DO_
    }

    void Fingerprint_TransientState::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.TransientState)
        // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
        if (has_inner_window_size()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                1, *this->inner_window_size_, output);
        }

        // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
        if (has_outer_window_size()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, *this->outer_window_size_, output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.TransientState)
    }

    int Fingerprint_TransientState::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.TransientState)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 3u) {
            // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
            if (has_inner_window_size()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->inner_window_size_);
            }

            // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
            if (has_outer_window_size()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->outer_window_size_);
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_TransientState::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_TransientState*>(&from));
    }

    void Fingerprint_TransientState::MergeFrom(const Fingerprint_TransientState& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.TransientState)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_inner_window_size()) {
                mutable_inner_window_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.inner_window_size());
            }
            if (from.has_outer_window_size()) {
                mutable_outer_window_size()->::autofill::risk::Fingerprint_Dimension::MergeFrom(from.outer_window_size());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_TransientState::CopyFrom(const Fingerprint_TransientState& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.TransientState)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_TransientState::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_TransientState::Swap(Fingerprint_TransientState* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_TransientState::InternalSwap(Fingerprint_TransientState* other)
    {
        std::swap(inner_window_size_, other->inner_window_size_);
        std::swap(outer_window_size_, other->outer_window_size_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_TransientState::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.TransientState";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_Performance(
        Fingerprint_Performance* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_Performance::kBandwidthFieldNumber;
    const int Fingerprint_Performance::kMeteredFieldNumber;
    const int Fingerprint_Performance::kNetworkTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_Performance::Fingerprint_Performance()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Performance)
    }

    void Fingerprint_Performance::InitAsDefaultInstance()
    {
    }

    Fingerprint_Performance::Fingerprint_Performance(const Fingerprint_Performance& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Performance)
    }

    void Fingerprint_Performance::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        bandwidth_ = 0;
        metered_ = false;
        network_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_Performance::~Fingerprint_Performance()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Performance)
        SharedDtor();
    }

    void Fingerprint_Performance::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        network_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_Performance::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_Performance& Fingerprint_Performance::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_Performance* Fingerprint_Performance::default_instance_ = NULL;

    Fingerprint_Performance* Fingerprint_Performance::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_Performance* n = new Fingerprint_Performance;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_Performance::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Performance)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                             \
    _Pragma("clang diagnostic push")                                                                              \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_Performance, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_Performance*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 7u) {
            ZR_(bandwidth_, metered_);
            if (has_network_type()) {
                network_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
            }
        }

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_Performance::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_Performance, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Performance)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional float bandwidth = 1;
            case 1: {
                if (tag == 13) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &bandwidth_)));
                    set_has_bandwidth();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_metered;
                break;
            }

            // optional bool metered = 2;
            case 2: {
                if (tag == 16) {
                parse_metered:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                        input, &metered_)));
                    set_has_metered();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_network_type;
                break;
            }

            // optional string network_type = 3;
            case 3: {
                if (tag == 26) {
                parse_network_type:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_network_type()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Performance)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Performance)
        return false;
#undef DO_
    }

    void Fingerprint_Performance::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Performance)
        // optional float bandwidth = 1;
        if (has_bandwidth()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bandwidth(), output);
        }

        // optional bool metered = 2;
        if (has_metered()) {
            ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->metered(), output);
        }

        // optional string network_type = 3;
        if (has_network_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                3, this->network_type(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Performance)
    }

    int Fingerprint_Performance::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Performance)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 7u) {
            // optional float bandwidth = 1;
            if (has_bandwidth()) {
                total_size += 1 + 4;
            }

            // optional bool metered = 2;
            if (has_metered()) {
                total_size += 1 + 1;
            }

            // optional string network_type = 3;
            if (has_network_type()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->network_type());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_Performance::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_Performance*>(&from));
    }

    void Fingerprint_Performance::MergeFrom(const Fingerprint_Performance& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Performance)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_bandwidth()) {
                set_bandwidth(from.bandwidth());
            }
            if (from.has_metered()) {
                set_metered(from.metered());
            }
            if (from.has_network_type()) {
                set_has_network_type();
                network_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_type_);
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_Performance::CopyFrom(const Fingerprint_Performance& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Performance)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_Performance::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_Performance::Swap(Fingerprint_Performance* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_Performance::InternalSwap(Fingerprint_Performance* other)
    {
        std::swap(bandwidth_, other->bandwidth_);
        std::swap(metered_, other->metered_);
        network_type_.Swap(&other->network_type_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_Performance::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.Performance";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_UserCharacteristics(
        Fingerprint_UserCharacteristics* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

    static ::std::string* MutableUnknownFieldsForFingerprint_UserCharacteristics_Vector(
        Fingerprint_UserCharacteristics_Vector* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_UserCharacteristics_Vector::kXFieldNumber;
    const int Fingerprint_UserCharacteristics_Vector::kYFieldNumber;
    const int Fingerprint_UserCharacteristics_Vector::kZFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_UserCharacteristics_Vector::Fingerprint_UserCharacteristics_Vector()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
    }

    void Fingerprint_UserCharacteristics_Vector::InitAsDefaultInstance()
    {
    }

    Fingerprint_UserCharacteristics_Vector::Fingerprint_UserCharacteristics_Vector(const Fingerprint_UserCharacteristics_Vector& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
    }

    void Fingerprint_UserCharacteristics_Vector::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        x_ = 0;
        y_ = 0;
        z_ = 0;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_UserCharacteristics_Vector::~Fingerprint_UserCharacteristics_Vector()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        SharedDtor();
    }

    void Fingerprint_UserCharacteristics_Vector::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_UserCharacteristics_Vector::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics_Vector::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics_Vector::default_instance_ = NULL;

    Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics_Vector::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_UserCharacteristics_Vector* n = new Fingerprint_UserCharacteristics_Vector;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_UserCharacteristics_Vector::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                            \
    _Pragma("clang diagnostic push")                                                                                             \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_UserCharacteristics_Vector, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_UserCharacteristics_Vector*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_UserCharacteristics_Vector::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_UserCharacteristics_Vector, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional int32 x = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &x_)));
                    set_has_x();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_y;
                break;
            }

            // optional int32 y = 2;
            case 2: {
                if (tag == 16) {
                parse_y:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &y_)));
                    set_has_y();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_z;
                break;
            }

            // optional int32 z = 3;
            case 3: {
                if (tag == 24) {
                parse_z:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &z_)));
                    set_has_z();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        return false;
#undef DO_
    }

    void Fingerprint_UserCharacteristics_Vector::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        // optional int32 x = 1;
        if (has_x()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
        }

        // optional int32 y = 2;
        if (has_y()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
        }

        // optional int32 z = 3;
        if (has_z()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics.Vector)
    }

    int Fingerprint_UserCharacteristics_Vector::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 7u) {
            // optional int32 x = 1;
            if (has_x()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->x());
            }

            // optional int32 y = 2;
            if (has_y()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->y());
            }

            // optional int32 z = 3;
            if (has_z()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->z());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_UserCharacteristics_Vector::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_UserCharacteristics_Vector*>(&from));
    }

    void Fingerprint_UserCharacteristics_Vector::MergeFrom(const Fingerprint_UserCharacteristics_Vector& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_x()) {
                set_x(from.x());
            }
            if (from.has_y()) {
                set_y(from.y());
            }
            if (from.has_z()) {
                set_z(from.z());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_UserCharacteristics_Vector::CopyFrom(const Fingerprint_UserCharacteristics_Vector& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics.Vector)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_UserCharacteristics_Vector::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_UserCharacteristics_Vector::Swap(Fingerprint_UserCharacteristics_Vector* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_UserCharacteristics_Vector::InternalSwap(Fingerprint_UserCharacteristics_Vector* other)
    {
        std::swap(x_, other->x_);
        std::swap(y_, other->y_);
        std::swap(z_, other->z_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_UserCharacteristics_Vector::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.UserCharacteristics.Vector";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_UserCharacteristics_Location(
        Fingerprint_UserCharacteristics_Location* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_UserCharacteristics_Location::kAltitudeFieldNumber;
    const int Fingerprint_UserCharacteristics_Location::kLatitudeFieldNumber;
    const int Fingerprint_UserCharacteristics_Location::kLongitudeFieldNumber;
    const int Fingerprint_UserCharacteristics_Location::kAccuracyFieldNumber;
    const int Fingerprint_UserCharacteristics_Location::kTimeInMsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_UserCharacteristics_Location::Fingerprint_UserCharacteristics_Location()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
    }

    void Fingerprint_UserCharacteristics_Location::InitAsDefaultInstance()
    {
    }

    Fingerprint_UserCharacteristics_Location::Fingerprint_UserCharacteristics_Location(const Fingerprint_UserCharacteristics_Location& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
    }

    void Fingerprint_UserCharacteristics_Location::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        altitude_ = 0;
        latitude_ = 0;
        longitude_ = 0;
        accuracy_ = 0;
        time_in_ms_ = GOOGLE_LONGLONG(0);
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_UserCharacteristics_Location::~Fingerprint_UserCharacteristics_Location()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics.Location)
        SharedDtor();
    }

    void Fingerprint_UserCharacteristics_Location::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_UserCharacteristics_Location::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_UserCharacteristics_Location& Fingerprint_UserCharacteristics_Location::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics_Location::default_instance_ = NULL;

    Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics_Location::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_UserCharacteristics_Location* n = new Fingerprint_UserCharacteristics_Location;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_UserCharacteristics_Location::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                              \
    _Pragma("clang diagnostic push")                                                                                               \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_UserCharacteristics_Location, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_UserCharacteristics_Location*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 31u) {
            ZR_(altitude_, time_in_ms_);
        }

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_UserCharacteristics_Location::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_UserCharacteristics_Location, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional double altitude = 1;
            case 1: {
                if (tag == 9) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, &altitude_)));
                    set_has_altitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(17))
                    goto parse_latitude;
                break;
            }

            // optional double latitude = 2;
            case 2: {
                if (tag == 17) {
                parse_latitude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, &latitude_)));
                    set_has_latitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(25))
                    goto parse_longitude;
                break;
            }

            // optional double longitude = 3;
            case 3: {
                if (tag == 25) {
                parse_longitude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, &longitude_)));
                    set_has_longitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(33))
                    goto parse_accuracy;
                break;
            }

            // optional double accuracy = 4;
            case 4: {
                if (tag == 33) {
                parse_accuracy:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                        input, &accuracy_)));
                    set_has_accuracy();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(40))
                    goto parse_time_in_ms;
                break;
            }

            // optional int64 time_in_ms = 5;
            case 5: {
                if (tag == 40) {
                parse_time_in_ms:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &time_in_ms_)));
                    set_has_time_in_ms();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics.Location)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics.Location)
        return false;
#undef DO_
    }

    void Fingerprint_UserCharacteristics_Location::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
        // optional double altitude = 1;
        if (has_altitude()) {
            ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->altitude(), output);
        }

        // optional double latitude = 2;
        if (has_latitude()) {
            ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
        }

        // optional double longitude = 3;
        if (has_longitude()) {
            ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
        }

        // optional double accuracy = 4;
        if (has_accuracy()) {
            ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accuracy(), output);
        }

        // optional int64 time_in_ms = 5;
        if (has_time_in_ms()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time_in_ms(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics.Location)
    }

    int Fingerprint_UserCharacteristics_Location::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 31u) {
            // optional double altitude = 1;
            if (has_altitude()) {
                total_size += 1 + 8;
            }

            // optional double latitude = 2;
            if (has_latitude()) {
                total_size += 1 + 8;
            }

            // optional double longitude = 3;
            if (has_longitude()) {
                total_size += 1 + 8;
            }

            // optional double accuracy = 4;
            if (has_accuracy()) {
                total_size += 1 + 8;
            }

            // optional int64 time_in_ms = 5;
            if (has_time_in_ms()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->time_in_ms());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_UserCharacteristics_Location::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_UserCharacteristics_Location*>(&from));
    }

    void Fingerprint_UserCharacteristics_Location::MergeFrom(const Fingerprint_UserCharacteristics_Location& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_altitude()) {
                set_altitude(from.altitude());
            }
            if (from.has_latitude()) {
                set_latitude(from.latitude());
            }
            if (from.has_longitude()) {
                set_longitude(from.longitude());
            }
            if (from.has_accuracy()) {
                set_accuracy(from.accuracy());
            }
            if (from.has_time_in_ms()) {
                set_time_in_ms(from.time_in_ms());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_UserCharacteristics_Location::CopyFrom(const Fingerprint_UserCharacteristics_Location& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics.Location)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_UserCharacteristics_Location::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_UserCharacteristics_Location::Swap(Fingerprint_UserCharacteristics_Location* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_UserCharacteristics_Location::InternalSwap(Fingerprint_UserCharacteristics_Location* other)
    {
        std::swap(altitude_, other->altitude_);
        std::swap(latitude_, other->latitude_);
        std::swap(longitude_, other->longitude_);
        std::swap(accuracy_, other->accuracy_);
        std::swap(time_in_ms_, other->time_in_ms_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_UserCharacteristics_Location::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.UserCharacteristics.Location";
    }

    // -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_UserCharacteristics::kForceFieldNumber;
    const int Fingerprint_UserCharacteristics::kTouchWidthFieldNumber;
    const int Fingerprint_UserCharacteristics::kTouchHeightFieldNumber;
    const int Fingerprint_UserCharacteristics::kTouchRotationFieldNumber;
    const int Fingerprint_UserCharacteristics::kDeviceOrientationFieldNumber;
    const int Fingerprint_UserCharacteristics::kDeviceAccelerationFieldNumber;
    const int Fingerprint_UserCharacteristics::kLocationFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_UserCharacteristics::Fingerprint_UserCharacteristics()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.UserCharacteristics)
    }

    void Fingerprint_UserCharacteristics::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        device_orientation_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(
            ::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance());
#else
        device_orientation_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(&::autofill::risk::Fingerprint_UserCharacteristics_Vector::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        device_acceleration_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(
            ::autofill::risk::Fingerprint_UserCharacteristics_Vector::internal_default_instance());
#else
        device_acceleration_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics_Vector*>(&::autofill::risk::Fingerprint_UserCharacteristics_Vector::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        location_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics_Location*>(
            ::autofill::risk::Fingerprint_UserCharacteristics_Location::internal_default_instance());
#else
        location_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics_Location*>(&::autofill::risk::Fingerprint_UserCharacteristics_Location::default_instance());
#endif
    }

    Fingerprint_UserCharacteristics::Fingerprint_UserCharacteristics(const Fingerprint_UserCharacteristics& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.UserCharacteristics)
    }

    void Fingerprint_UserCharacteristics::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        force_ = 0;
        touch_width_ = 0;
        touch_height_ = 0;
        touch_rotation_ = 0;
        device_orientation_ = NULL;
        device_acceleration_ = NULL;
        location_ = NULL;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_UserCharacteristics::~Fingerprint_UserCharacteristics()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.UserCharacteristics)
        SharedDtor();
    }

    void Fingerprint_UserCharacteristics::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete device_orientation_;
            delete device_acceleration_;
            delete location_;
        }
    }

    void Fingerprint_UserCharacteristics::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_UserCharacteristics& Fingerprint_UserCharacteristics::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_UserCharacteristics* Fingerprint_UserCharacteristics::default_instance_ = NULL;

    Fingerprint_UserCharacteristics* Fingerprint_UserCharacteristics::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_UserCharacteristics* n = new Fingerprint_UserCharacteristics;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_UserCharacteristics::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.UserCharacteristics)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                     \
    _Pragma("clang diagnostic push")                                                                                      \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_UserCharacteristics, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_UserCharacteristics*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        if (_has_bits_[0 / 32] & 127u) {
            ZR_(force_, touch_rotation_);
            if (has_device_orientation()) {
                if (device_orientation_ != NULL)
                    device_orientation_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
            }
            if (has_device_acceleration()) {
                if (device_acceleration_ != NULL)
                    device_acceleration_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
            }
            if (has_location()) {
                if (location_ != NULL)
                    location_->::autofill::risk::Fingerprint_UserCharacteristics_Location::Clear();
            }
        }

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_UserCharacteristics::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_UserCharacteristics, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.UserCharacteristics)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional float force = 1;
            case 1: {
                if (tag == 13) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &force_)));
                    set_has_force();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(21))
                    goto parse_touch_width;
                break;
            }

            // optional float touch_width = 2;
            case 2: {
                if (tag == 21) {
                parse_touch_width:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &touch_width_)));
                    set_has_touch_width();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(29))
                    goto parse_touch_height;
                break;
            }

            // optional float touch_height = 3;
            case 3: {
                if (tag == 29) {
                parse_touch_height:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                        input, &touch_height_)));
                    set_has_touch_height();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32))
                    goto parse_touch_rotation;
                break;
            }

            // optional int32 touch_rotation = 4;
            case 4: {
                if (tag == 32) {
                parse_touch_rotation:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &touch_rotation_)));
                    set_has_touch_rotation();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_device_orientation;
                break;
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
            case 5: {
                if (tag == 42) {
                parse_device_orientation:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_device_orientation()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(50))
                    goto parse_device_acceleration;
                break;
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
            case 6: {
                if (tag == 50) {
                parse_device_acceleration:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_device_acceleration()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(58))
                    goto parse_location;
                break;
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
            case 7: {
                if (tag == 58) {
                parse_location:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_location()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.UserCharacteristics)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.UserCharacteristics)
        return false;
#undef DO_
    }

    void Fingerprint_UserCharacteristics::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.UserCharacteristics)
        // optional float force = 1;
        if (has_force()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->force(), output);
        }

        // optional float touch_width = 2;
        if (has_touch_width()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->touch_width(), output);
        }

        // optional float touch_height = 3;
        if (has_touch_height()) {
            ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->touch_height(), output);
        }

        // optional int32 touch_rotation = 4;
        if (has_touch_rotation()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->touch_rotation(), output);
        }

        // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
        if (has_device_orientation()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, *this->device_orientation_, output);
        }

        // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
        if (has_device_acceleration()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                6, *this->device_acceleration_, output);
        }

        // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
        if (has_location()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                7, *this->location_, output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.UserCharacteristics)
    }

    int Fingerprint_UserCharacteristics::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.UserCharacteristics)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 127u) {
            // optional float force = 1;
            if (has_force()) {
                total_size += 1 + 4;
            }

            // optional float touch_width = 2;
            if (has_touch_width()) {
                total_size += 1 + 4;
            }

            // optional float touch_height = 3;
            if (has_touch_height()) {
                total_size += 1 + 4;
            }

            // optional int32 touch_rotation = 4;
            if (has_touch_rotation()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->touch_rotation());
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
            if (has_device_orientation()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_orientation_);
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
            if (has_device_acceleration()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->device_acceleration_);
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
            if (has_location()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->location_);
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_UserCharacteristics::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_UserCharacteristics*>(&from));
    }

    void Fingerprint_UserCharacteristics::MergeFrom(const Fingerprint_UserCharacteristics& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.UserCharacteristics)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_force()) {
                set_force(from.force());
            }
            if (from.has_touch_width()) {
                set_touch_width(from.touch_width());
            }
            if (from.has_touch_height()) {
                set_touch_height(from.touch_height());
            }
            if (from.has_touch_rotation()) {
                set_touch_rotation(from.touch_rotation());
            }
            if (from.has_device_orientation()) {
                mutable_device_orientation()->::autofill::risk::Fingerprint_UserCharacteristics_Vector::MergeFrom(from.device_orientation());
            }
            if (from.has_device_acceleration()) {
                mutable_device_acceleration()->::autofill::risk::Fingerprint_UserCharacteristics_Vector::MergeFrom(from.device_acceleration());
            }
            if (from.has_location()) {
                mutable_location()->::autofill::risk::Fingerprint_UserCharacteristics_Location::MergeFrom(from.location());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_UserCharacteristics::CopyFrom(const Fingerprint_UserCharacteristics& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.UserCharacteristics)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_UserCharacteristics::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_UserCharacteristics::Swap(Fingerprint_UserCharacteristics* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_UserCharacteristics::InternalSwap(Fingerprint_UserCharacteristics* other)
    {
        std::swap(force_, other->force_);
        std::swap(touch_width_, other->touch_width_);
        std::swap(touch_height_, other->touch_height_);
        std::swap(touch_rotation_, other->touch_rotation_);
        std::swap(device_orientation_, other->device_orientation_);
        std::swap(device_acceleration_, other->device_acceleration_);
        std::swap(location_, other->location_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_UserCharacteristics::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.UserCharacteristics";
    }

    // -------------------------------------------------------------------

    static ::std::string* MutableUnknownFieldsForFingerprint_Metadata(
        Fingerprint_Metadata* ptr)
    {
        return ptr->mutable_unknown_fields();
    }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint_Metadata::kTimestampMsFieldNumber;
    const int Fingerprint_Metadata::kObfuscatedGaiaIdFieldNumber;
    const int Fingerprint_Metadata::kFingerprinterVersionFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint_Metadata::Fingerprint_Metadata()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint.Metadata)
    }

    void Fingerprint_Metadata::InitAsDefaultInstance()
    {
    }

    Fingerprint_Metadata::Fingerprint_Metadata(const Fingerprint_Metadata& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint.Metadata)
    }

    void Fingerprint_Metadata::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        timestamp_ms_ = GOOGLE_LONGLONG(0);
        obfuscated_gaia_id_ = GOOGLE_ULONGLONG(0);
        fingerprinter_version_ = 0;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint_Metadata::~Fingerprint_Metadata()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint.Metadata)
        SharedDtor();
    }

    void Fingerprint_Metadata::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
        }
    }

    void Fingerprint_Metadata::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint_Metadata& Fingerprint_Metadata::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint_Metadata* Fingerprint_Metadata::default_instance_ = NULL;

    Fingerprint_Metadata* Fingerprint_Metadata::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint_Metadata* n = new Fingerprint_Metadata;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint_Metadata::Clear()
    {
// @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint.Metadata)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                          \
    _Pragma("clang diagnostic push")                                                                           \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(Fingerprint_Metadata, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<Fingerprint_Metadata*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

        ZR_(timestamp_ms_, fingerprinter_version_);

#undef ZR_HELPER_
#undef ZR_

        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint_Metadata::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint_Metadata, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint.Metadata)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional int64 timestamp_ms = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                        input, &timestamp_ms_)));
                    set_has_timestamp_ms();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16))
                    goto parse_obfuscated_gaia_id;
                break;
            }

            // optional uint64 obfuscated_gaia_id = 2;
            case 2: {
                if (tag == 16) {
                parse_obfuscated_gaia_id:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                        input, &obfuscated_gaia_id_)));
                    set_has_obfuscated_gaia_id();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24))
                    goto parse_fingerprinter_version;
                break;
            }

            // optional int32 fingerprinter_version = 3;
            case 3: {
                if (tag == 24) {
                parse_fingerprinter_version:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                        input, &fingerprinter_version_)));
                    set_has_fingerprinter_version();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint.Metadata)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint.Metadata)
        return false;
#undef DO_
    }

    void Fingerprint_Metadata::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint.Metadata)
        // optional int64 timestamp_ms = 1;
        if (has_timestamp_ms()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
        }

        // optional uint64 obfuscated_gaia_id = 2;
        if (has_obfuscated_gaia_id()) {
            ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->obfuscated_gaia_id(), output);
        }

        // optional int32 fingerprinter_version = 3;
        if (has_fingerprinter_version()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fingerprinter_version(), output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint.Metadata)
    }

    int Fingerprint_Metadata::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint.Metadata)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 7u) {
            // optional int64 timestamp_ms = 1;
            if (has_timestamp_ms()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp_ms());
            }

            // optional uint64 obfuscated_gaia_id = 2;
            if (has_obfuscated_gaia_id()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->obfuscated_gaia_id());
            }

            // optional int32 fingerprinter_version = 3;
            if (has_fingerprinter_version()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->fingerprinter_version());
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint_Metadata::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint_Metadata*>(&from));
    }

    void Fingerprint_Metadata::MergeFrom(const Fingerprint_Metadata& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint.Metadata)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_timestamp_ms()) {
                set_timestamp_ms(from.timestamp_ms());
            }
            if (from.has_obfuscated_gaia_id()) {
                set_obfuscated_gaia_id(from.obfuscated_gaia_id());
            }
            if (from.has_fingerprinter_version()) {
                set_fingerprinter_version(from.fingerprinter_version());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint_Metadata::CopyFrom(const Fingerprint_Metadata& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint.Metadata)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint_Metadata::IsInitialized() const
    {

        return true;
    }

    void Fingerprint_Metadata::Swap(Fingerprint_Metadata* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint_Metadata::InternalSwap(Fingerprint_Metadata* other)
    {
        std::swap(timestamp_ms_, other->timestamp_ms_);
        std::swap(obfuscated_gaia_id_, other->obfuscated_gaia_id_);
        std::swap(fingerprinter_version_, other->fingerprinter_version_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint_Metadata::GetTypeName() const
    {
        return "autofill.risk.Fingerprint.Metadata";
    }

    // -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int Fingerprint::kMachineCharacteristicsFieldNumber;
    const int Fingerprint::kPerformanceFieldNumber;
    const int Fingerprint::kUserCharacteristicsFieldNumber;
    const int Fingerprint::kTransientStateFieldNumber;
    const int Fingerprint::kMetadataFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    Fingerprint::Fingerprint()
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        // @@protoc_insertion_point(constructor:autofill.risk.Fingerprint)
    }

    void Fingerprint::InitAsDefaultInstance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        machine_characteristics_ = const_cast<::autofill::risk::Fingerprint_MachineCharacteristics*>(
            ::autofill::risk::Fingerprint_MachineCharacteristics::internal_default_instance());
#else
        machine_characteristics_ = const_cast<::autofill::risk::Fingerprint_MachineCharacteristics*>(&::autofill::risk::Fingerprint_MachineCharacteristics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        performance_ = const_cast<::autofill::risk::Fingerprint_Performance*>(
            ::autofill::risk::Fingerprint_Performance::internal_default_instance());
#else
        performance_ = const_cast<::autofill::risk::Fingerprint_Performance*>(&::autofill::risk::Fingerprint_Performance::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        user_characteristics_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics*>(
            ::autofill::risk::Fingerprint_UserCharacteristics::internal_default_instance());
#else
        user_characteristics_ = const_cast<::autofill::risk::Fingerprint_UserCharacteristics*>(&::autofill::risk::Fingerprint_UserCharacteristics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        transient_state_ = const_cast<::autofill::risk::Fingerprint_TransientState*>(
            ::autofill::risk::Fingerprint_TransientState::internal_default_instance());
#else
        transient_state_ = const_cast<::autofill::risk::Fingerprint_TransientState*>(&::autofill::risk::Fingerprint_TransientState::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        metadata_ = const_cast<::autofill::risk::Fingerprint_Metadata*>(
            ::autofill::risk::Fingerprint_Metadata::internal_default_instance());
#else
        metadata_ = const_cast<::autofill::risk::Fingerprint_Metadata*>(&::autofill::risk::Fingerprint_Metadata::default_instance());
#endif
    }

    Fingerprint::Fingerprint(const Fingerprint& from)
        : ::google::protobuf::MessageLite()
        , _arena_ptr_(NULL)
    {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:autofill.risk.Fingerprint)
    }

    void Fingerprint::SharedCtor()
    {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        _unknown_fields_.UnsafeSetDefault(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        machine_characteristics_ = NULL;
        performance_ = NULL;
        user_characteristics_ = NULL;
        transient_state_ = NULL;
        metadata_ = NULL;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    Fingerprint::~Fingerprint()
    {
        // @@protoc_insertion_point(destructor:autofill.risk.Fingerprint)
        SharedDtor();
    }

    void Fingerprint::SharedDtor()
    {
        _unknown_fields_.DestroyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        if (this != &default_instance()) {
#else
        if (this != default_instance_) {
#endif
            delete machine_characteristics_;
            delete performance_;
            delete user_characteristics_;
            delete transient_state_;
            delete metadata_;
        }
    }

    void Fingerprint::SetCachedSize(int size) const
    {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const Fingerprint& Fingerprint::default_instance()
    {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        protobuf_AddDesc_fingerprint_2eproto();
#else
        if (default_instance_ == NULL)
            protobuf_AddDesc_fingerprint_2eproto();
#endif
        return *default_instance_;
    }

    Fingerprint* Fingerprint::default_instance_ = NULL;

    Fingerprint* Fingerprint::New(::google::protobuf::Arena* arena) const
    {
        Fingerprint* n = new Fingerprint;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void Fingerprint::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:autofill.risk.Fingerprint)
        if (_has_bits_[0 / 32] & 31u) {
            if (has_machine_characteristics()) {
                if (machine_characteristics_ != NULL)
                    machine_characteristics_->::autofill::risk::Fingerprint_MachineCharacteristics::Clear();
            }
            if (has_performance()) {
                if (performance_ != NULL)
                    performance_->::autofill::risk::Fingerprint_Performance::Clear();
            }
            if (has_user_characteristics()) {
                if (user_characteristics_ != NULL)
                    user_characteristics_->::autofill::risk::Fingerprint_UserCharacteristics::Clear();
            }
            if (has_transient_state()) {
                if (transient_state_ != NULL)
                    transient_state_->::autofill::risk::Fingerprint_TransientState::Clear();
            }
            if (has_metadata()) {
                if (metadata_ != NULL)
                    metadata_->::autofill::risk::Fingerprint_Metadata::Clear();
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        _unknown_fields_.ClearToEmptyNoArena(
            &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool Fingerprint::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
        ::google::protobuf::uint32 tag;
        ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
            ::google::protobuf::internal::NewPermanentCallback(
                &MutableUnknownFieldsForFingerprint, this));
        ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
            &unknown_fields_string, false);
        // @@protoc_insertion_point(parse_start:autofill.risk.Fingerprint)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second)
                goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_machine_characteristics()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18))
                    goto parse_performance;
                break;
            }

            // optional .autofill.risk.Fingerprint.Performance performance = 2;
            case 2: {
                if (tag == 18) {
                parse_performance:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_performance()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26))
                    goto parse_user_characteristics;
                break;
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
            case 3: {
                if (tag == 26) {
                parse_user_characteristics:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_user_characteristics()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(34))
                    goto parse_transient_state;
                break;
            }

            // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
            case 4: {
                if (tag == 34) {
                parse_transient_state:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_transient_state()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42))
                    goto parse_metadata;
                break;
            }

            // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
            case 5: {
                if (tag == 42) {
                parse_metadata:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, mutable_metadata()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd())
                    goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                    input, tag, &unknown_fields_stream));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:autofill.risk.Fingerprint)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:autofill.risk.Fingerprint)
        return false;
#undef DO_
    }

    void Fingerprint::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const
    {
        // @@protoc_insertion_point(serialize_start:autofill.risk.Fingerprint)
        // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
        if (has_machine_characteristics()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                1, *this->machine_characteristics_, output);
        }

        // optional .autofill.risk.Fingerprint.Performance performance = 2;
        if (has_performance()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                2, *this->performance_, output);
        }

        // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
        if (has_user_characteristics()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                3, *this->user_characteristics_, output);
        }

        // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
        if (has_transient_state()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                4, *this->transient_state_, output);
        }

        // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
        if (has_metadata()) {
            ::google::protobuf::internal::WireFormatLite::WriteMessage(
                5, *this->metadata_, output);
        }

        output->WriteRaw(unknown_fields().data(),
            static_cast<int>(unknown_fields().size()));
        // @@protoc_insertion_point(serialize_end:autofill.risk.Fingerprint)
    }

    int Fingerprint::ByteSize() const
    {
        // @@protoc_insertion_point(message_byte_size_start:autofill.risk.Fingerprint)
        int total_size = 0;

        if (_has_bits_[0 / 32] & 31u) {
            // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
            if (has_machine_characteristics()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->machine_characteristics_);
            }

            // optional .autofill.risk.Fingerprint.Performance performance = 2;
            if (has_performance()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->performance_);
            }

            // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
            if (has_user_characteristics()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->user_characteristics_);
            }

            // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
            if (has_transient_state()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->transient_state_);
            }

            // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
            if (has_metadata()) {
                total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*this->metadata_);
            }
        }
        total_size += unknown_fields().size();

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void Fingerprint::CheckTypeAndMergeFrom(
        const ::google::protobuf::MessageLite& from)
    {
        MergeFrom(*::google::protobuf::down_cast<const Fingerprint*>(&from));
    }

    void Fingerprint::MergeFrom(const Fingerprint& from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:autofill.risk.Fingerprint)
        if (GOOGLE_PREDICT_FALSE(&from == this))
            MergeFromFail(__LINE__);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_machine_characteristics()) {
                mutable_machine_characteristics()->::autofill::risk::Fingerprint_MachineCharacteristics::MergeFrom(from.machine_characteristics());
            }
            if (from.has_performance()) {
                mutable_performance()->::autofill::risk::Fingerprint_Performance::MergeFrom(from.performance());
            }
            if (from.has_user_characteristics()) {
                mutable_user_characteristics()->::autofill::risk::Fingerprint_UserCharacteristics::MergeFrom(from.user_characteristics());
            }
            if (from.has_transient_state()) {
                mutable_transient_state()->::autofill::risk::Fingerprint_TransientState::MergeFrom(from.transient_state());
            }
            if (from.has_metadata()) {
                mutable_metadata()->::autofill::risk::Fingerprint_Metadata::MergeFrom(from.metadata());
            }
        }
        if (!from.unknown_fields().empty()) {
            mutable_unknown_fields()->append(from.unknown_fields());
        }
    }

    void Fingerprint::CopyFrom(const Fingerprint& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:autofill.risk.Fingerprint)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Fingerprint::IsInitialized() const
    {

        return true;
    }

    void Fingerprint::Swap(Fingerprint* other)
    {
        if (other == this)
            return;
        InternalSwap(other);
    }
    void Fingerprint::InternalSwap(Fingerprint* other)
    {
        std::swap(machine_characteristics_, other->machine_characteristics_);
        std::swap(performance_, other->performance_);
        std::swap(user_characteristics_, other->user_characteristics_);
        std::swap(transient_state_, other->transient_state_);
        std::swap(metadata_, other->metadata_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::std::string Fingerprint::GetTypeName() const
    {
        return "autofill.risk.Fingerprint";
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // Fingerprint_Dimension

    // optional int32 width = 1;
    bool Fingerprint_Dimension::has_width() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_Dimension::set_has_width()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_Dimension::clear_has_width()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_Dimension::clear_width()
    {
        width_ = 0;
        clear_has_width();
    }
    ::google::protobuf::int32 Fingerprint_Dimension::width() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Dimension.width)
        return width_;
    }
    void Fingerprint_Dimension::set_width(::google::protobuf::int32 value)
    {
        set_has_width();
        width_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Dimension.width)
    }

    // optional int32 height = 2;
    bool Fingerprint_Dimension::has_height() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_Dimension::set_has_height()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_Dimension::clear_has_height()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_Dimension::clear_height()
    {
        height_ = 0;
        clear_has_height();
    }
    ::google::protobuf::int32 Fingerprint_Dimension::height() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Dimension.height)
        return height_;
    }
    void Fingerprint_Dimension::set_height(::google::protobuf::int32 value)
    {
        set_has_height();
        height_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Dimension.height)
    }

    // -------------------------------------------------------------------

    // Fingerprint_MachineCharacteristics_Plugin

    // optional string name = 1;
    bool Fingerprint_MachineCharacteristics_Plugin::has_name() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_has_name()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_has_name()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_name()
    {
        name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_name();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Plugin::name() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
        return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_name(const ::std::string& value)
    {
        set_has_name();
        name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_name(const char* value)
    {
        set_has_name();
        name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_name(const char* value, size_t size)
    {
        set_has_name();
        name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_name()
    {
        set_has_name();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
        return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::release_name()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
        clear_has_name();
        return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_allocated_name(::std::string* name)
    {
        if (name != NULL) {
            set_has_name();
        } else {
            clear_has_name();
        }
        name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.name)
    }

    // optional string description = 2;
    bool Fingerprint_MachineCharacteristics_Plugin::has_description() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_has_description()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_has_description()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_description()
    {
        description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_description();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Plugin::description() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
        return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_description(const ::std::string& value)
    {
        set_has_description();
        description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_description(const char* value)
    {
        set_has_description();
        description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_description(const char* value, size_t size)
    {
        set_has_description();
        description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_description()
    {
        set_has_description();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
        return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::release_description()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
        clear_has_description();
        return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_allocated_description(::std::string* description)
    {
        if (description != NULL) {
            set_has_description();
        } else {
            clear_has_description();
        }
        description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.description)
    }

    // repeated string mime_type = 3;
    int Fingerprint_MachineCharacteristics_Plugin::mime_type_size() const
    {
        return mime_type_.size();
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_mime_type()
    {
        mime_type_.Clear();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Plugin::mime_type(int index) const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
        return mime_type_.Get(index);
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_mime_type(int index)
    {
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
        return mime_type_.Mutable(index);
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
        mime_type_.Mutable(index)->assign(value);
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, const char* value)
    {
        mime_type_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_mime_type(int index, const char* value, size_t size)
    {
        mime_type_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::add_mime_type()
    {
        // @@protoc_insertion_point(field_add_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
        return mime_type_.Add();
    }
    void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(const ::std::string& value)
    {
        mime_type_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
    }
    void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(const char* value)
    {
        mime_type_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
    }
    void Fingerprint_MachineCharacteristics_Plugin::add_mime_type(const char* value, size_t size)
    {
        mime_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    Fingerprint_MachineCharacteristics_Plugin::mime_type() const
    {
        // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
        return mime_type_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    Fingerprint_MachineCharacteristics_Plugin::mutable_mime_type()
    {
        // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.mime_type)
        return &mime_type_;
    }

    // optional string version = 4;
    bool Fingerprint_MachineCharacteristics_Plugin::has_version() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_has_version()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_has_version()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Fingerprint_MachineCharacteristics_Plugin::clear_version()
    {
        version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_version();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Plugin::version() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
        return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_version(const ::std::string& value)
    {
        set_has_version();
        version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_version(const char* value)
    {
        set_has_version();
        version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_version(const char* value, size_t size)
    {
        set_has_version();
        version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::mutable_version()
    {
        set_has_version();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
        return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Plugin::release_version()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
        clear_has_version();
        return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Plugin::set_allocated_version(::std::string* version)
    {
        if (version != NULL) {
            set_has_version();
        } else {
            clear_has_version();
        }
        version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Plugin.version)
    }

    // -------------------------------------------------------------------

    // Fingerprint_MachineCharacteristics_Cpu

    // optional string vendor_name = 1;
    bool Fingerprint_MachineCharacteristics_Cpu::has_vendor_name() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_has_vendor_name()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_MachineCharacteristics_Cpu::clear_has_vendor_name()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_MachineCharacteristics_Cpu::clear_vendor_name()
    {
        vendor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_vendor_name();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Cpu::vendor_name() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
        return vendor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(const ::std::string& value)
    {
        set_has_vendor_name();
        vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(const char* value)
    {
        set_has_vendor_name();
        vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_vendor_name(const char* value, size_t size)
    {
        set_has_vendor_name();
        vendor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Cpu::mutable_vendor_name()
    {
        set_has_vendor_name();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
        return vendor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Cpu::release_vendor_name()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
        clear_has_vendor_name();
        return vendor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_allocated_vendor_name(::std::string* vendor_name)
    {
        if (vendor_name != NULL) {
            set_has_vendor_name();
        } else {
            clear_has_vendor_name();
        }
        vendor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor_name);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.vendor_name)
    }

    // optional string brand = 2;
    bool Fingerprint_MachineCharacteristics_Cpu::has_brand() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_has_brand()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_MachineCharacteristics_Cpu::clear_has_brand()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_MachineCharacteristics_Cpu::clear_brand()
    {
        brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_brand();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Cpu::brand() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
        return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_brand(const ::std::string& value)
    {
        set_has_brand();
        brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_brand(const char* value)
    {
        set_has_brand();
        brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_brand(const char* value, size_t size)
    {
        set_has_brand();
        brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Cpu::mutable_brand()
    {
        set_has_brand();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
        return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Cpu::release_brand()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
        clear_has_brand();
        return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Cpu::set_allocated_brand(::std::string* brand)
    {
        if (brand != NULL) {
            set_has_brand();
        } else {
            clear_has_brand();
        }
        brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Cpu.brand)
    }

    // -------------------------------------------------------------------

    // Fingerprint_MachineCharacteristics_Graphics

    // optional uint32 vendor_id = 1;
    bool Fingerprint_MachineCharacteristics_Graphics::has_vendor_id() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_has_vendor_id()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_has_vendor_id()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_vendor_id()
    {
        vendor_id_ = 0u;
        clear_has_vendor_id();
    }
    ::google::protobuf::uint32 Fingerprint_MachineCharacteristics_Graphics::vendor_id() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.vendor_id)
        return vendor_id_;
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_vendor_id(::google::protobuf::uint32 value)
    {
        set_has_vendor_id();
        vendor_id_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.vendor_id)
    }

    // optional uint32 device_id = 2;
    bool Fingerprint_MachineCharacteristics_Graphics::has_device_id() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_has_device_id()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_has_device_id()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_device_id()
    {
        device_id_ = 0u;
        clear_has_device_id();
    }
    ::google::protobuf::uint32 Fingerprint_MachineCharacteristics_Graphics::device_id() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.device_id)
        return device_id_;
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_device_id(::google::protobuf::uint32 value)
    {
        set_has_device_id();
        device_id_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.device_id)
    }

    // optional string driver_version = 3;
    bool Fingerprint_MachineCharacteristics_Graphics::has_driver_version() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_has_driver_version()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_has_driver_version()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_driver_version()
    {
        driver_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_driver_version();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Graphics::driver_version() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
        return driver_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(const ::std::string& value)
    {
        set_has_driver_version();
        driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(const char* value)
    {
        set_has_driver_version();
        driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_driver_version(const char* value, size_t size)
    {
        set_has_driver_version();
        driver_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Graphics::mutable_driver_version()
    {
        set_has_driver_version();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
        return driver_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Graphics::release_driver_version()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
        clear_has_driver_version();
        return driver_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_allocated_driver_version(::std::string* driver_version)
    {
        if (driver_version != NULL) {
            set_has_driver_version();
        } else {
            clear_has_driver_version();
        }
        driver_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_version);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_version)
    }

    // optional string driver_date = 4;
    bool Fingerprint_MachineCharacteristics_Graphics::has_driver_date() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_has_driver_date()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_has_driver_date()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Fingerprint_MachineCharacteristics_Graphics::clear_driver_date()
    {
        driver_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_driver_date();
    }
    const ::std::string& Fingerprint_MachineCharacteristics_Graphics::driver_date() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
        return driver_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(const ::std::string& value)
    {
        set_has_driver_date();
        driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(const char* value)
    {
        set_has_driver_date();
        driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_driver_date(const char* value, size_t size)
    {
        set_has_driver_date();
        driver_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
    }
    ::std::string* Fingerprint_MachineCharacteristics_Graphics::mutable_driver_date()
    {
        set_has_driver_date();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
        return driver_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics_Graphics::release_driver_date()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
        clear_has_driver_date();
        return driver_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics_Graphics::set_allocated_driver_date(::std::string* driver_date)
    {
        if (driver_date != NULL) {
            set_has_driver_date();
        } else {
            clear_has_driver_date();
        }
        driver_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_date);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.Graphics.driver_date)
    }

    // -------------------------------------------------------------------

    // Fingerprint_MachineCharacteristics

    // optional fixed64 user_and_device_name_hash = 1;
    bool Fingerprint_MachineCharacteristics::has_user_and_device_name_hash() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_user_and_device_name_hash()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_user_and_device_name_hash()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_MachineCharacteristics::clear_user_and_device_name_hash()
    {
        user_and_device_name_hash_ = GOOGLE_ULONGLONG(0);
        clear_has_user_and_device_name_hash();
    }
    ::google::protobuf::uint64 Fingerprint_MachineCharacteristics::user_and_device_name_hash() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.user_and_device_name_hash)
        return user_and_device_name_hash_;
    }
    void Fingerprint_MachineCharacteristics::set_user_and_device_name_hash(::google::protobuf::uint64 value)
    {
        set_has_user_and_device_name_hash();
        user_and_device_name_hash_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.user_and_device_name_hash)
    }

    // optional string operating_system_build = 2;
    bool Fingerprint_MachineCharacteristics::has_operating_system_build() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_operating_system_build()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_operating_system_build()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_MachineCharacteristics::clear_operating_system_build()
    {
        operating_system_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_operating_system_build();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::operating_system_build() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
        return operating_system_build_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_operating_system_build(const ::std::string& value)
    {
        set_has_operating_system_build();
        operating_system_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
    }
    void Fingerprint_MachineCharacteristics::set_operating_system_build(const char* value)
    {
        set_has_operating_system_build();
        operating_system_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
    }
    void Fingerprint_MachineCharacteristics::set_operating_system_build(const char* value, size_t size)
    {
        set_has_operating_system_build();
        operating_system_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_operating_system_build()
    {
        set_has_operating_system_build();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
        return operating_system_build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics::release_operating_system_build()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
        clear_has_operating_system_build();
        return operating_system_build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_allocated_operating_system_build(::std::string* operating_system_build)
    {
        if (operating_system_build != NULL) {
            set_has_operating_system_build();
        } else {
            clear_has_operating_system_build();
        }
        operating_system_build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operating_system_build);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.operating_system_build)
    }

    // optional int64 browser_install_time_hours = 3;
    bool Fingerprint_MachineCharacteristics::has_browser_install_time_hours() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_browser_install_time_hours()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_browser_install_time_hours()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_MachineCharacteristics::clear_browser_install_time_hours()
    {
        browser_install_time_hours_ = GOOGLE_LONGLONG(0);
        clear_has_browser_install_time_hours();
    }
    ::google::protobuf::int64 Fingerprint_MachineCharacteristics::browser_install_time_hours() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_install_time_hours)
        return browser_install_time_hours_;
    }
    void Fingerprint_MachineCharacteristics::set_browser_install_time_hours(::google::protobuf::int64 value)
    {
        set_has_browser_install_time_hours();
        browser_install_time_hours_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_install_time_hours)
    }

    // repeated string font = 4;
    int Fingerprint_MachineCharacteristics::font_size() const
    {
        return font_.size();
    }
    void Fingerprint_MachineCharacteristics::clear_font()
    {
        font_.Clear();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::font(int index) const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.font)
        return font_.Get(index);
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_font(int index)
    {
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.font)
        return font_.Mutable(index);
    }
    void Fingerprint_MachineCharacteristics::set_font(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.font)
        font_.Mutable(index)->assign(value);
    }
    void Fingerprint_MachineCharacteristics::set_font(int index, const char* value)
    {
        font_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.font)
    }
    void Fingerprint_MachineCharacteristics::set_font(int index, const char* value, size_t size)
    {
        font_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.font)
    }
    ::std::string* Fingerprint_MachineCharacteristics::add_font()
    {
        // @@protoc_insertion_point(field_add_mutable:autofill.risk.Fingerprint.MachineCharacteristics.font)
        return font_.Add();
    }
    void Fingerprint_MachineCharacteristics::add_font(const ::std::string& value)
    {
        font_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.font)
    }
    void Fingerprint_MachineCharacteristics::add_font(const char* value)
    {
        font_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:autofill.risk.Fingerprint.MachineCharacteristics.font)
    }
    void Fingerprint_MachineCharacteristics::add_font(const char* value, size_t size)
    {
        font_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:autofill.risk.Fingerprint.MachineCharacteristics.font)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    Fingerprint_MachineCharacteristics::font() const
    {
        // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.font)
        return font_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    Fingerprint_MachineCharacteristics::mutable_font()
    {
        // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.font)
        return &font_;
    }

    // repeated .autofill.risk.Fingerprint.MachineCharacteristics.Plugin plugin = 5;
    int Fingerprint_MachineCharacteristics::plugin_size() const
    {
        return plugin_.size();
    }
    void Fingerprint_MachineCharacteristics::clear_plugin()
    {
        plugin_.Clear();
    }
    const ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin& Fingerprint_MachineCharacteristics::plugin(int index) const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
        return plugin_.Get(index);
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics::mutable_plugin(int index)
    {
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
        return plugin_.Mutable(index);
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_Plugin* Fingerprint_MachineCharacteristics::add_plugin()
    {
        // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
        return plugin_.Add();
    }
    ::google::protobuf::RepeatedPtrField<::autofill::risk::Fingerprint_MachineCharacteristics_Plugin>*
    Fingerprint_MachineCharacteristics::mutable_plugin()
    {
        // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
        return &plugin_;
    }
    const ::google::protobuf::RepeatedPtrField<::autofill::risk::Fingerprint_MachineCharacteristics_Plugin>&
    Fingerprint_MachineCharacteristics::plugin() const
    {
        // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.plugin)
        return plugin_;
    }

    // optional int64 utc_offset_ms = 6;
    bool Fingerprint_MachineCharacteristics::has_utc_offset_ms() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_utc_offset_ms()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_utc_offset_ms()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void Fingerprint_MachineCharacteristics::clear_utc_offset_ms()
    {
        utc_offset_ms_ = GOOGLE_LONGLONG(0);
        clear_has_utc_offset_ms();
    }
    ::google::protobuf::int64 Fingerprint_MachineCharacteristics::utc_offset_ms() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.utc_offset_ms)
        return utc_offset_ms_;
    }
    void Fingerprint_MachineCharacteristics::set_utc_offset_ms(::google::protobuf::int64 value)
    {
        set_has_utc_offset_ms();
        utc_offset_ms_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.utc_offset_ms)
    }

    // optional string browser_language = 7;
    bool Fingerprint_MachineCharacteristics::has_browser_language() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_browser_language()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_browser_language()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void Fingerprint_MachineCharacteristics::clear_browser_language()
    {
        browser_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_browser_language();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::browser_language() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
        return browser_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_browser_language(const ::std::string& value)
    {
        set_has_browser_language();
        browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
    }
    void Fingerprint_MachineCharacteristics::set_browser_language(const char* value)
    {
        set_has_browser_language();
        browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
    }
    void Fingerprint_MachineCharacteristics::set_browser_language(const char* value, size_t size)
    {
        set_has_browser_language();
        browser_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_browser_language()
    {
        set_has_browser_language();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
        return browser_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics::release_browser_language()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
        clear_has_browser_language();
        return browser_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_allocated_browser_language(::std::string* browser_language)
    {
        if (browser_language != NULL) {
            set_has_browser_language();
        } else {
            clear_has_browser_language();
        }
        browser_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_language);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.browser_language)
    }

    // repeated string requested_language = 8;
    int Fingerprint_MachineCharacteristics::requested_language_size() const
    {
        return requested_language_.size();
    }
    void Fingerprint_MachineCharacteristics::clear_requested_language()
    {
        requested_language_.Clear();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::requested_language(int index) const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
        return requested_language_.Get(index);
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_requested_language(int index)
    {
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
        return requested_language_.Mutable(index);
    }
    void Fingerprint_MachineCharacteristics::set_requested_language(int index, const ::std::string& value)
    {
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
        requested_language_.Mutable(index)->assign(value);
    }
    void Fingerprint_MachineCharacteristics::set_requested_language(int index, const char* value)
    {
        requested_language_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
    }
    void Fingerprint_MachineCharacteristics::set_requested_language(int index, const char* value, size_t size)
    {
        requested_language_.Mutable(index)->assign(
            reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
    }
    ::std::string* Fingerprint_MachineCharacteristics::add_requested_language()
    {
        // @@protoc_insertion_point(field_add_mutable:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
        return requested_language_.Add();
    }
    void Fingerprint_MachineCharacteristics::add_requested_language(const ::std::string& value)
    {
        requested_language_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
    }
    void Fingerprint_MachineCharacteristics::add_requested_language(const char* value)
    {
        requested_language_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
    }
    void Fingerprint_MachineCharacteristics::add_requested_language(const char* value, size_t size)
    {
        requested_language_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
    }
    const ::google::protobuf::RepeatedPtrField<::std::string>&
    Fingerprint_MachineCharacteristics::requested_language() const
    {
        // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
        return requested_language_;
    }
    ::google::protobuf::RepeatedPtrField<::std::string>*
    Fingerprint_MachineCharacteristics::mutable_requested_language()
    {
        // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.requested_language)
        return &requested_language_;
    }

    // optional string charset = 9;
    bool Fingerprint_MachineCharacteristics::has_charset() const
    {
        return (_has_bits_[0] & 0x00000100u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_charset()
    {
        _has_bits_[0] |= 0x00000100u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_charset()
    {
        _has_bits_[0] &= ~0x00000100u;
    }
    void Fingerprint_MachineCharacteristics::clear_charset()
    {
        charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_charset();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::charset() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.charset)
        return charset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_charset(const ::std::string& value)
    {
        set_has_charset();
        charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.charset)
    }
    void Fingerprint_MachineCharacteristics::set_charset(const char* value)
    {
        set_has_charset();
        charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.charset)
    }
    void Fingerprint_MachineCharacteristics::set_charset(const char* value, size_t size)
    {
        set_has_charset();
        charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.charset)
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_charset()
    {
        set_has_charset();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.charset)
        return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics::release_charset()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.charset)
        clear_has_charset();
        return charset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_allocated_charset(::std::string* charset)
    {
        if (charset != NULL) {
            set_has_charset();
        } else {
            clear_has_charset();
        }
        charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.charset)
    }

    // optional int32 screen_count = 10;
    bool Fingerprint_MachineCharacteristics::has_screen_count() const
    {
        return (_has_bits_[0] & 0x00000200u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_screen_count()
    {
        _has_bits_[0] |= 0x00000200u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_screen_count()
    {
        _has_bits_[0] &= ~0x00000200u;
    }
    void Fingerprint_MachineCharacteristics::clear_screen_count()
    {
        screen_count_ = 0;
        clear_has_screen_count();
    }
    ::google::protobuf::int32 Fingerprint_MachineCharacteristics::screen_count() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.screen_count)
        return screen_count_;
    }
    void Fingerprint_MachineCharacteristics::set_screen_count(::google::protobuf::int32 value)
    {
        set_has_screen_count();
        screen_count_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.screen_count)
    }

    // optional .autofill.risk.Fingerprint.Dimension screen_size = 11;
    bool Fingerprint_MachineCharacteristics::has_screen_size() const
    {
        return (_has_bits_[0] & 0x00000400u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_screen_size()
    {
        _has_bits_[0] |= 0x00000400u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_screen_size()
    {
        _has_bits_[0] &= ~0x00000400u;
    }
    void Fingerprint_MachineCharacteristics::clear_screen_size()
    {
        if (screen_size_ != NULL)
            screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
        clear_has_screen_size();
    }
    const ::autofill::risk::Fingerprint_Dimension& Fingerprint_MachineCharacteristics::screen_size() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return screen_size_ != NULL ? *screen_size_ : *default_instance().screen_size_;
#else
        return screen_size_ != NULL ? *screen_size_ : *default_instance_->screen_size_;
#endif
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::mutable_screen_size()
    {
        set_has_screen_size();
        if (screen_size_ == NULL) {
            screen_size_ = new ::autofill::risk::Fingerprint_Dimension;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
        return screen_size_;
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::release_screen_size()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
        clear_has_screen_size();
        ::autofill::risk::Fingerprint_Dimension* temp = screen_size_;
        screen_size_ = NULL;
        return temp;
    }
    void Fingerprint_MachineCharacteristics::set_allocated_screen_size(::autofill::risk::Fingerprint_Dimension* screen_size)
    {
        delete screen_size_;
        screen_size_ = screen_size;
        if (screen_size) {
            set_has_screen_size();
        } else {
            clear_has_screen_size();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.screen_size)
    }

    // optional int32 screen_color_depth = 12;
    bool Fingerprint_MachineCharacteristics::has_screen_color_depth() const
    {
        return (_has_bits_[0] & 0x00000800u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_screen_color_depth()
    {
        _has_bits_[0] |= 0x00000800u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_screen_color_depth()
    {
        _has_bits_[0] &= ~0x00000800u;
    }
    void Fingerprint_MachineCharacteristics::clear_screen_color_depth()
    {
        screen_color_depth_ = 0;
        clear_has_screen_color_depth();
    }
    ::google::protobuf::int32 Fingerprint_MachineCharacteristics::screen_color_depth() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.screen_color_depth)
        return screen_color_depth_;
    }
    void Fingerprint_MachineCharacteristics::set_screen_color_depth(::google::protobuf::int32 value)
    {
        set_has_screen_color_depth();
        screen_color_depth_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.screen_color_depth)
    }

    // optional .autofill.risk.Fingerprint.Dimension unavailable_screen_size = 13;
    bool Fingerprint_MachineCharacteristics::has_unavailable_screen_size() const
    {
        return (_has_bits_[0] & 0x00001000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_unavailable_screen_size()
    {
        _has_bits_[0] |= 0x00001000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_unavailable_screen_size()
    {
        _has_bits_[0] &= ~0x00001000u;
    }
    void Fingerprint_MachineCharacteristics::clear_unavailable_screen_size()
    {
        if (unavailable_screen_size_ != NULL)
            unavailable_screen_size_->::autofill::risk::Fingerprint_Dimension::Clear();
        clear_has_unavailable_screen_size();
    }
    const ::autofill::risk::Fingerprint_Dimension& Fingerprint_MachineCharacteristics::unavailable_screen_size() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return unavailable_screen_size_ != NULL ? *unavailable_screen_size_ : *default_instance().unavailable_screen_size_;
#else
        return unavailable_screen_size_ != NULL ? *unavailable_screen_size_ : *default_instance_->unavailable_screen_size_;
#endif
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::mutable_unavailable_screen_size()
    {
        set_has_unavailable_screen_size();
        if (unavailable_screen_size_ == NULL) {
            unavailable_screen_size_ = new ::autofill::risk::Fingerprint_Dimension;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
        return unavailable_screen_size_;
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_MachineCharacteristics::release_unavailable_screen_size()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
        clear_has_unavailable_screen_size();
        ::autofill::risk::Fingerprint_Dimension* temp = unavailable_screen_size_;
        unavailable_screen_size_ = NULL;
        return temp;
    }
    void Fingerprint_MachineCharacteristics::set_allocated_unavailable_screen_size(::autofill::risk::Fingerprint_Dimension* unavailable_screen_size)
    {
        delete unavailable_screen_size_;
        unavailable_screen_size_ = unavailable_screen_size;
        if (unavailable_screen_size) {
            set_has_unavailable_screen_size();
        } else {
            clear_has_unavailable_screen_size();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.unavailable_screen_size)
    }

    // optional string user_agent = 14;
    bool Fingerprint_MachineCharacteristics::has_user_agent() const
    {
        return (_has_bits_[0] & 0x00002000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_user_agent()
    {
        _has_bits_[0] |= 0x00002000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_user_agent()
    {
        _has_bits_[0] &= ~0x00002000u;
    }
    void Fingerprint_MachineCharacteristics::clear_user_agent()
    {
        user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_user_agent();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::user_agent() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
        return user_agent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_user_agent(const ::std::string& value)
    {
        set_has_user_agent();
        user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
    }
    void Fingerprint_MachineCharacteristics::set_user_agent(const char* value)
    {
        set_has_user_agent();
        user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
    }
    void Fingerprint_MachineCharacteristics::set_user_agent(const char* value, size_t size)
    {
        set_has_user_agent();
        user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_user_agent()
    {
        set_has_user_agent();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
        return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics::release_user_agent()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
        clear_has_user_agent();
        return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_allocated_user_agent(::std::string* user_agent)
    {
        if (user_agent != NULL) {
            set_has_user_agent();
        } else {
            clear_has_user_agent();
        }
        user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.user_agent)
    }

    // repeated int32 partition_size = 15;
    int Fingerprint_MachineCharacteristics::partition_size_size() const
    {
        return partition_size_.size();
    }
    void Fingerprint_MachineCharacteristics::clear_partition_size()
    {
        partition_size_.Clear();
    }
    ::google::protobuf::int32 Fingerprint_MachineCharacteristics::partition_size(int index) const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
        return partition_size_.Get(index);
    }
    void Fingerprint_MachineCharacteristics::set_partition_size(int index, ::google::protobuf::int32 value)
    {
        partition_size_.Set(index, value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
    }
    void Fingerprint_MachineCharacteristics::add_partition_size(::google::protobuf::int32 value)
    {
        partition_size_.Add(value);
        // @@protoc_insertion_point(field_add:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
    }
    const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
    Fingerprint_MachineCharacteristics::partition_size() const
    {
        // @@protoc_insertion_point(field_list:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
        return partition_size_;
    }
    ::google::protobuf::RepeatedField<::google::protobuf::int32>*
    Fingerprint_MachineCharacteristics::mutable_partition_size()
    {
        // @@protoc_insertion_point(field_mutable_list:autofill.risk.Fingerprint.MachineCharacteristics.partition_size)
        return &partition_size_;
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.Cpu cpu = 16;
    bool Fingerprint_MachineCharacteristics::has_cpu() const
    {
        return (_has_bits_[0] & 0x00008000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_cpu()
    {
        _has_bits_[0] |= 0x00008000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_cpu()
    {
        _has_bits_[0] &= ~0x00008000u;
    }
    void Fingerprint_MachineCharacteristics::clear_cpu()
    {
        if (cpu_ != NULL)
            cpu_->::autofill::risk::Fingerprint_MachineCharacteristics_Cpu::Clear();
        clear_has_cpu();
    }
    const ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu& Fingerprint_MachineCharacteristics::cpu() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return cpu_ != NULL ? *cpu_ : *default_instance().cpu_;
#else
        return cpu_ != NULL ? *cpu_ : *default_instance_->cpu_;
#endif
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics::mutable_cpu()
    {
        set_has_cpu();
        if (cpu_ == NULL) {
            cpu_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
        return cpu_;
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* Fingerprint_MachineCharacteristics::release_cpu()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
        clear_has_cpu();
        ::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* temp = cpu_;
        cpu_ = NULL;
        return temp;
    }
    void Fingerprint_MachineCharacteristics::set_allocated_cpu(::autofill::risk::Fingerprint_MachineCharacteristics_Cpu* cpu)
    {
        delete cpu_;
        cpu_ = cpu;
        if (cpu) {
            set_has_cpu();
        } else {
            clear_has_cpu();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.cpu)
    }

    // optional int64 ram = 17;
    bool Fingerprint_MachineCharacteristics::has_ram() const
    {
        return (_has_bits_[0] & 0x00010000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_ram()
    {
        _has_bits_[0] |= 0x00010000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_ram()
    {
        _has_bits_[0] &= ~0x00010000u;
    }
    void Fingerprint_MachineCharacteristics::clear_ram()
    {
        ram_ = GOOGLE_LONGLONG(0);
        clear_has_ram();
    }
    ::google::protobuf::int64 Fingerprint_MachineCharacteristics::ram() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.ram)
        return ram_;
    }
    void Fingerprint_MachineCharacteristics::set_ram(::google::protobuf::int64 value)
    {
        set_has_ram();
        ram_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.ram)
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.Graphics graphics_card = 18;
    bool Fingerprint_MachineCharacteristics::has_graphics_card() const
    {
        return (_has_bits_[0] & 0x00020000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_graphics_card()
    {
        _has_bits_[0] |= 0x00020000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_graphics_card()
    {
        _has_bits_[0] &= ~0x00020000u;
    }
    void Fingerprint_MachineCharacteristics::clear_graphics_card()
    {
        if (graphics_card_ != NULL)
            graphics_card_->::autofill::risk::Fingerprint_MachineCharacteristics_Graphics::Clear();
        clear_has_graphics_card();
    }
    const ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics& Fingerprint_MachineCharacteristics::graphics_card() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return graphics_card_ != NULL ? *graphics_card_ : *default_instance().graphics_card_;
#else
        return graphics_card_ != NULL ? *graphics_card_ : *default_instance_->graphics_card_;
#endif
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics::mutable_graphics_card()
    {
        set_has_graphics_card();
        if (graphics_card_ == NULL) {
            graphics_card_ = new ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
        return graphics_card_;
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* Fingerprint_MachineCharacteristics::release_graphics_card()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
        clear_has_graphics_card();
        ::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* temp = graphics_card_;
        graphics_card_ = NULL;
        return temp;
    }
    void Fingerprint_MachineCharacteristics::set_allocated_graphics_card(::autofill::risk::Fingerprint_MachineCharacteristics_Graphics* graphics_card)
    {
        delete graphics_card_;
        graphics_card_ = graphics_card;
        if (graphics_card) {
            set_has_graphics_card();
        } else {
            clear_has_graphics_card();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.graphics_card)
    }

    // optional string browser_build = 19;
    bool Fingerprint_MachineCharacteristics::has_browser_build() const
    {
        return (_has_bits_[0] & 0x00040000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_browser_build()
    {
        _has_bits_[0] |= 0x00040000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_browser_build()
    {
        _has_bits_[0] &= ~0x00040000u;
    }
    void Fingerprint_MachineCharacteristics::clear_browser_build()
    {
        browser_build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_browser_build();
    }
    const ::std::string& Fingerprint_MachineCharacteristics::browser_build() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
        return browser_build_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_browser_build(const ::std::string& value)
    {
        set_has_browser_build();
        browser_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
    }
    void Fingerprint_MachineCharacteristics::set_browser_build(const char* value)
    {
        set_has_browser_build();
        browser_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
    }
    void Fingerprint_MachineCharacteristics::set_browser_build(const char* value, size_t size)
    {
        set_has_browser_build();
        browser_build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
    }
    ::std::string* Fingerprint_MachineCharacteristics::mutable_browser_build()
    {
        set_has_browser_build();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
        return browser_build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_MachineCharacteristics::release_browser_build()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
        clear_has_browser_build();
        return browser_build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_MachineCharacteristics::set_allocated_browser_build(::std::string* browser_build)
    {
        if (browser_build != NULL) {
            set_has_browser_build();
        } else {
            clear_has_browser_build();
        }
        browser_build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), browser_build);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.MachineCharacteristics.browser_build)
    }

    // optional .autofill.risk.Fingerprint.MachineCharacteristics.BrowserFeature browser_feature = 20;
    bool Fingerprint_MachineCharacteristics::has_browser_feature() const
    {
        return (_has_bits_[0] & 0x00080000u) != 0;
    }
    void Fingerprint_MachineCharacteristics::set_has_browser_feature()
    {
        _has_bits_[0] |= 0x00080000u;
    }
    void Fingerprint_MachineCharacteristics::clear_has_browser_feature()
    {
        _has_bits_[0] &= ~0x00080000u;
    }
    void Fingerprint_MachineCharacteristics::clear_browser_feature()
    {
        browser_feature_ = 0;
        clear_has_browser_feature();
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature Fingerprint_MachineCharacteristics::browser_feature() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.MachineCharacteristics.browser_feature)
        return static_cast<::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature>(browser_feature_);
    }
    void Fingerprint_MachineCharacteristics::set_browser_feature(::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature value)
    {
        assert(::autofill::risk::Fingerprint_MachineCharacteristics_BrowserFeature_IsValid(value));
        set_has_browser_feature();
        browser_feature_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.MachineCharacteristics.browser_feature)
    }

    // -------------------------------------------------------------------

    // Fingerprint_TransientState

    // optional .autofill.risk.Fingerprint.Dimension inner_window_size = 1;
    bool Fingerprint_TransientState::has_inner_window_size() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_TransientState::set_has_inner_window_size()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_TransientState::clear_has_inner_window_size()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_TransientState::clear_inner_window_size()
    {
        if (inner_window_size_ != NULL)
            inner_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
        clear_has_inner_window_size();
    }
    const ::autofill::risk::Fingerprint_Dimension& Fingerprint_TransientState::inner_window_size() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.TransientState.inner_window_size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return inner_window_size_ != NULL ? *inner_window_size_ : *default_instance().inner_window_size_;
#else
        return inner_window_size_ != NULL ? *inner_window_size_ : *default_instance_->inner_window_size_;
#endif
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::mutable_inner_window_size()
    {
        set_has_inner_window_size();
        if (inner_window_size_ == NULL) {
            inner_window_size_ = new ::autofill::risk::Fingerprint_Dimension;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.TransientState.inner_window_size)
        return inner_window_size_;
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::release_inner_window_size()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.TransientState.inner_window_size)
        clear_has_inner_window_size();
        ::autofill::risk::Fingerprint_Dimension* temp = inner_window_size_;
        inner_window_size_ = NULL;
        return temp;
    }
    void Fingerprint_TransientState::set_allocated_inner_window_size(::autofill::risk::Fingerprint_Dimension* inner_window_size)
    {
        delete inner_window_size_;
        inner_window_size_ = inner_window_size;
        if (inner_window_size) {
            set_has_inner_window_size();
        } else {
            clear_has_inner_window_size();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.TransientState.inner_window_size)
    }

    // optional .autofill.risk.Fingerprint.Dimension outer_window_size = 2;
    bool Fingerprint_TransientState::has_outer_window_size() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_TransientState::set_has_outer_window_size()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_TransientState::clear_has_outer_window_size()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_TransientState::clear_outer_window_size()
    {
        if (outer_window_size_ != NULL)
            outer_window_size_->::autofill::risk::Fingerprint_Dimension::Clear();
        clear_has_outer_window_size();
    }
    const ::autofill::risk::Fingerprint_Dimension& Fingerprint_TransientState::outer_window_size() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.TransientState.outer_window_size)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return outer_window_size_ != NULL ? *outer_window_size_ : *default_instance().outer_window_size_;
#else
        return outer_window_size_ != NULL ? *outer_window_size_ : *default_instance_->outer_window_size_;
#endif
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::mutable_outer_window_size()
    {
        set_has_outer_window_size();
        if (outer_window_size_ == NULL) {
            outer_window_size_ = new ::autofill::risk::Fingerprint_Dimension;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.TransientState.outer_window_size)
        return outer_window_size_;
    }
    ::autofill::risk::Fingerprint_Dimension* Fingerprint_TransientState::release_outer_window_size()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.TransientState.outer_window_size)
        clear_has_outer_window_size();
        ::autofill::risk::Fingerprint_Dimension* temp = outer_window_size_;
        outer_window_size_ = NULL;
        return temp;
    }
    void Fingerprint_TransientState::set_allocated_outer_window_size(::autofill::risk::Fingerprint_Dimension* outer_window_size)
    {
        delete outer_window_size_;
        outer_window_size_ = outer_window_size;
        if (outer_window_size) {
            set_has_outer_window_size();
        } else {
            clear_has_outer_window_size();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.TransientState.outer_window_size)
    }

    // -------------------------------------------------------------------

    // Fingerprint_Performance

    // optional float bandwidth = 1;
    bool Fingerprint_Performance::has_bandwidth() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_Performance::set_has_bandwidth()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_Performance::clear_has_bandwidth()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_Performance::clear_bandwidth()
    {
        bandwidth_ = 0;
        clear_has_bandwidth();
    }
    float Fingerprint_Performance::bandwidth() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Performance.bandwidth)
        return bandwidth_;
    }
    void Fingerprint_Performance::set_bandwidth(float value)
    {
        set_has_bandwidth();
        bandwidth_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Performance.bandwidth)
    }

    // optional bool metered = 2;
    bool Fingerprint_Performance::has_metered() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_Performance::set_has_metered()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_Performance::clear_has_metered()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_Performance::clear_metered()
    {
        metered_ = false;
        clear_has_metered();
    }
    bool Fingerprint_Performance::metered() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Performance.metered)
        return metered_;
    }
    void Fingerprint_Performance::set_metered(bool value)
    {
        set_has_metered();
        metered_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Performance.metered)
    }

    // optional string network_type = 3;
    bool Fingerprint_Performance::has_network_type() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_Performance::set_has_network_type()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_Performance::clear_has_network_type()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_Performance::clear_network_type()
    {
        network_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        clear_has_network_type();
    }
    const ::std::string& Fingerprint_Performance::network_type() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Performance.network_type)
        return network_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_Performance::set_network_type(const ::std::string& value)
    {
        set_has_network_type();
        network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Performance.network_type)
    }
    void Fingerprint_Performance::set_network_type(const char* value)
    {
        set_has_network_type();
        network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:autofill.risk.Fingerprint.Performance.network_type)
    }
    void Fingerprint_Performance::set_network_type(const char* value, size_t size)
    {
        set_has_network_type();
        network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:autofill.risk.Fingerprint.Performance.network_type)
    }
    ::std::string* Fingerprint_Performance::mutable_network_type()
    {
        set_has_network_type();
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.Performance.network_type)
        return network_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* Fingerprint_Performance::release_network_type()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.Performance.network_type)
        clear_has_network_type();
        return network_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void Fingerprint_Performance::set_allocated_network_type(::std::string* network_type)
    {
        if (network_type != NULL) {
            set_has_network_type();
        } else {
            clear_has_network_type();
        }
        network_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_type);
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.Performance.network_type)
    }

    // -------------------------------------------------------------------

    // Fingerprint_UserCharacteristics_Vector

    // optional int32 x = 1;
    bool Fingerprint_UserCharacteristics_Vector::has_x() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_UserCharacteristics_Vector::set_has_x()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_UserCharacteristics_Vector::clear_has_x()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_UserCharacteristics_Vector::clear_x()
    {
        x_ = 0;
        clear_has_x();
    }
    ::google::protobuf::int32 Fingerprint_UserCharacteristics_Vector::x() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Vector.x)
        return x_;
    }
    void Fingerprint_UserCharacteristics_Vector::set_x(::google::protobuf::int32 value)
    {
        set_has_x();
        x_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Vector.x)
    }

    // optional int32 y = 2;
    bool Fingerprint_UserCharacteristics_Vector::has_y() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_UserCharacteristics_Vector::set_has_y()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_UserCharacteristics_Vector::clear_has_y()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_UserCharacteristics_Vector::clear_y()
    {
        y_ = 0;
        clear_has_y();
    }
    ::google::protobuf::int32 Fingerprint_UserCharacteristics_Vector::y() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Vector.y)
        return y_;
    }
    void Fingerprint_UserCharacteristics_Vector::set_y(::google::protobuf::int32 value)
    {
        set_has_y();
        y_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Vector.y)
    }

    // optional int32 z = 3;
    bool Fingerprint_UserCharacteristics_Vector::has_z() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_UserCharacteristics_Vector::set_has_z()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_UserCharacteristics_Vector::clear_has_z()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_UserCharacteristics_Vector::clear_z()
    {
        z_ = 0;
        clear_has_z();
    }
    ::google::protobuf::int32 Fingerprint_UserCharacteristics_Vector::z() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Vector.z)
        return z_;
    }
    void Fingerprint_UserCharacteristics_Vector::set_z(::google::protobuf::int32 value)
    {
        set_has_z();
        z_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Vector.z)
    }

    // -------------------------------------------------------------------

    // Fingerprint_UserCharacteristics_Location

    // optional double altitude = 1;
    bool Fingerprint_UserCharacteristics_Location::has_altitude() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_UserCharacteristics_Location::set_has_altitude()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_has_altitude()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_altitude()
    {
        altitude_ = 0;
        clear_has_altitude();
    }
    double Fingerprint_UserCharacteristics_Location::altitude() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.altitude)
        return altitude_;
    }
    void Fingerprint_UserCharacteristics_Location::set_altitude(double value)
    {
        set_has_altitude();
        altitude_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.altitude)
    }

    // optional double latitude = 2;
    bool Fingerprint_UserCharacteristics_Location::has_latitude() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_UserCharacteristics_Location::set_has_latitude()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_has_latitude()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_latitude()
    {
        latitude_ = 0;
        clear_has_latitude();
    }
    double Fingerprint_UserCharacteristics_Location::latitude() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.latitude)
        return latitude_;
    }
    void Fingerprint_UserCharacteristics_Location::set_latitude(double value)
    {
        set_has_latitude();
        latitude_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.latitude)
    }

    // optional double longitude = 3;
    bool Fingerprint_UserCharacteristics_Location::has_longitude() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_UserCharacteristics_Location::set_has_longitude()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_has_longitude()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_longitude()
    {
        longitude_ = 0;
        clear_has_longitude();
    }
    double Fingerprint_UserCharacteristics_Location::longitude() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.longitude)
        return longitude_;
    }
    void Fingerprint_UserCharacteristics_Location::set_longitude(double value)
    {
        set_has_longitude();
        longitude_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.longitude)
    }

    // optional double accuracy = 4;
    bool Fingerprint_UserCharacteristics_Location::has_accuracy() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Fingerprint_UserCharacteristics_Location::set_has_accuracy()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_has_accuracy()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_accuracy()
    {
        accuracy_ = 0;
        clear_has_accuracy();
    }
    double Fingerprint_UserCharacteristics_Location::accuracy() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.accuracy)
        return accuracy_;
    }
    void Fingerprint_UserCharacteristics_Location::set_accuracy(double value)
    {
        set_has_accuracy();
        accuracy_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.accuracy)
    }

    // optional int64 time_in_ms = 5;
    bool Fingerprint_UserCharacteristics_Location::has_time_in_ms() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Fingerprint_UserCharacteristics_Location::set_has_time_in_ms()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_has_time_in_ms()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Fingerprint_UserCharacteristics_Location::clear_time_in_ms()
    {
        time_in_ms_ = GOOGLE_LONGLONG(0);
        clear_has_time_in_ms();
    }
    ::google::protobuf::int64 Fingerprint_UserCharacteristics_Location::time_in_ms() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.Location.time_in_ms)
        return time_in_ms_;
    }
    void Fingerprint_UserCharacteristics_Location::set_time_in_ms(::google::protobuf::int64 value)
    {
        set_has_time_in_ms();
        time_in_ms_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.Location.time_in_ms)
    }

    // -------------------------------------------------------------------

    // Fingerprint_UserCharacteristics

    // optional float force = 1;
    bool Fingerprint_UserCharacteristics::has_force() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_force()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_UserCharacteristics::clear_has_force()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_UserCharacteristics::clear_force()
    {
        force_ = 0;
        clear_has_force();
    }
    float Fingerprint_UserCharacteristics::force() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.force)
        return force_;
    }
    void Fingerprint_UserCharacteristics::set_force(float value)
    {
        set_has_force();
        force_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.force)
    }

    // optional float touch_width = 2;
    bool Fingerprint_UserCharacteristics::has_touch_width() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_touch_width()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_UserCharacteristics::clear_has_touch_width()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_UserCharacteristics::clear_touch_width()
    {
        touch_width_ = 0;
        clear_has_touch_width();
    }
    float Fingerprint_UserCharacteristics::touch_width() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.touch_width)
        return touch_width_;
    }
    void Fingerprint_UserCharacteristics::set_touch_width(float value)
    {
        set_has_touch_width();
        touch_width_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.touch_width)
    }

    // optional float touch_height = 3;
    bool Fingerprint_UserCharacteristics::has_touch_height() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_touch_height()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_UserCharacteristics::clear_has_touch_height()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_UserCharacteristics::clear_touch_height()
    {
        touch_height_ = 0;
        clear_has_touch_height();
    }
    float Fingerprint_UserCharacteristics::touch_height() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.touch_height)
        return touch_height_;
    }
    void Fingerprint_UserCharacteristics::set_touch_height(float value)
    {
        set_has_touch_height();
        touch_height_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.touch_height)
    }

    // optional int32 touch_rotation = 4;
    bool Fingerprint_UserCharacteristics::has_touch_rotation() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_touch_rotation()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Fingerprint_UserCharacteristics::clear_has_touch_rotation()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Fingerprint_UserCharacteristics::clear_touch_rotation()
    {
        touch_rotation_ = 0;
        clear_has_touch_rotation();
    }
    ::google::protobuf::int32 Fingerprint_UserCharacteristics::touch_rotation() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.touch_rotation)
        return touch_rotation_;
    }
    void Fingerprint_UserCharacteristics::set_touch_rotation(::google::protobuf::int32 value)
    {
        set_has_touch_rotation();
        touch_rotation_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.UserCharacteristics.touch_rotation)
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_orientation = 5;
    bool Fingerprint_UserCharacteristics::has_device_orientation() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_device_orientation()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Fingerprint_UserCharacteristics::clear_has_device_orientation()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Fingerprint_UserCharacteristics::clear_device_orientation()
    {
        if (device_orientation_ != NULL)
            device_orientation_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
        clear_has_device_orientation();
    }
    const ::autofill::risk::Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics::device_orientation() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return device_orientation_ != NULL ? *device_orientation_ : *default_instance().device_orientation_;
#else
        return device_orientation_ != NULL ? *device_orientation_ : *default_instance_->device_orientation_;
#endif
    }
    ::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::mutable_device_orientation()
    {
        set_has_device_orientation();
        if (device_orientation_ == NULL) {
            device_orientation_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
        return device_orientation_;
    }
    ::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::release_device_orientation()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
        clear_has_device_orientation();
        ::autofill::risk::Fingerprint_UserCharacteristics_Vector* temp = device_orientation_;
        device_orientation_ = NULL;
        return temp;
    }
    void Fingerprint_UserCharacteristics::set_allocated_device_orientation(::autofill::risk::Fingerprint_UserCharacteristics_Vector* device_orientation)
    {
        delete device_orientation_;
        device_orientation_ = device_orientation;
        if (device_orientation) {
            set_has_device_orientation();
        } else {
            clear_has_device_orientation();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.UserCharacteristics.device_orientation)
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Vector device_acceleration = 6;
    bool Fingerprint_UserCharacteristics::has_device_acceleration() const
    {
        return (_has_bits_[0] & 0x00000020u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_device_acceleration()
    {
        _has_bits_[0] |= 0x00000020u;
    }
    void Fingerprint_UserCharacteristics::clear_has_device_acceleration()
    {
        _has_bits_[0] &= ~0x00000020u;
    }
    void Fingerprint_UserCharacteristics::clear_device_acceleration()
    {
        if (device_acceleration_ != NULL)
            device_acceleration_->::autofill::risk::Fingerprint_UserCharacteristics_Vector::Clear();
        clear_has_device_acceleration();
    }
    const ::autofill::risk::Fingerprint_UserCharacteristics_Vector& Fingerprint_UserCharacteristics::device_acceleration() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return device_acceleration_ != NULL ? *device_acceleration_ : *default_instance().device_acceleration_;
#else
        return device_acceleration_ != NULL ? *device_acceleration_ : *default_instance_->device_acceleration_;
#endif
    }
    ::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::mutable_device_acceleration()
    {
        set_has_device_acceleration();
        if (device_acceleration_ == NULL) {
            device_acceleration_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Vector;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
        return device_acceleration_;
    }
    ::autofill::risk::Fingerprint_UserCharacteristics_Vector* Fingerprint_UserCharacteristics::release_device_acceleration()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
        clear_has_device_acceleration();
        ::autofill::risk::Fingerprint_UserCharacteristics_Vector* temp = device_acceleration_;
        device_acceleration_ = NULL;
        return temp;
    }
    void Fingerprint_UserCharacteristics::set_allocated_device_acceleration(::autofill::risk::Fingerprint_UserCharacteristics_Vector* device_acceleration)
    {
        delete device_acceleration_;
        device_acceleration_ = device_acceleration;
        if (device_acceleration) {
            set_has_device_acceleration();
        } else {
            clear_has_device_acceleration();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.UserCharacteristics.device_acceleration)
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics.Location location = 7;
    bool Fingerprint_UserCharacteristics::has_location() const
    {
        return (_has_bits_[0] & 0x00000040u) != 0;
    }
    void Fingerprint_UserCharacteristics::set_has_location()
    {
        _has_bits_[0] |= 0x00000040u;
    }
    void Fingerprint_UserCharacteristics::clear_has_location()
    {
        _has_bits_[0] &= ~0x00000040u;
    }
    void Fingerprint_UserCharacteristics::clear_location()
    {
        if (location_ != NULL)
            location_->::autofill::risk::Fingerprint_UserCharacteristics_Location::Clear();
        clear_has_location();
    }
    const ::autofill::risk::Fingerprint_UserCharacteristics_Location& Fingerprint_UserCharacteristics::location() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.UserCharacteristics.location)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return location_ != NULL ? *location_ : *default_instance().location_;
#else
        return location_ != NULL ? *location_ : *default_instance_->location_;
#endif
    }
    ::autofill::risk::Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics::mutable_location()
    {
        set_has_location();
        if (location_ == NULL) {
            location_ = new ::autofill::risk::Fingerprint_UserCharacteristics_Location;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.UserCharacteristics.location)
        return location_;
    }
    ::autofill::risk::Fingerprint_UserCharacteristics_Location* Fingerprint_UserCharacteristics::release_location()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.UserCharacteristics.location)
        clear_has_location();
        ::autofill::risk::Fingerprint_UserCharacteristics_Location* temp = location_;
        location_ = NULL;
        return temp;
    }
    void Fingerprint_UserCharacteristics::set_allocated_location(::autofill::risk::Fingerprint_UserCharacteristics_Location* location)
    {
        delete location_;
        location_ = location;
        if (location) {
            set_has_location();
        } else {
            clear_has_location();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.UserCharacteristics.location)
    }

    // -------------------------------------------------------------------

    // Fingerprint_Metadata

    // optional int64 timestamp_ms = 1;
    bool Fingerprint_Metadata::has_timestamp_ms() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint_Metadata::set_has_timestamp_ms()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint_Metadata::clear_has_timestamp_ms()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint_Metadata::clear_timestamp_ms()
    {
        timestamp_ms_ = GOOGLE_LONGLONG(0);
        clear_has_timestamp_ms();
    }
    ::google::protobuf::int64 Fingerprint_Metadata::timestamp_ms() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Metadata.timestamp_ms)
        return timestamp_ms_;
    }
    void Fingerprint_Metadata::set_timestamp_ms(::google::protobuf::int64 value)
    {
        set_has_timestamp_ms();
        timestamp_ms_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Metadata.timestamp_ms)
    }

    // optional uint64 obfuscated_gaia_id = 2;
    bool Fingerprint_Metadata::has_obfuscated_gaia_id() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint_Metadata::set_has_obfuscated_gaia_id()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint_Metadata::clear_has_obfuscated_gaia_id()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint_Metadata::clear_obfuscated_gaia_id()
    {
        obfuscated_gaia_id_ = GOOGLE_ULONGLONG(0);
        clear_has_obfuscated_gaia_id();
    }
    ::google::protobuf::uint64 Fingerprint_Metadata::obfuscated_gaia_id() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Metadata.obfuscated_gaia_id)
        return obfuscated_gaia_id_;
    }
    void Fingerprint_Metadata::set_obfuscated_gaia_id(::google::protobuf::uint64 value)
    {
        set_has_obfuscated_gaia_id();
        obfuscated_gaia_id_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Metadata.obfuscated_gaia_id)
    }

    // optional int32 fingerprinter_version = 3;
    bool Fingerprint_Metadata::has_fingerprinter_version() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint_Metadata::set_has_fingerprinter_version()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint_Metadata::clear_has_fingerprinter_version()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint_Metadata::clear_fingerprinter_version()
    {
        fingerprinter_version_ = 0;
        clear_has_fingerprinter_version();
    }
    ::google::protobuf::int32 Fingerprint_Metadata::fingerprinter_version() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.Metadata.fingerprinter_version)
        return fingerprinter_version_;
    }
    void Fingerprint_Metadata::set_fingerprinter_version(::google::protobuf::int32 value)
    {
        set_has_fingerprinter_version();
        fingerprinter_version_ = value;
        // @@protoc_insertion_point(field_set:autofill.risk.Fingerprint.Metadata.fingerprinter_version)
    }

    // -------------------------------------------------------------------

    // Fingerprint

    // optional .autofill.risk.Fingerprint.MachineCharacteristics machine_characteristics = 1;
    bool Fingerprint::has_machine_characteristics() const
    {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    void Fingerprint::set_has_machine_characteristics()
    {
        _has_bits_[0] |= 0x00000001u;
    }
    void Fingerprint::clear_has_machine_characteristics()
    {
        _has_bits_[0] &= ~0x00000001u;
    }
    void Fingerprint::clear_machine_characteristics()
    {
        if (machine_characteristics_ != NULL)
            machine_characteristics_->::autofill::risk::Fingerprint_MachineCharacteristics::Clear();
        clear_has_machine_characteristics();
    }
    const ::autofill::risk::Fingerprint_MachineCharacteristics& Fingerprint::machine_characteristics() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.machine_characteristics)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return machine_characteristics_ != NULL ? *machine_characteristics_ : *default_instance().machine_characteristics_;
#else
        return machine_characteristics_ != NULL ? *machine_characteristics_ : *default_instance_->machine_characteristics_;
#endif
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics* Fingerprint::mutable_machine_characteristics()
    {
        set_has_machine_characteristics();
        if (machine_characteristics_ == NULL) {
            machine_characteristics_ = new ::autofill::risk::Fingerprint_MachineCharacteristics;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.machine_characteristics)
        return machine_characteristics_;
    }
    ::autofill::risk::Fingerprint_MachineCharacteristics* Fingerprint::release_machine_characteristics()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.machine_characteristics)
        clear_has_machine_characteristics();
        ::autofill::risk::Fingerprint_MachineCharacteristics* temp = machine_characteristics_;
        machine_characteristics_ = NULL;
        return temp;
    }
    void Fingerprint::set_allocated_machine_characteristics(::autofill::risk::Fingerprint_MachineCharacteristics* machine_characteristics)
    {
        delete machine_characteristics_;
        machine_characteristics_ = machine_characteristics;
        if (machine_characteristics) {
            set_has_machine_characteristics();
        } else {
            clear_has_machine_characteristics();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.machine_characteristics)
    }

    // optional .autofill.risk.Fingerprint.Performance performance = 2;
    bool Fingerprint::has_performance() const
    {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    void Fingerprint::set_has_performance()
    {
        _has_bits_[0] |= 0x00000002u;
    }
    void Fingerprint::clear_has_performance()
    {
        _has_bits_[0] &= ~0x00000002u;
    }
    void Fingerprint::clear_performance()
    {
        if (performance_ != NULL)
            performance_->::autofill::risk::Fingerprint_Performance::Clear();
        clear_has_performance();
    }
    const ::autofill::risk::Fingerprint_Performance& Fingerprint::performance() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.performance)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return performance_ != NULL ? *performance_ : *default_instance().performance_;
#else
        return performance_ != NULL ? *performance_ : *default_instance_->performance_;
#endif
    }
    ::autofill::risk::Fingerprint_Performance* Fingerprint::mutable_performance()
    {
        set_has_performance();
        if (performance_ == NULL) {
            performance_ = new ::autofill::risk::Fingerprint_Performance;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.performance)
        return performance_;
    }
    ::autofill::risk::Fingerprint_Performance* Fingerprint::release_performance()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.performance)
        clear_has_performance();
        ::autofill::risk::Fingerprint_Performance* temp = performance_;
        performance_ = NULL;
        return temp;
    }
    void Fingerprint::set_allocated_performance(::autofill::risk::Fingerprint_Performance* performance)
    {
        delete performance_;
        performance_ = performance;
        if (performance) {
            set_has_performance();
        } else {
            clear_has_performance();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.performance)
    }

    // optional .autofill.risk.Fingerprint.UserCharacteristics user_characteristics = 3;
    bool Fingerprint::has_user_characteristics() const
    {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    void Fingerprint::set_has_user_characteristics()
    {
        _has_bits_[0] |= 0x00000004u;
    }
    void Fingerprint::clear_has_user_characteristics()
    {
        _has_bits_[0] &= ~0x00000004u;
    }
    void Fingerprint::clear_user_characteristics()
    {
        if (user_characteristics_ != NULL)
            user_characteristics_->::autofill::risk::Fingerprint_UserCharacteristics::Clear();
        clear_has_user_characteristics();
    }
    const ::autofill::risk::Fingerprint_UserCharacteristics& Fingerprint::user_characteristics() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.user_characteristics)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return user_characteristics_ != NULL ? *user_characteristics_ : *default_instance().user_characteristics_;
#else
        return user_characteristics_ != NULL ? *user_characteristics_ : *default_instance_->user_characteristics_;
#endif
    }
    ::autofill::risk::Fingerprint_UserCharacteristics* Fingerprint::mutable_user_characteristics()
    {
        set_has_user_characteristics();
        if (user_characteristics_ == NULL) {
            user_characteristics_ = new ::autofill::risk::Fingerprint_UserCharacteristics;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.user_characteristics)
        return user_characteristics_;
    }
    ::autofill::risk::Fingerprint_UserCharacteristics* Fingerprint::release_user_characteristics()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.user_characteristics)
        clear_has_user_characteristics();
        ::autofill::risk::Fingerprint_UserCharacteristics* temp = user_characteristics_;
        user_characteristics_ = NULL;
        return temp;
    }
    void Fingerprint::set_allocated_user_characteristics(::autofill::risk::Fingerprint_UserCharacteristics* user_characteristics)
    {
        delete user_characteristics_;
        user_characteristics_ = user_characteristics;
        if (user_characteristics) {
            set_has_user_characteristics();
        } else {
            clear_has_user_characteristics();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.user_characteristics)
    }

    // optional .autofill.risk.Fingerprint.TransientState transient_state = 4;
    bool Fingerprint::has_transient_state() const
    {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    void Fingerprint::set_has_transient_state()
    {
        _has_bits_[0] |= 0x00000008u;
    }
    void Fingerprint::clear_has_transient_state()
    {
        _has_bits_[0] &= ~0x00000008u;
    }
    void Fingerprint::clear_transient_state()
    {
        if (transient_state_ != NULL)
            transient_state_->::autofill::risk::Fingerprint_TransientState::Clear();
        clear_has_transient_state();
    }
    const ::autofill::risk::Fingerprint_TransientState& Fingerprint::transient_state() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.transient_state)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return transient_state_ != NULL ? *transient_state_ : *default_instance().transient_state_;
#else
        return transient_state_ != NULL ? *transient_state_ : *default_instance_->transient_state_;
#endif
    }
    ::autofill::risk::Fingerprint_TransientState* Fingerprint::mutable_transient_state()
    {
        set_has_transient_state();
        if (transient_state_ == NULL) {
            transient_state_ = new ::autofill::risk::Fingerprint_TransientState;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.transient_state)
        return transient_state_;
    }
    ::autofill::risk::Fingerprint_TransientState* Fingerprint::release_transient_state()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.transient_state)
        clear_has_transient_state();
        ::autofill::risk::Fingerprint_TransientState* temp = transient_state_;
        transient_state_ = NULL;
        return temp;
    }
    void Fingerprint::set_allocated_transient_state(::autofill::risk::Fingerprint_TransientState* transient_state)
    {
        delete transient_state_;
        transient_state_ = transient_state;
        if (transient_state) {
            set_has_transient_state();
        } else {
            clear_has_transient_state();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.transient_state)
    }

    // optional .autofill.risk.Fingerprint.Metadata metadata = 5;
    bool Fingerprint::has_metadata() const
    {
        return (_has_bits_[0] & 0x00000010u) != 0;
    }
    void Fingerprint::set_has_metadata()
    {
        _has_bits_[0] |= 0x00000010u;
    }
    void Fingerprint::clear_has_metadata()
    {
        _has_bits_[0] &= ~0x00000010u;
    }
    void Fingerprint::clear_metadata()
    {
        if (metadata_ != NULL)
            metadata_->::autofill::risk::Fingerprint_Metadata::Clear();
        clear_has_metadata();
    }
    const ::autofill::risk::Fingerprint_Metadata& Fingerprint::metadata() const
    {
        // @@protoc_insertion_point(field_get:autofill.risk.Fingerprint.metadata)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
        return metadata_ != NULL ? *metadata_ : *default_instance().metadata_;
#else
        return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
#endif
    }
    ::autofill::risk::Fingerprint_Metadata* Fingerprint::mutable_metadata()
    {
        set_has_metadata();
        if (metadata_ == NULL) {
            metadata_ = new ::autofill::risk::Fingerprint_Metadata;
        }
        // @@protoc_insertion_point(field_mutable:autofill.risk.Fingerprint.metadata)
        return metadata_;
    }
    ::autofill::risk::Fingerprint_Metadata* Fingerprint::release_metadata()
    {
        // @@protoc_insertion_point(field_release:autofill.risk.Fingerprint.metadata)
        clear_has_metadata();
        ::autofill::risk::Fingerprint_Metadata* temp = metadata_;
        metadata_ = NULL;
        return temp;
    }
    void Fingerprint::set_allocated_metadata(::autofill::risk::Fingerprint_Metadata* metadata)
    {
        delete metadata_;
        metadata_ = metadata;
        if (metadata) {
            set_has_metadata();
        } else {
            clear_has_metadata();
        }
        // @@protoc_insertion_point(field_set_allocated:autofill.risk.Fingerprint.metadata)
    }

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

} // namespace risk
} // namespace autofill

// @@protoc_insertion_point(global_scope)
