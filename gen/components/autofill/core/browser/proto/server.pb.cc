// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace autofill {

void protobuf_ShutdownFile_server_2eproto()
{
    delete AutofillQueryContents::default_instance_;
    delete AutofillQueryContents_Form::default_instance_;
    delete AutofillQueryContents_Form_Field::default_instance_;
    delete AutofillQueryResponseContents::default_instance_;
    delete AutofillQueryResponseContents_Field::default_instance_;
    delete AutofillUploadContents::default_instance_;
    delete AutofillUploadContents_Field::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_server_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_server_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    AutofillQueryContents::default_instance_ = new AutofillQueryContents();
    AutofillQueryContents_Form::default_instance_ = new AutofillQueryContents_Form();
    AutofillQueryContents_Form_Field::default_instance_ = new AutofillQueryContents_Form_Field();
    AutofillQueryResponseContents::default_instance_ = new AutofillQueryResponseContents();
    AutofillQueryResponseContents_Field::default_instance_ = new AutofillQueryResponseContents_Field();
    AutofillUploadContents::default_instance_ = new AutofillUploadContents();
    AutofillUploadContents_Field::default_instance_ = new AutofillUploadContents_Field();
    AutofillQueryContents::default_instance_->InitAsDefaultInstance();
    AutofillQueryContents_Form::default_instance_->InitAsDefaultInstance();
    AutofillQueryContents_Form_Field::default_instance_->InitAsDefaultInstance();
    AutofillQueryResponseContents::default_instance_->InitAsDefaultInstance();
    AutofillQueryResponseContents_Field::default_instance_->InitAsDefaultInstance();
    AutofillUploadContents::default_instance_->InitAsDefaultInstance();
    AutofillUploadContents_Field::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_server_2eproto_once_);
void protobuf_AddDesc_server_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_server_2eproto_once_,
        &protobuf_AddDesc_server_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
    StaticDescriptorInitializer_server_2eproto()
    {
        protobuf_AddDesc_server_2eproto();
    }
} static_descriptor_initializer_server_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForAutofillQueryContents(
    AutofillQueryContents* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForAutofillQueryContents_Form(
    AutofillQueryContents_Form* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForAutofillQueryContents_Form_Field(
    AutofillQueryContents_Form_Field* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryContents_Form_Field::kSignatureFieldNumber;
const int AutofillQueryContents_Form_Field::kNameFieldNumber;
const int AutofillQueryContents_Form_Field::kTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryContents_Form_Field::AutofillQueryContents_Form_Field()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents.Form.Field)
}

void AutofillQueryContents_Form_Field::InitAsDefaultInstance()
{
}

AutofillQueryContents_Form_Field::AutofillQueryContents_Form_Field(const AutofillQueryContents_Form_Field& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents.Form.Field)
}

void AutofillQueryContents_Form_Field::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signature_ = 0u;
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillQueryContents_Form_Field::~AutofillQueryContents_Form_Field()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents.Form.Field)
    SharedDtor();
}

void AutofillQueryContents_Form_Field::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillQueryContents_Form_Field::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryContents_Form_Field& AutofillQueryContents_Form_Field::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillQueryContents_Form_Field* AutofillQueryContents_Form_Field::default_instance_ = NULL;

AutofillQueryContents_Form_Field* AutofillQueryContents_Form_Field::New(::google::protobuf::Arena* arena) const
{
    AutofillQueryContents_Form_Field* n = new AutofillQueryContents_Form_Field;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillQueryContents_Form_Field::Clear()
{
    // @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents.Form.Field)
    if (_has_bits_[0 / 32] & 7u) {
        signature_ = 0u;
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_type()) {
            type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillQueryContents_Form_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillQueryContents_Form_Field, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents.Form.Field)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required fixed32 signature = 5;
        case 5: {
            if (tag == 45) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &signature_)));
                set_has_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_name;
            break;
        }

        // optional string name = 8;
        case 8: {
            if (tag == 66) {
            parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_type;
            break;
        }

        // optional string type = 9;
        case 9: {
            if (tag == 74) {
            parse_type:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_type()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents.Form.Field)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents.Form.Field)
    return false;
#undef DO_
}

void AutofillQueryContents_Form_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents.Form.Field)
    // required fixed32 signature = 5;
    if (has_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->signature(), output);
    }

    // optional string name = 8;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->name(), output);
    }

    // optional string type = 9;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            9, this->type(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents.Form.Field)
}

int AutofillQueryContents_Form_Field::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents.Form.Field)
    int total_size = 0;

    // required fixed32 signature = 5;
    if (has_signature()) {
        total_size += 1 + 4;
    }
    if (_has_bits_[1 / 32] & 6u) {
        // optional string name = 8;
        if (has_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
        }

        // optional string type = 9;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->type());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillQueryContents_Form_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillQueryContents_Form_Field*>(&from));
}

void AutofillQueryContents_Form_Field::MergeFrom(const AutofillQueryContents_Form_Field& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents.Form.Field)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_signature()) {
            set_signature(from.signature());
        }
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_type()) {
            set_has_type();
            type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillQueryContents_Form_Field::CopyFrom(const AutofillQueryContents_Form_Field& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents.Form.Field)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillQueryContents_Form_Field::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    return true;
}

void AutofillQueryContents_Form_Field::Swap(AutofillQueryContents_Form_Field* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillQueryContents_Form_Field::InternalSwap(AutofillQueryContents_Form_Field* other)
{
    std::swap(signature_, other->signature_);
    name_.Swap(&other->name_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryContents_Form_Field::GetTypeName() const
{
    return "autofill.AutofillQueryContents.Form.Field";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryContents_Form::kSignatureFieldNumber;
const int AutofillQueryContents_Form::kFieldFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryContents_Form::AutofillQueryContents_Form()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents.Form)
}

void AutofillQueryContents_Form::InitAsDefaultInstance()
{
}

AutofillQueryContents_Form::AutofillQueryContents_Form(const AutofillQueryContents_Form& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents.Form)
}

void AutofillQueryContents_Form::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signature_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillQueryContents_Form::~AutofillQueryContents_Form()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents.Form)
    SharedDtor();
}

void AutofillQueryContents_Form::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillQueryContents_Form::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryContents_Form& AutofillQueryContents_Form::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillQueryContents_Form* AutofillQueryContents_Form::default_instance_ = NULL;

AutofillQueryContents_Form* AutofillQueryContents_Form::New(::google::protobuf::Arena* arena) const
{
    AutofillQueryContents_Form* n = new AutofillQueryContents_Form;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillQueryContents_Form::Clear()
{
    // @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents.Form)
    signature_ = GOOGLE_ULONGLONG(0);
    field_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillQueryContents_Form::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillQueryContents_Form, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents.Form)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required fixed64 signature = 3;
        case 3: {
            if (tag == 25) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &signature_)));
                set_has_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(35))
                goto parse_field;
            break;
        }

        // repeated group Field = 4 { ... };
        case 4: {
            if (tag == 35) {
            parse_field:
                DO_(input->IncrementRecursionDepth());
            parse_loop_field:
                DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                    4, input, add_field()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(35))
                goto parse_loop_field;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents.Form)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents.Form)
    return false;
#undef DO_
}

void AutofillQueryContents_Form::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents.Form)
    // required fixed64 signature = 3;
    if (has_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->signature(), output);
    }

    // repeated group Field = 4 { ... };
    for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteGroup(
            4, this->field(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents.Form)
}

int AutofillQueryContents_Form::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents.Form)
    int total_size = 0;

    // required fixed64 signature = 3;
    if (has_signature()) {
        total_size += 1 + 8;
    }
    // repeated group Field = 4 { ... };
    total_size += 2 * this->field_size();
    for (int i = 0; i < this->field_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
            this->field(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillQueryContents_Form::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillQueryContents_Form*>(&from));
}

void AutofillQueryContents_Form::MergeFrom(const AutofillQueryContents_Form& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents.Form)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    field_.MergeFrom(from.field_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_signature()) {
            set_signature(from.signature());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillQueryContents_Form::CopyFrom(const AutofillQueryContents_Form& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents.Form)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillQueryContents_Form::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    if (!::google::protobuf::internal::AllAreInitialized(this->field()))
        return false;
    return true;
}

void AutofillQueryContents_Form::Swap(AutofillQueryContents_Form* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillQueryContents_Form::InternalSwap(AutofillQueryContents_Form* other)
{
    std::swap(signature_, other->signature_);
    field_.UnsafeArenaSwap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryContents_Form::GetTypeName() const
{
    return "autofill.AutofillQueryContents.Form";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryContents::kClientVersionFieldNumber;
const int AutofillQueryContents::kFormFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryContents::AutofillQueryContents()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillQueryContents)
}

void AutofillQueryContents::InitAsDefaultInstance()
{
}

AutofillQueryContents::AutofillQueryContents(const AutofillQueryContents& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryContents)
}

void AutofillQueryContents::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillQueryContents::~AutofillQueryContents()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillQueryContents)
    SharedDtor();
}

void AutofillQueryContents::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillQueryContents::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryContents& AutofillQueryContents::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillQueryContents* AutofillQueryContents::default_instance_ = NULL;

AutofillQueryContents* AutofillQueryContents::New(::google::protobuf::Arena* arena) const
{
    AutofillQueryContents* n = new AutofillQueryContents;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillQueryContents::Clear()
{
    // @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryContents)
    if (has_client_version()) {
        client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    form_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillQueryContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillQueryContents, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillQueryContents)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required string client_version = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_client_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(19))
                goto parse_form;
            break;
        }

        // repeated group Form = 2 { ... };
        case 2: {
            if (tag == 19) {
            parse_form:
                DO_(input->IncrementRecursionDepth());
            parse_loop_form:
                DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                    2, input, add_form()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(19))
                goto parse_loop_form;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillQueryContents)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryContents)
    return false;
#undef DO_
}

void AutofillQueryContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryContents)
    // required string client_version = 1;
    if (has_client_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->client_version(), output);
    }

    // repeated group Form = 2 { ... };
    for (unsigned int i = 0, n = this->form_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteGroup(
            2, this->form(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryContents)
}

int AutofillQueryContents::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryContents)
    int total_size = 0;

    // required string client_version = 1;
    if (has_client_version()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->client_version());
    }
    // repeated group Form = 2 { ... };
    total_size += 2 * this->form_size();
    for (int i = 0; i < this->form_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
            this->form(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillQueryContents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillQueryContents*>(&from));
}

void AutofillQueryContents::MergeFrom(const AutofillQueryContents& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryContents)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    form_.MergeFrom(from.form_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_client_version()) {
            set_has_client_version();
            client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillQueryContents::CopyFrom(const AutofillQueryContents& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryContents)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillQueryContents::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    if (!::google::protobuf::internal::AllAreInitialized(this->form()))
        return false;
    return true;
}

void AutofillQueryContents::Swap(AutofillQueryContents* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillQueryContents::InternalSwap(AutofillQueryContents* other)
{
    client_version_.Swap(&other->client_version_);
    form_.UnsafeArenaSwap(&other->form_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryContents::GetTypeName() const
{
    return "autofill.AutofillQueryContents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryContents_Form_Field

// required fixed32 signature = 5;
bool AutofillQueryContents_Form_Field::has_signature() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryContents_Form_Field::set_has_signature()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryContents_Form_Field::clear_has_signature()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryContents_Form_Field::clear_signature()
{
    signature_ = 0u;
    clear_has_signature();
}
::google::protobuf::uint32 AutofillQueryContents_Form_Field::signature() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.Field.signature)
    return signature_;
}
void AutofillQueryContents_Form_Field::set_signature(::google::protobuf::uint32 value)
{
    set_has_signature();
    signature_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.Field.signature)
}

// optional string name = 8;
bool AutofillQueryContents_Form_Field::has_name() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutofillQueryContents_Form_Field::set_has_name()
{
    _has_bits_[0] |= 0x00000002u;
}
void AutofillQueryContents_Form_Field::clear_has_name()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AutofillQueryContents_Form_Field::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& AutofillQueryContents_Form_Field::name() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.Field.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents_Form_Field::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.Field.name)
}
void AutofillQueryContents_Form_Field::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillQueryContents.Form.Field.name)
}
void AutofillQueryContents_Form_Field::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillQueryContents.Form.Field.name)
}
::std::string* AutofillQueryContents_Form_Field::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.Form.Field.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillQueryContents_Form_Field::release_name()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillQueryContents.Form.Field.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents_Form_Field::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryContents.Form.Field.name)
}

// optional string type = 9;
bool AutofillQueryContents_Form_Field::has_type() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutofillQueryContents_Form_Field::set_has_type()
{
    _has_bits_[0] |= 0x00000004u;
}
void AutofillQueryContents_Form_Field::clear_has_type()
{
    _has_bits_[0] &= ~0x00000004u;
}
void AutofillQueryContents_Form_Field::clear_type()
{
    type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
}
const ::std::string& AutofillQueryContents_Form_Field::type() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.Field.type)
    return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents_Form_Field::set_type(const ::std::string& value)
{
    set_has_type();
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.Field.type)
}
void AutofillQueryContents_Form_Field::set_type(const char* value)
{
    set_has_type();
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillQueryContents.Form.Field.type)
}
void AutofillQueryContents_Form_Field::set_type(const char* value, size_t size)
{
    set_has_type();
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillQueryContents.Form.Field.type)
}
::std::string* AutofillQueryContents_Form_Field::mutable_type()
{
    set_has_type();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.Form.Field.type)
    return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillQueryContents_Form_Field::release_type()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillQueryContents.Form.Field.type)
    clear_has_type();
    return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents_Form_Field::set_allocated_type(::std::string* type)
{
    if (type != NULL) {
        set_has_type();
    } else {
        clear_has_type();
    }
    type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryContents.Form.Field.type)
}

// -------------------------------------------------------------------

// AutofillQueryContents_Form

// required fixed64 signature = 3;
bool AutofillQueryContents_Form::has_signature() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryContents_Form::set_has_signature()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryContents_Form::clear_has_signature()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryContents_Form::clear_signature()
{
    signature_ = GOOGLE_ULONGLONG(0);
    clear_has_signature();
}
::google::protobuf::uint64 AutofillQueryContents_Form::signature() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.signature)
    return signature_;
}
void AutofillQueryContents_Form::set_signature(::google::protobuf::uint64 value)
{
    set_has_signature();
    signature_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.Form.signature)
}

// repeated group Field = 4 { ... };
int AutofillQueryContents_Form::field_size() const
{
    return field_.size();
}
void AutofillQueryContents_Form::clear_field()
{
    field_.Clear();
}
const ::autofill::AutofillQueryContents_Form_Field& AutofillQueryContents_Form::field(int index) const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.Form.field)
    return field_.Get(index);
}
::autofill::AutofillQueryContents_Form_Field* AutofillQueryContents_Form::mutable_field(int index)
{
    // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.Form.field)
    return field_.Mutable(index);
}
::autofill::AutofillQueryContents_Form_Field* AutofillQueryContents_Form::add_field()
{
    // @@protoc_insertion_point(field_add:autofill.AutofillQueryContents.Form.field)
    return field_.Add();
}
::google::protobuf::RepeatedPtrField<::autofill::AutofillQueryContents_Form_Field>*
AutofillQueryContents_Form::mutable_field()
{
    // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryContents.Form.field)
    return &field_;
}
const ::google::protobuf::RepeatedPtrField<::autofill::AutofillQueryContents_Form_Field>&
AutofillQueryContents_Form::field() const
{
    // @@protoc_insertion_point(field_list:autofill.AutofillQueryContents.Form.field)
    return field_;
}

// -------------------------------------------------------------------

// AutofillQueryContents

// required string client_version = 1;
bool AutofillQueryContents::has_client_version() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryContents::set_has_client_version()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryContents::clear_has_client_version()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryContents::clear_client_version()
{
    client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_client_version();
}
const ::std::string& AutofillQueryContents::client_version() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.client_version)
    return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents::set_client_version(const ::std::string& value)
{
    set_has_client_version();
    client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryContents.client_version)
}
void AutofillQueryContents::set_client_version(const char* value)
{
    set_has_client_version();
    client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillQueryContents.client_version)
}
void AutofillQueryContents::set_client_version(const char* value, size_t size)
{
    set_has_client_version();
    client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillQueryContents.client_version)
}
::std::string* AutofillQueryContents::mutable_client_version()
{
    set_has_client_version();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.client_version)
    return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillQueryContents::release_client_version()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillQueryContents.client_version)
    clear_has_client_version();
    return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillQueryContents::set_allocated_client_version(::std::string* client_version)
{
    if (client_version != NULL) {
        set_has_client_version();
    } else {
        clear_has_client_version();
    }
    client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryContents.client_version)
}

// repeated group Form = 2 { ... };
int AutofillQueryContents::form_size() const
{
    return form_.size();
}
void AutofillQueryContents::clear_form()
{
    form_.Clear();
}
const ::autofill::AutofillQueryContents_Form& AutofillQueryContents::form(int index) const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryContents.form)
    return form_.Get(index);
}
::autofill::AutofillQueryContents_Form* AutofillQueryContents::mutable_form(int index)
{
    // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryContents.form)
    return form_.Mutable(index);
}
::autofill::AutofillQueryContents_Form* AutofillQueryContents::add_form()
{
    // @@protoc_insertion_point(field_add:autofill.AutofillQueryContents.form)
    return form_.Add();
}
::google::protobuf::RepeatedPtrField<::autofill::AutofillQueryContents_Form>*
AutofillQueryContents::mutable_form()
{
    // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryContents.form)
    return &form_;
}
const ::google::protobuf::RepeatedPtrField<::autofill::AutofillQueryContents_Form>&
AutofillQueryContents::form() const
{
    // @@protoc_insertion_point(field_list:autofill.AutofillQueryContents.form)
    return form_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAutofillQueryResponseContents(
    AutofillQueryResponseContents* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForAutofillQueryResponseContents_Field(
    AutofillQueryResponseContents_Field* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryResponseContents_Field::kAutofillTypeFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryResponseContents_Field::AutofillQueryResponseContents_Field()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents.Field)
}

void AutofillQueryResponseContents_Field::InitAsDefaultInstance()
{
}

AutofillQueryResponseContents_Field::AutofillQueryResponseContents_Field(const AutofillQueryResponseContents_Field& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents.Field)
}

void AutofillQueryResponseContents_Field::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    autofill_type_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillQueryResponseContents_Field::~AutofillQueryResponseContents_Field()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents.Field)
    SharedDtor();
}

void AutofillQueryResponseContents_Field::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillQueryResponseContents_Field::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryResponseContents_Field& AutofillQueryResponseContents_Field::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillQueryResponseContents_Field* AutofillQueryResponseContents_Field::default_instance_ = NULL;

AutofillQueryResponseContents_Field* AutofillQueryResponseContents_Field::New(::google::protobuf::Arena* arena) const
{
    AutofillQueryResponseContents_Field* n = new AutofillQueryResponseContents_Field;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillQueryResponseContents_Field::Clear()
{
    // @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents.Field)
    autofill_type_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillQueryResponseContents_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillQueryResponseContents_Field, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents.Field)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required fixed32 autofill_type = 3;
        case 3: {
            if (tag == 29) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &autofill_type_)));
                set_has_autofill_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents.Field)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents.Field)
    return false;
#undef DO_
}

void AutofillQueryResponseContents_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents.Field)
    // required fixed32 autofill_type = 3;
    if (has_autofill_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->autofill_type(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents.Field)
}

int AutofillQueryResponseContents_Field::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents.Field)
    int total_size = 0;

    // required fixed32 autofill_type = 3;
    if (has_autofill_type()) {
        total_size += 1 + 4;
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillQueryResponseContents_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillQueryResponseContents_Field*>(&from));
}

void AutofillQueryResponseContents_Field::MergeFrom(const AutofillQueryResponseContents_Field& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents.Field)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_autofill_type()) {
            set_autofill_type(from.autofill_type());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillQueryResponseContents_Field::CopyFrom(const AutofillQueryResponseContents_Field& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents.Field)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillQueryResponseContents_Field::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000001) != 0x00000001)
        return false;

    return true;
}

void AutofillQueryResponseContents_Field::Swap(AutofillQueryResponseContents_Field* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillQueryResponseContents_Field::InternalSwap(AutofillQueryResponseContents_Field* other)
{
    std::swap(autofill_type_, other->autofill_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryResponseContents_Field::GetTypeName() const
{
    return "autofill.AutofillQueryResponseContents.Field";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillQueryResponseContents::kUploadRequiredFieldNumber;
const int AutofillQueryResponseContents::kFieldFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillQueryResponseContents::AutofillQueryResponseContents()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillQueryResponseContents)
}

void AutofillQueryResponseContents::InitAsDefaultInstance()
{
}

AutofillQueryResponseContents::AutofillQueryResponseContents(const AutofillQueryResponseContents& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponseContents)
}

void AutofillQueryResponseContents::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    upload_required_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillQueryResponseContents::~AutofillQueryResponseContents()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponseContents)
    SharedDtor();
}

void AutofillQueryResponseContents::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillQueryResponseContents::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillQueryResponseContents& AutofillQueryResponseContents::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillQueryResponseContents* AutofillQueryResponseContents::default_instance_ = NULL;

AutofillQueryResponseContents* AutofillQueryResponseContents::New(::google::protobuf::Arena* arena) const
{
    AutofillQueryResponseContents* n = new AutofillQueryResponseContents;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillQueryResponseContents::Clear()
{
    // @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponseContents)
    upload_required_ = false;
    field_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillQueryResponseContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillQueryResponseContents, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillQueryResponseContents)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional bool upload_required = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &upload_required_)));
                set_has_upload_required();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(19))
                goto parse_field;
            break;
        }

        // repeated group Field = 2 { ... };
        case 2: {
            if (tag == 19) {
            parse_field:
                DO_(input->IncrementRecursionDepth());
            parse_loop_field:
                DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                    2, input, add_field()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(19))
                goto parse_loop_field;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillQueryResponseContents)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillQueryResponseContents)
    return false;
#undef DO_
}

void AutofillQueryResponseContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillQueryResponseContents)
    // optional bool upload_required = 1;
    if (has_upload_required()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->upload_required(), output);
    }

    // repeated group Field = 2 { ... };
    for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteGroup(
            2, this->field(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillQueryResponseContents)
}

int AutofillQueryResponseContents::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponseContents)
    int total_size = 0;

    // optional bool upload_required = 1;
    if (has_upload_required()) {
        total_size += 1 + 1;
    }

    // repeated group Field = 2 { ... };
    total_size += 2 * this->field_size();
    for (int i = 0; i < this->field_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
            this->field(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillQueryResponseContents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillQueryResponseContents*>(&from));
}

void AutofillQueryResponseContents::MergeFrom(const AutofillQueryResponseContents& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponseContents)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    field_.MergeFrom(from.field_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_upload_required()) {
            set_upload_required(from.upload_required());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillQueryResponseContents::CopyFrom(const AutofillQueryResponseContents& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponseContents)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillQueryResponseContents::IsInitialized() const
{

    if (!::google::protobuf::internal::AllAreInitialized(this->field()))
        return false;
    return true;
}

void AutofillQueryResponseContents::Swap(AutofillQueryResponseContents* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillQueryResponseContents::InternalSwap(AutofillQueryResponseContents* other)
{
    std::swap(upload_required_, other->upload_required_);
    field_.UnsafeArenaSwap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillQueryResponseContents::GetTypeName() const
{
    return "autofill.AutofillQueryResponseContents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillQueryResponseContents_Field

// required fixed32 autofill_type = 3;
bool AutofillQueryResponseContents_Field::has_autofill_type() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryResponseContents_Field::set_has_autofill_type()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryResponseContents_Field::clear_has_autofill_type()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryResponseContents_Field::clear_autofill_type()
{
    autofill_type_ = 0u;
    clear_has_autofill_type();
}
::google::protobuf::uint32 AutofillQueryResponseContents_Field::autofill_type() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.Field.autofill_type)
    return autofill_type_;
}
void AutofillQueryResponseContents_Field::set_autofill_type(::google::protobuf::uint32 value)
{
    set_has_autofill_type();
    autofill_type_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponseContents.Field.autofill_type)
}

// -------------------------------------------------------------------

// AutofillQueryResponseContents

// optional bool upload_required = 1;
bool AutofillQueryResponseContents::has_upload_required() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillQueryResponseContents::set_has_upload_required()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillQueryResponseContents::clear_has_upload_required()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillQueryResponseContents::clear_upload_required()
{
    upload_required_ = false;
    clear_has_upload_required();
}
bool AutofillQueryResponseContents::upload_required() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.upload_required)
    return upload_required_;
}
void AutofillQueryResponseContents::set_upload_required(bool value)
{
    set_has_upload_required();
    upload_required_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponseContents.upload_required)
}

// repeated group Field = 2 { ... };
int AutofillQueryResponseContents::field_size() const
{
    return field_.size();
}
void AutofillQueryResponseContents::clear_field()
{
    field_.Clear();
}
const ::autofill::AutofillQueryResponseContents_Field& AutofillQueryResponseContents::field(int index) const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponseContents.field)
    return field_.Get(index);
}
::autofill::AutofillQueryResponseContents_Field* AutofillQueryResponseContents::mutable_field(int index)
{
    // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponseContents.field)
    return field_.Mutable(index);
}
::autofill::AutofillQueryResponseContents_Field* AutofillQueryResponseContents::add_field()
{
    // @@protoc_insertion_point(field_add:autofill.AutofillQueryResponseContents.field)
    return field_.Add();
}
::google::protobuf::RepeatedPtrField<::autofill::AutofillQueryResponseContents_Field>*
AutofillQueryResponseContents::mutable_field()
{
    // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryResponseContents.field)
    return &field_;
}
const ::google::protobuf::RepeatedPtrField<::autofill::AutofillQueryResponseContents_Field>&
AutofillQueryResponseContents::field() const
{
    // @@protoc_insertion_point(field_list:autofill.AutofillQueryResponseContents.field)
    return field_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAutofillUploadContents(
    AutofillUploadContents* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForAutofillUploadContents_Field(
    AutofillUploadContents_Field* ptr)
{
    return ptr->mutable_unknown_fields();
}

bool AutofillUploadContents_Field_PasswordGenerationType_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::NO_GENERATION;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::AUTOMATICALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::AUTOMATICALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::MANUALLY_TRIGGERED_GENERATION_ON_SIGN_UP_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::MANUALLY_TRIGGERED_GENERATION_ON_CHANGE_PASSWORD_FORM;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::IGNORED_GENERATION_POPUP;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::PasswordGenerationType_MIN;
const AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::PasswordGenerationType_MAX;
const int AutofillUploadContents_Field::PasswordGenerationType_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AutofillUploadContents_Field_FormClassifierOutcome_IsValid(int value)
{
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::NO_OUTCOME;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::NON_GENERATION_ELEMENT;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::GENERATION_ELEMENT;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::FormClassifierOutcome_MIN;
const AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::FormClassifierOutcome_MAX;
const int AutofillUploadContents_Field::FormClassifierOutcome_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillUploadContents_Field::kSignatureFieldNumber;
const int AutofillUploadContents_Field::kAutofillTypeFieldNumber;
const int AutofillUploadContents_Field::kNameFieldNumber;
const int AutofillUploadContents_Field::kAutocompleteFieldNumber;
const int AutofillUploadContents_Field::kTypeFieldNumber;
const int AutofillUploadContents_Field::kGenerationTypeFieldNumber;
const int AutofillUploadContents_Field::kFormClassifierOutcomeFieldNumber;
const int AutofillUploadContents_Field::kCssClassesFieldNumber;
const int AutofillUploadContents_Field::kPropertiesMaskFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillUploadContents_Field::AutofillUploadContents_Field()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents.Field)
}

void AutofillUploadContents_Field::InitAsDefaultInstance()
{
}

AutofillUploadContents_Field::AutofillUploadContents_Field(const AutofillUploadContents_Field& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents.Field)
}

void AutofillUploadContents_Field::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    signature_ = 0u;
    autofill_type_ = 0u;
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    autocomplete_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    generation_type_ = 0;
    form_classifier_outcome_ = 0;
    css_classes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    properties_mask_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillUploadContents_Field::~AutofillUploadContents_Field()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents.Field)
    SharedDtor();
}

void AutofillUploadContents_Field::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    autocomplete_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    css_classes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillUploadContents_Field::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillUploadContents_Field& AutofillUploadContents_Field::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillUploadContents_Field* AutofillUploadContents_Field::default_instance_ = NULL;

AutofillUploadContents_Field* AutofillUploadContents_Field::New(::google::protobuf::Arena* arena) const
{
    AutofillUploadContents_Field* n = new AutofillUploadContents_Field;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillUploadContents_Field::Clear()
{
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents.Field)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                                  \
    _Pragma("clang diagnostic push")                                                                                   \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(AutofillUploadContents_Field, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<AutofillUploadContents_Field*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 255u) {
        ZR_(signature_, autofill_type_);
        ZR_(generation_type_, form_classifier_outcome_);
        if (has_name()) {
            name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_autocomplete()) {
            autocomplete_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_type()) {
            type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        if (has_css_classes()) {
            css_classes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    properties_mask_ = 0u;

#undef ZR_HELPER_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillUploadContents_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillUploadContents_Field, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents.Field)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required fixed32 signature = 6;
        case 6: {
            if (tag == 53) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &signature_)));
                set_has_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(61))
                goto parse_autofill_type;
            break;
        }

        // required fixed32 autofill_type = 7;
        case 7: {
            if (tag == 61) {
            parse_autofill_type:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                    input, &autofill_type_)));
                set_has_autofill_type();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(66))
                goto parse_name;
            break;
        }

        // optional string name = 8;
        case 8: {
            if (tag == 66) {
            parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(74))
                goto parse_autocomplete;
            break;
        }

        // optional string autocomplete = 9;
        case 9: {
            if (tag == 74) {
            parse_autocomplete:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_autocomplete()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(82))
                goto parse_type;
            break;
        }

        // optional string type = 10;
        case 10: {
            if (tag == 82) {
            parse_type:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_type()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(136))
                goto parse_generation_type;
            break;
        }

        // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
        case 17: {
            if (tag == 136) {
            parse_generation_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::autofill::AutofillUploadContents_Field_PasswordGenerationType_IsValid(value)) {
                    set_generation_type(static_cast<::autofill::AutofillUploadContents_Field_PasswordGenerationType>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(136);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(144))
                goto parse_form_classifier_outcome;
            break;
        }

        // optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
        case 18: {
            if (tag == 144) {
            parse_form_classifier_outcome:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                    input, &value)));
                if (::autofill::AutofillUploadContents_Field_FormClassifierOutcome_IsValid(value)) {
                    set_form_classifier_outcome(static_cast<::autofill::AutofillUploadContents_Field_FormClassifierOutcome>(value));
                } else {
                    unknown_fields_stream.WriteVarint32(144);
                    unknown_fields_stream.WriteVarint32(value);
                }
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(154))
                goto parse_css_classes;
            break;
        }

        // optional string css_classes = 19;
        case 19: {
            if (tag == 154) {
            parse_css_classes:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_css_classes()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(160))
                goto parse_properties_mask;
            break;
        }

        // optional uint32 properties_mask = 20;
        case 20: {
            if (tag == 160) {
            parse_properties_mask:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, &properties_mask_)));
                set_has_properties_mask();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents.Field)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents.Field)
    return false;
#undef DO_
}

void AutofillUploadContents_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents.Field)
    // required fixed32 signature = 6;
    if (has_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->signature(), output);
    }

    // required fixed32 autofill_type = 7;
    if (has_autofill_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->autofill_type(), output);
    }

    // optional string name = 8;
    if (has_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            8, this->name(), output);
    }

    // optional string autocomplete = 9;
    if (has_autocomplete()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            9, this->autocomplete(), output);
    }

    // optional string type = 10;
    if (has_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            10, this->type(), output);
    }

    // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
    if (has_generation_type()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            17, this->generation_type(), output);
    }

    // optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
    if (has_form_classifier_outcome()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
            18, this->form_classifier_outcome(), output);
    }

    // optional string css_classes = 19;
    if (has_css_classes()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            19, this->css_classes(), output);
    }

    // optional uint32 properties_mask = 20;
    if (has_properties_mask()) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->properties_mask(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents.Field)
}

int AutofillUploadContents_Field::RequiredFieldsByteSizeFallback() const
{
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:autofill.AutofillUploadContents.Field)
    int total_size = 0;

    if (has_signature()) {
        // required fixed32 signature = 6;
        total_size += 1 + 4;
    }

    if (has_autofill_type()) {
        // required fixed32 autofill_type = 7;
        total_size += 1 + 4;
    }

    return total_size;
}
int AutofillUploadContents_Field::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents.Field)
    int total_size = 0;

    if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) { // All required fields are present.
        // required fixed32 signature = 6;
        total_size += 1 + 4;

        // required fixed32 autofill_type = 7;
        total_size += 1 + 4;

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    if (_has_bits_[2 / 32] & 252u) {
        // optional string name = 8;
        if (has_name()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
        }

        // optional string autocomplete = 9;
        if (has_autocomplete()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->autocomplete());
        }

        // optional string type = 10;
        if (has_type()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->type());
        }

        // optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
        if (has_generation_type()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->generation_type());
        }

        // optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
        if (has_form_classifier_outcome()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->form_classifier_outcome());
        }

        // optional string css_classes = 19;
        if (has_css_classes()) {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->css_classes());
        }
    }
    // optional uint32 properties_mask = 20;
    if (has_properties_mask()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->properties_mask());
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillUploadContents_Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillUploadContents_Field*>(&from));
}

void AutofillUploadContents_Field::MergeFrom(const AutofillUploadContents_Field& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents.Field)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_signature()) {
            set_signature(from.signature());
        }
        if (from.has_autofill_type()) {
            set_autofill_type(from.autofill_type());
        }
        if (from.has_name()) {
            set_has_name();
            name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
        }
        if (from.has_autocomplete()) {
            set_has_autocomplete();
            autocomplete_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autocomplete_);
        }
        if (from.has_type()) {
            set_has_type();
            type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
        }
        if (from.has_generation_type()) {
            set_generation_type(from.generation_type());
        }
        if (from.has_form_classifier_outcome()) {
            set_form_classifier_outcome(from.form_classifier_outcome());
        }
        if (from.has_css_classes()) {
            set_has_css_classes();
            css_classes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.css_classes_);
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_properties_mask()) {
            set_properties_mask(from.properties_mask());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillUploadContents_Field::CopyFrom(const AutofillUploadContents_Field& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents.Field)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillUploadContents_Field::IsInitialized() const
{
    if ((_has_bits_[0] & 0x00000003) != 0x00000003)
        return false;

    return true;
}

void AutofillUploadContents_Field::Swap(AutofillUploadContents_Field* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillUploadContents_Field::InternalSwap(AutofillUploadContents_Field* other)
{
    std::swap(signature_, other->signature_);
    std::swap(autofill_type_, other->autofill_type_);
    name_.Swap(&other->name_);
    autocomplete_.Swap(&other->autocomplete_);
    type_.Swap(&other->type_);
    std::swap(generation_type_, other->generation_type_);
    std::swap(form_classifier_outcome_, other->form_classifier_outcome_);
    css_classes_.Swap(&other->css_classes_);
    std::swap(properties_mask_, other->properties_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillUploadContents_Field::GetTypeName() const
{
    return "autofill.AutofillUploadContents.Field";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutofillUploadContents::kClientVersionFieldNumber;
const int AutofillUploadContents::kFormSignatureFieldNumber;
const int AutofillUploadContents::kAutofillUsedFieldNumber;
const int AutofillUploadContents::kDataPresentFieldNumber;
const int AutofillUploadContents::kFieldFieldNumber;
const int AutofillUploadContents::kActionSignatureFieldNumber;
const int AutofillUploadContents::kLoginFormSignatureFieldNumber;
const int AutofillUploadContents::kSubmissionFieldNumber;
const int AutofillUploadContents::kFormNameFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

AutofillUploadContents::AutofillUploadContents()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:autofill.AutofillUploadContents)
}

void AutofillUploadContents::InitAsDefaultInstance()
{
}

AutofillUploadContents::AutofillUploadContents(const AutofillUploadContents& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadContents)
}

void AutofillUploadContents::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    form_signature_ = GOOGLE_ULONGLONG(0);
    autofill_used_ = false;
    data_present_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    action_signature_ = GOOGLE_ULONGLONG(0);
    login_form_signature_ = GOOGLE_ULONGLONG(0);
    submission_ = false;
    form_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillUploadContents::~AutofillUploadContents()
{
    // @@protoc_insertion_point(destructor:autofill.AutofillUploadContents)
    SharedDtor();
}

void AutofillUploadContents::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    data_present_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    form_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void AutofillUploadContents::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillUploadContents& AutofillUploadContents::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_server_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_server_2eproto();
#endif
    return *default_instance_;
}

AutofillUploadContents* AutofillUploadContents::default_instance_ = NULL;

AutofillUploadContents* AutofillUploadContents::New(::google::protobuf::Arena* arena) const
{
    AutofillUploadContents* n = new AutofillUploadContents;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void AutofillUploadContents::Clear()
{
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadContents)
#if defined(__clang__)
#define ZR_HELPER_(f)                                                                                            \
    _Pragma("clang diagnostic push")                                                                             \
        _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") __builtin_offsetof(AutofillUploadContents, f) \
            _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>( \
    &reinterpret_cast<AutofillUploadContents*>(16)->f)
#endif

#define ZR_(first, last)                                          \
    do {                                                          \
        ::memset(&first, 0,                                       \
            ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last)); \
    } while (0)

    if (_has_bits_[0 / 32] & 239u) {
        ZR_(action_signature_, login_form_signature_);
        ZR_(autofill_used_, submission_);
        if (has_client_version()) {
            client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        form_signature_ = GOOGLE_ULONGLONG(0);
        if (has_data_present()) {
            data_present_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    if (has_form_name()) {
        form_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

#undef ZR_HELPER_
#undef ZR_

    field_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutofillUploadContents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForAutofillUploadContents, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:autofill.AutofillUploadContents)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // required string client_version = 1;
        case 1: {
            if (tag == 10) {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_client_version()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(17))
                goto parse_form_signature;
            break;
        }

        // required fixed64 form_signature = 2;
        case 2: {
            if (tag == 17) {
            parse_form_signature:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &form_signature_)));
                set_has_form_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(24))
                goto parse_autofill_used;
            break;
        }

        // required bool autofill_used = 3;
        case 3: {
            if (tag == 24) {
            parse_autofill_used:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &autofill_used_)));
                set_has_autofill_used();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(34))
                goto parse_data_present;
            break;
        }

        // required string data_present = 4;
        case 4: {
            if (tag == 34) {
            parse_data_present:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_data_present()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(43))
                goto parse_field;
            break;
        }

        // repeated group Field = 5 { ... };
        case 5: {
            if (tag == 43) {
            parse_field:
                DO_(input->IncrementRecursionDepth());
            parse_loop_field:
                DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                    5, input, add_field()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(43))
                goto parse_loop_field;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectTag(105))
                goto parse_action_signature;
            break;
        }

        // optional fixed64 action_signature = 13;
        case 13: {
            if (tag == 105) {
            parse_action_signature:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &action_signature_)));
                set_has_action_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(113))
                goto parse_login_form_signature;
            break;
        }

        // optional fixed64 login_form_signature = 14;
        case 14: {
            if (tag == 113) {
            parse_login_form_signature:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &login_form_signature_)));
                set_has_login_form_signature();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(120))
                goto parse_submission;
            break;
        }

        // optional bool submission = 15;
        case 15: {
            if (tag == 120) {
            parse_submission:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, &submission_)));
                set_has_submission();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(130))
                goto parse_form_name;
            break;
        }

        // optional string form_name = 16;
        case 16: {
            if (tag == 130) {
            parse_form_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                    input, this->mutable_form_name()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:autofill.AutofillUploadContents)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:autofill.AutofillUploadContents)
    return false;
#undef DO_
}

void AutofillUploadContents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:autofill.AutofillUploadContents)
    // required string client_version = 1;
    if (has_client_version()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            1, this->client_version(), output);
    }

    // required fixed64 form_signature = 2;
    if (has_form_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->form_signature(), output);
    }

    // required bool autofill_used = 3;
    if (has_autofill_used()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autofill_used(), output);
    }

    // required string data_present = 4;
    if (has_data_present()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            4, this->data_present(), output);
    }

    // repeated group Field = 5 { ... };
    for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteGroup(
            5, this->field(i), output);
    }

    // optional fixed64 action_signature = 13;
    if (has_action_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->action_signature(), output);
    }

    // optional fixed64 login_form_signature = 14;
    if (has_login_form_signature()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->login_form_signature(), output);
    }

    // optional bool submission = 15;
    if (has_submission()) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->submission(), output);
    }

    // optional string form_name = 16;
    if (has_form_name()) {
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
            16, this->form_name(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:autofill.AutofillUploadContents)
}

int AutofillUploadContents::RequiredFieldsByteSizeFallback() const
{
    // @@protoc_insertion_point(required_fields_byte_size_fallback_start:autofill.AutofillUploadContents)
    int total_size = 0;

    if (has_client_version()) {
        // required string client_version = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->client_version());
    }

    if (has_form_signature()) {
        // required fixed64 form_signature = 2;
        total_size += 1 + 8;
    }

    if (has_autofill_used()) {
        // required bool autofill_used = 3;
        total_size += 1 + 1;
    }

    if (has_data_present()) {
        // required string data_present = 4;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->data_present());
    }

    return total_size;
}
int AutofillUploadContents::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadContents)
    int total_size = 0;

    if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) { // All required fields are present.
        // required string client_version = 1;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->client_version());

        // required fixed64 form_signature = 2;
        total_size += 1 + 8;

        // required bool autofill_used = 3;
        total_size += 1 + 1;

        // required string data_present = 4;
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->data_present());

    } else {
        total_size += RequiredFieldsByteSizeFallback();
    }
    if (_has_bits_[5 / 32] & 224u) {
        // optional fixed64 action_signature = 13;
        if (has_action_signature()) {
            total_size += 1 + 8;
        }

        // optional fixed64 login_form_signature = 14;
        if (has_login_form_signature()) {
            total_size += 1 + 8;
        }

        // optional bool submission = 15;
        if (has_submission()) {
            total_size += 1 + 1;
        }
    }
    // optional string form_name = 16;
    if (has_form_name()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(this->form_name());
    }

    // repeated group Field = 5 { ... };
    total_size += 2 * this->field_size();
    for (int i = 0; i < this->field_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
            this->field(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void AutofillUploadContents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const AutofillUploadContents*>(&from));
}

void AutofillUploadContents::MergeFrom(const AutofillUploadContents& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadContents)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    field_.MergeFrom(from.field_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_client_version()) {
            set_has_client_version();
            client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
        }
        if (from.has_form_signature()) {
            set_form_signature(from.form_signature());
        }
        if (from.has_autofill_used()) {
            set_autofill_used(from.autofill_used());
        }
        if (from.has_data_present()) {
            set_has_data_present();
            data_present_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_present_);
        }
        if (from.has_action_signature()) {
            set_action_signature(from.action_signature());
        }
        if (from.has_login_form_signature()) {
            set_login_form_signature(from.login_form_signature());
        }
        if (from.has_submission()) {
            set_submission(from.submission());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_form_name()) {
            set_has_form_name();
            form_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_name_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void AutofillUploadContents::CopyFrom(const AutofillUploadContents& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadContents)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool AutofillUploadContents::IsInitialized() const
{
    if ((_has_bits_[0] & 0x0000000f) != 0x0000000f)
        return false;

    if (!::google::protobuf::internal::AllAreInitialized(this->field()))
        return false;
    return true;
}

void AutofillUploadContents::Swap(AutofillUploadContents* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void AutofillUploadContents::InternalSwap(AutofillUploadContents* other)
{
    client_version_.Swap(&other->client_version_);
    std::swap(form_signature_, other->form_signature_);
    std::swap(autofill_used_, other->autofill_used_);
    data_present_.Swap(&other->data_present_);
    field_.UnsafeArenaSwap(&other->field_);
    std::swap(action_signature_, other->action_signature_);
    std::swap(login_form_signature_, other->login_form_signature_);
    std::swap(submission_, other->submission_);
    form_name_.Swap(&other->form_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string AutofillUploadContents::GetTypeName() const
{
    return "autofill.AutofillUploadContents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutofillUploadContents_Field

// required fixed32 signature = 6;
bool AutofillUploadContents_Field::has_signature() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillUploadContents_Field::set_has_signature()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillUploadContents_Field::clear_has_signature()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillUploadContents_Field::clear_signature()
{
    signature_ = 0u;
    clear_has_signature();
}
::google::protobuf::uint32 AutofillUploadContents_Field::signature() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.signature)
    return signature_;
}
void AutofillUploadContents_Field::set_signature(::google::protobuf::uint32 value)
{
    set_has_signature();
    signature_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.signature)
}

// required fixed32 autofill_type = 7;
bool AutofillUploadContents_Field::has_autofill_type() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutofillUploadContents_Field::set_has_autofill_type()
{
    _has_bits_[0] |= 0x00000002u;
}
void AutofillUploadContents_Field::clear_has_autofill_type()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AutofillUploadContents_Field::clear_autofill_type()
{
    autofill_type_ = 0u;
    clear_has_autofill_type();
}
::google::protobuf::uint32 AutofillUploadContents_Field::autofill_type() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.autofill_type)
    return autofill_type_;
}
void AutofillUploadContents_Field::set_autofill_type(::google::protobuf::uint32 value)
{
    set_has_autofill_type();
    autofill_type_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.autofill_type)
}

// optional string name = 8;
bool AutofillUploadContents_Field::has_name() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutofillUploadContents_Field::set_has_name()
{
    _has_bits_[0] |= 0x00000004u;
}
void AutofillUploadContents_Field::clear_has_name()
{
    _has_bits_[0] &= ~0x00000004u;
}
void AutofillUploadContents_Field::clear_name()
{
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_name();
}
const ::std::string& AutofillUploadContents_Field::name() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.name)
    return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_name(const ::std::string& value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.name)
}
void AutofillUploadContents_Field::set_name(const char* value)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.name)
}
void AutofillUploadContents_Field::set_name(const char* value, size_t size)
{
    set_has_name();
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.name)
}
::std::string* AutofillUploadContents_Field::mutable_name()
{
    set_has_name();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_name()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.name)
    clear_has_name();
    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_name(::std::string* name)
{
    if (name != NULL) {
        set_has_name();
    } else {
        clear_has_name();
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.name)
}

// optional string autocomplete = 9;
bool AutofillUploadContents_Field::has_autocomplete() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutofillUploadContents_Field::set_has_autocomplete()
{
    _has_bits_[0] |= 0x00000008u;
}
void AutofillUploadContents_Field::clear_has_autocomplete()
{
    _has_bits_[0] &= ~0x00000008u;
}
void AutofillUploadContents_Field::clear_autocomplete()
{
    autocomplete_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_autocomplete();
}
const ::std::string& AutofillUploadContents_Field::autocomplete() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.autocomplete)
    return autocomplete_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_autocomplete(const ::std::string& value)
{
    set_has_autocomplete();
    autocomplete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.autocomplete)
}
void AutofillUploadContents_Field::set_autocomplete(const char* value)
{
    set_has_autocomplete();
    autocomplete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.autocomplete)
}
void AutofillUploadContents_Field::set_autocomplete(const char* value, size_t size)
{
    set_has_autocomplete();
    autocomplete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.autocomplete)
}
::std::string* AutofillUploadContents_Field::mutable_autocomplete()
{
    set_has_autocomplete();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.autocomplete)
    return autocomplete_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_autocomplete()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.autocomplete)
    clear_has_autocomplete();
    return autocomplete_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_autocomplete(::std::string* autocomplete)
{
    if (autocomplete != NULL) {
        set_has_autocomplete();
    } else {
        clear_has_autocomplete();
    }
    autocomplete_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autocomplete);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.autocomplete)
}

// optional string type = 10;
bool AutofillUploadContents_Field::has_type() const
{
    return (_has_bits_[0] & 0x00000010u) != 0;
}
void AutofillUploadContents_Field::set_has_type()
{
    _has_bits_[0] |= 0x00000010u;
}
void AutofillUploadContents_Field::clear_has_type()
{
    _has_bits_[0] &= ~0x00000010u;
}
void AutofillUploadContents_Field::clear_type()
{
    type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
}
const ::std::string& AutofillUploadContents_Field::type() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.type)
    return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_type(const ::std::string& value)
{
    set_has_type();
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.type)
}
void AutofillUploadContents_Field::set_type(const char* value)
{
    set_has_type();
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.type)
}
void AutofillUploadContents_Field::set_type(const char* value, size_t size)
{
    set_has_type();
    type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.type)
}
::std::string* AutofillUploadContents_Field::mutable_type()
{
    set_has_type();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.type)
    return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_type()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.type)
    clear_has_type();
    return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_type(::std::string* type)
{
    if (type != NULL) {
        set_has_type();
    } else {
        clear_has_type();
    }
    type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.type)
}

// optional .autofill.AutofillUploadContents.Field.PasswordGenerationType generation_type = 17;
bool AutofillUploadContents_Field::has_generation_type() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void AutofillUploadContents_Field::set_has_generation_type()
{
    _has_bits_[0] |= 0x00000020u;
}
void AutofillUploadContents_Field::clear_has_generation_type()
{
    _has_bits_[0] &= ~0x00000020u;
}
void AutofillUploadContents_Field::clear_generation_type()
{
    generation_type_ = 0;
    clear_has_generation_type();
}
::autofill::AutofillUploadContents_Field_PasswordGenerationType AutofillUploadContents_Field::generation_type() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.generation_type)
    return static_cast<::autofill::AutofillUploadContents_Field_PasswordGenerationType>(generation_type_);
}
void AutofillUploadContents_Field::set_generation_type(::autofill::AutofillUploadContents_Field_PasswordGenerationType value)
{
    assert(::autofill::AutofillUploadContents_Field_PasswordGenerationType_IsValid(value));
    set_has_generation_type();
    generation_type_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.generation_type)
}

// optional .autofill.AutofillUploadContents.Field.FormClassifierOutcome form_classifier_outcome = 18;
bool AutofillUploadContents_Field::has_form_classifier_outcome() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void AutofillUploadContents_Field::set_has_form_classifier_outcome()
{
    _has_bits_[0] |= 0x00000040u;
}
void AutofillUploadContents_Field::clear_has_form_classifier_outcome()
{
    _has_bits_[0] &= ~0x00000040u;
}
void AutofillUploadContents_Field::clear_form_classifier_outcome()
{
    form_classifier_outcome_ = 0;
    clear_has_form_classifier_outcome();
}
::autofill::AutofillUploadContents_Field_FormClassifierOutcome AutofillUploadContents_Field::form_classifier_outcome() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.form_classifier_outcome)
    return static_cast<::autofill::AutofillUploadContents_Field_FormClassifierOutcome>(form_classifier_outcome_);
}
void AutofillUploadContents_Field::set_form_classifier_outcome(::autofill::AutofillUploadContents_Field_FormClassifierOutcome value)
{
    assert(::autofill::AutofillUploadContents_Field_FormClassifierOutcome_IsValid(value));
    set_has_form_classifier_outcome();
    form_classifier_outcome_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.form_classifier_outcome)
}

// optional string css_classes = 19;
bool AutofillUploadContents_Field::has_css_classes() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void AutofillUploadContents_Field::set_has_css_classes()
{
    _has_bits_[0] |= 0x00000080u;
}
void AutofillUploadContents_Field::clear_has_css_classes()
{
    _has_bits_[0] &= ~0x00000080u;
}
void AutofillUploadContents_Field::clear_css_classes()
{
    css_classes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_css_classes();
}
const ::std::string& AutofillUploadContents_Field::css_classes() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.css_classes)
    return css_classes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_css_classes(const ::std::string& value)
{
    set_has_css_classes();
    css_classes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.css_classes)
}
void AutofillUploadContents_Field::set_css_classes(const char* value)
{
    set_has_css_classes();
    css_classes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.Field.css_classes)
}
void AutofillUploadContents_Field::set_css_classes(const char* value, size_t size)
{
    set_has_css_classes();
    css_classes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.Field.css_classes)
}
::std::string* AutofillUploadContents_Field::mutable_css_classes()
{
    set_has_css_classes();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.Field.css_classes)
    return css_classes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents_Field::release_css_classes()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.Field.css_classes)
    clear_has_css_classes();
    return css_classes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents_Field::set_allocated_css_classes(::std::string* css_classes)
{
    if (css_classes != NULL) {
        set_has_css_classes();
    } else {
        clear_has_css_classes();
    }
    css_classes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), css_classes);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.Field.css_classes)
}

// optional uint32 properties_mask = 20;
bool AutofillUploadContents_Field::has_properties_mask() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void AutofillUploadContents_Field::set_has_properties_mask()
{
    _has_bits_[0] |= 0x00000100u;
}
void AutofillUploadContents_Field::clear_has_properties_mask()
{
    _has_bits_[0] &= ~0x00000100u;
}
void AutofillUploadContents_Field::clear_properties_mask()
{
    properties_mask_ = 0u;
    clear_has_properties_mask();
}
::google::protobuf::uint32 AutofillUploadContents_Field::properties_mask() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.Field.properties_mask)
    return properties_mask_;
}
void AutofillUploadContents_Field::set_properties_mask(::google::protobuf::uint32 value)
{
    set_has_properties_mask();
    properties_mask_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.Field.properties_mask)
}

// -------------------------------------------------------------------

// AutofillUploadContents

// required string client_version = 1;
bool AutofillUploadContents::has_client_version() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutofillUploadContents::set_has_client_version()
{
    _has_bits_[0] |= 0x00000001u;
}
void AutofillUploadContents::clear_has_client_version()
{
    _has_bits_[0] &= ~0x00000001u;
}
void AutofillUploadContents::clear_client_version()
{
    client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_client_version();
}
const ::std::string& AutofillUploadContents::client_version() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.client_version)
    return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_client_version(const ::std::string& value)
{
    set_has_client_version();
    client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.client_version)
}
void AutofillUploadContents::set_client_version(const char* value)
{
    set_has_client_version();
    client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.client_version)
}
void AutofillUploadContents::set_client_version(const char* value, size_t size)
{
    set_has_client_version();
    client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.client_version)
}
::std::string* AutofillUploadContents::mutable_client_version()
{
    set_has_client_version();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.client_version)
    return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents::release_client_version()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.client_version)
    clear_has_client_version();
    return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_allocated_client_version(::std::string* client_version)
{
    if (client_version != NULL) {
        set_has_client_version();
    } else {
        clear_has_client_version();
    }
    client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.client_version)
}

// required fixed64 form_signature = 2;
bool AutofillUploadContents::has_form_signature() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutofillUploadContents::set_has_form_signature()
{
    _has_bits_[0] |= 0x00000002u;
}
void AutofillUploadContents::clear_has_form_signature()
{
    _has_bits_[0] &= ~0x00000002u;
}
void AutofillUploadContents::clear_form_signature()
{
    form_signature_ = GOOGLE_ULONGLONG(0);
    clear_has_form_signature();
}
::google::protobuf::uint64 AutofillUploadContents::form_signature() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.form_signature)
    return form_signature_;
}
void AutofillUploadContents::set_form_signature(::google::protobuf::uint64 value)
{
    set_has_form_signature();
    form_signature_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.form_signature)
}

// required bool autofill_used = 3;
bool AutofillUploadContents::has_autofill_used() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutofillUploadContents::set_has_autofill_used()
{
    _has_bits_[0] |= 0x00000004u;
}
void AutofillUploadContents::clear_has_autofill_used()
{
    _has_bits_[0] &= ~0x00000004u;
}
void AutofillUploadContents::clear_autofill_used()
{
    autofill_used_ = false;
    clear_has_autofill_used();
}
bool AutofillUploadContents::autofill_used() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.autofill_used)
    return autofill_used_;
}
void AutofillUploadContents::set_autofill_used(bool value)
{
    set_has_autofill_used();
    autofill_used_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.autofill_used)
}

// required string data_present = 4;
bool AutofillUploadContents::has_data_present() const
{
    return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutofillUploadContents::set_has_data_present()
{
    _has_bits_[0] |= 0x00000008u;
}
void AutofillUploadContents::clear_has_data_present()
{
    _has_bits_[0] &= ~0x00000008u;
}
void AutofillUploadContents::clear_data_present()
{
    data_present_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_present();
}
const ::std::string& AutofillUploadContents::data_present() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.data_present)
    return data_present_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_data_present(const ::std::string& value)
{
    set_has_data_present();
    data_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.data_present)
}
void AutofillUploadContents::set_data_present(const char* value)
{
    set_has_data_present();
    data_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.data_present)
}
void AutofillUploadContents::set_data_present(const char* value, size_t size)
{
    set_has_data_present();
    data_present_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.data_present)
}
::std::string* AutofillUploadContents::mutable_data_present()
{
    set_has_data_present();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.data_present)
    return data_present_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents::release_data_present()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.data_present)
    clear_has_data_present();
    return data_present_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_allocated_data_present(::std::string* data_present)
{
    if (data_present != NULL) {
        set_has_data_present();
    } else {
        clear_has_data_present();
    }
    data_present_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_present);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.data_present)
}

// repeated group Field = 5 { ... };
int AutofillUploadContents::field_size() const
{
    return field_.size();
}
void AutofillUploadContents::clear_field()
{
    field_.Clear();
}
const ::autofill::AutofillUploadContents_Field& AutofillUploadContents::field(int index) const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.field)
    return field_.Get(index);
}
::autofill::AutofillUploadContents_Field* AutofillUploadContents::mutable_field(int index)
{
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.field)
    return field_.Mutable(index);
}
::autofill::AutofillUploadContents_Field* AutofillUploadContents::add_field()
{
    // @@protoc_insertion_point(field_add:autofill.AutofillUploadContents.field)
    return field_.Add();
}
::google::protobuf::RepeatedPtrField<::autofill::AutofillUploadContents_Field>*
AutofillUploadContents::mutable_field()
{
    // @@protoc_insertion_point(field_mutable_list:autofill.AutofillUploadContents.field)
    return &field_;
}
const ::google::protobuf::RepeatedPtrField<::autofill::AutofillUploadContents_Field>&
AutofillUploadContents::field() const
{
    // @@protoc_insertion_point(field_list:autofill.AutofillUploadContents.field)
    return field_;
}

// optional fixed64 action_signature = 13;
bool AutofillUploadContents::has_action_signature() const
{
    return (_has_bits_[0] & 0x00000020u) != 0;
}
void AutofillUploadContents::set_has_action_signature()
{
    _has_bits_[0] |= 0x00000020u;
}
void AutofillUploadContents::clear_has_action_signature()
{
    _has_bits_[0] &= ~0x00000020u;
}
void AutofillUploadContents::clear_action_signature()
{
    action_signature_ = GOOGLE_ULONGLONG(0);
    clear_has_action_signature();
}
::google::protobuf::uint64 AutofillUploadContents::action_signature() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.action_signature)
    return action_signature_;
}
void AutofillUploadContents::set_action_signature(::google::protobuf::uint64 value)
{
    set_has_action_signature();
    action_signature_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.action_signature)
}

// optional fixed64 login_form_signature = 14;
bool AutofillUploadContents::has_login_form_signature() const
{
    return (_has_bits_[0] & 0x00000040u) != 0;
}
void AutofillUploadContents::set_has_login_form_signature()
{
    _has_bits_[0] |= 0x00000040u;
}
void AutofillUploadContents::clear_has_login_form_signature()
{
    _has_bits_[0] &= ~0x00000040u;
}
void AutofillUploadContents::clear_login_form_signature()
{
    login_form_signature_ = GOOGLE_ULONGLONG(0);
    clear_has_login_form_signature();
}
::google::protobuf::uint64 AutofillUploadContents::login_form_signature() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.login_form_signature)
    return login_form_signature_;
}
void AutofillUploadContents::set_login_form_signature(::google::protobuf::uint64 value)
{
    set_has_login_form_signature();
    login_form_signature_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.login_form_signature)
}

// optional bool submission = 15;
bool AutofillUploadContents::has_submission() const
{
    return (_has_bits_[0] & 0x00000080u) != 0;
}
void AutofillUploadContents::set_has_submission()
{
    _has_bits_[0] |= 0x00000080u;
}
void AutofillUploadContents::clear_has_submission()
{
    _has_bits_[0] &= ~0x00000080u;
}
void AutofillUploadContents::clear_submission()
{
    submission_ = false;
    clear_has_submission();
}
bool AutofillUploadContents::submission() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.submission)
    return submission_;
}
void AutofillUploadContents::set_submission(bool value)
{
    set_has_submission();
    submission_ = value;
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.submission)
}

// optional string form_name = 16;
bool AutofillUploadContents::has_form_name() const
{
    return (_has_bits_[0] & 0x00000100u) != 0;
}
void AutofillUploadContents::set_has_form_name()
{
    _has_bits_[0] |= 0x00000100u;
}
void AutofillUploadContents::clear_has_form_name()
{
    _has_bits_[0] &= ~0x00000100u;
}
void AutofillUploadContents::clear_form_name()
{
    form_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_form_name();
}
const ::std::string& AutofillUploadContents::form_name() const
{
    // @@protoc_insertion_point(field_get:autofill.AutofillUploadContents.form_name)
    return form_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_form_name(const ::std::string& value)
{
    set_has_form_name();
    form_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:autofill.AutofillUploadContents.form_name)
}
void AutofillUploadContents::set_form_name(const char* value)
{
    set_has_form_name();
    form_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:autofill.AutofillUploadContents.form_name)
}
void AutofillUploadContents::set_form_name(const char* value, size_t size)
{
    set_has_form_name();
    form_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:autofill.AutofillUploadContents.form_name)
}
::std::string* AutofillUploadContents::mutable_form_name()
{
    set_has_form_name();
    // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadContents.form_name)
    return form_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutofillUploadContents::release_form_name()
{
    // @@protoc_insertion_point(field_release:autofill.AutofillUploadContents.form_name)
    clear_has_form_name();
    return form_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutofillUploadContents::set_allocated_form_name(::std::string* form_name)
{
    if (form_name != NULL) {
        set_has_form_name();
    } else {
        clear_has_form_name();
    }
    form_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_name);
    // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadContents.form_name)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace autofill

// @@protoc_insertion_point(global_scope)
