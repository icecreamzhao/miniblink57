// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/safe_browsing/SafeBrowsingApiBridge

#ifndef org_chromium_components_safe_browsing_SafeBrowsingApiBridge_JNI
#define org_chromium_components_safe_browsing_SafeBrowsingApiBridge_JNI

#include <jni.h>

#include "../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSafeBrowsingApiBridgeClassPath[] = "org/chromium/components/safe_browsing/SafeBrowsingApiBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SafeBrowsingApiBridge_clazz __attribute__((unused)) = 0;
#define SafeBrowsingApiBridge_clazz(env) base::android::LazyGetClass(env, kSafeBrowsingApiBridgeClassPath, &g_SafeBrowsingApiBridge_clazz)

} // namespace

namespace safe_browsing {

// Step 2: method stubs.

static void OnUrlCheckDone(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong callbackId,
    jint resultStatus,
    const base::android::JavaParamRef<jstring>& metadata);

JNI_GENERATOR_EXPORT void
Java_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_nativeOnUrlCheckDone(JNIEnv*
                                                                                           env,
    jclass jcaller,
    jlong callbackId,
    jint resultStatus,
    jstring metadata)
{
    return OnUrlCheckDone(env, base::android::JavaParamRef<jclass>(env, jcaller),
        callbackId, resultStatus, base::android::JavaParamRef<jstring>(env, metadata));
}

static base::subtle::AtomicWord g_SafeBrowsingApiBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_SafeBrowsingApiBridge_create(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& context)
{
    CHECK_CLAZZ(env, SafeBrowsingApiBridge_clazz(env),
        SafeBrowsingApiBridge_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SafeBrowsingApiBridge_clazz(env),
        "create",
        "("
        "Landroid/content/Context;"
        ")"
        "Lorg/chromium/components/safe_browsing/SafeBrowsingApiHandler;",
        &g_SafeBrowsingApiBridge_create);

    jobject ret = env->CallStaticObjectMethod(SafeBrowsingApiBridge_clazz(env),
        method_id, context.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SafeBrowsingApiBridge_startUriLookup = 0;
static void Java_SafeBrowsingApiBridge_startUriLookup(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& handler,
    jlong callbackId,
    const base::android::JavaRefOrBare<jstring>& uri,
    const base::android::JavaRefOrBare<jintArray>& threatsOfInterest)
{
    CHECK_CLAZZ(env, SafeBrowsingApiBridge_clazz(env),
        SafeBrowsingApiBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SafeBrowsingApiBridge_clazz(env),
        "startUriLookup",
        "("
        "Lorg/chromium/components/safe_browsing/SafeBrowsingApiHandler;"
        "J"
        "Ljava/lang/String;"
        "[I"
        ")"
        "V",
        &g_SafeBrowsingApiBridge_startUriLookup);

    env->CallStaticVoidMethod(SafeBrowsingApiBridge_clazz(env),
        method_id, handler.obj(), callbackId, uri.obj(),
        threatsOfInterest.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSafeBrowsingApiBridge[] = {
    { "nativeOnUrlCheckDone",
        "("
        "J"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_components_safe_1browsing_SafeBrowsingApiBridge_nativeOnUrlCheckDone) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsSafeBrowsingApiBridgeSize = arraysize(kMethodsSafeBrowsingApiBridge);

    if (env->RegisterNatives(SafeBrowsingApiBridge_clazz(env),
            kMethodsSafeBrowsingApiBridge,
            kMethodsSafeBrowsingApiBridgeSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, SafeBrowsingApiBridge_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace safe_browsing

#endif // org_chromium_components_safe_browsing_SafeBrowsingApiBridge_JNI
