// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rappor_metric.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rappor_metric.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace rappor {

void protobuf_ShutdownFile_rappor_5fmetric_2eproto()
{
    delete RapporReports::default_instance_;
    delete RapporReports_Report::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_rappor_5fmetric_2eproto_impl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_rappor_5fmetric_2eproto()
{
    static bool already_here = false;
    if (already_here)
        return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
    RapporReports::default_instance_ = new RapporReports();
    RapporReports_Report::default_instance_ = new RapporReports_Report();
    RapporReports::default_instance_->InitAsDefaultInstance();
    RapporReports_Report::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rappor_5fmetric_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rappor_5fmetric_2eproto_once_);
void protobuf_AddDesc_rappor_5fmetric_2eproto()
{
    ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rappor_5fmetric_2eproto_once_,
        &protobuf_AddDesc_rappor_5fmetric_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rappor_5fmetric_2eproto {
    StaticDescriptorInitializer_rappor_5fmetric_2eproto()
    {
        protobuf_AddDesc_rappor_5fmetric_2eproto();
    }
} static_descriptor_initializer_rappor_5fmetric_2eproto_;
#endif

namespace {

    static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
    GOOGLE_ATTRIBUTE_NOINLINE static void MergeFromFail(int line)
    {
        GOOGLE_CHECK(false) << __FILE__ << ":" << line;
    }

} // namespace

// ===================================================================

static ::std::string* MutableUnknownFieldsForRapporReports(
    RapporReports* ptr)
{
    return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForRapporReports_Report(
    RapporReports_Report* ptr)
{
    return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RapporReports_Report::kNameHashFieldNumber;
const int RapporReports_Report::kBitsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

RapporReports_Report::RapporReports_Report()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:rappor.RapporReports.Report)
}

void RapporReports_Report::InitAsDefaultInstance()
{
}

RapporReports_Report::RapporReports_Report(const RapporReports_Report& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:rappor.RapporReports.Report)
}

void RapporReports_Report::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    name_hash_ = GOOGLE_ULONGLONG(0);
    bits_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RapporReports_Report::~RapporReports_Report()
{
    // @@protoc_insertion_point(destructor:rappor.RapporReports.Report)
    SharedDtor();
}

void RapporReports_Report::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    bits_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void RapporReports_Report::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RapporReports_Report& RapporReports_Report::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_rappor_5fmetric_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_rappor_5fmetric_2eproto();
#endif
    return *default_instance_;
}

RapporReports_Report* RapporReports_Report::default_instance_ = NULL;

RapporReports_Report* RapporReports_Report::New(::google::protobuf::Arena* arena) const
{
    RapporReports_Report* n = new RapporReports_Report;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RapporReports_Report::Clear()
{
    // @@protoc_insertion_point(message_clear_start:rappor.RapporReports.Report)
    if (_has_bits_[0 / 32] & 3u) {
        name_hash_ = GOOGLE_ULONGLONG(0);
        if (has_bits()) {
            bits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RapporReports_Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForRapporReports_Report, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:rappor.RapporReports.Report)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional fixed64 name_hash = 1;
        case 1: {
            if (tag == 9) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                    input, &name_hash_)));
                set_has_name_hash();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_bits;
            break;
        }

        // optional bytes bits = 2;
        case 2: {
            if (tag == 18) {
            parse_bits:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                    input, this->mutable_bits()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:rappor.RapporReports.Report)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:rappor.RapporReports.Report)
    return false;
#undef DO_
}

void RapporReports_Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:rappor.RapporReports.Report)
    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
        ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
    }

    // optional bytes bits = 2;
    if (has_bits()) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
            2, this->bits(), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:rappor.RapporReports.Report)
}

int RapporReports_Report::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:rappor.RapporReports.Report)
    int total_size = 0;

    if (_has_bits_[0 / 32] & 3u) {
        // optional fixed64 name_hash = 1;
        if (has_name_hash()) {
            total_size += 1 + 8;
        }

        // optional bytes bits = 2;
        if (has_bits()) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->bits());
        }
    }
    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RapporReports_Report::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const RapporReports_Report*>(&from));
}

void RapporReports_Report::MergeFrom(const RapporReports_Report& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:rappor.RapporReports.Report)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_name_hash()) {
            set_name_hash(from.name_hash());
        }
        if (from.has_bits()) {
            set_has_bits();
            bits_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bits_);
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void RapporReports_Report::CopyFrom(const RapporReports_Report& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:rappor.RapporReports.Report)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool RapporReports_Report::IsInitialized() const
{

    return true;
}

void RapporReports_Report::Swap(RapporReports_Report* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void RapporReports_Report::InternalSwap(RapporReports_Report* other)
{
    std::swap(name_hash_, other->name_hash_);
    bits_.Swap(&other->bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string RapporReports_Report::GetTypeName() const
{
    return "rappor.RapporReports.Report";
}

// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RapporReports::kCohortFieldNumber;
const int RapporReports::kReportFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

RapporReports::RapporReports()
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    // @@protoc_insertion_point(constructor:rappor.RapporReports)
}

void RapporReports::InitAsDefaultInstance()
{
}

RapporReports::RapporReports(const RapporReports& from)
    : ::google::protobuf::MessageLite()
    , _arena_ptr_(NULL)
{
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:rappor.RapporReports)
}

void RapporReports::SharedCtor()
{
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    _unknown_fields_.UnsafeSetDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    cohort_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RapporReports::~RapporReports()
{
    // @@protoc_insertion_point(destructor:rappor.RapporReports)
    SharedDtor();
}

void RapporReports::SharedDtor()
{
    _unknown_fields_.DestroyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    if (this != &default_instance()) {
#else
    if (this != default_instance_) {
#endif
    }
}

void RapporReports::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RapporReports& RapporReports::default_instance()
{
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    protobuf_AddDesc_rappor_5fmetric_2eproto();
#else
    if (default_instance_ == NULL)
        protobuf_AddDesc_rappor_5fmetric_2eproto();
#endif
    return *default_instance_;
}

RapporReports* RapporReports::default_instance_ = NULL;

RapporReports* RapporReports::New(::google::protobuf::Arena* arena) const
{
    RapporReports* n = new RapporReports;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void RapporReports::Clear()
{
    // @@protoc_insertion_point(message_clear_start:rappor.RapporReports)
    cohort_ = 0;
    report_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    _unknown_fields_.ClearToEmptyNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RapporReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
        ::google::protobuf::internal::NewPermanentCallback(
            &MutableUnknownFieldsForRapporReports, this));
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_string, false);
    // @@protoc_insertion_point(parse_start:rappor.RapporReports)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
        // optional int32 cohort = 1;
        case 1: {
            if (tag == 8) {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, &cohort_)));
                set_has_cohort();
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_report;
            break;
        }

        // repeated .rappor.RapporReports.Report report = 2;
        case 2: {
            if (tag == 18) {
            parse_report:
                DO_(input->IncrementRecursionDepth());
            parse_loop_report:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                    input, add_report()));
            } else {
                goto handle_unusual;
            }
            if (input->ExpectTag(18))
                goto parse_loop_report;
            input->UnsafeDecrementRecursionDepth();
            if (input->ExpectAtEnd())
                goto success;
            break;
        }

        default: {
        handle_unusual:
            if (tag == 0 || ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) == ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormatLite::SkipField(
                input, tag, &unknown_fields_stream));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:rappor.RapporReports)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:rappor.RapporReports)
    return false;
#undef DO_
}

void RapporReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:rappor.RapporReports)
    // optional int32 cohort = 1;
    if (has_cohort()) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cohort(), output);
    }

    // repeated .rappor.RapporReports.Report report = 2;
    for (unsigned int i = 0, n = this->report_size(); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, this->report(i), output);
    }

    output->WriteRaw(unknown_fields().data(),
        static_cast<int>(unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:rappor.RapporReports)
}

int RapporReports::ByteSize() const
{
    // @@protoc_insertion_point(message_byte_size_start:rappor.RapporReports)
    int total_size = 0;

    // optional int32 cohort = 1;
    if (has_cohort()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->cohort());
    }

    // repeated .rappor.RapporReports.Report report = 2;
    total_size += 1 * this->report_size();
    for (int i = 0; i < this->report_size(); i++) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->report(i));
    }

    total_size += unknown_fields().size();

    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RapporReports::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from)
{
    MergeFrom(*::google::protobuf::down_cast<const RapporReports*>(&from));
}

void RapporReports::MergeFrom(const RapporReports& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:rappor.RapporReports)
    if (GOOGLE_PREDICT_FALSE(&from == this))
        MergeFromFail(__LINE__);
    report_.MergeFrom(from.report_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_cohort()) {
            set_cohort(from.cohort());
        }
    }
    if (!from.unknown_fields().empty()) {
        mutable_unknown_fields()->append(from.unknown_fields());
    }
}

void RapporReports::CopyFrom(const RapporReports& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:rappor.RapporReports)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool RapporReports::IsInitialized() const
{

    return true;
}

void RapporReports::Swap(RapporReports* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void RapporReports::InternalSwap(RapporReports* other)
{
    std::swap(cohort_, other->cohort_);
    report_.UnsafeArenaSwap(&other->report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
}

::std::string RapporReports::GetTypeName() const
{
    return "rappor.RapporReports";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RapporReports_Report

// optional fixed64 name_hash = 1;
bool RapporReports_Report::has_name_hash() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void RapporReports_Report::set_has_name_hash()
{
    _has_bits_[0] |= 0x00000001u;
}
void RapporReports_Report::clear_has_name_hash()
{
    _has_bits_[0] &= ~0x00000001u;
}
void RapporReports_Report::clear_name_hash()
{
    name_hash_ = GOOGLE_ULONGLONG(0);
    clear_has_name_hash();
}
::google::protobuf::uint64 RapporReports_Report::name_hash() const
{
    // @@protoc_insertion_point(field_get:rappor.RapporReports.Report.name_hash)
    return name_hash_;
}
void RapporReports_Report::set_name_hash(::google::protobuf::uint64 value)
{
    set_has_name_hash();
    name_hash_ = value;
    // @@protoc_insertion_point(field_set:rappor.RapporReports.Report.name_hash)
}

// optional bytes bits = 2;
bool RapporReports_Report::has_bits() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
void RapporReports_Report::set_has_bits()
{
    _has_bits_[0] |= 0x00000002u;
}
void RapporReports_Report::clear_has_bits()
{
    _has_bits_[0] &= ~0x00000002u;
}
void RapporReports_Report::clear_bits()
{
    bits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_bits();
}
const ::std::string& RapporReports_Report::bits() const
{
    // @@protoc_insertion_point(field_get:rappor.RapporReports.Report.bits)
    return bits_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RapporReports_Report::set_bits(const ::std::string& value)
{
    set_has_bits();
    bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:rappor.RapporReports.Report.bits)
}
void RapporReports_Report::set_bits(const char* value)
{
    set_has_bits();
    bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:rappor.RapporReports.Report.bits)
}
void RapporReports_Report::set_bits(const void* value, size_t size)
{
    set_has_bits();
    bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:rappor.RapporReports.Report.bits)
}
::std::string* RapporReports_Report::mutable_bits()
{
    set_has_bits();
    // @@protoc_insertion_point(field_mutable:rappor.RapporReports.Report.bits)
    return bits_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RapporReports_Report::release_bits()
{
    // @@protoc_insertion_point(field_release:rappor.RapporReports.Report.bits)
    clear_has_bits();
    return bits_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RapporReports_Report::set_allocated_bits(::std::string* bits)
{
    if (bits != NULL) {
        set_has_bits();
    } else {
        clear_has_bits();
    }
    bits_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits);
    // @@protoc_insertion_point(field_set_allocated:rappor.RapporReports.Report.bits)
}

// -------------------------------------------------------------------

// RapporReports

// optional int32 cohort = 1;
bool RapporReports::has_cohort() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
void RapporReports::set_has_cohort()
{
    _has_bits_[0] |= 0x00000001u;
}
void RapporReports::clear_has_cohort()
{
    _has_bits_[0] &= ~0x00000001u;
}
void RapporReports::clear_cohort()
{
    cohort_ = 0;
    clear_has_cohort();
}
::google::protobuf::int32 RapporReports::cohort() const
{
    // @@protoc_insertion_point(field_get:rappor.RapporReports.cohort)
    return cohort_;
}
void RapporReports::set_cohort(::google::protobuf::int32 value)
{
    set_has_cohort();
    cohort_ = value;
    // @@protoc_insertion_point(field_set:rappor.RapporReports.cohort)
}

// repeated .rappor.RapporReports.Report report = 2;
int RapporReports::report_size() const
{
    return report_.size();
}
void RapporReports::clear_report()
{
    report_.Clear();
}
const ::rappor::RapporReports_Report& RapporReports::report(int index) const
{
    // @@protoc_insertion_point(field_get:rappor.RapporReports.report)
    return report_.Get(index);
}
::rappor::RapporReports_Report* RapporReports::mutable_report(int index)
{
    // @@protoc_insertion_point(field_mutable:rappor.RapporReports.report)
    return report_.Mutable(index);
}
::rappor::RapporReports_Report* RapporReports::add_report()
{
    // @@protoc_insertion_point(field_add:rappor.RapporReports.report)
    return report_.Add();
}
::google::protobuf::RepeatedPtrField<::rappor::RapporReports_Report>*
RapporReports::mutable_report()
{
    // @@protoc_insertion_point(field_mutable_list:rappor.RapporReports.report)
    return &report_;
}
const ::google::protobuf::RepeatedPtrField<::rappor::RapporReports_Report>&
RapporReports::report() const
{
    // @@protoc_insertion_point(field_list:rappor.RapporReports.report)
    return report_;
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace rappor

// @@protoc_insertion_point(global_scope)
