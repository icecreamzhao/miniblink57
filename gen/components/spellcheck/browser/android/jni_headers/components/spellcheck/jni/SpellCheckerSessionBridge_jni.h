// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/spellcheck/SpellCheckerSessionBridge

#ifndef org_chromium_components_spellcheck_SpellCheckerSessionBridge_JNI
#define org_chromium_components_spellcheck_SpellCheckerSessionBridge_JNI

#include <jni.h>

#include "../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSpellCheckerSessionBridgeClassPath[] = "org/chromium/components/spellcheck/SpellCheckerSessionBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SpellCheckerSessionBridge_clazz
    __attribute__((unused))
    = 0;
#define SpellCheckerSessionBridge_clazz(env) base::android::LazyGetClass(env, kSpellCheckerSessionBridgeClassPath, &g_SpellCheckerSessionBridge_clazz)

} // namespace

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_components_spellcheck_SpellCheckerSessionBridge_nativeProcessSpellCheckResults(JNIEnv*
                                                                                                     env,
    jobject jcaller,
    jlong nativeSpellCheckerSessionBridge,
    jintArray offsets,
    jintArray lengths)
{
    SpellCheckerSessionBridge* native = reinterpret_cast<SpellCheckerSessionBridge*>(nativeSpellCheckerSessionBridge);
    CHECK_NATIVE_PTR(env, jcaller, native, "ProcessSpellCheckResults");
    return native->ProcessSpellCheckResults(env,
        base::android::JavaParamRef<jobject>(env, jcaller),
        base::android::JavaParamRef<jintArray>(env, offsets),
        base::android::JavaParamRef<jintArray>(env, lengths));
}

static base::subtle::AtomicWord g_SpellCheckerSessionBridge_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_SpellCheckerSessionBridge_create(JNIEnv* env, jlong nativeSpellCheckerSessionBridge)
{
    CHECK_CLAZZ(env, SpellCheckerSessionBridge_clazz(env),
        SpellCheckerSessionBridge_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, SpellCheckerSessionBridge_clazz(env),
        "create",
        "("
        "J"
        ")"
        "Lorg/chromium/components/spellcheck/SpellCheckerSessionBridge;",
        &g_SpellCheckerSessionBridge_create);

    jobject ret = env->CallStaticObjectMethod(SpellCheckerSessionBridge_clazz(env),
        method_id, nativeSpellCheckerSessionBridge);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SpellCheckerSessionBridge_disconnect = 0;
static void Java_SpellCheckerSessionBridge_disconnect(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        SpellCheckerSessionBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SpellCheckerSessionBridge_clazz(env),
        "disconnect",
        "("
        ")"
        "V",
        &g_SpellCheckerSessionBridge_disconnect);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_SpellCheckerSessionBridge_requestTextCheck = 0;
static void Java_SpellCheckerSessionBridge_requestTextCheck(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& text)
{
    CHECK_CLAZZ(env, obj.obj(),
        SpellCheckerSessionBridge_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, SpellCheckerSessionBridge_clazz(env),
        "requestTextCheck",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_SpellCheckerSessionBridge_requestTextCheck);

    env->CallVoidMethod(obj.obj(),
        method_id, text.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSpellCheckerSessionBridge[] = {
    { "nativeProcessSpellCheckResults",
        "("
        "J"
        "[I"
        "[I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_components_spellcheck_SpellCheckerSessionBridge_nativeProcessSpellCheckResults) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsSpellCheckerSessionBridgeSize = arraysize(kMethodsSpellCheckerSessionBridge);

    if (env->RegisterNatives(SpellCheckerSessionBridge_clazz(env),
            kMethodsSpellCheckerSessionBridge,
            kMethodsSpellCheckerSessionBridgeSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, SpellCheckerSessionBridge_clazz(env), __FILE__);
        return false;
    }

    return true;
}

#endif // org_chromium_components_spellcheck_SpellCheckerSessionBridge_JNI
