// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/web_contents_delegate_android/ColorChooserAndroid

#ifndef org_chromium_components_web_contents_delegate_android_ColorChooserAndroid_JNI
#define org_chromium_components_web_contents_delegate_android_ColorChooserAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kColorChooserAndroidClassPath[] = "org/chromium/components/web_contents_delegate_android/ColorChooserAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ColorChooserAndroid_clazz __attribute__((unused)) = 0;
#define ColorChooserAndroid_clazz(env) base::android::LazyGetClass(env, kColorChooserAndroidClassPath, &g_ColorChooserAndroid_clazz)

} // namespace

namespace web_contents_delegate_android {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
Java_org_chromium_components_web_1contents_1delegate_1android_ColorChooserAndroid_nativeOnColorChosen(JNIEnv*
                                                                                                          env,
    jobject jcaller,
    jlong nativeColorChooserAndroid,
    jint color)
{
    ColorChooserAndroid* native = reinterpret_cast<ColorChooserAndroid*>(nativeColorChooserAndroid);
    CHECK_NATIVE_PTR(env, jcaller, native, "OnColorChosen");
    return native->OnColorChosen(env, base::android::JavaParamRef<jobject>(env, jcaller), color);
}

static base::subtle::AtomicWord g_ColorChooserAndroid_closeColorChooser = 0;
static void Java_ColorChooserAndroid_closeColorChooser(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        ColorChooserAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, ColorChooserAndroid_clazz(env),
        "closeColorChooser",
        "("
        ")"
        "V",
        &g_ColorChooserAndroid_closeColorChooser);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_ColorChooserAndroid_createColorChooserAndroid
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_ColorChooserAndroid_createColorChooserAndroid(JNIEnv* env, jlong nativeColorChooserAndroid,
    const base::android::JavaRefOrBare<jobject>& contentViewCore,
    JniIntWrapper initialColor,
    const base::android::JavaRefOrBare<jobjectArray>& suggestions)
{
    CHECK_CLAZZ(env, ColorChooserAndroid_clazz(env),
        ColorChooserAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ColorChooserAndroid_clazz(env),
        "createColorChooserAndroid",
        "("
        "J"
        "Lorg/chromium/content/browser/ContentViewCore;"
        "I"
        "[Lorg/chromium/components/web_contents_delegate_android/ColorSuggestion;"
        ")"
        "Lorg/chromium/components/web_contents_delegate_android/ColorChooserAndroid;",
        &g_ColorChooserAndroid_createColorChooserAndroid);

    jobject ret = env->CallStaticObjectMethod(ColorChooserAndroid_clazz(env),
        method_id, nativeColorChooserAndroid, contentViewCore.obj(),
        as_jint(initialColor), suggestions.obj());
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ColorChooserAndroid_createColorSuggestionArray
    = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
Java_ColorChooserAndroid_createColorSuggestionArray(JNIEnv* env,
    JniIntWrapper size)
{
    CHECK_CLAZZ(env, ColorChooserAndroid_clazz(env),
        ColorChooserAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ColorChooserAndroid_clazz(env),
        "createColorSuggestionArray",
        "("
        "I"
        ")"
        "[Lorg/chromium/components/web_contents_delegate_android/ColorSuggestion;",
        &g_ColorChooserAndroid_createColorSuggestionArray);

    jobjectArray ret = static_cast<jobjectArray>(env->CallStaticObjectMethod(ColorChooserAndroid_clazz(env),
        method_id, as_jint(size)));
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_ColorChooserAndroid_addToColorSuggestionArray
    = 0;
static void Java_ColorChooserAndroid_addToColorSuggestionArray(JNIEnv* env,
    const base::android::JavaRefOrBare<jobjectArray>& array,
    JniIntWrapper index,
    JniIntWrapper color,
    const base::android::JavaRefOrBare<jstring>& label)
{
    CHECK_CLAZZ(env, ColorChooserAndroid_clazz(env),
        ColorChooserAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_STATIC>(
        env, ColorChooserAndroid_clazz(env),
        "addToColorSuggestionArray",
        "("
        "[Lorg/chromium/components/web_contents_delegate_android/ColorSuggestion;"
        "I"
        "I"
        "Ljava/lang/String;"
        ")"
        "V",
        &g_ColorChooserAndroid_addToColorSuggestionArray);

    env->CallStaticVoidMethod(ColorChooserAndroid_clazz(env),
        method_id, array.obj(), as_jint(index), as_jint(color), label.obj());
    jni_generator::CheckException(env);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsColorChooserAndroid[] = {
    { "nativeOnColorChosen",
        "("
        "J"
        "I"
        ")"
        "V",
        reinterpret_cast<void*>(Java_org_chromium_components_web_1contents_1delegate_1android_ColorChooserAndroid_nativeOnColorChosen) },
};

static bool RegisterNativesImpl(JNIEnv* env)
{
    if (base::android::IsManualJniRegistrationDisabled())
        return true;

    const int kMethodsColorChooserAndroidSize = arraysize(kMethodsColorChooserAndroid);

    if (env->RegisterNatives(ColorChooserAndroid_clazz(env),
            kMethodsColorChooserAndroid,
            kMethodsColorChooserAndroidSize)
        < 0) {
        jni_generator::HandleRegistrationError(
            env, ColorChooserAndroid_clazz(env), __FILE__);
        return false;
    }

    return true;
}

} // namespace web_contents_delegate_android

#endif // org_chromium_components_web_contents_delegate_android_ColorChooserAndroid_JNI
