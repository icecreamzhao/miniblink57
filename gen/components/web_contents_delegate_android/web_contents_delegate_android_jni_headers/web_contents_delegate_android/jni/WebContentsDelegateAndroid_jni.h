// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/components/web_contents_delegate_android/WebContentsDelegateAndroid

#ifndef org_chromium_components_web_contents_delegate_android_WebContentsDelegateAndroid_JNI
#define org_chromium_components_web_contents_delegate_android_WebContentsDelegateAndroid_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kWebContentsDelegateAndroidClassPath[] = "org/chromium/components/web_contents_delegate_android/WebContentsDelegateAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_WebContentsDelegateAndroid_clazz
    __attribute__((unused))
    = 0;
#define WebContentsDelegateAndroid_clazz(env) base::android::LazyGetClass(env, kWebContentsDelegateAndroidClassPath, &g_WebContentsDelegateAndroid_clazz)

} // namespace

namespace web_contents_delegate_android {

// Step 2: method stubs.

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_openNewTab = 0;
static void Java_WebContentsDelegateAndroid_openNewTab(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url,
    const base::android::JavaRefOrBare<jstring>& extraHeaders,
    const base::android::JavaRefOrBare<jobject>& postData,
    JniIntWrapper disposition,
    jboolean isRendererInitiated)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "openNewTab",
        "("
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Lorg/chromium/content_public/common/ResourceRequestBody;"
        "I"
        "Z"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_openNewTab);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj(), extraHeaders.obj(), postData.obj(),
        as_jint(disposition), isRendererInitiated);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_activateContents = 0;
static void Java_WebContentsDelegateAndroid_activateContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "activateContents",
        "("
        ")"
        "V",
        &g_WebContentsDelegateAndroid_activateContents);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_closeContents = 0;
static void Java_WebContentsDelegateAndroid_closeContents(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "closeContents",
        "("
        ")"
        "V",
        &g_WebContentsDelegateAndroid_closeContents);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_loadingStateChanged
    = 0;
static void Java_WebContentsDelegateAndroid_loadingStateChanged(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, jboolean toDifferentDocument)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "loadingStateChanged",
        "("
        "Z"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_loadingStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, toDifferentDocument);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_navigationStateChanged
    = 0;
static void Java_WebContentsDelegateAndroid_navigationStateChanged(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper flags)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "navigationStateChanged",
        "("
        "I"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_navigationStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, as_jint(flags));
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_visibleSSLStateChanged
    = 0;
static void Java_WebContentsDelegateAndroid_visibleSSLStateChanged(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "visibleSSLStateChanged",
        "("
        ")"
        "V",
        &g_WebContentsDelegateAndroid_visibleSSLStateChanged);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_notifyLoadProgressChanged
    = 0;
static void Java_WebContentsDelegateAndroid_notifyLoadProgressChanged(JNIEnv*
                                                                          env,
    const base::android::JavaRefOrBare<jobject>& obj, jdouble progress)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "notifyLoadProgressChanged",
        "("
        "D"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_notifyLoadProgressChanged);

    env->CallVoidMethod(obj.obj(),
        method_id, progress);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_rendererUnresponsive
    = 0;
static void Java_WebContentsDelegateAndroid_rendererUnresponsive(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "rendererUnresponsive",
        "("
        ")"
        "V",
        &g_WebContentsDelegateAndroid_rendererUnresponsive);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_rendererResponsive
    = 0;
static void Java_WebContentsDelegateAndroid_rendererResponsive(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "rendererResponsive",
        "("
        ")"
        "V",
        &g_WebContentsDelegateAndroid_rendererResponsive);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_webContentsCreated
    = 0;
static void Java_WebContentsDelegateAndroid_webContentsCreated(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& sourceWebContents,
    jlong openerRenderProcessId,
    jlong openerRenderFrameId,
    const base::android::JavaRefOrBare<jstring>& frameName,
    const base::android::JavaRefOrBare<jstring>& targetUrl,
    const base::android::JavaRefOrBare<jobject>& newWebContents)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "webContentsCreated",
        "("
        "Lorg/chromium/content_public/browser/WebContents;"
        "J"
        "J"
        "Ljava/lang/String;"
        "Ljava/lang/String;"
        "Lorg/chromium/content_public/browser/WebContents;"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_webContentsCreated);

    env->CallVoidMethod(obj.obj(),
        method_id, sourceWebContents.obj(), openerRenderProcessId,
        openerRenderFrameId, frameName.obj(), targetUrl.obj(),
        newWebContents.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_shouldCreateWebContents
    = 0;
static jboolean Java_WebContentsDelegateAndroid_shouldCreateWebContents(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& targetUrl)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "shouldCreateWebContents",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WebContentsDelegateAndroid_shouldCreateWebContents);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, targetUrl.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_onGoToEntryOffset = 0;
static jboolean Java_WebContentsDelegateAndroid_onGoToEntryOffset(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper offset)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "onGoToEntryOffset",
        "("
        "I"
        ")"
        "Z",
        &g_WebContentsDelegateAndroid_onGoToEntryOffset);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(offset));
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_onUpdateUrl = 0;
static void Java_WebContentsDelegateAndroid_onUpdateUrl(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "onUpdateUrl",
        "("
        "Ljava/lang/String;"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_onUpdateUrl);

    env->CallVoidMethod(obj.obj(),
        method_id, url.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_takeFocus = 0;
static jboolean Java_WebContentsDelegateAndroid_takeFocus(JNIEnv* env, const base::android::JavaRefOrBare<jobject>& obj, jboolean reverse)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "takeFocus",
        "("
        "Z"
        ")"
        "Z",
        &g_WebContentsDelegateAndroid_takeFocus);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, reverse);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_handleKeyboardEvent
    = 0;
static void Java_WebContentsDelegateAndroid_handleKeyboardEvent(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jobject>& event)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "handleKeyboardEvent",
        "("
        "Landroid/view/KeyEvent;"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_handleKeyboardEvent);

    env->CallVoidMethod(obj.obj(),
        method_id, event.obj());
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_addMessageToConsole
    = 0;
static jboolean Java_WebContentsDelegateAndroid_addMessageToConsole(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper level,
    const base::android::JavaRefOrBare<jstring>& message,
    JniIntWrapper lineNumber,
    const base::android::JavaRefOrBare<jstring>& sourceId)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "addMessageToConsole",
        "("
        "I"
        "Ljava/lang/String;"
        "I"
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WebContentsDelegateAndroid_addMessageToConsole);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, as_jint(level), message.obj(), as_jint(lineNumber),
        sourceId.obj());
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_showRepostFormWarningDialog
    = 0;
static void Java_WebContentsDelegateAndroid_showRepostFormWarningDialog(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "showRepostFormWarningDialog",
        "("
        ")"
        "V",
        &g_WebContentsDelegateAndroid_showRepostFormWarningDialog);

    env->CallVoidMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_toggleFullscreenModeForTab
    = 0;
static void Java_WebContentsDelegateAndroid_toggleFullscreenModeForTab(JNIEnv*
                                                                           env,
    const base::android::JavaRefOrBare<jobject>& obj, jboolean enterFullscreen)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env));
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "toggleFullscreenModeForTab",
        "("
        "Z"
        ")"
        "V",
        &g_WebContentsDelegateAndroid_toggleFullscreenModeForTab);

    env->CallVoidMethod(obj.obj(),
        method_id, enterFullscreen);
    jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_isFullscreenForTabOrPending
    = 0;
static jboolean
Java_WebContentsDelegateAndroid_isFullscreenForTabOrPending(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "isFullscreenForTabOrPending",
        "("
        ")"
        "Z",
        &g_WebContentsDelegateAndroid_isFullscreenForTabOrPending);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return ret;
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_getContentVideoViewEmbedder
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
Java_WebContentsDelegateAndroid_getContentVideoViewEmbedder(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), NULL);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "getContentVideoViewEmbedder",
        "("
        ")"
        "Lorg/chromium/content/browser/ContentVideoViewEmbedder;",
        &g_WebContentsDelegateAndroid_getContentVideoViewEmbedder);

    jobject ret = env->CallObjectMethod(obj.obj(),
        method_id);
    jni_generator::CheckException(env);
    return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_shouldBlockMediaRequest
    = 0;
static jboolean Java_WebContentsDelegateAndroid_shouldBlockMediaRequest(JNIEnv*
                                                                            env,
    const base::android::JavaRefOrBare<jobject>& obj, const base::android::JavaRefOrBare<jstring>& url)
{
    CHECK_CLAZZ(env, obj.obj(),
        WebContentsDelegateAndroid_clazz(env), false);
    jmethodID method_id = base::android::MethodID::LazyGet<
        base::android::MethodID::TYPE_INSTANCE>(
        env, WebContentsDelegateAndroid_clazz(env),
        "shouldBlockMediaRequest",
        "("
        "Ljava/lang/String;"
        ")"
        "Z",
        &g_WebContentsDelegateAndroid_shouldBlockMediaRequest);

    jboolean ret = env->CallBooleanMethod(obj.obj(),
        method_id, url.obj());
    jni_generator::CheckException(env);
    return ret;
}

// Step 3: RegisterNatives.

} // namespace web_contents_delegate_android

#endif // org_chromium_components_web_contents_delegate_android_WebContentsDelegateAndroid_JNI
