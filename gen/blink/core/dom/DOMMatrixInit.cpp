// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "DOMMatrixInit.h"

namespace blink {

DOMMatrixInit::DOMMatrixInit()
{
    setM13(0);
    setM14(0);
    setM23(0);
    setM24(0);
    setM31(0);
    setM32(0);
    setM33(1);
    setM34(0);
    setM43(0);
    setM44(1);
}

DOMMatrixInit::~DOMMatrixInit() { }

DOMMatrixInit::DOMMatrixInit(const DOMMatrixInit&) = default;

DOMMatrixInit& DOMMatrixInit::operator=(const DOMMatrixInit&) = default;

bool DOMMatrixInit::hasA() const
{
    return m_hasA;
}
double DOMMatrixInit::a() const
{
    DCHECK(m_hasA);
    return m_a;
}
void DOMMatrixInit::setA(double value)
{
    m_a = value;
    m_hasA = true;
}
bool DOMMatrixInit::hasB() const
{
    return m_hasB;
}
double DOMMatrixInit::b() const
{
    DCHECK(m_hasB);
    return m_b;
}
void DOMMatrixInit::setB(double value)
{
    m_b = value;
    m_hasB = true;
}
bool DOMMatrixInit::hasC() const
{
    return m_hasC;
}
double DOMMatrixInit::c() const
{
    DCHECK(m_hasC);
    return m_c;
}
void DOMMatrixInit::setC(double value)
{
    m_c = value;
    m_hasC = true;
}
bool DOMMatrixInit::hasD() const
{
    return m_hasD;
}
double DOMMatrixInit::d() const
{
    DCHECK(m_hasD);
    return m_d;
}
void DOMMatrixInit::setD(double value)
{
    m_d = value;
    m_hasD = true;
}
bool DOMMatrixInit::hasE() const
{
    return m_hasE;
}
double DOMMatrixInit::e() const
{
    DCHECK(m_hasE);
    return m_e;
}
void DOMMatrixInit::setE(double value)
{
    m_e = value;
    m_hasE = true;
}
bool DOMMatrixInit::hasF() const
{
    return m_hasF;
}
double DOMMatrixInit::f() const
{
    DCHECK(m_hasF);
    return m_f;
}
void DOMMatrixInit::setF(double value)
{
    m_f = value;
    m_hasF = true;
}
bool DOMMatrixInit::hasIs2D() const
{
    return m_hasIs2D;
}
bool DOMMatrixInit::is2D() const
{
    DCHECK(m_hasIs2D);
    return m_is2D;
}
void DOMMatrixInit::setIs2D(bool value)
{
    m_is2D = value;
    m_hasIs2D = true;
}
bool DOMMatrixInit::hasM11() const
{
    return m_hasM11;
}
double DOMMatrixInit::m11() const
{
    DCHECK(m_hasM11);
    return m_m11;
}
void DOMMatrixInit::setM11(double value)
{
    m_m11 = value;
    m_hasM11 = true;
}
bool DOMMatrixInit::hasM12() const
{
    return m_hasM12;
}
double DOMMatrixInit::m12() const
{
    DCHECK(m_hasM12);
    return m_m12;
}
void DOMMatrixInit::setM12(double value)
{
    m_m12 = value;
    m_hasM12 = true;
}
bool DOMMatrixInit::hasM13() const
{
    return m_hasM13;
}
double DOMMatrixInit::m13() const
{
    DCHECK(m_hasM13);
    return m_m13;
}
void DOMMatrixInit::setM13(double value)
{
    m_m13 = value;
    m_hasM13 = true;
}
bool DOMMatrixInit::hasM14() const
{
    return m_hasM14;
}
double DOMMatrixInit::m14() const
{
    DCHECK(m_hasM14);
    return m_m14;
}
void DOMMatrixInit::setM14(double value)
{
    m_m14 = value;
    m_hasM14 = true;
}
bool DOMMatrixInit::hasM21() const
{
    return m_hasM21;
}
double DOMMatrixInit::m21() const
{
    DCHECK(m_hasM21);
    return m_m21;
}
void DOMMatrixInit::setM21(double value)
{
    m_m21 = value;
    m_hasM21 = true;
}
bool DOMMatrixInit::hasM22() const
{
    return m_hasM22;
}
double DOMMatrixInit::m22() const
{
    DCHECK(m_hasM22);
    return m_m22;
}
void DOMMatrixInit::setM22(double value)
{
    m_m22 = value;
    m_hasM22 = true;
}
bool DOMMatrixInit::hasM23() const
{
    return m_hasM23;
}
double DOMMatrixInit::m23() const
{
    DCHECK(m_hasM23);
    return m_m23;
}
void DOMMatrixInit::setM23(double value)
{
    m_m23 = value;
    m_hasM23 = true;
}
bool DOMMatrixInit::hasM24() const
{
    return m_hasM24;
}
double DOMMatrixInit::m24() const
{
    DCHECK(m_hasM24);
    return m_m24;
}
void DOMMatrixInit::setM24(double value)
{
    m_m24 = value;
    m_hasM24 = true;
}
bool DOMMatrixInit::hasM31() const
{
    return m_hasM31;
}
double DOMMatrixInit::m31() const
{
    DCHECK(m_hasM31);
    return m_m31;
}
void DOMMatrixInit::setM31(double value)
{
    m_m31 = value;
    m_hasM31 = true;
}
bool DOMMatrixInit::hasM32() const
{
    return m_hasM32;
}
double DOMMatrixInit::m32() const
{
    DCHECK(m_hasM32);
    return m_m32;
}
void DOMMatrixInit::setM32(double value)
{
    m_m32 = value;
    m_hasM32 = true;
}
bool DOMMatrixInit::hasM33() const
{
    return m_hasM33;
}
double DOMMatrixInit::m33() const
{
    DCHECK(m_hasM33);
    return m_m33;
}
void DOMMatrixInit::setM33(double value)
{
    m_m33 = value;
    m_hasM33 = true;
}
bool DOMMatrixInit::hasM34() const
{
    return m_hasM34;
}
double DOMMatrixInit::m34() const
{
    DCHECK(m_hasM34);
    return m_m34;
}
void DOMMatrixInit::setM34(double value)
{
    m_m34 = value;
    m_hasM34 = true;
}
bool DOMMatrixInit::hasM41() const
{
    return m_hasM41;
}
double DOMMatrixInit::m41() const
{
    DCHECK(m_hasM41);
    return m_m41;
}
void DOMMatrixInit::setM41(double value)
{
    m_m41 = value;
    m_hasM41 = true;
}
bool DOMMatrixInit::hasM42() const
{
    return m_hasM42;
}
double DOMMatrixInit::m42() const
{
    DCHECK(m_hasM42);
    return m_m42;
}
void DOMMatrixInit::setM42(double value)
{
    m_m42 = value;
    m_hasM42 = true;
}
bool DOMMatrixInit::hasM43() const
{
    return m_hasM43;
}
double DOMMatrixInit::m43() const
{
    DCHECK(m_hasM43);
    return m_m43;
}
void DOMMatrixInit::setM43(double value)
{
    m_m43 = value;
    m_hasM43 = true;
}
bool DOMMatrixInit::hasM44() const
{
    return m_hasM44;
}
double DOMMatrixInit::m44() const
{
    DCHECK(m_hasM44);
    return m_m44;
}
void DOMMatrixInit::setM44(double value)
{
    m_m44 = value;
    m_hasM44 = true;
}

DEFINE_TRACE(DOMMatrixInit)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
