// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef IntersectionObserverInit_h
#define IntersectionObserverInit_h

#include "bindings/core/v8/DoubleOrDoubleSequence.h"
#include "bindings/core/v8/IDLDictionaryBase.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class Element;

class CORE_EXPORT IntersectionObserverInit : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    IntersectionObserverInit();
    virtual ~IntersectionObserverInit();
    IntersectionObserverInit(const IntersectionObserverInit&);
    IntersectionObserverInit& operator=(const IntersectionObserverInit&);

    bool hasRoot() const;
    Element* root() const;
    void setRoot(Element*);
    void setRootToNull();

    bool hasRootMargin() const;
    String rootMargin() const;
    void setRootMargin(String);

    bool hasThreshold() const;
    const DoubleOrDoubleSequence& threshold() const;
    void setThreshold(const DoubleOrDoubleSequence&);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    Member<Element> m_root;
    String m_rootMargin;
    DoubleOrDoubleSequence m_threshold;

    friend class V8IntersectionObserverInit;
};

} // namespace blink

#endif // IntersectionObserverInit_h
