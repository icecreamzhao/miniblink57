// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "TouchInit.h"

#include "core/events/EventTarget.h"

namespace blink {

TouchInit::TouchInit()
{
    setClientX(0);
    setClientY(0);
    setForce(0);
    setPageX(0);
    setPageY(0);
    setRadiusX(0);
    setRadiusY(0);
    setRotationAngle(0);
    setScreenX(0);
    setScreenY(0);
}

TouchInit::~TouchInit() { }

TouchInit::TouchInit(const TouchInit&) = default;

TouchInit& TouchInit::operator=(const TouchInit&) = default;

bool TouchInit::hasClientX() const
{
    return m_hasClientX;
}
double TouchInit::clientX() const
{
    DCHECK(m_hasClientX);
    return m_clientX;
}
void TouchInit::setClientX(double value)
{
    m_clientX = value;
    m_hasClientX = true;
}
bool TouchInit::hasClientY() const
{
    return m_hasClientY;
}
double TouchInit::clientY() const
{
    DCHECK(m_hasClientY);
    return m_clientY;
}
void TouchInit::setClientY(double value)
{
    m_clientY = value;
    m_hasClientY = true;
}
bool TouchInit::hasForce() const
{
    return m_hasForce;
}
float TouchInit::force() const
{
    DCHECK(m_hasForce);
    return m_force;
}
void TouchInit::setForce(float value)
{
    m_force = value;
    m_hasForce = true;
}
bool TouchInit::hasIdentifier() const
{
    return m_hasIdentifier;
}
int TouchInit::identifier() const
{
    DCHECK(m_hasIdentifier);
    return m_identifier;
}
void TouchInit::setIdentifier(int value)
{
    m_identifier = value;
    m_hasIdentifier = true;
}
bool TouchInit::hasPageX() const
{
    return m_hasPageX;
}
double TouchInit::pageX() const
{
    DCHECK(m_hasPageX);
    return m_pageX;
}
void TouchInit::setPageX(double value)
{
    m_pageX = value;
    m_hasPageX = true;
}
bool TouchInit::hasPageY() const
{
    return m_hasPageY;
}
double TouchInit::pageY() const
{
    DCHECK(m_hasPageY);
    return m_pageY;
}
void TouchInit::setPageY(double value)
{
    m_pageY = value;
    m_hasPageY = true;
}
bool TouchInit::hasRadiusX() const
{
    return m_hasRadiusX;
}
float TouchInit::radiusX() const
{
    DCHECK(m_hasRadiusX);
    return m_radiusX;
}
void TouchInit::setRadiusX(float value)
{
    m_radiusX = value;
    m_hasRadiusX = true;
}
bool TouchInit::hasRadiusY() const
{
    return m_hasRadiusY;
}
float TouchInit::radiusY() const
{
    DCHECK(m_hasRadiusY);
    return m_radiusY;
}
void TouchInit::setRadiusY(float value)
{
    m_radiusY = value;
    m_hasRadiusY = true;
}
bool TouchInit::hasRegion() const
{
    return !m_region.isNull();
}
String TouchInit::region() const
{
    return m_region;
}
void TouchInit::setRegion(String value)
{
    m_region = value;
}
void TouchInit::setRegionToNull()
{
    m_region = String();
}
bool TouchInit::hasRotationAngle() const
{
    return m_hasRotationAngle;
}
float TouchInit::rotationAngle() const
{
    DCHECK(m_hasRotationAngle);
    return m_rotationAngle;
}
void TouchInit::setRotationAngle(float value)
{
    m_rotationAngle = value;
    m_hasRotationAngle = true;
}
bool TouchInit::hasScreenX() const
{
    return m_hasScreenX;
}
double TouchInit::screenX() const
{
    DCHECK(m_hasScreenX);
    return m_screenX;
}
void TouchInit::setScreenX(double value)
{
    m_screenX = value;
    m_hasScreenX = true;
}
bool TouchInit::hasScreenY() const
{
    return m_hasScreenY;
}
double TouchInit::screenY() const
{
    DCHECK(m_hasScreenY);
    return m_screenY;
}
void TouchInit::setScreenY(double value)
{
    m_screenY = value;
    m_hasScreenY = true;
}
bool TouchInit::hasTarget() const
{
    return m_target;
}
EventTarget* TouchInit::target() const
{
    return m_target;
}
void TouchInit::setTarget(EventTarget* value)
{
    m_target = value;
}

DEFINE_TRACE(TouchInit)
{
    visitor->trace(m_target);
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
