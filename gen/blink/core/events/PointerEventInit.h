// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef PointerEventInit_h
#define PointerEventInit_h

#include "core/CoreExport.h"
#include "core/events/MouseEventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class PointerEvent;

class CORE_EXPORT PointerEventInit : public MouseEventInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    PointerEventInit();
    virtual ~PointerEventInit();
    PointerEventInit(const PointerEventInit&);
    PointerEventInit& operator=(const PointerEventInit&);

    bool hasCoalescedEvents() const;
    const HeapVector<Member<PointerEvent>>& coalescedEvents() const;
    void setCoalescedEvents(const HeapVector<Member<PointerEvent>>&);

    bool hasHeight() const;
    double height() const;
    void setHeight(double);

    bool hasIsPrimary() const;
    bool isPrimary() const;
    void setIsPrimary(bool);

    bool hasPointerId() const;
    int pointerId() const;
    void setPointerId(int);

    bool hasPointerType() const;
    String pointerType() const;
    void setPointerType(String);

    bool hasPressure() const;
    float pressure() const;
    void setPressure(float);

    bool hasTangentialPressure() const;
    float tangentialPressure() const;
    void setTangentialPressure(float);

    bool hasTiltX() const;
    int tiltX() const;
    void setTiltX(int);

    bool hasTiltY() const;
    int tiltY() const;
    void setTiltY(int);

    bool hasTwist() const;
    int twist() const;
    void setTwist(int);

    bool hasWidth() const;
    double width() const;
    void setWidth(double);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasCoalescedEvents = false;
    HeapVector<Member<PointerEvent>> m_coalescedEvents;
    bool m_hasHeight = false;
    double m_height;
    bool m_hasIsPrimary = false;
    bool m_isPrimary;
    bool m_hasPointerId = false;
    int m_pointerId;
    String m_pointerType;
    bool m_hasPressure = false;
    float m_pressure;
    bool m_hasTangentialPressure = false;
    float m_tangentialPressure;
    bool m_hasTiltX = false;
    int m_tiltX;
    bool m_hasTiltY = false;
    int m_tiltY;
    bool m_hasTwist = false;
    int m_twist;
    bool m_hasWidth = false;
    double m_width;

    friend class V8PointerEventInit;
};

} // namespace blink

#endif // PointerEventInit_h
