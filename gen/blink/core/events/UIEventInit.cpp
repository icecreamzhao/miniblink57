// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "UIEventInit.h"

#include "core/frame/DOMWindow.h"
#include "core/input/InputDeviceCapabilities.h"

namespace blink {

UIEventInit::UIEventInit()
{
    setDetail(0);
}

UIEventInit::~UIEventInit() { }

UIEventInit::UIEventInit(const UIEventInit&) = default;

UIEventInit& UIEventInit::operator=(const UIEventInit&) = default;

bool UIEventInit::hasDetail() const
{
    return m_hasDetail;
}
int UIEventInit::detail() const
{
    DCHECK(m_hasDetail);
    return m_detail;
}
void UIEventInit::setDetail(int value)
{
    m_detail = value;
    m_hasDetail = true;
}
bool UIEventInit::hasSourceCapabilities() const
{
    return m_sourceCapabilities;
}
InputDeviceCapabilities* UIEventInit::sourceCapabilities() const
{
    return m_sourceCapabilities;
}
void UIEventInit::setSourceCapabilities(InputDeviceCapabilities* value)
{
    m_sourceCapabilities = value;
}
void UIEventInit::setSourceCapabilitiesToNull()
{
    m_sourceCapabilities = Member<InputDeviceCapabilities>();
}
bool UIEventInit::hasView() const
{
    return m_view;
}
DOMWindow* UIEventInit::view() const
{
    return m_view;
}
void UIEventInit::setView(DOMWindow* value)
{
    m_view = value;
}
void UIEventInit::setViewToNull()
{
    m_view = Member<DOMWindow>();
}

DEFINE_TRACE(UIEventInit)
{
    visitor->trace(m_sourceCapabilities);
    visitor->trace(m_view);
    EventInit::trace(visitor);
}

} // namespace blink
