// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef KeyboardEventInit_h
#define KeyboardEventInit_h

#include "core/CoreExport.h"
#include "core/events/EventModifierInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT KeyboardEventInit : public EventModifierInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    KeyboardEventInit();
    virtual ~KeyboardEventInit();
    KeyboardEventInit(const KeyboardEventInit&);
    KeyboardEventInit& operator=(const KeyboardEventInit&);

    bool hasCode() const;
    String code() const;
    void setCode(String);

    bool hasIsComposing() const;
    bool isComposing() const;
    void setIsComposing(bool);

    bool hasKey() const;
    String key() const;
    void setKey(String);

    bool hasLocation() const;
    unsigned location() const;
    void setLocation(unsigned);

    bool hasRepeat() const;
    bool repeat() const;
    void setRepeat(bool);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_code;
    bool m_hasIsComposing = false;
    bool m_isComposing;
    String m_key;
    bool m_hasLocation = false;
    unsigned m_location;
    bool m_hasRepeat = false;
    bool m_repeat;

    friend class V8KeyboardEventInit;
};

} // namespace blink

#endif // KeyboardEventInit_h
