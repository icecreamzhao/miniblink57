// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef SecurityPolicyViolationEventInit_h
#define SecurityPolicyViolationEventInit_h

#include "core/CoreExport.h"
#include "core/events/EventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT SecurityPolicyViolationEventInit : public EventInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    SecurityPolicyViolationEventInit();
    virtual ~SecurityPolicyViolationEventInit();
    SecurityPolicyViolationEventInit(const SecurityPolicyViolationEventInit&);
    SecurityPolicyViolationEventInit& operator=(const SecurityPolicyViolationEventInit&);

    bool hasBlockedURI() const;
    String blockedURI() const;
    void setBlockedURI(String);

    bool hasColumnNumber() const;
    int columnNumber() const;
    void setColumnNumber(int);

    bool hasDisposition() const;
    String disposition() const;
    void setDisposition(String);

    bool hasDocumentURI() const;
    String documentURI() const;
    void setDocumentURI(String);

    bool hasEffectiveDirective() const;
    String effectiveDirective() const;
    void setEffectiveDirective(String);

    bool hasLineNumber() const;
    int lineNumber() const;
    void setLineNumber(int);

    bool hasOriginalPolicy() const;
    String originalPolicy() const;
    void setOriginalPolicy(String);

    bool hasReferrer() const;
    String referrer() const;
    void setReferrer(String);

    bool hasSourceFile() const;
    String sourceFile() const;
    void setSourceFile(String);

    bool hasStatusCode() const;
    unsigned statusCode() const;
    void setStatusCode(unsigned);

    bool hasViolatedDirective() const;
    String violatedDirective() const;
    void setViolatedDirective(String);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_blockedURI;
    bool m_hasColumnNumber = false;
    int m_columnNumber;
    String m_disposition;
    String m_documentURI;
    String m_effectiveDirective;
    bool m_hasLineNumber = false;
    int m_lineNumber;
    String m_originalPolicy;
    String m_referrer;
    String m_sourceFile;
    bool m_hasStatusCode = false;
    unsigned m_statusCode;
    String m_violatedDirective;

    friend class V8SecurityPolicyViolationEventInit;
};

} // namespace blink

#endif // SecurityPolicyViolationEventInit_h
