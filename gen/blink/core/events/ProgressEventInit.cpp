// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "ProgressEventInit.h"

namespace blink {

ProgressEventInit::ProgressEventInit()
{
    setLengthComputable(false);
    setLoaded(0);
    setTotal(0);
}

ProgressEventInit::~ProgressEventInit() { }

ProgressEventInit::ProgressEventInit(const ProgressEventInit&) = default;

ProgressEventInit& ProgressEventInit::operator=(const ProgressEventInit&) = default;

bool ProgressEventInit::hasLengthComputable() const
{
    return m_hasLengthComputable;
}
bool ProgressEventInit::lengthComputable() const
{
    DCHECK(m_hasLengthComputable);
    return m_lengthComputable;
}
void ProgressEventInit::setLengthComputable(bool value)
{
    m_lengthComputable = value;
    m_hasLengthComputable = true;
}
bool ProgressEventInit::hasLoaded() const
{
    return m_hasLoaded;
}
unsigned long long ProgressEventInit::loaded() const
{
    DCHECK(m_hasLoaded);
    return m_loaded;
}
void ProgressEventInit::setLoaded(unsigned long long value)
{
    m_loaded = value;
    m_hasLoaded = true;
}
bool ProgressEventInit::hasTotal() const
{
    return m_hasTotal;
}
unsigned long long ProgressEventInit::total() const
{
    DCHECK(m_hasTotal);
    return m_total;
}
void ProgressEventInit::setTotal(unsigned long long value)
{
    m_total = value;
    m_hasTotal = true;
}

DEFINE_TRACE(ProgressEventInit)
{
    EventInit::trace(visitor);
}

} // namespace blink
