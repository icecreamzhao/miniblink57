// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "EventModifierInit.h"

namespace blink {

EventModifierInit::EventModifierInit()
{
    setAltKey(false);
    setCtrlKey(false);
    setMetaKey(false);
    setModifierAltGraph(false);
    setModifierCapsLock(false);
    setModifierFn(false);
    setModifierNumLock(false);
    setModifierScrollLock(false);
    setModifierSymbol(false);
    setShiftKey(false);
}

EventModifierInit::~EventModifierInit() { }

EventModifierInit::EventModifierInit(const EventModifierInit&) = default;

EventModifierInit& EventModifierInit::operator=(const EventModifierInit&) = default;

bool EventModifierInit::hasAltKey() const
{
    return m_hasAltKey;
}
bool EventModifierInit::altKey() const
{
    DCHECK(m_hasAltKey);
    return m_altKey;
}
void EventModifierInit::setAltKey(bool value)
{
    m_altKey = value;
    m_hasAltKey = true;
}
bool EventModifierInit::hasCtrlKey() const
{
    return m_hasCtrlKey;
}
bool EventModifierInit::ctrlKey() const
{
    DCHECK(m_hasCtrlKey);
    return m_ctrlKey;
}
void EventModifierInit::setCtrlKey(bool value)
{
    m_ctrlKey = value;
    m_hasCtrlKey = true;
}
bool EventModifierInit::hasMetaKey() const
{
    return m_hasMetaKey;
}
bool EventModifierInit::metaKey() const
{
    DCHECK(m_hasMetaKey);
    return m_metaKey;
}
void EventModifierInit::setMetaKey(bool value)
{
    m_metaKey = value;
    m_hasMetaKey = true;
}
bool EventModifierInit::hasModifierAltGraph() const
{
    return m_hasModifierAltGraph;
}
bool EventModifierInit::modifierAltGraph() const
{
    DCHECK(m_hasModifierAltGraph);
    return m_modifierAltGraph;
}
void EventModifierInit::setModifierAltGraph(bool value)
{
    m_modifierAltGraph = value;
    m_hasModifierAltGraph = true;
}
bool EventModifierInit::hasModifierCapsLock() const
{
    return m_hasModifierCapsLock;
}
bool EventModifierInit::modifierCapsLock() const
{
    DCHECK(m_hasModifierCapsLock);
    return m_modifierCapsLock;
}
void EventModifierInit::setModifierCapsLock(bool value)
{
    m_modifierCapsLock = value;
    m_hasModifierCapsLock = true;
}
bool EventModifierInit::hasModifierFn() const
{
    return m_hasModifierFn;
}
bool EventModifierInit::modifierFn() const
{
    DCHECK(m_hasModifierFn);
    return m_modifierFn;
}
void EventModifierInit::setModifierFn(bool value)
{
    m_modifierFn = value;
    m_hasModifierFn = true;
}
bool EventModifierInit::hasModifierNumLock() const
{
    return m_hasModifierNumLock;
}
bool EventModifierInit::modifierNumLock() const
{
    DCHECK(m_hasModifierNumLock);
    return m_modifierNumLock;
}
void EventModifierInit::setModifierNumLock(bool value)
{
    m_modifierNumLock = value;
    m_hasModifierNumLock = true;
}
bool EventModifierInit::hasModifierScrollLock() const
{
    return m_hasModifierScrollLock;
}
bool EventModifierInit::modifierScrollLock() const
{
    DCHECK(m_hasModifierScrollLock);
    return m_modifierScrollLock;
}
void EventModifierInit::setModifierScrollLock(bool value)
{
    m_modifierScrollLock = value;
    m_hasModifierScrollLock = true;
}
bool EventModifierInit::hasModifierSymbol() const
{
    return m_hasModifierSymbol;
}
bool EventModifierInit::modifierSymbol() const
{
    DCHECK(m_hasModifierSymbol);
    return m_modifierSymbol;
}
void EventModifierInit::setModifierSymbol(bool value)
{
    m_modifierSymbol = value;
    m_hasModifierSymbol = true;
}
bool EventModifierInit::hasShiftKey() const
{
    return m_hasShiftKey;
}
bool EventModifierInit::shiftKey() const
{
    DCHECK(m_hasShiftKey);
    return m_shiftKey;
}
void EventModifierInit::setShiftKey(bool value)
{
    m_shiftKey = value;
    m_hasShiftKey = true;
}

DEFINE_TRACE(EventModifierInit)
{
    UIEventInit::trace(visitor);
}

} // namespace blink
