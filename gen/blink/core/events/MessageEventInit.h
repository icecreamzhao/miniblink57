// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef MessageEventInit_h
#define MessageEventInit_h

#include "bindings/core/v8/ScriptValue.h"
#include "core/CoreExport.h"
#include "core/events/EventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class EventTarget;
class MessagePort;

class CORE_EXPORT MessageEventInit : public EventInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    MessageEventInit();
    virtual ~MessageEventInit();
    MessageEventInit(const MessageEventInit&);
    MessageEventInit& operator=(const MessageEventInit&);

    bool hasData() const;
    ScriptValue data() const;
    void setData(ScriptValue);

    bool hasLastEventId() const;
    String lastEventId() const;
    void setLastEventId(String);

    bool hasOrigin() const;
    String origin() const;
    void setOrigin(String);

    bool hasPorts() const;
    const HeapVector<Member<MessagePort>>& ports() const;
    void setPorts(const HeapVector<Member<MessagePort>>&);
    void setPortsToNull();

    bool hasSource() const;
    EventTarget* source() const;
    void setSource(EventTarget*);
    void setSourceToNull();

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    ScriptValue m_data;
    String m_lastEventId;
    String m_origin;
    bool m_hasPorts = false;
    HeapVector<Member<MessagePort>> m_ports;
    Member<EventTarget> m_source;

    friend class V8MessageEventInit;
};

} // namespace blink

#endif // MessageEventInit_h
