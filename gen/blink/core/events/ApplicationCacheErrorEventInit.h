// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef ApplicationCacheErrorEventInit_h
#define ApplicationCacheErrorEventInit_h

#include "core/CoreExport.h"
#include "core/events/EventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT ApplicationCacheErrorEventInit : public EventInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    ApplicationCacheErrorEventInit();
    virtual ~ApplicationCacheErrorEventInit();
    ApplicationCacheErrorEventInit(const ApplicationCacheErrorEventInit&);
    ApplicationCacheErrorEventInit& operator=(const ApplicationCacheErrorEventInit&);

    bool hasMessage() const;
    String message() const;
    void setMessage(String);

    bool hasReason() const;
    String reason() const;
    void setReason(String);

    bool hasStatus() const;
    unsigned status() const;
    void setStatus(unsigned);

    bool hasURL() const;
    String url() const;
    void setURL(String);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_message;
    String m_reason;
    bool m_hasStatus = false;
    unsigned m_status;
    String m_url;

    friend class V8ApplicationCacheErrorEventInit;
};

} // namespace blink

#endif // ApplicationCacheErrorEventInit_h
