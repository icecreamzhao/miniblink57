// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef ErrorEventInit_h
#define ErrorEventInit_h

#include "bindings/core/v8/ScriptValue.h"
#include "core/CoreExport.h"
#include "core/events/EventInit.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT ErrorEventInit : public EventInit {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    ErrorEventInit();
    virtual ~ErrorEventInit();
    ErrorEventInit(const ErrorEventInit&);
    ErrorEventInit& operator=(const ErrorEventInit&);

    bool hasColno() const;
    unsigned colno() const;
    void setColno(unsigned);

    bool hasError() const;
    ScriptValue error() const;
    void setError(ScriptValue);

    bool hasFilename() const;
    String filename() const;
    void setFilename(String);

    bool hasLineno() const;
    unsigned lineno() const;
    void setLineno(unsigned);

    bool hasMessage() const;
    String message() const;
    void setMessage(String);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasColno = false;
    unsigned m_colno;
    ScriptValue m_error;
    String m_filename;
    bool m_hasLineno = false;
    unsigned m_lineno;
    String m_message;

    friend class V8ErrorEventInit;
};

} // namespace blink

#endif // ErrorEventInit_h
