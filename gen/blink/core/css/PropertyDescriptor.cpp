// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "PropertyDescriptor.h"

namespace blink {

PropertyDescriptor::PropertyDescriptor()
{
    setInherits(false);
    setSyntax(String("*"));
}

PropertyDescriptor::~PropertyDescriptor() { }

PropertyDescriptor::PropertyDescriptor(const PropertyDescriptor&) = default;

PropertyDescriptor& PropertyDescriptor::operator=(const PropertyDescriptor&) = default;

bool PropertyDescriptor::hasInherits() const
{
    return m_hasInherits;
}
bool PropertyDescriptor::inherits() const
{
    DCHECK(m_hasInherits);
    return m_inherits;
}
void PropertyDescriptor::setInherits(bool value)
{
    m_inherits = value;
    m_hasInherits = true;
}
bool PropertyDescriptor::hasInitialValue() const
{
    return !m_initialValue.isNull();
}
String PropertyDescriptor::initialValue() const
{
    return m_initialValue;
}
void PropertyDescriptor::setInitialValue(String value)
{
    m_initialValue = value;
}
bool PropertyDescriptor::hasName() const
{
    return !m_name.isNull();
}
String PropertyDescriptor::name() const
{
    return m_name;
}
void PropertyDescriptor::setName(String value)
{
    m_name = value;
}
bool PropertyDescriptor::hasSyntax() const
{
    return !m_syntax.isNull();
}
String PropertyDescriptor::syntax() const
{
    return m_syntax;
}
void PropertyDescriptor::setSyntax(String value)
{
    m_syntax = value;
}

DEFINE_TRACE(PropertyDescriptor)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
