// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef FontFaceDescriptors_h
#define FontFaceDescriptors_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class CORE_EXPORT FontFaceDescriptors : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    FontFaceDescriptors();
    virtual ~FontFaceDescriptors();
    FontFaceDescriptors(const FontFaceDescriptors&);
    FontFaceDescriptors& operator=(const FontFaceDescriptors&);

    bool hasDisplay() const;
    String display() const;
    void setDisplay(String);

    bool hasFeatureSettings() const;
    String featureSettings() const;
    void setFeatureSettings(String);

    bool hasStretch() const;
    String stretch() const;
    void setStretch(String);

    bool hasStyle() const;
    String style() const;
    void setStyle(String);

    bool hasUnicodeRange() const;
    String unicodeRange() const;
    void setUnicodeRange(String);

    bool hasVariant() const;
    String variant() const;
    void setVariant(String);

    bool hasWeight() const;
    String weight() const;
    void setWeight(String);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_display;
    String m_featureSettings;
    String m_stretch;
    String m_style;
    String m_unicodeRange;
    String m_variant;
    String m_weight;

    friend class V8FontFaceDescriptors;
};

} // namespace blink

#endif // FontFaceDescriptors_h
