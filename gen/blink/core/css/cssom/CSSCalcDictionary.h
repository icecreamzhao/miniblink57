// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef CSSCalcDictionary_h
#define CSSCalcDictionary_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class CORE_EXPORT CSSCalcDictionary : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    CSSCalcDictionary();
    virtual ~CSSCalcDictionary();
    CSSCalcDictionary(const CSSCalcDictionary&);
    CSSCalcDictionary& operator=(const CSSCalcDictionary&);

    bool hasCh() const;
    double ch() const;
    void setCh(double);
    void setChToNull();

    bool hasCm() const;
    double cm() const;
    void setCm(double);
    void setCmToNull();

    bool hasEm() const;
    double em() const;
    void setEm(double);
    void setEmToNull();

    bool hasEx() const;
    double ex() const;
    void setEx(double);
    void setExToNull();

    bool hasIn() const;
    double in() const;
    void setIn(double);
    void setInToNull();

    bool hasMm() const;
    double mm() const;
    void setMm(double);
    void setMmToNull();

    bool hasPc() const;
    double pc() const;
    void setPc(double);
    void setPcToNull();

    bool hasPercent() const;
    double percent() const;
    void setPercent(double);
    void setPercentToNull();

    bool hasPt() const;
    double pt() const;
    void setPt(double);
    void setPtToNull();

    bool hasPx() const;
    double px() const;
    void setPx(double);
    void setPxToNull();

    bool hasRem() const;
    double rem() const;
    void setRem(double);
    void setRemToNull();

    bool hasVh() const;
    double vh() const;
    void setVh(double);
    void setVhToNull();

    bool hasVmax() const;
    double vmax() const;
    void setVmax(double);
    void setVmaxToNull();

    bool hasVmin() const;
    double vmin() const;
    void setVmin(double);
    void setVminToNull();

    bool hasVw() const;
    double vw() const;
    void setVw(double);
    void setVwToNull();

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasCh = false;
    double m_ch;
    bool m_hasCm = false;
    double m_cm;
    bool m_hasEm = false;
    double m_em;
    bool m_hasEx = false;
    double m_ex;
    bool m_hasIn = false;
    double m_in;
    bool m_hasMm = false;
    double m_mm;
    bool m_hasPc = false;
    double m_pc;
    bool m_hasPercent = false;
    double m_percent;
    bool m_hasPt = false;
    double m_pt;
    bool m_hasPx = false;
    double m_px;
    bool m_hasRem = false;
    double m_rem;
    bool m_hasVh = false;
    double m_vh;
    bool m_hasVmax = false;
    double m_vmax;
    bool m_hasVmin = false;
    double m_vmin;
    bool m_hasVw = false;
    double m_vw;

    friend class V8CSSCalcDictionary;
};

} // namespace blink

#endif // CSSCalcDictionary_h
