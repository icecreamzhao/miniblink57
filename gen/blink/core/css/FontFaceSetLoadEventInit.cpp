// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "FontFaceSetLoadEventInit.h"

#include "core/css/FontFace.h"
#include "wtf/Vector.h"

namespace blink {

FontFaceSetLoadEventInit::FontFaceSetLoadEventInit()
{
    setFontfaces(HeapVector<Member<FontFace>>());
}

FontFaceSetLoadEventInit::~FontFaceSetLoadEventInit() { }

FontFaceSetLoadEventInit::FontFaceSetLoadEventInit(const FontFaceSetLoadEventInit&) = default;

FontFaceSetLoadEventInit& FontFaceSetLoadEventInit::operator=(const FontFaceSetLoadEventInit&) = default;

bool FontFaceSetLoadEventInit::hasFontfaces() const
{
    return m_hasFontfaces;
}
const HeapVector<Member<FontFace>>& FontFaceSetLoadEventInit::fontfaces() const
{
    DCHECK(m_hasFontfaces);
    return m_fontfaces;
}
void FontFaceSetLoadEventInit::setFontfaces(const HeapVector<Member<FontFace>>& value)
{
    m_fontfaces = value;
    m_hasFontfaces = true;
}

DEFINE_TRACE(FontFaceSetLoadEventInit)
{
    visitor->trace(m_fontfaces);
    EventInit::trace(visitor);
}

} // namespace blink
