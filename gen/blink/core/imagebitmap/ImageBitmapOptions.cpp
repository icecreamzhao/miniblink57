// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "ImageBitmapOptions.h"

namespace blink {

ImageBitmapOptions::ImageBitmapOptions()
{
    setColorSpaceConversion(String("default"));
    setImageOrientation(String("none"));
    setPremultiplyAlpha(String("default"));
    setResizeQuality(String("low"));
}

ImageBitmapOptions::~ImageBitmapOptions() { }

ImageBitmapOptions::ImageBitmapOptions(const ImageBitmapOptions&) = default;

ImageBitmapOptions& ImageBitmapOptions::operator=(const ImageBitmapOptions&) = default;

bool ImageBitmapOptions::hasColorSpaceConversion() const
{
    return !m_colorSpaceConversion.isNull();
}
String ImageBitmapOptions::colorSpaceConversion() const
{
    return m_colorSpaceConversion;
}
void ImageBitmapOptions::setColorSpaceConversion(String value)
{
    m_colorSpaceConversion = value;
}
bool ImageBitmapOptions::hasImageOrientation() const
{
    return !m_imageOrientation.isNull();
}
String ImageBitmapOptions::imageOrientation() const
{
    return m_imageOrientation;
}
void ImageBitmapOptions::setImageOrientation(String value)
{
    m_imageOrientation = value;
}
bool ImageBitmapOptions::hasPremultiplyAlpha() const
{
    return !m_premultiplyAlpha.isNull();
}
String ImageBitmapOptions::premultiplyAlpha() const
{
    return m_premultiplyAlpha;
}
void ImageBitmapOptions::setPremultiplyAlpha(String value)
{
    m_premultiplyAlpha = value;
}
bool ImageBitmapOptions::hasResizeHeight() const
{
    return m_hasResizeHeight;
}
unsigned ImageBitmapOptions::resizeHeight() const
{
    DCHECK(m_hasResizeHeight);
    return m_resizeHeight;
}
void ImageBitmapOptions::setResizeHeight(unsigned value)
{
    m_resizeHeight = value;
    m_hasResizeHeight = true;
}
bool ImageBitmapOptions::hasResizeQuality() const
{
    return !m_resizeQuality.isNull();
}
String ImageBitmapOptions::resizeQuality() const
{
    return m_resizeQuality;
}
void ImageBitmapOptions::setResizeQuality(String value)
{
    m_resizeQuality = value;
}
bool ImageBitmapOptions::hasResizeWidth() const
{
    return m_hasResizeWidth;
}
unsigned ImageBitmapOptions::resizeWidth() const
{
    DCHECK(m_hasResizeWidth);
    return m_resizeWidth;
}
void ImageBitmapOptions::setResizeWidth(unsigned value)
{
    m_resizeWidth = value;
    m_hasResizeWidth = true;
}

DEFINE_TRACE(ImageBitmapOptions)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
