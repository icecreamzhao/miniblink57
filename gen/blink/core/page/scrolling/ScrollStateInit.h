// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef ScrollStateInit_h
#define ScrollStateInit_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class CORE_EXPORT ScrollStateInit : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    ScrollStateInit();
    virtual ~ScrollStateInit();
    ScrollStateInit(const ScrollStateInit&);
    ScrollStateInit& operator=(const ScrollStateInit&);

    bool hasDeltaGranularity() const;
    double deltaGranularity() const;
    void setDeltaGranularity(double);

    bool hasDeltaX() const;
    double deltaX() const;
    void setDeltaX(double);

    bool hasDeltaY() const;
    double deltaY() const;
    void setDeltaY(double);

    bool hasFromUserInput() const;
    bool fromUserInput() const;
    void setFromUserInput(bool);

    bool hasIsBeginning() const;
    bool isBeginning() const;
    void setIsBeginning(bool);

    bool hasIsDirectManipulation() const;
    bool isDirectManipulation() const;
    void setIsDirectManipulation(bool);

    bool hasIsEnding() const;
    bool isEnding() const;
    void setIsEnding(bool);

    bool hasIsInInertialPhase() const;
    bool isInInertialPhase() const;
    void setIsInInertialPhase(bool);

    bool hasPositionX() const;
    int positionX() const;
    void setPositionX(int);

    bool hasPositionY() const;
    int positionY() const;
    void setPositionY(int);

    bool hasShouldPropagate() const;
    bool shouldPropagate() const;
    void setShouldPropagate(bool);

    bool hasVelocityX() const;
    double velocityX() const;
    void setVelocityX(double);

    bool hasVelocityY() const;
    double velocityY() const;
    void setVelocityY(double);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasDeltaGranularity = false;
    double m_deltaGranularity;
    bool m_hasDeltaX = false;
    double m_deltaX;
    bool m_hasDeltaY = false;
    double m_deltaY;
    bool m_hasFromUserInput = false;
    bool m_fromUserInput;
    bool m_hasIsBeginning = false;
    bool m_isBeginning;
    bool m_hasIsDirectManipulation = false;
    bool m_isDirectManipulation;
    bool m_hasIsEnding = false;
    bool m_isEnding;
    bool m_hasIsInInertialPhase = false;
    bool m_isInInertialPhase;
    bool m_hasPositionX = false;
    int m_positionX;
    bool m_hasPositionY = false;
    int m_positionY;
    bool m_hasShouldPropagate = false;
    bool m_shouldPropagate;
    bool m_hasVelocityX = false;
    double m_velocityX;
    bool m_hasVelocityY = false;
    double m_velocityY;

    friend class V8ScrollStateInit;
};

} // namespace blink

#endif // ScrollStateInit_h
