// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8VTTCue.h"

#include "bindings/core/v8/DoubleOrAutoKeyword.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DocumentFragment.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/inspector/ConsoleMessage.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8VTTCue::wrapperTypeInfo = { gin::kEmbedderBlink, V8VTTCue::domTemplate, V8VTTCue::trace, V8VTTCue::traceWrappers, V8VTTCue::visitDOMWrapper, nullptr, "VTTCue", &V8TextTrackCue::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in VTTCue.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& VTTCue::s_wrapperTypeInfo = V8VTTCue::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, VTTCue>::value,
    "VTTCue inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&VTTCue::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "VTTCue is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace VTTCueV8Internal {

    static void regionIdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        v8SetReturnValueString(info, impl->regionId(), info.GetIsolate());
    }

    CORE_EXPORT void regionIdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::regionIdAttributeGetter(info);
    }

    static void regionIdAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setRegionId(cppValue);
    }

    CORE_EXPORT void regionIdAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::regionIdAttributeSetter(v8Value, info);
    }

    static void verticalAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        v8SetReturnValueString(info, impl->vertical(), info.GetIsolate());
    }

    CORE_EXPORT void verticalAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::verticalAttributeGetter(info);
    }

    static void verticalAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VTTCue", "vertical");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        // Type check per: http://heycam.github.io/webidl/#dfn-attribute-setter
        // Returns undefined without setting the value if the value is invalid.
        DummyExceptionStateForTesting dummyExceptionState;
        const char* validValues[] = {
            "",
            "rl",
            "lr",
        };
        if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "DirectionSetting", dummyExceptionState)) {
            currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, dummyExceptionState.message()));
            return;
        }

        impl->setVertical(cppValue);
    }

    CORE_EXPORT void verticalAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::verticalAttributeSetter(v8Value, info);
    }

    static void snapToLinesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        v8SetReturnValueBool(info, impl->snapToLines());
    }

    CORE_EXPORT void snapToLinesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::snapToLinesAttributeGetter(info);
    }

    static void snapToLinesAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VTTCue", "snapToLines");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setSnapToLines(cppValue);
    }

    CORE_EXPORT void snapToLinesAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::snapToLinesAttributeSetter(v8Value, info);
    }

    static void lineAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        DoubleOrAutoKeyword result;
        impl->line(result);

        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void lineAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::lineAttributeGetter(info);
    }

    static void lineAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VTTCue", "line");

        // Prepare the value to be set.
        DoubleOrAutoKeyword cppValue;
        V8DoubleOrAutoKeyword::toImpl(info.GetIsolate(), v8Value, cppValue, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setLine(cppValue);
    }

    CORE_EXPORT void lineAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::lineAttributeSetter(v8Value, info);
    }

    static void positionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        DoubleOrAutoKeyword result;
        impl->position(result);

        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void positionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::positionAttributeGetter(info);
    }

    static void positionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VTTCue", "position");

        // Prepare the value to be set.
        DoubleOrAutoKeyword cppValue;
        V8DoubleOrAutoKeyword::toImpl(info.GetIsolate(), v8Value, cppValue, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setPosition(cppValue, exceptionState);
    }

    CORE_EXPORT void positionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::positionAttributeSetter(v8Value, info);
    }

    static void sizeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        v8SetReturnValue(info, impl->size());
    }

    CORE_EXPORT void sizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::sizeAttributeGetter(info);
    }

    static void sizeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VTTCue", "size");

        // Prepare the value to be set.
        double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setSize(cppValue, exceptionState);
    }

    CORE_EXPORT void sizeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::sizeAttributeSetter(v8Value, info);
    }

    static void alignAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        v8SetReturnValueString(info, impl->align(), info.GetIsolate());
    }

    CORE_EXPORT void alignAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::alignAttributeGetter(info);
    }

    static void alignAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VTTCue", "align");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        // Type check per: http://heycam.github.io/webidl/#dfn-attribute-setter
        // Returns undefined without setting the value if the value is invalid.
        DummyExceptionStateForTesting dummyExceptionState;
        const char* validValues[] = {
            "start",
            "middle",
            "end",
            "left",
            "right",
        };
        if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "AlignSetting", dummyExceptionState)) {
            currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, dummyExceptionState.message()));
            return;
        }

        impl->setAlign(cppValue);
    }

    CORE_EXPORT void alignAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::alignAttributeSetter(v8Value, info);
    }

    static void textAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VTTCue* impl = V8VTTCue::toImpl(holder);

        v8SetReturnValueString(info, impl->text(), info.GetIsolate());
    }

    CORE_EXPORT void textAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::textAttributeGetter(info);
    }

    static void textAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VTTCue* impl = V8VTTCue::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setText(cppValue);
    }

    CORE_EXPORT void textAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VTTCueV8Internal::textAttributeSetter(v8Value, info);
    }

    static void getCueAsHTMLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCue* impl = V8VTTCue::toImpl(info.Holder());

        v8SetReturnValue(info, impl->getCueAsHTML());
    }

    CORE_EXPORT void getCueAsHTMLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VTTCueV8Internal::getCueAsHTMLMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "VTTCue");

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        double startTime;
        double endTime;
        V8StringResource<> text;
        startTime = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        endTime = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        text = info[2];
        if (!text.prepare())
            return;

        Document& document = *toDocument(currentExecutionContext(info.GetIsolate()));
        VTTCue* impl = VTTCue::create(document, startTime, endTime, text);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8VTTCue::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace VTTCueV8Internal

void V8VTTCue::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    VTTCue* impl = scriptWrappable->toImpl<VTTCue>();
    // The owner() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->owner())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

const V8DOMConfiguration::AccessorConfiguration V8VTTCueAccessors[] = {
    { "vertical", VTTCueV8Internal::verticalAttributeGetterCallback, VTTCueV8Internal::verticalAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "snapToLines", VTTCueV8Internal::snapToLinesAttributeGetterCallback, VTTCueV8Internal::snapToLinesAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "line", VTTCueV8Internal::lineAttributeGetterCallback, VTTCueV8Internal::lineAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "position", VTTCueV8Internal::positionAttributeGetterCallback, VTTCueV8Internal::positionAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "size", VTTCueV8Internal::sizeAttributeGetterCallback, VTTCueV8Internal::sizeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "align", VTTCueV8Internal::alignAttributeGetterCallback, VTTCueV8Internal::alignAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "text", VTTCueV8Internal::textAttributeGetterCallback, VTTCueV8Internal::textAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8VTTCueMethods[] = {
    { "getCueAsHTML", VTTCueV8Internal::getCueAsHTMLMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8VTTCue::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("VTTCue"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    VTTCueV8Internal::constructor(info);
}

static void installV8VTTCueTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8VTTCue::wrapperTypeInfo.interfaceName, V8TextTrackCue::domTemplate(isolate, world), V8VTTCue::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8VTTCue::constructorCallback);
    interfaceTemplate->SetLength(3);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VTTCueAccessors, WTF_ARRAY_LENGTH(V8VTTCueAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VTTCueMethods, WTF_ARRAY_LENGTH(V8VTTCueMethods));

    if (RuntimeEnabledFeatures::webVTTRegionsEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorregionIdConfiguration = { "regionId", VTTCueV8Internal::regionIdAttributeGetterCallback, VTTCueV8Internal::regionIdAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorregionIdConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8VTTCue::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8VTTCueTemplate);
}

bool V8VTTCue::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8VTTCue::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

VTTCue* V8VTTCue::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
