// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "DoubleOrDoubleSequence.h"

#include "bindings/core/v8/ToV8.h"

namespace blink {

DoubleOrDoubleSequence::DoubleOrDoubleSequence()
    : m_type(SpecificTypeNone)
{
}

double DoubleOrDoubleSequence::getAsDouble() const
{
    DCHECK(isDouble());
    return m_double;
}

void DoubleOrDoubleSequence::setDouble(double value)
{
    DCHECK(isNull());
    m_double = value;
    m_type = SpecificTypeDouble;
}

DoubleOrDoubleSequence DoubleOrDoubleSequence::fromDouble(double value)
{
    DoubleOrDoubleSequence container;
    container.setDouble(value);
    return container;
}

const Vector<double>& DoubleOrDoubleSequence::getAsDoubleSequence() const
{
    DCHECK(isDoubleSequence());
    return m_doubleSequence;
}

void DoubleOrDoubleSequence::setDoubleSequence(const Vector<double>& value)
{
    DCHECK(isNull());
    m_doubleSequence = value;
    m_type = SpecificTypeDoubleSequence;
}

DoubleOrDoubleSequence DoubleOrDoubleSequence::fromDoubleSequence(const Vector<double>& value)
{
    DoubleOrDoubleSequence container;
    container.setDoubleSequence(value);
    return container;
}

DoubleOrDoubleSequence::DoubleOrDoubleSequence(const DoubleOrDoubleSequence&) = default;
DoubleOrDoubleSequence::~DoubleOrDoubleSequence() = default;
DoubleOrDoubleSequence& DoubleOrDoubleSequence::operator=(const DoubleOrDoubleSequence&) = default;

DEFINE_TRACE(DoubleOrDoubleSequence)
{
}

void V8DoubleOrDoubleSequence::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, DoubleOrDoubleSequence& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (v8Value->IsArray()) {
        Vector<double> cppValue = toImplArray<Vector<double>>(v8Value, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleSequence(cppValue);
        return;
    }

    if (v8Value->IsNumber()) {
        double cppValue = toRestrictedDouble(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDouble(cppValue);
        return;
    }

    {
        double cppValue = toRestrictedDouble(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDouble(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const DoubleOrDoubleSequence& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case DoubleOrDoubleSequence::SpecificTypeNone:
        return v8::Null(isolate);
    case DoubleOrDoubleSequence::SpecificTypeDouble:
        return v8::Number::New(isolate, impl.getAsDouble());
    case DoubleOrDoubleSequence::SpecificTypeDoubleSequence:
        return ToV8(impl.getAsDoubleSequence(), creationContext, isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

DoubleOrDoubleSequence NativeValueTraits<DoubleOrDoubleSequence>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    DoubleOrDoubleSequence impl;
    V8DoubleOrDoubleSequence::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
