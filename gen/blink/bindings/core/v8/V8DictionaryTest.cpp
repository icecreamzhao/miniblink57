// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8DictionaryTest.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8InternalDictionary.h"
#include "bindings/core/v8/V8InternalDictionaryDerived.h"
#include "bindings/core/v8/V8InternalDictionaryDerivedDerived.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8DictionaryTest::wrapperTypeInfo = { gin::kEmbedderBlink, V8DictionaryTest::domTemplate, V8DictionaryTest::trace, V8DictionaryTest::traceWrappers, 0, nullptr, "DictionaryTest", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DictionaryTest.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DictionaryTest::s_wrapperTypeInfo = V8DictionaryTest::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, DictionaryTest>::value,
    "DictionaryTest inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&DictionaryTest::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "DictionaryTest is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace DictionaryTestV8Internal {

    static void setMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DictionaryTest", "set");

        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        InternalDictionary testingDictionary;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('testingDictionary') is not an object.");

            return;
        }
        V8InternalDictionary::toImpl(info.GetIsolate(), info[0], testingDictionary, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->set(testingDictionary);
    }

    void setMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::setMethod(info);
    }

    static void getMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        InternalDictionary result;
        impl->get(result);
        v8SetReturnValue(info, result);
    }

    void getMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::getMethod(info);
    }

    static void getDictionaryMemberPropertiesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptValue result = impl->getDictionaryMemberProperties(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    void getDictionaryMemberPropertiesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::getDictionaryMemberPropertiesMethod(info);
    }

    static void setDerivedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DictionaryTest", "setDerived");

        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        InternalDictionaryDerived derived;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('derived') is not an object.");

            return;
        }
        V8InternalDictionaryDerived::toImpl(info.GetIsolate(), info[0], derived, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDerived(derived);
    }

    void setDerivedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::setDerivedMethod(info);
    }

    static void getDerivedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        InternalDictionaryDerived result;
        impl->getDerived(result);
        v8SetReturnValue(info, result);
    }

    void getDerivedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::getDerivedMethod(info);
    }

    static void setDerivedDerivedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DictionaryTest", "setDerivedDerived");

        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        InternalDictionaryDerivedDerived derived;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('derived') is not an object.");

            return;
        }
        V8InternalDictionaryDerivedDerived::toImpl(info.GetIsolate(), info[0], derived, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDerivedDerived(derived);
    }

    void setDerivedDerivedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::setDerivedDerivedMethod(info);
    }

    static void getDerivedDerivedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        InternalDictionaryDerivedDerived result;
        impl->getDerivedDerived(result);
        v8SetReturnValue(info, result);
    }

    void getDerivedDerivedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::getDerivedDerivedMethod(info);
    }

    static void stringFromIterableMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DictionaryTest", "stringFromIterable");

        DictionaryTest* impl = V8DictionaryTest::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Dictionary iterableDictionary;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('iterableDictionary') is not an object.");

            return;
        }
        iterableDictionary = Dictionary(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        String result = impl->stringFromIterable(scriptState, iterableDictionary, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueString(info, result, info.GetIsolate());
    }

    void stringFromIterableMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DictionaryTestV8Internal::stringFromIterableMethod(info);
    }

} // namespace DictionaryTestV8Internal

const V8DOMConfiguration::MethodConfiguration V8DictionaryTestMethods[] = {
    { "set", DictionaryTestV8Internal::setMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "get", DictionaryTestV8Internal::getMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getDictionaryMemberProperties", DictionaryTestV8Internal::getDictionaryMemberPropertiesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setDerived", DictionaryTestV8Internal::setDerivedMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getDerived", DictionaryTestV8Internal::getDerivedMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setDerivedDerived", DictionaryTestV8Internal::setDerivedDerivedMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getDerivedDerived", DictionaryTestV8Internal::getDerivedDerivedMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "stringFromIterable", DictionaryTestV8Internal::stringFromIterableMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8DictionaryTestTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8DictionaryTest::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8DictionaryTest::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8DictionaryTestMethods, WTF_ARRAY_LENGTH(V8DictionaryTestMethods));
}

v8::Local<v8::FunctionTemplate> V8DictionaryTest::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8DictionaryTestTemplate);
}

bool V8DictionaryTest::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8DictionaryTest::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DictionaryTest* V8DictionaryTest::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
