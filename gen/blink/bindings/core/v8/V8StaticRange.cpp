// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8StaticRange.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8Range.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8StaticRange::wrapperTypeInfo = { gin::kEmbedderBlink, V8StaticRange::domTemplate, V8StaticRange::trace, V8StaticRange::traceWrappers, 0, nullptr, "StaticRange", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in StaticRange.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& StaticRange::s_wrapperTypeInfo = V8StaticRange::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, StaticRange>::value,
    "StaticRange inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&StaticRange::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "StaticRange is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace StaticRangeV8Internal {

    static void startContainerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        StaticRange* impl = V8StaticRange::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->startContainer()), impl);
    }

    CORE_EXPORT void startContainerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::startContainerAttributeGetter(info);
    }

    static void startContainerAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        StaticRange* impl = V8StaticRange::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "StaticRange", "startContainer");

        // Prepare the value to be set.
        Node* cppValue = V8Node::toImplWithTypeCheck(info.GetIsolate(), v8Value);

        // Type check per: http://heycam.github.io/webidl/#es-interface
        if (!cppValue) {
            exceptionState.throwTypeError("The provided value is not of type 'Node'.");
            return;
        }

        impl->setStartContainer(cppValue);
    }

    CORE_EXPORT void startContainerAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        StaticRangeV8Internal::startContainerAttributeSetter(v8Value, info);
    }

    static void startOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        StaticRange* impl = V8StaticRange::toImpl(holder);

        v8SetReturnValueInt(info, impl->startOffset());
    }

    CORE_EXPORT void startOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::startOffsetAttributeGetter(info);
    }

    static void startOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        StaticRange* impl = V8StaticRange::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "StaticRange", "startOffset");

        // Prepare the value to be set.
        int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setStartOffset(cppValue);
    }

    CORE_EXPORT void startOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        StaticRangeV8Internal::startOffsetAttributeSetter(v8Value, info);
    }

    static void endContainerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        StaticRange* impl = V8StaticRange::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->endContainer()), impl);
    }

    CORE_EXPORT void endContainerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::endContainerAttributeGetter(info);
    }

    static void endContainerAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        StaticRange* impl = V8StaticRange::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "StaticRange", "endContainer");

        // Prepare the value to be set.
        Node* cppValue = V8Node::toImplWithTypeCheck(info.GetIsolate(), v8Value);

        // Type check per: http://heycam.github.io/webidl/#es-interface
        if (!cppValue) {
            exceptionState.throwTypeError("The provided value is not of type 'Node'.");
            return;
        }

        impl->setEndContainer(cppValue);
    }

    CORE_EXPORT void endContainerAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        StaticRangeV8Internal::endContainerAttributeSetter(v8Value, info);
    }

    static void endOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        StaticRange* impl = V8StaticRange::toImpl(holder);

        v8SetReturnValueInt(info, impl->endOffset());
    }

    CORE_EXPORT void endOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::endOffsetAttributeGetter(info);
    }

    static void endOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        StaticRange* impl = V8StaticRange::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "StaticRange", "endOffset");

        // Prepare the value to be set.
        int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setEndOffset(cppValue);
    }

    CORE_EXPORT void endOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        StaticRangeV8Internal::endOffsetAttributeSetter(v8Value, info);
    }

    static void collapsedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        StaticRange* impl = V8StaticRange::toImpl(holder);

        v8SetReturnValueBool(info, impl->collapsed());
    }

    CORE_EXPORT void collapsedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::collapsedAttributeGetter(info);
    }

    static void setStartMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "StaticRange", "setStart");

        StaticRange* impl = V8StaticRange::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        Node* node;
        int offset;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setStart(node, offset);
    }

    CORE_EXPORT void setStartMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::setStartMethod(info);
    }

    static void setEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "StaticRange", "setEnd");

        StaticRange* impl = V8StaticRange::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        Node* node;
        int offset;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setEnd(node, offset);
    }

    CORE_EXPORT void setEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::setEndMethod(info);
    }

    static void toRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "StaticRange", "toRange");

        StaticRange* impl = V8StaticRange::toImpl(info.Holder());

        Range* result = impl->toRange(exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void toRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        StaticRangeV8Internal::toRangeMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        Document& document = *toDocument(currentExecutionContext(info.GetIsolate()));
        StaticRange* impl = StaticRange::create(document);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8StaticRange::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace StaticRangeV8Internal

const V8DOMConfiguration::AccessorConfiguration V8StaticRangeAccessors[] = {
    { "startContainer", StaticRangeV8Internal::startContainerAttributeGetterCallback, StaticRangeV8Internal::startContainerAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "startOffset", StaticRangeV8Internal::startOffsetAttributeGetterCallback, StaticRangeV8Internal::startOffsetAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "endContainer", StaticRangeV8Internal::endContainerAttributeGetterCallback, StaticRangeV8Internal::endContainerAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "endOffset", StaticRangeV8Internal::endOffsetAttributeGetterCallback, StaticRangeV8Internal::endOffsetAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "collapsed", StaticRangeV8Internal::collapsedAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8StaticRangeMethods[] = {
    { "setStart", StaticRangeV8Internal::setStartMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setEnd", StaticRangeV8Internal::setEndMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toRange", StaticRangeV8Internal::toRangeMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8StaticRange::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("StaticRange"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    StaticRangeV8Internal::constructor(info);
}

static void installV8StaticRangeTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8StaticRange::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8StaticRange::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8StaticRange::constructorCallback);
    interfaceTemplate->SetLength(0);

    if (!RuntimeEnabledFeatures::inputEventEnabled()) {
        return;
    }

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8StaticRangeAccessors, WTF_ARRAY_LENGTH(V8StaticRangeAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8StaticRangeMethods, WTF_ARRAY_LENGTH(V8StaticRangeMethods));
}

v8::Local<v8::FunctionTemplate> V8StaticRange::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8StaticRangeTemplate);
}

bool V8StaticRange::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8StaticRange::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

StaticRange* V8StaticRange::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
