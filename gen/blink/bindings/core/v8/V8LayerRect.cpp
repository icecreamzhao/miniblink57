// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8LayerRect.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8ClientRect.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8LayerRect::wrapperTypeInfo = { gin::kEmbedderBlink, V8LayerRect::domTemplate, V8LayerRect::trace, V8LayerRect::traceWrappers, 0, nullptr, "LayerRect", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in LayerRect.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& LayerRect::s_wrapperTypeInfo = V8LayerRect::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, LayerRect>::value,
    "LayerRect inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&LayerRect::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "LayerRect is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace LayerRectV8Internal {

    static void layerAssociatedNodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        LayerRect* impl = V8LayerRect::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->layerAssociatedNode()), impl);
    }

    void layerAssociatedNodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        LayerRectV8Internal::layerAssociatedNodeAttributeGetter(info);
    }

    static void layerTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        LayerRect* impl = V8LayerRect::toImpl(holder);

        v8SetReturnValueString(info, impl->layerType(), info.GetIsolate());
    }

    void layerTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        LayerRectV8Internal::layerTypeAttributeGetter(info);
    }

    static void associatedNodeOffsetXAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        LayerRect* impl = V8LayerRect::toImpl(holder);

        v8SetReturnValueInt(info, impl->associatedNodeOffsetX());
    }

    void associatedNodeOffsetXAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        LayerRectV8Internal::associatedNodeOffsetXAttributeGetter(info);
    }

    static void associatedNodeOffsetYAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        LayerRect* impl = V8LayerRect::toImpl(holder);

        v8SetReturnValueInt(info, impl->associatedNodeOffsetY());
    }

    void associatedNodeOffsetYAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        LayerRectV8Internal::associatedNodeOffsetYAttributeGetter(info);
    }

    static void layerRelativeRectAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        LayerRect* impl = V8LayerRect::toImpl(holder);

        ClientRect* cppValue(WTF::getPtr(impl->layerRelativeRect()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#LayerRect#layerRelativeRect";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    void layerRelativeRectAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        LayerRectV8Internal::layerRelativeRectAttributeGetter(info);
    }

} // namespace LayerRectV8Internal

const V8DOMConfiguration::AccessorConfiguration V8LayerRectAccessors[] = {
    { "layerAssociatedNode", LayerRectV8Internal::layerAssociatedNodeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "layerType", LayerRectV8Internal::layerTypeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "associatedNodeOffsetX", LayerRectV8Internal::associatedNodeOffsetXAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "associatedNodeOffsetY", LayerRectV8Internal::associatedNodeOffsetYAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "layerRelativeRect", LayerRectV8Internal::layerRelativeRectAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8LayerRectTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8LayerRect::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8LayerRect::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8LayerRectAccessors, WTF_ARRAY_LENGTH(V8LayerRectAccessors));
}

v8::Local<v8::FunctionTemplate> V8LayerRect::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8LayerRectTemplate);
}

bool V8LayerRect::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8LayerRect::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

LayerRect* V8LayerRect::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
