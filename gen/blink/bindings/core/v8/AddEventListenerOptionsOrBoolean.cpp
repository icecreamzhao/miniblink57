// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "AddEventListenerOptionsOrBoolean.h"

#include "bindings/core/v8/ToV8.h"

namespace blink {

AddEventListenerOptionsOrBoolean::AddEventListenerOptionsOrBoolean()
    : m_type(SpecificTypeNone)
{
}

const AddEventListenerOptions& AddEventListenerOptionsOrBoolean::getAsAddEventListenerOptions() const
{
    DCHECK(isAddEventListenerOptions());
    return m_addEventListenerOptions;
}

void AddEventListenerOptionsOrBoolean::setAddEventListenerOptions(const AddEventListenerOptions& value)
{
    DCHECK(isNull());
    m_addEventListenerOptions = value;
    m_type = SpecificTypeAddEventListenerOptions;
}

AddEventListenerOptionsOrBoolean AddEventListenerOptionsOrBoolean::fromAddEventListenerOptions(const AddEventListenerOptions& value)
{
    AddEventListenerOptionsOrBoolean container;
    container.setAddEventListenerOptions(value);
    return container;
}

bool AddEventListenerOptionsOrBoolean::getAsBoolean() const
{
    DCHECK(isBoolean());
    return m_boolean;
}

void AddEventListenerOptionsOrBoolean::setBoolean(bool value)
{
    DCHECK(isNull());
    m_boolean = value;
    m_type = SpecificTypeBoolean;
}

AddEventListenerOptionsOrBoolean AddEventListenerOptionsOrBoolean::fromBoolean(bool value)
{
    AddEventListenerOptionsOrBoolean container;
    container.setBoolean(value);
    return container;
}

AddEventListenerOptionsOrBoolean::AddEventListenerOptionsOrBoolean(const AddEventListenerOptionsOrBoolean&) = default;
AddEventListenerOptionsOrBoolean::~AddEventListenerOptionsOrBoolean() = default;
AddEventListenerOptionsOrBoolean& AddEventListenerOptionsOrBoolean::operator=(const AddEventListenerOptionsOrBoolean&) = default;

DEFINE_TRACE(AddEventListenerOptionsOrBoolean)
{
    visitor->trace(m_addEventListenerOptions);
}

void V8AddEventListenerOptionsOrBoolean::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, AddEventListenerOptionsOrBoolean& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (isUndefinedOrNull(v8Value)) {
        AddEventListenerOptions cppValue;
        V8AddEventListenerOptions::toImpl(isolate, v8Value, cppValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setAddEventListenerOptions(cppValue);
        return;
    }

    if (v8Value->IsObject()) {
        AddEventListenerOptions cppValue;
        V8AddEventListenerOptions::toImpl(isolate, v8Value, cppValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setAddEventListenerOptions(cppValue);
        return;
    }

    if (v8Value->IsBoolean()) {
        impl.setBoolean(v8Value.As<v8::Boolean>()->Value());
        return;
    }

    {
        impl.setBoolean(v8Value->BooleanValue());
        return;
    }
}

v8::Local<v8::Value> ToV8(const AddEventListenerOptionsOrBoolean& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case AddEventListenerOptionsOrBoolean::SpecificTypeNone:
        return v8::Null(isolate);
    case AddEventListenerOptionsOrBoolean::SpecificTypeAddEventListenerOptions:
        return ToV8(impl.getAsAddEventListenerOptions(), creationContext, isolate);
    case AddEventListenerOptionsOrBoolean::SpecificTypeBoolean:
        return v8Boolean(impl.getAsBoolean(), isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

AddEventListenerOptionsOrBoolean NativeValueTraits<AddEventListenerOptionsOrBoolean>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    AddEventListenerOptionsOrBoolean impl;
    V8AddEventListenerOptionsOrBoolean::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
