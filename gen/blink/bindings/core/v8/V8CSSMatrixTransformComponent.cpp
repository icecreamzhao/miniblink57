// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8CSSMatrixTransformComponent.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8CSSMatrixTransformComponent::wrapperTypeInfo = { gin::kEmbedderBlink, V8CSSMatrixTransformComponent::domTemplate, V8CSSMatrixTransformComponent::trace, V8CSSMatrixTransformComponent::traceWrappers, 0, nullptr, "CSSMatrixTransformComponent", &V8CSSTransformComponent::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CSSMatrixTransformComponent.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CSSMatrixTransformComponent::s_wrapperTypeInfo = V8CSSMatrixTransformComponent::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, CSSMatrixTransformComponent>::value,
    "CSSMatrixTransformComponent inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&CSSMatrixTransformComponent::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "CSSMatrixTransformComponent is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace CSSMatrixTransformComponentV8Internal {

    static void aAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->a());
    }

    CORE_EXPORT void aAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::aAttributeGetter(info);
    }

    static void bAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->b());
    }

    CORE_EXPORT void bAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::bAttributeGetter(info);
    }

    static void cAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->c());
    }

    CORE_EXPORT void cAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::cAttributeGetter(info);
    }

    static void dAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->d());
    }

    CORE_EXPORT void dAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::dAttributeGetter(info);
    }

    static void eAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->e());
    }

    CORE_EXPORT void eAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::eAttributeGetter(info);
    }

    static void fAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->f());
    }

    CORE_EXPORT void fAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::fAttributeGetter(info);
    }

    static void m11AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m11());
    }

    CORE_EXPORT void m11AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m11AttributeGetter(info);
    }

    static void m12AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m12());
    }

    CORE_EXPORT void m12AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m12AttributeGetter(info);
    }

    static void m13AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m13());
    }

    CORE_EXPORT void m13AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m13AttributeGetter(info);
    }

    static void m14AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m14());
    }

    CORE_EXPORT void m14AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m14AttributeGetter(info);
    }

    static void m21AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m21());
    }

    CORE_EXPORT void m21AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m21AttributeGetter(info);
    }

    static void m22AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m22());
    }

    CORE_EXPORT void m22AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m22AttributeGetter(info);
    }

    static void m23AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m23());
    }

    CORE_EXPORT void m23AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m23AttributeGetter(info);
    }

    static void m24AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m24());
    }

    CORE_EXPORT void m24AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m24AttributeGetter(info);
    }

    static void m31AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m31());
    }

    CORE_EXPORT void m31AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m31AttributeGetter(info);
    }

    static void m32AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m32());
    }

    CORE_EXPORT void m32AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m32AttributeGetter(info);
    }

    static void m33AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m33());
    }

    CORE_EXPORT void m33AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m33AttributeGetter(info);
    }

    static void m34AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m34());
    }

    CORE_EXPORT void m34AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m34AttributeGetter(info);
    }

    static void m41AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m41());
    }

    CORE_EXPORT void m41AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m41AttributeGetter(info);
    }

    static void m42AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m42());
    }

    CORE_EXPORT void m42AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m42AttributeGetter(info);
    }

    static void m43AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m43());
    }

    CORE_EXPORT void m43AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m43AttributeGetter(info);
    }

    static void m44AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrixTransformComponent* impl = V8CSSMatrixTransformComponent::toImpl(holder);

        v8SetReturnValue(info, impl->m44());
    }

    CORE_EXPORT void m44AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixTransformComponentV8Internal::m44AttributeGetter(info);
    }

    static void constructor1(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "CSSMatrixTransformComponent");

        double a;
        double b;
        double c;
        double d;
        double e;
        double f;
        a = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        b = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        c = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        d = toRestrictedDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.hadException())
            return;

        e = toRestrictedDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.hadException())
            return;

        f = toRestrictedDouble(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.hadException())
            return;

        CSSMatrixTransformComponent* impl = CSSMatrixTransformComponent::create(a, b, c, d, e, f);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8CSSMatrixTransformComponent::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

    static void constructor2(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "CSSMatrixTransformComponent");

        double m11;
        double m12;
        double m13;
        double m14;
        double m21;
        double m22;
        double m23;
        double m24;
        double m31;
        double m32;
        double m33;
        double m34;
        double m41;
        double m42;
        double m43;
        double m44;
        m11 = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        m12 = toRestrictedDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        m13 = toRestrictedDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        m14 = toRestrictedDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.hadException())
            return;

        m21 = toRestrictedDouble(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.hadException())
            return;

        m22 = toRestrictedDouble(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.hadException())
            return;

        m23 = toRestrictedDouble(info.GetIsolate(), info[6], exceptionState);
        if (exceptionState.hadException())
            return;

        m24 = toRestrictedDouble(info.GetIsolate(), info[7], exceptionState);
        if (exceptionState.hadException())
            return;

        m31 = toRestrictedDouble(info.GetIsolate(), info[8], exceptionState);
        if (exceptionState.hadException())
            return;

        m32 = toRestrictedDouble(info.GetIsolate(), info[9], exceptionState);
        if (exceptionState.hadException())
            return;

        m33 = toRestrictedDouble(info.GetIsolate(), info[10], exceptionState);
        if (exceptionState.hadException())
            return;

        m34 = toRestrictedDouble(info.GetIsolate(), info[11], exceptionState);
        if (exceptionState.hadException())
            return;

        m41 = toRestrictedDouble(info.GetIsolate(), info[12], exceptionState);
        if (exceptionState.hadException())
            return;

        m42 = toRestrictedDouble(info.GetIsolate(), info[13], exceptionState);
        if (exceptionState.hadException())
            return;

        m43 = toRestrictedDouble(info.GetIsolate(), info[14], exceptionState);
        if (exceptionState.hadException())
            return;

        m44 = toRestrictedDouble(info.GetIsolate(), info[15], exceptionState);
        if (exceptionState.hadException())
            return;

        CSSMatrixTransformComponent* impl = CSSMatrixTransformComponent::create(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8CSSMatrixTransformComponent::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "CSSMatrixTransformComponent");
        switch (std::min(16, info.Length())) {
        case 6:
            if (true) {
                CSSMatrixTransformComponentV8Internal::constructor1(info);
                return;
            }
            break;
        case 16:
            if (true) {
                CSSMatrixTransformComponentV8Internal::constructor2(info);
                return;
            }
            break;
        default:
            if (info.Length() >= 6) {
                exceptionState.throwTypeError(ExceptionMessages::invalidArity("[6, 16]", info.Length()));
                return;
            }
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(6, info.Length()));
            return;
        }
        exceptionState.throwTypeError("No matching constructor signature.");
    }

} // namespace CSSMatrixTransformComponentV8Internal

const V8DOMConfiguration::AccessorConfiguration V8CSSMatrixTransformComponentAccessors[] = {
    { "a", CSSMatrixTransformComponentV8Internal::aAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "b", CSSMatrixTransformComponentV8Internal::bAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "c", CSSMatrixTransformComponentV8Internal::cAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "d", CSSMatrixTransformComponentV8Internal::dAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "e", CSSMatrixTransformComponentV8Internal::eAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "f", CSSMatrixTransformComponentV8Internal::fAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m11", CSSMatrixTransformComponentV8Internal::m11AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m12", CSSMatrixTransformComponentV8Internal::m12AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m13", CSSMatrixTransformComponentV8Internal::m13AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m14", CSSMatrixTransformComponentV8Internal::m14AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m21", CSSMatrixTransformComponentV8Internal::m21AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m22", CSSMatrixTransformComponentV8Internal::m22AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m23", CSSMatrixTransformComponentV8Internal::m23AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m24", CSSMatrixTransformComponentV8Internal::m24AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m31", CSSMatrixTransformComponentV8Internal::m31AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m32", CSSMatrixTransformComponentV8Internal::m32AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m33", CSSMatrixTransformComponentV8Internal::m33AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m34", CSSMatrixTransformComponentV8Internal::m34AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m41", CSSMatrixTransformComponentV8Internal::m41AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m42", CSSMatrixTransformComponentV8Internal::m42AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m43", CSSMatrixTransformComponentV8Internal::m43AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m44", CSSMatrixTransformComponentV8Internal::m44AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8CSSMatrixTransformComponent::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("CSSMatrixTransformComponent"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    CSSMatrixTransformComponentV8Internal::constructor(info);
}

static void installV8CSSMatrixTransformComponentTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8CSSMatrixTransformComponent::wrapperTypeInfo.interfaceName, V8CSSTransformComponent::domTemplate(isolate, world), V8CSSMatrixTransformComponent::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8CSSMatrixTransformComponent::constructorCallback);
    interfaceTemplate->SetLength(6);

    if (!RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        return;
    }

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8CSSMatrixTransformComponentAccessors, WTF_ARRAY_LENGTH(V8CSSMatrixTransformComponentAccessors));
}

v8::Local<v8::FunctionTemplate> V8CSSMatrixTransformComponent::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8CSSMatrixTransformComponentTemplate);
}

bool V8CSSMatrixTransformComponent::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8CSSMatrixTransformComponent::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSMatrixTransformComponent* V8CSSMatrixTransformComponent::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
