// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8MediaQueryList.h"

#include "bindings/core/v8/BindingSecurity.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8MediaQueryList::wrapperTypeInfo = { gin::kEmbedderBlink, V8MediaQueryList::domTemplate, V8MediaQueryList::trace, V8MediaQueryList::traceWrappers, 0, nullptr, "MediaQueryList", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in MediaQueryList.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& MediaQueryList::s_wrapperTypeInfo = V8MediaQueryList::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, MediaQueryList>::value,
    "MediaQueryList does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&MediaQueryList::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "MediaQueryList is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace MediaQueryListV8Internal {

    static void mediaAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MediaQueryList* impl = V8MediaQueryList::toImpl(holder);

        v8SetReturnValueString(info, impl->media(), info.GetIsolate());
    }

    CORE_EXPORT void mediaAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryListV8Internal::mediaAttributeGetter(info);
    }

    static void matchesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MediaQueryList* impl = V8MediaQueryList::toImpl(holder);

        v8SetReturnValueBool(info, impl->matches());
    }

    CORE_EXPORT void matchesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryListV8Internal::matchesAttributeGetter(info);
    }

    static void onchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MediaQueryList* impl = V8MediaQueryList::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onchange()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryListV8Internal::onchangeAttributeGetter(info);
    }

    static void onchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        MediaQueryList* impl = V8MediaQueryList::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onchange(), v8Value, V8MediaQueryList::eventListenerCacheIndex);

        impl->setOnchange(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        MediaQueryListV8Internal::onchangeAttributeSetter(v8Value, info);
    }

    static void addListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryList* impl = V8MediaQueryList::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("addListener", "MediaQueryList", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        EventListener* listener;
        listener = V8EventListenerHelper::getEventListener(ScriptState::current(info.GetIsolate()), info[0], false, ListenerFindOrCreate);

        impl->addDeprecatedListener(listener);
        V8MediaQueryList::addListenerMethodEpilogueCustom(info, impl);
    }

    CORE_EXPORT void addListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryListV8Internal::addListenerMethod(info);
    }

    static void removeListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryList* impl = V8MediaQueryList::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("removeListener", "MediaQueryList", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        EventListener* listener;
        listener = V8EventListenerHelper::getEventListener(ScriptState::current(info.GetIsolate()), info[0], false, ListenerFindOnly);

        impl->removeDeprecatedListener(listener);
        V8MediaQueryList::removeListenerMethodEpilogueCustom(info, impl);
    }

    CORE_EXPORT void removeListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MediaQueryListV8Internal::removeListenerMethod(info);
    }

} // namespace MediaQueryListV8Internal

const V8DOMConfiguration::AccessorConfiguration V8MediaQueryListAccessors[] = {
    { "media", MediaQueryListV8Internal::mediaAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "matches", MediaQueryListV8Internal::matchesAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onchange", MediaQueryListV8Internal::onchangeAttributeGetterCallback, MediaQueryListV8Internal::onchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8MediaQueryListMethods[] = {
    { "addListener", MediaQueryListV8Internal::addListenerMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "removeListener", MediaQueryListV8Internal::removeListenerMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8MediaQueryListTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8MediaQueryList::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8MediaQueryList::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8MediaQueryListAccessors, WTF_ARRAY_LENGTH(V8MediaQueryListAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8MediaQueryListMethods, WTF_ARRAY_LENGTH(V8MediaQueryListMethods));
}

v8::Local<v8::FunctionTemplate> V8MediaQueryList::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8MediaQueryListTemplate);
}

bool V8MediaQueryList::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8MediaQueryList::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MediaQueryList* V8MediaQueryList::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
