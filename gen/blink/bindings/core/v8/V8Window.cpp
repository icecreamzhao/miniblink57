// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8Window.h"

#include "bindings/core/v8/BindingSecurity.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8AnimationEffectReadOnly.h"
#include "bindings/core/v8/V8AnimationEffectTiming.h"
#include "bindings/core/v8/V8AnimationEffectTimingReadOnly.h"
#include "bindings/core/v8/V8AnimationEvent.h"
#include "bindings/core/v8/V8AnimationPlaybackEvent.h"
#include "bindings/core/v8/V8AnimationTimeline.h"
#include "bindings/core/v8/V8ApplicationCache.h"
#include "bindings/core/v8/V8ApplicationCacheErrorEvent.h"
#include "bindings/core/v8/V8Attr.h"
#include "bindings/core/v8/V8AudioTrack.h"
#include "bindings/core/v8/V8AudioTrackList.h"
#include "bindings/core/v8/V8BarProp.h"
#include "bindings/core/v8/V8BeforeUnloadEvent.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8CDATASection.h"
#include "bindings/core/v8/V8CSS.h"
#include "bindings/core/v8/V8CSSAngleValue.h"
#include "bindings/core/v8/V8CSSCalcLength.h"
#include "bindings/core/v8/V8CSSConditionRule.h"
#include "bindings/core/v8/V8CSSFontFaceRule.h"
#include "bindings/core/v8/V8CSSGroupingRule.h"
#include "bindings/core/v8/V8CSSImageValue.h"
#include "bindings/core/v8/V8CSSImportRule.h"
#include "bindings/core/v8/V8CSSKeyframeRule.h"
#include "bindings/core/v8/V8CSSKeyframesRule.h"
#include "bindings/core/v8/V8CSSKeywordValue.h"
#include "bindings/core/v8/V8CSSLengthValue.h"
#include "bindings/core/v8/V8CSSMatrixTransformComponent.h"
#include "bindings/core/v8/V8CSSMediaRule.h"
#include "bindings/core/v8/V8CSSNamespaceRule.h"
#include "bindings/core/v8/V8CSSNumberValue.h"
#include "bindings/core/v8/V8CSSPageRule.h"
#include "bindings/core/v8/V8CSSPerspective.h"
#include "bindings/core/v8/V8CSSPositionValue.h"
#include "bindings/core/v8/V8CSSResourceValue.h"
#include "bindings/core/v8/V8CSSRotation.h"
#include "bindings/core/v8/V8CSSRule.h"
#include "bindings/core/v8/V8CSSRuleList.h"
#include "bindings/core/v8/V8CSSScale.h"
#include "bindings/core/v8/V8CSSSimpleLength.h"
#include "bindings/core/v8/V8CSSSkew.h"
#include "bindings/core/v8/V8CSSStyleDeclaration.h"
#include "bindings/core/v8/V8CSSStyleRule.h"
#include "bindings/core/v8/V8CSSStyleSheet.h"
#include "bindings/core/v8/V8CSSStyleValue.h"
#include "bindings/core/v8/V8CSSSupportsRule.h"
#include "bindings/core/v8/V8CSSTransformComponent.h"
#include "bindings/core/v8/V8CSSTransformValue.h"
#include "bindings/core/v8/V8CSSTranslation.h"
#include "bindings/core/v8/V8CSSURLImageValue.h"
#include "bindings/core/v8/V8CSSUnparsedValue.h"
#include "bindings/core/v8/V8CSSVariableReferenceValue.h"
#include "bindings/core/v8/V8CSSViewportRule.h"
#include "bindings/core/v8/V8CharacterData.h"
#include "bindings/core/v8/V8ClientRect.h"
#include "bindings/core/v8/V8ClientRectList.h"
#include "bindings/core/v8/V8ClipboardEvent.h"
#include "bindings/core/v8/V8Comment.h"
#include "bindings/core/v8/V8CompositionEvent.h"
#include "bindings/core/v8/V8CompositorProxy.h"
#include "bindings/core/v8/V8CrossOriginSetterInfo.h"
#include "bindings/core/v8/V8CustomElementRegistry.h"
#include "bindings/core/v8/V8CustomEvent.h"
#include "bindings/core/v8/V8DOMActivityLogger.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMException.h"
#include "bindings/core/v8/V8DOMImplementation.h"
#include "bindings/core/v8/V8DOMMatrix.h"
#include "bindings/core/v8/V8DOMMatrixReadOnly.h"
#include "bindings/core/v8/V8DOMParser.h"
#include "bindings/core/v8/V8DOMPoint.h"
#include "bindings/core/v8/V8DOMPointReadOnly.h"
#include "bindings/core/v8/V8DOMQuad.h"
#include "bindings/core/v8/V8DOMRect.h"
#include "bindings/core/v8/V8DOMRectReadOnly.h"
#include "bindings/core/v8/V8DOMStringList.h"
#include "bindings/core/v8/V8DOMStringMap.h"
#include "bindings/core/v8/V8DOMTokenList.h"
#include "bindings/core/v8/V8DataTransfer.h"
#include "bindings/core/v8/V8DataTransferItem.h"
#include "bindings/core/v8/V8DataTransferItemList.h"
#include "bindings/core/v8/V8DataView.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8DocumentFragment.h"
#include "bindings/core/v8/V8DocumentTimeline.h"
#include "bindings/core/v8/V8DocumentType.h"
#include "bindings/core/v8/V8DragEvent.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8ErrorEvent.h"
#include "bindings/core/v8/V8ErrorHandler.h"
#include "bindings/core/v8/V8Event.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/core/v8/V8External.h"
#include "bindings/core/v8/V8File.h"
#include "bindings/core/v8/V8FileList.h"
#include "bindings/core/v8/V8FileReader.h"
#include "bindings/core/v8/V8Float32ImageData.h"
#include "bindings/core/v8/V8FocusEvent.h"
#include "bindings/core/v8/V8FontFace.h"
#include "bindings/core/v8/V8FontFaceSetLoadEvent.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8FrameRequestCallback.h"
#include "bindings/core/v8/V8HTMLAllCollection.h"
#include "bindings/core/v8/V8HTMLAnchorElement.h"
#include "bindings/core/v8/V8HTMLAreaElement.h"
#include "bindings/core/v8/V8HTMLAudioElement.h"
#include "bindings/core/v8/V8HTMLBRElement.h"
#include "bindings/core/v8/V8HTMLBaseElement.h"
#include "bindings/core/v8/V8HTMLBodyElement.h"
#include "bindings/core/v8/V8HTMLButtonElement.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8HTMLCollection.h"
#include "bindings/core/v8/V8HTMLContentElement.h"
#include "bindings/core/v8/V8HTMLDListElement.h"
#include "bindings/core/v8/V8HTMLDataListElement.h"
#include "bindings/core/v8/V8HTMLDetailsElement.h"
#include "bindings/core/v8/V8HTMLDialogElement.h"
#include "bindings/core/v8/V8HTMLDirectoryElement.h"
#include "bindings/core/v8/V8HTMLDivElement.h"
#include "bindings/core/v8/V8HTMLDocument.h"
#include "bindings/core/v8/V8HTMLElement.h"
#include "bindings/core/v8/V8HTMLEmbedElement.h"
#include "bindings/core/v8/V8HTMLFieldSetElement.h"
#include "bindings/core/v8/V8HTMLFontElement.h"
#include "bindings/core/v8/V8HTMLFormControlsCollection.h"
#include "bindings/core/v8/V8HTMLFormElement.h"
#include "bindings/core/v8/V8HTMLFrameElement.h"
#include "bindings/core/v8/V8HTMLFrameSetElement.h"
#include "bindings/core/v8/V8HTMLHRElement.h"
#include "bindings/core/v8/V8HTMLHeadElement.h"
#include "bindings/core/v8/V8HTMLHeadingElement.h"
#include "bindings/core/v8/V8HTMLHtmlElement.h"
#include "bindings/core/v8/V8HTMLIFrameElement.h"
#include "bindings/core/v8/V8HTMLImageElement.h"
#include "bindings/core/v8/V8HTMLInputElement.h"
#include "bindings/core/v8/V8HTMLLIElement.h"
#include "bindings/core/v8/V8HTMLLabelElement.h"
#include "bindings/core/v8/V8HTMLLegendElement.h"
#include "bindings/core/v8/V8HTMLLinkElement.h"
#include "bindings/core/v8/V8HTMLMapElement.h"
#include "bindings/core/v8/V8HTMLMarqueeElement.h"
#include "bindings/core/v8/V8HTMLMediaElement.h"
#include "bindings/core/v8/V8HTMLMenuElement.h"
#include "bindings/core/v8/V8HTMLMenuItemElement.h"
#include "bindings/core/v8/V8HTMLMetaElement.h"
#include "bindings/core/v8/V8HTMLMeterElement.h"
#include "bindings/core/v8/V8HTMLModElement.h"
#include "bindings/core/v8/V8HTMLOListElement.h"
#include "bindings/core/v8/V8HTMLObjectElement.h"
#include "bindings/core/v8/V8HTMLOptGroupElement.h"
#include "bindings/core/v8/V8HTMLOptionElement.h"
#include "bindings/core/v8/V8HTMLOptionsCollection.h"
#include "bindings/core/v8/V8HTMLOutputElement.h"
#include "bindings/core/v8/V8HTMLParagraphElement.h"
#include "bindings/core/v8/V8HTMLParamElement.h"
#include "bindings/core/v8/V8HTMLPictureElement.h"
#include "bindings/core/v8/V8HTMLPreElement.h"
#include "bindings/core/v8/V8HTMLProgressElement.h"
#include "bindings/core/v8/V8HTMLQuoteElement.h"
#include "bindings/core/v8/V8HTMLScriptElement.h"
#include "bindings/core/v8/V8HTMLSelectElement.h"
#include "bindings/core/v8/V8HTMLShadowElement.h"
#include "bindings/core/v8/V8HTMLSlotElement.h"
#include "bindings/core/v8/V8HTMLSourceElement.h"
#include "bindings/core/v8/V8HTMLSpanElement.h"
#include "bindings/core/v8/V8HTMLStyleElement.h"
#include "bindings/core/v8/V8HTMLTableCaptionElement.h"
#include "bindings/core/v8/V8HTMLTableCellElement.h"
#include "bindings/core/v8/V8HTMLTableColElement.h"
#include "bindings/core/v8/V8HTMLTableElement.h"
#include "bindings/core/v8/V8HTMLTableRowElement.h"
#include "bindings/core/v8/V8HTMLTableSectionElement.h"
#include "bindings/core/v8/V8HTMLTemplateElement.h"
#include "bindings/core/v8/V8HTMLTextAreaElement.h"
#include "bindings/core/v8/V8HTMLTitleElement.h"
#include "bindings/core/v8/V8HTMLTrackElement.h"
#include "bindings/core/v8/V8HTMLUListElement.h"
#include "bindings/core/v8/V8HTMLUnknownElement.h"
#include "bindings/core/v8/V8HTMLVideoElement.h"
#include "bindings/core/v8/V8HashChangeEvent.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8History.h"
#include "bindings/core/v8/V8IdleDeadline.h"
#include "bindings/core/v8/V8IdleRequestCallback.h"
#include "bindings/core/v8/V8IdleRequestOptions.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ImageBitmapOptions.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8InputDeviceCapabilities.h"
#include "bindings/core/v8/V8InputEvent.h"
#include "bindings/core/v8/V8IntersectionObserver.h"
#include "bindings/core/v8/V8IntersectionObserverEntry.h"
#include "bindings/core/v8/V8KeyboardEvent.h"
#include "bindings/core/v8/V8KeyframeEffect.h"
#include "bindings/core/v8/V8KeyframeEffectReadOnly.h"
#include "bindings/core/v8/V8Location.h"
#include "bindings/core/v8/V8MediaError.h"
#include "bindings/core/v8/V8MediaList.h"
#include "bindings/core/v8/V8MediaQueryList.h"
#include "bindings/core/v8/V8MediaQueryListEvent.h"
#include "bindings/core/v8/V8MessageChannel.h"
#include "bindings/core/v8/V8MessageEvent.h"
#include "bindings/core/v8/V8MessagePort.h"
#include "bindings/core/v8/V8MouseEvent.h"
#include "bindings/core/v8/V8MutationEvent.h"
#include "bindings/core/v8/V8MutationObserver.h"
#include "bindings/core/v8/V8MutationRecord.h"
#include "bindings/core/v8/V8NamedNodeMap.h"
#include "bindings/core/v8/V8Navigator.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8NodeFilter.h"
#include "bindings/core/v8/V8NodeIterator.h"
#include "bindings/core/v8/V8NodeList.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8OffscreenCanvas.h"
#include "bindings/core/v8/V8PageTransitionEvent.h"
#include "bindings/core/v8/V8Performance.h"
#include "bindings/core/v8/V8PerformanceEntry.h"
#include "bindings/core/v8/V8PerformanceLongTaskTiming.h"
#include "bindings/core/v8/V8PerformanceMark.h"
#include "bindings/core/v8/V8PerformanceMeasure.h"
#include "bindings/core/v8/V8PerformanceNavigation.h"
#include "bindings/core/v8/V8PerformanceNavigationTiming.h"
#include "bindings/core/v8/V8PerformanceObserver.h"
#include "bindings/core/v8/V8PerformanceObserverEntryList.h"
#include "bindings/core/v8/V8PerformancePaintTiming.h"
#include "bindings/core/v8/V8PerformanceResourceTiming.h"
#include "bindings/core/v8/V8PerformanceTiming.h"
#include "bindings/core/v8/V8PointerEvent.h"
#include "bindings/core/v8/V8PopStateEvent.h"
#include "bindings/core/v8/V8PrivateProperty.h"
#include "bindings/core/v8/V8ProcessingInstruction.h"
#include "bindings/core/v8/V8ProgressEvent.h"
#include "bindings/core/v8/V8PromiseRejectionEvent.h"
#include "bindings/core/v8/V8RadioNodeList.h"
#include "bindings/core/v8/V8Range.h"
#include "bindings/core/v8/V8RelatedEvent.h"
#include "bindings/core/v8/V8ResizeObserver.h"
#include "bindings/core/v8/V8ResizeObserverEntry.h"
#include "bindings/core/v8/V8SVGAElement.h"
#include "bindings/core/v8/V8SVGAngle.h"
#include "bindings/core/v8/V8SVGAnimateElement.h"
#include "bindings/core/v8/V8SVGAnimateMotionElement.h"
#include "bindings/core/v8/V8SVGAnimateTransformElement.h"
#include "bindings/core/v8/V8SVGAnimatedAngle.h"
#include "bindings/core/v8/V8SVGAnimatedBoolean.h"
#include "bindings/core/v8/V8SVGAnimatedEnumeration.h"
#include "bindings/core/v8/V8SVGAnimatedInteger.h"
#include "bindings/core/v8/V8SVGAnimatedLength.h"
#include "bindings/core/v8/V8SVGAnimatedLengthList.h"
#include "bindings/core/v8/V8SVGAnimatedNumber.h"
#include "bindings/core/v8/V8SVGAnimatedNumberList.h"
#include "bindings/core/v8/V8SVGAnimatedPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGAnimatedRect.h"
#include "bindings/core/v8/V8SVGAnimatedString.h"
#include "bindings/core/v8/V8SVGAnimatedTransformList.h"
#include "bindings/core/v8/V8SVGAnimationElement.h"
#include "bindings/core/v8/V8SVGCircleElement.h"
#include "bindings/core/v8/V8SVGClipPathElement.h"
#include "bindings/core/v8/V8SVGComponentTransferFunctionElement.h"
#include "bindings/core/v8/V8SVGDefsElement.h"
#include "bindings/core/v8/V8SVGDescElement.h"
#include "bindings/core/v8/V8SVGDiscardElement.h"
#include "bindings/core/v8/V8SVGElement.h"
#include "bindings/core/v8/V8SVGEllipseElement.h"
#include "bindings/core/v8/V8SVGFEBlendElement.h"
#include "bindings/core/v8/V8SVGFEColorMatrixElement.h"
#include "bindings/core/v8/V8SVGFEComponentTransferElement.h"
#include "bindings/core/v8/V8SVGFECompositeElement.h"
#include "bindings/core/v8/V8SVGFEConvolveMatrixElement.h"
#include "bindings/core/v8/V8SVGFEDiffuseLightingElement.h"
#include "bindings/core/v8/V8SVGFEDisplacementMapElement.h"
#include "bindings/core/v8/V8SVGFEDistantLightElement.h"
#include "bindings/core/v8/V8SVGFEDropShadowElement.h"
#include "bindings/core/v8/V8SVGFEFloodElement.h"
#include "bindings/core/v8/V8SVGFEFuncAElement.h"
#include "bindings/core/v8/V8SVGFEFuncBElement.h"
#include "bindings/core/v8/V8SVGFEFuncGElement.h"
#include "bindings/core/v8/V8SVGFEFuncRElement.h"
#include "bindings/core/v8/V8SVGFEGaussianBlurElement.h"
#include "bindings/core/v8/V8SVGFEImageElement.h"
#include "bindings/core/v8/V8SVGFEMergeElement.h"
#include "bindings/core/v8/V8SVGFEMergeNodeElement.h"
#include "bindings/core/v8/V8SVGFEMorphologyElement.h"
#include "bindings/core/v8/V8SVGFEOffsetElement.h"
#include "bindings/core/v8/V8SVGFEPointLightElement.h"
#include "bindings/core/v8/V8SVGFESpecularLightingElement.h"
#include "bindings/core/v8/V8SVGFESpotLightElement.h"
#include "bindings/core/v8/V8SVGFETileElement.h"
#include "bindings/core/v8/V8SVGFETurbulenceElement.h"
#include "bindings/core/v8/V8SVGFilterElement.h"
#include "bindings/core/v8/V8SVGForeignObjectElement.h"
#include "bindings/core/v8/V8SVGGElement.h"
#include "bindings/core/v8/V8SVGGeometryElement.h"
#include "bindings/core/v8/V8SVGGradientElement.h"
#include "bindings/core/v8/V8SVGGraphicsElement.h"
#include "bindings/core/v8/V8SVGImageElement.h"
#include "bindings/core/v8/V8SVGLength.h"
#include "bindings/core/v8/V8SVGLengthList.h"
#include "bindings/core/v8/V8SVGLineElement.h"
#include "bindings/core/v8/V8SVGLinearGradientElement.h"
#include "bindings/core/v8/V8SVGMPathElement.h"
#include "bindings/core/v8/V8SVGMarkerElement.h"
#include "bindings/core/v8/V8SVGMaskElement.h"
#include "bindings/core/v8/V8SVGMatrix.h"
#include "bindings/core/v8/V8SVGMetadataElement.h"
#include "bindings/core/v8/V8SVGNumber.h"
#include "bindings/core/v8/V8SVGNumberList.h"
#include "bindings/core/v8/V8SVGPathElement.h"
#include "bindings/core/v8/V8SVGPatternElement.h"
#include "bindings/core/v8/V8SVGPoint.h"
#include "bindings/core/v8/V8SVGPointList.h"
#include "bindings/core/v8/V8SVGPolygonElement.h"
#include "bindings/core/v8/V8SVGPolylineElement.h"
#include "bindings/core/v8/V8SVGPreserveAspectRatio.h"
#include "bindings/core/v8/V8SVGRadialGradientElement.h"
#include "bindings/core/v8/V8SVGRect.h"
#include "bindings/core/v8/V8SVGRectElement.h"
#include "bindings/core/v8/V8SVGSVGElement.h"
#include "bindings/core/v8/V8SVGScriptElement.h"
#include "bindings/core/v8/V8SVGSetElement.h"
#include "bindings/core/v8/V8SVGStopElement.h"
#include "bindings/core/v8/V8SVGStringList.h"
#include "bindings/core/v8/V8SVGStyleElement.h"
#include "bindings/core/v8/V8SVGSwitchElement.h"
#include "bindings/core/v8/V8SVGSymbolElement.h"
#include "bindings/core/v8/V8SVGTSpanElement.h"
#include "bindings/core/v8/V8SVGTextContentElement.h"
#include "bindings/core/v8/V8SVGTextElement.h"
#include "bindings/core/v8/V8SVGTextPathElement.h"
#include "bindings/core/v8/V8SVGTextPositioningElement.h"
#include "bindings/core/v8/V8SVGTitleElement.h"
#include "bindings/core/v8/V8SVGTransform.h"
#include "bindings/core/v8/V8SVGTransformList.h"
#include "bindings/core/v8/V8SVGUnitTypes.h"
#include "bindings/core/v8/V8SVGUseElement.h"
#include "bindings/core/v8/V8SVGViewElement.h"
#include "bindings/core/v8/V8Screen.h"
#include "bindings/core/v8/V8ScrollState.h"
#include "bindings/core/v8/V8ScrollToOptions.h"
#include "bindings/core/v8/V8SecurityPolicyViolationEvent.h"
#include "bindings/core/v8/V8Selection.h"
#include "bindings/core/v8/V8ShadowRoot.h"
#include "bindings/core/v8/V8SharedWorker.h"
#include "bindings/core/v8/V8StaticRange.h"
#include "bindings/core/v8/V8StyleMedia.h"
#include "bindings/core/v8/V8StylePropertyMap.h"
#include "bindings/core/v8/V8StyleSheet.h"
#include "bindings/core/v8/V8StyleSheetList.h"
#include "bindings/core/v8/V8TaskAttributionTiming.h"
#include "bindings/core/v8/V8Text.h"
#include "bindings/core/v8/V8TextEvent.h"
#include "bindings/core/v8/V8TextMetrics.h"
#include "bindings/core/v8/V8TextTrack.h"
#include "bindings/core/v8/V8TextTrackCue.h"
#include "bindings/core/v8/V8TextTrackCueList.h"
#include "bindings/core/v8/V8TextTrackList.h"
#include "bindings/core/v8/V8TimeRanges.h"
#include "bindings/core/v8/V8Touch.h"
#include "bindings/core/v8/V8TouchEvent.h"
#include "bindings/core/v8/V8TouchList.h"
#include "bindings/core/v8/V8TrackEvent.h"
#include "bindings/core/v8/V8TransitionEvent.h"
#include "bindings/core/v8/V8TreeWalker.h"
#include "bindings/core/v8/V8UIEvent.h"
#include "bindings/core/v8/V8URL.h"
#include "bindings/core/v8/V8URLSearchParams.h"
#include "bindings/core/v8/V8VTTCue.h"
#include "bindings/core/v8/V8VTTRegion.h"
#include "bindings/core/v8/V8VTTRegionList.h"
#include "bindings/core/v8/V8ValidityState.h"
#include "bindings/core/v8/V8VideoTrack.h"
#include "bindings/core/v8/V8VideoTrackList.h"
#include "bindings/core/v8/V8VisualViewport.h"
#include "bindings/core/v8/V8WebKitCSSMatrix.h"
#include "bindings/core/v8/V8WheelEvent.h"
#include "bindings/core/v8/V8Window.h"
#include "bindings/core/v8/V8Worker.h"
// #include "bindings/core/v8/V8Worklet.h"
#include "bindings/core/v8/V8XMLDocument.h"
#include "bindings/core/v8/V8XMLHttpRequest.h"
#include "bindings/core/v8/V8XMLHttpRequestEventTarget.h"
#include "bindings/core/v8/V8XMLHttpRequestUpload.h"
#include "bindings/core/v8/V8XMLSerializer.h"
// #include "bindings/core/v8/V8XPathEvaluator.h"
// #include "bindings/core/v8/V8XPathExpression.h"
// #include "bindings/core/v8/V8XPathResult.h"
// #include "bindings/core/v8/V8XSLTProcessor.h"
#include "bindings/core/v8/V8ConsoleBase.h"
#include "core/WindowCoreConstructors.h"
#include "core/css/cssom/WindowGetComputedStyle.h"
#include "core/dom/Document.h"
#include "core/dom/GlobalEventHandlers.h"
#include "core/frame/DOMWindowEventHandlers.h"
#include "core/frame/DOMWindowTimers.h"
#include "core/frame/Deprecation.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "core/imagebitmap/ImageBitmapFactories.h"
#include "core/origin_trials/OriginTrials.h"
#include "core/timing/DOMWindowPerformance.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
WrapperTypeInfo V8Window::wrapperTypeInfo = { gin::kEmbedderBlink, V8Window::domTemplate, V8Window::trace, V8Window::traceWrappers, 0, nullptr, "Window", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DOMWindow.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DOMWindow::s_wrapperTypeInfo = V8Window::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, DOMWindow>::value,
    "DOMWindow inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&DOMWindow::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "DOMWindow is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace DOMWindowV8Internal {

    static void windowAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->window()), impl);
    }

    CORE_EXPORT void windowAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::windowAttributeGetter(info);
    }

    static void selfAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->self()), impl);
    }

    CORE_EXPORT void selfAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::selfAttributeGetter(info);
    }

    CORE_EXPORT v8::Local<v8::Private> documentCachedAccessorCallback(v8::Isolate* isolate)
    {
        return V8PrivateProperty::getWindowDocumentCachedAccessor(isolate).getPrivate();
    }

    static void documentAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->document()), impl);
    }

    CORE_EXPORT void documentAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::documentAttributeGetter(info);
    }

    static void nameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueString(info, impl->name(), info.GetIsolate());
    }

    CORE_EXPORT void nameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::nameAttributeGetter(info);
    }

    static void nameAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setName(cppValue);
    }

    CORE_EXPORT void nameAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::nameAttributeSetter(v8Value, info);
    }

    static void locationAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        Location* cppValue(WTF::getPtr(impl->location()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#location";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void locationAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::locationAttributeGetter(info);
    }

    static void locationAttributeSetter(v8::Local<v8::Value> v8Value, const V8CrossOriginSetterInfo& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* proxyImpl = V8Window::toImpl(holder);
        Location* impl = WTF::getPtr(proxyImpl->location());
        if (!impl)
            return;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "Window", "location");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setHref(currentDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue, exceptionState);
    }

    CORE_EXPORT void locationAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
    {
        DOMWindowV8Internal::locationAttributeSetter(v8Value, V8CrossOriginSetterInfo(info.GetIsolate(), info.Holder()));
    }

    static void historyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        History* cppValue(WTF::getPtr(impl->history()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#history";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void historyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::historyAttributeGetter(info);
    }

    static void locationbarAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        BarProp* cppValue(WTF::getPtr(impl->locationbar()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#locationbar";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void locationbarAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropLocationbar);

        DOMWindowV8Internal::locationbarAttributeGetter(info);
    }

    static void locationbarAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "locationbar");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void locationbarAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropLocationbar);

        DOMWindowV8Internal::locationbarAttributeSetter(v8Value, info);
    }

    static void menubarAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        BarProp* cppValue(WTF::getPtr(impl->menubar()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#menubar";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void menubarAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropMenubar);

        DOMWindowV8Internal::menubarAttributeGetter(info);
    }

    static void menubarAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "menubar");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void menubarAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropMenubar);

        DOMWindowV8Internal::menubarAttributeSetter(v8Value, info);
    }

    static void personalbarAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        BarProp* cppValue(WTF::getPtr(impl->personalbar()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#personalbar";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void personalbarAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropPersonalbar);

        DOMWindowV8Internal::personalbarAttributeGetter(info);
    }

    static void personalbarAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "personalbar");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void personalbarAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropPersonalbar);

        DOMWindowV8Internal::personalbarAttributeSetter(v8Value, info);
    }

    static void scrollbarsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        BarProp* cppValue(WTF::getPtr(impl->scrollbars()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#scrollbars";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void scrollbarsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropScrollbars);

        DOMWindowV8Internal::scrollbarsAttributeGetter(info);
    }

    static void scrollbarsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "scrollbars");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void scrollbarsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropScrollbars);

        DOMWindowV8Internal::scrollbarsAttributeSetter(v8Value, info);
    }

    static void statusbarAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        BarProp* cppValue(WTF::getPtr(impl->statusbar()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#statusbar";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void statusbarAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropStatusbar);

        DOMWindowV8Internal::statusbarAttributeGetter(info);
    }

    static void statusbarAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "statusbar");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void statusbarAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropStatusbar);

        DOMWindowV8Internal::statusbarAttributeSetter(v8Value, info);
    }

    static void toolbarAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        BarProp* cppValue(WTF::getPtr(impl->toolbar()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#toolbar";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void toolbarAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropToolbar);

        DOMWindowV8Internal::toolbarAttributeGetter(info);
    }

    static void toolbarAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "toolbar");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void toolbarAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BarPropToolbar);

        DOMWindowV8Internal::toolbarAttributeSetter(v8Value, info);
    }

    static void statusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueString(info, impl->status(), info.GetIsolate());
    }

    CORE_EXPORT void statusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::statusAttributeGetter(info);
    }

    static void statusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setStatus(cppValue);
    }

    CORE_EXPORT void statusAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::statusAttributeSetter(v8Value, info);
    }

    static void closedAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueBool(info, impl->closed());
    }

    CORE_EXPORT void closedAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::closedAttributeGetter(info);
    }

    static void framesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->frames()), impl);
    }

    CORE_EXPORT void framesAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::framesAttributeGetter(info);
    }

    static void lengthAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->length());
    }

    CORE_EXPORT void lengthAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::lengthAttributeGetter(info);
    }

    static void topAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->top()), impl);
    }

    CORE_EXPORT void topAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::topAttributeGetter(info);
    }

    static void openerAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->opener()), impl);
    }

    CORE_EXPORT void openerAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::openerAttributeGetter(info);
    }

    CORE_EXPORT void openerAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
    {
        V8Window::openerAttributeSetterCustom(v8Value, info);
    }

    static void parentAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->parent()), impl);
    }

    CORE_EXPORT void parentAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::parentAttributeGetter(info);
    }

    CORE_EXPORT void frameElementAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        V8Window::frameElementAttributeGetterCustom(info);
    }

    static void navigatorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        Navigator* cppValue(WTF::getPtr(impl->navigator()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#navigator";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void navigatorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ScriptState* scriptState = ScriptState::forReceiverObject(info);
        V8PerContextData* contextData = scriptState->perContextData();
        if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
            contextData->activityLogger()->logGetter("Window.navigator");
        }

        DOMWindowV8Internal::navigatorAttributeGetter(info);
    }

    static void applicationCacheAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        ApplicationCache* cppValue(WTF::getPtr(impl->applicationCache()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#applicationCache";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void applicationCacheAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ScriptState* scriptState = ScriptState::forReceiverObject(info);
        V8PerContextData* contextData = scriptState->perContextData();
        if (scriptState->world().isIsolatedWorld() && contextData && contextData->activityLogger()) {
            contextData->activityLogger()->logGetter("Window.applicationCache");
        }

        DOMWindowV8Internal::applicationCacheAttributeGetter(info);
    }

    static void customElementsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        CustomElementRegistry* cppValue(impl->customElements(scriptState));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#customElements";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void customElementsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::customElementsAttributeGetter(info);
    }

    static void externalAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        External* cppValue(WTF::getPtr(impl->external()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#external";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void externalAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::externalAttributeGetter(info);
    }

    static void externalAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "external");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void externalAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::externalAttributeSetter(v8Value, info);
    }

    static void screenAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        Screen* cppValue(WTF::getPtr(impl->screen()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#screen";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void screenAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::screenAttributeGetter(info);
    }

    static void screenAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "screen");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void screenAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::screenAttributeSetter(v8Value, info);
    }

    static void innerWidthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->innerWidth());
    }

    CORE_EXPORT void innerWidthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::innerWidthAttributeGetter(info);
    }

    static void innerWidthAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "innerWidth");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void innerWidthAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::innerWidthAttributeSetter(v8Value, info);
    }

    static void innerHeightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->innerHeight());
    }

    CORE_EXPORT void innerHeightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::innerHeightAttributeGetter(info);
    }

    static void innerHeightAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "innerHeight");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void innerHeightAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::innerHeightAttributeSetter(v8Value, info);
    }

    static void scrollXAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValue(info, impl->scrollX());
    }

    CORE_EXPORT void scrollXAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::scrollXAttributeGetter(info);
    }

    static void scrollXAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "scrollX");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void scrollXAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::scrollXAttributeSetter(v8Value, info);
    }

    static void pageXOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValue(info, impl->pageXOffset());
    }

    CORE_EXPORT void pageXOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::pageXOffsetAttributeGetter(info);
    }

    static void pageXOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "pageXOffset");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void pageXOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::pageXOffsetAttributeSetter(v8Value, info);
    }

    static void scrollYAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValue(info, impl->scrollY());
    }

    CORE_EXPORT void scrollYAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::scrollYAttributeGetter(info);
    }

    static void scrollYAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "scrollY");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void scrollYAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::scrollYAttributeSetter(v8Value, info);
    }

    static void pageYOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValue(info, impl->pageYOffset());
    }

    CORE_EXPORT void pageYOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::pageYOffsetAttributeGetter(info);
    }

    static void pageYOffsetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "pageYOffset");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void pageYOffsetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::pageYOffsetAttributeSetter(v8Value, info);
    }

    static void visualViewportAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        DOMVisualViewport* cppValue(WTF::getPtr(impl->visualViewport()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#visualViewport";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void visualViewportAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::visualViewportAttributeGetter(info);
    }

    static void visualViewportAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "visualViewport");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void visualViewportAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::visualViewportAttributeSetter(v8Value, info);
    }

    static void screenXAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->screenX());
    }

    CORE_EXPORT void screenXAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::screenXAttributeGetter(info);
    }

    static void screenXAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "screenX");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void screenXAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::screenXAttributeSetter(v8Value, info);
    }

    static void screenYAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->screenY());
    }

    CORE_EXPORT void screenYAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::screenYAttributeGetter(info);
    }

    static void screenYAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "screenY");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void screenYAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::screenYAttributeSetter(v8Value, info);
    }

    static void outerWidthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->outerWidth());
    }

    CORE_EXPORT void outerWidthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::outerWidthAttributeGetter(info);
    }

    static void outerWidthAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "outerWidth");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void outerWidthAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::outerWidthAttributeSetter(v8Value, info);
    }

    static void outerHeightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->outerHeight());
    }

    CORE_EXPORT void outerHeightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::outerHeightAttributeGetter(info);
    }

    static void outerHeightAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "outerHeight");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void outerHeightAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::outerHeightAttributeSetter(v8Value, info);
    }

    static void devicePixelRatioAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValue(info, impl->devicePixelRatio());
    }

    CORE_EXPORT void devicePixelRatioAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::devicePixelRatioAttributeGetter(info);
    }

    static void devicePixelRatioAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "devicePixelRatio");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void devicePixelRatioAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::devicePixelRatioAttributeSetter(v8Value, info);
    }

    static void clientInformationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        Navigator* cppValue(WTF::getPtr(impl->clientInformation()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#clientInformation";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void clientInformationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowClientInformation);

        DOMWindowV8Internal::clientInformationAttributeGetter(info);
    }

    static void clientInformationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "clientInformation");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void clientInformationAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowClientInformation);

        DOMWindowV8Internal::clientInformationAttributeSetter(v8Value, info);
    }

    CORE_EXPORT void eventAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowEvent);

        V8Window::eventAttributeGetterCustom(info);
    }

    CORE_EXPORT void eventAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowEvent);

        V8Window::eventAttributeSetterCustom(v8Value, info);
    }

    static void offscreenBufferingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueBool(info, impl->offscreenBuffering());
    }

    CORE_EXPORT void offscreenBufferingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowOffscreenBuffering);

        DOMWindowV8Internal::offscreenBufferingAttributeGetter(info);
    }

    static void offscreenBufferingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "offscreenBuffering");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void offscreenBufferingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowOffscreenBuffering);

        DOMWindowV8Internal::offscreenBufferingAttributeSetter(v8Value, info);
    }

    static void screenLeftAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->screenLeft());
    }

    CORE_EXPORT void screenLeftAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowScreenLeft);

        DOMWindowV8Internal::screenLeftAttributeGetter(info);
    }

    static void screenLeftAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "screenLeft");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void screenLeftAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowScreenLeft);

        DOMWindowV8Internal::screenLeftAttributeSetter(v8Value, info);
    }

    static void screenTopAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->screenTop());
    }

    CORE_EXPORT void screenTopAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowScreenTop);

        DOMWindowV8Internal::screenTopAttributeGetter(info);
    }

    static void screenTopAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "screenTop");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void screenTopAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowScreenTop);

        DOMWindowV8Internal::screenTopAttributeSetter(v8Value, info);
    }

    static void defaultStatusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueString(info, impl->defaultStatus(), info.GetIsolate());
    }

    CORE_EXPORT void defaultStatusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultStatus);

        DOMWindowV8Internal::defaultStatusAttributeGetter(info);
    }

    static void defaultStatusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setDefaultStatus(cppValue);
    }

    CORE_EXPORT void defaultStatusAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultStatus);

        DOMWindowV8Internal::defaultStatusAttributeSetter(v8Value, info);
    }

    static void defaultstatusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueString(info, impl->defaultStatus(), info.GetIsolate());
    }

    CORE_EXPORT void defaultstatusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultstatus);

        DOMWindowV8Internal::defaultstatusAttributeGetter(info);
    }

    static void defaultstatusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setDefaultStatus(cppValue);
    }

    CORE_EXPORT void defaultstatusAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowDefaultstatus);

        DOMWindowV8Internal::defaultstatusAttributeSetter(v8Value, info);
    }

    static void styleMediaAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        StyleMedia* cppValue(WTF::getPtr(impl->styleMedia()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#styleMedia";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void styleMediaAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::StyleMedia);

        DOMWindowV8Internal::styleMediaAttributeGetter(info);
    }

    static void orientationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueInt(info, impl->orientation());
    }

    CORE_EXPORT void orientationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowOrientation);

        DOMWindowV8Internal::orientationAttributeGetter(info);
    }

    CORE_EXPORT void WebKitTransitionEventConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedTransitionEventConstructor);

        v8ConstructorAttributeGetter(property, info);
    }

    CORE_EXPORT void WebKitAnimationEventConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_WebKitAnimationEvent_ConstructorGetter);

        v8ConstructorAttributeGetter(property, info);
    }

    CORE_EXPORT void webkitURLConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedWindowURL);

        v8ConstructorAttributeGetter(property, info);
    }

    CORE_EXPORT void WebKitMutationObserverConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedMutationObserverConstructor);

        v8ConstructorAttributeGetter(property, info);
    }

    static void onanimationendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onanimationend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onanimationendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onanimationendAttributeGetter(info);
    }

    static void onanimationendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onanimationend(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnanimationend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onanimationendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onanimationendAttributeSetter(v8Value, info);
    }

    static void onanimationiterationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onanimationiteration()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onanimationiterationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onanimationiterationAttributeGetter(info);
    }

    static void onanimationiterationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onanimationiteration(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnanimationiteration(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onanimationiterationAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onanimationiterationAttributeSetter(v8Value, info);
    }

    static void onanimationstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onanimationstart()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onanimationstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onanimationstartAttributeGetter(info);
    }

    static void onanimationstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onanimationstart(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnanimationstart(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onanimationstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onanimationstartAttributeSetter(v8Value, info);
    }

    static void onorientationchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onorientationchange()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onorientationchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onorientationchangeAttributeGetter(info);
    }

    static void onorientationchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onorientationchange(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnorientationchange(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onorientationchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onorientationchangeAttributeSetter(v8Value, info);
    }

    static void onsearchAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onsearch()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onsearchAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onsearchAttributeGetter(info);
    }

    static void onsearchAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onsearch(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnsearch(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onsearchAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onsearchAttributeSetter(v8Value, info);
    }

    static void ontransitionendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->ontransitionend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontransitionendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontransitionendAttributeGetter(info);
    }

    static void ontransitionendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->ontransitionend(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOntransitionend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontransitionendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontransitionendAttributeSetter(v8Value, info);
    }

    static void onwebkitanimationendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onwebkitanimationend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwebkitanimationendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onwebkitanimationendAttributeGetter(info);
    }

    static void onwebkitanimationendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onwebkitanimationend(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnwebkitanimationend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwebkitanimationendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onwebkitanimationendAttributeSetter(v8Value, info);
    }

    static void onwebkitanimationiterationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onwebkitanimationiteration()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwebkitanimationiterationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onwebkitanimationiterationAttributeGetter(info);
    }

    static void onwebkitanimationiterationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onwebkitanimationiteration(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnwebkitanimationiteration(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwebkitanimationiterationAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onwebkitanimationiterationAttributeSetter(v8Value, info);
    }

    static void onwebkitanimationstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onwebkitanimationstart()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwebkitanimationstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onwebkitanimationstartAttributeGetter(info);
    }

    static void onwebkitanimationstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onwebkitanimationstart(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnwebkitanimationstart(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwebkitanimationstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onwebkitanimationstartAttributeSetter(v8Value, info);
    }

    static void onwebkittransitionendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onwebkittransitionend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwebkittransitionendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onwebkittransitionendAttributeGetter(info);
    }

    static void onwebkittransitionendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onwebkittransitionend(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnwebkittransitionend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwebkittransitionendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onwebkittransitionendAttributeSetter(v8Value, info);
    }

    static void onwheelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onwheel()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwheelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onwheelAttributeGetter(info);
    }

    static void onwheelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onwheel(), v8Value, V8Window::eventListenerCacheIndex);

        impl->setOnwheel(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwheelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onwheelAttributeSetter(v8Value, info);
    }

    static void isSecureContextAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        v8SetReturnValueBool(info, impl->isSecureContext());
    }

    CORE_EXPORT void isSecureContextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::isSecureContextAttributeGetter(info);
    }

    static void onabortAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onabort(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onabortAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onabortAttributeGetter(info);
    }

    static void onabortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onabort(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnabort(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onabortAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onabortAttributeSetter(v8Value, info);
    }

    static void onblurAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onblur(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onblurAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onblurAttributeGetter(info);
    }

    static void onblurAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onblur(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnblur(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onblurAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onblurAttributeSetter(v8Value, info);
    }

    static void oncancelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncancel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncancelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oncancelAttributeGetter(info);
    }

    static void oncancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oncancel(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOncancel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncancelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oncancelAttributeSetter(v8Value, info);
    }

    static void oncanplayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncanplay(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncanplayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oncanplayAttributeGetter(info);
    }

    static void oncanplayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oncanplay(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOncanplay(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncanplayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oncanplayAttributeSetter(v8Value, info);
    }

    static void oncanplaythroughAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncanplaythrough(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncanplaythroughAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oncanplaythroughAttributeGetter(info);
    }

    static void oncanplaythroughAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oncanplaythrough(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOncanplaythrough(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncanplaythroughAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oncanplaythroughAttributeSetter(v8Value, info);
    }

    static void onchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onchange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onchangeAttributeGetter(info);
    }

    static void onchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onchange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnchange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onchangeAttributeSetter(v8Value, info);
    }

    static void onclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onclickAttributeGetter(info);
    }

    static void onclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onclick(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onclickAttributeSetter(v8Value, info);
    }

    static void oncloseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onclose(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncloseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oncloseAttributeGetter(info);
    }

    static void oncloseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onclose(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnclose(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncloseAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oncloseAttributeSetter(v8Value, info);
    }

    static void oncontextmenuAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncontextmenu(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncontextmenuAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oncontextmenuAttributeGetter(info);
    }

    static void oncontextmenuAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oncontextmenu(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOncontextmenu(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncontextmenuAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oncontextmenuAttributeSetter(v8Value, info);
    }

    static void oncuechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncuechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncuechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oncuechangeAttributeGetter(info);
    }

    static void oncuechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oncuechange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOncuechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncuechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oncuechangeAttributeSetter(v8Value, info);
    }

    static void ondblclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondblclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondblclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondblclickAttributeGetter(info);
    }

    static void ondblclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondblclick(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndblclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondblclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondblclickAttributeSetter(v8Value, info);
    }

    static void ondragAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondrag(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondragAttributeGetter(info);
    }

    static void ondragAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondrag(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndrag(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondragAttributeSetter(v8Value, info);
    }

    static void ondragendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragend(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondragendAttributeGetter(info);
    }

    static void ondragendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondragend(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndragend(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondragendAttributeSetter(v8Value, info);
    }

    static void ondragenterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragenter(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragenterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondragenterAttributeGetter(info);
    }

    static void ondragenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondragenter(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndragenter(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragenterAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondragenterAttributeSetter(v8Value, info);
    }

    static void ondragleaveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragleave(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragleaveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondragleaveAttributeGetter(info);
    }

    static void ondragleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondragleave(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndragleave(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragleaveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondragleaveAttributeSetter(v8Value, info);
    }

    static void ondragoverAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragover(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragoverAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondragoverAttributeGetter(info);
    }

    static void ondragoverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondragover(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndragover(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragoverAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondragoverAttributeSetter(v8Value, info);
    }

    static void ondragstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragstart(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondragstartAttributeGetter(info);
    }

    static void ondragstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondragstart(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndragstart(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondragstartAttributeSetter(v8Value, info);
    }

    static void ondropAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondrop(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondropAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondropAttributeGetter(info);
    }

    static void ondropAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondrop(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndrop(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondropAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondropAttributeSetter(v8Value, info);
    }

    static void ondurationchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondurationchange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondurationchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ondurationchangeAttributeGetter(info);
    }

    static void ondurationchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ondurationchange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOndurationchange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondurationchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ondurationchangeAttributeSetter(v8Value, info);
    }

    static void onemptiedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onemptied(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onemptiedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onemptiedAttributeGetter(info);
    }

    static void onemptiedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onemptied(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnemptied(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onemptiedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onemptiedAttributeSetter(v8Value, info);
    }

    static void onendedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onended(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onendedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onendedAttributeGetter(info);
    }

    static void onendedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onended(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnended(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onendedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onendedAttributeSetter(v8Value, info);
    }

    static void onerrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onerror(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onerrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onerrorAttributeGetter(info);
    }

    static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onerror(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnerror(*impl, V8EventListenerHelper::ensureEventListener<V8ErrorHandler>(v8Value, true, ScriptState::forReceiverObject(info)));
    }

    CORE_EXPORT void onerrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onerrorAttributeSetter(v8Value, info);
    }

    static void onfocusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onfocus(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onfocusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onfocusAttributeGetter(info);
    }

    static void onfocusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onfocus(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnfocus(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onfocusAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onfocusAttributeSetter(v8Value, info);
    }

    static void oninputAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oninput(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oninputAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oninputAttributeGetter(info);
    }

    static void oninputAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oninput(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOninput(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oninputAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oninputAttributeSetter(v8Value, info);
    }

    static void oninvalidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oninvalid(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oninvalidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::oninvalidAttributeGetter(info);
    }

    static void oninvalidAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::oninvalid(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOninvalid(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oninvalidAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::oninvalidAttributeSetter(v8Value, info);
    }

    static void onkeydownAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onkeydown(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onkeydownAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onkeydownAttributeGetter(info);
    }

    static void onkeydownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onkeydown(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnkeydown(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onkeydownAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onkeydownAttributeSetter(v8Value, info);
    }

    static void onkeypressAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onkeypress(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onkeypressAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onkeypressAttributeGetter(info);
    }

    static void onkeypressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onkeypress(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnkeypress(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onkeypressAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onkeypressAttributeSetter(v8Value, info);
    }

    static void onkeyupAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onkeyup(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onkeyupAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onkeyupAttributeGetter(info);
    }

    static void onkeyupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onkeyup(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnkeyup(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onkeyupAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onkeyupAttributeSetter(v8Value, info);
    }

    static void onloadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onload(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onloadAttributeGetter(info);
    }

    static void onloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onload(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnload(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onloadAttributeSetter(v8Value, info);
    }

    static void onloadeddataAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onloadeddata(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadeddataAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onloadeddataAttributeGetter(info);
    }

    static void onloadeddataAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onloadeddata(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnloadeddata(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadeddataAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onloadeddataAttributeSetter(v8Value, info);
    }

    static void onloadedmetadataAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onloadedmetadata(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadedmetadataAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onloadedmetadataAttributeGetter(info);
    }

    static void onloadedmetadataAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onloadedmetadata(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnloadedmetadata(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadedmetadataAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onloadedmetadataAttributeSetter(v8Value, info);
    }

    static void onloadstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onloadstart(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onloadstartAttributeGetter(info);
    }

    static void onloadstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onloadstart(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnloadstart(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onloadstartAttributeSetter(v8Value, info);
    }

    static void onmousedownAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmousedown(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmousedownAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmousedownAttributeGetter(info);
    }

    static void onmousedownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmousedown(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmousedown(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmousedownAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmousedownAttributeSetter(v8Value, info);
    }

    static void onmouseenterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8Window::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseenter(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseenterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmouseenterAttributeGetter(info);
    }

    static void onmouseenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8Window::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmouseenter(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmouseenter(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseenterAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmouseenterAttributeSetter(v8Value, info);
    }

    static void onmouseleaveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8Window::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseleave(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseleaveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmouseleaveAttributeGetter(info);
    }

    static void onmouseleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8Window::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmouseleave(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmouseleave(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseleaveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmouseleaveAttributeSetter(v8Value, info);
    }

    static void onmousemoveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmousemove(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmousemoveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmousemoveAttributeGetter(info);
    }

    static void onmousemoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmousemove(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmousemove(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmousemoveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmousemoveAttributeSetter(v8Value, info);
    }

    static void onmouseoutAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseout(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseoutAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmouseoutAttributeGetter(info);
    }

    static void onmouseoutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmouseout(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmouseout(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseoutAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmouseoutAttributeSetter(v8Value, info);
    }

    static void onmouseoverAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseover(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseoverAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmouseoverAttributeGetter(info);
    }

    static void onmouseoverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmouseover(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmouseover(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseoverAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmouseoverAttributeSetter(v8Value, info);
    }

    static void onmouseupAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseup(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseupAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmouseupAttributeGetter(info);
    }

    static void onmouseupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmouseup(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmouseup(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseupAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmouseupAttributeSetter(v8Value, info);
    }

    static void onmousewheelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmousewheel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmousewheelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmousewheelAttributeGetter(info);
    }

    static void onmousewheelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onmousewheel(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnmousewheel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmousewheelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmousewheelAttributeSetter(v8Value, info);
    }

    static void onpauseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpause(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpauseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpauseAttributeGetter(info);
    }

    static void onpauseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpause(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpause(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpauseAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpauseAttributeSetter(v8Value, info);
    }

    static void onplayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onplay(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onplayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onplayAttributeGetter(info);
    }

    static void onplayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onplay(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnplay(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onplayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onplayAttributeSetter(v8Value, info);
    }

    static void onplayingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onplaying(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onplayingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onplayingAttributeGetter(info);
    }

    static void onplayingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onplaying(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnplaying(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onplayingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onplayingAttributeSetter(v8Value, info);
    }

    static void onprogressAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onprogress(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onprogressAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onprogressAttributeGetter(info);
    }

    static void onprogressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onprogress(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnprogress(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onprogressAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onprogressAttributeSetter(v8Value, info);
    }

    static void onratechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onratechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onratechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onratechangeAttributeGetter(info);
    }

    static void onratechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onratechange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnratechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onratechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onratechangeAttributeSetter(v8Value, info);
    }

    static void onresetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onreset(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onresetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onresetAttributeGetter(info);
    }

    static void onresetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onreset(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnreset(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onresetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onresetAttributeSetter(v8Value, info);
    }

    static void onresizeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onresize(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onresizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onresizeAttributeGetter(info);
    }

    static void onresizeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onresize(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnresize(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onresizeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onresizeAttributeSetter(v8Value, info);
    }

    static void onscrollAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onscroll(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onscrollAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onscrollAttributeGetter(info);
    }

    static void onscrollAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onscroll(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnscroll(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onscrollAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onscrollAttributeSetter(v8Value, info);
    }

    static void onseekedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onseeked(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onseekedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onseekedAttributeGetter(info);
    }

    static void onseekedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onseeked(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnseeked(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onseekedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onseekedAttributeSetter(v8Value, info);
    }

    static void onseekingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onseeking(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onseekingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onseekingAttributeGetter(info);
    }

    static void onseekingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onseeking(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnseeking(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onseekingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onseekingAttributeSetter(v8Value, info);
    }

    static void onselectAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onselect(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onselectAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onselectAttributeGetter(info);
    }

    static void onselectAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onselect(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnselect(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onselectAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onselectAttributeSetter(v8Value, info);
    }

    static void onshowAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onshow(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onshowAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onshowAttributeGetter(info);
    }

    static void onshowAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onshow(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnshow(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onshowAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onshowAttributeSetter(v8Value, info);
    }

    static void onstalledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onstalled(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onstalledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onstalledAttributeGetter(info);
    }

    static void onstalledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onstalled(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnstalled(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onstalledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onstalledAttributeSetter(v8Value, info);
    }

    static void onsubmitAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onsubmit(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onsubmitAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onsubmitAttributeGetter(info);
    }

    static void onsubmitAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onsubmit(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnsubmit(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onsubmitAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onsubmitAttributeSetter(v8Value, info);
    }

    static void onsuspendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onsuspend(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onsuspendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onsuspendAttributeGetter(info);
    }

    static void onsuspendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onsuspend(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnsuspend(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onsuspendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onsuspendAttributeSetter(v8Value, info);
    }

    static void ontimeupdateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontimeupdate(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontimeupdateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontimeupdateAttributeGetter(info);
    }

    static void ontimeupdateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ontimeupdate(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOntimeupdate(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontimeupdateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontimeupdateAttributeSetter(v8Value, info);
    }

    static void ontoggleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontoggle(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontoggleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontoggleAttributeGetter(info);
    }

    static void ontoggleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ontoggle(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOntoggle(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontoggleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontoggleAttributeSetter(v8Value, info);
    }

    static void onvolumechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onvolumechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onvolumechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onvolumechangeAttributeGetter(info);
    }

    static void onvolumechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onvolumechange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnvolumechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onvolumechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onvolumechangeAttributeSetter(v8Value, info);
    }

    static void onwaitingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onwaiting(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwaitingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onwaitingAttributeGetter(info);
    }

    static void onwaitingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onwaiting(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnwaiting(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwaitingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onwaitingAttributeSetter(v8Value, info);
    }

    static void onauxclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onauxclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onauxclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onauxclickAttributeGetter(info);
    }

    static void onauxclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onauxclick(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnauxclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onauxclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onauxclickAttributeSetter(v8Value, info);
    }

    static void ongotpointercaptureAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ongotpointercapture(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ongotpointercaptureAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ongotpointercaptureAttributeGetter(info);
    }

    static void ongotpointercaptureAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ongotpointercapture(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOngotpointercapture(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ongotpointercaptureAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ongotpointercaptureAttributeSetter(v8Value, info);
    }

    static void onlostpointercaptureAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onlostpointercapture(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onlostpointercaptureAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onlostpointercaptureAttributeGetter(info);
    }

    static void onlostpointercaptureAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onlostpointercapture(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnlostpointercapture(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onlostpointercaptureAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onlostpointercaptureAttributeSetter(v8Value, info);
    }

    static void onpointerdownAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerdown(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerdownAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointerdownAttributeGetter(info);
    }

    static void onpointerdownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointerdown(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointerdown(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerdownAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointerdownAttributeSetter(v8Value, info);
    }

    static void onpointermoveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointermove(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointermoveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointermoveAttributeGetter(info);
    }

    static void onpointermoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointermove(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointermove(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointermoveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointermoveAttributeSetter(v8Value, info);
    }

    static void onpointerupAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerup(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerupAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointerupAttributeGetter(info);
    }

    static void onpointerupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointerup(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointerup(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerupAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointerupAttributeSetter(v8Value, info);
    }

    static void onpointercancelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointercancel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointercancelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointercancelAttributeGetter(info);
    }

    static void onpointercancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointercancel(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointercancel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointercancelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointercancelAttributeSetter(v8Value, info);
    }

    static void onpointeroverAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerover(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointeroverAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointeroverAttributeGetter(info);
    }

    static void onpointeroverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointerover(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointerover(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointeroverAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointeroverAttributeSetter(v8Value, info);
    }

    static void onpointeroutAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerout(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointeroutAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointeroutAttributeGetter(info);
    }

    static void onpointeroutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointerout(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointerout(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointeroutAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointeroutAttributeSetter(v8Value, info);
    }

    static void onpointerenterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerenter(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerenterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointerenterAttributeGetter(info);
    }

    static void onpointerenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointerenter(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointerenter(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerenterAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointerenterAttributeSetter(v8Value, info);
    }

    static void onpointerleaveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerleave(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerleaveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpointerleaveAttributeGetter(info);
    }

    static void onpointerleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::onpointerleave(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOnpointerleave(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerleaveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpointerleaveAttributeSetter(v8Value, info);
    }

    static void ontouchcancelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchcancel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchcancelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontouchcancelAttributeGetter(info);
    }

    static void ontouchcancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ontouchcancel(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOntouchcancel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchcancelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontouchcancelAttributeSetter(v8Value, info);
    }

    static void ontouchendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchend(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontouchendAttributeGetter(info);
    }

    static void ontouchendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ontouchend(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOntouchend(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontouchendAttributeSetter(v8Value, info);
    }

    static void ontouchmoveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchmove(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchmoveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontouchmoveAttributeGetter(info);
    }

    static void ontouchmoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ontouchmove(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOntouchmove(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchmoveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontouchmoveAttributeSetter(v8Value, info);
    }

    static void ontouchstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchstart(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ontouchstartAttributeGetter(info);
    }

    static void ontouchstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, GlobalEventHandlers::ontouchstart(*impl), v8Value, V8Window::eventListenerCacheIndex);

        GlobalEventHandlers::setOntouchstart(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ontouchstartAttributeSetter(v8Value, info);
    }

    static void onbeforeunloadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onbeforeunload(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onbeforeunloadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onbeforeunloadAttributeGetter(info);
    }

    static void onbeforeunloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onbeforeunload(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnbeforeunload(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onbeforeunloadAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onbeforeunloadAttributeSetter(v8Value, info);
    }

    static void onhashchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onhashchange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onhashchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onhashchangeAttributeGetter(info);
    }

    static void onhashchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onhashchange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnhashchange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onhashchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onhashchangeAttributeSetter(v8Value, info);
    }

    static void onlanguagechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onlanguagechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onlanguagechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onlanguagechangeAttributeGetter(info);
    }

    static void onlanguagechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onlanguagechange(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnlanguagechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onlanguagechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onlanguagechangeAttributeSetter(v8Value, info);
    }

    static void onmessageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onmessage(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmessageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onmessageAttributeGetter(info);
    }

    static void onmessageAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onmessage(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnmessage(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmessageAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onmessageAttributeSetter(v8Value, info);
    }

    static void onofflineAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onoffline(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onofflineAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onofflineAttributeGetter(info);
    }

    static void onofflineAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onoffline(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnoffline(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onofflineAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onofflineAttributeSetter(v8Value, info);
    }

    static void ononlineAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::ononline(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ononlineAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::ononlineAttributeGetter(info);
    }

    static void ononlineAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::ononline(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnonline(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ononlineAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::ononlineAttributeSetter(v8Value, info);
    }

    static void onpagehideAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onpagehide(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpagehideAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpagehideAttributeGetter(info);
    }

    static void onpagehideAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onpagehide(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnpagehide(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpagehideAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpagehideAttributeSetter(v8Value, info);
    }

    static void onpageshowAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onpageshow(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpageshowAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpageshowAttributeGetter(info);
    }

    static void onpageshowAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onpageshow(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnpageshow(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpageshowAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpageshowAttributeSetter(v8Value, info);
    }

    static void onpopstateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onpopstate(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpopstateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onpopstateAttributeGetter(info);
    }

    static void onpopstateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onpopstate(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnpopstate(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpopstateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onpopstateAttributeSetter(v8Value, info);
    }

    static void onrejectionhandledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onrejectionhandled(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onrejectionhandledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onrejectionhandledAttributeGetter(info);
    }

    static void onrejectionhandledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onrejectionhandled(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnrejectionhandled(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onrejectionhandledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onrejectionhandledAttributeSetter(v8Value, info);
    }

    static void onstorageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onstorage(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onstorageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onstorageAttributeGetter(info);
    }

    static void onstorageAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onstorage(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnstorage(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onstorageAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onstorageAttributeSetter(v8Value, info);
    }

    static void onunhandledrejectionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onunhandledrejection(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onunhandledrejectionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onunhandledrejectionAttributeGetter(info);
    }

    static void onunhandledrejectionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onunhandledrejection(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnunhandledrejection(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onunhandledrejectionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onunhandledrejectionAttributeSetter(v8Value, info);
    }

    static void onunloadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        EventListener* cppValue(DOMWindowEventHandlers::onunload(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onunloadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::onunloadAttributeGetter(info);
    }

    static void onunloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DOMWindow* impl = V8Window::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, DOMWindowEventHandlers::onunload(*impl), v8Value, V8Window::eventListenerCacheIndex);

        DOMWindowEventHandlers::setOnunload(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onunloadAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::onunloadAttributeSetter(v8Value, info);
    }

    static void performanceAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMWindow* impl = V8Window::toImpl(holder);

        Performance* cppValue(DOMWindowPerformance::performance(*impl));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#Window#performance";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void performanceAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::performanceAttributeGetter(info);
    }

    static void performanceAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // Prepare the value to be set.

        v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "performance");
        v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value));
    }

    CORE_EXPORT void performanceAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DOMWindowV8Internal::performanceAttributeSetter(v8Value, info);
    }

    static void closeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
        impl->close(executionContext);
    }

    CORE_EXPORT void closeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::closeMethod(info);
    }

    static void closeOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        static int domTemplateKey; // This address is used for a key to look up the dom template.
        V8PerIsolateData* data = V8PerIsolateData::from(info.GetIsolate());
        const DOMWrapperWorld& world = DOMWrapperWorld::world(info.GetIsolate()->GetCurrentContext());
        v8::Local<v8::FunctionTemplate> interfaceTemplate = data->findInterfaceTemplate(world, &V8Window::wrapperTypeInfo);
        v8::Local<v8::Signature> signature = v8::Signature::New(info.GetIsolate(), interfaceTemplate);

        v8::Local<v8::FunctionTemplate> methodTemplate = data->findOrCreateOperationTemplate(world, &domTemplateKey, DOMWindowV8Internal::closeMethodCallback, v8Undefined(), signature, 0);
        // Return the function by default, unless the user script has overwritten it.
        v8SetReturnValue(info, methodTemplate->GetFunction(info.GetIsolate()->GetCurrentContext()).ToLocalChecked());

        DOMWindow* impl = V8Window::toImpl(info.Holder());
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, BindingSecurity::ErrorReportOption::DoNotReport)) {
            return;
        }

        v8::Local<v8::Value> hiddenValue = V8HiddenValue::getHiddenValue(ScriptState::current(info.GetIsolate()), v8::Local<v8::Object>::Cast(info.Holder()), v8AtomicString(info.GetIsolate(), "close"));
        if (!hiddenValue.IsEmpty()) {
            v8SetReturnValue(info, hiddenValue);
        }
    }

    CORE_EXPORT void closeOriginSafeMethodGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::closeOriginSafeMethodGetter(info);
    }

    static void stopMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "stop");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        impl->stop();
    }

    CORE_EXPORT void stopMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::stopMethod(info);
    }

    static void focusMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
        impl->focus(executionContext);
    }

    CORE_EXPORT void focusMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::focusMethod(info);
    }

    static void focusOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        static int domTemplateKey; // This address is used for a key to look up the dom template.
        V8PerIsolateData* data = V8PerIsolateData::from(info.GetIsolate());
        const DOMWrapperWorld& world = DOMWrapperWorld::world(info.GetIsolate()->GetCurrentContext());
        v8::Local<v8::FunctionTemplate> interfaceTemplate = data->findInterfaceTemplate(world, &V8Window::wrapperTypeInfo);
        v8::Local<v8::Signature> signature = v8::Signature::New(info.GetIsolate(), interfaceTemplate);

        v8::Local<v8::FunctionTemplate> methodTemplate = data->findOrCreateOperationTemplate(world, &domTemplateKey, DOMWindowV8Internal::focusMethodCallback, v8Undefined(), signature, 0);
        // Return the function by default, unless the user script has overwritten it.
        v8SetReturnValue(info, methodTemplate->GetFunction(info.GetIsolate()->GetCurrentContext()).ToLocalChecked());

        DOMWindow* impl = V8Window::toImpl(info.Holder());
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, BindingSecurity::ErrorReportOption::DoNotReport)) {
            return;
        }

        v8::Local<v8::Value> hiddenValue = V8HiddenValue::getHiddenValue(ScriptState::current(info.GetIsolate()), v8::Local<v8::Object>::Cast(info.Holder()), v8AtomicString(info.GetIsolate(), "focus"));
        if (!hiddenValue.IsEmpty()) {
            v8SetReturnValue(info, hiddenValue);
        }
    }

    CORE_EXPORT void focusOriginSafeMethodGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::focusOriginSafeMethodGetter(info);
    }

    static void blurMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        impl->blur();
    }

    CORE_EXPORT void blurMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::blurMethod(info);
    }

    static void blurOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        static int domTemplateKey; // This address is used for a key to look up the dom template.
        V8PerIsolateData* data = V8PerIsolateData::from(info.GetIsolate());
        const DOMWrapperWorld& world = DOMWrapperWorld::world(info.GetIsolate()->GetCurrentContext());
        v8::Local<v8::FunctionTemplate> interfaceTemplate = data->findInterfaceTemplate(world, &V8Window::wrapperTypeInfo);
        v8::Local<v8::Signature> signature = v8::Signature::New(info.GetIsolate(), interfaceTemplate);

        v8::Local<v8::FunctionTemplate> methodTemplate = data->findOrCreateOperationTemplate(world, &domTemplateKey, DOMWindowV8Internal::blurMethodCallback, v8Undefined(), signature, 0);
        // Return the function by default, unless the user script has overwritten it.
        v8SetReturnValue(info, methodTemplate->GetFunction(info.GetIsolate()->GetCurrentContext()).ToLocalChecked());

        DOMWindow* impl = V8Window::toImpl(info.Holder());
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, BindingSecurity::ErrorReportOption::DoNotReport)) {
            return;
        }

        v8::Local<v8::Value> hiddenValue = V8HiddenValue::getHiddenValue(ScriptState::current(info.GetIsolate()), v8::Local<v8::Object>::Cast(info.Holder()), v8AtomicString(info.GetIsolate(), "blur"));
        if (!hiddenValue.IsEmpty()) {
            v8SetReturnValue(info, hiddenValue);
        }
    }

    CORE_EXPORT void blurOriginSafeMethodGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::blurOriginSafeMethodGetter(info);
    }

    CORE_EXPORT void openMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        V8Window::openMethodCustom(info);
    }

    static void consoleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info
        // v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info
    )
    {
        v8::Local<v8::Object> instanceTemplate;
        v8::Isolate* isolate = info.GetIsolate();
        v8::Local<v8::FunctionTemplate> functionTemplate = V8ConsoleBase::domTemplate(isolate);

        v8::Local<v8::Function> v8Function;
        if (!functionTemplate->GetFunction(isolate->GetCurrentContext()).ToLocal(&v8Function))
            return;

        //V8RecursionScope::MicrotaskSuppression scope(isolate);

        v8::MaybeLocal<v8::Object> result = v8Function->NewInstance(isolate->GetCurrentContext());
        result.ToLocal(&instanceTemplate);

        info.GetReturnValue().Set(instanceTemplate);
    }

    static void alert1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "alert");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        impl->alert(scriptState);
    }

    static void alert2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "alert");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        V8StringResource<> message;
        message = info[0];
        if (!message.prepare())
            return;

        impl->alert(scriptState, message);
    }

    static void alertMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(1, info.Length())) {
        case 0:
            if (true) {
                UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_Alert_Method);
                alert1Method(info);
                return;
            }
            break;
        case 1:
            if (true) {
                UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_Alert_Method);
                alert2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "alert");

        if (isArityError) {
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void alertMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::alertMethod(info);
    }

    static void confirmMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "confirm");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        V8StringResource<> message;
        if (!info[0]->IsUndefined()) {
            message = info[0];
            if (!message.prepare())
                return;
        } else {
            message = String("");
        }

        bool result = impl->confirm(scriptState, message);
        v8SetReturnValueBool(info, result);
    }

    CORE_EXPORT void confirmMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_Confirm_Method);
        DOMWindowV8Internal::confirmMethod(info);
    }

    static void promptMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "prompt");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        V8StringResource<> message;
        V8StringResource<> defaultValue;
        if (!info[0]->IsUndefined()) {
            message = info[0];
            if (!message.prepare())
                return;
        } else {
            message = String("");
        }
        if (!info[1]->IsUndefined()) {
            defaultValue = info[1];
            if (!defaultValue.prepare())
                return;
        } else {
            defaultValue = String("");
        }

        String result = impl->prompt(scriptState, message, defaultValue);
        v8SetReturnValueStringOrNull(info, result, info.GetIsolate());
    }

    CORE_EXPORT void promptMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_Prompt_Method);
        DOMWindowV8Internal::promptMethod(info);
    }

    static void printMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "print");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        impl->print(scriptState);
    }

    CORE_EXPORT void printMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_Print_Method);
        DOMWindowV8Internal::printMethod(info);
    }

    static void requestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "requestAnimationFrame");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        FrameRequestCallback* callback;
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        callback = V8FrameRequestCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));

        v8SetReturnValueInt(info, impl->requestAnimationFrame(callback));
    }

    CORE_EXPORT void requestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::UnprefixedRequestAnimationFrame);
        DOMWindowV8Internal::requestAnimationFrameMethod(info);
    }

    static void cancelAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "cancelAnimationFrame");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        int handle;
        handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->cancelAnimationFrame(handle);
    }

    CORE_EXPORT void cancelAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::cancelAnimationFrameMethod(info);
    }

    static void requestIdleCallbackMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "requestIdleCallback");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        IdleRequestCallback* callback;
        IdleRequestOptions options;
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        callback = V8IdleRequestCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));

        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");

            return;
        }
        V8IdleRequestOptions::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValueInt(info, impl->requestIdleCallback(callback, options));
    }

    CORE_EXPORT void requestIdleCallbackMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8Window_RequestIdleCallback_Method);
        DOMWindowV8Internal::requestIdleCallbackMethod(info);
    }

    static void cancelIdleCallbackMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "cancelIdleCallback");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        int handle;
        handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->cancelIdleCallback(handle);
    }

    CORE_EXPORT void cancelIdleCallbackMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::cancelIdleCallbackMethod(info);
    }

    CORE_EXPORT void postMessageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        V8Window::postMessageMethodCustom(info);
    }

    static void postMessageOriginSafeMethodGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        static int domTemplateKey; // This address is used for a key to look up the dom template.
        V8PerIsolateData* data = V8PerIsolateData::from(info.GetIsolate());
        const DOMWrapperWorld& world = DOMWrapperWorld::world(info.GetIsolate()->GetCurrentContext());
        v8::Local<v8::FunctionTemplate> interfaceTemplate = data->findInterfaceTemplate(world, &V8Window::wrapperTypeInfo);
        v8::Local<v8::Signature> signature = v8::Signature::New(info.GetIsolate(), interfaceTemplate);

        v8::Local<v8::FunctionTemplate> methodTemplate = data->findOrCreateOperationTemplate(world, &domTemplateKey, DOMWindowV8Internal::postMessageMethodCallback, v8Undefined(), signature, 2);
        // Return the function by default, unless the user script has overwritten it.
        v8SetReturnValue(info, methodTemplate->GetFunction(info.GetIsolate()->GetCurrentContext()).ToLocalChecked());

        DOMWindow* impl = V8Window::toImpl(info.Holder());
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, BindingSecurity::ErrorReportOption::DoNotReport)) {
            return;
        }

        v8::Local<v8::Value> hiddenValue = V8HiddenValue::getHiddenValue(ScriptState::current(info.GetIsolate()), v8::Local<v8::Object>::Cast(info.Holder()), v8AtomicString(info.GetIsolate(), "postMessage"));
        if (!hiddenValue.IsEmpty()) {
            v8SetReturnValue(info, hiddenValue);
        }
    }

    CORE_EXPORT void postMessageOriginSafeMethodGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::postMessageOriginSafeMethodGetter(info);
    }

    static void captureEventsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "captureEvents");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        impl->captureEvents();
    }

    CORE_EXPORT void captureEventsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowCaptureEvents);
        DOMWindowV8Internal::captureEventsMethod(info);
    }

    static void releaseEventsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "releaseEvents");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        impl->releaseEvents();
    }

    CORE_EXPORT void releaseEventsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowReleaseEvents);
        DOMWindowV8Internal::releaseEventsMethod(info);
    }

    static void getComputedStyleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "getComputedStyle");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Element* elt;
        V8StringResource<TreatNullAndUndefinedAsNullString> pseudoElt;
        elt = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!elt) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");

            return;
        }

        if (!info[1]->IsUndefined()) {
            pseudoElt = info[1];
            if (!pseudoElt.prepare())
                return;
        } else {
            pseudoElt = nullptr;
        }

        CSSStyleDeclaration* result = impl->getComputedStyle(elt, pseudoElt);
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void getComputedStyleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::getComputedStyleMethod(info);
    }

    static void matchMediaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "matchMedia");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> query;
        query = info[0];
        if (!query.prepare())
            return;

        MediaQueryList* result = impl->matchMedia(query);
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void matchMediaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::matchMediaMethod(info);
    }

    static void moveToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "moveTo");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        int x;
        int y;
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->moveTo(x, y);
    }

    CORE_EXPORT void moveToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::moveToMethod(info);
    }

    static void moveByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "moveBy");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        int x;
        int y;
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->moveBy(x, y);
    }

    CORE_EXPORT void moveByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::moveByMethod(info);
    }

    static void resizeToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "resizeTo");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        int x;
        int y;
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->resizeTo(x, y);
    }

    CORE_EXPORT void resizeToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::resizeToMethod(info);
    }

    static void resizeByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "resizeBy");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        int x;
        int y;
        x = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        y = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->resizeBy(x, y);
    }

    CORE_EXPORT void resizeByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::resizeByMethod(info);
    }

    static void scroll1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scroll");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScrollToOptions options;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('options') is not an object.");

            return;
        }
        V8ScrollToOptions::toImpl(info.GetIsolate(), info[0], options, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->scroll(options);
    }

    static void scroll2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scroll");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        double x;
        double y;
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        impl->scroll(x, y);
    }

    static int scrollMethodLength()
    {
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            return 0;
        }
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            return 1;
        }
        return 2;
    }

    static void scrollMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(2, info.Length())) {
        case 0:
            if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
                if (true) {
                    scroll1Method(info);
                    return;
                }
            }
            break;
        case 1:
            if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
                if (true) {
                    scroll1Method(info);
                    return;
                }
            }
            break;
        case 2:
            if (true) {
                scroll2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scroll");

        if (isArityError) {
            if (info.Length() < DOMWindowV8Internal::scrollMethodLength()) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(DOMWindowV8Internal::scrollMethodLength(), info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void scrollMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::scrollMethod(info);
    }

    static void scrollTo1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scrollTo");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScrollToOptions options;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('options') is not an object.");

            return;
        }
        V8ScrollToOptions::toImpl(info.GetIsolate(), info[0], options, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->scrollTo(options);
    }

    static void scrollTo2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scrollTo");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        double x;
        double y;
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        impl->scrollTo(x, y);
    }

    static int scrollToMethodLength()
    {
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            return 0;
        }
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            return 1;
        }
        return 2;
    }

    static void scrollToMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(2, info.Length())) {
        case 0:
            if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
                if (true) {
                    scrollTo1Method(info);
                    return;
                }
            }
            break;
        case 1:
            if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
                if (true) {
                    scrollTo1Method(info);
                    return;
                }
            }
            break;
        case 2:
            if (true) {
                scrollTo2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scrollTo");

        if (isArityError) {
            if (info.Length() < DOMWindowV8Internal::scrollToMethodLength()) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(DOMWindowV8Internal::scrollToMethodLength(), info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void scrollToMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::scrollToMethod(info);
    }

    static void scrollBy1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scrollBy");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScrollToOptions options;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('options') is not an object.");

            return;
        }
        V8ScrollToOptions::toImpl(info.GetIsolate(), info[0], options, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->scrollBy(options);
    }

    static void scrollBy2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scrollBy");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        double x;
        double y;
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        impl->scrollBy(x, y);
    }

    static int scrollByMethodLength()
    {
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            return 0;
        }
        if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
            return 1;
        }
        return 2;
    }

    static void scrollByMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(2, info.Length())) {
        case 0:
            if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
                if (true) {
                    scrollBy1Method(info);
                    return;
                }
            }
            break;
        case 1:
            if (RuntimeEnabledFeatures::cssomSmoothScrollEnabled()) {
                if (true) {
                    scrollBy1Method(info);
                    return;
                }
            }
            break;
        case 2:
            if (true) {
                scrollBy2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "scrollBy");

        if (isArityError) {
            if (info.Length() < DOMWindowV8Internal::scrollByMethodLength()) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(DOMWindowV8Internal::scrollByMethodLength(), info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void scrollByMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::scrollByMethod(info);
    }

    static void getSelectionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "getSelection");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        v8SetReturnValue(info, impl->getSelection());
    }

    CORE_EXPORT void getSelectionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::getSelectionMethod(info);
    }

    static void findMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "find");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        V8StringResource<> string;
        bool caseSensitive;
        bool backwards;
        bool wrap;
        bool wholeWord;
        bool searchInFrames;
        bool showDialog;
        string = info[0];
        if (!string.prepare())
            return;

        caseSensitive = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        backwards = toBoolean(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        wrap = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.hadException())
            return;

        wholeWord = toBoolean(info.GetIsolate(), info[4], exceptionState);
        if (exceptionState.hadException())
            return;

        searchInFrames = toBoolean(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.hadException())
            return;

        showDialog = toBoolean(info.GetIsolate(), info[6], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValueBool(info, impl->find(string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog));
    }

    CORE_EXPORT void findMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::WindowFind);
        DOMWindowV8Internal::findMethod(info);
    }

    static void getMatchedCSSRulesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "getMatchedCSSRules");
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        Element* element;
        V8StringResource<TreatNullAndUndefinedAsNullString> pseudoElement;
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);

        pseudoElement = info[1];
        if (!pseudoElement.prepare())
            return;

        v8SetReturnValue(info, impl->getMatchedCSSRules(element, pseudoElement));
    }

    CORE_EXPORT void getMatchedCSSRulesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::GetMatchedCSSRules);
        DOMWindowV8Internal::getMatchedCSSRulesMethod(info);
    }

    static void webkitRequestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "webkitRequestAnimationFrame");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        FrameRequestCallback* callback;
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        callback = V8FrameRequestCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));

        v8SetReturnValueInt(info, impl->webkitRequestAnimationFrame(callback));
    }

    CORE_EXPORT void webkitRequestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedRequestAnimationFrame);
        DOMWindowV8Internal::webkitRequestAnimationFrameMethod(info);
    }

    static void webkitCancelAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "webkitCancelAnimationFrame");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        int id;
        id = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->cancelAnimationFrame(id);
    }

    CORE_EXPORT void webkitCancelAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedCancelAnimationFrame);
        DOMWindowV8Internal::webkitCancelAnimationFrameMethod(info);
    }

    static void getComputedStyleMapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "getComputedStyleMap");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Element* element;
        V8StringResource<TreatNullAndUndefinedAsNullString> pseudoElement;
        element = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!element) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");

            return;
        }

        if (!info[1]->IsUndefined()) {
            pseudoElement = info[1];
            if (!pseudoElement.prepare())
                return;
        } else {
            pseudoElement = nullptr;
        }

        StylePropertyMap* result = WindowGetComputedStyle::getComputedStyleMap(*impl, element, pseudoElement);
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void getComputedStyleMapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::getComputedStyleMapMethod(info);
    }

    static void btoaMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "btoa");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> btoa;
        btoa = info[0];
        if (!btoa.prepare())
            return;

        String result = impl->btoa(btoa, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueString(info, result, info.GetIsolate());
    }

    CORE_EXPORT void btoaMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::btoaMethod(info);
    }

    static void atobMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "atob");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> atob;
        atob = info[0];
        if (!atob.prepare())
            return;

        String result = impl->atob(atob, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueString(info, result, info.GetIsolate());
    }

    CORE_EXPORT void atobMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::atobMethod(info);
    }

    static void setTimeout1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "setTimeout");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptValue handler;
        int timeout;
        Vector<ScriptValue> arguments;
        if (!(info[0]->IsObject() && v8::Local<v8::Object>::Cast(info[0])->IsCallable())) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        handler = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);

        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.hadException())
            return;

        int result = DOMWindowTimers::setTimeout(scriptState, *impl, handler, timeout, arguments);
        v8SetReturnValueInt(info, result);
    }

    static void setTimeout2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "setTimeout");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        V8StringResource<> handler;
        int timeout;
        Vector<ScriptValue> arguments;
        handler = info[0];
        if (!handler.prepare())
            return;

        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.hadException())
            return;

        int result = DOMWindowTimers::setTimeout(scriptState, *impl, handler, timeout, arguments);
        v8SetReturnValueInt(info, result);
    }

    static void setTimeoutMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(3, info.Length())) {
        case 1:
            if (info[0]->IsFunction()) {
                setTimeout1Method(info);
                return;
            }
            if (true) {
                setTimeout2Method(info);
                return;
            }
            break;
        case 2:
            if (info[0]->IsFunction()) {
                setTimeout1Method(info);
                return;
            }
            if (true) {
                setTimeout2Method(info);
                return;
            }
            break;
        case 3:
            if (info[0]->IsFunction()) {
                setTimeout1Method(info);
                return;
            }
            if (true) {
                setTimeout2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "setTimeout");

        if (isArityError) {
            if (info.Length() < 1) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void setTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::setTimeoutMethod(info);
    }

    static void clearTimeoutMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "clearTimeout");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        int handle;
        if (!info[0]->IsUndefined()) {
            handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            handle = 0;
        }

        DOMWindowTimers::clearTimeout(*impl, handle);
    }

    CORE_EXPORT void clearTimeoutMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::clearTimeoutMethod(info);
    }

    static void setInterval1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "setInterval");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptValue handler;
        int timeout;
        Vector<ScriptValue> arguments;
        if (!(info[0]->IsObject() && v8::Local<v8::Object>::Cast(info[0])->IsCallable())) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        handler = ScriptValue(ScriptState::current(info.GetIsolate()), info[0]);

        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.hadException())
            return;

        int result = DOMWindowTimers::setInterval(scriptState, *impl, handler, timeout, arguments);
        v8SetReturnValueInt(info, result);
    }

    static void setInterval2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "setInterval");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        V8StringResource<> handler;
        int timeout;
        Vector<ScriptValue> arguments;
        handler = info[0];
        if (!handler.prepare())
            return;

        if (!info[1]->IsUndefined()) {
            timeout = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            timeout = 0;
        }
        arguments = toImplArguments<Vector<ScriptValue>>(info, 2, exceptionState);
        if (exceptionState.hadException())
            return;

        int result = DOMWindowTimers::setInterval(scriptState, *impl, handler, timeout, arguments);
        v8SetReturnValueInt(info, result);
    }

    static void setIntervalMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(3, info.Length())) {
        case 1:
            if (info[0]->IsFunction()) {
                setInterval1Method(info);
                return;
            }
            if (true) {
                setInterval2Method(info);
                return;
            }
            break;
        case 2:
            if (info[0]->IsFunction()) {
                setInterval1Method(info);
                return;
            }
            if (true) {
                setInterval2Method(info);
                return;
            }
            break;
        case 3:
            if (info[0]->IsFunction()) {
                setInterval1Method(info);
                return;
            }
            if (true) {
                setInterval2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "setInterval");

        if (isArityError) {
            if (info.Length() < 1) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void setIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::setIntervalMethod(info);
    }

    static void clearIntervalMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "clearInterval");

        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        int handle;
        if (!info[0]->IsUndefined()) {
            handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            handle = 0;
        }

        DOMWindowTimers::clearInterval(*impl, handle);
    }

    CORE_EXPORT void clearIntervalMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::clearIntervalMethod(info);
    }

    static void createImageBitmap1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "createImageBitmap");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8Window::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas imageBitmap;
        ImageBitmapOptions options;
        V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::toImpl(info.GetIsolate(), info[0], imageBitmap, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");

            return;
        }
        V8ImageBitmapOptions::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, imageBitmap, options, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result.v8Value());
    }

    static void createImageBitmap2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "createImageBitmap");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8Window::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas imageBitmap;
        int sx;
        int sy;
        int sw;
        int sh;
        ImageBitmapOptions options;
        V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::toImpl(info.GetIsolate(), info[0], imageBitmap, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        sx = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        sy = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        sw = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        sh = toInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        if (!isUndefinedOrNull(info[5]) && !info[5]->IsObject()) {
            exceptionState.throwTypeError("parameter 6 ('options') is not an object.");

            return;
        }
        V8ImageBitmapOptions::toImpl(info.GetIsolate(), info[5], options, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = ImageBitmapFactories::createImageBitmap(scriptState, *impl, imageBitmap, sx, sy, sw, sh, options, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result.v8Value());
    }

    static void createImageBitmapMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(6, info.Length())) {
        case 1:
            if (true) {
                createImageBitmap1Method(info);
                return;
            }
            break;
        case 2:
            if (true) {
                createImageBitmap1Method(info);
                return;
            }
            break;
        case 5:
            if (true) {
                createImageBitmap2Method(info);
                return;
            }
            break;
        case 6:
            if (true) {
                createImageBitmap2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Window", "createImageBitmap");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        if (isArityError) {
            if (info.Length() < 1) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
                return;
            }
            if (info.Length() >= 1) {
                exceptionState.throwTypeError(ExceptionMessages::invalidArity("[1, 2, 5, 6]", info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void createImageBitmapMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::createImageBitmapMethod(info);
    }

    static void DOMWindowOriginSafeMethodSetter(v8::Local<v8::Name> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
    {
        if (!name->IsString())
            return;
        v8::Local<v8::Object> holder = V8Window::findInstanceInPrototypeChain(info.Holder(), info.GetIsolate());
        if (holder.IsEmpty())
            return;
        DOMWindow* impl = V8Window::toImpl(holder);
        v8::String::Utf8Value attributeName(name);
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "Window", *attributeName);
        if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
            return;
        }

        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), v8::Local<v8::Object>::Cast(info.Holder()), name.As<v8::String>(), v8Value);
    }

    CORE_EXPORT void DOMWindowOriginSafeMethodSetterCallback(v8::Local<v8::Name> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
    {
        DOMWindowV8Internal::DOMWindowOriginSafeMethodSetter(name, v8Value, info);
    }

    CORE_EXPORT void namedPropertyGetterCallback(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        if (!name->IsString())
            return;
        const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());

        V8Window::namedPropertyGetterCustom(propertyName, info);
    }

    static void indexedPropertyGetter(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindow* impl = V8Window::toImpl(info.Holder());

        // We assume that all the implementations support length() method, although
        // the spec doesn't require that length() must exist.  It's okay that
        // the interface does not have length attribute as long as the
        // implementation supports length() member function.
        if (index >= impl->length())
            return; // Returns undefined due to out-of-range.

        DOMWindow* result = impl->anonymousIndexedGetter(index);
        v8SetReturnValueFast(info, result, impl);
    }

    CORE_EXPORT void indexedPropertyGetterCallback(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::indexedPropertyGetter(index, info);
    }

    CORE_EXPORT bool securityCheck(v8::Local<v8::Context> accessingContext, v8::Local<v8::Object> accessedObject, v8::Local<v8::Value> data)
    {
        v8::Isolate* isolate = v8::Isolate::GetCurrent();
        v8::Local<v8::Object> window = V8Window::findInstanceInPrototypeChain(accessedObject, isolate);
        if (window.IsEmpty())
            return false; // the frame is gone.

        const DOMWindow* targetWindow = V8Window::toImpl(window);
        return BindingSecurity::shouldAllowAccessTo(toLocalDOMWindow(toDOMWindow(accessingContext)), targetWindow, BindingSecurity::ErrorReportOption::DoNotReport);
    }

    static const struct {
        using GetterCallback = void (*)(const v8::PropertyCallbackInfo<v8::Value>&);
        using SetterCallback = void (*)(v8::Local<v8::Value>, const V8CrossOriginSetterInfo&);

        const char* const name;
        const GetterCallback getter;
        const SetterCallback setter;
    } kCrossOriginAttributeTable[] = {
        {
            "window",
            &DOMWindowV8Internal::windowAttributeGetter,
            nullptr,
        },
        {
            "self",
            &DOMWindowV8Internal::selfAttributeGetter,
            nullptr,
        },
        {
            "location",
            &DOMWindowV8Internal::locationAttributeGetter,
            &DOMWindowV8Internal::locationAttributeSetter,
        },
        {
            "closed",
            &DOMWindowV8Internal::closedAttributeGetter,
            nullptr,
        },
        {
            "frames",
            &DOMWindowV8Internal::framesAttributeGetter,
            nullptr,
        },
        {
            "length",
            &DOMWindowV8Internal::lengthAttributeGetter,
            nullptr,
        },
        {
            "top",
            &DOMWindowV8Internal::topAttributeGetter,
            nullptr,
        },
        {
            "opener",
            &DOMWindowV8Internal::openerAttributeGetter,
            nullptr,
        },
        {
            "parent",
            &DOMWindowV8Internal::parentAttributeGetter,
            nullptr,
        },
        { "close", &DOMWindowV8Internal::closeOriginSafeMethodGetter, nullptr },
        { "focus", &DOMWindowV8Internal::focusOriginSafeMethodGetter, nullptr },
        { "blur", &DOMWindowV8Internal::blurOriginSafeMethodGetter, nullptr },
        { "postMessage", &DOMWindowV8Internal::postMessageOriginSafeMethodGetter, nullptr },
    };

    CORE_EXPORT void crossOriginNamedGetter(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        if (!name->IsString())
            return;
        const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());

        for (const auto& attribute : kCrossOriginAttributeTable) {
            if (propertyName == attribute.name && attribute.getter) {
                attribute.getter(info);
                return;
            }
        }

        V8Window::namedPropertyGetterCustom(propertyName, info);
    }

    CORE_EXPORT void crossOriginNamedSetter(v8::Local<v8::Name> name, v8::Local<v8::Value> value, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        if (!name->IsString())
            return;
        const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());

        for (const auto& attribute : kCrossOriginAttributeTable) {
            if (propertyName == attribute.name && attribute.setter) {
                attribute.setter(value, V8CrossOriginSetterInfo(info.GetIsolate(), info.Holder()));
                return;
            }
        }

        BindingSecurity::failedAccessCheckFor(
            info.GetIsolate(),
            V8Window::toImpl(info.Holder())->frame());
    }

    CORE_EXPORT void crossOriginNamedEnumerator(const v8::PropertyCallbackInfo<v8::Array>& info)
    {
        Vector<String> names;
        for (const auto& attribute : kCrossOriginAttributeTable)
            names.push_back(attribute.name);

        v8SetReturnValue(
            info,
            ToV8(names, info.Holder(), info.GetIsolate()).As<v8::Array>());
    }

    CORE_EXPORT void crossOriginIndexedGetter(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info)
    {
        DOMWindowV8Internal::indexedPropertyGetter(index, info);
    }

} // namespace DOMWindowV8Internal

// Suppress warning: global constructors, because AttributeConfiguration is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const V8DOMConfiguration::AttributeConfiguration V8WindowAttributes[] = {
    { "window", DOMWindowV8Internal::windowAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "self", DOMWindowV8Internal::selfAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "location", DOMWindowV8Internal::locationAttributeGetterCallback, DOMWindowV8Internal::locationAttributeSetterCallback, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "closed", DOMWindowV8Internal::closedAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "frames", DOMWindowV8Internal::framesAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "length", DOMWindowV8Internal::lengthAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "top", DOMWindowV8Internal::topAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "opener", DOMWindowV8Internal::openerAttributeGetterCallback, DOMWindowV8Internal::openerAttributeSetterCallback, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "parent", DOMWindowV8Internal::parentAttributeGetterCallback, 0, 0, 0, nullptr, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WebKitTransitionEvent", DOMWindowV8Internal::WebKitTransitionEventConstructorGetterCallback, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TransitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WebKitAnimationEvent", DOMWindowV8Internal::WebKitAnimationEventConstructorGetterCallback, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "webkitURL", DOMWindowV8Internal::webkitURLConstructorGetterCallback, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8URL::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WebKitMutationObserver", DOMWindowV8Internal::WebKitMutationObserverConstructorGetterCallback, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MutationObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
};
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// Suppress warning: global constructors, because AttributeConfiguration is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const V8DOMConfiguration::AttributeConfiguration V8WindowLazyDataAttributes[] = {
    { "AnimationEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ApplicationCache", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ApplicationCache::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ApplicationCacheErrorEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ApplicationCacheErrorEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Attr", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Attr::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "BarProp", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8BarProp::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "BeforeUnloadEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8BeforeUnloadEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Blob", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Blob::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CDATASection", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CDATASection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSConditionRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSConditionRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSS", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSS::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSFontFaceRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSFontFaceRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSGroupingRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSGroupingRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSImportRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSImportRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSKeyframeRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSKeyframeRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSKeyframesRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSKeyframesRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSMediaRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSMediaRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSNamespaceRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSNamespaceRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSPageRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSPageRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSRuleList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSRuleList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSStyleDeclaration", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSStyleDeclaration::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSStyleRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSStyleRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSStyleSheet", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSStyleSheet::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSSupportsRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSSupportsRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CSSViewportRule", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSViewportRule::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CharacterData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CharacterData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ClientRect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ClientRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ClientRectList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ClientRectList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ClipboardEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ClipboardEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Comment", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Comment::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CompositionEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CompositionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CustomEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CustomEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMException", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMException::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMImplementation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMImplementation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMParser", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMParser::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMStringList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMStringList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMStringMap", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMStringMap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMTokenList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMTokenList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DataTransfer", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DataTransfer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DataTransferItem", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DataTransferItem::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DataTransferItemList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DataTransferItemList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DataView", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DataView::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Document", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Document::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DocumentFragment", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DocumentFragment::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DocumentType", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DocumentType::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DragEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DragEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Element", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Element::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ErrorEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ErrorEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Event", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Event::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "EventTarget", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8EventTarget::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "File", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8File::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FileList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FileList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FileReader", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FileReader::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FocusEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FocusEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FontFace", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FontFace::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FontFaceSetLoadEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FontFaceSetLoadEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FormData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FormData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLAllCollection", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLAllCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLAnchorElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLAnchorElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLAreaElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLAreaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLAudioElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLAudioElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Audio", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLAudioElementConstructor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLBRElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLBRElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLBaseElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLBaseElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLBodyElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLBodyElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLButtonElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLButtonElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLCanvasElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLCanvasElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLCollection", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLContentElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLContentElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDListElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDataListElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDataListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDetailsElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDetailsElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDialogElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDialogElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDirectoryElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDirectoryElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDivElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDivElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLDocument", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLDocument::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLEmbedElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLEmbedElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLFieldSetElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLFieldSetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLFontElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLFontElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLFormControlsCollection", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLFormControlsCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLFormElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLFormElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLFrameElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLFrameElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLFrameSetElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLFrameSetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLHRElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLHRElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLHeadElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLHeadElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLHeadingElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLHeadingElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLHtmlElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLHtmlElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLIFrameElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLIFrameElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLImageElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLImageElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Image", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLImageElementConstructor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLInputElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLInputElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLLIElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLLIElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLLabelElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLLabelElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLLegendElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLLegendElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLLinkElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLLinkElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLMapElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMapElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLMarqueeElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMarqueeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLMediaElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMediaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLMenuElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMenuElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLMetaElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMetaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLMeterElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMeterElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLModElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLModElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLOListElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLOListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLObjectElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLObjectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLOptGroupElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLOptGroupElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLOptionElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLOptionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Option", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLOptionElementConstructor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLOptionsCollection", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLOptionsCollection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLOutputElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLOutputElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLParagraphElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLParagraphElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLParamElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLParamElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLPictureElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLPictureElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLPreElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLPreElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLProgressElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLProgressElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLQuoteElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLQuoteElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLScriptElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLScriptElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLSelectElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLSelectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLShadowElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLShadowElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLSlotElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLSlotElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLSourceElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLSourceElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLSpanElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLSpanElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLStyleElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLStyleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTableCaptionElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTableCaptionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTableCellElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTableCellElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTableColElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTableColElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTableElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTableElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTableRowElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTableRowElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTableSectionElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTableSectionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTemplateElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTemplateElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTextAreaElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTextAreaElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTitleElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTitleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLTrackElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLTrackElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLUListElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLUListElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLUnknownElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLUnknownElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HTMLVideoElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLVideoElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "HashChangeEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HashChangeEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "History", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8History::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IdleDeadline", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IdleDeadline::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ImageBitmap", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ImageBitmap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ImageData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ImageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "InputDeviceCapabilities", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8InputDeviceCapabilities::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "KeyboardEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8KeyboardEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Location", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Location::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MediaError", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MediaError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MediaList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MediaList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MediaQueryList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MediaQueryList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MediaQueryListEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MediaQueryListEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MessageChannel", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MessageChannel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MessageEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MessageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MessagePort", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MessagePort::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MouseEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MouseEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MutationEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MutationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MutationObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MutationObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MutationRecord", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MutationRecord::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "NamedNodeMap", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NamedNodeMap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Navigator", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Navigator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Node", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Node::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "NodeFilter", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NodeFilter::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "NodeIterator", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NodeIterator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "NodeList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NodeList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PageTransitionEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PageTransitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Performance", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Performance::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PerformanceEntry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceEntry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PerformanceMark", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceMark::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PerformanceMeasure", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceMeasure::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PerformanceNavigation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceNavigation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PerformanceResourceTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceResourceTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PerformanceTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PopStateEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PopStateEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ProcessingInstruction", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ProcessingInstruction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ProgressEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ProgressEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PromiseRejectionEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PromiseRejectionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "RadioNodeList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8RadioNodeList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Range", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Range::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAngle", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAngle::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimateElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimateElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimateMotionElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimateMotionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimateTransformElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimateTransformElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedAngle", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedAngle::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedBoolean", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedBoolean::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedEnumeration", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedEnumeration::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedInteger", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedInteger::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedLength", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedLengthList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedLengthList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedNumber", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedNumber::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedNumberList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedNumberList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedPreserveAspectRatio", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedPreserveAspectRatio::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedRect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedString", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedString::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGAnimatedTransformList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimatedTransformList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGCircleElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGCircleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGClipPathElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGClipPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGComponentTransferFunctionElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGComponentTransferFunctionElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGDefsElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGDefsElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGDescElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGDescElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGEllipseElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGEllipseElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEBlendElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEBlendElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEColorMatrixElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEColorMatrixElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEComponentTransferElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEComponentTransferElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFECompositeElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFECompositeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEConvolveMatrixElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEConvolveMatrixElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEDiffuseLightingElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEDiffuseLightingElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEDisplacementMapElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEDisplacementMapElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEDistantLightElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEDistantLightElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEDropShadowElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEDropShadowElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEFloodElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEFloodElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEFuncAElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncAElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEFuncBElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncBElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEFuncGElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEFuncRElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEFuncRElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEGaussianBlurElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEGaussianBlurElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEImageElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEImageElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEMergeElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEMergeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEMergeNodeElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEMergeNodeElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEMorphologyElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEMorphologyElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEOffsetElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEOffsetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFEPointLightElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFEPointLightElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFESpecularLightingElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFESpecularLightingElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFESpotLightElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFESpotLightElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFETileElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFETileElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFETurbulenceElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFETurbulenceElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGFilterElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGFilterElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGForeignObjectElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGForeignObjectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGGElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGGeometryElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGGeometryElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGGradientElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGGradientElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGGraphicsElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGGraphicsElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGImageElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGImageElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGLength", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGLengthList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGLengthList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGLineElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGLineElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGLinearGradientElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGLinearGradientElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGMarkerElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGMarkerElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGMaskElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGMaskElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGMatrix", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGMetadataElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGMetadataElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGNumber", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGNumber::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGNumberList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGNumberList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPathElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPatternElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPatternElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPoint", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPoint::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPointList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPointList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPolygonElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPolygonElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPolylineElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPolylineElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGPreserveAspectRatio", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGPreserveAspectRatio::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGRadialGradientElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGRadialGradientElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGRect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGRectElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGRectElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGSVGElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGSVGElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGScriptElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGScriptElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGSetElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGSetElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGStopElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGStopElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGStringList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGStringList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGStyleElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGStyleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGSwitchElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGSwitchElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGSymbolElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGSymbolElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTSpanElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTSpanElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTextContentElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTextContentElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTextElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTextElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTextPathElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTextPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTextPositioningElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTextPositioningElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTitleElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTitleElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTransform", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTransform::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGTransformList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGTransformList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGUnitTypes", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGUnitTypes::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGUseElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGUseElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SVGViewElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGViewElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Screen", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Screen::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SecurityPolicyViolationEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SecurityPolicyViolationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Selection", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Selection::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ShadowRoot", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ShadowRoot::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "StyleSheet", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StyleSheet::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "StyleSheetList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StyleSheetList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Text", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Text::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextMetrics", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextMetrics::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextTrack", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextTrackCue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextTrackCue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextTrackCueList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextTrackCueList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextTrackList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TimeRanges", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TimeRanges::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Touch", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Touch::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TouchEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TouchEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TouchList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TouchList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TrackEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TrackEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TransitionEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TransitionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TreeWalker", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TreeWalker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "UIEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8UIEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "URL", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8URL::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "URLSearchParams", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8URLSearchParams::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "VTTCue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VTTCue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ValidityState", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ValidityState::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WebKitCSSMatrix", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WebKitCSSMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WheelEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WheelEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Window", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Window::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Worker", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Worker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "XMLDocument", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XMLDocument::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "XMLHttpRequest", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XMLHttpRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "XMLHttpRequestEventTarget", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XMLHttpRequestEventTarget::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "XMLHttpRequestUpload", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XMLHttpRequestUpload::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "XMLSerializer", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XMLSerializer::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    //    {"XPathEvaluator", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XPathEvaluator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    //    {"XPathExpression", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XPathExpression::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    //    {"XPathResult", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XPathResult::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
};
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

const V8DOMConfiguration::AccessorConfiguration V8WindowAccessors[] = {
    { "document", DOMWindowV8Internal::documentAttributeGetterCallback, 0, 0, 0, DOMWindowV8Internal::documentCachedAccessorCallback, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "name", DOMWindowV8Internal::nameAttributeGetterCallback, DOMWindowV8Internal::nameAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "history", DOMWindowV8Internal::historyAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "locationbar", DOMWindowV8Internal::locationbarAttributeGetterCallback, DOMWindowV8Internal::locationbarAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "menubar", DOMWindowV8Internal::menubarAttributeGetterCallback, DOMWindowV8Internal::menubarAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "personalbar", DOMWindowV8Internal::personalbarAttributeGetterCallback, DOMWindowV8Internal::personalbarAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "scrollbars", DOMWindowV8Internal::scrollbarsAttributeGetterCallback, DOMWindowV8Internal::scrollbarsAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "statusbar", DOMWindowV8Internal::statusbarAttributeGetterCallback, DOMWindowV8Internal::statusbarAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "toolbar", DOMWindowV8Internal::toolbarAttributeGetterCallback, DOMWindowV8Internal::toolbarAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "status", DOMWindowV8Internal::statusAttributeGetterCallback, DOMWindowV8Internal::statusAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "frameElement", DOMWindowV8Internal::frameElementAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "navigator", DOMWindowV8Internal::navigatorAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "applicationCache", DOMWindowV8Internal::applicationCacheAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "external", DOMWindowV8Internal::externalAttributeGetterCallback, DOMWindowV8Internal::externalAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "screen", DOMWindowV8Internal::screenAttributeGetterCallback, DOMWindowV8Internal::screenAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "innerWidth", DOMWindowV8Internal::innerWidthAttributeGetterCallback, DOMWindowV8Internal::innerWidthAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "innerHeight", DOMWindowV8Internal::innerHeightAttributeGetterCallback, DOMWindowV8Internal::innerHeightAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "scrollX", DOMWindowV8Internal::scrollXAttributeGetterCallback, DOMWindowV8Internal::scrollXAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "pageXOffset", DOMWindowV8Internal::pageXOffsetAttributeGetterCallback, DOMWindowV8Internal::pageXOffsetAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "scrollY", DOMWindowV8Internal::scrollYAttributeGetterCallback, DOMWindowV8Internal::scrollYAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "pageYOffset", DOMWindowV8Internal::pageYOffsetAttributeGetterCallback, DOMWindowV8Internal::pageYOffsetAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "screenX", DOMWindowV8Internal::screenXAttributeGetterCallback, DOMWindowV8Internal::screenXAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "screenY", DOMWindowV8Internal::screenYAttributeGetterCallback, DOMWindowV8Internal::screenYAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "outerWidth", DOMWindowV8Internal::outerWidthAttributeGetterCallback, DOMWindowV8Internal::outerWidthAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "outerHeight", DOMWindowV8Internal::outerHeightAttributeGetterCallback, DOMWindowV8Internal::outerHeightAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "devicePixelRatio", DOMWindowV8Internal::devicePixelRatioAttributeGetterCallback, DOMWindowV8Internal::devicePixelRatioAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "clientInformation", DOMWindowV8Internal::clientInformationAttributeGetterCallback, DOMWindowV8Internal::clientInformationAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "event", DOMWindowV8Internal::eventAttributeGetterCallback, DOMWindowV8Internal::eventAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "offscreenBuffering", DOMWindowV8Internal::offscreenBufferingAttributeGetterCallback, DOMWindowV8Internal::offscreenBufferingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "screenLeft", DOMWindowV8Internal::screenLeftAttributeGetterCallback, DOMWindowV8Internal::screenLeftAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "screenTop", DOMWindowV8Internal::screenTopAttributeGetterCallback, DOMWindowV8Internal::screenTopAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "defaultStatus", DOMWindowV8Internal::defaultStatusAttributeGetterCallback, DOMWindowV8Internal::defaultStatusAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "defaultstatus", DOMWindowV8Internal::defaultstatusAttributeGetterCallback, DOMWindowV8Internal::defaultstatusAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "styleMedia", DOMWindowV8Internal::styleMediaAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onanimationend", DOMWindowV8Internal::onanimationendAttributeGetterCallback, DOMWindowV8Internal::onanimationendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onanimationiteration", DOMWindowV8Internal::onanimationiterationAttributeGetterCallback, DOMWindowV8Internal::onanimationiterationAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onanimationstart", DOMWindowV8Internal::onanimationstartAttributeGetterCallback, DOMWindowV8Internal::onanimationstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onsearch", DOMWindowV8Internal::onsearchAttributeGetterCallback, DOMWindowV8Internal::onsearchAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ontransitionend", DOMWindowV8Internal::ontransitionendAttributeGetterCallback, DOMWindowV8Internal::ontransitionendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onwebkitanimationend", DOMWindowV8Internal::onwebkitanimationendAttributeGetterCallback, DOMWindowV8Internal::onwebkitanimationendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onwebkitanimationiteration", DOMWindowV8Internal::onwebkitanimationiterationAttributeGetterCallback, DOMWindowV8Internal::onwebkitanimationiterationAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onwebkitanimationstart", DOMWindowV8Internal::onwebkitanimationstartAttributeGetterCallback, DOMWindowV8Internal::onwebkitanimationstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onwebkittransitionend", DOMWindowV8Internal::onwebkittransitionendAttributeGetterCallback, DOMWindowV8Internal::onwebkittransitionendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onwheel", DOMWindowV8Internal::onwheelAttributeGetterCallback, DOMWindowV8Internal::onwheelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "isSecureContext", DOMWindowV8Internal::isSecureContextAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onabort", DOMWindowV8Internal::onabortAttributeGetterCallback, DOMWindowV8Internal::onabortAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onblur", DOMWindowV8Internal::onblurAttributeGetterCallback, DOMWindowV8Internal::onblurAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oncancel", DOMWindowV8Internal::oncancelAttributeGetterCallback, DOMWindowV8Internal::oncancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oncanplay", DOMWindowV8Internal::oncanplayAttributeGetterCallback, DOMWindowV8Internal::oncanplayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oncanplaythrough", DOMWindowV8Internal::oncanplaythroughAttributeGetterCallback, DOMWindowV8Internal::oncanplaythroughAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onchange", DOMWindowV8Internal::onchangeAttributeGetterCallback, DOMWindowV8Internal::onchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onclick", DOMWindowV8Internal::onclickAttributeGetterCallback, DOMWindowV8Internal::onclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onclose", DOMWindowV8Internal::oncloseAttributeGetterCallback, DOMWindowV8Internal::oncloseAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oncontextmenu", DOMWindowV8Internal::oncontextmenuAttributeGetterCallback, DOMWindowV8Internal::oncontextmenuAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oncuechange", DOMWindowV8Internal::oncuechangeAttributeGetterCallback, DOMWindowV8Internal::oncuechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondblclick", DOMWindowV8Internal::ondblclickAttributeGetterCallback, DOMWindowV8Internal::ondblclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondrag", DOMWindowV8Internal::ondragAttributeGetterCallback, DOMWindowV8Internal::ondragAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondragend", DOMWindowV8Internal::ondragendAttributeGetterCallback, DOMWindowV8Internal::ondragendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondragenter", DOMWindowV8Internal::ondragenterAttributeGetterCallback, DOMWindowV8Internal::ondragenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondragleave", DOMWindowV8Internal::ondragleaveAttributeGetterCallback, DOMWindowV8Internal::ondragleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondragover", DOMWindowV8Internal::ondragoverAttributeGetterCallback, DOMWindowV8Internal::ondragoverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondragstart", DOMWindowV8Internal::ondragstartAttributeGetterCallback, DOMWindowV8Internal::ondragstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondrop", DOMWindowV8Internal::ondropAttributeGetterCallback, DOMWindowV8Internal::ondropAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ondurationchange", DOMWindowV8Internal::ondurationchangeAttributeGetterCallback, DOMWindowV8Internal::ondurationchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onemptied", DOMWindowV8Internal::onemptiedAttributeGetterCallback, DOMWindowV8Internal::onemptiedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onended", DOMWindowV8Internal::onendedAttributeGetterCallback, DOMWindowV8Internal::onendedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onerror", DOMWindowV8Internal::onerrorAttributeGetterCallback, DOMWindowV8Internal::onerrorAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onfocus", DOMWindowV8Internal::onfocusAttributeGetterCallback, DOMWindowV8Internal::onfocusAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oninput", DOMWindowV8Internal::oninputAttributeGetterCallback, DOMWindowV8Internal::oninputAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oninvalid", DOMWindowV8Internal::oninvalidAttributeGetterCallback, DOMWindowV8Internal::oninvalidAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onkeydown", DOMWindowV8Internal::onkeydownAttributeGetterCallback, DOMWindowV8Internal::onkeydownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onkeypress", DOMWindowV8Internal::onkeypressAttributeGetterCallback, DOMWindowV8Internal::onkeypressAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onkeyup", DOMWindowV8Internal::onkeyupAttributeGetterCallback, DOMWindowV8Internal::onkeyupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onload", DOMWindowV8Internal::onloadAttributeGetterCallback, DOMWindowV8Internal::onloadAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onloadeddata", DOMWindowV8Internal::onloadeddataAttributeGetterCallback, DOMWindowV8Internal::onloadeddataAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onloadedmetadata", DOMWindowV8Internal::onloadedmetadataAttributeGetterCallback, DOMWindowV8Internal::onloadedmetadataAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onloadstart", DOMWindowV8Internal::onloadstartAttributeGetterCallback, DOMWindowV8Internal::onloadstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmousedown", DOMWindowV8Internal::onmousedownAttributeGetterCallback, DOMWindowV8Internal::onmousedownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmouseenter", DOMWindowV8Internal::onmouseenterAttributeGetterCallback, DOMWindowV8Internal::onmouseenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::DoNotCheckHolder },
    { "onmouseleave", DOMWindowV8Internal::onmouseleaveAttributeGetterCallback, DOMWindowV8Internal::onmouseleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::DoNotCheckHolder },
    { "onmousemove", DOMWindowV8Internal::onmousemoveAttributeGetterCallback, DOMWindowV8Internal::onmousemoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmouseout", DOMWindowV8Internal::onmouseoutAttributeGetterCallback, DOMWindowV8Internal::onmouseoutAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmouseover", DOMWindowV8Internal::onmouseoverAttributeGetterCallback, DOMWindowV8Internal::onmouseoverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmouseup", DOMWindowV8Internal::onmouseupAttributeGetterCallback, DOMWindowV8Internal::onmouseupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmousewheel", DOMWindowV8Internal::onmousewheelAttributeGetterCallback, DOMWindowV8Internal::onmousewheelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onpause", DOMWindowV8Internal::onpauseAttributeGetterCallback, DOMWindowV8Internal::onpauseAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onplay", DOMWindowV8Internal::onplayAttributeGetterCallback, DOMWindowV8Internal::onplayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onplaying", DOMWindowV8Internal::onplayingAttributeGetterCallback, DOMWindowV8Internal::onplayingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onprogress", DOMWindowV8Internal::onprogressAttributeGetterCallback, DOMWindowV8Internal::onprogressAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onratechange", DOMWindowV8Internal::onratechangeAttributeGetterCallback, DOMWindowV8Internal::onratechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onreset", DOMWindowV8Internal::onresetAttributeGetterCallback, DOMWindowV8Internal::onresetAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onresize", DOMWindowV8Internal::onresizeAttributeGetterCallback, DOMWindowV8Internal::onresizeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onscroll", DOMWindowV8Internal::onscrollAttributeGetterCallback, DOMWindowV8Internal::onscrollAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onseeked", DOMWindowV8Internal::onseekedAttributeGetterCallback, DOMWindowV8Internal::onseekedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onseeking", DOMWindowV8Internal::onseekingAttributeGetterCallback, DOMWindowV8Internal::onseekingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onselect", DOMWindowV8Internal::onselectAttributeGetterCallback, DOMWindowV8Internal::onselectAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onshow", DOMWindowV8Internal::onshowAttributeGetterCallback, DOMWindowV8Internal::onshowAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onstalled", DOMWindowV8Internal::onstalledAttributeGetterCallback, DOMWindowV8Internal::onstalledAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onsubmit", DOMWindowV8Internal::onsubmitAttributeGetterCallback, DOMWindowV8Internal::onsubmitAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onsuspend", DOMWindowV8Internal::onsuspendAttributeGetterCallback, DOMWindowV8Internal::onsuspendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ontimeupdate", DOMWindowV8Internal::ontimeupdateAttributeGetterCallback, DOMWindowV8Internal::ontimeupdateAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ontoggle", DOMWindowV8Internal::ontoggleAttributeGetterCallback, DOMWindowV8Internal::ontoggleAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onvolumechange", DOMWindowV8Internal::onvolumechangeAttributeGetterCallback, DOMWindowV8Internal::onvolumechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onwaiting", DOMWindowV8Internal::onwaitingAttributeGetterCallback, DOMWindowV8Internal::onwaitingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onbeforeunload", DOMWindowV8Internal::onbeforeunloadAttributeGetterCallback, DOMWindowV8Internal::onbeforeunloadAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onhashchange", DOMWindowV8Internal::onhashchangeAttributeGetterCallback, DOMWindowV8Internal::onhashchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onlanguagechange", DOMWindowV8Internal::onlanguagechangeAttributeGetterCallback, DOMWindowV8Internal::onlanguagechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmessage", DOMWindowV8Internal::onmessageAttributeGetterCallback, DOMWindowV8Internal::onmessageAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onoffline", DOMWindowV8Internal::onofflineAttributeGetterCallback, DOMWindowV8Internal::onofflineAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ononline", DOMWindowV8Internal::ononlineAttributeGetterCallback, DOMWindowV8Internal::ononlineAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onpagehide", DOMWindowV8Internal::onpagehideAttributeGetterCallback, DOMWindowV8Internal::onpagehideAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onpageshow", DOMWindowV8Internal::onpageshowAttributeGetterCallback, DOMWindowV8Internal::onpageshowAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onpopstate", DOMWindowV8Internal::onpopstateAttributeGetterCallback, DOMWindowV8Internal::onpopstateAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onrejectionhandled", DOMWindowV8Internal::onrejectionhandledAttributeGetterCallback, DOMWindowV8Internal::onrejectionhandledAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onstorage", DOMWindowV8Internal::onstorageAttributeGetterCallback, DOMWindowV8Internal::onstorageAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onunhandledrejection", DOMWindowV8Internal::onunhandledrejectionAttributeGetterCallback, DOMWindowV8Internal::onunhandledrejectionAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onunload", DOMWindowV8Internal::onunloadAttributeGetterCallback, DOMWindowV8Internal::onunloadAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "performance", DOMWindowV8Internal::performanceAttributeGetterCallback, DOMWindowV8Internal::performanceAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "console", DOMWindowV8Internal::consoleAttributeGetterCallback, nullptr, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8WindowMethods[] = {
    { "stop", DOMWindowV8Internal::stopMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "open", DOMWindowV8Internal::openMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "alert", DOMWindowV8Internal::alertMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "confirm", DOMWindowV8Internal::confirmMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "prompt", DOMWindowV8Internal::promptMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "print", DOMWindowV8Internal::printMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "requestAnimationFrame", DOMWindowV8Internal::requestAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "cancelAnimationFrame", DOMWindowV8Internal::cancelAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "requestIdleCallback", DOMWindowV8Internal::requestIdleCallbackMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "cancelIdleCallback", DOMWindowV8Internal::cancelIdleCallbackMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "captureEvents", DOMWindowV8Internal::captureEventsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "releaseEvents", DOMWindowV8Internal::releaseEventsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "getComputedStyle", DOMWindowV8Internal::getComputedStyleMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "matchMedia", DOMWindowV8Internal::matchMediaMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "moveTo", DOMWindowV8Internal::moveToMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "moveBy", DOMWindowV8Internal::moveByMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "resizeTo", DOMWindowV8Internal::resizeToMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "resizeBy", DOMWindowV8Internal::resizeByMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "getSelection", DOMWindowV8Internal::getSelectionMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "find", DOMWindowV8Internal::findMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "getMatchedCSSRules", DOMWindowV8Internal::getMatchedCSSRulesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "webkitRequestAnimationFrame", DOMWindowV8Internal::webkitRequestAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "webkitCancelAnimationFrame", DOMWindowV8Internal::webkitCancelAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "btoa", DOMWindowV8Internal::btoaMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "atob", DOMWindowV8Internal::atobMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "setTimeout", DOMWindowV8Internal::setTimeoutMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "clearTimeout", DOMWindowV8Internal::clearTimeoutMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "setInterval", DOMWindowV8Internal::setIntervalMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "clearInterval", DOMWindowV8Internal::clearIntervalMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "createImageBitmap", DOMWindowV8Internal::createImageBitmapMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::DoNotCheckHolder },
};

void V8Window::installV8WindowTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8Window::wrapperTypeInfo.interfaceName, V8Window::domTemplateForNamedPropertiesObject(isolate, world), V8Window::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    prototypeTemplate->SetInternalFieldCount(V8Window::internalFieldCount);

    // Global object prototype chain consists of Immutable Prototype Exotic Objects
    prototypeTemplate->SetImmutableProto();

    // Global objects are Immutable Prototype Exotic Objects
    instanceTemplate->SetImmutableProto();

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAttributes(isolate, world, instanceTemplate, prototypeTemplate, V8WindowAttributes, WTF_ARRAY_LENGTH(V8WindowAttributes));
    V8DOMConfiguration::installLazyDataAttributes(isolate, world, instanceTemplate, prototypeTemplate, V8WindowLazyDataAttributes, WTF_ARRAY_LENGTH(V8WindowLazyDataAttributes));
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WindowAccessors, WTF_ARRAY_LENGTH(V8WindowAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WindowMethods, WTF_ARRAY_LENGTH(V8WindowMethods));

    // Cross-origin access check
    instanceTemplate->SetAccessCheckCallbackAndHandler(DOMWindowV8Internal::securityCheck, v8::NamedPropertyHandlerConfiguration(DOMWindowV8Internal::crossOriginNamedGetter, DOMWindowV8Internal::crossOriginNamedSetter, nullptr, nullptr, DOMWindowV8Internal::crossOriginNamedEnumerator), v8::IndexedPropertyHandlerConfiguration(DOMWindowV8Internal::crossOriginIndexedGetter), v8::External::New(isolate, const_cast<WrapperTypeInfo*>(&V8Window::wrapperTypeInfo)));

    if (RuntimeEnabledFeatures::audioVideoTracksEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeAudioTrackConfiguration = { "AudioTrack", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AudioTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAudioTrackConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAudioTrackListConfiguration = { "AudioTrackList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AudioTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAudioTrackListConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeVideoTrackConfiguration = { "VideoTrack", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VideoTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeVideoTrackConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeVideoTrackListConfiguration = { "VideoTrackList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VideoTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeVideoTrackListConfiguration);
    }
    if (RuntimeEnabledFeatures::auxclickEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessoronauxclickConfiguration = { "onauxclick", DOMWindowV8Internal::onauxclickAttributeGetterCallback, DOMWindowV8Internal::onauxclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronauxclickConfiguration);
    }
    if (RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCSSAngleValueConfiguration = { "CSSAngleValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSAngleValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSAngleValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSCalcLengthConfiguration = { "CSSCalcLength", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSCalcLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSCalcLengthConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSImageValueConfiguration = { "CSSImageValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSImageValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSImageValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSKeywordValueConfiguration = { "CSSKeywordValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSKeywordValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSKeywordValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSLengthValueConfiguration = { "CSSLengthValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSLengthValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSLengthValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSMatrixTransformComponentConfiguration = { "CSSMatrixTransformComponent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSMatrixTransformComponent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSMatrixTransformComponentConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSNumberValueConfiguration = { "CSSNumberValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSNumberValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSNumberValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSPerspectiveConfiguration = { "CSSPerspective", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSPerspective::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSPerspectiveConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSPositionValueConfiguration = { "CSSPositionValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSPositionValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSPositionValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSResourceValueConfiguration = { "CSSResourceValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSResourceValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSResourceValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSRotationConfiguration = { "CSSRotation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSRotation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSRotationConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSScaleConfiguration = { "CSSScale", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSScale::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSScaleConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSSimpleLengthConfiguration = { "CSSSimpleLength", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSSimpleLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSSimpleLengthConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSSkewConfiguration = { "CSSSkew", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSSkew::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSSkewConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSStyleValueConfiguration = { "CSSStyleValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSStyleValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSStyleValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSTransformComponentConfiguration = { "CSSTransformComponent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSTransformComponent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSTransformComponentConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSTransformValueConfiguration = { "CSSTransformValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSTransformValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSTransformValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSTranslationConfiguration = { "CSSTranslation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSTranslation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSTranslationConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSUnparsedValueConfiguration = { "CSSUnparsedValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSUnparsedValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSUnparsedValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSURLImageValueConfiguration = { "CSSURLImageValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSURLImageValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSURLImageValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSVariableReferenceValueConfiguration = { "CSSVariableReferenceValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSVariableReferenceValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCSSVariableReferenceValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeStylePropertyMapConfiguration = { "StylePropertyMap", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StylePropertyMap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeStylePropertyMapConfiguration);
    }
    if (RuntimeEnabledFeatures::compositorWorkerEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCompositorProxyConfiguration = { "CompositorProxy", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CompositorProxy::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCompositorProxyConfiguration);
    }
    if (RuntimeEnabledFeatures::contextMenuEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeHTMLMenuItemElementConfiguration = { "HTMLMenuItemElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMenuItemElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeHTMLMenuItemElementConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeRelatedEventConfiguration = { "RelatedEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8RelatedEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeRelatedEventConfiguration);
    }
    if (RuntimeEnabledFeatures::customElementsV1Enabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCustomElementRegistryConfiguration = { "CustomElementRegistry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CustomElementRegistry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCustomElementRegistryConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorcustomElementsConfiguration = { "customElements", DOMWindowV8Internal::customElementsAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorcustomElementsConfiguration);
    }
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        DebugBreak();
        //     const V8DOMConfiguration::AttributeConfiguration attributeFloat32ImageDataConfiguration = {"Float32ImageData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Float32ImageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeFloat32ImageDataConfiguration);
        //     const V8DOMConfiguration::AttributeConfiguration attributeOffscreenCanvasConfiguration = {"OffscreenCanvas", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8OffscreenCanvas::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeOffscreenCanvasConfiguration);
    }
    if (RuntimeEnabledFeatures::geometryInterfacesEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeDOMMatrixConfiguration = { "DOMMatrix", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMMatrixConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMMatrixReadOnlyConfiguration = { "DOMMatrixReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMMatrixReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMMatrixReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMPointConfiguration = { "DOMPoint", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMPoint::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMPointConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMPointReadOnlyConfiguration = { "DOMPointReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMPointReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMPointReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMQuadConfiguration = { "DOMQuad", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMQuad::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMQuadConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMRectConfiguration = { "DOMRect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMRectConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMRectReadOnlyConfiguration = { "DOMRectReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMRectReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMRectReadOnlyConfiguration);
    }
    if (RuntimeEnabledFeatures::inputEventEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeInputEventConfiguration = { "InputEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8InputEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeInputEventConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeStaticRangeConfiguration = { "StaticRange", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StaticRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeStaticRangeConfiguration);
    }
    if (RuntimeEnabledFeatures::intersectionObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeIntersectionObserverConfiguration = { "IntersectionObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IntersectionObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeIntersectionObserverConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeIntersectionObserverEntryConfiguration = { "IntersectionObserverEntry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IntersectionObserverEntry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeIntersectionObserverEntryConfiguration);
    }
    if (RuntimeEnabledFeatures::orientationEventEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessororientationConfiguration = { "orientation", DOMWindowV8Internal::orientationAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessororientationConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronorientationchangeConfiguration = { "onorientationchange", DOMWindowV8Internal::onorientationchangeAttributeGetterCallback, DOMWindowV8Internal::onorientationchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronorientationchangeConfiguration);
    }
    if (RuntimeEnabledFeatures::performanceNavigationTiming2Enabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceNavigationTimingConfiguration = { "PerformanceNavigationTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceNavigationTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePerformanceNavigationTimingConfiguration);
    }
    if (RuntimeEnabledFeatures::performanceObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceObserverConfiguration = { "PerformanceObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePerformanceObserverConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceObserverEntryListConfiguration = { "PerformanceObserverEntryList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceObserverEntryList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePerformanceObserverEntryListConfiguration);
    }
    if (RuntimeEnabledFeatures::performancePaintTimingEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformancePaintTimingConfiguration = { "PerformancePaintTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformancePaintTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePerformancePaintTimingConfiguration);
    }
    if (RuntimeEnabledFeatures::pointerEventEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePointerEventConfiguration = { "PointerEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PointerEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePointerEventConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorongotpointercaptureConfiguration = { "ongotpointercapture", DOMWindowV8Internal::ongotpointercaptureAttributeGetterCallback, DOMWindowV8Internal::ongotpointercaptureAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorongotpointercaptureConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronlostpointercaptureConfiguration = { "onlostpointercapture", DOMWindowV8Internal::onlostpointercaptureAttributeGetterCallback, DOMWindowV8Internal::onlostpointercaptureAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronlostpointercaptureConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointercancelConfiguration = { "onpointercancel", DOMWindowV8Internal::onpointercancelAttributeGetterCallback, DOMWindowV8Internal::onpointercancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointercancelConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerdownConfiguration = { "onpointerdown", DOMWindowV8Internal::onpointerdownAttributeGetterCallback, DOMWindowV8Internal::onpointerdownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerdownConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerenterConfiguration = { "onpointerenter", DOMWindowV8Internal::onpointerenterAttributeGetterCallback, DOMWindowV8Internal::onpointerenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerenterConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerleaveConfiguration = { "onpointerleave", DOMWindowV8Internal::onpointerleaveAttributeGetterCallback, DOMWindowV8Internal::onpointerleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerleaveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointermoveConfiguration = { "onpointermove", DOMWindowV8Internal::onpointermoveAttributeGetterCallback, DOMWindowV8Internal::onpointermoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointermoveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointeroutConfiguration = { "onpointerout", DOMWindowV8Internal::onpointeroutAttributeGetterCallback, DOMWindowV8Internal::onpointeroutAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointeroutConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointeroverConfiguration = { "onpointerover", DOMWindowV8Internal::onpointeroverAttributeGetterCallback, DOMWindowV8Internal::onpointeroverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointeroverConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerupConfiguration = { "onpointerup", DOMWindowV8Internal::onpointerupAttributeGetterCallback, DOMWindowV8Internal::onpointerupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerupConfiguration);
    }
    if (RuntimeEnabledFeatures::resizeObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeResizeObserverConfiguration = { "ResizeObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ResizeObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeResizeObserverConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeResizeObserverEntryConfiguration = { "ResizeObserverEntry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ResizeObserverEntry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeResizeObserverEntryConfiguration);
    }
    if (RuntimeEnabledFeatures::scrollCustomizationEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeScrollStateConfiguration = { "ScrollState", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ScrollState::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeScrollStateConfiguration);
    }
    if (RuntimeEnabledFeatures::sharedWorkerEnabled()) {
        DebugBreak();
        //     const V8DOMConfiguration::AttributeConfiguration attributeSharedWorkerConfiguration = {"SharedWorker", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SharedWorker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeSharedWorkerConfiguration);
    }
    if (RuntimeEnabledFeatures::touchEventFeatureDetectionEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorontouchcancelConfiguration = { "ontouchcancel", DOMWindowV8Internal::ontouchcancelAttributeGetterCallback, DOMWindowV8Internal::ontouchcancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchcancelConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchendConfiguration = { "ontouchend", DOMWindowV8Internal::ontouchendAttributeGetterCallback, DOMWindowV8Internal::ontouchendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchendConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchmoveConfiguration = { "ontouchmove", DOMWindowV8Internal::ontouchmoveAttributeGetterCallback, DOMWindowV8Internal::ontouchmoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchmoveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchstartConfiguration = { "ontouchstart", DOMWindowV8Internal::ontouchstartAttributeGetterCallback, DOMWindowV8Internal::ontouchstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchstartConfiguration);
    }
    if (RuntimeEnabledFeatures::visualViewportAPIEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeVisualViewportConfiguration = { "VisualViewport", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VisualViewport::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeVisualViewportConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorvisualViewportConfiguration = { "visualViewport", DOMWindowV8Internal::visualViewportAttributeGetterCallback, DOMWindowV8Internal::visualViewportAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorvisualViewportConfiguration);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationEffectReadOnlyConfiguration = { "AnimationEffectReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEffectReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAnimationEffectReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationEffectTimingConfiguration = { "AnimationEffectTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEffectTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAnimationEffectTimingConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationEffectTimingReadOnlyConfiguration = { "AnimationEffectTimingReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEffectTimingReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAnimationEffectTimingReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationPlaybackEventConfiguration = { "AnimationPlaybackEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationPlaybackEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAnimationPlaybackEventConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationTimelineConfiguration = { "AnimationTimeline", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationTimeline::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeAnimationTimelineConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDocumentTimelineConfiguration = { "DocumentTimeline", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DocumentTimeline::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDocumentTimelineConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeKeyframeEffectConfiguration = { "KeyframeEffect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8KeyframeEffect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeKeyframeEffectConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeKeyframeEffectReadOnlyConfiguration = { "KeyframeEffectReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8KeyframeEffectReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeKeyframeEffectReadOnlyConfiguration);
    }
    if (RuntimeEnabledFeatures::webVTTRegionsEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeVTTRegionConfiguration = { "VTTRegion", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VTTRegion::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeVTTRegionConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeVTTRegionListConfiguration = { "VTTRegionList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VTTRegionList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeVTTRegionListConfiguration);
    }
    if (RuntimeEnabledFeatures::workletEnabled()) {
        //    const V8DOMConfiguration::AttributeConfiguration attributeWorkletConfiguration = {"Worklet", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Worklet::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //    V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeWorkletConfiguration);
    }
    if (RuntimeEnabledFeatures::xsltEnabled()) {
        //     const V8DOMConfiguration::AttributeConfiguration attributeXSLTProcessorConfiguration = {"XSLTProcessor", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XSLTProcessor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeXSLTProcessorConfiguration);
    }
    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeSVGAnimationElementConfiguration = { "SVGAnimationElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimationElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeSVGAnimationElementConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeSVGDiscardElementConfiguration = { "SVGDiscardElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGDiscardElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeSVGDiscardElementConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeSVGMPathElementConfiguration = { "SVGMPathElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGMPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeSVGMPathElementConfiguration);
    }

    // Indexed properties
    v8::IndexedPropertyHandlerConfiguration indexedPropertyHandlerConfig(DOMWindowV8Internal::indexedPropertyGetterCallback, 0, 0, 0, 0, v8::Local<v8::Value>(), v8::PropertyHandlerFlags::kNone);
    instanceTemplate->SetHandler(indexedPropertyHandlerConfig);

    const V8DOMConfiguration::AttributeConfiguration closeOriginSafeAttributeConfiguration = {
        "close", DOMWindowV8Internal::closeOriginSafeMethodGetterCallback, DOMWindowV8Internal::DOMWindowOriginSafeMethodSetterCallback, 0, 0, nullptr, &V8Window::wrapperTypeInfo, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder
    };
    V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, closeOriginSafeAttributeConfiguration);
    const V8DOMConfiguration::AttributeConfiguration focusOriginSafeAttributeConfiguration = {
        "focus", DOMWindowV8Internal::focusOriginSafeMethodGetterCallback, DOMWindowV8Internal::DOMWindowOriginSafeMethodSetterCallback, 0, 0, nullptr, &V8Window::wrapperTypeInfo, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder
    };
    V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, focusOriginSafeAttributeConfiguration);
    const V8DOMConfiguration::AttributeConfiguration blurOriginSafeAttributeConfiguration = {
        "blur", DOMWindowV8Internal::blurOriginSafeMethodGetterCallback, DOMWindowV8Internal::DOMWindowOriginSafeMethodSetterCallback, 0, 0, nullptr, &V8Window::wrapperTypeInfo, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder
    };
    V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, blurOriginSafeAttributeConfiguration);
    const V8DOMConfiguration::AttributeConfiguration postMessageOriginSafeAttributeConfiguration = {
        "postMessage", DOMWindowV8Internal::postMessageOriginSafeMethodGetterCallback, DOMWindowV8Internal::DOMWindowOriginSafeMethodSetterCallback, 0, 0, nullptr, &V8Window::wrapperTypeInfo, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder
    };
    V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, postMessageOriginSafeAttributeConfiguration);
    const V8DOMConfiguration::MethodConfiguration scrollMethodConfiguration = { "scroll", DOMWindowV8Internal::scrollMethodCallback, 0, DOMWindowV8Internal::scrollMethodLength(), v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, scrollMethodConfiguration);
    const V8DOMConfiguration::MethodConfiguration scrollToMethodConfiguration = { "scrollTo", DOMWindowV8Internal::scrollToMethodCallback, 0, DOMWindowV8Internal::scrollToMethodLength(), v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, scrollToMethodConfiguration);
    const V8DOMConfiguration::MethodConfiguration scrollByMethodConfiguration = { "scrollBy", DOMWindowV8Internal::scrollByMethodCallback, 0, DOMWindowV8Internal::scrollByMethodLength(), v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, scrollByMethodConfiguration);
    if (RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getComputedStyleMapMethodConfiguration = { "getComputedStyleMap", DOMWindowV8Internal::getComputedStyleMapMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, getComputedStyleMapMethodConfiguration);
    }
}

void V8Window::installRuntimeEnabledFeatures(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8Window::wrapperTypeInfo.domTemplate(isolate, world);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);

    if (RuntimeEnabledFeatures::audioVideoTracksEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeAudioTrackConfiguration = { "AudioTrack", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AudioTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAudioTrackConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAudioTrackListConfiguration = { "AudioTrackList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AudioTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAudioTrackListConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeVideoTrackConfiguration = { "VideoTrack", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VideoTrack::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeVideoTrackConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeVideoTrackListConfiguration = { "VideoTrackList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VideoTrackList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeVideoTrackListConfiguration);
    }
    if (RuntimeEnabledFeatures::auxclickEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessoronauxclickConfiguration = { "onauxclick", DOMWindowV8Internal::onauxclickAttributeGetterCallback, DOMWindowV8Internal::onauxclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronauxclickConfiguration);
    }
    if (RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCSSAngleValueConfiguration = { "CSSAngleValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSAngleValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSAngleValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSCalcLengthConfiguration = { "CSSCalcLength", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSCalcLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSCalcLengthConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSImageValueConfiguration = { "CSSImageValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSImageValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSImageValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSKeywordValueConfiguration = { "CSSKeywordValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSKeywordValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSKeywordValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSLengthValueConfiguration = { "CSSLengthValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSLengthValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSLengthValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSMatrixTransformComponentConfiguration = { "CSSMatrixTransformComponent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSMatrixTransformComponent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSMatrixTransformComponentConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSNumberValueConfiguration = { "CSSNumberValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSNumberValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSNumberValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSPerspectiveConfiguration = { "CSSPerspective", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSPerspective::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSPerspectiveConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSPositionValueConfiguration = { "CSSPositionValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSPositionValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSPositionValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSResourceValueConfiguration = { "CSSResourceValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSResourceValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSResourceValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSRotationConfiguration = { "CSSRotation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSRotation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSRotationConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSScaleConfiguration = { "CSSScale", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSScale::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSScaleConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSSimpleLengthConfiguration = { "CSSSimpleLength", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSSimpleLength::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSSimpleLengthConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSSkewConfiguration = { "CSSSkew", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSSkew::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSSkewConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSStyleValueConfiguration = { "CSSStyleValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSStyleValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSStyleValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSTransformComponentConfiguration = { "CSSTransformComponent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSTransformComponent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSTransformComponentConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSTransformValueConfiguration = { "CSSTransformValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSTransformValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSTransformValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSTranslationConfiguration = { "CSSTranslation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSTranslation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSTranslationConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSUnparsedValueConfiguration = { "CSSUnparsedValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSUnparsedValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSUnparsedValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSURLImageValueConfiguration = { "CSSURLImageValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSURLImageValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSURLImageValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCSSVariableReferenceValueConfiguration = { "CSSVariableReferenceValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CSSVariableReferenceValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCSSVariableReferenceValueConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeStylePropertyMapConfiguration = { "StylePropertyMap", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StylePropertyMap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeStylePropertyMapConfiguration);
    }
    if (RuntimeEnabledFeatures::compositorWorkerEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCompositorProxyConfiguration = { "CompositorProxy", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CompositorProxy::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCompositorProxyConfiguration);
    }
    if (RuntimeEnabledFeatures::contextMenuEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeHTMLMenuItemElementConfiguration = { "HTMLMenuItemElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8HTMLMenuItemElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeHTMLMenuItemElementConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeRelatedEventConfiguration = { "RelatedEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8RelatedEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeRelatedEventConfiguration);
    }
    if (RuntimeEnabledFeatures::customElementsV1Enabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCustomElementRegistryConfiguration = { "CustomElementRegistry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CustomElementRegistry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeCustomElementRegistryConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorcustomElementsConfiguration = { "customElements", DOMWindowV8Internal::customElementsAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorcustomElementsConfiguration);
    }
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        //     const V8DOMConfiguration::AttributeConfiguration attributeFloat32ImageDataConfiguration = {"Float32ImageData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Float32ImageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeFloat32ImageDataConfiguration);
        //     const V8DOMConfiguration::AttributeConfiguration attributeOffscreenCanvasConfiguration = {"OffscreenCanvas", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8OffscreenCanvas::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeOffscreenCanvasConfiguration);
        DebugBreak();
    }
    if (RuntimeEnabledFeatures::geometryInterfacesEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeDOMMatrixConfiguration = { "DOMMatrix", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMMatrixConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMMatrixReadOnlyConfiguration = { "DOMMatrixReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMMatrixReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMMatrixReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMPointConfiguration = { "DOMPoint", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMPoint::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMPointConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMPointReadOnlyConfiguration = { "DOMPointReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMPointReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMPointReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMQuadConfiguration = { "DOMQuad", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMQuad::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMQuadConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMRectConfiguration = { "DOMRect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMRect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMRectConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMRectReadOnlyConfiguration = { "DOMRectReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMRectReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDOMRectReadOnlyConfiguration);
    }
    if (RuntimeEnabledFeatures::inputEventEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeInputEventConfiguration = { "InputEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8InputEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeInputEventConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeStaticRangeConfiguration = { "StaticRange", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StaticRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeStaticRangeConfiguration);
    }
    if (RuntimeEnabledFeatures::intersectionObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeIntersectionObserverConfiguration = { "IntersectionObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IntersectionObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeIntersectionObserverConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeIntersectionObserverEntryConfiguration = { "IntersectionObserverEntry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IntersectionObserverEntry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeIntersectionObserverEntryConfiguration);
    }
    if (RuntimeEnabledFeatures::orientationEventEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessororientationConfiguration = { "orientation", DOMWindowV8Internal::orientationAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessororientationConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronorientationchangeConfiguration = { "onorientationchange", DOMWindowV8Internal::onorientationchangeAttributeGetterCallback, DOMWindowV8Internal::onorientationchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronorientationchangeConfiguration);
    }
    if (RuntimeEnabledFeatures::performanceNavigationTiming2Enabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceNavigationTimingConfiguration = { "PerformanceNavigationTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceNavigationTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributePerformanceNavigationTimingConfiguration);
    }
    if (RuntimeEnabledFeatures::performanceObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceObserverConfiguration = { "PerformanceObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributePerformanceObserverConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceObserverEntryListConfiguration = { "PerformanceObserverEntryList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceObserverEntryList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributePerformanceObserverEntryListConfiguration);
    }
    if (RuntimeEnabledFeatures::performancePaintTimingEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformancePaintTimingConfiguration = { "PerformancePaintTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformancePaintTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributePerformancePaintTimingConfiguration);
    }
    if (RuntimeEnabledFeatures::pointerEventEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePointerEventConfiguration = { "PointerEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PointerEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributePointerEventConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorongotpointercaptureConfiguration = { "ongotpointercapture", DOMWindowV8Internal::ongotpointercaptureAttributeGetterCallback, DOMWindowV8Internal::ongotpointercaptureAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorongotpointercaptureConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronlostpointercaptureConfiguration = { "onlostpointercapture", DOMWindowV8Internal::onlostpointercaptureAttributeGetterCallback, DOMWindowV8Internal::onlostpointercaptureAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronlostpointercaptureConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointercancelConfiguration = { "onpointercancel", DOMWindowV8Internal::onpointercancelAttributeGetterCallback, DOMWindowV8Internal::onpointercancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointercancelConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerdownConfiguration = { "onpointerdown", DOMWindowV8Internal::onpointerdownAttributeGetterCallback, DOMWindowV8Internal::onpointerdownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointerdownConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerenterConfiguration = { "onpointerenter", DOMWindowV8Internal::onpointerenterAttributeGetterCallback, DOMWindowV8Internal::onpointerenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointerenterConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerleaveConfiguration = { "onpointerleave", DOMWindowV8Internal::onpointerleaveAttributeGetterCallback, DOMWindowV8Internal::onpointerleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointerleaveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointermoveConfiguration = { "onpointermove", DOMWindowV8Internal::onpointermoveAttributeGetterCallback, DOMWindowV8Internal::onpointermoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointermoveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointeroutConfiguration = { "onpointerout", DOMWindowV8Internal::onpointeroutAttributeGetterCallback, DOMWindowV8Internal::onpointeroutAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointeroutConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointeroverConfiguration = { "onpointerover", DOMWindowV8Internal::onpointeroverAttributeGetterCallback, DOMWindowV8Internal::onpointeroverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointeroverConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerupConfiguration = { "onpointerup", DOMWindowV8Internal::onpointerupAttributeGetterCallback, DOMWindowV8Internal::onpointerupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronpointerupConfiguration);
    }
    if (RuntimeEnabledFeatures::resizeObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeResizeObserverConfiguration = { "ResizeObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ResizeObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeResizeObserverConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeResizeObserverEntryConfiguration = { "ResizeObserverEntry", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ResizeObserverEntry::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeResizeObserverEntryConfiguration);
    }
    if (RuntimeEnabledFeatures::scrollCustomizationEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeScrollStateConfiguration = { "ScrollState", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ScrollState::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeScrollStateConfiguration);
    }
    if (RuntimeEnabledFeatures::sharedWorkerEnabled()) {
        //     const V8DOMConfiguration::AttributeConfiguration attributeSharedWorkerConfiguration = {"SharedWorker", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SharedWorker::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeSharedWorkerConfiguration);
        DebugBreak();
    }
    if (RuntimeEnabledFeatures::touchEventFeatureDetectionEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorontouchcancelConfiguration = { "ontouchcancel", DOMWindowV8Internal::ontouchcancelAttributeGetterCallback, DOMWindowV8Internal::ontouchcancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorontouchcancelConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchendConfiguration = { "ontouchend", DOMWindowV8Internal::ontouchendAttributeGetterCallback, DOMWindowV8Internal::ontouchendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorontouchendConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchmoveConfiguration = { "ontouchmove", DOMWindowV8Internal::ontouchmoveAttributeGetterCallback, DOMWindowV8Internal::ontouchmoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorontouchmoveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchstartConfiguration = { "ontouchstart", DOMWindowV8Internal::ontouchstartAttributeGetterCallback, DOMWindowV8Internal::ontouchstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorontouchstartConfiguration);
    }
    if (RuntimeEnabledFeatures::visualViewportAPIEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeVisualViewportConfiguration = { "VisualViewport", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VisualViewport::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeVisualViewportConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorvisualViewportConfiguration = { "visualViewport", DOMWindowV8Internal::visualViewportAttributeGetterCallback, DOMWindowV8Internal::visualViewportAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorvisualViewportConfiguration);
    }
    if (RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationEffectReadOnlyConfiguration = { "AnimationEffectReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEffectReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAnimationEffectReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationEffectTimingConfiguration = { "AnimationEffectTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEffectTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAnimationEffectTimingConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationEffectTimingReadOnlyConfiguration = { "AnimationEffectTimingReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationEffectTimingReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAnimationEffectTimingReadOnlyConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationPlaybackEventConfiguration = { "AnimationPlaybackEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationPlaybackEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAnimationPlaybackEventConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeAnimationTimelineConfiguration = { "AnimationTimeline", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8AnimationTimeline::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeAnimationTimelineConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDocumentTimelineConfiguration = { "DocumentTimeline", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DocumentTimeline::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeDocumentTimelineConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeKeyframeEffectConfiguration = { "KeyframeEffect", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8KeyframeEffect::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeKeyframeEffectConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeKeyframeEffectReadOnlyConfiguration = { "KeyframeEffectReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8KeyframeEffectReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeKeyframeEffectReadOnlyConfiguration);
    }
    if (RuntimeEnabledFeatures::webVTTRegionsEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeVTTRegionConfiguration = { "VTTRegion", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VTTRegion::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeVTTRegionConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeVTTRegionListConfiguration = { "VTTRegionList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8VTTRegionList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeVTTRegionListConfiguration);
    }
    if (RuntimeEnabledFeatures::workletEnabled()) {
        //     const V8DOMConfiguration::AttributeConfiguration attributeWorkletConfiguration = {"Worklet", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Worklet::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeWorkletConfiguration);
    }
    if (RuntimeEnabledFeatures::xsltEnabled()) {
        //     const V8DOMConfiguration::AttributeConfiguration attributeXSLTProcessorConfiguration = {"XSLTProcessor", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8XSLTProcessor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        //     V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeXSLTProcessorConfiguration);
    }
    if (RuntimeEnabledFeatures::smilEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeSVGAnimationElementConfiguration = { "SVGAnimationElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGAnimationElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeSVGAnimationElementConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeSVGDiscardElementConfiguration = { "SVGDiscardElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGDiscardElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeSVGDiscardElementConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeSVGMPathElementConfiguration = { "SVGMPathElement", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SVGMPathElement::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeSVGMPathElementConfiguration);
    }

    if (RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getComputedStyleMapMethodConfiguration = { "getComputedStyleMap", DOMWindowV8Internal::getComputedStyleMapMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instance, prototype, interface, signature, getComputedStyleMapMethodConfiguration);
    }
}

void V8Window::installLongTaskObserver(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8Window::wrapperTypeInfo.domTemplate(isolate, world);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    const V8DOMConfiguration::AttributeConfiguration attributePerformanceLongTaskTimingConfiguration = { "PerformanceLongTaskTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceLongTaskTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributePerformanceLongTaskTimingConfiguration);
    const V8DOMConfiguration::AttributeConfiguration attributeTaskAttributionTimingConfiguration = { "TaskAttributionTiming", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TaskAttributionTiming::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeTaskAttributionTimingConfiguration);
}

void V8Window::installLongTaskObserver(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8Window::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8Window::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    installLongTaskObserver(scriptState->isolate(), scriptState->world(), instance, prototype, interface);
}

v8::Local<v8::FunctionTemplate> V8Window::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), V8Window::installV8WindowTemplateFunction);
}

v8::Local<v8::FunctionTemplate> V8Window::domTemplateForNamedPropertiesObject(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    v8::Local<v8::FunctionTemplate> parentTemplate = V8EventTarget::domTemplate(isolate, world);

    v8::Local<v8::FunctionTemplate> namedPropertiesObjectFunctionTemplate = v8::FunctionTemplate::New(isolate, V8ObjectConstructor::isValidConstructorMode);
    namedPropertiesObjectFunctionTemplate->SetClassName(v8AtomicString(isolate, "WindowProperties"));
    namedPropertiesObjectFunctionTemplate->Inherit(parentTemplate);

    v8::Local<v8::ObjectTemplate> namedPropertiesObjectTemplate = namedPropertiesObjectFunctionTemplate->PrototypeTemplate();
    namedPropertiesObjectTemplate->SetInternalFieldCount(V8Window::internalFieldCount);
    // Named Properties object has SetPrototype method of Immutable Prototype Exotic Objects
    namedPropertiesObjectTemplate->SetImmutableProto();
    V8DOMConfiguration::setClassString(isolate, namedPropertiesObjectTemplate, "WindowProperties");
    v8::NamedPropertyHandlerConfiguration namedPropertyHandlerConfig(DOMWindowV8Internal::namedPropertyGetterCallback, 0, 0, 0, 0, v8::Local<v8::Value>(), static_cast<v8::PropertyHandlerFlags>(int(v8::PropertyHandlerFlags::kOnlyInterceptStrings) | int(v8::PropertyHandlerFlags::kNonMasking)));
    namedPropertiesObjectTemplate->SetHandler(namedPropertyHandlerConfig);

    return namedPropertiesObjectFunctionTemplate;
}

bool V8Window::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Window::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DOMWindow* V8Window::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

InstallTemplateFunction V8Window::installV8WindowTemplateFunction = (InstallTemplateFunction)&V8Window::installV8WindowTemplate;

void V8Window::updateWrapperTypeInfo(InstallTemplateFunction installTemplateFunction, PreparePrototypeAndInterfaceObjectFunction preparePrototypeAndInterfaceObjectFunction)
{
    V8Window::installV8WindowTemplateFunction = installTemplateFunction;
    if (preparePrototypeAndInterfaceObjectFunction)
        V8Window::wrapperTypeInfo.preparePrototypeAndInterfaceObjectFunction = preparePrototypeAndInterfaceObjectFunction;
}

} // namespace blink
