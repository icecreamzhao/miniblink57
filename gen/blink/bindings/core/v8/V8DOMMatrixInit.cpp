// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8DOMMatrixInit.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8DOMMatrixInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, DOMMatrixInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> aValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "a")).ToLocal(&aValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (aValue.IsEmpty() || aValue->IsUndefined()) {
        // Do nothing.
    } else {
        double a = toDouble(isolate, aValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setA(a);
    }

    v8::Local<v8::Value> bValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "b")).ToLocal(&bValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (bValue.IsEmpty() || bValue->IsUndefined()) {
        // Do nothing.
    } else {
        double b = toDouble(isolate, bValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setB(b);
    }

    v8::Local<v8::Value> cValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "c")).ToLocal(&cValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (cValue.IsEmpty() || cValue->IsUndefined()) {
        // Do nothing.
    } else {
        double c = toDouble(isolate, cValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setC(c);
    }

    v8::Local<v8::Value> dValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "d")).ToLocal(&dValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (dValue.IsEmpty() || dValue->IsUndefined()) {
        // Do nothing.
    } else {
        double d = toDouble(isolate, dValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setD(d);
    }

    v8::Local<v8::Value> eValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "e")).ToLocal(&eValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (eValue.IsEmpty() || eValue->IsUndefined()) {
        // Do nothing.
    } else {
        double e = toDouble(isolate, eValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setE(e);
    }

    v8::Local<v8::Value> fValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "f")).ToLocal(&fValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (fValue.IsEmpty() || fValue->IsUndefined()) {
        // Do nothing.
    } else {
        double f = toDouble(isolate, fValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setF(f);
    }

    v8::Local<v8::Value> is2DValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "is2D")).ToLocal(&is2DValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (is2DValue.IsEmpty() || is2DValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool is2D = toBoolean(isolate, is2DValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setIs2D(is2D);
    }

    v8::Local<v8::Value> m11Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m11")).ToLocal(&m11Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m11Value.IsEmpty() || m11Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m11 = toDouble(isolate, m11Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM11(m11);
    }

    v8::Local<v8::Value> m12Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m12")).ToLocal(&m12Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m12Value.IsEmpty() || m12Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m12 = toDouble(isolate, m12Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM12(m12);
    }

    v8::Local<v8::Value> m13Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m13")).ToLocal(&m13Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m13Value.IsEmpty() || m13Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m13 = toDouble(isolate, m13Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM13(m13);
    }

    v8::Local<v8::Value> m14Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m14")).ToLocal(&m14Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m14Value.IsEmpty() || m14Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m14 = toDouble(isolate, m14Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM14(m14);
    }

    v8::Local<v8::Value> m21Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m21")).ToLocal(&m21Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m21Value.IsEmpty() || m21Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m21 = toDouble(isolate, m21Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM21(m21);
    }

    v8::Local<v8::Value> m22Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m22")).ToLocal(&m22Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m22Value.IsEmpty() || m22Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m22 = toDouble(isolate, m22Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM22(m22);
    }

    v8::Local<v8::Value> m23Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m23")).ToLocal(&m23Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m23Value.IsEmpty() || m23Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m23 = toDouble(isolate, m23Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM23(m23);
    }

    v8::Local<v8::Value> m24Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m24")).ToLocal(&m24Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m24Value.IsEmpty() || m24Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m24 = toDouble(isolate, m24Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM24(m24);
    }

    v8::Local<v8::Value> m31Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m31")).ToLocal(&m31Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m31Value.IsEmpty() || m31Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m31 = toDouble(isolate, m31Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM31(m31);
    }

    v8::Local<v8::Value> m32Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m32")).ToLocal(&m32Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m32Value.IsEmpty() || m32Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m32 = toDouble(isolate, m32Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM32(m32);
    }

    v8::Local<v8::Value> m33Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m33")).ToLocal(&m33Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m33Value.IsEmpty() || m33Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m33 = toDouble(isolate, m33Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM33(m33);
    }

    v8::Local<v8::Value> m34Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m34")).ToLocal(&m34Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m34Value.IsEmpty() || m34Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m34 = toDouble(isolate, m34Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM34(m34);
    }

    v8::Local<v8::Value> m41Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m41")).ToLocal(&m41Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m41Value.IsEmpty() || m41Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m41 = toDouble(isolate, m41Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM41(m41);
    }

    v8::Local<v8::Value> m42Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m42")).ToLocal(&m42Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m42Value.IsEmpty() || m42Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m42 = toDouble(isolate, m42Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM42(m42);
    }

    v8::Local<v8::Value> m43Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m43")).ToLocal(&m43Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m43Value.IsEmpty() || m43Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m43 = toDouble(isolate, m43Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM43(m43);
    }

    v8::Local<v8::Value> m44Value;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "m44")).ToLocal(&m44Value)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (m44Value.IsEmpty() || m44Value->IsUndefined()) {
        // Do nothing.
    } else {
        double m44 = toDouble(isolate, m44Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setM44(m44);
    }
}

v8::Local<v8::Value> DOMMatrixInit::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8DOMMatrixInit(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8DOMMatrixInit(const DOMMatrixInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasA()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "a"), v8::Number::New(isolate, impl.a()))))
            return false;
    }

    if (impl.hasB()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "b"), v8::Number::New(isolate, impl.b()))))
            return false;
    }

    if (impl.hasC()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "c"), v8::Number::New(isolate, impl.c()))))
            return false;
    }

    if (impl.hasD()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "d"), v8::Number::New(isolate, impl.d()))))
            return false;
    }

    if (impl.hasE()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "e"), v8::Number::New(isolate, impl.e()))))
            return false;
    }

    if (impl.hasF()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "f"), v8::Number::New(isolate, impl.f()))))
            return false;
    }

    if (impl.hasIs2D()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "is2D"), v8Boolean(impl.is2D(), isolate))))
            return false;
    }

    if (impl.hasM11()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m11"), v8::Number::New(isolate, impl.m11()))))
            return false;
    }

    if (impl.hasM12()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m12"), v8::Number::New(isolate, impl.m12()))))
            return false;
    }

    if (impl.hasM13()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m13"), v8::Number::New(isolate, impl.m13()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m13"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM14()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m14"), v8::Number::New(isolate, impl.m14()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m14"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM21()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m21"), v8::Number::New(isolate, impl.m21()))))
            return false;
    }

    if (impl.hasM22()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m22"), v8::Number::New(isolate, impl.m22()))))
            return false;
    }

    if (impl.hasM23()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m23"), v8::Number::New(isolate, impl.m23()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m23"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM24()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m24"), v8::Number::New(isolate, impl.m24()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m24"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM31()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m31"), v8::Number::New(isolate, impl.m31()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m31"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM32()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m32"), v8::Number::New(isolate, impl.m32()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m32"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM33()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m33"), v8::Number::New(isolate, impl.m33()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m33"), v8::Number::New(isolate, 1))))
            return false;
    }

    if (impl.hasM34()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m34"), v8::Number::New(isolate, impl.m34()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m34"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM41()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m41"), v8::Number::New(isolate, impl.m41()))))
            return false;
    }

    if (impl.hasM42()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m42"), v8::Number::New(isolate, impl.m42()))))
            return false;
    }

    if (impl.hasM43()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m43"), v8::Number::New(isolate, impl.m43()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m43"), v8::Number::New(isolate, 0))))
            return false;
    }

    if (impl.hasM44()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m44"), v8::Number::New(isolate, impl.m44()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "m44"), v8::Number::New(isolate, 1))))
            return false;
    }

    return true;
}

DOMMatrixInit NativeValueTraits<DOMMatrixInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    DOMMatrixInit impl;
    V8DOMMatrixInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
