// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.h.tmpl

// clang-format on
#ifndef HTMLScriptElementOrSVGScriptElement_h
#define HTMLScriptElementOrSVGScriptElement_h

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8Binding.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class HTMLScriptElement;
class SVGScriptElement;

class CORE_EXPORT HTMLScriptElementOrSVGScriptElement final {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    HTMLScriptElementOrSVGScriptElement();
    bool isNull() const { return m_type == SpecificTypeNone; }

    bool isHTMLScriptElement() const { return m_type == SpecificTypeHTMLScriptElement; }
    HTMLScriptElement* getAsHTMLScriptElement() const;
    void setHTMLScriptElement(HTMLScriptElement*);
    static HTMLScriptElementOrSVGScriptElement fromHTMLScriptElement(HTMLScriptElement*);

    bool isSVGScriptElement() const { return m_type == SpecificTypeSVGScriptElement; }
    SVGScriptElement* getAsSVGScriptElement() const;
    void setSVGScriptElement(SVGScriptElement*);
    static HTMLScriptElementOrSVGScriptElement fromSVGScriptElement(SVGScriptElement*);

    HTMLScriptElementOrSVGScriptElement(const HTMLScriptElementOrSVGScriptElement&);
    ~HTMLScriptElementOrSVGScriptElement();
    HTMLScriptElementOrSVGScriptElement& operator=(const HTMLScriptElementOrSVGScriptElement&);
    DECLARE_TRACE();

private:
    enum SpecificTypes {
        SpecificTypeNone,
        SpecificTypeHTMLScriptElement,
        SpecificTypeSVGScriptElement,
    };
    SpecificTypes m_type;

    Member<HTMLScriptElement> m_htmlScriptElement;
    Member<SVGScriptElement> m_svgScriptElement;

    friend CORE_EXPORT v8::Local<v8::Value> ToV8(const HTMLScriptElementOrSVGScriptElement&, v8::Local<v8::Object>, v8::Isolate*);
};

class V8HTMLScriptElementOrSVGScriptElement final {
public:
    CORE_EXPORT static void toImpl(v8::Isolate*, v8::Local<v8::Value>, HTMLScriptElementOrSVGScriptElement&, UnionTypeConversionMode, ExceptionState&);
};

CORE_EXPORT v8::Local<v8::Value> ToV8(const HTMLScriptElementOrSVGScriptElement&, v8::Local<v8::Object>, v8::Isolate*);

template <class CallbackInfo>
inline void v8SetReturnValue(const CallbackInfo& callbackInfo, HTMLScriptElementOrSVGScriptElement& impl)
{
    v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
}

template <>
struct NativeValueTraits<HTMLScriptElementOrSVGScriptElement> {
    CORE_EXPORT static HTMLScriptElementOrSVGScriptElement nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
};

} // namespace blink

// We need to set canInitializeWithMemset=true because HeapVector supports
// items that can initialize with memset or have a vtable. It is safe to
// set canInitializeWithMemset=true for a union type object in practice.
// See https://codereview.chromium.org/1118993002/#msg5 for more details.
WTF_ALLOW_MOVE_AND_INIT_WITH_MEM_FUNCTIONS(blink::HTMLScriptElementOrSVGScriptElement);

#endif // HTMLScriptElementOrSVGScriptElement_h
