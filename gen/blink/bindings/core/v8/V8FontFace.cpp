// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8FontFace.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/StringOrArrayBufferOrArrayBufferView.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8FontFaceDescriptors.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "core/inspector/ConsoleMessage.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8FontFace::wrapperTypeInfo = { gin::kEmbedderBlink, V8FontFace::domTemplate, V8FontFace::trace, V8FontFace::traceWrappers, 0, nullptr, "FontFace", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in FontFace.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& FontFace::s_wrapperTypeInfo = V8FontFace::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, FontFace>::value,
    "FontFace does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&FontFace::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "FontFace is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace FontFaceV8Internal {

    static void familyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->family(), info.GetIsolate());
    }

    CORE_EXPORT void familyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::familyAttributeGetter(info);
    }

    static void familyAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "family");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setFamily(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void familyAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::familyAttributeSetter(v8Value, info);
    }

    static void styleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->style(), info.GetIsolate());
    }

    CORE_EXPORT void styleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::styleAttributeGetter(info);
    }

    static void styleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "style");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setStyle(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void styleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::styleAttributeSetter(v8Value, info);
    }

    static void weightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->weight(), info.GetIsolate());
    }

    CORE_EXPORT void weightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::weightAttributeGetter(info);
    }

    static void weightAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "weight");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setWeight(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void weightAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::weightAttributeSetter(v8Value, info);
    }

    static void stretchAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->stretch(), info.GetIsolate());
    }

    CORE_EXPORT void stretchAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::stretchAttributeGetter(info);
    }

    static void stretchAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "stretch");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setStretch(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void stretchAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::stretchAttributeSetter(v8Value, info);
    }

    static void unicodeRangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->unicodeRange(), info.GetIsolate());
    }

    CORE_EXPORT void unicodeRangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::unicodeRangeAttributeGetter(info);
    }

    static void unicodeRangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "unicodeRange");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setUnicodeRange(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void unicodeRangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::unicodeRangeAttributeSetter(v8Value, info);
    }

    static void variantAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->variant(), info.GetIsolate());
    }

    CORE_EXPORT void variantAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::variantAttributeGetter(info);
    }

    static void variantAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "variant");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setVariant(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void variantAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::variantAttributeSetter(v8Value, info);
    }

    static void featureSettingsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->featureSettings(), info.GetIsolate());
    }

    CORE_EXPORT void featureSettingsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::featureSettingsAttributeGetter(info);
    }

    static void featureSettingsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "featureSettings");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setFeatureSettings(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void featureSettingsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::featureSettingsAttributeSetter(v8Value, info);
    }

    static void displayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->display(), info.GetIsolate());
    }

    CORE_EXPORT void displayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::displayAttributeGetter(info);
    }

    static void displayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        FontFace* impl = V8FontFace::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "FontFace", "display");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());

        impl->setDisplay(executionContext, cppValue, exceptionState);
    }

    CORE_EXPORT void displayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        FontFaceV8Internal::displayAttributeSetter(v8Value, info);
    }

    static void statusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        v8SetReturnValueString(info, impl->status(), info.GetIsolate());
    }

    CORE_EXPORT void statusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::statusAttributeGetter(info);
    }

    static void loadedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        FontFace* impl = V8FontFace::toImpl(holder);

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        v8SetReturnValue(info, impl->loaded(scriptState).v8Value());
    }

    CORE_EXPORT void loadedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::loadedAttributeGetter(info);
    }

    static void loadMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "FontFace", "load");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8FontFace::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        FontFace* impl = V8FontFace::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptPromise result = impl->load(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    CORE_EXPORT void loadMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FontFaceV8Internal::loadMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "FontFace");

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        V8StringResource<> family;
        StringOrArrayBufferOrArrayBufferView source;
        FontFaceDescriptors descriptors;
        family = info[0];
        if (!family.prepare())
            return;

        V8StringOrArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[1], source, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('descriptors') is not an object.");

            return;
        }
        V8FontFaceDescriptors::toImpl(info.GetIsolate(), info[2], descriptors, exceptionState);
        if (exceptionState.hadException())
            return;

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
        FontFace* impl = FontFace::create(executionContext, family, source, descriptors);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8FontFace::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace FontFaceV8Internal

const V8DOMConfiguration::AccessorConfiguration V8FontFaceAccessors[] = {
    { "family", FontFaceV8Internal::familyAttributeGetterCallback, FontFaceV8Internal::familyAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "style", FontFaceV8Internal::styleAttributeGetterCallback, FontFaceV8Internal::styleAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "weight", FontFaceV8Internal::weightAttributeGetterCallback, FontFaceV8Internal::weightAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "stretch", FontFaceV8Internal::stretchAttributeGetterCallback, FontFaceV8Internal::stretchAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "unicodeRange", FontFaceV8Internal::unicodeRangeAttributeGetterCallback, FontFaceV8Internal::unicodeRangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "variant", FontFaceV8Internal::variantAttributeGetterCallback, FontFaceV8Internal::variantAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "featureSettings", FontFaceV8Internal::featureSettingsAttributeGetterCallback, FontFaceV8Internal::featureSettingsAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "status", FontFaceV8Internal::statusAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "loaded", FontFaceV8Internal::loadedAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8FontFaceMethods[] = {
    { "load", FontFaceV8Internal::loadMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
};

void V8FontFace::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::FontFaceConstructor);
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("FontFace"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    FontFaceV8Internal::constructor(info);
}

static void installV8FontFaceTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8FontFace::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8FontFace::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8FontFace::constructorCallback);
    interfaceTemplate->SetLength(2);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8FontFaceAccessors, WTF_ARRAY_LENGTH(V8FontFaceAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8FontFaceMethods, WTF_ARRAY_LENGTH(V8FontFaceMethods));

    if (RuntimeEnabledFeatures::cssFontDisplayEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessordisplayConfiguration = { "display", FontFaceV8Internal::displayAttributeGetterCallback, FontFaceV8Internal::displayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessordisplayConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8FontFace::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8FontFaceTemplate);
}

bool V8FontFace::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8FontFace::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

FontFace* V8FontFace::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
