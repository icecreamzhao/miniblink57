// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8DOMMatrixReadOnly.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMMatrix.h"
#include "bindings/core/v8/V8DOMMatrixInit.h"
#include "bindings/core/v8/V8DOMMatrixReadOnly.h"
#include "bindings/core/v8/V8DOMPoint.h"
#include "bindings/core/v8/V8DOMPointInit.h"
#include "bindings/core/v8/V8Float32Array.h"
#include "bindings/core/v8/V8Float64Array.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8DOMMatrixReadOnly::wrapperTypeInfo = { gin::kEmbedderBlink, V8DOMMatrixReadOnly::domTemplate, V8DOMMatrixReadOnly::trace, V8DOMMatrixReadOnly::traceWrappers, 0, nullptr, "DOMMatrixReadOnly", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DOMMatrixReadOnly.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DOMMatrixReadOnly::s_wrapperTypeInfo = V8DOMMatrixReadOnly::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, DOMMatrixReadOnly>::value,
    "DOMMatrixReadOnly inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&DOMMatrixReadOnly::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "DOMMatrixReadOnly is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace DOMMatrixReadOnlyV8Internal {

    static void aAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->a());
    }

    CORE_EXPORT void aAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::aAttributeGetter(info);
    }

    static void bAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->b());
    }

    CORE_EXPORT void bAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::bAttributeGetter(info);
    }

    static void cAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->c());
    }

    CORE_EXPORT void cAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::cAttributeGetter(info);
    }

    static void dAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->d());
    }

    CORE_EXPORT void dAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::dAttributeGetter(info);
    }

    static void eAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->e());
    }

    CORE_EXPORT void eAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::eAttributeGetter(info);
    }

    static void fAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->f());
    }

    CORE_EXPORT void fAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::fAttributeGetter(info);
    }

    static void m11AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m11());
    }

    CORE_EXPORT void m11AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m11AttributeGetter(info);
    }

    static void m12AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m12());
    }

    CORE_EXPORT void m12AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m12AttributeGetter(info);
    }

    static void m13AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m13());
    }

    CORE_EXPORT void m13AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m13AttributeGetter(info);
    }

    static void m14AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m14());
    }

    CORE_EXPORT void m14AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m14AttributeGetter(info);
    }

    static void m21AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m21());
    }

    CORE_EXPORT void m21AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m21AttributeGetter(info);
    }

    static void m22AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m22());
    }

    CORE_EXPORT void m22AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m22AttributeGetter(info);
    }

    static void m23AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m23());
    }

    CORE_EXPORT void m23AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m23AttributeGetter(info);
    }

    static void m24AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m24());
    }

    CORE_EXPORT void m24AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m24AttributeGetter(info);
    }

    static void m31AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m31());
    }

    CORE_EXPORT void m31AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m31AttributeGetter(info);
    }

    static void m32AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m32());
    }

    CORE_EXPORT void m32AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m32AttributeGetter(info);
    }

    static void m33AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m33());
    }

    CORE_EXPORT void m33AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m33AttributeGetter(info);
    }

    static void m34AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m34());
    }

    CORE_EXPORT void m34AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m34AttributeGetter(info);
    }

    static void m41AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m41());
    }

    CORE_EXPORT void m41AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m41AttributeGetter(info);
    }

    static void m42AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m42());
    }

    CORE_EXPORT void m42AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m42AttributeGetter(info);
    }

    static void m43AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m43());
    }

    CORE_EXPORT void m43AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m43AttributeGetter(info);
    }

    static void m44AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValue(info, impl->m44());
    }

    CORE_EXPORT void m44AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::m44AttributeGetter(info);
    }

    static void is2DAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValueBool(info, impl->is2D());
    }

    CORE_EXPORT void is2DAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::is2DAttributeGetter(info);
    }

    static void isIdentityAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(holder);

        v8SetReturnValueBool(info, impl->isIdentity());
    }

    CORE_EXPORT void isIdentityAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::isIdentityAttributeGetter(info);
    }

    static void fromMatrixMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "fromMatrix");

        DOMMatrixInit other;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('other') is not an object.");

            return;
        }
        V8DOMMatrixInit::toImpl(info.GetIsolate(), info[0], other, exceptionState);
        if (exceptionState.hadException())
            return;

        DOMMatrixReadOnly* result = DOMMatrixReadOnly::fromMatrix(other, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global());
    }

    CORE_EXPORT void fromMatrixMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::fromMatrixMethod(info);
    }

    static void fromFloat32ArrayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "fromFloat32Array");

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        DOMFloat32Array* array32;
        array32 = info[0]->IsFloat32Array() ? V8Float32Array::toImpl(v8::Local<v8::Float32Array>::Cast(info[0])) : 0;
        if (!array32) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Float32Array'.");

            return;
        }

        DOMMatrixReadOnly* result = DOMMatrixReadOnly::fromFloat32Array(array32, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global());
    }

    CORE_EXPORT void fromFloat32ArrayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::fromFloat32ArrayMethod(info);
    }

    static void fromFloat64ArrayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "fromFloat64Array");

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        DOMFloat64Array* array64;
        array64 = info[0]->IsFloat64Array() ? V8Float64Array::toImpl(v8::Local<v8::Float64Array>::Cast(info[0])) : 0;
        if (!array64) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Float64Array'.");

            return;
        }

        DOMMatrixReadOnly* result = DOMMatrixReadOnly::fromFloat64Array(array64, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global());
    }

    CORE_EXPORT void fromFloat64ArrayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::fromFloat64ArrayMethod(info);
    }

    static void translateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "translate");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double tx;
        double ty;
        double tz;
        if (!info[0]->IsUndefined()) {
            tx = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            tx = 0;
        }
        if (!info[1]->IsUndefined()) {
            ty = toDouble(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            ty = 0;
        }
        if (!info[2]->IsUndefined()) {
            tz = toDouble(info.GetIsolate(), info[2], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            tz = 0;
        }

        v8SetReturnValue(info, impl->translate(tx, ty, tz));
    }

    CORE_EXPORT void translateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::translateMethod(info);
    }

    static void scaleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "scale");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double scaleX;
        double scaleY;
        double scaleZ;
        double originX;
        double originY;
        double originZ;
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (!info[0]->IsUndefined()) {
            scaleX = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            scaleX = 1;
        }
        if (UNLIKELY(numArgsPassed <= 1)) {
            v8SetReturnValue(info, impl->scale(scaleX));
            return;
        }
        scaleY = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        if (!info[2]->IsUndefined()) {
            scaleZ = toDouble(info.GetIsolate(), info[2], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            scaleZ = 1;
        }
        if (!info[3]->IsUndefined()) {
            originX = toDouble(info.GetIsolate(), info[3], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            originX = 0;
        }
        if (!info[4]->IsUndefined()) {
            originY = toDouble(info.GetIsolate(), info[4], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            originY = 0;
        }
        if (!info[5]->IsUndefined()) {
            originZ = toDouble(info.GetIsolate(), info[5], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            originZ = 0;
        }

        v8SetReturnValue(info, impl->scale(scaleX, scaleY, scaleZ, originX, originY, originZ));
    }

    CORE_EXPORT void scaleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::scaleMethod(info);
    }

    static void scale3dMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "scale3d");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double scale;
        double originX;
        double originY;
        double originZ;
        if (!info[0]->IsUndefined()) {
            scale = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            scale = 1;
        }
        if (!info[1]->IsUndefined()) {
            originX = toDouble(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            originX = 0;
        }
        if (!info[2]->IsUndefined()) {
            originY = toDouble(info.GetIsolate(), info[2], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            originY = 0;
        }
        if (!info[3]->IsUndefined()) {
            originZ = toDouble(info.GetIsolate(), info[3], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            originZ = 0;
        }

        v8SetReturnValue(info, impl->scale3d(scale, originX, originY, originZ));
    }

    CORE_EXPORT void scale3dMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::scale3dMethod(info);
    }

    static void rotateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "rotate");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double rotX;
        double rotY;
        double rotZ;
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (!info[0]->IsUndefined()) {
            rotX = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            rotX = 0;
        }
        if (UNLIKELY(numArgsPassed <= 1)) {
            v8SetReturnValue(info, impl->rotate(rotX));
            return;
        }
        rotY = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        if (UNLIKELY(numArgsPassed <= 2)) {
            v8SetReturnValue(info, impl->rotate(rotX, rotY));
            return;
        }
        rotZ = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->rotate(rotX, rotY, rotZ));
    }

    CORE_EXPORT void rotateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::rotateMethod(info);
    }

    static void rotateFromVectorMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "rotateFromVector");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double x;
        double y;
        if (!info[0]->IsUndefined()) {
            x = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            x = 0;
        }
        if (!info[1]->IsUndefined()) {
            y = toDouble(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            y = 0;
        }

        v8SetReturnValue(info, impl->rotateFromVector(x, y));
    }

    CORE_EXPORT void rotateFromVectorMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::rotateFromVectorMethod(info);
    }

    static void rotateAxisAngleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "rotateAxisAngle");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double x;
        double y;
        double z;
        double angle;
        if (!info[0]->IsUndefined()) {
            x = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            x = 0;
        }
        if (!info[1]->IsUndefined()) {
            y = toDouble(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            y = 0;
        }
        if (!info[2]->IsUndefined()) {
            z = toDouble(info.GetIsolate(), info[2], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            z = 0;
        }
        if (!info[3]->IsUndefined()) {
            angle = toDouble(info.GetIsolate(), info[3], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            angle = 0;
        }

        v8SetReturnValue(info, impl->rotateAxisAngle(x, y, z, angle));
    }

    CORE_EXPORT void rotateAxisAngleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::rotateAxisAngleMethod(info);
    }

    static void skewXMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "skewX");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double sx;
        if (!info[0]->IsUndefined()) {
            sx = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            sx = 0;
        }

        v8SetReturnValue(info, impl->skewX(sx));
    }

    CORE_EXPORT void skewXMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::skewXMethod(info);
    }

    static void skewYMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "skewY");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        double sy;
        if (!info[0]->IsUndefined()) {
            sy = toDouble(info.GetIsolate(), info[0], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            sy = 0;
        }

        v8SetReturnValue(info, impl->skewY(sy));
    }

    CORE_EXPORT void skewYMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::skewYMethod(info);
    }

    static void multiplyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "multiply");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        DOMMatrixInit other;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('other') is not an object.");

            return;
        }
        V8DOMMatrixInit::toImpl(info.GetIsolate(), info[0], other, exceptionState);
        if (exceptionState.hadException())
            return;

        DOMMatrix* result = impl->multiply(other, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void multiplyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::multiplyMethod(info);
    }

    static void flipXMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        v8SetReturnValue(info, impl->flipX());
    }

    CORE_EXPORT void flipXMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::flipXMethod(info);
    }

    static void flipYMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        v8SetReturnValue(info, impl->flipY());
    }

    CORE_EXPORT void flipYMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::flipYMethod(info);
    }

    static void inverseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        v8SetReturnValue(info, impl->inverse());
    }

    CORE_EXPORT void inverseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::inverseMethod(info);
    }

    static void transformPointMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMMatrixReadOnly", "transformPoint");

        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        DOMPointInit point;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('point') is not an object.");

            return;
        }
        V8DOMPointInit::toImpl(info.GetIsolate(), info[0], point, exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->transformPoint(point));
    }

    CORE_EXPORT void transformPointMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::transformPointMethod(info);
    }

    static void toFloat32ArrayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        v8SetReturnValue(info, impl->toFloat32Array());
    }

    CORE_EXPORT void toFloat32ArrayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::toFloat32ArrayMethod(info);
    }

    static void toFloat64ArrayMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        v8SetReturnValue(info, impl->toFloat64Array());
    }

    CORE_EXPORT void toFloat64ArrayMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::toFloat64ArrayMethod(info);
    }

    static void toJSONMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptValue result = impl->toJSONForBinding(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    CORE_EXPORT void toJSONMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::toJSONMethod(info);
    }

    static void toStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnly* impl = V8DOMMatrixReadOnly::toImpl(info.Holder());

        v8SetReturnValueString(info, impl->toString(), info.GetIsolate());
    }

    CORE_EXPORT void toStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMMatrixReadOnlyV8Internal::toStringMethod(info);
    }

    static void constructor1(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "DOMMatrixReadOnly");

        DOMMatrixReadOnly* impl = DOMMatrixReadOnly::create(exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8DOMMatrixReadOnly::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

    static void constructor2(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "DOMMatrixReadOnly");

        V8StringResource<> transformList;
        transformList = info[0];
        if (!transformList.prepare())
            return;

        DOMMatrixReadOnly* impl = DOMMatrixReadOnly::create(transformList, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8DOMMatrixReadOnly::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

    static void constructor3(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "DOMMatrixReadOnly");

        Vector<double> numberSequence;
        numberSequence = toImplArray<Vector<double>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;

        DOMMatrixReadOnly* impl = DOMMatrixReadOnly::create(numberSequence, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8DOMMatrixReadOnly::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "DOMMatrixReadOnly");
        switch (std::min(1, info.Length())) {
        case 0:
            if (true) {
                DOMMatrixReadOnlyV8Internal::constructor1(info);
                return;
            }
            break;
        case 1:
            if (info[0]->IsArray()) {
                DOMMatrixReadOnlyV8Internal::constructor3(info);
                return;
            }
            if (true) {
                DOMMatrixReadOnlyV8Internal::constructor2(info);
                return;
            }
            break;
        default:
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(0, info.Length()));
            return;
        }
        exceptionState.throwTypeError("No matching constructor signature.");
    }

} // namespace DOMMatrixReadOnlyV8Internal

const V8DOMConfiguration::AccessorConfiguration V8DOMMatrixReadOnlyAccessors[] = {
    { "a", DOMMatrixReadOnlyV8Internal::aAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "b", DOMMatrixReadOnlyV8Internal::bAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "c", DOMMatrixReadOnlyV8Internal::cAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "d", DOMMatrixReadOnlyV8Internal::dAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "e", DOMMatrixReadOnlyV8Internal::eAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "f", DOMMatrixReadOnlyV8Internal::fAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m11", DOMMatrixReadOnlyV8Internal::m11AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m12", DOMMatrixReadOnlyV8Internal::m12AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m13", DOMMatrixReadOnlyV8Internal::m13AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m14", DOMMatrixReadOnlyV8Internal::m14AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m21", DOMMatrixReadOnlyV8Internal::m21AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m22", DOMMatrixReadOnlyV8Internal::m22AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m23", DOMMatrixReadOnlyV8Internal::m23AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m24", DOMMatrixReadOnlyV8Internal::m24AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m31", DOMMatrixReadOnlyV8Internal::m31AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m32", DOMMatrixReadOnlyV8Internal::m32AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m33", DOMMatrixReadOnlyV8Internal::m33AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m34", DOMMatrixReadOnlyV8Internal::m34AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m41", DOMMatrixReadOnlyV8Internal::m41AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m42", DOMMatrixReadOnlyV8Internal::m42AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m43", DOMMatrixReadOnlyV8Internal::m43AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m44", DOMMatrixReadOnlyV8Internal::m44AttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "is2D", DOMMatrixReadOnlyV8Internal::is2DAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "isIdentity", DOMMatrixReadOnlyV8Internal::isIdentityAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8DOMMatrixReadOnlyMethods[] = {
    { "fromMatrix", DOMMatrixReadOnlyV8Internal::fromMatrixMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInterface, V8DOMConfiguration::CheckHolder },
    { "fromFloat32Array", DOMMatrixReadOnlyV8Internal::fromFloat32ArrayMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInterface, V8DOMConfiguration::CheckHolder },
    { "fromFloat64Array", DOMMatrixReadOnlyV8Internal::fromFloat64ArrayMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInterface, V8DOMConfiguration::CheckHolder },
    { "translate", DOMMatrixReadOnlyV8Internal::translateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "scale", DOMMatrixReadOnlyV8Internal::scaleMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "scale3d", DOMMatrixReadOnlyV8Internal::scale3dMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "rotate", DOMMatrixReadOnlyV8Internal::rotateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "rotateFromVector", DOMMatrixReadOnlyV8Internal::rotateFromVectorMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "rotateAxisAngle", DOMMatrixReadOnlyV8Internal::rotateAxisAngleMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "skewX", DOMMatrixReadOnlyV8Internal::skewXMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "skewY", DOMMatrixReadOnlyV8Internal::skewYMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "multiply", DOMMatrixReadOnlyV8Internal::multiplyMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "flipX", DOMMatrixReadOnlyV8Internal::flipXMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "flipY", DOMMatrixReadOnlyV8Internal::flipYMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "inverse", DOMMatrixReadOnlyV8Internal::inverseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "transformPoint", DOMMatrixReadOnlyV8Internal::transformPointMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toFloat32Array", DOMMatrixReadOnlyV8Internal::toFloat32ArrayMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toFloat64Array", DOMMatrixReadOnlyV8Internal::toFloat64ArrayMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toJSON", DOMMatrixReadOnlyV8Internal::toJSONMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toString", DOMMatrixReadOnlyV8Internal::toStringMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8DOMMatrixReadOnly::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("DOMMatrixReadOnly"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    DOMMatrixReadOnlyV8Internal::constructor(info);
}

static void installV8DOMMatrixReadOnlyTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8DOMMatrixReadOnly::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8DOMMatrixReadOnly::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8DOMMatrixReadOnly::constructorCallback);
    interfaceTemplate->SetLength(0);

    if (!RuntimeEnabledFeatures::geometryInterfacesEnabled()) {
        return;
    }

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8DOMMatrixReadOnlyAccessors, WTF_ARRAY_LENGTH(V8DOMMatrixReadOnlyAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8DOMMatrixReadOnlyMethods, WTF_ARRAY_LENGTH(V8DOMMatrixReadOnlyMethods));
}

v8::Local<v8::FunctionTemplate> V8DOMMatrixReadOnly::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8DOMMatrixReadOnlyTemplate);
}

bool V8DOMMatrixReadOnly::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8DOMMatrixReadOnly::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DOMMatrixReadOnly* V8DOMMatrixReadOnly::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
