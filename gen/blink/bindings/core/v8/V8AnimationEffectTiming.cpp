// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8AnimationEffectTiming.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/UnrestrictedDoubleOrString.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8AnimationEffectTiming::wrapperTypeInfo = { gin::kEmbedderBlink, V8AnimationEffectTiming::domTemplate, V8AnimationEffectTiming::trace, V8AnimationEffectTiming::traceWrappers, 0, nullptr, "AnimationEffectTiming", &V8AnimationEffectTimingReadOnly::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in AnimationEffectTiming.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& AnimationEffectTiming::s_wrapperTypeInfo = V8AnimationEffectTiming::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, AnimationEffectTiming>::value,
    "AnimationEffectTiming inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&AnimationEffectTiming::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "AnimationEffectTiming is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace AnimationEffectTimingV8Internal {

    static void delayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValue(info, impl->delay());
    }

    CORE_EXPORT void delayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::delayAttributeGetter(info);
    }

    static void delayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "AnimationEffectTiming", "delay");

        // Prepare the value to be set.
        double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDelay(cppValue);
    }

    CORE_EXPORT void delayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::delayAttributeSetter(v8Value, info);
    }

    static void endDelayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValue(info, impl->endDelay());
    }

    CORE_EXPORT void endDelayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::endDelayAttributeGetter(info);
    }

    static void endDelayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "AnimationEffectTiming", "endDelay");

        // Prepare the value to be set.
        double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setEndDelay(cppValue);
    }

    CORE_EXPORT void endDelayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::endDelayAttributeSetter(v8Value, info);
    }

    static void fillAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValueString(info, impl->fill(), info.GetIsolate());
    }

    CORE_EXPORT void fillAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::fillAttributeGetter(info);
    }

    static void fillAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setFill(cppValue);
    }

    CORE_EXPORT void fillAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::fillAttributeSetter(v8Value, info);
    }

    static void iterationStartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValue(info, impl->iterationStart());
    }

    CORE_EXPORT void iterationStartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::iterationStartAttributeGetter(info);
    }

    static void iterationStartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "AnimationEffectTiming", "iterationStart");

        // Prepare the value to be set.
        double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setIterationStart(cppValue, exceptionState);
    }

    CORE_EXPORT void iterationStartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::iterationStartAttributeSetter(v8Value, info);
    }

    static void iterationsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValue(info, impl->iterations());
    }

    CORE_EXPORT void iterationsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::iterationsAttributeGetter(info);
    }

    static void iterationsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "AnimationEffectTiming", "iterations");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setIterations(cppValue, exceptionState);
    }

    CORE_EXPORT void iterationsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::iterationsAttributeSetter(v8Value, info);
    }

    static void durationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        UnrestrictedDoubleOrString result;
        impl->duration(result);

        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void durationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::durationAttributeGetter(info);
    }

    static void durationAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "AnimationEffectTiming", "duration");

        // Prepare the value to be set.
        UnrestrictedDoubleOrString cppValue;
        V8UnrestrictedDoubleOrString::toImpl(info.GetIsolate(), v8Value, cppValue, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDuration(cppValue, exceptionState);
    }

    CORE_EXPORT void durationAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::durationAttributeSetter(v8Value, info);
    }

    static void directionAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValueString(info, impl->direction(), info.GetIsolate());
    }

    CORE_EXPORT void directionAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::directionAttributeGetter(info);
    }

    static void directionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setDirection(cppValue);
    }

    CORE_EXPORT void directionAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::directionAttributeSetter(v8Value, info);
    }

    static void easingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        v8SetReturnValueString(info, impl->easing(), info.GetIsolate());
    }

    CORE_EXPORT void easingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        AnimationEffectTimingV8Internal::easingAttributeGetter(info);
    }

    static void easingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        AnimationEffectTiming* impl = V8AnimationEffectTiming::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "AnimationEffectTiming", "easing");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setEasing(cppValue, exceptionState);
    }

    CORE_EXPORT void easingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        AnimationEffectTimingV8Internal::easingAttributeSetter(v8Value, info);
    }

} // namespace AnimationEffectTimingV8Internal

const V8DOMConfiguration::AccessorConfiguration V8AnimationEffectTimingAccessors[] = {
    { "delay", AnimationEffectTimingV8Internal::delayAttributeGetterCallback, AnimationEffectTimingV8Internal::delayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "endDelay", AnimationEffectTimingV8Internal::endDelayAttributeGetterCallback, AnimationEffectTimingV8Internal::endDelayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "fill", AnimationEffectTimingV8Internal::fillAttributeGetterCallback, AnimationEffectTimingV8Internal::fillAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "iterationStart", AnimationEffectTimingV8Internal::iterationStartAttributeGetterCallback, AnimationEffectTimingV8Internal::iterationStartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "iterations", AnimationEffectTimingV8Internal::iterationsAttributeGetterCallback, AnimationEffectTimingV8Internal::iterationsAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "duration", AnimationEffectTimingV8Internal::durationAttributeGetterCallback, AnimationEffectTimingV8Internal::durationAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "direction", AnimationEffectTimingV8Internal::directionAttributeGetterCallback, AnimationEffectTimingV8Internal::directionAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "easing", AnimationEffectTimingV8Internal::easingAttributeGetterCallback, AnimationEffectTimingV8Internal::easingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8AnimationEffectTimingTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8AnimationEffectTiming::wrapperTypeInfo.interfaceName, V8AnimationEffectTimingReadOnly::domTemplate(isolate, world), V8AnimationEffectTiming::internalFieldCount);

    if (!RuntimeEnabledFeatures::webAnimationsAPIEnabled()) {
        return;
    }

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8AnimationEffectTimingAccessors, WTF_ARRAY_LENGTH(V8AnimationEffectTimingAccessors));
}

v8::Local<v8::FunctionTemplate> V8AnimationEffectTiming::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8AnimationEffectTimingTemplate);
}

bool V8AnimationEffectTiming::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8AnimationEffectTiming::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

AnimationEffectTiming* V8AnimationEffectTiming::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
