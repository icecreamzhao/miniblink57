// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8MutationEvent.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8MutationEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8MutationEvent::domTemplate, V8MutationEvent::trace, V8MutationEvent::traceWrappers, 0, nullptr, "MutationEvent", &V8Event::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in MutationEvent.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& MutationEvent::s_wrapperTypeInfo = V8MutationEvent::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, MutationEvent>::value,
    "MutationEvent inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&MutationEvent::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "MutationEvent is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace MutationEventV8Internal {

    static void relatedNodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MutationEvent* impl = V8MutationEvent::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->relatedNode()), impl);
    }

    CORE_EXPORT void relatedNodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MutationEventV8Internal::relatedNodeAttributeGetter(info);
    }

    static void prevValueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MutationEvent* impl = V8MutationEvent::toImpl(holder);

        v8SetReturnValueString(info, impl->prevValue(), info.GetIsolate());
    }

    CORE_EXPORT void prevValueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MutationEventV8Internal::prevValueAttributeGetter(info);
    }

    static void newValueAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MutationEvent* impl = V8MutationEvent::toImpl(holder);

        v8SetReturnValueString(info, impl->newValue(), info.GetIsolate());
    }

    CORE_EXPORT void newValueAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MutationEventV8Internal::newValueAttributeGetter(info);
    }

    static void attrNameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MutationEvent* impl = V8MutationEvent::toImpl(holder);

        v8SetReturnValueString(info, impl->attrName(), info.GetIsolate());
    }

    CORE_EXPORT void attrNameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MutationEventV8Internal::attrNameAttributeGetter(info);
    }

    static void attrChangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MutationEvent* impl = V8MutationEvent::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->attrChange());
    }

    CORE_EXPORT void attrChangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MutationEventV8Internal::attrChangeAttributeGetter(info);
    }

    static void isTrustedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        MutationEvent* impl = V8MutationEvent::toImpl(holder);

        v8SetReturnValueBool(info, impl->isTrusted());
    }

    CORE_EXPORT void isTrustedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        MutationEventV8Internal::isTrustedAttributeGetter(info);
    }

    static void initMutationEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "MutationEvent", "initMutationEvent");

        MutationEvent* impl = V8MutationEvent::toImpl(info.Holder());

        V8StringResource<> type;
        bool bubbles;
        bool cancelable;
        Node* relatedNode;
        V8StringResource<> prevValue;
        V8StringResource<> newValue;
        V8StringResource<> attrName;
        unsigned attrChange;
        type = info[0];
        if (!type.prepare())
            return;

        bubbles = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        cancelable = toBoolean(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        relatedNode = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[3]);
        if (!relatedNode && !isUndefinedOrNull(info[3])) {
            exceptionState.throwTypeError("parameter 4 is not of type 'Node'.");

            return;
        }

        prevValue = info[4];
        if (!prevValue.prepare())
            return;

        newValue = info[5];
        if (!newValue.prepare())
            return;

        attrName = info[6];
        if (!attrName.prepare())
            return;

        attrChange = toUInt16(info.GetIsolate(), info[7], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->initMutationEvent(type, bubbles, cancelable, relatedNode, prevValue, newValue, attrName, attrChange);
    }

    CORE_EXPORT void initMutationEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8MutationEvent_InitMutationEvent_Method);
        MutationEventV8Internal::initMutationEventMethod(info);
    }

} // namespace MutationEventV8Internal

const V8DOMConfiguration::AccessorConfiguration V8MutationEventAccessors[] = {
    { "relatedNode", MutationEventV8Internal::relatedNodeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "prevValue", MutationEventV8Internal::prevValueAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "newValue", MutationEventV8Internal::newValueAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "attrName", MutationEventV8Internal::attrNameAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "attrChange", MutationEventV8Internal::attrChangeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "isTrusted", MutationEventV8Internal::isTrustedAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8MutationEventMethods[] = {
    { "initMutationEvent", MutationEventV8Internal::initMutationEventMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8MutationEventTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8MutationEvent::wrapperTypeInfo.interfaceName, V8Event::domTemplate(isolate, world), V8MutationEvent::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8MutationEventConstants[] = {
        { "MODIFICATION", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "ADDITION", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "REMOVAL", 3, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8MutationEventConstants, WTF_ARRAY_LENGTH(V8MutationEventConstants));
    static_assert(1 == MutationEvent::kModification, "the value of MutationEvent_kModification does not match with implementation");
    static_assert(2 == MutationEvent::kAddition, "the value of MutationEvent_kAddition does not match with implementation");
    static_assert(3 == MutationEvent::kRemoval, "the value of MutationEvent_kRemoval does not match with implementation");
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8MutationEventAccessors, WTF_ARRAY_LENGTH(V8MutationEventAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8MutationEventMethods, WTF_ARRAY_LENGTH(V8MutationEventMethods));
}

v8::Local<v8::FunctionTemplate> V8MutationEvent::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8MutationEventTemplate);
}

bool V8MutationEvent::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8MutationEvent::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

MutationEvent* V8MutationEvent::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
