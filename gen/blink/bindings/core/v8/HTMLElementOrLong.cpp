// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "HTMLElementOrLong.h"

#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8HTMLElement.h"

namespace blink {

HTMLElementOrLong::HTMLElementOrLong()
    : m_type(SpecificTypeNone)
{
}

HTMLElement* HTMLElementOrLong::getAsHTMLElement() const
{
    DCHECK(isHTMLElement());
    return m_htmlElement;
}

void HTMLElementOrLong::setHTMLElement(HTMLElement* value)
{
    DCHECK(isNull());
    m_htmlElement = value;
    m_type = SpecificTypeHTMLElement;
}

HTMLElementOrLong HTMLElementOrLong::fromHTMLElement(HTMLElement* value)
{
    HTMLElementOrLong container;
    container.setHTMLElement(value);
    return container;
}

int HTMLElementOrLong::getAsLong() const
{
    DCHECK(isLong());
    return m_long;
}

void HTMLElementOrLong::setLong(int value)
{
    DCHECK(isNull());
    m_long = value;
    m_type = SpecificTypeLong;
}

HTMLElementOrLong HTMLElementOrLong::fromLong(int value)
{
    HTMLElementOrLong container;
    container.setLong(value);
    return container;
}

HTMLElementOrLong::HTMLElementOrLong(const HTMLElementOrLong&) = default;
HTMLElementOrLong::~HTMLElementOrLong() = default;
HTMLElementOrLong& HTMLElementOrLong::operator=(const HTMLElementOrLong&) = default;

DEFINE_TRACE(HTMLElementOrLong)
{
    visitor->trace(m_htmlElement);
}

void V8HTMLElementOrLong::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, HTMLElementOrLong& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8HTMLElement::hasInstance(v8Value, isolate)) {
        HTMLElement* cppValue = V8HTMLElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLElement(cppValue);
        return;
    }

    if (v8Value->IsNumber()) {
        int cppValue = toInt32(isolate, v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLong(cppValue);
        return;
    }

    {
        int cppValue = toInt32(isolate, v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLong(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const HTMLElementOrLong& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case HTMLElementOrLong::SpecificTypeNone:
        return v8::Null(isolate);
    case HTMLElementOrLong::SpecificTypeHTMLElement:
        return ToV8(impl.getAsHTMLElement(), creationContext, isolate);
    case HTMLElementOrLong::SpecificTypeLong:
        return v8::Integer::New(isolate, impl.getAsLong());
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

HTMLElementOrLong NativeValueTraits<HTMLElementOrLong>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    HTMLElementOrLong impl;
    V8HTMLElementOrLong::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
