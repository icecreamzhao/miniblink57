// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8EventTarget.h"

#include "bindings/core/v8/AddEventListenerOptionsOrBoolean.h"
#include "bindings/core/v8/BindingSecurity.h"
#include "bindings/core/v8/EventListenerOptionsOrBoolean.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8AddEventListenerOptions.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Event.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8EventListenerOptions.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8EventTarget::wrapperTypeInfo = { gin::kEmbedderBlink, V8EventTarget::domTemplate, V8EventTarget::trace, V8EventTarget::traceWrappers, 0, nullptr, "EventTarget", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in EventTarget.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& EventTarget::s_wrapperTypeInfo = V8EventTarget::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, EventTarget>::value,
    "EventTarget inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&EventTarget::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "EventTarget is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace EventTargetV8Internal {

    static void addEventListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "EventTarget", "addEventListener");

        EventTarget* impl = V8EventTarget::toImpl(info.Holder());

        // Performance hack for EventTarget.  Checking whether it's a Window or not
        // prior to the call to BindingSecurity::shouldAllowAccessTo increases 30%
        // of speed performance on Android Nexus 7 as of Dec 2015.  ALWAYS_INLINE
        // didn't work in this case.
        if (const DOMWindow* window = impl->toDOMWindow()) {
            if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), window, exceptionState)) {
                return;
            }
        }

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        V8StringResource<> type;
        EventListener* listener;
        AddEventListenerOptionsOrBoolean options;
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        type = info[0];
        if (!type.prepare())
            return;

        listener = V8EventListenerHelper::getEventListener(ScriptState::current(info.GetIsolate()), info[1], false, ListenerFindOrCreate);

        if (UNLIKELY(numArgsPassed <= 2)) {
            V8EventTarget::addEventListenerMethodPrologueCustom(info, impl);
            impl->addEventListener(type, listener);
            V8EventTarget::addEventListenerMethodEpilogueCustom(info, impl);
            return;
        }
        V8AddEventListenerOptionsOrBoolean::toImpl(info.GetIsolate(), info[2], options, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        V8EventTarget::addEventListenerMethodPrologueCustom(info, impl);
        impl->addEventListener(type, listener, options);
        V8EventTarget::addEventListenerMethodEpilogueCustom(info, impl);
    }

    CORE_EXPORT void addEventListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        EventTargetV8Internal::addEventListenerMethod(info);
    }

    static void removeEventListenerMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "EventTarget", "removeEventListener");

        EventTarget* impl = V8EventTarget::toImpl(info.Holder());

        // Performance hack for EventTarget.  Checking whether it's a Window or not
        // prior to the call to BindingSecurity::shouldAllowAccessTo increases 30%
        // of speed performance on Android Nexus 7 as of Dec 2015.  ALWAYS_INLINE
        // didn't work in this case.
        if (const DOMWindow* window = impl->toDOMWindow()) {
            if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), window, exceptionState)) {
                return;
            }
        }

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        V8StringResource<> type;
        EventListener* listener;
        EventListenerOptionsOrBoolean options;
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        type = info[0];
        if (!type.prepare())
            return;

        listener = V8EventListenerHelper::getEventListener(ScriptState::current(info.GetIsolate()), info[1], false, ListenerFindOnly);

        if (UNLIKELY(numArgsPassed <= 2)) {
            V8EventTarget::removeEventListenerMethodPrologueCustom(info, impl);
            impl->removeEventListener(type, listener);
            V8EventTarget::removeEventListenerMethodEpilogueCustom(info, impl);
            return;
        }
        V8EventListenerOptionsOrBoolean::toImpl(info.GetIsolate(), info[2], options, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        V8EventTarget::removeEventListenerMethodPrologueCustom(info, impl);
        impl->removeEventListener(type, listener, options);
        V8EventTarget::removeEventListenerMethodEpilogueCustom(info, impl);
    }

    CORE_EXPORT void removeEventListenerMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        EventTargetV8Internal::removeEventListenerMethod(info);
    }

    static void dispatchEventMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "EventTarget", "dispatchEvent");

        EventTarget* impl = V8EventTarget::toImpl(info.Holder());

        // Performance hack for EventTarget.  Checking whether it's a Window or not
        // prior to the call to BindingSecurity::shouldAllowAccessTo increases 30%
        // of speed performance on Android Nexus 7 as of Dec 2015.  ALWAYS_INLINE
        // didn't work in this case.
        if (const DOMWindow* window = impl->toDOMWindow()) {
            if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), window, exceptionState)) {
                return;
            }
        }

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Event* event;
        event = V8Event::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!event) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Event'.");

            return;
        }

        bool result = impl->dispatchEventForBindings(event, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueBool(info, result);
    }

    CORE_EXPORT void dispatchEventMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        EventTargetV8Internal::dispatchEventMethod(info);
    }

} // namespace EventTargetV8Internal

const V8DOMConfiguration::MethodConfiguration V8EventTargetMethods[] = {
    { "addEventListener", EventTargetV8Internal::addEventListenerMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "removeEventListener", EventTargetV8Internal::removeEventListenerMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "dispatchEvent", EventTargetV8Internal::dispatchEventMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8EventTargetTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8EventTarget::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8EventTarget::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Global object prototype chain consists of Immutable Prototype Exotic Objects
    prototypeTemplate->SetImmutableProto();

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8EventTargetMethods, WTF_ARRAY_LENGTH(V8EventTargetMethods));
}

void V8EventTarget::installRuntimeEnabledFeatures(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8EventTarget::wrapperTypeInfo.domTemplate(isolate, world);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
}

v8::Local<v8::FunctionTemplate> V8EventTarget::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8EventTargetTemplate);
}

bool V8EventTarget::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8EventTarget::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

EventTarget* V8EventTarget::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
