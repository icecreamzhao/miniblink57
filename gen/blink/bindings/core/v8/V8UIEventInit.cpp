// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8UIEventInit.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8EventInit.h"
#include "bindings/core/v8/V8InputDeviceCapabilities.h"
#include "bindings/core/v8/V8Window.h"

namespace blink {

void V8UIEventInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, UIEventInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8EventInit::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> detailValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "detail")).ToLocal(&detailValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (detailValue.IsEmpty() || detailValue->IsUndefined()) {
        // Do nothing.
    } else {
        int detail = toInt32(isolate, detailValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDetail(detail);
    }

    v8::Local<v8::Value> sourceCapabilitiesValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "sourceCapabilities")).ToLocal(&sourceCapabilitiesValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (sourceCapabilitiesValue.IsEmpty() || sourceCapabilitiesValue->IsUndefined()) {
        // Do nothing.
    } else if (sourceCapabilitiesValue->IsNull()) {
        impl.setSourceCapabilitiesToNull();
    } else {
        InputDeviceCapabilities* sourceCapabilities = V8InputDeviceCapabilities::toImplWithTypeCheck(isolate, sourceCapabilitiesValue);
        if (!sourceCapabilities) {
            exceptionState.throwTypeError("member sourceCapabilities is not of type InputDeviceCapabilities.");
            return;
        }
        impl.setSourceCapabilities(sourceCapabilities);
    }

    v8::Local<v8::Value> viewValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "view")).ToLocal(&viewValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (viewValue.IsEmpty() || viewValue->IsUndefined()) {
        // Do nothing.
    } else if (viewValue->IsNull()) {
        impl.setViewToNull();
    } else {
        DOMWindow* view = toDOMWindow(isolate, viewValue);
        if (!view) {
            exceptionState.throwTypeError("member view is not of type Window.");
            return;
        }
        impl.setView(view);
    }
}

v8::Local<v8::Value> UIEventInit::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8UIEventInit(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8UIEventInit(const UIEventInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!toV8EventInit(impl, dictionary, creationContext, isolate))
        return false;

    if (impl.hasDetail()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "detail"), v8::Integer::New(isolate, impl.detail()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "detail"), v8::Integer::New(isolate, 0))))
            return false;
    }

    if (impl.hasSourceCapabilities()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "sourceCapabilities"), ToV8(impl.sourceCapabilities(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "sourceCapabilities"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasView()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "view"), ToV8(impl.view(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "view"), v8::Null(isolate))))
            return false;
    }

    return true;
}

UIEventInit NativeValueTraits<UIEventInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    UIEventInit impl;
    V8UIEventInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
