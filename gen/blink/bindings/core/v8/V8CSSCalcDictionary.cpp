// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8CSSCalcDictionary.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8CSSCalcDictionary::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, CSSCalcDictionary& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> chValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "ch")).ToLocal(&chValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (chValue.IsEmpty() || chValue->IsUndefined()) {
        // Do nothing.
    } else if (chValue->IsNull()) {
        impl.setChToNull();
    } else {
        double ch = toRestrictedDouble(isolate, chValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setCh(ch);
    }

    v8::Local<v8::Value> cmValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "cm")).ToLocal(&cmValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (cmValue.IsEmpty() || cmValue->IsUndefined()) {
        // Do nothing.
    } else if (cmValue->IsNull()) {
        impl.setCmToNull();
    } else {
        double cm = toRestrictedDouble(isolate, cmValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setCm(cm);
    }

    v8::Local<v8::Value> emValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "em")).ToLocal(&emValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (emValue.IsEmpty() || emValue->IsUndefined()) {
        // Do nothing.
    } else if (emValue->IsNull()) {
        impl.setEmToNull();
    } else {
        double em = toRestrictedDouble(isolate, emValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setEm(em);
    }

    v8::Local<v8::Value> exValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "ex")).ToLocal(&exValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (exValue.IsEmpty() || exValue->IsUndefined()) {
        // Do nothing.
    } else if (exValue->IsNull()) {
        impl.setExToNull();
    } else {
        double ex = toRestrictedDouble(isolate, exValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setEx(ex);
    }

    v8::Local<v8::Value> inValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "in")).ToLocal(&inValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (inValue.IsEmpty() || inValue->IsUndefined()) {
        // Do nothing.
    } else if (inValue->IsNull()) {
        impl.setInToNull();
    } else {
        double in = toRestrictedDouble(isolate, inValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setIn(in);
    }

    v8::Local<v8::Value> mmValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "mm")).ToLocal(&mmValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (mmValue.IsEmpty() || mmValue->IsUndefined()) {
        // Do nothing.
    } else if (mmValue->IsNull()) {
        impl.setMmToNull();
    } else {
        double mm = toRestrictedDouble(isolate, mmValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setMm(mm);
    }

    v8::Local<v8::Value> pcValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "pc")).ToLocal(&pcValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (pcValue.IsEmpty() || pcValue->IsUndefined()) {
        // Do nothing.
    } else if (pcValue->IsNull()) {
        impl.setPcToNull();
    } else {
        double pc = toRestrictedDouble(isolate, pcValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPc(pc);
    }

    v8::Local<v8::Value> percentValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "percent")).ToLocal(&percentValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (percentValue.IsEmpty() || percentValue->IsUndefined()) {
        // Do nothing.
    } else if (percentValue->IsNull()) {
        impl.setPercentToNull();
    } else {
        double percent = toRestrictedDouble(isolate, percentValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPercent(percent);
    }

    v8::Local<v8::Value> ptValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "pt")).ToLocal(&ptValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (ptValue.IsEmpty() || ptValue->IsUndefined()) {
        // Do nothing.
    } else if (ptValue->IsNull()) {
        impl.setPtToNull();
    } else {
        double pt = toRestrictedDouble(isolate, ptValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPt(pt);
    }

    v8::Local<v8::Value> pxValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "px")).ToLocal(&pxValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (pxValue.IsEmpty() || pxValue->IsUndefined()) {
        // Do nothing.
    } else if (pxValue->IsNull()) {
        impl.setPxToNull();
    } else {
        double px = toRestrictedDouble(isolate, pxValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPx(px);
    }

    v8::Local<v8::Value> remValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "rem")).ToLocal(&remValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (remValue.IsEmpty() || remValue->IsUndefined()) {
        // Do nothing.
    } else if (remValue->IsNull()) {
        impl.setRemToNull();
    } else {
        double rem = toRestrictedDouble(isolate, remValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRem(rem);
    }

    v8::Local<v8::Value> vhValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "vh")).ToLocal(&vhValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (vhValue.IsEmpty() || vhValue->IsUndefined()) {
        // Do nothing.
    } else if (vhValue->IsNull()) {
        impl.setVhToNull();
    } else {
        double vh = toRestrictedDouble(isolate, vhValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setVh(vh);
    }

    v8::Local<v8::Value> vmaxValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "vmax")).ToLocal(&vmaxValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (vmaxValue.IsEmpty() || vmaxValue->IsUndefined()) {
        // Do nothing.
    } else if (vmaxValue->IsNull()) {
        impl.setVmaxToNull();
    } else {
        double vmax = toRestrictedDouble(isolate, vmaxValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setVmax(vmax);
    }

    v8::Local<v8::Value> vminValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "vmin")).ToLocal(&vminValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (vminValue.IsEmpty() || vminValue->IsUndefined()) {
        // Do nothing.
    } else if (vminValue->IsNull()) {
        impl.setVminToNull();
    } else {
        double vmin = toRestrictedDouble(isolate, vminValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setVmin(vmin);
    }

    v8::Local<v8::Value> vwValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "vw")).ToLocal(&vwValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (vwValue.IsEmpty() || vwValue->IsUndefined()) {
        // Do nothing.
    } else if (vwValue->IsNull()) {
        impl.setVwToNull();
    } else {
        double vw = toRestrictedDouble(isolate, vwValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setVw(vw);
    }
}

v8::Local<v8::Value> CSSCalcDictionary::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8CSSCalcDictionary(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8CSSCalcDictionary(const CSSCalcDictionary& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasCh()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "ch"), v8::Number::New(isolate, impl.ch()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "ch"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasCm()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "cm"), v8::Number::New(isolate, impl.cm()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "cm"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasEm()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "em"), v8::Number::New(isolate, impl.em()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "em"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasEx()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "ex"), v8::Number::New(isolate, impl.ex()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "ex"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasIn()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "in"), v8::Number::New(isolate, impl.in()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "in"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasMm()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "mm"), v8::Number::New(isolate, impl.mm()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "mm"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasPc()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "pc"), v8::Number::New(isolate, impl.pc()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "pc"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasPercent()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "percent"), v8::Number::New(isolate, impl.percent()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "percent"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasPt()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "pt"), v8::Number::New(isolate, impl.pt()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "pt"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasPx()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "px"), v8::Number::New(isolate, impl.px()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "px"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasRem()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rem"), v8::Number::New(isolate, impl.rem()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rem"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasVh()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vh"), v8::Number::New(isolate, impl.vh()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vh"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasVmax()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vmax"), v8::Number::New(isolate, impl.vmax()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vmax"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasVmin()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vmin"), v8::Number::New(isolate, impl.vmin()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vmin"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasVw()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vw"), v8::Number::New(isolate, impl.vw()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "vw"), v8::Null(isolate))))
            return false;
    }

    return true;
}

CSSCalcDictionary NativeValueTraits<CSSCalcDictionary>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    CSSCalcDictionary impl;
    V8CSSCalcDictionary::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
