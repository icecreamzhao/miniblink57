// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "RadioNodeListOrElement.h"

#include "bindings/core/v8/DictionarySequenceOrDictionary.h"
#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8RadioNodeList.h"
#include "core/animation/ElementAnimation.h"
#include "core/dom/ChildNode.h"
#include "core/dom/ElementFullscreen.h"
#include "core/dom/NonDocumentTypeChildNode.h"
#include "core/dom/ParentNode.h"

namespace blink {

RadioNodeListOrElement::RadioNodeListOrElement()
    : m_type(SpecificTypeNone)
{
}

RadioNodeList* RadioNodeListOrElement::getAsRadioNodeList() const
{
    DCHECK(isRadioNodeList());
    return m_radioNodeList;
}

void RadioNodeListOrElement::setRadioNodeList(RadioNodeList* value)
{
    DCHECK(isNull());
    m_radioNodeList = value;
    m_type = SpecificTypeRadioNodeList;
}

RadioNodeListOrElement RadioNodeListOrElement::fromRadioNodeList(RadioNodeList* value)
{
    RadioNodeListOrElement container;
    container.setRadioNodeList(value);
    return container;
}

Element* RadioNodeListOrElement::getAsElement() const
{
    DCHECK(isElement());
    return m_element;
}

void RadioNodeListOrElement::setElement(Element* value)
{
    DCHECK(isNull());
    m_element = value;
    m_type = SpecificTypeElement;
}

RadioNodeListOrElement RadioNodeListOrElement::fromElement(Element* value)
{
    RadioNodeListOrElement container;
    container.setElement(value);
    return container;
}

RadioNodeListOrElement::RadioNodeListOrElement(const RadioNodeListOrElement&) = default;
RadioNodeListOrElement::~RadioNodeListOrElement() = default;
RadioNodeListOrElement& RadioNodeListOrElement::operator=(const RadioNodeListOrElement&) = default;

DEFINE_TRACE(RadioNodeListOrElement)
{
    visitor->trace(m_radioNodeList);
    visitor->trace(m_element);
}

void V8RadioNodeListOrElement::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, RadioNodeListOrElement& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8RadioNodeList::hasInstance(v8Value, isolate)) {
        RadioNodeList* cppValue = V8RadioNodeList::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setRadioNodeList(cppValue);
        return;
    }

    if (V8Element::hasInstance(v8Value, isolate)) {
        Element* cppValue = V8Element::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setElement(cppValue);
        return;
    }

    exceptionState.throwTypeError("The provided value is not of type '(RadioNodeList or Element)'");
}

v8::Local<v8::Value> ToV8(const RadioNodeListOrElement& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case RadioNodeListOrElement::SpecificTypeNone:
        return v8::Null(isolate);
    case RadioNodeListOrElement::SpecificTypeRadioNodeList:
        return ToV8(impl.getAsRadioNodeList(), creationContext, isolate);
    case RadioNodeListOrElement::SpecificTypeElement:
        return ToV8(impl.getAsElement(), creationContext, isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

RadioNodeListOrElement NativeValueTraits<RadioNodeListOrElement>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    RadioNodeListOrElement impl;
    V8RadioNodeListOrElement::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
