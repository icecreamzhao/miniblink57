// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8DOMImplementation.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DocumentType.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8HTMLDocument.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8XMLDocument.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8DOMImplementation::wrapperTypeInfo = { gin::kEmbedderBlink, V8DOMImplementation::domTemplate, V8DOMImplementation::trace, V8DOMImplementation::traceWrappers, V8DOMImplementation::visitDOMWrapper, nullptr, "DOMImplementation", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DOMImplementation.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DOMImplementation::s_wrapperTypeInfo = V8DOMImplementation::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, DOMImplementation>::value,
    "DOMImplementation inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&DOMImplementation::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "DOMImplementation is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace DOMImplementationV8Internal {

    static void createDocumentTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMImplementation", "createDocumentType");

        DOMImplementation* impl = V8DOMImplementation::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        V8StringResource<> qualifiedName;
        V8StringResource<> publicId;
        V8StringResource<> systemId;
        qualifiedName = info[0];
        if (!qualifiedName.prepare())
            return;

        publicId = info[1];
        if (!publicId.prepare())
            return;

        systemId = info[2];
        if (!systemId.prepare())
            return;

        DocumentType* result = impl->createDocumentType(qualifiedName, publicId, systemId, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void createDocumentTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMImplementationV8Internal::createDocumentTypeMethod(info);
    }

    static void createDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DOMImplementation", "createDocument");

        DOMImplementation* impl = V8DOMImplementation::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        V8StringResource<TreatNullAndUndefinedAsNullString> namespaceURI;
        V8StringResource<TreatNullAsEmptyString> qualifiedName;
        DocumentType* doctype;
        namespaceURI = info[0];
        if (!namespaceURI.prepare())
            return;

        qualifiedName = info[1];
        if (!qualifiedName.prepare())
            return;

        if (!info[2]->IsUndefined()) {
            doctype = V8DocumentType::toImplWithTypeCheck(info.GetIsolate(), info[2]);
            if (!doctype && !isUndefinedOrNull(info[2])) {
                exceptionState.throwTypeError("parameter 3 is not of type 'DocumentType'.");

                return;
            }
        } else {
            doctype = nullptr;
        }

        XMLDocument* result = impl->createDocument(namespaceURI, qualifiedName, doctype, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void createDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMImplementationV8Internal::createDocumentMethod(info);
    }

    static void createHTMLDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMImplementation* impl = V8DOMImplementation::toImpl(info.Holder());

        V8StringResource<> title;
        if (!info[0]->IsUndefined()) {
            title = info[0];
            if (!title.prepare())
                return;
        } else {
            title = nullptr;
        }

        HTMLDocument* result = impl->createHTMLDocument(title);
        // [NewObject] must always create a new wrapper.  Check that a wrapper
        // does not exist yet.
        DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void createHTMLDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMImplementationV8Internal::createHTMLDocumentMethod(info);
    }

    static void hasFeatureMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMImplementation* impl = V8DOMImplementation::toImpl(info.Holder());

        v8SetReturnValueBool(info, impl->hasFeature());
    }

    CORE_EXPORT void hasFeatureMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMImplementationV8Internal::hasFeatureMethod(info);
    }

} // namespace DOMImplementationV8Internal

void V8DOMImplementation::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    DOMImplementation* impl = scriptWrappable->toImpl<DOMImplementation>();
    // The document() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->document())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

const V8DOMConfiguration::MethodConfiguration V8DOMImplementationMethods[] = {
    { "createDocumentType", DOMImplementationV8Internal::createDocumentTypeMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "createDocument", DOMImplementationV8Internal::createDocumentMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "createHTMLDocument", DOMImplementationV8Internal::createHTMLDocumentMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "hasFeature", DOMImplementationV8Internal::hasFeatureMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8DOMImplementationTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8DOMImplementation::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8DOMImplementation::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8DOMImplementationMethods, WTF_ARRAY_LENGTH(V8DOMImplementationMethods));
}

v8::Local<v8::FunctionTemplate> V8DOMImplementation::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8DOMImplementationTemplate);
}

bool V8DOMImplementation::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8DOMImplementation::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DOMImplementation* V8DOMImplementation::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
