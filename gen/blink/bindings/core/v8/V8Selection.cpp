// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8Selection.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Node.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8Range.h"
#include "core/dom/Document.h"
#include "core/dom/custom/CEReactionsScope.h"
#include "core/dom/custom/V0CustomElementProcessingStack.h"
#include "core/frame/UseCounter.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8Selection::wrapperTypeInfo = { gin::kEmbedderBlink, V8Selection::domTemplate, V8Selection::trace, V8Selection::traceWrappers, 0, nullptr, "Selection", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DOMSelection.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DOMSelection::s_wrapperTypeInfo = V8Selection::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, DOMSelection>::value,
    "DOMSelection inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&DOMSelection::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "DOMSelection is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace DOMSelectionV8Internal {

    static void anchorNodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->anchorNode()), impl);
    }

    CORE_EXPORT void anchorNodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionAnchorNode);

        DOMSelectionV8Internal::anchorNodeAttributeGetter(info);
    }

    static void anchorOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueInt(info, impl->anchorOffset());
    }

    CORE_EXPORT void anchorOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionAnchorOffset);

        DOMSelectionV8Internal::anchorOffsetAttributeGetter(info);
    }

    static void focusNodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->focusNode()), impl);
    }

    CORE_EXPORT void focusNodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionFocusNode);

        DOMSelectionV8Internal::focusNodeAttributeGetter(info);
    }

    static void focusOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueInt(info, impl->focusOffset());
    }

    CORE_EXPORT void focusOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionFocusOffset);

        DOMSelectionV8Internal::focusOffsetAttributeGetter(info);
    }

    static void isCollapsedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueBool(info, impl->isCollapsed());
    }

    CORE_EXPORT void isCollapsedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionIsCollapsed);

        DOMSelectionV8Internal::isCollapsedAttributeGetter(info);
    }

    static void rangeCountAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueInt(info, impl->rangeCount());
    }

    CORE_EXPORT void rangeCountAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionRangeCount);

        DOMSelectionV8Internal::rangeCountAttributeGetter(info);
    }

    static void typeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueString(info, impl->type(), info.GetIsolate());
    }

    CORE_EXPORT void typeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionType);

        DOMSelectionV8Internal::typeAttributeGetter(info);
    }

    static void baseNodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->baseNode()), impl);
    }

    CORE_EXPORT void baseNodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionBaseNode);

        DOMSelectionV8Internal::baseNodeAttributeGetter(info);
    }

    static void baseOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueInt(info, impl->baseOffset());
    }

    CORE_EXPORT void baseOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionBaseOffset);

        DOMSelectionV8Internal::baseOffsetAttributeGetter(info);
    }

    static void extentNodeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->extentNode()), impl);
    }

    CORE_EXPORT void extentNodeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionExtentNode);

        DOMSelectionV8Internal::extentNodeAttributeGetter(info);
    }

    static void extentOffsetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DOMSelection* impl = V8Selection::toImpl(holder);

        v8SetReturnValueInt(info, impl->extentOffset());
    }

    CORE_EXPORT void extentOffsetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionExtentOffset);

        DOMSelectionV8Internal::extentOffsetAttributeGetter(info);
    }

    static void getRangeAtMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "getRangeAt");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        int index;
        index = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        Range* result = impl->getRangeAt(index, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void getRangeAtMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionGetRangeAt);
        DOMSelectionV8Internal::getRangeAtMethod(info);
    }

    static void addRangeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("addRange", "Selection", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        Range* range;
        range = V8Range::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!range) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("addRange", "Selection", "parameter 1 is not of type 'Range'."));

            return;
        }

        impl->addRange(range);
    }

    CORE_EXPORT void addRangeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionAddRange);
        DOMSelectionV8Internal::addRangeMethod(info);
    }

    static void removeAllRangesMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        impl->removeAllRanges();
    }

    CORE_EXPORT void removeAllRangesMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionRemoveAllRanges);
        DOMSelectionV8Internal::removeAllRangesMethod(info);
    }

    static void emptyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        impl->empty();
    }

    CORE_EXPORT void emptyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionEmpty);
        DOMSelectionV8Internal::emptyMethod(info);
    }

    static void collapseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "collapse");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Node* node;
        int offset;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        if (!info[1]->IsUndefined()) {
            offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            offset = 0;
        }

        impl->collapse(node, offset, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void collapseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionCollapse);
        DOMSelectionV8Internal::collapseMethod(info);
    }

    static void setPositionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "setPosition");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Node* node;
        int offset;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        if (!info[1]->IsUndefined()) {
            offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            offset = 0;
        }

        impl->collapse(node, offset, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void setPositionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionSetPosition);
        DOMSelectionV8Internal::setPositionMethod(info);
    }

    static void collapseToStartMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "collapseToStart");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        impl->collapseToStart(exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void collapseToStartMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionCollapseToStart);
        DOMSelectionV8Internal::collapseToStartMethod(info);
    }

    static void collapseToEndMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "collapseToEnd");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        impl->collapseToEnd(exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void collapseToEndMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionCollapseToEnd);
        DOMSelectionV8Internal::collapseToEndMethod(info);
    }

    static void extendMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "extend");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Node* node;
        int offset;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        if (!info[1]->IsUndefined()) {
            offset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            offset = 0;
        }

        impl->extend(node, offset, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void extendMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionExtend);
        DOMSelectionV8Internal::extendMethod(info);
    }

    static void setBaseAndExtentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "setBaseAndExtent");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 4)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(4, info.Length()));
            return;
        }

        Node* baseNode;
        int baseOffset;
        Node* extentNode;
        int extentOffset;
        baseNode = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!baseNode && !isUndefinedOrNull(info[0])) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        baseOffset = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        extentNode = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[2]);
        if (!extentNode && !isUndefinedOrNull(info[2])) {
            exceptionState.throwTypeError("parameter 3 is not of type 'Node'.");

            return;
        }

        extentOffset = toInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setBaseAndExtent(baseNode, baseOffset, extentNode, extentOffset, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void setBaseAndExtentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionSetBaseAndExtent);
        DOMSelectionV8Internal::setBaseAndExtentMethod(info);
    }

    static void selectAllChildrenMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "selectAllChildren");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Node* node;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        impl->selectAllChildren(node, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void selectAllChildrenMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionSelectAllChildren);
        DOMSelectionV8Internal::selectAllChildrenMethod(info);
    }

    static void deleteFromDocumentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        impl->deleteFromDocument();
    }

    CORE_EXPORT void deleteFromDocumentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionDeleteDromDocument);
        CEReactionsScope ceReactionsScope;
        DOMSelectionV8Internal::deleteFromDocumentMethod(info);
    }

    static void containsNodeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Selection", "containsNode");

        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Node* node;
        bool allowPartialContainment;
        node = V8Node::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!node) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Node'.");

            return;
        }

        if (!info[1]->IsUndefined()) {
            allowPartialContainment = toBoolean(info.GetIsolate(), info[1], exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            allowPartialContainment = false;
        }

        v8SetReturnValueBool(info, impl->containsNode(node, allowPartialContainment));
    }

    CORE_EXPORT void containsNodeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionContainsNode);
        DOMSelectionV8Internal::containsNodeMethod(info);
    }

    static void modifyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        V8StringResource<> alter;
        V8StringResource<> direction;
        V8StringResource<> granularity;
        alter = info[0];
        if (!alter.prepare())
            return;

        direction = info[1];
        if (!direction.prepare())
            return;

        granularity = info[2];
        if (!granularity.prepare())
            return;

        impl->modify(alter, direction, granularity);
    }

    CORE_EXPORT void modifyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionModify);
        DOMSelectionV8Internal::modifyMethod(info);
    }

    static void toStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DOMSelection* impl = V8Selection::toImpl(info.Holder());

        v8SetReturnValueString(info, impl->toString(), info.GetIsolate());
    }

    CORE_EXPORT void toStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SelectionDOMString);
        DOMSelectionV8Internal::toStringMethod(info);
    }

} // namespace DOMSelectionV8Internal

const V8DOMConfiguration::AccessorConfiguration V8SelectionAccessors[] = {
    { "anchorNode", DOMSelectionV8Internal::anchorNodeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "anchorOffset", DOMSelectionV8Internal::anchorOffsetAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "focusNode", DOMSelectionV8Internal::focusNodeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "focusOffset", DOMSelectionV8Internal::focusOffsetAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "isCollapsed", DOMSelectionV8Internal::isCollapsedAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "rangeCount", DOMSelectionV8Internal::rangeCountAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "type", DOMSelectionV8Internal::typeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "baseNode", DOMSelectionV8Internal::baseNodeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "baseOffset", DOMSelectionV8Internal::baseOffsetAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "extentNode", DOMSelectionV8Internal::extentNodeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "extentOffset", DOMSelectionV8Internal::extentOffsetAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8SelectionMethods[] = {
    { "getRangeAt", DOMSelectionV8Internal::getRangeAtMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "addRange", DOMSelectionV8Internal::addRangeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "removeAllRanges", DOMSelectionV8Internal::removeAllRangesMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "empty", DOMSelectionV8Internal::emptyMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "collapse", DOMSelectionV8Internal::collapseMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setPosition", DOMSelectionV8Internal::setPositionMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "collapseToStart", DOMSelectionV8Internal::collapseToStartMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "collapseToEnd", DOMSelectionV8Internal::collapseToEndMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "extend", DOMSelectionV8Internal::extendMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setBaseAndExtent", DOMSelectionV8Internal::setBaseAndExtentMethodCallback, 0, 4, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "selectAllChildren", DOMSelectionV8Internal::selectAllChildrenMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "deleteFromDocument", DOMSelectionV8Internal::deleteFromDocumentMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "containsNode", DOMSelectionV8Internal::containsNodeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "modify", DOMSelectionV8Internal::modifyMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toString", DOMSelectionV8Internal::toStringMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8SelectionTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8Selection::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8Selection::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SelectionAccessors, WTF_ARRAY_LENGTH(V8SelectionAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SelectionMethods, WTF_ARRAY_LENGTH(V8SelectionMethods));
}

v8::Local<v8::FunctionTemplate> V8Selection::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SelectionTemplate);
}

bool V8Selection::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Selection::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DOMSelection* V8Selection::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
