// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8SecurityPolicyViolationEventInit.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8EventInit.h"

namespace blink {

void V8SecurityPolicyViolationEventInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, SecurityPolicyViolationEventInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8EventInit::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> blockedURIValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "blockedURI")).ToLocal(&blockedURIValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (blockedURIValue.IsEmpty() || blockedURIValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> blockedURI = blockedURIValue;
        if (!blockedURI.prepare(exceptionState))
            return;
        impl.setBlockedURI(blockedURI);
    }

    v8::Local<v8::Value> columnNumberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "columnNumber")).ToLocal(&columnNumberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (columnNumberValue.IsEmpty() || columnNumberValue->IsUndefined()) {
        // Do nothing.
    } else {
        int columnNumber = toInt32(isolate, columnNumberValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setColumnNumber(columnNumber);
    }

    v8::Local<v8::Value> dispositionValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "disposition")).ToLocal(&dispositionValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (dispositionValue.IsEmpty() || dispositionValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> disposition = dispositionValue;
        if (!disposition.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "enforce",
            "report",
        };
        if (!isValidEnum(disposition, validValues, WTF_ARRAY_LENGTH(validValues), "SecurityPolicyViolationEventDisposition", exceptionState))
            return;
        impl.setDisposition(disposition);
    }

    v8::Local<v8::Value> documentURIValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "documentURI")).ToLocal(&documentURIValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (documentURIValue.IsEmpty() || documentURIValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> documentURI = documentURIValue;
        if (!documentURI.prepare(exceptionState))
            return;
        impl.setDocumentURI(documentURI);
    }

    v8::Local<v8::Value> effectiveDirectiveValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "effectiveDirective")).ToLocal(&effectiveDirectiveValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (effectiveDirectiveValue.IsEmpty() || effectiveDirectiveValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> effectiveDirective = effectiveDirectiveValue;
        if (!effectiveDirective.prepare(exceptionState))
            return;
        impl.setEffectiveDirective(effectiveDirective);
    }

    v8::Local<v8::Value> lineNumberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "lineNumber")).ToLocal(&lineNumberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (lineNumberValue.IsEmpty() || lineNumberValue->IsUndefined()) {
        // Do nothing.
    } else {
        int lineNumber = toInt32(isolate, lineNumberValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLineNumber(lineNumber);
    }

    v8::Local<v8::Value> originalPolicyValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "originalPolicy")).ToLocal(&originalPolicyValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (originalPolicyValue.IsEmpty() || originalPolicyValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> originalPolicy = originalPolicyValue;
        if (!originalPolicy.prepare(exceptionState))
            return;
        impl.setOriginalPolicy(originalPolicy);
    }

    v8::Local<v8::Value> referrerValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "referrer")).ToLocal(&referrerValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (referrerValue.IsEmpty() || referrerValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> referrer = referrerValue;
        if (!referrer.prepare(exceptionState))
            return;
        impl.setReferrer(referrer);
    }

    v8::Local<v8::Value> sourceFileValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "sourceFile")).ToLocal(&sourceFileValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (sourceFileValue.IsEmpty() || sourceFileValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> sourceFile = sourceFileValue;
        if (!sourceFile.prepare(exceptionState))
            return;
        impl.setSourceFile(sourceFile);
    }

    v8::Local<v8::Value> statusCodeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "statusCode")).ToLocal(&statusCodeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (statusCodeValue.IsEmpty() || statusCodeValue->IsUndefined()) {
        // Do nothing.
    } else {
        unsigned statusCode = toUInt16(isolate, statusCodeValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStatusCode(statusCode);
    }

    v8::Local<v8::Value> violatedDirectiveValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "violatedDirective")).ToLocal(&violatedDirectiveValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (violatedDirectiveValue.IsEmpty() || violatedDirectiveValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> violatedDirective = violatedDirectiveValue;
        if (!violatedDirective.prepare(exceptionState))
            return;
        impl.setViolatedDirective(violatedDirective);
    }
}

v8::Local<v8::Value> SecurityPolicyViolationEventInit::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8SecurityPolicyViolationEventInit(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8SecurityPolicyViolationEventInit(const SecurityPolicyViolationEventInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!toV8EventInit(impl, dictionary, creationContext, isolate))
        return false;

    if (impl.hasBlockedURI()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "blockedURI"), v8String(isolate, impl.blockedURI()))))
            return false;
    }

    if (impl.hasColumnNumber()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "columnNumber"), v8::Integer::New(isolate, impl.columnNumber()))))
            return false;
    }

    if (impl.hasDisposition()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "disposition"), v8String(isolate, impl.disposition()))))
            return false;
    }

    if (impl.hasDocumentURI()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "documentURI"), v8String(isolate, impl.documentURI()))))
            return false;
    }

    if (impl.hasEffectiveDirective()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "effectiveDirective"), v8String(isolate, impl.effectiveDirective()))))
            return false;
    }

    if (impl.hasLineNumber()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "lineNumber"), v8::Integer::New(isolate, impl.lineNumber()))))
            return false;
    }

    if (impl.hasOriginalPolicy()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "originalPolicy"), v8String(isolate, impl.originalPolicy()))))
            return false;
    }

    if (impl.hasReferrer()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "referrer"), v8String(isolate, impl.referrer()))))
            return false;
    }

    if (impl.hasSourceFile()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "sourceFile"), v8String(isolate, impl.sourceFile()))))
            return false;
    }

    if (impl.hasStatusCode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "statusCode"), v8::Integer::NewFromUnsigned(isolate, impl.statusCode()))))
            return false;
    }

    if (impl.hasViolatedDirective()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "violatedDirective"), v8String(isolate, impl.violatedDirective()))))
            return false;
    }

    return true;
}

SecurityPolicyViolationEventInit NativeValueTraits<SecurityPolicyViolationEventInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    SecurityPolicyViolationEventInit impl;
    V8SecurityPolicyViolationEventInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
