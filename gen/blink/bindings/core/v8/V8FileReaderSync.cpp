// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8FileReaderSync.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/frame/UseCounter.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8FileReaderSync::wrapperTypeInfo = { gin::kEmbedderBlink, V8FileReaderSync::domTemplate, V8FileReaderSync::trace, V8FileReaderSync::traceWrappers, 0, nullptr, "FileReaderSync", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in FileReaderSync.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& FileReaderSync::s_wrapperTypeInfo = V8FileReaderSync::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, FileReaderSync>::value,
    "FileReaderSync inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&FileReaderSync::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "FileReaderSync is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace FileReaderSyncV8Internal {

    static void readAsArrayBufferMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "FileReaderSync", "readAsArrayBuffer");

        FileReaderSync* impl = V8FileReaderSync::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Blob* blob;
        blob = V8Blob::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!blob) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Blob'.");

            return;
        }

        DOMArrayBuffer* result = impl->readAsArrayBuffer(scriptState, blob, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void readAsArrayBufferMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FileReaderSyncV8Internal::readAsArrayBufferMethod(info);
    }

    static void readAsBinaryStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "FileReaderSync", "readAsBinaryString");

        FileReaderSync* impl = V8FileReaderSync::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Blob* blob;
        blob = V8Blob::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!blob) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Blob'.");

            return;
        }

        String result = impl->readAsBinaryString(scriptState, blob, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueString(info, result, info.GetIsolate());
    }

    CORE_EXPORT void readAsBinaryStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FileReaderSyncV8Internal::readAsBinaryStringMethod(info);
    }

    static void readAsTextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "FileReaderSync", "readAsText");

        FileReaderSync* impl = V8FileReaderSync::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Blob* blob;
        V8StringResource<> label;
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        blob = V8Blob::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!blob) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Blob'.");

            return;
        }

        if (UNLIKELY(numArgsPassed <= 1)) {
            String result = impl->readAsText(scriptState, blob, exceptionState);
            if (exceptionState.hadException()) {
                return;
            }
            v8SetReturnValueString(info, result, info.GetIsolate());
            return;
        }
        label = info[1];
        if (!label.prepare())
            return;

        String result = impl->readAsText(scriptState, blob, label, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueString(info, result, info.GetIsolate());
    }

    CORE_EXPORT void readAsTextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FileReaderSyncV8Internal::readAsTextMethod(info);
    }

    static void readAsDataURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "FileReaderSync", "readAsDataURL");

        FileReaderSync* impl = V8FileReaderSync::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        Blob* blob;
        blob = V8Blob::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!blob) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Blob'.");

            return;
        }

        String result = impl->readAsDataURL(scriptState, blob, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueString(info, result, info.GetIsolate());
    }

    CORE_EXPORT void readAsDataURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        FileReaderSyncV8Internal::readAsDataURLMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
        FileReaderSync* impl = FileReaderSync::create(executionContext);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8FileReaderSync::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace FileReaderSyncV8Internal

const V8DOMConfiguration::MethodConfiguration V8FileReaderSyncMethods[] = {
    { "readAsArrayBuffer", FileReaderSyncV8Internal::readAsArrayBufferMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "readAsBinaryString", FileReaderSyncV8Internal::readAsBinaryStringMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "readAsText", FileReaderSyncV8Internal::readAsTextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "readAsDataURL", FileReaderSyncV8Internal::readAsDataURLMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8FileReaderSync::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8FileReaderSync_Constructor);
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("FileReaderSync"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    FileReaderSyncV8Internal::constructor(info);
}

static void installV8FileReaderSyncTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8FileReaderSync::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8FileReaderSync::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8FileReaderSync::constructorCallback);
    interfaceTemplate->SetLength(0);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8FileReaderSyncMethods, WTF_ARRAY_LENGTH(V8FileReaderSyncMethods));
}

v8::Local<v8::FunctionTemplate> V8FileReaderSync::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8FileReaderSyncTemplate);
}

bool V8FileReaderSync::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8FileReaderSync::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

FileReaderSync* V8FileReaderSync::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
