// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "NodeOrString.h"

#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8Node.h"

namespace blink {

NodeOrString::NodeOrString()
    : m_type(SpecificTypeNone)
{
}

Node* NodeOrString::getAsNode() const
{
    DCHECK(isNode());
    return m_node;
}

void NodeOrString::setNode(Node* value)
{
    DCHECK(isNull());
    m_node = value;
    m_type = SpecificTypeNode;
}

NodeOrString NodeOrString::fromNode(Node* value)
{
    NodeOrString container;
    container.setNode(value);
    return container;
}

String NodeOrString::getAsString() const
{
    DCHECK(isString());
    return m_string;
}

void NodeOrString::setString(String value)
{
    DCHECK(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

NodeOrString NodeOrString::fromString(String value)
{
    NodeOrString container;
    container.setString(value);
    return container;
}

NodeOrString::NodeOrString(const NodeOrString&) = default;
NodeOrString::~NodeOrString() = default;
NodeOrString& NodeOrString::operator=(const NodeOrString&) = default;

DEFINE_TRACE(NodeOrString)
{
    visitor->trace(m_node);
}

void V8NodeOrString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, NodeOrString& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8Node::hasInstance(v8Value, isolate)) {
        Node* cppValue = V8Node::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setNode(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const NodeOrString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case NodeOrString::SpecificTypeNone:
        return v8::Null(isolate);
    case NodeOrString::SpecificTypeNode:
        return ToV8(impl.getAsNode(), creationContext, isolate);
    case NodeOrString::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

NodeOrString NativeValueTraits<NodeOrString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    NodeOrString impl;
    V8NodeOrString::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
