// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8DataTransfer.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DataTransferItemList.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8FileList.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8DataTransfer::wrapperTypeInfo = { gin::kEmbedderBlink, V8DataTransfer::domTemplate, V8DataTransfer::trace, V8DataTransfer::traceWrappers, 0, nullptr, "DataTransfer", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in DataTransfer.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& DataTransfer::s_wrapperTypeInfo = V8DataTransfer::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, DataTransfer>::value,
    "DataTransfer inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&DataTransfer::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "DataTransfer is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace DataTransferV8Internal {

    static void dropEffectAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        v8SetReturnValueString(info, impl->dropEffect(), info.GetIsolate());
    }

    CORE_EXPORT void dropEffectAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::dropEffectAttributeGetter(info);
    }

    static void dropEffectAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setDropEffect(cppValue);
    }

    CORE_EXPORT void dropEffectAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DataTransferV8Internal::dropEffectAttributeSetter(v8Value, info);
    }

    static void effectAllowedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        v8SetReturnValueString(info, impl->effectAllowed(), info.GetIsolate());
    }

    CORE_EXPORT void effectAllowedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::effectAllowedAttributeGetter(info);
    }

    static void effectAllowedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setEffectAllowed(cppValue);
    }

    CORE_EXPORT void effectAllowedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        DataTransferV8Internal::effectAllowedAttributeSetter(v8Value, info);
    }

    static void itemsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        DataTransferItemList* cppValue(WTF::getPtr(impl->items()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#DataTransfer#items";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void itemsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::itemsAttributeGetter(info);
    }

    static void typesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        v8SetReturnValue(info, ToV8(impl->types(), info.Holder(), info.GetIsolate()));
    }

    CORE_EXPORT void typesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::typesAttributeGetter(info);
    }

    static void filesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        DataTransfer* impl = V8DataTransfer::toImpl(holder);

        FileList* cppValue(WTF::getPtr(impl->files()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#DataTransfer#files";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void filesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::filesAttributeGetter(info);
    }

    static void setDragImageMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "DataTransfer", "setDragImage");

        DataTransfer* impl = V8DataTransfer::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        Element* image;
        int x;
        int y;
        image = V8Element::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!image) {
            exceptionState.throwTypeError("parameter 1 is not of type 'Element'.");

            return;
        }

        x = toInt32(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        y = toInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDragImage(image, x, y);
    }

    CORE_EXPORT void setDragImageMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::setDragImageMethod(info);
    }

    static void getDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransfer* impl = V8DataTransfer::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getData", "DataTransfer", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        V8StringResource<> format;
        format = info[0];
        if (!format.prepare())
            return;

        v8SetReturnValueString(info, impl->getData(format), info.GetIsolate());
    }

    CORE_EXPORT void getDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::getDataMethod(info);
    }

    static void setDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransfer* impl = V8DataTransfer::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 2)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("setData", "DataTransfer", ExceptionMessages::notEnoughArguments(2, info.Length())));
            return;
        }

        V8StringResource<> format;
        V8StringResource<> data;
        format = info[0];
        if (!format.prepare())
            return;

        data = info[1];
        if (!data.prepare())
            return;

        impl->setData(format, data);
    }

    CORE_EXPORT void setDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::setDataMethod(info);
    }

    static void clearDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransfer* impl = V8DataTransfer::toImpl(info.Holder());

        V8StringResource<> format;
        int numArgsPassed = info.Length();
        while (numArgsPassed > 0) {
            if (!info[numArgsPassed - 1]->IsUndefined())
                break;
            --numArgsPassed;
        }
        if (UNLIKELY(numArgsPassed <= 0)) {
            impl->clearData();
            return;
        }
        format = info[0];
        if (!format.prepare())
            return;

        impl->clearData(format);
    }

    CORE_EXPORT void clearDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DataTransferV8Internal::clearDataMethod(info);
    }

} // namespace DataTransferV8Internal

const V8DOMConfiguration::AccessorConfiguration V8DataTransferAccessors[] = {
    { "dropEffect", DataTransferV8Internal::dropEffectAttributeGetterCallback, DataTransferV8Internal::dropEffectAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "effectAllowed", DataTransferV8Internal::effectAllowedAttributeGetterCallback, DataTransferV8Internal::effectAllowedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "items", DataTransferV8Internal::itemsAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "types", DataTransferV8Internal::typesAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "files", DataTransferV8Internal::filesAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8DataTransferMethods[] = {
    { "setDragImage", DataTransferV8Internal::setDragImageMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getData", DataTransferV8Internal::getDataMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setData", DataTransferV8Internal::setDataMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "clearData", DataTransferV8Internal::clearDataMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8DataTransferTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8DataTransfer::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8DataTransfer::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8DataTransferAccessors, WTF_ARRAY_LENGTH(V8DataTransferAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8DataTransferMethods, WTF_ARRAY_LENGTH(V8DataTransferMethods));
}

v8::Local<v8::FunctionTemplate> V8DataTransfer::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8DataTransferTemplate);
}

bool V8DataTransfer::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8DataTransfer::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

DataTransfer* V8DataTransfer::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
