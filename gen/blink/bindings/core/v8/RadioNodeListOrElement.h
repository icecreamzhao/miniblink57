// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.h.tmpl

// clang-format on
#ifndef RadioNodeListOrElement_h
#define RadioNodeListOrElement_h

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8Binding.h"
#include "core/CoreExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class Element;
class RadioNodeList;

class CORE_EXPORT RadioNodeListOrElement final {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    RadioNodeListOrElement();
    bool isNull() const { return m_type == SpecificTypeNone; }

    bool isRadioNodeList() const { return m_type == SpecificTypeRadioNodeList; }
    RadioNodeList* getAsRadioNodeList() const;
    void setRadioNodeList(RadioNodeList*);
    static RadioNodeListOrElement fromRadioNodeList(RadioNodeList*);

    bool isElement() const { return m_type == SpecificTypeElement; }
    Element* getAsElement() const;
    void setElement(Element*);
    static RadioNodeListOrElement fromElement(Element*);

    RadioNodeListOrElement(const RadioNodeListOrElement&);
    ~RadioNodeListOrElement();
    RadioNodeListOrElement& operator=(const RadioNodeListOrElement&);
    DECLARE_TRACE();

private:
    enum SpecificTypes {
        SpecificTypeNone,
        SpecificTypeRadioNodeList,
        SpecificTypeElement,
    };
    SpecificTypes m_type;

    Member<RadioNodeList> m_radioNodeList;
    Member<Element> m_element;

    friend CORE_EXPORT v8::Local<v8::Value> ToV8(const RadioNodeListOrElement&, v8::Local<v8::Object>, v8::Isolate*);
};

class V8RadioNodeListOrElement final {
public:
    CORE_EXPORT static void toImpl(v8::Isolate*, v8::Local<v8::Value>, RadioNodeListOrElement&, UnionTypeConversionMode, ExceptionState&);
};

CORE_EXPORT v8::Local<v8::Value> ToV8(const RadioNodeListOrElement&, v8::Local<v8::Object>, v8::Isolate*);

template <class CallbackInfo>
inline void v8SetReturnValue(const CallbackInfo& callbackInfo, RadioNodeListOrElement& impl)
{
    v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
}

template <>
struct NativeValueTraits<RadioNodeListOrElement> {
    CORE_EXPORT static RadioNodeListOrElement nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
};

} // namespace blink

// We need to set canInitializeWithMemset=true because HeapVector supports
// items that can initialize with memset or have a vtable. It is safe to
// set canInitializeWithMemset=true for a union type object in practice.
// See https://codereview.chromium.org/1118993002/#msg5 for more details.
WTF_ALLOW_MOVE_AND_INIT_WITH_MEM_FUNCTIONS(blink::RadioNodeListOrElement);

#endif // RadioNodeListOrElement_h
