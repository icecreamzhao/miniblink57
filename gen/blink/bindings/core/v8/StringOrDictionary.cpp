// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "StringOrDictionary.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ToV8.h"

namespace blink {

StringOrDictionary::StringOrDictionary()
    : m_type(SpecificTypeNone)
{
}

String StringOrDictionary::getAsString() const
{
    DCHECK(isString());
    return m_string;
}

void StringOrDictionary::setString(String value)
{
    DCHECK(isNull());
    m_string = value;
    m_type = SpecificTypeString;
}

StringOrDictionary StringOrDictionary::fromString(String value)
{
    StringOrDictionary container;
    container.setString(value);
    return container;
}

Dictionary StringOrDictionary::getAsDictionary() const
{
    DCHECK(isDictionary());
    return m_dictionary;
}

void StringOrDictionary::setDictionary(Dictionary value)
{
    DCHECK(isNull());
    m_dictionary = value;
    m_type = SpecificTypeDictionary;
}

StringOrDictionary StringOrDictionary::fromDictionary(Dictionary value)
{
    StringOrDictionary container;
    container.setDictionary(value);
    return container;
}

StringOrDictionary::StringOrDictionary(const StringOrDictionary&) = default;
StringOrDictionary::~StringOrDictionary() = default;
StringOrDictionary& StringOrDictionary::operator=(const StringOrDictionary&) = default;

DEFINE_TRACE(StringOrDictionary)
{
}

void V8StringOrDictionary::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, StringOrDictionary& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (isUndefinedOrNull(v8Value) || v8Value->IsObject()) {
        Dictionary cppValue = Dictionary(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDictionary(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare(exceptionState))
            return;
        impl.setString(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const StringOrDictionary& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case StringOrDictionary::SpecificTypeNone:
        return v8::Null(isolate);
    case StringOrDictionary::SpecificTypeString:
        return v8String(isolate, impl.getAsString());
    case StringOrDictionary::SpecificTypeDictionary:
        return impl.getAsDictionary().v8Value();
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

StringOrDictionary NativeValueTraits<StringOrDictionary>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    StringOrDictionary impl;
    V8StringOrDictionary::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
