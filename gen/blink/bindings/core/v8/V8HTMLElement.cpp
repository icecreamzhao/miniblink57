// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8HTMLElement.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8CSSStyleDeclaration.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMStringMap.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8HTMLConstructor.h"
#include "bindings/core/v8/V8HTMLMenuElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8StylePropertyMap.h"
#include "core/HTMLNames.h"
#include "core/animation/ElementAnimation.h"
#include "core/dom/Document.h"
#include "core/dom/ElementFullscreen.h"
#include "core/dom/GlobalEventHandlers.h"
#include "core/dom/custom/CEReactionsScope.h"
#include "core/dom/custom/V0CustomElementProcessingStack.h"
#include "core/frame/UseCounter.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8HTMLElement::wrapperTypeInfo = { gin::kEmbedderBlink, V8HTMLElement::domTemplate, V8HTMLElement::trace, V8HTMLElement::traceWrappers, 0, nullptr, "HTMLElement", &V8Element::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::NodeClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in HTMLElement.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& HTMLElement::s_wrapperTypeInfo = V8HTMLElement::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, HTMLElement>::value,
    "HTMLElement inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&HTMLElement::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "HTMLElement is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace HTMLElementV8Internal {

    static void titleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::titleAttr), info.GetIsolate());
    }

    CORE_EXPORT void titleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::titleAttributeGetter(info);
    }

    static void titleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setAttribute(HTMLNames::titleAttr, cppValue);
    }

    CORE_EXPORT void titleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::titleAttributeSetter(v8Value, info);
    }

    static void langAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::langAttr), info.GetIsolate());
    }

    CORE_EXPORT void langAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::langAttributeGetter(info);
    }

    static void langAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setAttribute(HTMLNames::langAttr, cppValue);
    }

    CORE_EXPORT void langAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::langAttributeSetter(v8Value, info);
    }

    static void translateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueBool(info, impl->translate());
    }

    CORE_EXPORT void translateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::translateAttributeGetter(info);
    }

    static void translateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "translate");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setTranslate(cppValue);
    }

    CORE_EXPORT void translateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        HTMLElementV8Internal::translateAttributeSetter(v8Value, info);
    }

    static void dirAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->dir(), info.GetIsolate());
    }

    CORE_EXPORT void dirAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::dirAttributeGetter(info);
    }

    static void dirAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setDir(cppValue);
    }

    CORE_EXPORT void dirAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        HTMLElementV8Internal::dirAttributeSetter(v8Value, info);
    }

    static void datasetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->dataset()), impl);
    }

    CORE_EXPORT void datasetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::datasetAttributeGetter(info);
    }

    static void datasetAttributeGetterForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueForMainWorld(info, WTF::getPtr(impl->dataset()));
    }

    CORE_EXPORT void datasetAttributeGetterCallbackForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::datasetAttributeGetterForMainWorld(info);
    }

    static void hiddenAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueBool(info, impl->fastHasAttribute(HTMLNames::hiddenAttr));
    }

    CORE_EXPORT void hiddenAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::hiddenAttributeGetter(info);
    }

    static void hiddenAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Skip on compact node DOMString getters.
        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "hidden");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setBooleanAttribute(HTMLNames::hiddenAttr, cppValue);
    }

    CORE_EXPORT void hiddenAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::hiddenAttributeSetter(v8Value, info);
    }

    static void tabIndexAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueInt(info, impl->tabIndex());
    }

    CORE_EXPORT void tabIndexAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::tabIndexAttributeGetter(info);
    }

    static void tabIndexAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Skip on compact node DOMString getters.
        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "tabIndex");

        // Prepare the value to be set.
        int cppValue = toInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setTabIndex(cppValue);
    }

    CORE_EXPORT void tabIndexAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::tabIndexAttributeSetter(v8Value, info);
    }

    static void accessKeyAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::accesskeyAttr), info.GetIsolate());
    }

    CORE_EXPORT void accessKeyAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::accessKeyAttributeGetter(info);
    }

    static void accessKeyAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setAttribute(HTMLNames::accesskeyAttr, cppValue);
    }

    CORE_EXPORT void accessKeyAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::accessKeyAttributeSetter(v8Value, info);
    }

    static void draggableAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueBool(info, impl->draggable());
    }

    CORE_EXPORT void draggableAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::draggableAttributeGetter(info);
    }

    static void draggableAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Skip on compact node DOMString getters.
        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "draggable");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDraggable(cppValue);
    }

    CORE_EXPORT void draggableAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::draggableAttributeSetter(v8Value, info);
    }

    static void contextMenuAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->contextMenu()), impl);
    }

    CORE_EXPORT void contextMenuAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::contextMenuAttributeGetter(info);
    }

    static void contextMenuAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "contextMenu");

        // Prepare the value to be set.
        HTMLMenuElement* cppValue = V8HTMLMenuElement::toImplWithTypeCheck(info.GetIsolate(), v8Value);

        // Type check per: http://heycam.github.io/webidl/#es-interface
        if (!cppValue && !isUndefinedOrNull(v8Value)) {
            exceptionState.throwTypeError("The provided value is not of type 'HTMLMenuElement'.");
            return;
        }

        impl->setContextMenu(cppValue);
    }

    CORE_EXPORT void contextMenuAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        HTMLElementV8Internal::contextMenuAttributeSetter(v8Value, info);
    }

    static void spellcheckAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueBool(info, impl->spellcheck());
    }

    CORE_EXPORT void spellcheckAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::spellcheckAttributeGetter(info);
    }

    static void spellcheckAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "spellcheck");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setSpellcheck(cppValue);
    }

    CORE_EXPORT void spellcheckAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        HTMLElementV8Internal::spellcheckAttributeSetter(v8Value, info);
    }

    static void contentEditableAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->contentEditable(), info.GetIsolate());
    }

    CORE_EXPORT void contentEditableAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::contentEditableAttributeGetter(info);
    }

    static void contentEditableAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Skip on compact node DOMString getters.
        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "contentEditable");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setContentEditable(cppValue, exceptionState);
    }

    CORE_EXPORT void contentEditableAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::contentEditableAttributeSetter(v8Value, info);
    }

    static void isContentEditableAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueBool(info, impl->isContentEditableForBinding());
    }

    CORE_EXPORT void isContentEditableAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::isContentEditableAttributeGetter(info);
    }

    static void inputModeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::inputmodeAttr), info.GetIsolate());
    }

    CORE_EXPORT void inputModeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::inputModeAttributeGetter(info);
    }

    static void inputModeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setAttribute(HTMLNames::inputmodeAttr, cppValue);
    }

    CORE_EXPORT void inputModeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::inputModeAttributeSetter(v8Value, info);
    }

    static void offsetParentAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->unclosedOffsetParent()), impl);
    }

    CORE_EXPORT void offsetParentAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::offsetParentAttributeGetter(info);
    }

    static void offsetParentAttributeGetterForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueForMainWorld(info, WTF::getPtr(impl->unclosedOffsetParent()));
    }

    CORE_EXPORT void offsetParentAttributeGetterCallbackForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::offsetParentAttributeGetterForMainWorld(info);
    }

    static void offsetTopAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueInt(info, impl->offsetTopForBinding());
    }

    CORE_EXPORT void offsetTopAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::offsetTopAttributeGetter(info);
    }

    static void offsetLeftAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueInt(info, impl->offsetLeftForBinding());
    }

    CORE_EXPORT void offsetLeftAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::offsetLeftAttributeGetter(info);
    }

    static void offsetWidthAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueInt(info, impl->offsetWidthForBinding());
    }

    CORE_EXPORT void offsetWidthAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::offsetWidthAttributeGetter(info);
    }

    static void offsetHeightAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueInt(info, impl->offsetHeightForBinding());
    }

    CORE_EXPORT void offsetHeightAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::offsetHeightAttributeGetter(info);
    }

    static void styleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->style()), impl);
    }

    CORE_EXPORT void styleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::styleAttributeGetter(info);
    }

    static void styleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* proxyImpl = V8HTMLElement::toImpl(holder);
        CSSStyleDeclaration* impl = WTF::getPtr(proxyImpl->style());
        if (!impl)
            return;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "style");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setCSSText(cppValue, exceptionState);
    }

    CORE_EXPORT void styleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::styleAttributeSetter(v8Value, info);
    }

    static void styleAttributeGetterForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueForMainWorld(info, WTF::getPtr(impl->style()));
    }

    CORE_EXPORT void styleAttributeGetterCallbackForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::styleAttributeGetterForMainWorld(info);
    }

    static void styleAttributeSetterForMainWorld(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* proxyImpl = V8HTMLElement::toImpl(holder);
        CSSStyleDeclaration* impl = WTF::getPtr(proxyImpl->style());
        if (!impl)
            return;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "style");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setCSSText(cppValue, exceptionState);
    }

    CORE_EXPORT void styleAttributeSetterCallbackForMainWorld(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::styleAttributeSetterForMainWorld(v8Value, info);
    }

    static void styleMapAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->styleMap()), impl);
    }

    CORE_EXPORT void styleMapAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::styleMapAttributeGetter(info);
    }

    static void innerTextAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->innerText(), info.GetIsolate());
    }

    CORE_EXPORT void innerTextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::HTMLElementInnerText);

        HTMLElementV8Internal::innerTextAttributeGetter(info);
    }

    static void innerTextAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Skip on compact node DOMString getters.
        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "innerText");

        // Prepare the value to be set.
        V8StringResource<TreatNullAsNullString> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setInnerText(cppValue, exceptionState);
    }

    CORE_EXPORT void innerTextAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::HTMLElementInnerText);

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::innerTextAttributeSetter(v8Value, info);
    }

    static void outerTextAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->outerText(), info.GetIsolate());
    }

    CORE_EXPORT void outerTextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::HTMLElementOuterText);

        HTMLElementV8Internal::outerTextAttributeGetter(info);
    }

    static void outerTextAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Skip on compact node DOMString getters.
        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "HTMLElement", "outerText");

        // Prepare the value to be set.
        V8StringResource<TreatNullAsNullString> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setOuterText(cppValue, exceptionState);
    }

    CORE_EXPORT void outerTextAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::HTMLElementOuterText);

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::outerTextAttributeSetter(v8Value, info);
    }

    static void webkitdropzoneAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        v8SetReturnValueString(info, impl->fastGetAttribute(HTMLNames::webkitdropzoneAttr), info.GetIsolate());
    }

    CORE_EXPORT void webkitdropzoneAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedHTMLElementDropzone);

        HTMLElementV8Internal::webkitdropzoneAttributeGetter(info);
    }

    static void webkitdropzoneAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<TreatNullAsNullString> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setAttribute(HTMLNames::webkitdropzoneAttr, cppValue);
    }

    CORE_EXPORT void webkitdropzoneAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::PrefixedHTMLElementDropzone);

        CEReactionsScope ceReactionsScope;

        V0CustomElementProcessingStack::CallbackDeliveryScope deliveryScope;

        HTMLElementV8Internal::webkitdropzoneAttributeSetter(v8Value, info);
    }

    static void onabortAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onabort(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onabortAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onabortAttributeGetter(info);
    }

    static void onabortAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnabort(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onabortAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onabortAttributeSetter(v8Value, info);
    }

    static void onblurAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onblur(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onblurAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onblurAttributeGetter(info);
    }

    static void onblurAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnblur(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onblurAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onblurAttributeSetter(v8Value, info);
    }

    static void oncancelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncancel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncancelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oncancelAttributeGetter(info);
    }

    static void oncancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOncancel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncancelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oncancelAttributeSetter(v8Value, info);
    }

    static void oncanplayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncanplay(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncanplayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oncanplayAttributeGetter(info);
    }

    static void oncanplayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOncanplay(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncanplayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oncanplayAttributeSetter(v8Value, info);
    }

    static void oncanplaythroughAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncanplaythrough(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncanplaythroughAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oncanplaythroughAttributeGetter(info);
    }

    static void oncanplaythroughAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOncanplaythrough(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncanplaythroughAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oncanplaythroughAttributeSetter(v8Value, info);
    }

    static void onchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onchange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onchangeAttributeGetter(info);
    }

    static void onchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnchange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onchangeAttributeSetter(v8Value, info);
    }

    static void onclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onclickAttributeGetter(info);
    }

    static void onclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onclickAttributeSetter(v8Value, info);
    }

    static void oncloseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onclose(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncloseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oncloseAttributeGetter(info);
    }

    static void oncloseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnclose(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncloseAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oncloseAttributeSetter(v8Value, info);
    }

    static void oncontextmenuAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncontextmenu(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncontextmenuAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oncontextmenuAttributeGetter(info);
    }

    static void oncontextmenuAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOncontextmenu(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncontextmenuAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oncontextmenuAttributeSetter(v8Value, info);
    }

    static void oncuechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oncuechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oncuechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oncuechangeAttributeGetter(info);
    }

    static void oncuechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOncuechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oncuechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oncuechangeAttributeSetter(v8Value, info);
    }

    static void ondblclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondblclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondblclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondblclickAttributeGetter(info);
    }

    static void ondblclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndblclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondblclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondblclickAttributeSetter(v8Value, info);
    }

    static void ondragAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondrag(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondragAttributeGetter(info);
    }

    static void ondragAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndrag(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondragAttributeSetter(v8Value, info);
    }

    static void ondragendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragend(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondragendAttributeGetter(info);
    }

    static void ondragendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndragend(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondragendAttributeSetter(v8Value, info);
    }

    static void ondragenterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragenter(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragenterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondragenterAttributeGetter(info);
    }

    static void ondragenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndragenter(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragenterAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondragenterAttributeSetter(v8Value, info);
    }

    static void ondragleaveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragleave(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragleaveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondragleaveAttributeGetter(info);
    }

    static void ondragleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndragleave(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragleaveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondragleaveAttributeSetter(v8Value, info);
    }

    static void ondragoverAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragover(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragoverAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondragoverAttributeGetter(info);
    }

    static void ondragoverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndragover(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragoverAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondragoverAttributeSetter(v8Value, info);
    }

    static void ondragstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondragstart(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondragstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondragstartAttributeGetter(info);
    }

    static void ondragstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndragstart(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondragstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondragstartAttributeSetter(v8Value, info);
    }

    static void ondropAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondrop(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondropAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondropAttributeGetter(info);
    }

    static void ondropAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndrop(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondropAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondropAttributeSetter(v8Value, info);
    }

    static void ondurationchangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ondurationchange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ondurationchangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ondurationchangeAttributeGetter(info);
    }

    static void ondurationchangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOndurationchange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ondurationchangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ondurationchangeAttributeSetter(v8Value, info);
    }

    static void onemptiedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onemptied(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onemptiedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onemptiedAttributeGetter(info);
    }

    static void onemptiedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnemptied(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onemptiedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onemptiedAttributeSetter(v8Value, info);
    }

    static void onendedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onended(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onendedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onendedAttributeGetter(info);
    }

    static void onendedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnended(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onendedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onendedAttributeSetter(v8Value, info);
    }

    static void onerrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onerror(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onerrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onerrorAttributeGetter(info);
    }

    static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnerror(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onerrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onerrorAttributeSetter(v8Value, info);
    }

    static void onfocusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onfocus(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onfocusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onfocusAttributeGetter(info);
    }

    static void onfocusAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnfocus(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onfocusAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onfocusAttributeSetter(v8Value, info);
    }

    static void oninputAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oninput(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oninputAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oninputAttributeGetter(info);
    }

    static void oninputAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOninput(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oninputAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oninputAttributeSetter(v8Value, info);
    }

    static void oninvalidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::oninvalid(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void oninvalidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::oninvalidAttributeGetter(info);
    }

    static void oninvalidAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOninvalid(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void oninvalidAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::oninvalidAttributeSetter(v8Value, info);
    }

    static void onkeydownAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onkeydown(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onkeydownAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onkeydownAttributeGetter(info);
    }

    static void onkeydownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnkeydown(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onkeydownAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onkeydownAttributeSetter(v8Value, info);
    }

    static void onkeypressAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onkeypress(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onkeypressAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onkeypressAttributeGetter(info);
    }

    static void onkeypressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnkeypress(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onkeypressAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onkeypressAttributeSetter(v8Value, info);
    }

    static void onkeyupAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onkeyup(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onkeyupAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onkeyupAttributeGetter(info);
    }

    static void onkeyupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnkeyup(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onkeyupAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onkeyupAttributeSetter(v8Value, info);
    }

    static void onloadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onload(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onloadAttributeGetter(info);
    }

    static void onloadAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnload(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onloadAttributeSetter(v8Value, info);
    }

    static void onloadeddataAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onloadeddata(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadeddataAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onloadeddataAttributeGetter(info);
    }

    static void onloadeddataAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnloadeddata(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadeddataAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onloadeddataAttributeSetter(v8Value, info);
    }

    static void onloadedmetadataAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onloadedmetadata(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadedmetadataAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onloadedmetadataAttributeGetter(info);
    }

    static void onloadedmetadataAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnloadedmetadata(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadedmetadataAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onloadedmetadataAttributeSetter(v8Value, info);
    }

    static void onloadstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onloadstart(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onloadstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onloadstartAttributeGetter(info);
    }

    static void onloadstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnloadstart(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onloadstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onloadstartAttributeSetter(v8Value, info);
    }

    static void onmousedownAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmousedown(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmousedownAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmousedownAttributeGetter(info);
    }

    static void onmousedownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmousedown(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmousedownAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmousedownAttributeSetter(v8Value, info);
    }

    static void onmouseenterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8HTMLElement::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseenter(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseenterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmouseenterAttributeGetter(info);
    }

    static void onmouseenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8HTMLElement::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmouseenter(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseenterAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmouseenterAttributeSetter(v8Value, info);
    }

    static void onmouseleaveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8HTMLElement::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseleave(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseleaveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmouseleaveAttributeGetter(info);
    }

    static void onmouseleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        // [LenientThis]
        // Make sure that info.Holder() really points to an instance if [LenientThis].
        if (!V8HTMLElement::hasInstance(info.Holder(), info.GetIsolate()))
            return; // Return silently because of [LenientThis].

        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmouseleave(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseleaveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmouseleaveAttributeSetter(v8Value, info);
    }

    static void onmousemoveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmousemove(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmousemoveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmousemoveAttributeGetter(info);
    }

    static void onmousemoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmousemove(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmousemoveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmousemoveAttributeSetter(v8Value, info);
    }

    static void onmouseoutAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseout(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseoutAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmouseoutAttributeGetter(info);
    }

    static void onmouseoutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmouseout(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseoutAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmouseoutAttributeSetter(v8Value, info);
    }

    static void onmouseoverAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseover(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseoverAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmouseoverAttributeGetter(info);
    }

    static void onmouseoverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmouseover(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseoverAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmouseoverAttributeSetter(v8Value, info);
    }

    static void onmouseupAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmouseup(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmouseupAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmouseupAttributeGetter(info);
    }

    static void onmouseupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmouseup(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmouseupAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmouseupAttributeSetter(v8Value, info);
    }

    static void onmousewheelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onmousewheel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onmousewheelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onmousewheelAttributeGetter(info);
    }

    static void onmousewheelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnmousewheel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onmousewheelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onmousewheelAttributeSetter(v8Value, info);
    }

    static void onpauseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpause(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpauseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpauseAttributeGetter(info);
    }

    static void onpauseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpause(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpauseAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpauseAttributeSetter(v8Value, info);
    }

    static void onplayAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onplay(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onplayAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onplayAttributeGetter(info);
    }

    static void onplayAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnplay(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onplayAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onplayAttributeSetter(v8Value, info);
    }

    static void onplayingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onplaying(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onplayingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onplayingAttributeGetter(info);
    }

    static void onplayingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnplaying(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onplayingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onplayingAttributeSetter(v8Value, info);
    }

    static void onprogressAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onprogress(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onprogressAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onprogressAttributeGetter(info);
    }

    static void onprogressAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnprogress(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onprogressAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onprogressAttributeSetter(v8Value, info);
    }

    static void onratechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onratechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onratechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onratechangeAttributeGetter(info);
    }

    static void onratechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnratechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onratechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onratechangeAttributeSetter(v8Value, info);
    }

    static void onresetAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onreset(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onresetAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onresetAttributeGetter(info);
    }

    static void onresetAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnreset(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onresetAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onresetAttributeSetter(v8Value, info);
    }

    static void onresizeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onresize(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onresizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onresizeAttributeGetter(info);
    }

    static void onresizeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnresize(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onresizeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onresizeAttributeSetter(v8Value, info);
    }

    static void onscrollAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onscroll(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onscrollAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onscrollAttributeGetter(info);
    }

    static void onscrollAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnscroll(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onscrollAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onscrollAttributeSetter(v8Value, info);
    }

    static void onseekedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onseeked(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onseekedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onseekedAttributeGetter(info);
    }

    static void onseekedAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnseeked(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onseekedAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onseekedAttributeSetter(v8Value, info);
    }

    static void onseekingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onseeking(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onseekingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onseekingAttributeGetter(info);
    }

    static void onseekingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnseeking(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onseekingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onseekingAttributeSetter(v8Value, info);
    }

    static void onselectAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onselect(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onselectAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onselectAttributeGetter(info);
    }

    static void onselectAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnselect(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onselectAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onselectAttributeSetter(v8Value, info);
    }

    static void onshowAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onshow(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onshowAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onshowAttributeGetter(info);
    }

    static void onshowAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnshow(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onshowAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onshowAttributeSetter(v8Value, info);
    }

    static void onstalledAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onstalled(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onstalledAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onstalledAttributeGetter(info);
    }

    static void onstalledAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnstalled(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onstalledAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onstalledAttributeSetter(v8Value, info);
    }

    static void onsubmitAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onsubmit(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onsubmitAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onsubmitAttributeGetter(info);
    }

    static void onsubmitAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnsubmit(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onsubmitAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onsubmitAttributeSetter(v8Value, info);
    }

    static void onsuspendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onsuspend(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onsuspendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onsuspendAttributeGetter(info);
    }

    static void onsuspendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnsuspend(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onsuspendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onsuspendAttributeSetter(v8Value, info);
    }

    static void ontimeupdateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontimeupdate(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontimeupdateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ontimeupdateAttributeGetter(info);
    }

    static void ontimeupdateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOntimeupdate(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontimeupdateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ontimeupdateAttributeSetter(v8Value, info);
    }

    static void ontoggleAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontoggle(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontoggleAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ontoggleAttributeGetter(info);
    }

    static void ontoggleAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOntoggle(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontoggleAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ontoggleAttributeSetter(v8Value, info);
    }

    static void onvolumechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onvolumechange(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onvolumechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onvolumechangeAttributeGetter(info);
    }

    static void onvolumechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnvolumechange(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onvolumechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onvolumechangeAttributeSetter(v8Value, info);
    }

    static void onwaitingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onwaiting(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onwaitingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onwaitingAttributeGetter(info);
    }

    static void onwaitingAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnwaiting(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onwaitingAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onwaitingAttributeSetter(v8Value, info);
    }

    static void onauxclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onauxclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onauxclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onauxclickAttributeGetter(info);
    }

    static void onauxclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnauxclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onauxclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onauxclickAttributeSetter(v8Value, info);
    }

    static void ongotpointercaptureAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ongotpointercapture(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ongotpointercaptureAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ongotpointercaptureAttributeGetter(info);
    }

    static void ongotpointercaptureAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOngotpointercapture(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ongotpointercaptureAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ongotpointercaptureAttributeSetter(v8Value, info);
    }

    static void onlostpointercaptureAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onlostpointercapture(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onlostpointercaptureAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onlostpointercaptureAttributeGetter(info);
    }

    static void onlostpointercaptureAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnlostpointercapture(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onlostpointercaptureAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onlostpointercaptureAttributeSetter(v8Value, info);
    }

    static void onpointerdownAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerdown(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerdownAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointerdownAttributeGetter(info);
    }

    static void onpointerdownAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointerdown(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerdownAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointerdownAttributeSetter(v8Value, info);
    }

    static void onpointermoveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointermove(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointermoveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointermoveAttributeGetter(info);
    }

    static void onpointermoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointermove(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointermoveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointermoveAttributeSetter(v8Value, info);
    }

    static void onpointerupAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerup(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerupAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointerupAttributeGetter(info);
    }

    static void onpointerupAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointerup(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerupAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointerupAttributeSetter(v8Value, info);
    }

    static void onpointercancelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointercancel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointercancelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointercancelAttributeGetter(info);
    }

    static void onpointercancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointercancel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointercancelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointercancelAttributeSetter(v8Value, info);
    }

    static void onpointeroverAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerover(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointeroverAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointeroverAttributeGetter(info);
    }

    static void onpointeroverAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointerover(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointeroverAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointeroverAttributeSetter(v8Value, info);
    }

    static void onpointeroutAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerout(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointeroutAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointeroutAttributeGetter(info);
    }

    static void onpointeroutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointerout(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointeroutAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointeroutAttributeSetter(v8Value, info);
    }

    static void onpointerenterAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerenter(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerenterAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointerenterAttributeGetter(info);
    }

    static void onpointerenterAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointerenter(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerenterAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointerenterAttributeSetter(v8Value, info);
    }

    static void onpointerleaveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::onpointerleave(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onpointerleaveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::onpointerleaveAttributeGetter(info);
    }

    static void onpointerleaveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOnpointerleave(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onpointerleaveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::onpointerleaveAttributeSetter(v8Value, info);
    }

    static void ontouchcancelAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchcancel(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchcancelAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ontouchcancelAttributeGetter(info);
    }

    static void ontouchcancelAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOntouchcancel(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchcancelAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ontouchcancelAttributeSetter(v8Value, info);
    }

    static void ontouchendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchend(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ontouchendAttributeGetter(info);
    }

    static void ontouchendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOntouchend(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ontouchendAttributeSetter(v8Value, info);
    }

    static void ontouchmoveAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchmove(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchmoveAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ontouchmoveAttributeGetter(info);
    }

    static void ontouchmoveAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOntouchmove(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchmoveAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ontouchmoveAttributeSetter(v8Value, info);
    }

    static void ontouchstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        EventListener* cppValue(GlobalEventHandlers::ontouchstart(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void ontouchstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::ontouchstartAttributeGetter(info);
    }

    static void ontouchstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        HTMLElement* impl = V8HTMLElement::toImpl(holder);

        // Prepare the value to be set.

        GlobalEventHandlers::setOntouchstart(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void ontouchstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        HTMLElementV8Internal::ontouchstartAttributeSetter(v8Value, info);
    }

    static void clickMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElement* impl = V8HTMLElement::toImpl(info.Holder());

        impl->click();
    }

    CORE_EXPORT void clickMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::clickMethod(info);
    }

    static void focusMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElement* impl = V8HTMLElement::toImpl(info.Holder());

        impl->focus();
    }

    CORE_EXPORT void focusMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::focusMethod(info);
    }

    static void blurMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElement* impl = V8HTMLElement::toImpl(info.Holder());

        impl->blur();
    }

    CORE_EXPORT void blurMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLElementV8Internal::blurMethod(info);
    }

} // namespace HTMLElementV8Internal

const V8DOMConfiguration::AccessorConfiguration V8HTMLElementAccessors[] = {
    { "title", HTMLElementV8Internal::titleAttributeGetterCallback, HTMLElementV8Internal::titleAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "lang", HTMLElementV8Internal::langAttributeGetterCallback, HTMLElementV8Internal::langAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "translate", HTMLElementV8Internal::translateAttributeGetterCallback, HTMLElementV8Internal::translateAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "dir", HTMLElementV8Internal::dirAttributeGetterCallback, HTMLElementV8Internal::dirAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "dataset", HTMLElementV8Internal::datasetAttributeGetterCallback, 0, HTMLElementV8Internal::datasetAttributeGetterCallbackForMainWorld, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "hidden", HTMLElementV8Internal::hiddenAttributeGetterCallback, HTMLElementV8Internal::hiddenAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "tabIndex", HTMLElementV8Internal::tabIndexAttributeGetterCallback, HTMLElementV8Internal::tabIndexAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "accessKey", HTMLElementV8Internal::accessKeyAttributeGetterCallback, HTMLElementV8Internal::accessKeyAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "draggable", HTMLElementV8Internal::draggableAttributeGetterCallback, HTMLElementV8Internal::draggableAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "spellcheck", HTMLElementV8Internal::spellcheckAttributeGetterCallback, HTMLElementV8Internal::spellcheckAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "contentEditable", HTMLElementV8Internal::contentEditableAttributeGetterCallback, HTMLElementV8Internal::contentEditableAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "isContentEditable", HTMLElementV8Internal::isContentEditableAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "offsetParent", HTMLElementV8Internal::offsetParentAttributeGetterCallback, 0, HTMLElementV8Internal::offsetParentAttributeGetterCallbackForMainWorld, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "offsetTop", HTMLElementV8Internal::offsetTopAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "offsetLeft", HTMLElementV8Internal::offsetLeftAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "offsetWidth", HTMLElementV8Internal::offsetWidthAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "offsetHeight", HTMLElementV8Internal::offsetHeightAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "style", HTMLElementV8Internal::styleAttributeGetterCallback, HTMLElementV8Internal::styleAttributeSetterCallback, HTMLElementV8Internal::styleAttributeGetterCallbackForMainWorld, HTMLElementV8Internal::styleAttributeSetterCallbackForMainWorld, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "innerText", HTMLElementV8Internal::innerTextAttributeGetterCallback, HTMLElementV8Internal::innerTextAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "outerText", HTMLElementV8Internal::outerTextAttributeGetterCallback, HTMLElementV8Internal::outerTextAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "webkitdropzone", HTMLElementV8Internal::webkitdropzoneAttributeGetterCallback, HTMLElementV8Internal::webkitdropzoneAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onabort", HTMLElementV8Internal::onabortAttributeGetterCallback, HTMLElementV8Internal::onabortAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onblur", HTMLElementV8Internal::onblurAttributeGetterCallback, HTMLElementV8Internal::onblurAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oncancel", HTMLElementV8Internal::oncancelAttributeGetterCallback, HTMLElementV8Internal::oncancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oncanplay", HTMLElementV8Internal::oncanplayAttributeGetterCallback, HTMLElementV8Internal::oncanplayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oncanplaythrough", HTMLElementV8Internal::oncanplaythroughAttributeGetterCallback, HTMLElementV8Internal::oncanplaythroughAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onchange", HTMLElementV8Internal::onchangeAttributeGetterCallback, HTMLElementV8Internal::onchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onclick", HTMLElementV8Internal::onclickAttributeGetterCallback, HTMLElementV8Internal::onclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onclose", HTMLElementV8Internal::oncloseAttributeGetterCallback, HTMLElementV8Internal::oncloseAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oncontextmenu", HTMLElementV8Internal::oncontextmenuAttributeGetterCallback, HTMLElementV8Internal::oncontextmenuAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oncuechange", HTMLElementV8Internal::oncuechangeAttributeGetterCallback, HTMLElementV8Internal::oncuechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondblclick", HTMLElementV8Internal::ondblclickAttributeGetterCallback, HTMLElementV8Internal::ondblclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondrag", HTMLElementV8Internal::ondragAttributeGetterCallback, HTMLElementV8Internal::ondragAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondragend", HTMLElementV8Internal::ondragendAttributeGetterCallback, HTMLElementV8Internal::ondragendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondragenter", HTMLElementV8Internal::ondragenterAttributeGetterCallback, HTMLElementV8Internal::ondragenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondragleave", HTMLElementV8Internal::ondragleaveAttributeGetterCallback, HTMLElementV8Internal::ondragleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondragover", HTMLElementV8Internal::ondragoverAttributeGetterCallback, HTMLElementV8Internal::ondragoverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondragstart", HTMLElementV8Internal::ondragstartAttributeGetterCallback, HTMLElementV8Internal::ondragstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondrop", HTMLElementV8Internal::ondropAttributeGetterCallback, HTMLElementV8Internal::ondropAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ondurationchange", HTMLElementV8Internal::ondurationchangeAttributeGetterCallback, HTMLElementV8Internal::ondurationchangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onemptied", HTMLElementV8Internal::onemptiedAttributeGetterCallback, HTMLElementV8Internal::onemptiedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onended", HTMLElementV8Internal::onendedAttributeGetterCallback, HTMLElementV8Internal::onendedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onerror", HTMLElementV8Internal::onerrorAttributeGetterCallback, HTMLElementV8Internal::onerrorAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onfocus", HTMLElementV8Internal::onfocusAttributeGetterCallback, HTMLElementV8Internal::onfocusAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oninput", HTMLElementV8Internal::oninputAttributeGetterCallback, HTMLElementV8Internal::oninputAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "oninvalid", HTMLElementV8Internal::oninvalidAttributeGetterCallback, HTMLElementV8Internal::oninvalidAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onkeydown", HTMLElementV8Internal::onkeydownAttributeGetterCallback, HTMLElementV8Internal::onkeydownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onkeypress", HTMLElementV8Internal::onkeypressAttributeGetterCallback, HTMLElementV8Internal::onkeypressAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onkeyup", HTMLElementV8Internal::onkeyupAttributeGetterCallback, HTMLElementV8Internal::onkeyupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onload", HTMLElementV8Internal::onloadAttributeGetterCallback, HTMLElementV8Internal::onloadAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onloadeddata", HTMLElementV8Internal::onloadeddataAttributeGetterCallback, HTMLElementV8Internal::onloadeddataAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onloadedmetadata", HTMLElementV8Internal::onloadedmetadataAttributeGetterCallback, HTMLElementV8Internal::onloadedmetadataAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onloadstart", HTMLElementV8Internal::onloadstartAttributeGetterCallback, HTMLElementV8Internal::onloadstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onmousedown", HTMLElementV8Internal::onmousedownAttributeGetterCallback, HTMLElementV8Internal::onmousedownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onmouseenter", HTMLElementV8Internal::onmouseenterAttributeGetterCallback, HTMLElementV8Internal::onmouseenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "onmouseleave", HTMLElementV8Internal::onmouseleaveAttributeGetterCallback, HTMLElementV8Internal::onmouseleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "onmousemove", HTMLElementV8Internal::onmousemoveAttributeGetterCallback, HTMLElementV8Internal::onmousemoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onmouseout", HTMLElementV8Internal::onmouseoutAttributeGetterCallback, HTMLElementV8Internal::onmouseoutAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onmouseover", HTMLElementV8Internal::onmouseoverAttributeGetterCallback, HTMLElementV8Internal::onmouseoverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onmouseup", HTMLElementV8Internal::onmouseupAttributeGetterCallback, HTMLElementV8Internal::onmouseupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onmousewheel", HTMLElementV8Internal::onmousewheelAttributeGetterCallback, HTMLElementV8Internal::onmousewheelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onpause", HTMLElementV8Internal::onpauseAttributeGetterCallback, HTMLElementV8Internal::onpauseAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onplay", HTMLElementV8Internal::onplayAttributeGetterCallback, HTMLElementV8Internal::onplayAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onplaying", HTMLElementV8Internal::onplayingAttributeGetterCallback, HTMLElementV8Internal::onplayingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onprogress", HTMLElementV8Internal::onprogressAttributeGetterCallback, HTMLElementV8Internal::onprogressAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onratechange", HTMLElementV8Internal::onratechangeAttributeGetterCallback, HTMLElementV8Internal::onratechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onreset", HTMLElementV8Internal::onresetAttributeGetterCallback, HTMLElementV8Internal::onresetAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onresize", HTMLElementV8Internal::onresizeAttributeGetterCallback, HTMLElementV8Internal::onresizeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onscroll", HTMLElementV8Internal::onscrollAttributeGetterCallback, HTMLElementV8Internal::onscrollAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onseeked", HTMLElementV8Internal::onseekedAttributeGetterCallback, HTMLElementV8Internal::onseekedAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onseeking", HTMLElementV8Internal::onseekingAttributeGetterCallback, HTMLElementV8Internal::onseekingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onselect", HTMLElementV8Internal::onselectAttributeGetterCallback, HTMLElementV8Internal::onselectAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onshow", HTMLElementV8Internal::onshowAttributeGetterCallback, HTMLElementV8Internal::onshowAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onstalled", HTMLElementV8Internal::onstalledAttributeGetterCallback, HTMLElementV8Internal::onstalledAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onsubmit", HTMLElementV8Internal::onsubmitAttributeGetterCallback, HTMLElementV8Internal::onsubmitAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onsuspend", HTMLElementV8Internal::onsuspendAttributeGetterCallback, HTMLElementV8Internal::onsuspendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ontimeupdate", HTMLElementV8Internal::ontimeupdateAttributeGetterCallback, HTMLElementV8Internal::ontimeupdateAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ontoggle", HTMLElementV8Internal::ontoggleAttributeGetterCallback, HTMLElementV8Internal::ontoggleAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onvolumechange", HTMLElementV8Internal::onvolumechangeAttributeGetterCallback, HTMLElementV8Internal::onvolumechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onwaiting", HTMLElementV8Internal::onwaitingAttributeGetterCallback, HTMLElementV8Internal::onwaitingAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8HTMLElementMethods[] = {
    { "click", HTMLElementV8Internal::clickMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "focus", HTMLElementV8Internal::focusMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "blur", HTMLElementV8Internal::blurMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8HTMLElement::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("HTMLElement"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    V8HTMLConstructor::htmlConstructor(info, V8HTMLElement::wrapperTypeInfo, HTMLElementType::kHTMLElement);
}

static void installV8HTMLElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8HTMLElement::wrapperTypeInfo.interfaceName, V8Element::domTemplate(isolate, world), V8HTMLElement::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8HTMLElement::constructorCallback);
    interfaceTemplate->SetLength(0);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLElementAccessors, WTF_ARRAY_LENGTH(V8HTMLElementAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLElementMethods, WTF_ARRAY_LENGTH(V8HTMLElementMethods));

    if (RuntimeEnabledFeatures::auxclickEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessoronauxclickConfiguration = { "onauxclick", HTMLElementV8Internal::onauxclickAttributeGetterCallback, HTMLElementV8Internal::onauxclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronauxclickConfiguration);
    }
    if (RuntimeEnabledFeatures::cssTypedOMEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorstyleMapConfiguration = { "styleMap", HTMLElementV8Internal::styleMapAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorstyleMapConfiguration);
    }
    if (RuntimeEnabledFeatures::contextMenuEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorcontextMenuConfiguration = { "contextMenu", HTMLElementV8Internal::contextMenuAttributeGetterCallback, HTMLElementV8Internal::contextMenuAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorcontextMenuConfiguration);
    }
    if (RuntimeEnabledFeatures::inputModeAttributeEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorinputModeConfiguration = { "inputMode", HTMLElementV8Internal::inputModeAttributeGetterCallback, HTMLElementV8Internal::inputModeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorinputModeConfiguration);
    }
    if (RuntimeEnabledFeatures::pointerEventEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorongotpointercaptureConfiguration = { "ongotpointercapture", HTMLElementV8Internal::ongotpointercaptureAttributeGetterCallback, HTMLElementV8Internal::ongotpointercaptureAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorongotpointercaptureConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronlostpointercaptureConfiguration = { "onlostpointercapture", HTMLElementV8Internal::onlostpointercaptureAttributeGetterCallback, HTMLElementV8Internal::onlostpointercaptureAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronlostpointercaptureConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointercancelConfiguration = { "onpointercancel", HTMLElementV8Internal::onpointercancelAttributeGetterCallback, HTMLElementV8Internal::onpointercancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointercancelConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerdownConfiguration = { "onpointerdown", HTMLElementV8Internal::onpointerdownAttributeGetterCallback, HTMLElementV8Internal::onpointerdownAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerdownConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerenterConfiguration = { "onpointerenter", HTMLElementV8Internal::onpointerenterAttributeGetterCallback, HTMLElementV8Internal::onpointerenterAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerenterConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerleaveConfiguration = { "onpointerleave", HTMLElementV8Internal::onpointerleaveAttributeGetterCallback, HTMLElementV8Internal::onpointerleaveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerleaveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointermoveConfiguration = { "onpointermove", HTMLElementV8Internal::onpointermoveAttributeGetterCallback, HTMLElementV8Internal::onpointermoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointermoveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointeroutConfiguration = { "onpointerout", HTMLElementV8Internal::onpointeroutAttributeGetterCallback, HTMLElementV8Internal::onpointeroutAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointeroutConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointeroverConfiguration = { "onpointerover", HTMLElementV8Internal::onpointeroverAttributeGetterCallback, HTMLElementV8Internal::onpointeroverAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointeroverConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpointerupConfiguration = { "onpointerup", HTMLElementV8Internal::onpointerupAttributeGetterCallback, HTMLElementV8Internal::onpointerupAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpointerupConfiguration);
    }
    if (RuntimeEnabledFeatures::touchEventFeatureDetectionEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorontouchcancelConfiguration = { "ontouchcancel", HTMLElementV8Internal::ontouchcancelAttributeGetterCallback, HTMLElementV8Internal::ontouchcancelAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchcancelConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchendConfiguration = { "ontouchend", HTMLElementV8Internal::ontouchendAttributeGetterCallback, HTMLElementV8Internal::ontouchendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchendConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchmoveConfiguration = { "ontouchmove", HTMLElementV8Internal::ontouchmoveAttributeGetterCallback, HTMLElementV8Internal::ontouchmoveAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchmoveConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessorontouchstartConfiguration = { "ontouchstart", HTMLElementV8Internal::ontouchstartAttributeGetterCallback, HTMLElementV8Internal::ontouchstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorontouchstartConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8HTMLElement::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8HTMLElementTemplate);
}

bool V8HTMLElement::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8HTMLElement::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

HTMLElement* V8HTMLElement::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
