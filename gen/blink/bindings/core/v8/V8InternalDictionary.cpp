// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8InternalDictionary.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/DoubleOrString.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "core/frame/Deprecation.h"

namespace blink {

void V8InternalDictionary::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, InternalDictionary& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> booleanMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "booleanMember")).ToLocal(&booleanMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (booleanMemberValue.IsEmpty() || booleanMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool booleanMember = toBoolean(isolate, booleanMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setBooleanMember(booleanMember);
    }

    v8::Local<v8::Value> byteStringMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "byteStringMember")).ToLocal(&byteStringMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (byteStringMemberValue.IsEmpty() || byteStringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> byteStringMember = toByteString(isolate, byteStringMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setByteStringMember(byteStringMember);
    }

    v8::Local<v8::Value> deprecateLongMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "deprecateLongMember")).ToLocal(&deprecateLongMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (deprecateLongMemberValue.IsEmpty() || deprecateLongMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Deprecation::countDeprecation(currentExecutionContext(isolate), UseCounter::PrefixedStorageInfo);
        int deprecateLongMember = toInt32(isolate, deprecateLongMemberValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongMember(deprecateLongMember);
    }

    v8::Local<v8::Value> dictionaryMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "dictionaryMember")).ToLocal(&dictionaryMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (dictionaryMemberValue.IsEmpty() || dictionaryMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Dictionary dictionaryMember = Dictionary(isolate, dictionaryMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        if (!dictionaryMember.isObject()) {
            exceptionState.throwTypeError("member dictionaryMember is not an object.");
            return;
        }
        impl.setDictionaryMember(dictionaryMember);
    }

    v8::Local<v8::Value> doubleMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "doubleMember")).ToLocal(&doubleMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (doubleMemberValue.IsEmpty() || doubleMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        double doubleMember = toRestrictedDouble(isolate, doubleMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleMember(doubleMember);
    }

    v8::Local<v8::Value> doubleOrStringMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "doubleOrStringMember")).ToLocal(&doubleOrStringMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (doubleOrStringMemberValue.IsEmpty() || doubleOrStringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        DoubleOrString doubleOrStringMember;
        V8DoubleOrString::toImpl(isolate, doubleOrStringMemberValue, doubleOrStringMember, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleOrStringMember(doubleOrStringMember);
    }

    v8::Local<v8::Value> doubleOrStringSequenceMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "doubleOrStringSequenceMember")).ToLocal(&doubleOrStringSequenceMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (doubleOrStringSequenceMemberValue.IsEmpty() || doubleOrStringSequenceMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<DoubleOrString> doubleOrStringSequenceMember = toImplArray<HeapVector<DoubleOrString>>(doubleOrStringSequenceMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleOrStringSequenceMember(doubleOrStringSequenceMember);
    }

    v8::Local<v8::Value> elementMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "elementMember")).ToLocal(&elementMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (elementMemberValue.IsEmpty() || elementMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Element* elementMember = V8Element::toImplWithTypeCheck(isolate, elementMemberValue);
        if (!elementMember) {
            exceptionState.throwTypeError("member elementMember is not of type Element.");
            return;
        }
        impl.setElementMember(elementMember);
    }

    v8::Local<v8::Value> elementOrNullMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "elementOrNullMember")).ToLocal(&elementOrNullMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (elementOrNullMemberValue.IsEmpty() || elementOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (elementOrNullMemberValue->IsNull()) {
        impl.setElementOrNullMemberToNull();
    } else {
        Element* elementOrNullMember = V8Element::toImplWithTypeCheck(isolate, elementOrNullMemberValue);
        if (!elementOrNullMember) {
            exceptionState.throwTypeError("member elementOrNullMember is not of type Element.");
            return;
        }
        impl.setElementOrNullMember(elementOrNullMember);
    }

    v8::Local<v8::Value> enumArrayMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "enumArrayMember")).ToLocal(&enumArrayMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (enumArrayMemberValue.IsEmpty() || enumArrayMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> enumArrayMember = toImplArray<Vector<String>>(enumArrayMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        const char* validValues[] = {
            "foo",
            "bar",
            "baz",
        };
        if (!isValidEnum(enumArrayMember, validValues, WTF_ARRAY_LENGTH(validValues), "InternalEnum", exceptionState))
            return;
        impl.setEnumArrayMember(enumArrayMember);
    }

    v8::Local<v8::Value> enumMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "enumMember")).ToLocal(&enumMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (enumMemberValue.IsEmpty() || enumMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> enumMember = enumMemberValue;
        if (!enumMember.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "foo",
            "bar",
            "baz",
        };
        if (!isValidEnum(enumMember, validValues, WTF_ARRAY_LENGTH(validValues), "InternalEnum", exceptionState))
            return;
        impl.setEnumMember(enumMember);
    }

    v8::Local<v8::Value> enumMemberWithDefaultValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "enumMemberWithDefault")).ToLocal(&enumMemberWithDefaultValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (enumMemberWithDefaultValue.IsEmpty() || enumMemberWithDefaultValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> enumMemberWithDefault = enumMemberWithDefaultValue;
        if (!enumMemberWithDefault.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "foo",
            "bar",
            "baz",
        };
        if (!isValidEnum(enumMemberWithDefault, validValues, WTF_ARRAY_LENGTH(validValues), "InternalEnum", exceptionState))
            return;
        impl.setEnumMemberWithDefault(enumMemberWithDefault);
    }

    v8::Local<v8::Value> enumOrNullMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "enumOrNullMember")).ToLocal(&enumOrNullMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (enumOrNullMemberValue.IsEmpty() || enumOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (enumOrNullMemberValue->IsNull()) {
        impl.setEnumOrNullMemberToNull();
    } else {
        V8StringResource<> enumOrNullMember = enumOrNullMemberValue;
        if (!enumOrNullMember.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "foo",
            "bar",
            "baz",
        };
        if (!isValidEnum(enumOrNullMember, validValues, WTF_ARRAY_LENGTH(validValues), "InternalEnum", exceptionState))
            return;
        impl.setEnumOrNullMember(enumOrNullMember);
    }

    v8::Local<v8::Value> eventTargetOrNullMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "eventTargetOrNullMember")).ToLocal(&eventTargetOrNullMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (eventTargetOrNullMemberValue.IsEmpty() || eventTargetOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (eventTargetOrNullMemberValue->IsNull()) {
        impl.setEventTargetOrNullMemberToNull();
    } else {
        EventTarget* eventTargetOrNullMember = toEventTarget(isolate, eventTargetOrNullMemberValue);
        if (!eventTargetOrNullMember) {
            exceptionState.throwTypeError("member eventTargetOrNullMember is not of type EventTarget.");
            return;
        }
        impl.setEventTargetOrNullMember(eventTargetOrNullMember);
    }

    v8::Local<v8::Value> longMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longMember")).ToLocal(&longMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longMemberValue.IsEmpty() || longMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        int longMember = toInt32(isolate, longMemberValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongMember(longMember);
    }

    v8::Local<v8::Value> longMemberWithClampValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithClamp")).ToLocal(&longMemberWithClampValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longMemberWithClampValue.IsEmpty() || longMemberWithClampValue->IsUndefined()) {
        // Do nothing.
    } else {
        int longMemberWithClamp = toInt32(isolate, longMemberWithClampValue, Clamp, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongMemberWithClamp(longMemberWithClamp);
    }

    v8::Local<v8::Value> longMemberWithDefaultValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithDefault")).ToLocal(&longMemberWithDefaultValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longMemberWithDefaultValue.IsEmpty() || longMemberWithDefaultValue->IsUndefined()) {
        // Do nothing.
    } else {
        int longMemberWithDefault = toInt32(isolate, longMemberWithDefaultValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongMemberWithDefault(longMemberWithDefault);
    }

    v8::Local<v8::Value> longMemberWithEnforceRangeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithEnforceRange")).ToLocal(&longMemberWithEnforceRangeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longMemberWithEnforceRangeValue.IsEmpty() || longMemberWithEnforceRangeValue->IsUndefined()) {
        // Do nothing.
    } else {
        int longMemberWithEnforceRange = toInt32(isolate, longMemberWithEnforceRangeValue, EnforceRange, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongMemberWithEnforceRange(longMemberWithEnforceRange);
    }

    v8::Local<v8::Value> longOrNullMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longOrNullMember")).ToLocal(&longOrNullMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longOrNullMemberValue.IsEmpty() || longOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (longOrNullMemberValue->IsNull()) {
        impl.setLongOrNullMemberToNull();
    } else {
        int longOrNullMember = toInt32(isolate, longOrNullMemberValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongOrNullMember(longOrNullMember);
    }

    v8::Local<v8::Value> longOrNullMemberWithDefaultValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "longOrNullMemberWithDefault")).ToLocal(&longOrNullMemberWithDefaultValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longOrNullMemberWithDefaultValue.IsEmpty() || longOrNullMemberWithDefaultValue->IsUndefined()) {
        // Do nothing.
    } else if (longOrNullMemberWithDefaultValue->IsNull()) {
        impl.setLongOrNullMemberWithDefaultToNull();
    } else {
        int longOrNullMemberWithDefault = toInt32(isolate, longOrNullMemberWithDefaultValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongOrNullMemberWithDefault(longOrNullMemberWithDefault);
    }

    v8::Local<v8::Value> objectMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "objectMember")).ToLocal(&objectMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (objectMemberValue.IsEmpty() || objectMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        ScriptValue objectMember = ScriptValue(ScriptState::current(isolate), objectMemberValue);
        if (!objectMember.isObject()) {
            exceptionState.throwTypeError("member objectMember is not an object.");
            return;
        }
        impl.setObjectMember(objectMember);
    }

    v8::Local<v8::Value> objectOrNullMemberWithDefaultValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "objectOrNullMemberWithDefault")).ToLocal(&objectOrNullMemberWithDefaultValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (objectOrNullMemberWithDefaultValue.IsEmpty() || objectOrNullMemberWithDefaultValue->IsUndefined()) {
        // Do nothing.
    } else if (objectOrNullMemberWithDefaultValue->IsNull()) {
        impl.setObjectOrNullMemberWithDefaultToNull();
    } else {
        ScriptValue objectOrNullMemberWithDefault = ScriptValue(ScriptState::current(isolate), objectOrNullMemberWithDefaultValue);
        if (!objectOrNullMemberWithDefault.isObject()) {
            exceptionState.throwTypeError("member objectOrNullMemberWithDefault is not an object.");
            return;
        }
        impl.setObjectOrNullMemberWithDefault(objectOrNullMemberWithDefault);
    }

    v8::Local<v8::Value> prefixGetMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "prefixGetMember")).ToLocal(&prefixGetMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (prefixGetMemberValue.IsEmpty() || prefixGetMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        ScriptValue prefixGetMember = ScriptValue(ScriptState::current(isolate), prefixGetMemberValue);
        if (!prefixGetMember.isObject()) {
            exceptionState.throwTypeError("member prefixGetMember is not an object.");
            return;
        }
        impl.setPrefixGetMember(prefixGetMember);
    }

    v8::Local<v8::Value> stringMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "stringMember")).ToLocal(&stringMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringMemberValue.IsEmpty() || stringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> stringMember = stringMemberValue;
        if (!stringMember.prepare(exceptionState))
            return;
        impl.setStringMember(stringMember);
    }

    v8::Local<v8::Value> stringMemberWithDefaultValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "stringMemberWithDefault")).ToLocal(&stringMemberWithDefaultValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringMemberWithDefaultValue.IsEmpty() || stringMemberWithDefaultValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> stringMemberWithDefault = stringMemberWithDefaultValue;
        if (!stringMemberWithDefault.prepare(exceptionState))
            return;
        impl.setStringMemberWithDefault(stringMemberWithDefault);
    }

    v8::Local<v8::Value> stringSequenceMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceMember")).ToLocal(&stringSequenceMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringSequenceMemberValue.IsEmpty() || stringSequenceMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> stringSequenceMember = toImplArray<Vector<String>>(stringSequenceMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringSequenceMember(stringSequenceMember);
    }

    v8::Local<v8::Value> stringSequenceMemberWithDefaultValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceMemberWithDefault")).ToLocal(&stringSequenceMemberWithDefaultValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringSequenceMemberWithDefaultValue.IsEmpty() || stringSequenceMemberWithDefaultValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> stringSequenceMemberWithDefault = toImplArray<Vector<String>>(stringSequenceMemberWithDefaultValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringSequenceMemberWithDefault(stringSequenceMemberWithDefault);
    }

    v8::Local<v8::Value> stringSequenceOrNullMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceOrNullMember")).ToLocal(&stringSequenceOrNullMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringSequenceOrNullMemberValue.IsEmpty() || stringSequenceOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (stringSequenceOrNullMemberValue->IsNull()) {
        impl.setStringSequenceOrNullMemberToNull();
    } else {
        Vector<String> stringSequenceOrNullMember = toImplArray<Vector<String>>(stringSequenceOrNullMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringSequenceOrNullMember(stringSequenceOrNullMember);
    }

    v8::Local<v8::Value> unrestrictedDoubleMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "unrestrictedDoubleMember")).ToLocal(&unrestrictedDoubleMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (unrestrictedDoubleMemberValue.IsEmpty() || unrestrictedDoubleMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        double unrestrictedDoubleMember = toDouble(isolate, unrestrictedDoubleMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnrestrictedDoubleMember(unrestrictedDoubleMember);
    }

    v8::Local<v8::Value> usvStringMemberValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "usvStringMember")).ToLocal(&usvStringMemberValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (usvStringMemberValue.IsEmpty() || usvStringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> usvStringMember = toUSVString(isolate, usvStringMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUsvStringMember(usvStringMember);
    }
}

v8::Local<v8::Value> InternalDictionary::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8InternalDictionary(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8InternalDictionary(const InternalDictionary& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasBooleanMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "booleanMember"), v8Boolean(impl.booleanMember(), isolate))))
            return false;
    }

    if (impl.hasByteStringMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "byteStringMember"), v8String(isolate, impl.byteStringMember()))))
            return false;
    }

    if (impl.hasLongMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "deprecateLongMember"), v8::Integer::New(isolate, impl.longMember()))))
            return false;
    }

    if (impl.hasDictionaryMember()) {
        DCHECK(impl.dictionaryMember().isObject());
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "dictionaryMember"), impl.dictionaryMember().v8Value())))
            return false;
    }

    if (impl.hasDoubleMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "doubleMember"), v8::Number::New(isolate, impl.doubleMember()))))
            return false;
    }

    if (impl.hasDoubleOrStringMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "doubleOrStringMember"), ToV8(impl.doubleOrStringMember(), creationContext, isolate))))
            return false;
    }

    if (impl.hasDoubleOrStringSequenceMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "doubleOrStringSequenceMember"), ToV8(impl.doubleOrStringSequenceMember(), creationContext, isolate))))
            return false;
    }

    if (impl.hasElementMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "elementMember"), ToV8(impl.elementMember(), creationContext, isolate))))
            return false;
    }

    if (impl.hasElementOrNullMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "elementOrNullMember"), ToV8(impl.elementOrNullMember(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "elementOrNullMember"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasEnumArrayMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "enumArrayMember"), ToV8(impl.enumArrayMember(), creationContext, isolate))))
            return false;
    }

    if (impl.hasEnumMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "enumMember"), v8String(isolate, impl.enumMember()))))
            return false;
    }

    if (impl.hasEnumMemberWithDefault()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "enumMemberWithDefault"), v8String(isolate, impl.enumMemberWithDefault()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "enumMemberWithDefault"), v8String(isolate, String("foo")))))
            return false;
    }

    if (impl.hasEnumOrNullMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "enumOrNullMember"), v8String(isolate, impl.enumOrNullMember()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "enumOrNullMember"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasEventTargetOrNullMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "eventTargetOrNullMember"), ToV8(impl.eventTargetOrNullMember(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "eventTargetOrNullMember"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasLongMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longMember"), v8::Integer::New(isolate, impl.longMember()))))
            return false;
    }

    if (impl.hasLongMemberWithClamp()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithClamp"), v8::Integer::New(isolate, impl.longMemberWithClamp()))))
            return false;
    }

    if (impl.hasLongMemberWithDefault()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithDefault"), v8::Integer::New(isolate, impl.longMemberWithDefault()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithDefault"), v8::Integer::New(isolate, 42))))
            return false;
    }

    if (impl.hasLongMemberWithEnforceRange()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longMemberWithEnforceRange"), v8::Integer::New(isolate, impl.longMemberWithEnforceRange()))))
            return false;
    }

    if (impl.hasLongOrNullMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longOrNullMember"), v8::Integer::New(isolate, impl.longOrNullMember()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longOrNullMember"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasLongOrNullMemberWithDefault()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longOrNullMemberWithDefault"), v8::Integer::New(isolate, impl.longOrNullMemberWithDefault()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "longOrNullMemberWithDefault"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasObjectMember()) {
        DCHECK(impl.objectMember().isObject());
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "objectMember"), impl.objectMember().v8Value())))
            return false;
    }

    if (impl.hasObjectOrNullMemberWithDefault()) {
        DCHECK(impl.objectOrNullMemberWithDefault().isObject());
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "objectOrNullMemberWithDefault"), impl.objectOrNullMemberWithDefault().v8Value())))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "objectOrNullMemberWithDefault"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasPrefixGetMember()) {
        DCHECK(impl.getPrefixGetMember().isObject());
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "prefixGetMember"), impl.getPrefixGetMember().v8Value())))
            return false;
    }

    if (impl.hasStringMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringMember"), v8String(isolate, impl.stringMember()))))
            return false;
    }

    if (impl.hasStringMemberWithDefault()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringMemberWithDefault"), v8String(isolate, impl.stringMemberWithDefault()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringMemberWithDefault"), v8String(isolate, String("defaultStringValue")))))
            return false;
    }

    if (impl.hasStringSequenceMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceMember"), ToV8(impl.stringSequenceMember(), creationContext, isolate))))
            return false;
    }

    if (impl.hasStringSequenceMemberWithDefault()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceMemberWithDefault"), ToV8(impl.stringSequenceMemberWithDefault(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceMemberWithDefault"), ToV8(Vector<String>(), creationContext, isolate))))
            return false;
    }

    if (impl.hasStringSequenceOrNullMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceOrNullMember"), ToV8(impl.stringSequenceOrNullMember(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "stringSequenceOrNullMember"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasUnrestrictedDoubleMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "unrestrictedDoubleMember"), v8::Number::New(isolate, impl.unrestrictedDoubleMember()))))
            return false;
    }

    if (impl.hasUsvStringMember()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "usvStringMember"), v8String(isolate, impl.usvStringMember()))))
            return false;
    }

    return true;
}

InternalDictionary NativeValueTraits<InternalDictionary>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    InternalDictionary impl;
    V8InternalDictionary::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
