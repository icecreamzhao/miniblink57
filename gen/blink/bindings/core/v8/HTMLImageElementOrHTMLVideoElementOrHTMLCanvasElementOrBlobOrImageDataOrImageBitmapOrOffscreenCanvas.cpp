// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas.h"

#include "bindings/core/v8/ArrayBufferOrArrayBufferViewOrBlobOrUSVString.h"
#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8HTMLImageElement.h"
#include "bindings/core/v8/V8HTMLVideoElement.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8OffscreenCanvas.h"

namespace blink {

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas()
    : m_type(SpecificTypeNone)
{
}

HTMLImageElement* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsHTMLImageElement() const
{
    DCHECK(isHTMLImageElement());
    return m_htmlImageElement;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setHTMLImageElement(HTMLImageElement* value)
{
    DCHECK(isNull());
    m_htmlImageElement = value;
    m_type = SpecificTypeHTMLImageElement;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromHTMLImageElement(HTMLImageElement* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setHTMLImageElement(value);
    return container;
}

HTMLVideoElement* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsHTMLVideoElement() const
{
    DCHECK(isHTMLVideoElement());
    return m_htmlVideoElement;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setHTMLVideoElement(HTMLVideoElement* value)
{
    DCHECK(isNull());
    m_htmlVideoElement = value;
    m_type = SpecificTypeHTMLVideoElement;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromHTMLVideoElement(HTMLVideoElement* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setHTMLVideoElement(value);
    return container;
}

HTMLCanvasElement* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsHTMLCanvasElement() const
{
    DCHECK(isHTMLCanvasElement());
    return m_htmlCanvasElement;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setHTMLCanvasElement(HTMLCanvasElement* value)
{
    DCHECK(isNull());
    m_htmlCanvasElement = value;
    m_type = SpecificTypeHTMLCanvasElement;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromHTMLCanvasElement(HTMLCanvasElement* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setHTMLCanvasElement(value);
    return container;
}

Blob* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsBlob() const
{
    DCHECK(isBlob());
    return m_blob;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setBlob(Blob* value)
{
    DCHECK(isNull());
    m_blob = value;
    m_type = SpecificTypeBlob;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromBlob(Blob* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setBlob(value);
    return container;
}

ImageData* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsImageData() const
{
    DCHECK(isImageData());
    return m_imageData;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setImageData(ImageData* value)
{
    DCHECK(isNull());
    m_imageData = value;
    m_type = SpecificTypeImageData;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromImageData(ImageData* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setImageData(value);
    return container;
}

ImageBitmap* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsImageBitmap() const
{
    DCHECK(isImageBitmap());
    return m_imageBitmap;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setImageBitmap(ImageBitmap* value)
{
    DCHECK(isNull());
    m_imageBitmap = value;
    m_type = SpecificTypeImageBitmap;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromImageBitmap(ImageBitmap* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setImageBitmap(value);
    return container;
}

OffscreenCanvas* HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::getAsOffscreenCanvas() const
{
    DCHECK(isOffscreenCanvas());
    return m_offscreenCanvas;
}

void HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::setOffscreenCanvas(OffscreenCanvas* value)
{
    DCHECK(isNull());
    m_offscreenCanvas = value;
    m_type = SpecificTypeOffscreenCanvas;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::fromOffscreenCanvas(OffscreenCanvas* value)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas container;
    container.setOffscreenCanvas(value);
    return container;
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas(const HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas&) = default;
HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::~HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas() = default;
HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas& HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::operator=(const HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas&) = default;

DEFINE_TRACE(HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas)
{
    visitor->trace(m_htmlImageElement);
    visitor->trace(m_htmlVideoElement);
    visitor->trace(m_htmlCanvasElement);
    visitor->trace(m_blob);
    visitor->trace(m_imageData);
    visitor->trace(m_imageBitmap);
    //visitor->trace(m_offscreenCanvas);
}

void V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8HTMLImageElement::hasInstance(v8Value, isolate)) {
        HTMLImageElement* cppValue = V8HTMLImageElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLImageElement(cppValue);
        return;
    }

    if (V8HTMLVideoElement::hasInstance(v8Value, isolate)) {
        HTMLVideoElement* cppValue = V8HTMLVideoElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLVideoElement(cppValue);
        return;
    }

    if (V8HTMLCanvasElement::hasInstance(v8Value, isolate)) {
        HTMLCanvasElement* cppValue = V8HTMLCanvasElement::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setHTMLCanvasElement(cppValue);
        return;
    }

    if (V8Blob::hasInstance(v8Value, isolate)) {
        Blob* cppValue = V8Blob::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setBlob(cppValue);
        return;
    }

    if (V8ImageData::hasInstance(v8Value, isolate)) {
        ImageData* cppValue = V8ImageData::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setImageData(cppValue);
        return;
    }

    if (V8ImageBitmap::hasInstance(v8Value, isolate)) {
        ImageBitmap* cppValue = V8ImageBitmap::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setImageBitmap(cppValue);
        return;
    }

    //   if (V8OffscreenCanvas::hasInstance(v8Value, isolate)) {
    //     OffscreenCanvas* cppValue = V8OffscreenCanvas::toImpl(v8::Local<v8::Object>::Cast(v8Value));
    //     impl.setOffscreenCanvas(cppValue);
    //     return;
    //   }

    exceptionState.throwTypeError("The provided value is not of type '(HTMLImageElement or HTMLVideoElement or HTMLCanvasElement or Blob or ImageData or ImageBitmap or OffscreenCanvas)'");
}

v8::Local<v8::Value> ToV8(const HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeNone:
        return v8::Null(isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeHTMLImageElement:
        return ToV8(impl.getAsHTMLImageElement(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeHTMLVideoElement:
        return ToV8(impl.getAsHTMLVideoElement(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeHTMLCanvasElement:
        return ToV8(impl.getAsHTMLCanvasElement(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeBlob:
        return ToV8(impl.getAsBlob(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeImageData:
        return ToV8(impl.getAsImageData(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeImageBitmap:
        return ToV8(impl.getAsImageBitmap(), creationContext, isolate);
    case HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::SpecificTypeOffscreenCanvas:
        return ToV8(impl.getAsOffscreenCanvas(), creationContext, isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas NativeValueTraits<HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas impl;
    V8HTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrBlobOrImageDataOrImageBitmapOrOffscreenCanvas::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
