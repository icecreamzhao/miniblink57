// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8XMLHttpRequest.h"

#include "bindings/core/v8/ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormData.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8Document.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8XMLHttpRequestUpload.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "core/frame/LocalDOMWindow.h"
#include "core/inspector/ConsoleMessage.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8XMLHttpRequest::wrapperTypeInfo = { gin::kEmbedderBlink, V8XMLHttpRequest::domTemplate, V8XMLHttpRequest::trace, V8XMLHttpRequest::traceWrappers, 0, nullptr, "XMLHttpRequest", &V8XMLHttpRequestEventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in XMLHttpRequest.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& XMLHttpRequest::s_wrapperTypeInfo = V8XMLHttpRequest::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, XMLHttpRequest>::value,
    "XMLHttpRequest does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&XMLHttpRequest::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "XMLHttpRequest is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace XMLHttpRequestV8Internal {

    static void onreadystatechangeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onreadystatechange()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    CORE_EXPORT void onreadystatechangeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::onreadystatechangeAttributeGetter(info);
    }

    static void onreadystatechangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onreadystatechange(), v8Value, V8XMLHttpRequest::eventListenerCacheIndex);

        impl->setOnreadystatechange(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    CORE_EXPORT void onreadystatechangeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        XMLHttpRequestV8Internal::onreadystatechangeAttributeSetter(v8Value, info);
    }

    static void readyStateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->readyState());
    }

    CORE_EXPORT void readyStateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::readyStateAttributeGetter(info);
    }

    static void timeoutAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->timeout());
    }

    CORE_EXPORT void timeoutAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::timeoutAttributeGetter(info);
    }

    static void timeoutAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "XMLHttpRequest", "timeout");

        // Prepare the value to be set.
        unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setTimeout(cppValue, exceptionState);
    }

    CORE_EXPORT void timeoutAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        XMLHttpRequestV8Internal::timeoutAttributeSetter(v8Value, info);
    }

    static void withCredentialsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueBool(info, impl->withCredentials());
    }

    CORE_EXPORT void withCredentialsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::withCredentialsAttributeGetter(info);
    }

    static void withCredentialsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "XMLHttpRequest", "withCredentials");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setWithCredentials(cppValue, exceptionState);
    }

    CORE_EXPORT void withCredentialsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        XMLHttpRequestV8Internal::withCredentialsAttributeSetter(v8Value, info);
    }

    static void uploadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        XMLHttpRequestUpload* cppValue(WTF::getPtr(impl->upload()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#XMLHttpRequest#upload";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    CORE_EXPORT void uploadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::uploadAttributeGetter(info);
    }

    static void responseURLAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueString(info, impl->responseURL(), info.GetIsolate());
    }

    CORE_EXPORT void responseURLAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::responseURLAttributeGetter(info);
    }

    static void statusAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->status());
    }

    CORE_EXPORT void statusAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::statusAttributeGetter(info);
    }

    static void statusTextAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueString(info, impl->statusText(), info.GetIsolate());
    }

    CORE_EXPORT void statusTextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::statusTextAttributeGetter(info);
    }

    static void responseTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        v8SetReturnValueString(info, impl->responseType(), info.GetIsolate());
    }

    CORE_EXPORT void responseTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::responseTypeAttributeGetter(info);
    }

    static void responseTypeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "XMLHttpRequest", "responseType");

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        // Type check per: http://heycam.github.io/webidl/#dfn-attribute-setter
        // Returns undefined without setting the value if the value is invalid.
        DummyExceptionStateForTesting dummyExceptionState;
        const char* validValues[] = {
            "",
            "arraybuffer",
            "blob",
            "document",
            "json",
            "text",
        };
        if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "XMLHttpRequestResponseType", dummyExceptionState)) {
            currentExecutionContext(info.GetIsolate())->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, dummyExceptionState.message()));
            return;
        }

        impl->setResponseType(cppValue, exceptionState);
    }

    CORE_EXPORT void responseTypeAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        XMLHttpRequestV8Internal::responseTypeAttributeSetter(v8Value, info);
    }

    CORE_EXPORT void responseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        V8XMLHttpRequest::responseAttributeGetterCustom(info);
    }

    CORE_EXPORT void responseTextAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        V8XMLHttpRequest::responseTextAttributeGetterCustom(info);
    }

    static void responseXMLAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::GetterContext, "XMLHttpRequest", "responseXML");

        Document* cppValue(impl->responseXML(exceptionState));

        if (UNLIKELY(exceptionState.hadException()))
            return;

        v8SetReturnValueFast(info, cppValue, impl);
    }

    CORE_EXPORT void responseXMLAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::responseXMLAttributeGetter(info);
    }

    static void open1Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "XMLHttpRequest", "open");

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        V8StringResource<> method;
        V8StringResource<> url;
        method = info[0];
        if (!method.prepare())
            return;

        url = info[1];
        if (!url.prepare())
            return;

        impl->open(method, url, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    static void open2Method(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "XMLHttpRequest", "open");

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        V8StringResource<> method;
        V8StringResource<> url;
        bool async;
        V8StringResource<TreatNullAndUndefinedAsNullString> username;
        V8StringResource<TreatNullAndUndefinedAsNullString> password;
        method = info[0];
        if (!method.prepare())
            return;

        url = info[1];
        if (!url.prepare())
            return;

        async = toBoolean(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        if (!info[3]->IsUndefined()) {
            username = info[3];
            if (!username.prepare())
                return;
        } else {
            username = nullptr;
        }
        if (!info[4]->IsUndefined()) {
            password = info[4];
            if (!password.prepare())
                return;
        } else {
            password = nullptr;
        }

        impl->open(method, url, async, username, password, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    static void openMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        bool isArityError = false;
        switch (std::min(5, info.Length())) {
        case 2:
            if (true) {
                open1Method(info);
                return;
            }
            break;
        case 3:
            if (true) {
                open2Method(info);
                return;
            }
            break;
        case 4:
            if (true) {
                open2Method(info);
                return;
            }
            break;
        case 5:
            if (true) {
                open2Method(info);
                return;
            }
            break;
        default:
            isArityError = true;
        }

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "XMLHttpRequest", "open");

        if (isArityError) {
            if (info.Length() < 2) {
                exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
                return;
            }
        }
        exceptionState.throwTypeError("No function was found that matched the signature provided.");
    }

    CORE_EXPORT void openMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::openMethod(info);
    }

    static void setRequestHeaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "XMLHttpRequest", "setRequestHeader");

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        V8StringResource<> name;
        V8StringResource<> value;
        name = info[0];
        if (!name.prepare())
            return;

        value = info[1];
        if (!value.prepare())
            return;

        impl->setRequestHeader(name, value, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void setRequestHeaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::setRequestHeaderMethod(info);
    }

    static void sendMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "XMLHttpRequest", "send");

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormData body;
        if (!info[0]->IsUndefined()) {
            V8ArrayBufferOrArrayBufferViewOrBlobOrDocumentOrStringOrFormData::toImpl(info.GetIsolate(), info[0], body, UnionTypeConversionMode::Nullable, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            /* null default value */;
        }

        impl->send(body, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void sendMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::sendMethod(info);
    }

    static void abortMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        impl->abort();
    }

    CORE_EXPORT void abortMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::abortMethod(info);
    }

    static void getResponseHeaderMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getResponseHeader", "XMLHttpRequest", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        V8StringResource<> name;
        name = info[0];
        if (!name.prepare())
            return;

        v8SetReturnValueStringOrNull(info, impl->getResponseHeader(name), info.GetIsolate());
    }

    CORE_EXPORT void getResponseHeaderMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::getResponseHeaderMethod(info);
    }

    static void getAllResponseHeadersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        v8SetReturnValueString(info, impl->getAllResponseHeaders(), info.GetIsolate());
    }

    CORE_EXPORT void getAllResponseHeadersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::getAllResponseHeadersMethod(info);
    }

    static void overrideMimeTypeMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "XMLHttpRequest", "overrideMimeType");

        XMLHttpRequest* impl = V8XMLHttpRequest::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> mime;
        mime = info[0];
        if (!mime.prepare())
            return;

        impl->overrideMimeType(mime, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void overrideMimeTypeMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        XMLHttpRequestV8Internal::overrideMimeTypeMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        XMLHttpRequest* impl = XMLHttpRequest::create(scriptState);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8XMLHttpRequest::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace XMLHttpRequestV8Internal

const V8DOMConfiguration::AccessorConfiguration V8XMLHttpRequestAccessors[] = {
    { "onreadystatechange", XMLHttpRequestV8Internal::onreadystatechangeAttributeGetterCallback, XMLHttpRequestV8Internal::onreadystatechangeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "readyState", XMLHttpRequestV8Internal::readyStateAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "timeout", XMLHttpRequestV8Internal::timeoutAttributeGetterCallback, XMLHttpRequestV8Internal::timeoutAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "withCredentials", XMLHttpRequestV8Internal::withCredentialsAttributeGetterCallback, XMLHttpRequestV8Internal::withCredentialsAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "upload", XMLHttpRequestV8Internal::uploadAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "responseURL", XMLHttpRequestV8Internal::responseURLAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "status", XMLHttpRequestV8Internal::statusAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "statusText", XMLHttpRequestV8Internal::statusTextAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "responseType", XMLHttpRequestV8Internal::responseTypeAttributeGetterCallback, XMLHttpRequestV8Internal::responseTypeAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "response", XMLHttpRequestV8Internal::responseAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "responseText", XMLHttpRequestV8Internal::responseTextAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "responseXML", XMLHttpRequestV8Internal::responseXMLAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8XMLHttpRequestMethods[] = {
    { "open", XMLHttpRequestV8Internal::openMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "setRequestHeader", XMLHttpRequestV8Internal::setRequestHeaderMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "send", XMLHttpRequestV8Internal::sendMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "abort", XMLHttpRequestV8Internal::abortMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getResponseHeader", XMLHttpRequestV8Internal::getResponseHeaderMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getAllResponseHeaders", XMLHttpRequestV8Internal::getAllResponseHeadersMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "overrideMimeType", XMLHttpRequestV8Internal::overrideMimeTypeMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8XMLHttpRequest::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("XMLHttpRequest"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    XMLHttpRequestV8Internal::constructor(info);
}

static void installV8XMLHttpRequestTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8XMLHttpRequest::wrapperTypeInfo.interfaceName, V8XMLHttpRequestEventTarget::domTemplate(isolate, world), V8XMLHttpRequest::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8XMLHttpRequest::constructorCallback);
    interfaceTemplate->SetLength(0);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8XMLHttpRequestConstants[] = {
        { "UNSENT", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "OPENED", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "HEADERS_RECEIVED", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "LOADING", 3, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "DONE", 4, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8XMLHttpRequestConstants, WTF_ARRAY_LENGTH(V8XMLHttpRequestConstants));
    static_assert(0 == XMLHttpRequest::kUnsent, "the value of XMLHttpRequest_kUnsent does not match with implementation");
    static_assert(1 == XMLHttpRequest::kOpened, "the value of XMLHttpRequest_kOpened does not match with implementation");
    static_assert(2 == XMLHttpRequest::kHeadersReceived, "the value of XMLHttpRequest_kHeadersReceived does not match with implementation");
    static_assert(3 == XMLHttpRequest::kLoading, "the value of XMLHttpRequest_kLoading does not match with implementation");
    static_assert(4 == XMLHttpRequest::kDone, "the value of XMLHttpRequest_kDone does not match with implementation");
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8XMLHttpRequestAccessors, WTF_ARRAY_LENGTH(V8XMLHttpRequestAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8XMLHttpRequestMethods, WTF_ARRAY_LENGTH(V8XMLHttpRequestMethods));
}

v8::Local<v8::FunctionTemplate> V8XMLHttpRequest::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8XMLHttpRequestTemplate);
}

bool V8XMLHttpRequest::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8XMLHttpRequest::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

XMLHttpRequest* V8XMLHttpRequest::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
