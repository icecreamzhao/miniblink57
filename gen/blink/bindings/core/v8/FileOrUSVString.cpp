// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "FileOrUSVString.h"

#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8File.h"

namespace blink {

FileOrUSVString::FileOrUSVString()
    : m_type(SpecificTypeNone)
{
}

File* FileOrUSVString::getAsFile() const
{
    DCHECK(isFile());
    return m_file;
}

void FileOrUSVString::setFile(File* value)
{
    DCHECK(isNull());
    m_file = value;
    m_type = SpecificTypeFile;
}

FileOrUSVString FileOrUSVString::fromFile(File* value)
{
    FileOrUSVString container;
    container.setFile(value);
    return container;
}

String FileOrUSVString::getAsUSVString() const
{
    DCHECK(isUSVString());
    return m_uSVString;
}

void FileOrUSVString::setUSVString(String value)
{
    DCHECK(isNull());
    m_uSVString = value;
    m_type = SpecificTypeUSVString;
}

FileOrUSVString FileOrUSVString::fromUSVString(String value)
{
    FileOrUSVString container;
    container.setUSVString(value);
    return container;
}

FileOrUSVString::FileOrUSVString(const FileOrUSVString&) = default;
FileOrUSVString::~FileOrUSVString() = default;
FileOrUSVString& FileOrUSVString::operator=(const FileOrUSVString&) = default;

DEFINE_TRACE(FileOrUSVString)
{
    visitor->trace(m_file);
}

void V8FileOrUSVString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, FileOrUSVString& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8File::hasInstance(v8Value, isolate)) {
        File* cppValue = V8File::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setFile(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = toUSVString(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUSVString(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const FileOrUSVString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case FileOrUSVString::SpecificTypeNone:
        return v8::Null(isolate);
    case FileOrUSVString::SpecificTypeFile:
        return ToV8(impl.getAsFile(), creationContext, isolate);
    case FileOrUSVString::SpecificTypeUSVString:
        return v8String(isolate, impl.getAsUSVString());
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

FileOrUSVString NativeValueTraits<FileOrUSVString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    FileOrUSVString impl;
    V8FileOrUSVString::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
