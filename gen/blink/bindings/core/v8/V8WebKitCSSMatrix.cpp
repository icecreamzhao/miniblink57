// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8WebKitCSSMatrix.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8WebKitCSSMatrix.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8WebKitCSSMatrix::wrapperTypeInfo = { gin::kEmbedderBlink, V8WebKitCSSMatrix::domTemplate, V8WebKitCSSMatrix::trace, V8WebKitCSSMatrix::traceWrappers, 0, nullptr, "WebKitCSSMatrix", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in CSSMatrix.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& CSSMatrix::s_wrapperTypeInfo = V8WebKitCSSMatrix::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, CSSMatrix>::value,
    "CSSMatrix inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&CSSMatrix::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "CSSMatrix is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace CSSMatrixV8Internal {

    static void aAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->a());
    }

    CORE_EXPORT void aAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::aAttributeGetter(info);
    }

    static void aAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "a");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setA(cppValue);
    }

    CORE_EXPORT void aAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::aAttributeSetter(v8Value, info);
    }

    static void bAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->b());
    }

    CORE_EXPORT void bAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::bAttributeGetter(info);
    }

    static void bAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "b");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setB(cppValue);
    }

    CORE_EXPORT void bAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::bAttributeSetter(v8Value, info);
    }

    static void cAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->c());
    }

    CORE_EXPORT void cAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::cAttributeGetter(info);
    }

    static void cAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "c");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setC(cppValue);
    }

    CORE_EXPORT void cAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::cAttributeSetter(v8Value, info);
    }

    static void dAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->d());
    }

    CORE_EXPORT void dAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::dAttributeGetter(info);
    }

    static void dAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "d");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setD(cppValue);
    }

    CORE_EXPORT void dAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::dAttributeSetter(v8Value, info);
    }

    static void eAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->e());
    }

    CORE_EXPORT void eAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::eAttributeGetter(info);
    }

    static void eAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "e");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setE(cppValue);
    }

    CORE_EXPORT void eAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::eAttributeSetter(v8Value, info);
    }

    static void fAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->f());
    }

    CORE_EXPORT void fAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::fAttributeGetter(info);
    }

    static void fAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "f");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setF(cppValue);
    }

    CORE_EXPORT void fAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::fAttributeSetter(v8Value, info);
    }

    static void m11AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m11());
    }

    CORE_EXPORT void m11AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m11AttributeGetter(info);
    }

    static void m11AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m11");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM11(cppValue);
    }

    CORE_EXPORT void m11AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m11AttributeSetter(v8Value, info);
    }

    static void m12AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m12());
    }

    CORE_EXPORT void m12AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m12AttributeGetter(info);
    }

    static void m12AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m12");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM12(cppValue);
    }

    CORE_EXPORT void m12AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m12AttributeSetter(v8Value, info);
    }

    static void m13AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m13());
    }

    CORE_EXPORT void m13AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m13AttributeGetter(info);
    }

    static void m13AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m13");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM13(cppValue);
    }

    CORE_EXPORT void m13AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m13AttributeSetter(v8Value, info);
    }

    static void m14AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m14());
    }

    CORE_EXPORT void m14AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m14AttributeGetter(info);
    }

    static void m14AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m14");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM14(cppValue);
    }

    CORE_EXPORT void m14AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m14AttributeSetter(v8Value, info);
    }

    static void m21AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m21());
    }

    CORE_EXPORT void m21AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m21AttributeGetter(info);
    }

    static void m21AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m21");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM21(cppValue);
    }

    CORE_EXPORT void m21AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m21AttributeSetter(v8Value, info);
    }

    static void m22AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m22());
    }

    CORE_EXPORT void m22AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m22AttributeGetter(info);
    }

    static void m22AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m22");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM22(cppValue);
    }

    CORE_EXPORT void m22AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m22AttributeSetter(v8Value, info);
    }

    static void m23AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m23());
    }

    CORE_EXPORT void m23AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m23AttributeGetter(info);
    }

    static void m23AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m23");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM23(cppValue);
    }

    CORE_EXPORT void m23AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m23AttributeSetter(v8Value, info);
    }

    static void m24AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m24());
    }

    CORE_EXPORT void m24AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m24AttributeGetter(info);
    }

    static void m24AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m24");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM24(cppValue);
    }

    CORE_EXPORT void m24AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m24AttributeSetter(v8Value, info);
    }

    static void m31AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m31());
    }

    CORE_EXPORT void m31AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m31AttributeGetter(info);
    }

    static void m31AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m31");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM31(cppValue);
    }

    CORE_EXPORT void m31AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m31AttributeSetter(v8Value, info);
    }

    static void m32AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m32());
    }

    CORE_EXPORT void m32AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m32AttributeGetter(info);
    }

    static void m32AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m32");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM32(cppValue);
    }

    CORE_EXPORT void m32AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m32AttributeSetter(v8Value, info);
    }

    static void m33AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m33());
    }

    CORE_EXPORT void m33AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m33AttributeGetter(info);
    }

    static void m33AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m33");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM33(cppValue);
    }

    CORE_EXPORT void m33AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m33AttributeSetter(v8Value, info);
    }

    static void m34AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m34());
    }

    CORE_EXPORT void m34AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m34AttributeGetter(info);
    }

    static void m34AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m34");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM34(cppValue);
    }

    CORE_EXPORT void m34AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m34AttributeSetter(v8Value, info);
    }

    static void m41AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m41());
    }

    CORE_EXPORT void m41AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m41AttributeGetter(info);
    }

    static void m41AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m41");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM41(cppValue);
    }

    CORE_EXPORT void m41AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m41AttributeSetter(v8Value, info);
    }

    static void m42AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m42());
    }

    CORE_EXPORT void m42AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m42AttributeGetter(info);
    }

    static void m42AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m42");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM42(cppValue);
    }

    CORE_EXPORT void m42AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m42AttributeSetter(v8Value, info);
    }

    static void m43AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m43());
    }

    CORE_EXPORT void m43AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m43AttributeGetter(info);
    }

    static void m43AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m43");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM43(cppValue);
    }

    CORE_EXPORT void m43AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m43AttributeSetter(v8Value, info);
    }

    static void m44AttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        v8SetReturnValue(info, impl->m44());
    }

    CORE_EXPORT void m44AttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::m44AttributeGetter(info);
    }

    static void m44AttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "WebKitCSSMatrix", "m44");

        // Prepare the value to be set.
        double cppValue = toDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setM44(cppValue);
    }

    CORE_EXPORT void m44AttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        CSSMatrixV8Internal::m44AttributeSetter(v8Value, info);
    }

    static void setMatrixValueMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "setMatrixValue");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        V8StringResource<> string;
        string = info[0];
        if (!string.prepare())
            return;

        impl->setMatrixValue(string, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    CORE_EXPORT void setMatrixValueMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::setMatrixValueMethod(info);
    }

    static void multiplyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        CSSMatrix* secondMatrix;
        secondMatrix = V8WebKitCSSMatrix::toImplWithTypeCheck(info.GetIsolate(), info[0]);

        v8SetReturnValue(info, impl->multiply(secondMatrix));
    }

    CORE_EXPORT void multiplyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::multiplyMethod(info);
    }

    static void inverseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "inverse");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        CSSMatrix* result = impl->inverse(exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result);
    }

    CORE_EXPORT void inverseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::inverseMethod(info);
    }

    static void translateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "translate");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        double x;
        double y;
        double z;
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        z = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->translate(x, y, z));
    }

    CORE_EXPORT void translateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::translateMethod(info);
    }

    static void scaleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "scale");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        double scaleX;
        double scaleY;
        double scaleZ;
        scaleX = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        scaleY = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        scaleZ = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->scale(scaleX, scaleY, scaleZ));
    }

    CORE_EXPORT void scaleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::scaleMethod(info);
    }

    static void rotateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "rotate");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        double rotX;
        double rotY;
        double rotZ;
        rotX = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        rotY = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        rotZ = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->rotate(rotX, rotY, rotZ));
    }

    CORE_EXPORT void rotateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::rotateMethod(info);
    }

    static void rotateAxisAngleMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "rotateAxisAngle");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        double x;
        double y;
        double z;
        double angle;
        x = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        y = toDouble(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        z = toDouble(info.GetIsolate(), info[2], exceptionState);
        if (exceptionState.hadException())
            return;

        angle = toDouble(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->rotateAxisAngle(x, y, z, angle));
    }

    CORE_EXPORT void rotateAxisAngleMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::rotateAxisAngleMethod(info);
    }

    static void skewXMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "skewX");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        double angle;
        angle = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->skewX(angle));
    }

    CORE_EXPORT void skewXMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::skewXMethod(info);
    }

    static void skewYMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebKitCSSMatrix", "skewY");

        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        double angle;
        angle = toDouble(info.GetIsolate(), info[0], exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValue(info, impl->skewY(angle));
    }

    CORE_EXPORT void skewYMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::skewYMethod(info);
    }

    static void toStringMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrix* impl = V8WebKitCSSMatrix::toImpl(info.Holder());

        v8SetReturnValueString(info, impl->toString(), info.GetIsolate());
    }

    CORE_EXPORT void toStringMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        CSSMatrixV8Internal::toStringMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "WebKitCSSMatrix");

        V8StringResource<> cssValue;
        if (!info[0]->IsUndefined()) {
            cssValue = info[0];
            if (!cssValue.prepare())
                return;
        } else {
            cssValue = nullptr;
        }

        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
        CSSMatrix* impl = CSSMatrix::create(executionContext, cssValue, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8WebKitCSSMatrix::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace CSSMatrixV8Internal

const V8DOMConfiguration::AccessorConfiguration V8WebKitCSSMatrixAccessors[] = {
    { "a", CSSMatrixV8Internal::aAttributeGetterCallback, CSSMatrixV8Internal::aAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "b", CSSMatrixV8Internal::bAttributeGetterCallback, CSSMatrixV8Internal::bAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "c", CSSMatrixV8Internal::cAttributeGetterCallback, CSSMatrixV8Internal::cAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "d", CSSMatrixV8Internal::dAttributeGetterCallback, CSSMatrixV8Internal::dAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "e", CSSMatrixV8Internal::eAttributeGetterCallback, CSSMatrixV8Internal::eAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "f", CSSMatrixV8Internal::fAttributeGetterCallback, CSSMatrixV8Internal::fAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m11", CSSMatrixV8Internal::m11AttributeGetterCallback, CSSMatrixV8Internal::m11AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m12", CSSMatrixV8Internal::m12AttributeGetterCallback, CSSMatrixV8Internal::m12AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m13", CSSMatrixV8Internal::m13AttributeGetterCallback, CSSMatrixV8Internal::m13AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m14", CSSMatrixV8Internal::m14AttributeGetterCallback, CSSMatrixV8Internal::m14AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m21", CSSMatrixV8Internal::m21AttributeGetterCallback, CSSMatrixV8Internal::m21AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m22", CSSMatrixV8Internal::m22AttributeGetterCallback, CSSMatrixV8Internal::m22AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m23", CSSMatrixV8Internal::m23AttributeGetterCallback, CSSMatrixV8Internal::m23AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m24", CSSMatrixV8Internal::m24AttributeGetterCallback, CSSMatrixV8Internal::m24AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m31", CSSMatrixV8Internal::m31AttributeGetterCallback, CSSMatrixV8Internal::m31AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m32", CSSMatrixV8Internal::m32AttributeGetterCallback, CSSMatrixV8Internal::m32AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m33", CSSMatrixV8Internal::m33AttributeGetterCallback, CSSMatrixV8Internal::m33AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m34", CSSMatrixV8Internal::m34AttributeGetterCallback, CSSMatrixV8Internal::m34AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m41", CSSMatrixV8Internal::m41AttributeGetterCallback, CSSMatrixV8Internal::m41AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m42", CSSMatrixV8Internal::m42AttributeGetterCallback, CSSMatrixV8Internal::m42AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m43", CSSMatrixV8Internal::m43AttributeGetterCallback, CSSMatrixV8Internal::m43AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "m44", CSSMatrixV8Internal::m44AttributeGetterCallback, CSSMatrixV8Internal::m44AttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8WebKitCSSMatrixMethods[] = {
    { "setMatrixValue", CSSMatrixV8Internal::setMatrixValueMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "multiply", CSSMatrixV8Internal::multiplyMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "inverse", CSSMatrixV8Internal::inverseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "translate", CSSMatrixV8Internal::translateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "scale", CSSMatrixV8Internal::scaleMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "rotate", CSSMatrixV8Internal::rotateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "rotateAxisAngle", CSSMatrixV8Internal::rotateAxisAngleMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "skewX", CSSMatrixV8Internal::skewXMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "skewY", CSSMatrixV8Internal::skewYMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "toString", CSSMatrixV8Internal::toStringMethodCallback, 0, 0, static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8WebKitCSSMatrix::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("WebKitCSSMatrix"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    CSSMatrixV8Internal::constructor(info);
}

static void installV8WebKitCSSMatrixTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8WebKitCSSMatrix::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8WebKitCSSMatrix::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8WebKitCSSMatrix::constructorCallback);
    interfaceTemplate->SetLength(0);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WebKitCSSMatrixAccessors, WTF_ARRAY_LENGTH(V8WebKitCSSMatrixAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WebKitCSSMatrixMethods, WTF_ARRAY_LENGTH(V8WebKitCSSMatrixMethods));
}

v8::Local<v8::FunctionTemplate> V8WebKitCSSMatrix::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8WebKitCSSMatrixTemplate);
}

bool V8WebKitCSSMatrix::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WebKitCSSMatrix::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

CSSMatrix* V8WebKitCSSMatrix::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
