// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/partial_interface.cpp.tmpl

// clang-format on
#include "V8HTMLInputElementPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLInputElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8Entry.h"
#include "core/dom/Document.h"
#include "core/dom/custom/V0CustomElementProcessingStack.h"
#include "core/frame/UseCounter.h"
#include "modules/filesystem/HTMLInputElementFileSystem.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace HTMLInputElementPartialV8Internal {

    static void webkitEntriesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        HTMLInputElement* impl = V8HTMLInputElement::toImpl(holder);

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        v8SetReturnValue(info, ToV8(HTMLInputElementFileSystem::webkitEntries(scriptState, *impl), info.Holder(), info.GetIsolate()));
    }

    void webkitEntriesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::V8HTMLInputElement_WebkitEntries_AttributeGetter);

        HTMLInputElementPartialV8Internal::webkitEntriesAttributeGetter(info);
    }

} // namespace HTMLInputElementPartialV8Internal

void V8HTMLInputElementPartial::installV8HTMLInputElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8HTMLInputElement::installV8HTMLInputElementTemplate(isolate, world, interfaceTemplate);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.

    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorwebkitEntriesConfiguration = { "webkitEntries", HTMLInputElementPartialV8Internal::webkitEntriesAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorwebkitEntriesConfiguration);
    }
}

void V8HTMLInputElementPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8HTMLInputElement::updateWrapperTypeInfo(
        &V8HTMLInputElementPartial::installV8HTMLInputElementTemplate,
        nullptr);
}

} // namespace blink
