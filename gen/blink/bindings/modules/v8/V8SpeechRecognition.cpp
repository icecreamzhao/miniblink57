// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8SpeechRecognition.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8MediaStreamTrack.h"
#include "bindings/modules/v8/V8SpeechGrammarList.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SpeechRecognition::wrapperTypeInfo = { gin::kEmbedderBlink, V8SpeechRecognition::domTemplate, V8SpeechRecognition::trace, V8SpeechRecognition::traceWrappers, 0, nullptr, "SpeechRecognition", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SpeechRecognition.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SpeechRecognition::s_wrapperTypeInfo = V8SpeechRecognition::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, SpeechRecognition>::value,
    "SpeechRecognition does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&SpeechRecognition::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "SpeechRecognition is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace SpeechRecognitionV8Internal {

    static void grammarsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->grammars()), impl);
    }

    MODULES_EXPORT void grammarsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::grammarsAttributeGetter(info);
    }

    static void grammarsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "SpeechRecognition", "grammars");

        // Prepare the value to be set.
        SpeechGrammarList* cppValue = V8SpeechGrammarList::toImplWithTypeCheck(info.GetIsolate(), v8Value);

        // Type check per: http://heycam.github.io/webidl/#es-interface
        if (!cppValue) {
            exceptionState.throwTypeError("The provided value is not of type 'SpeechGrammarList'.");
            return;
        }

        impl->setGrammars(cppValue);
    }

    MODULES_EXPORT void grammarsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::grammarsAttributeSetter(v8Value, info);
    }

    static void langAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        v8SetReturnValueString(info, impl->lang(), info.GetIsolate());
    }

    MODULES_EXPORT void langAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::langAttributeGetter(info);
    }

    static void langAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        V8StringResource<> cppValue = v8Value;
        if (!cppValue.prepare())
            return;

        impl->setLang(cppValue);
    }

    MODULES_EXPORT void langAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::langAttributeSetter(v8Value, info);
    }

    static void continuousAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        v8SetReturnValueBool(info, impl->continuous());
    }

    MODULES_EXPORT void continuousAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::continuousAttributeGetter(info);
    }

    static void continuousAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "SpeechRecognition", "continuous");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setContinuous(cppValue);
    }

    MODULES_EXPORT void continuousAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::continuousAttributeSetter(v8Value, info);
    }

    static void interimResultsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        v8SetReturnValueBool(info, impl->interimResults());
    }

    MODULES_EXPORT void interimResultsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::interimResultsAttributeGetter(info);
    }

    static void interimResultsAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "SpeechRecognition", "interimResults");

        // Prepare the value to be set.
        bool cppValue = toBoolean(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setInterimResults(cppValue);
    }

    MODULES_EXPORT void interimResultsAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::interimResultsAttributeSetter(v8Value, info);
    }

    static void maxAlternativesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->maxAlternatives());
    }

    MODULES_EXPORT void maxAlternativesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::maxAlternativesAttributeGetter(info);
    }

    static void maxAlternativesAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "SpeechRecognition", "maxAlternatives");

        // Prepare the value to be set.
        unsigned cppValue = toUInt32(info.GetIsolate(), v8Value, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setMaxAlternatives(cppValue);
    }

    MODULES_EXPORT void maxAlternativesAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::maxAlternativesAttributeSetter(v8Value, info);
    }

    static void audioTrackAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        v8SetReturnValueFast(info, WTF::getPtr(impl->audioTrack()), impl);
    }

    MODULES_EXPORT void audioTrackAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::audioTrackAttributeGetter(info);
    }

    static void audioTrackAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "SpeechRecognition", "audioTrack");

        // Prepare the value to be set.
        MediaStreamTrack* cppValue = V8MediaStreamTrack::toImplWithTypeCheck(info.GetIsolate(), v8Value);

        // Type check per: http://heycam.github.io/webidl/#es-interface
        if (!cppValue && !isUndefinedOrNull(v8Value)) {
            exceptionState.throwTypeError("The provided value is not of type 'MediaStreamTrack'.");
            return;
        }

        impl->setAudioTrack(cppValue);
    }

    MODULES_EXPORT void audioTrackAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::audioTrackAttributeSetter(v8Value, info);
    }

    static void onaudiostartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onaudiostart()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onaudiostartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onaudiostartAttributeGetter(info);
    }

    static void onaudiostartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onaudiostart(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnaudiostart(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onaudiostartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onaudiostartAttributeSetter(v8Value, info);
    }

    static void onsoundstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onsoundstart()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onsoundstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onsoundstartAttributeGetter(info);
    }

    static void onsoundstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onsoundstart(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnsoundstart(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onsoundstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onsoundstartAttributeSetter(v8Value, info);
    }

    static void onspeechstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onspeechstart()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onspeechstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onspeechstartAttributeGetter(info);
    }

    static void onspeechstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onspeechstart(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnspeechstart(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onspeechstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onspeechstartAttributeSetter(v8Value, info);
    }

    static void onspeechendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onspeechend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onspeechendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onspeechendAttributeGetter(info);
    }

    static void onspeechendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onspeechend(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnspeechend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onspeechendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onspeechendAttributeSetter(v8Value, info);
    }

    static void onsoundendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onsoundend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onsoundendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onsoundendAttributeGetter(info);
    }

    static void onsoundendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onsoundend(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnsoundend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onsoundendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onsoundendAttributeSetter(v8Value, info);
    }

    static void onaudioendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onaudioend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onaudioendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onaudioendAttributeGetter(info);
    }

    static void onaudioendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onaudioend(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnaudioend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onaudioendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onaudioendAttributeSetter(v8Value, info);
    }

    static void onresultAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onresult()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onresultAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onresultAttributeGetter(info);
    }

    static void onresultAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onresult(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnresult(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onresultAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onresultAttributeSetter(v8Value, info);
    }

    static void onnomatchAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onnomatch()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onnomatchAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onnomatchAttributeGetter(info);
    }

    static void onnomatchAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onnomatch(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnnomatch(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onnomatchAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onnomatchAttributeSetter(v8Value, info);
    }

    static void onerrorAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onerror()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onerrorAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onerrorAttributeGetter(info);
    }

    static void onerrorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onerror(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnerror(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onerrorAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onerrorAttributeSetter(v8Value, info);
    }

    static void onstartAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onstart()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onstartAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onstartAttributeGetter(info);
    }

    static void onstartAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onstart(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnstart(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onstartAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onstartAttributeSetter(v8Value, info);
    }

    static void onendAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onend()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onendAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::onendAttributeGetter(info);
    }

    static void onendAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onend(), v8Value, V8SpeechRecognition::eventListenerCacheIndex);

        impl->setOnend(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onendAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        SpeechRecognitionV8Internal::onendAttributeSetter(v8Value, info);
    }

    static void startMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SpeechRecognition", "start");

        SpeechRecognition* impl = V8SpeechRecognition::toImpl(info.Holder());

        impl->start(exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
    }

    MODULES_EXPORT void startMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::startMethod(info);
    }

    static void stopMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(info.Holder());

        impl->stopFunction();
    }

    MODULES_EXPORT void stopMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::stopMethod(info);
    }

    static void abortMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognition* impl = V8SpeechRecognition::toImpl(info.Holder());

        impl->abort();
    }

    MODULES_EXPORT void abortMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SpeechRecognitionV8Internal::abortMethod(info);
    }

    static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
        SpeechRecognition* impl = SpeechRecognition::create(executionContext);
        v8::Local<v8::Object> wrapper = info.Holder();
        wrapper = impl->associateWithWrapper(info.GetIsolate(), &V8SpeechRecognition::wrapperTypeInfo, wrapper);
        v8SetReturnValue(info, wrapper);
    }

} // namespace SpeechRecognitionV8Internal

const V8DOMConfiguration::AccessorConfiguration V8SpeechRecognitionAccessors[] = {
    { "grammars", SpeechRecognitionV8Internal::grammarsAttributeGetterCallback, SpeechRecognitionV8Internal::grammarsAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "lang", SpeechRecognitionV8Internal::langAttributeGetterCallback, SpeechRecognitionV8Internal::langAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "continuous", SpeechRecognitionV8Internal::continuousAttributeGetterCallback, SpeechRecognitionV8Internal::continuousAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "interimResults", SpeechRecognitionV8Internal::interimResultsAttributeGetterCallback, SpeechRecognitionV8Internal::interimResultsAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "maxAlternatives", SpeechRecognitionV8Internal::maxAlternativesAttributeGetterCallback, SpeechRecognitionV8Internal::maxAlternativesAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onaudiostart", SpeechRecognitionV8Internal::onaudiostartAttributeGetterCallback, SpeechRecognitionV8Internal::onaudiostartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onsoundstart", SpeechRecognitionV8Internal::onsoundstartAttributeGetterCallback, SpeechRecognitionV8Internal::onsoundstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onspeechstart", SpeechRecognitionV8Internal::onspeechstartAttributeGetterCallback, SpeechRecognitionV8Internal::onspeechstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onspeechend", SpeechRecognitionV8Internal::onspeechendAttributeGetterCallback, SpeechRecognitionV8Internal::onspeechendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onsoundend", SpeechRecognitionV8Internal::onsoundendAttributeGetterCallback, SpeechRecognitionV8Internal::onsoundendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onaudioend", SpeechRecognitionV8Internal::onaudioendAttributeGetterCallback, SpeechRecognitionV8Internal::onaudioendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onresult", SpeechRecognitionV8Internal::onresultAttributeGetterCallback, SpeechRecognitionV8Internal::onresultAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onnomatch", SpeechRecognitionV8Internal::onnomatchAttributeGetterCallback, SpeechRecognitionV8Internal::onnomatchAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onerror", SpeechRecognitionV8Internal::onerrorAttributeGetterCallback, SpeechRecognitionV8Internal::onerrorAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onstart", SpeechRecognitionV8Internal::onstartAttributeGetterCallback, SpeechRecognitionV8Internal::onstartAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onend", SpeechRecognitionV8Internal::onendAttributeGetterCallback, SpeechRecognitionV8Internal::onendAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8SpeechRecognitionMethods[] = {
    { "start", SpeechRecognitionV8Internal::startMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "stop", SpeechRecognitionV8Internal::stopMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "abort", SpeechRecognitionV8Internal::abortMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8SpeechRecognition::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("SpeechRecognition"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    SpeechRecognitionV8Internal::constructor(info);
}

static void installV8SpeechRecognitionTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8SpeechRecognition::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8SpeechRecognition::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8SpeechRecognition::constructorCallback);
    interfaceTemplate->SetLength(0);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SpeechRecognitionAccessors, WTF_ARRAY_LENGTH(V8SpeechRecognitionAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SpeechRecognitionMethods, WTF_ARRAY_LENGTH(V8SpeechRecognitionMethods));

    if (RuntimeEnabledFeatures::mediaStreamSpeechEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessoraudioTrackConfiguration = { "audioTrack", SpeechRecognitionV8Internal::audioTrackAttributeGetterCallback, SpeechRecognitionV8Internal::audioTrackAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoraudioTrackConfiguration);
    }
}

v8::Local<v8::FunctionTemplate> V8SpeechRecognition::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SpeechRecognitionTemplate);
}

bool V8SpeechRecognition::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SpeechRecognition::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SpeechRecognition* V8SpeechRecognition::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
