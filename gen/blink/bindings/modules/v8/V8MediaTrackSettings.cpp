// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8MediaTrackSettings.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8MediaTrackSettings::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, MediaTrackSettings& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> aspectRatioValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "aspectRatio")).ToLocal(&aspectRatioValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (aspectRatioValue.IsEmpty() || aspectRatioValue->IsUndefined()) {
        // Do nothing.
    } else {
        double aspectRatio = toRestrictedDouble(isolate, aspectRatioValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setAspectRatio(aspectRatio);
    }

    v8::Local<v8::Value> channelCountValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "channelCount")).ToLocal(&channelCountValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (channelCountValue.IsEmpty() || channelCountValue->IsUndefined()) {
        // Do nothing.
    } else {
        int channelCount = toInt32(isolate, channelCountValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setChannelCount(channelCount);
    }

    v8::Local<v8::Value> deviceIdValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "deviceId")).ToLocal(&deviceIdValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (deviceIdValue.IsEmpty() || deviceIdValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> deviceId = deviceIdValue;
        if (!deviceId.prepare(exceptionState))
            return;
        impl.setDeviceId(deviceId);
    }

    v8::Local<v8::Value> echoCancellationValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "echoCancellation")).ToLocal(&echoCancellationValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (echoCancellationValue.IsEmpty() || echoCancellationValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool echoCancellation = toBoolean(isolate, echoCancellationValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setEchoCancellation(echoCancellation);
    }

    v8::Local<v8::Value> facingModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "facingMode")).ToLocal(&facingModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (facingModeValue.IsEmpty() || facingModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> facingMode = facingModeValue;
        if (!facingMode.prepare(exceptionState))
            return;
        impl.setFacingMode(facingMode);
    }

    v8::Local<v8::Value> frameRateValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "frameRate")).ToLocal(&frameRateValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (frameRateValue.IsEmpty() || frameRateValue->IsUndefined()) {
        // Do nothing.
    } else {
        double frameRate = toRestrictedDouble(isolate, frameRateValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setFrameRate(frameRate);
    }

    v8::Local<v8::Value> groupIdValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "groupId")).ToLocal(&groupIdValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (groupIdValue.IsEmpty() || groupIdValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> groupId = groupIdValue;
        if (!groupId.prepare(exceptionState))
            return;
        impl.setGroupId(groupId);
    }

    v8::Local<v8::Value> heightValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "height")).ToLocal(&heightValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (heightValue.IsEmpty() || heightValue->IsUndefined()) {
        // Do nothing.
    } else {
        int height = toInt32(isolate, heightValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setHeight(height);
    }

    v8::Local<v8::Value> latencyValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "latency")).ToLocal(&latencyValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (latencyValue.IsEmpty() || latencyValue->IsUndefined()) {
        // Do nothing.
    } else {
        double latency = toRestrictedDouble(isolate, latencyValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLatency(latency);
    }

    v8::Local<v8::Value> sampleRateValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "sampleRate")).ToLocal(&sampleRateValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (sampleRateValue.IsEmpty() || sampleRateValue->IsUndefined()) {
        // Do nothing.
    } else {
        int sampleRate = toInt32(isolate, sampleRateValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setSampleRate(sampleRate);
    }

    v8::Local<v8::Value> sampleSizeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "sampleSize")).ToLocal(&sampleSizeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (sampleSizeValue.IsEmpty() || sampleSizeValue->IsUndefined()) {
        // Do nothing.
    } else {
        int sampleSize = toInt32(isolate, sampleSizeValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setSampleSize(sampleSize);
    }

    v8::Local<v8::Value> volumeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "volume")).ToLocal(&volumeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (volumeValue.IsEmpty() || volumeValue->IsUndefined()) {
        // Do nothing.
    } else {
        double volume = toRestrictedDouble(isolate, volumeValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setVolume(volume);
    }

    v8::Local<v8::Value> widthValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "width")).ToLocal(&widthValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (widthValue.IsEmpty() || widthValue->IsUndefined()) {
        // Do nothing.
    } else {
        int width = toInt32(isolate, widthValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setWidth(width);
    }
}

v8::Local<v8::Value> MediaTrackSettings::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8MediaTrackSettings(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8MediaTrackSettings(const MediaTrackSettings& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasAspectRatio()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "aspectRatio"), v8::Number::New(isolate, impl.aspectRatio()))))
            return false;
    }

    if (impl.hasChannelCount()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "channelCount"), v8::Integer::New(isolate, impl.channelCount()))))
            return false;
    }

    if (impl.hasDeviceId()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "deviceId"), v8String(isolate, impl.deviceId()))))
            return false;
    }

    if (impl.hasEchoCancellation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "echoCancellation"), v8Boolean(impl.echoCancellation(), isolate))))
            return false;
    }

    if (impl.hasFacingMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "facingMode"), v8String(isolate, impl.facingMode()))))
            return false;
    }

    if (impl.hasFrameRate()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "frameRate"), v8::Number::New(isolate, impl.frameRate()))))
            return false;
    }

    if (impl.hasGroupId()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "groupId"), v8String(isolate, impl.groupId()))))
            return false;
    }

    if (impl.hasHeight()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "height"), v8::Integer::New(isolate, impl.height()))))
            return false;
    }

    if (impl.hasLatency()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "latency"), v8::Number::New(isolate, impl.latency()))))
            return false;
    }

    if (impl.hasSampleRate()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "sampleRate"), v8::Integer::New(isolate, impl.sampleRate()))))
            return false;
    }

    if (impl.hasSampleSize()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "sampleSize"), v8::Integer::New(isolate, impl.sampleSize()))))
            return false;
    }

    if (impl.hasVolume()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "volume"), v8::Number::New(isolate, impl.volume()))))
            return false;
    }

    if (impl.hasWidth()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "width"), v8::Integer::New(isolate, impl.width()))))
            return false;
    }

    return true;
}

MediaTrackSettings NativeValueTraits<MediaTrackSettings>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    MediaTrackSettings impl;
    V8MediaTrackSettings::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
