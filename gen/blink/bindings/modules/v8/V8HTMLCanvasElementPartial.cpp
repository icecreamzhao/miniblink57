// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/partial_interface.cpp.tmpl

// clang-format on
#include "V8HTMLCanvasElementPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8CanvasContextCreationAttributes.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLCanvasElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8OffscreenCanvas.h"
#include "bindings/modules/v8/RenderingContext.h"
#include "bindings/modules/v8/V8CanvasRenderingContext2D.h"
#include "bindings/modules/v8/V8ImageBitmapRenderingContext.h"
#include "bindings/modules/v8/V8MediaStream.h"
// #include "bindings/modules/v8/V8WebGL2RenderingContext.h"
// #include "bindings/modules/v8/V8WebGLRenderingContext.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "modules/canvas/HTMLCanvasElementModule.h"
#include "modules/mediacapturefromelement/HTMLCanvasElementCapture.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace HTMLCanvasElementPartialV8Internal {

    static void getContextMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "HTMLCanvasElement", "getContext");

        HTMLCanvasElement* impl = V8HTMLCanvasElement::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> contextId;
        CanvasContextCreationAttributes attributes;
        contextId = info[0];
        if (!contextId.prepare())
            return;

        V8CanvasContextCreationAttributes::toImpl(info.GetIsolate(), info[1], attributes, exceptionState);
        if (exceptionState.hadException())
            return;

        CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext result;
        HTMLCanvasElementModule::getContext(*impl, contextId, attributes, exceptionState, result);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result);
    }

    void getContextMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        HTMLCanvasElementPartialV8Internal::getContextMethod(info);
    }

    static void transferControlToOffscreenMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "HTMLCanvasElement", "transferControlToOffscreen");

        HTMLCanvasElement* impl = V8HTMLCanvasElement::toImpl(info.Holder());

        OffscreenCanvas* result = HTMLCanvasElementModule::transferControlToOffscreen(*impl, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValueFast(info, result, impl);
    }

    void transferControlToOffscreenMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::OffscreenCanvas);
        HTMLCanvasElementPartialV8Internal::transferControlToOffscreenMethod(info);
    }

//     static void captureStreamMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
//     {
//         ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "HTMLCanvasElement", "captureStream");
// 
//         HTMLCanvasElement* impl = V8HTMLCanvasElement::toImpl(info.Holder());
// 
//         double frameRate;
//         int numArgsPassed = info.Length();
//         while (numArgsPassed > 0) {
//             if (!info[numArgsPassed - 1]->IsUndefined())
//                 break;
//             --numArgsPassed;
//         }
//         if (UNLIKELY(numArgsPassed <= 0)) {
//             MediaStream* result = HTMLCanvasElementCapture::captureStream(*impl, exceptionState);
//             if (exceptionState.hadException()) {
//                 return;
//             }
//             v8SetReturnValueFast(info, result, impl);
//             return;
//         }
//         frameRate = toRestrictedDouble(info.GetIsolate(), info[0], exceptionState);
//         if (exceptionState.hadException())
//             return;
// 
//         MediaStream* result = HTMLCanvasElementCapture::captureStream(*impl, frameRate, exceptionState);
//         if (exceptionState.hadException()) {
//             return;
//         }
//         v8SetReturnValueFast(info, result, impl);
//     }
// 
//     void captureStreamMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
//     {
//         HTMLCanvasElementPartialV8Internal::captureStreamMethod(info);
//     }

} // namespace HTMLCanvasElementPartialV8Internal

const V8DOMConfiguration::MethodConfiguration V8HTMLCanvasElementMethods[] = {
    { "getContext", HTMLCanvasElementPartialV8Internal::getContextMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8HTMLCanvasElementPartial::installV8HTMLCanvasElementTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8HTMLCanvasElement::installV8HTMLCanvasElementTemplate(isolate, world, interfaceTemplate);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8HTMLCanvasElementMethods, WTF_ARRAY_LENGTH(V8HTMLCanvasElementMethods));

    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        const V8DOMConfiguration::MethodConfiguration transferControlToOffscreenMethodConfiguration = { "transferControlToOffscreen", HTMLCanvasElementPartialV8Internal::transferControlToOffscreenMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, transferControlToOffscreenMethodConfiguration);
    }
//     if (RuntimeEnabledFeatures::mediaCaptureFromCanvasEnabled()) {
//         const V8DOMConfiguration::MethodConfiguration captureStreamMethodConfiguration = { "captureStream", HTMLCanvasElementPartialV8Internal::captureStreamMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
//         V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, captureStreamMethodConfiguration);
//     }
}

void V8HTMLCanvasElementPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8HTMLCanvasElement::updateWrapperTypeInfo(
        &V8HTMLCanvasElementPartial::installV8HTMLCanvasElementTemplate,
        nullptr);
}

} // namespace blink
