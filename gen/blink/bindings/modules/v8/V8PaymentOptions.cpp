// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8PaymentOptions.h"

#include "bindings/core/v8/ExceptionState.h"
#include "platform/RuntimeEnabledFeatures.h"

namespace blink {

void V8PaymentOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PaymentOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> requestPayerEmailValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "requestPayerEmail")).ToLocal(&requestPayerEmailValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (requestPayerEmailValue.IsEmpty() || requestPayerEmailValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool requestPayerEmail = toBoolean(isolate, requestPayerEmailValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRequestPayerEmail(requestPayerEmail);
    }

    if (RuntimeEnabledFeatures::paymentRequestPayerNameEnabled()) {
        v8::Local<v8::Value> requestPayerNameValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "requestPayerName")).ToLocal(&requestPayerNameValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (requestPayerNameValue.IsEmpty() || requestPayerNameValue->IsUndefined()) {
            // Do nothing.
        } else {
            bool requestPayerName = toBoolean(isolate, requestPayerNameValue, exceptionState);
            if (exceptionState.hadException())
                return;
            impl.setRequestPayerName(requestPayerName);
        }
    }

    v8::Local<v8::Value> requestPayerPhoneValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "requestPayerPhone")).ToLocal(&requestPayerPhoneValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (requestPayerPhoneValue.IsEmpty() || requestPayerPhoneValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool requestPayerPhone = toBoolean(isolate, requestPayerPhoneValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRequestPayerPhone(requestPayerPhone);
    }

    v8::Local<v8::Value> requestShippingValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "requestShipping")).ToLocal(&requestShippingValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (requestShippingValue.IsEmpty() || requestShippingValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool requestShipping = toBoolean(isolate, requestShippingValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRequestShipping(requestShipping);
    }

    v8::Local<v8::Value> shippingTypeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "shippingType")).ToLocal(&shippingTypeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (shippingTypeValue.IsEmpty() || shippingTypeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> shippingType = shippingTypeValue;
        if (!shippingType.prepare(exceptionState))
            return;
        impl.setShippingType(shippingType);
    }
}

v8::Local<v8::Value> PaymentOptions::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PaymentOptions(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8PaymentOptions(const PaymentOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasRequestPayerEmail()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestPayerEmail"), v8Boolean(impl.requestPayerEmail(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestPayerEmail"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasRequestPayerName()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestPayerName"), v8Boolean(impl.requestPayerName(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestPayerName"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasRequestPayerPhone()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestPayerPhone"), v8Boolean(impl.requestPayerPhone(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestPayerPhone"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasRequestShipping()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestShipping"), v8Boolean(impl.requestShipping(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestShipping"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasShippingType()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "shippingType"), v8String(isolate, impl.shippingType()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "shippingType"), v8String(isolate, String("shipping")))))
            return false;
    }

    return true;
}

PaymentOptions NativeValueTraits<PaymentOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PaymentOptions impl;
    V8PaymentOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
