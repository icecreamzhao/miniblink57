// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.h.tmpl

// clang-format on
#ifndef CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext_h
#define CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext_h

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8Binding.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class CanvasRenderingContext2D;
class ImageBitmapRenderingContext;
class WebGL2RenderingContext;
class WebGLRenderingContext;

class MODULES_EXPORT CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext final {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext();
    bool isNull() const { return m_type == SpecificTypeNone; }

    bool isCanvasRenderingContext2D() const { return m_type == SpecificTypeCanvasRenderingContext2D; }
    CanvasRenderingContext2D* getAsCanvasRenderingContext2D() const;
    void setCanvasRenderingContext2D(CanvasRenderingContext2D*);
    static CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext fromCanvasRenderingContext2D(CanvasRenderingContext2D*);

    bool isWebGLRenderingContext() const { return m_type == SpecificTypeWebGLRenderingContext; }
    WebGLRenderingContext* getAsWebGLRenderingContext() const;
    void setWebGLRenderingContext(WebGLRenderingContext*);
    static CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext fromWebGLRenderingContext(WebGLRenderingContext*);

    bool isWebGL2RenderingContext() const { return m_type == SpecificTypeWebGL2RenderingContext; }
    WebGL2RenderingContext* getAsWebGL2RenderingContext() const;
    void setWebGL2RenderingContext(WebGL2RenderingContext*);
    static CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext fromWebGL2RenderingContext(WebGL2RenderingContext*);

    bool isImageBitmapRenderingContext() const { return m_type == SpecificTypeImageBitmapRenderingContext; }
    ImageBitmapRenderingContext* getAsImageBitmapRenderingContext() const;
    void setImageBitmapRenderingContext(ImageBitmapRenderingContext*);
    static CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext fromImageBitmapRenderingContext(ImageBitmapRenderingContext*);

    CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext(const CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext&);
    ~CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext();
    CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext& operator=(const CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext&);
    DECLARE_TRACE();

private:
    enum SpecificTypes {
        SpecificTypeNone,
        SpecificTypeCanvasRenderingContext2D,
        SpecificTypeWebGLRenderingContext,
        SpecificTypeWebGL2RenderingContext,
        SpecificTypeImageBitmapRenderingContext,
    };
    SpecificTypes m_type;

    Member<CanvasRenderingContext2D> m_canvasRenderingContext2D;
    Member<WebGLRenderingContext> m_webGLRenderingContext;
    Member<WebGL2RenderingContext> m_webGL2RenderingContext;
    Member<ImageBitmapRenderingContext> m_imageBitmapRenderingContext;

    friend MODULES_EXPORT v8::Local<v8::Value> ToV8(const CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext&, v8::Local<v8::Object>, v8::Isolate*);
};

class V8CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext final {
public:
    MODULES_EXPORT static void toImpl(v8::Isolate*, v8::Local<v8::Value>, CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext&, UnionTypeConversionMode, ExceptionState&);
};

MODULES_EXPORT v8::Local<v8::Value> ToV8(const CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext&, v8::Local<v8::Object>, v8::Isolate*);

template <class CallbackInfo>
inline void v8SetReturnValue(const CallbackInfo& callbackInfo, CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext& impl)
{
    v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
}

template <>
struct NativeValueTraits<CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext> {
    MODULES_EXPORT static CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
};

} // namespace blink

// We need to set canInitializeWithMemset=true because HeapVector supports
// items that can initialize with memset or have a vtable. It is safe to
// set canInitializeWithMemset=true for a union type object in practice.
// See https://codereview.chromium.org/1118993002/#msg5 for more details.
WTF_ALLOW_MOVE_AND_INIT_WITH_MEM_FUNCTIONS(blink::CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext);

#endif // CanvasRenderingContext2DOrWebGLRenderingContextOrWebGL2RenderingContextOrImageBitmapRenderingContext_h
