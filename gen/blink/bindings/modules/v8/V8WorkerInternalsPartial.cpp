// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/partial_interface.cpp.tmpl

// clang-format on
#include "V8WorkerInternalsPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8WorkerInternals.h"
#include "bindings/modules/v8/V8Response.h"
#include "core/dom/Document.h"
#include "modules/fetch/testing/WorkerInternalsFetch.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace WorkerInternalsPartialV8Internal {

    static void getInternalResponseURLListMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        WorkerInternals* impl = V8WorkerInternals::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getInternalResponseURLList", "WorkerInternals", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        Response* response;
        response = V8Response::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!response) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getInternalResponseURLList", "WorkerInternals", "parameter 1 is not of type 'Response'."));

            return;
        }

        v8SetReturnValue(info, ToV8(WorkerInternalsFetch::getInternalResponseURLList(*impl, response), info.Holder(), info.GetIsolate()));
    }

    void getInternalResponseURLListMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        WorkerInternalsPartialV8Internal::getInternalResponseURLListMethod(info);
    }

} // namespace WorkerInternalsPartialV8Internal

const V8DOMConfiguration::MethodConfiguration V8WorkerInternalsMethods[] = {
    { "getInternalResponseURLList", WorkerInternalsPartialV8Internal::getInternalResponseURLListMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8WorkerInternalsPartial::installV8WorkerInternalsTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8WorkerInternals::installV8WorkerInternalsTemplate(isolate, world, interfaceTemplate);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WorkerInternalsMethods, WTF_ARRAY_LENGTH(V8WorkerInternalsMethods));
}

void V8WorkerInternalsPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8WorkerInternals::updateWrapperTypeInfo(
        &V8WorkerInternalsPartial::installV8WorkerInternalsTemplate,
        nullptr);
}

} // namespace blink
