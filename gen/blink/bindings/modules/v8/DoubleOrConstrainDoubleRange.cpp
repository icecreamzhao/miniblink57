// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "DoubleOrConstrainDoubleRange.h"

#include "bindings/core/v8/ToV8.h"

namespace blink {

DoubleOrConstrainDoubleRange::DoubleOrConstrainDoubleRange()
    : m_type(SpecificTypeNone)
{
}

double DoubleOrConstrainDoubleRange::getAsDouble() const
{
    DCHECK(isDouble());
    return m_double;
}

void DoubleOrConstrainDoubleRange::setDouble(double value)
{
    DCHECK(isNull());
    m_double = value;
    m_type = SpecificTypeDouble;
}

DoubleOrConstrainDoubleRange DoubleOrConstrainDoubleRange::fromDouble(double value)
{
    DoubleOrConstrainDoubleRange container;
    container.setDouble(value);
    return container;
}

const ConstrainDoubleRange& DoubleOrConstrainDoubleRange::getAsConstrainDoubleRange() const
{
    DCHECK(isConstrainDoubleRange());
    return m_constrainDoubleRange;
}

void DoubleOrConstrainDoubleRange::setConstrainDoubleRange(const ConstrainDoubleRange& value)
{
    DCHECK(isNull());
    m_constrainDoubleRange = value;
    m_type = SpecificTypeConstrainDoubleRange;
}

DoubleOrConstrainDoubleRange DoubleOrConstrainDoubleRange::fromConstrainDoubleRange(const ConstrainDoubleRange& value)
{
    DoubleOrConstrainDoubleRange container;
    container.setConstrainDoubleRange(value);
    return container;
}

DoubleOrConstrainDoubleRange::DoubleOrConstrainDoubleRange(const DoubleOrConstrainDoubleRange&) = default;
DoubleOrConstrainDoubleRange::~DoubleOrConstrainDoubleRange() = default;
DoubleOrConstrainDoubleRange& DoubleOrConstrainDoubleRange::operator=(const DoubleOrConstrainDoubleRange&) = default;

DEFINE_TRACE(DoubleOrConstrainDoubleRange)
{
    visitor->trace(m_constrainDoubleRange);
}

void V8DoubleOrConstrainDoubleRange::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, DoubleOrConstrainDoubleRange& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (isUndefinedOrNull(v8Value)) {
        //     ConstrainDoubleRange cppValue;
        //     V8ConstrainDoubleRange::toImpl(isolate, v8Value, cppValue, exceptionState);
        //     if (exceptionState.hadException())
        //       return;
        //     impl.setConstrainDoubleRange(cppValue);
        DebugBreak();
        return;
    }

    if (v8Value->IsObject()) {
        //     ConstrainDoubleRange cppValue;
        //     V8ConstrainDoubleRange::toImpl(isolate, v8Value, cppValue, exceptionState);
        //     if (exceptionState.hadException())
        //       return;
        //     impl.setConstrainDoubleRange(cppValue);
        DebugBreak();
        return;
    }

    if (v8Value->IsNumber()) {
        double cppValue = toRestrictedDouble(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDouble(cppValue);
        return;
    }

    {
        double cppValue = toRestrictedDouble(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDouble(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const DoubleOrConstrainDoubleRange& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case DoubleOrConstrainDoubleRange::SpecificTypeNone:
        return v8::Null(isolate);
    case DoubleOrConstrainDoubleRange::SpecificTypeDouble:
        return v8::Number::New(isolate, impl.getAsDouble());
    case DoubleOrConstrainDoubleRange::SpecificTypeConstrainDoubleRange:
        return ToV8(impl.getAsConstrainDoubleRange(), creationContext, isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

DoubleOrConstrainDoubleRange NativeValueTraits<DoubleOrConstrainDoubleRange>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    DoubleOrConstrainDoubleRange impl;
    V8DoubleOrConstrainDoubleRange::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
