// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8DynamicsCompressorOptions.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8AudioNodeOptions.h"

namespace blink {

void V8DynamicsCompressorOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, DynamicsCompressorOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8AudioNodeOptions::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> attackValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "attack")).ToLocal(&attackValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (attackValue.IsEmpty() || attackValue->IsUndefined()) {
        // Do nothing.
    } else {
        float attack = toRestrictedFloat(isolate, attackValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setAttack(attack);
    }

    v8::Local<v8::Value> kneeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "knee")).ToLocal(&kneeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (kneeValue.IsEmpty() || kneeValue->IsUndefined()) {
        // Do nothing.
    } else {
        float knee = toRestrictedFloat(isolate, kneeValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setKnee(knee);
    }

    v8::Local<v8::Value> ratioValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "ratio")).ToLocal(&ratioValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (ratioValue.IsEmpty() || ratioValue->IsUndefined()) {
        // Do nothing.
    } else {
        float ratio = toRestrictedFloat(isolate, ratioValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRatio(ratio);
    }

    v8::Local<v8::Value> releaseValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "release")).ToLocal(&releaseValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (releaseValue.IsEmpty() || releaseValue->IsUndefined()) {
        // Do nothing.
    } else {
        float release = toRestrictedFloat(isolate, releaseValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRelease(release);
    }

    v8::Local<v8::Value> thresholdValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "threshold")).ToLocal(&thresholdValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (thresholdValue.IsEmpty() || thresholdValue->IsUndefined()) {
        // Do nothing.
    } else {
        float threshold = toRestrictedFloat(isolate, thresholdValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setThreshold(threshold);
    }
}

v8::Local<v8::Value> DynamicsCompressorOptions::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8DynamicsCompressorOptions(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8DynamicsCompressorOptions(const DynamicsCompressorOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!toV8AudioNodeOptions(impl, dictionary, creationContext, isolate))
        return false;

    if (impl.hasAttack()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "attack"), v8::Number::New(isolate, impl.attack()))))
            return false;
    }

    if (impl.hasKnee()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "knee"), v8::Number::New(isolate, impl.knee()))))
            return false;
    }

    if (impl.hasRatio()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "ratio"), v8::Number::New(isolate, impl.ratio()))))
            return false;
    }

    if (impl.hasRelease()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "release"), v8::Number::New(isolate, impl.release()))))
            return false;
    }

    if (impl.hasThreshold()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "threshold"), v8::Number::New(isolate, impl.threshold()))))
            return false;
    }

    return true;
}

DynamicsCompressorOptions NativeValueTraits<DynamicsCompressorOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    DynamicsCompressorOptions impl;
    V8DynamicsCompressorOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
