// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/partial_interface.cpp.tmpl

// clang-format on
#include "V8DevToolsHostPartial.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DevToolsHost.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8DOMFileSystem.h"
#include "core/dom/Document.h"
#include "modules/filesystem/DevToolsHostFileSystem.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace DevToolsHostPartialV8Internal {

    static void isolatedFileSystemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DevToolsHost* impl = V8DevToolsHost::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 2)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("isolatedFileSystem", "DevToolsHost", ExceptionMessages::notEnoughArguments(2, info.Length())));
            return;
        }

        V8StringResource<> fileSystemId;
        V8StringResource<> registeredName;
        fileSystemId = info[0];
        if (!fileSystemId.prepare())
            return;

        registeredName = info[1];
        if (!registeredName.prepare())
            return;

        v8SetReturnValue(info, DevToolsHostFileSystem::isolatedFileSystem(*impl, fileSystemId, registeredName));
    }

    void isolatedFileSystemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DevToolsHostPartialV8Internal::isolatedFileSystemMethod(info);
    }

    static void upgradeDraggedFileSystemPermissionsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DevToolsHost* impl = V8DevToolsHost::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("upgradeDraggedFileSystemPermissions", "DevToolsHost", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        DOMFileSystem* domFileSystem;
        domFileSystem = V8DOMFileSystem::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!domFileSystem) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("upgradeDraggedFileSystemPermissions", "DevToolsHost", "parameter 1 is not of type 'DOMFileSystem'."));

            return;
        }

        DevToolsHostFileSystem::upgradeDraggedFileSystemPermissions(*impl, domFileSystem);
    }

    void upgradeDraggedFileSystemPermissionsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        DevToolsHostPartialV8Internal::upgradeDraggedFileSystemPermissionsMethod(info);
    }

} // namespace DevToolsHostPartialV8Internal

void V8DevToolsHostPartial::installV8DevToolsHostTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DevToolsHost::installV8DevToolsHostTemplate(isolate, world, interfaceTemplate);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.

    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration isolatedFileSystemMethodConfiguration = { "isolatedFileSystem", DevToolsHostPartialV8Internal::isolatedFileSystemMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, isolatedFileSystemMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration upgradeDraggedFileSystemPermissionsMethodConfiguration = { "upgradeDraggedFileSystemPermissions", DevToolsHostPartialV8Internal::upgradeDraggedFileSystemPermissionsMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, upgradeDraggedFileSystemPermissionsMethodConfiguration);
    }
}

// void V8DevToolsHostPartial::preparePrototypeObject(v8::Isolate* isolate, v8::Local<v8::Object> prototypeObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
// {
//     //V8DevToolsHost::preparePrototypeObject(isolate, prototypeObject, interfaceTemplate);
// }

void V8DevToolsHostPartial::initialize()
{
    // Should be invoked from ModulesInitializer.
    V8DevToolsHost::updateWrapperTypeInfo(
        &V8DevToolsHostPartial::installV8DevToolsHostTemplate,
        /*&V8DevToolsHostPartial::preparePrototypeObject*/nullptr);
}

} // namespace blink
