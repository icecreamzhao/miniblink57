// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8VRDisplay.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8FrameRequestCallback.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8VRDisplayCapabilities.h"
#include "bindings/modules/v8/V8VREyeParameters.h"
#include "bindings/modules/v8/V8VRFrameData.h"
#include "bindings/modules/v8/V8VRLayer.h"
#include "bindings/modules/v8/V8VRPose.h"
#include "bindings/modules/v8/V8VRStageParameters.h"
#include "core/dom/Document.h"
#include "core/frame/Deprecation.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8VRDisplay::wrapperTypeInfo = { gin::kEmbedderBlink, V8VRDisplay::domTemplate, V8VRDisplay::trace, V8VRDisplay::traceWrappers, 0, nullptr, "VRDisplay", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in VRDisplay.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& VRDisplay::s_wrapperTypeInfo = V8VRDisplay::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, VRDisplay>::value,
    "VRDisplay does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&VRDisplay::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "VRDisplay is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace VRDisplayV8Internal {

    static void displayIdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->displayId());
    }

    MODULES_EXPORT void displayIdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::displayIdAttributeGetter(info);
    }

    static void displayNameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        v8SetReturnValueString(info, impl->displayName(), info.GetIsolate());
    }

    MODULES_EXPORT void displayNameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::displayNameAttributeGetter(info);
    }

    static void isConnectedAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        v8SetReturnValueBool(info, impl->isConnected());
    }

    MODULES_EXPORT void isConnectedAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::isConnectedAttributeGetter(info);
    }

    static void isPresentingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        v8SetReturnValueBool(info, impl->isPresenting());
    }

    MODULES_EXPORT void isPresentingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::isPresentingAttributeGetter(info);
    }

    static void capabilitiesAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        VRDisplayCapabilities* cppValue(WTF::getPtr(impl->capabilities()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#VRDisplay#capabilities";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void capabilitiesAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::capabilitiesAttributeGetter(info);
    }

    static void stageParametersAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        VRStageParameters* cppValue(WTF::getPtr(impl->stageParameters()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#VRDisplay#stageParameters";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void stageParametersAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::stageParametersAttributeGetter(info);
    }

    static void depthNearAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        v8SetReturnValue(info, impl->depthNear());
    }

    MODULES_EXPORT void depthNearAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::depthNearAttributeGetter(info);
    }

    static void depthNearAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VRDisplay", "depthNear");

        // Prepare the value to be set.
        double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDepthNear(cppValue);
    }

    MODULES_EXPORT void depthNearAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VRDisplayV8Internal::depthNearAttributeSetter(v8Value, info);
    }

    static void depthFarAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        v8SetReturnValue(info, impl->depthFar());
    }

    MODULES_EXPORT void depthFarAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::depthFarAttributeGetter(info);
    }

    static void depthFarAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        VRDisplay* impl = V8VRDisplay::toImpl(holder);

        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "VRDisplay", "depthFar");

        // Prepare the value to be set.
        double cppValue = toRestrictedDouble(info.GetIsolate(), v8Value, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->setDepthFar(cppValue);
    }

    MODULES_EXPORT void depthFarAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        VRDisplayV8Internal::depthFarAttributeSetter(v8Value, info);
    }

    static void getFrameDataMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getFrameData", "VRDisplay", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        VRFrameData* frameData;
        frameData = V8VRFrameData::toImplWithTypeCheck(info.GetIsolate(), info[0]);
        if (!frameData) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("getFrameData", "VRDisplay", "parameter 1 is not of type 'VRFrameData'."));

            return;
        }

        v8SetReturnValueBool(info, impl->getFrameData(frameData));
    }

    MODULES_EXPORT void getFrameDataMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::getFrameDataMethod(info);
    }

    static void getPoseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        v8SetReturnValue(info, impl->getPose());
    }

    MODULES_EXPORT void getPoseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::VRDeprecatedGetPose);
        VRDisplayV8Internal::getPoseMethod(info);
    }

    static void resetPoseMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        impl->resetPose();
    }

    MODULES_EXPORT void resetPoseMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::resetPoseMethod(info);
    }

    static void getEyeParametersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "VRDisplay", "getEyeParameters");

        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> whichEye;
        whichEye = info[0];
        if (!whichEye.prepare())
            return;
        const char* validWhichEyeValues[] = {
            "left",
            "right",
        };
        if (!isValidEnum(whichEye, validWhichEyeValues, WTF_ARRAY_LENGTH(validWhichEyeValues), "VREye", exceptionState)) {
            return;
        }

        v8SetReturnValue(info, impl->getEyeParameters(whichEye));
    }

    MODULES_EXPORT void getEyeParametersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::getEyeParametersMethod(info);
    }

    static void requestAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("requestAnimationFrame", "VRDisplay", ExceptionMessages::notEnoughArguments(1, info.Length())));
            return;
        }

        FrameRequestCallback* callback;
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("requestAnimationFrame", "VRDisplay", "The callback provided as parameter 1 is not a function."));

            return;
        }
        callback = V8FrameRequestCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));

        v8SetReturnValueInt(info, impl->requestAnimationFrame(callback));
    }

    MODULES_EXPORT void requestAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::requestAnimationFrameMethod(info);
    }

    static void cancelAnimationFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "VRDisplay", "cancelAnimationFrame");

        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        int handle;
        handle = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->cancelAnimationFrame(handle);
    }

    MODULES_EXPORT void cancelAnimationFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::cancelAnimationFrameMethod(info);
    }

    static void requestPresentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "VRDisplay", "requestPresent");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8VRDisplay::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        HeapVector<VRLayer> layers;
        layers = toImplArray<HeapVector<VRLayer>>(info[0], 1, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->requestPresent(scriptState, layers);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void requestPresentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::requestPresentMethod(info);
    }

    static void exitPresentMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "VRDisplay", "exitPresent");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8VRDisplay::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptPromise result = impl->exitPresent(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void exitPresentMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::exitPresentMethod(info);
    }

    static void getLayersMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        v8SetReturnValue(info, ToV8(impl->getLayers(), info.Holder(), info.GetIsolate()));
    }

    MODULES_EXPORT void getLayersMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::getLayersMethod(info);
    }

    static void submitFrameMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplay* impl = V8VRDisplay::toImpl(info.Holder());

        impl->submitFrame();
    }

    MODULES_EXPORT void submitFrameMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        VRDisplayV8Internal::submitFrameMethod(info);
    }

} // namespace VRDisplayV8Internal

const V8DOMConfiguration::AccessorConfiguration V8VRDisplayAccessors[] = {
    { "displayId", VRDisplayV8Internal::displayIdAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "displayName", VRDisplayV8Internal::displayNameAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "isConnected", VRDisplayV8Internal::isConnectedAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "isPresenting", VRDisplayV8Internal::isPresentingAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "capabilities", VRDisplayV8Internal::capabilitiesAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "stageParameters", VRDisplayV8Internal::stageParametersAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "depthNear", VRDisplayV8Internal::depthNearAttributeGetterCallback, VRDisplayV8Internal::depthNearAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "depthFar", VRDisplayV8Internal::depthFarAttributeGetterCallback, VRDisplayV8Internal::depthFarAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8VRDisplayMethods[] = {
    { "getFrameData", VRDisplayV8Internal::getFrameDataMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getPose", VRDisplayV8Internal::getPoseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "resetPose", VRDisplayV8Internal::resetPoseMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "getEyeParameters", VRDisplayV8Internal::getEyeParametersMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "requestAnimationFrame", VRDisplayV8Internal::requestAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "cancelAnimationFrame", VRDisplayV8Internal::cancelAnimationFrameMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "requestPresent", VRDisplayV8Internal::requestPresentMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "exitPresent", VRDisplayV8Internal::exitPresentMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "getLayers", VRDisplayV8Internal::getLayersMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "submitFrame", VRDisplayV8Internal::submitFrameMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8VRDisplayTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8VRDisplay::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8VRDisplay::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VRDisplayAccessors, WTF_ARRAY_LENGTH(V8VRDisplayAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8VRDisplayMethods, WTF_ARRAY_LENGTH(V8VRDisplayMethods));
}

v8::Local<v8::FunctionTemplate> V8VRDisplay::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8VRDisplayTemplate);
}

bool V8VRDisplay::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8VRDisplay::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

VRDisplay* V8VRDisplay::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
