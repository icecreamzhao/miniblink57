// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8SQLError.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SQLError::wrapperTypeInfo = { gin::kEmbedderBlink, V8SQLError::domTemplate, V8SQLError::trace, V8SQLError::traceWrappers, 0, nullptr, "SQLError", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SQLError.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SQLError::s_wrapperTypeInfo = V8SQLError::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, SQLError>::value,
    "SQLError inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&SQLError::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "SQLError is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace SQLErrorV8Internal {

    static void codeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SQLError* impl = V8SQLError::toImpl(holder);

        v8SetReturnValueUnsigned(info, impl->code());
    }

    MODULES_EXPORT void codeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SQLErrorV8Internal::codeAttributeGetter(info);
    }

    static void messageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        SQLError* impl = V8SQLError::toImpl(holder);

        v8SetReturnValueString(info, impl->message(), info.GetIsolate());
    }

    MODULES_EXPORT void messageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        SQLErrorV8Internal::messageAttributeGetter(info);
    }

} // namespace SQLErrorV8Internal

const V8DOMConfiguration::AccessorConfiguration V8SQLErrorAccessors[] = {
    { "code", SQLErrorV8Internal::codeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "message", SQLErrorV8Internal::messageAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8SQLErrorTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8SQLError::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8SQLError::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    const V8DOMConfiguration::ConstantConfiguration V8SQLErrorConstants[] = {
        { "UNKNOWN_ERR", 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "DATABASE_ERR", 1, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "VERSION_ERR", 2, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "TOO_LARGE_ERR", 3, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "QUOTA_ERR", 4, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "SYNTAX_ERR", 5, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "CONSTRAINT_ERR", 6, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
        { "TIMEOUT_ERR", 7, 0, V8DOMConfiguration::ConstantTypeUnsignedShort },
    };
    V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8SQLErrorConstants, WTF_ARRAY_LENGTH(V8SQLErrorConstants));
    static_assert(0 == SQLError::kUnknownErr, "the value of SQLError_kUnknownErr does not match with implementation");
    static_assert(1 == SQLError::kDatabaseErr, "the value of SQLError_kDatabaseErr does not match with implementation");
    static_assert(2 == SQLError::kVersionErr, "the value of SQLError_kVersionErr does not match with implementation");
    static_assert(3 == SQLError::kTooLargeErr, "the value of SQLError_kTooLargeErr does not match with implementation");
    static_assert(4 == SQLError::kQuotaErr, "the value of SQLError_kQuotaErr does not match with implementation");
    static_assert(5 == SQLError::kSyntaxErr, "the value of SQLError_kSyntaxErr does not match with implementation");
    static_assert(6 == SQLError::kConstraintErr, "the value of SQLError_kConstraintErr does not match with implementation");
    static_assert(7 == SQLError::kTimeoutErr, "the value of SQLError_kTimeoutErr does not match with implementation");
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SQLErrorAccessors, WTF_ARRAY_LENGTH(V8SQLErrorAccessors));
}

v8::Local<v8::FunctionTemplate> V8SQLError::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SQLErrorTemplate);
}

bool V8SQLError::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SQLError::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SQLError* V8SQLError::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
