// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8ExtendableMessageEvent.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8MessagePort.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/ClientOrServiceWorkerOrMessagePort.h"
#include "bindings/modules/v8/V8Client.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "core/dom/Document.h"
#include "core/frame/LocalDOMWindow.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8ExtendableMessageEvent::wrapperTypeInfo = { gin::kEmbedderBlink, V8ExtendableMessageEvent::domTemplate, V8ExtendableMessageEvent::trace, V8ExtendableMessageEvent::traceWrappers, 0, nullptr, "ExtendableMessageEvent", &V8ExtendableEvent::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in ExtendableMessageEvent.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& ExtendableMessageEvent::s_wrapperTypeInfo = V8ExtendableMessageEvent::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, ExtendableMessageEvent>::value,
    "ExtendableMessageEvent inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&ExtendableMessageEvent::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "ExtendableMessageEvent is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace ExtendableMessageEventV8Internal {

    MODULES_EXPORT void dataAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        V8ExtendableMessageEvent::dataAttributeGetterCustom(info);
    }

    static void originAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ExtendableMessageEvent* impl = V8ExtendableMessageEvent::toImpl(holder);

        v8SetReturnValueString(info, impl->origin(), info.GetIsolate());
    }

    MODULES_EXPORT void originAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExtendableMessageEventV8Internal::originAttributeGetter(info);
    }

    static void lastEventIdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ExtendableMessageEvent* impl = V8ExtendableMessageEvent::toImpl(holder);

        v8SetReturnValueString(info, impl->lastEventId(), info.GetIsolate());
    }

    MODULES_EXPORT void lastEventIdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExtendableMessageEventV8Internal::lastEventIdAttributeGetter(info);
    }

    static void sourceAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ExtendableMessageEvent* impl = V8ExtendableMessageEvent::toImpl(holder);

        ClientOrServiceWorkerOrMessagePort result;
        impl->source(result);

        v8SetReturnValue(info, result);
    }

    MODULES_EXPORT void sourceAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExtendableMessageEventV8Internal::sourceAttributeGetter(info);
    }

    static void portsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ExtendableMessageEvent* impl = V8ExtendableMessageEvent::toImpl(holder);

        bool isNull = false;

        HeapVector<Member<MessagePort>> cppValue(impl->ports(isNull));

        if (isNull) {
            v8SetReturnValueNull(info);
            return;
        }

        v8SetReturnValue(info, freezeV8Object(ToV8(cppValue, info.Holder(), info.GetIsolate()), info.GetIsolate()));
    }

    MODULES_EXPORT void portsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExtendableMessageEventV8Internal::portsAttributeGetter(info);
    }

} // namespace ExtendableMessageEventV8Internal

const V8DOMConfiguration::AccessorConfiguration V8ExtendableMessageEventAccessors[] = {
    { "data", ExtendableMessageEventV8Internal::dataAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "origin", ExtendableMessageEventV8Internal::originAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "lastEventId", ExtendableMessageEventV8Internal::lastEventIdAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "source", ExtendableMessageEventV8Internal::sourceAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "ports", ExtendableMessageEventV8Internal::portsAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

void V8ExtendableMessageEvent::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (!info.IsConstructCall()) {
        V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("ExtendableMessageEvent"));
        return;
    }

    if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
        v8SetReturnValue(info, info.Holder());
        return;
    }

    V8ExtendableMessageEvent::constructorCustom(info);
}

static void installV8ExtendableMessageEventTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8ExtendableMessageEvent::wrapperTypeInfo.interfaceName, V8ExtendableEvent::domTemplate(isolate, world), V8ExtendableMessageEvent::internalFieldCount);
    interfaceTemplate->SetCallHandler(V8ExtendableMessageEvent::constructorCallback);
    interfaceTemplate->SetLength(0);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ExtendableMessageEventAccessors, WTF_ARRAY_LENGTH(V8ExtendableMessageEventAccessors));
}

v8::Local<v8::FunctionTemplate> V8ExtendableMessageEvent::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ExtendableMessageEventTemplate);
}

bool V8ExtendableMessageEvent::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8ExtendableMessageEvent::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ExtendableMessageEvent* V8ExtendableMessageEvent::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
