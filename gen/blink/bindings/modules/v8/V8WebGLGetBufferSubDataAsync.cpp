// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8WebGLGetBufferSubDataAsync.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8GCController.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "core/dom/Element.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8WebGLGetBufferSubDataAsync::wrapperTypeInfo = { gin::kEmbedderBlink, V8WebGLGetBufferSubDataAsync::domTemplate, V8WebGLGetBufferSubDataAsync::trace, V8WebGLGetBufferSubDataAsync::traceWrappers, V8WebGLGetBufferSubDataAsync::visitDOMWrapper, nullptr, "WebGLGetBufferSubDataAsync", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in WebGLGetBufferSubDataAsync.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& WebGLGetBufferSubDataAsync::s_wrapperTypeInfo = V8WebGLGetBufferSubDataAsync::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, WebGLGetBufferSubDataAsync>::value,
    "WebGLGetBufferSubDataAsync inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&WebGLGetBufferSubDataAsync::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "WebGLGetBufferSubDataAsync is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace WebGLGetBufferSubDataAsyncV8Internal {

    static void getBufferSubDataAsyncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "WebGLGetBufferSubDataAsync", "getBufferSubDataAsync");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8WebGLGetBufferSubDataAsync::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        WebGLGetBufferSubDataAsync* impl = V8WebGLGetBufferSubDataAsync::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        unsigned target;
        long long srcByteOffset;
        DOMArrayBufferView* dstData;
        unsigned dstOffset;
        unsigned length;
        target = toUInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        srcByteOffset = toInt64(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        dstData = info[2]->IsArrayBufferView() ? V8ArrayBufferView::toImpl(v8::Local<v8::ArrayBufferView>::Cast(info[2])) : 0;
        if (!dstData) {
            exceptionState.throwTypeError("parameter 3 is not of type 'ArrayBufferView'.");

            return;
        }

        if (!info[3]->IsUndefined()) {
            dstOffset = toUInt32(info.GetIsolate(), info[3], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            dstOffset = 0u;
        }
        if (!info[4]->IsUndefined()) {
            length = toUInt32(info.GetIsolate(), info[4], NormalConversion, exceptionState);
            if (exceptionState.hadException())
                return;
        } else {
            length = 0u;
        }

        ScriptPromise result = impl->getBufferSubDataAsync(scriptState, target, srcByteOffset, dstData, dstOffset, length);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void getBufferSubDataAsyncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        WebGLGetBufferSubDataAsyncV8Internal::getBufferSubDataAsyncMethod(info);
    }

} // namespace WebGLGetBufferSubDataAsyncV8Internal

void V8WebGLGetBufferSubDataAsync::visitDOMWrapper(v8::Isolate* isolate, ScriptWrappable* scriptWrappable, const v8::Persistent<v8::Object>& wrapper)
{
    WebGLGetBufferSubDataAsync* impl = scriptWrappable->toImpl<WebGLGetBufferSubDataAsync>();
    // The canvas() method may return a reference or a pointer.
    if (Node* owner = WTF::getPtr(impl->canvas())) {
        Node* root = V8GCController::opaqueRootForGC(isolate, owner);
        isolate->SetReferenceFromGroup(v8::UniqueId(reinterpret_cast<intptr_t>(root)), wrapper);
        return;
    }
}

const V8DOMConfiguration::MethodConfiguration V8WebGLGetBufferSubDataAsyncMethods[] = {
    { "getBufferSubDataAsync", WebGLGetBufferSubDataAsyncV8Internal::getBufferSubDataAsyncMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
};

static void installV8WebGLGetBufferSubDataAsyncTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8WebGLGetBufferSubDataAsync::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8WebGLGetBufferSubDataAsync::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8WebGLGetBufferSubDataAsyncMethods, WTF_ARRAY_LENGTH(V8WebGLGetBufferSubDataAsyncMethods));
}

v8::Local<v8::FunctionTemplate> V8WebGLGetBufferSubDataAsync::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8WebGLGetBufferSubDataAsyncTemplate);
}

bool V8WebGLGetBufferSubDataAsync::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8WebGLGetBufferSubDataAsync::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

WebGLGetBufferSubDataAsync* V8WebGLGetBufferSubDataAsync::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
