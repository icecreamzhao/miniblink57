// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8MediaKeyMessageEventInit.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8EventInit.h"

namespace blink {

void V8MediaKeyMessageEventInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, MediaKeyMessageEventInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("Missing required member(s): message, messageType.");
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8EventInit::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> messageValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "message")).ToLocal(&messageValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (messageValue.IsEmpty() || messageValue->IsUndefined()) {
        exceptionState.throwTypeError("required member message is undefined.");
        return;
    } else {
        DOMArrayBuffer* message = messageValue->IsArrayBuffer() ? V8ArrayBuffer::toImpl(v8::Local<v8::ArrayBuffer>::Cast(messageValue)) : 0;
        if (!message) {
            exceptionState.throwTypeError("member message is not of type ArrayBuffer.");
            return;
        }
        impl.setMessage(message);
    }

    v8::Local<v8::Value> messageTypeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "messageType")).ToLocal(&messageTypeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (messageTypeValue.IsEmpty() || messageTypeValue->IsUndefined()) {
        exceptionState.throwTypeError("required member messageType is undefined.");
        return;
    } else {
        V8StringResource<> messageType = messageTypeValue;
        if (!messageType.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "license-request",
            "license-renewal",
            "license-release",
        };
        if (!isValidEnum(messageType, validValues, WTF_ARRAY_LENGTH(validValues), "MediaKeyMessageType", exceptionState))
            return;
        impl.setMessageType(messageType);
    }
}

v8::Local<v8::Value> MediaKeyMessageEventInit::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8MediaKeyMessageEventInit(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8MediaKeyMessageEventInit(const MediaKeyMessageEventInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!toV8EventInit(impl, dictionary, creationContext, isolate))
        return false;

    if (impl.hasMessage()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "message"), ToV8(impl.message(), creationContext, isolate))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasMessageType()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "messageType"), v8String(isolate, impl.messageType()))))
            return false;
    } else {
        NOTREACHED();
    }

    return true;
}

MediaKeyMessageEventInit NativeValueTraits<MediaKeyMessageEventInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    MediaKeyMessageEventInit impl;
    V8MediaKeyMessageEventInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
