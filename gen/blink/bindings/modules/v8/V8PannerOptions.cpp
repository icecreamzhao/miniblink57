// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8PannerOptions.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8AudioNodeOptions.h"

namespace blink {

void V8PannerOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PannerOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8AudioNodeOptions::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> coneInnerAngleValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "coneInnerAngle")).ToLocal(&coneInnerAngleValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (coneInnerAngleValue.IsEmpty() || coneInnerAngleValue->IsUndefined()) {
        // Do nothing.
    } else {
        double coneInnerAngle = toRestrictedDouble(isolate, coneInnerAngleValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setConeInnerAngle(coneInnerAngle);
    }

    v8::Local<v8::Value> coneOuterAngleValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "coneOuterAngle")).ToLocal(&coneOuterAngleValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (coneOuterAngleValue.IsEmpty() || coneOuterAngleValue->IsUndefined()) {
        // Do nothing.
    } else {
        double coneOuterAngle = toRestrictedDouble(isolate, coneOuterAngleValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setConeOuterAngle(coneOuterAngle);
    }

    v8::Local<v8::Value> coneOuterGainValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "coneOuterGain")).ToLocal(&coneOuterGainValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (coneOuterGainValue.IsEmpty() || coneOuterGainValue->IsUndefined()) {
        // Do nothing.
    } else {
        double coneOuterGain = toRestrictedDouble(isolate, coneOuterGainValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setConeOuterGain(coneOuterGain);
    }

    v8::Local<v8::Value> distanceModelValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "distanceModel")).ToLocal(&distanceModelValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (distanceModelValue.IsEmpty() || distanceModelValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> distanceModel = distanceModelValue;
        if (!distanceModel.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "linear",
            "inverse",
            "exponential",
        };
        if (!isValidEnum(distanceModel, validValues, WTF_ARRAY_LENGTH(validValues), "DistanceModelType", exceptionState))
            return;
        impl.setDistanceModel(distanceModel);
    }

    v8::Local<v8::Value> maxDistanceValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "maxDistance")).ToLocal(&maxDistanceValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (maxDistanceValue.IsEmpty() || maxDistanceValue->IsUndefined()) {
        // Do nothing.
    } else {
        double maxDistance = toRestrictedDouble(isolate, maxDistanceValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setMaxDistance(maxDistance);
    }

    v8::Local<v8::Value> orientationXValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "orientationX")).ToLocal(&orientationXValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (orientationXValue.IsEmpty() || orientationXValue->IsUndefined()) {
        // Do nothing.
    } else {
        float orientationX = toRestrictedFloat(isolate, orientationXValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setOrientationX(orientationX);
    }

    v8::Local<v8::Value> orientationYValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "orientationY")).ToLocal(&orientationYValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (orientationYValue.IsEmpty() || orientationYValue->IsUndefined()) {
        // Do nothing.
    } else {
        float orientationY = toRestrictedFloat(isolate, orientationYValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setOrientationY(orientationY);
    }

    v8::Local<v8::Value> orientationZValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "orientationZ")).ToLocal(&orientationZValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (orientationZValue.IsEmpty() || orientationZValue->IsUndefined()) {
        // Do nothing.
    } else {
        float orientationZ = toRestrictedFloat(isolate, orientationZValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setOrientationZ(orientationZ);
    }

    v8::Local<v8::Value> panningModelValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "panningModel")).ToLocal(&panningModelValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (panningModelValue.IsEmpty() || panningModelValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> panningModel = panningModelValue;
        if (!panningModel.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "equalpower",
            "HRTF",
        };
        if (!isValidEnum(panningModel, validValues, WTF_ARRAY_LENGTH(validValues), "PanningModelType", exceptionState))
            return;
        impl.setPanningModel(panningModel);
    }

    v8::Local<v8::Value> positionXValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "positionX")).ToLocal(&positionXValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (positionXValue.IsEmpty() || positionXValue->IsUndefined()) {
        // Do nothing.
    } else {
        float positionX = toRestrictedFloat(isolate, positionXValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPositionX(positionX);
    }

    v8::Local<v8::Value> positionYValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "positionY")).ToLocal(&positionYValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (positionYValue.IsEmpty() || positionYValue->IsUndefined()) {
        // Do nothing.
    } else {
        float positionY = toRestrictedFloat(isolate, positionYValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPositionY(positionY);
    }

    v8::Local<v8::Value> positionZValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "positionZ")).ToLocal(&positionZValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (positionZValue.IsEmpty() || positionZValue->IsUndefined()) {
        // Do nothing.
    } else {
        float positionZ = toRestrictedFloat(isolate, positionZValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPositionZ(positionZ);
    }

    v8::Local<v8::Value> refDistanceValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "refDistance")).ToLocal(&refDistanceValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (refDistanceValue.IsEmpty() || refDistanceValue->IsUndefined()) {
        // Do nothing.
    } else {
        double refDistance = toRestrictedDouble(isolate, refDistanceValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRefDistance(refDistance);
    }

    v8::Local<v8::Value> rolloffFactorValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "rolloffFactor")).ToLocal(&rolloffFactorValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (rolloffFactorValue.IsEmpty() || rolloffFactorValue->IsUndefined()) {
        // Do nothing.
    } else {
        double rolloffFactor = toRestrictedDouble(isolate, rolloffFactorValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRolloffFactor(rolloffFactor);
    }
}

v8::Local<v8::Value> PannerOptions::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PannerOptions(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8PannerOptions(const PannerOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!toV8AudioNodeOptions(impl, dictionary, creationContext, isolate))
        return false;

    if (impl.hasConeInnerAngle()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "coneInnerAngle"), v8::Number::New(isolate, impl.coneInnerAngle()))))
            return false;
    }

    if (impl.hasConeOuterAngle()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "coneOuterAngle"), v8::Number::New(isolate, impl.coneOuterAngle()))))
            return false;
    }

    if (impl.hasConeOuterGain()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "coneOuterGain"), v8::Number::New(isolate, impl.coneOuterGain()))))
            return false;
    }

    if (impl.hasDistanceModel()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "distanceModel"), v8String(isolate, impl.distanceModel()))))
            return false;
    }

    if (impl.hasMaxDistance()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "maxDistance"), v8::Number::New(isolate, impl.maxDistance()))))
            return false;
    }

    if (impl.hasOrientationX()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "orientationX"), v8::Number::New(isolate, impl.orientationX()))))
            return false;
    }

    if (impl.hasOrientationY()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "orientationY"), v8::Number::New(isolate, impl.orientationY()))))
            return false;
    }

    if (impl.hasOrientationZ()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "orientationZ"), v8::Number::New(isolate, impl.orientationZ()))))
            return false;
    }

    if (impl.hasPanningModel()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "panningModel"), v8String(isolate, impl.panningModel()))))
            return false;
    }

    if (impl.hasPositionX()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "positionX"), v8::Number::New(isolate, impl.positionX()))))
            return false;
    }

    if (impl.hasPositionY()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "positionY"), v8::Number::New(isolate, impl.positionY()))))
            return false;
    }

    if (impl.hasPositionZ()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "positionZ"), v8::Number::New(isolate, impl.positionZ()))))
            return false;
    }

    if (impl.hasRefDistance()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "refDistance"), v8::Number::New(isolate, impl.refDistance()))))
            return false;
    }

    if (impl.hasRolloffFactor()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rolloffFactor"), v8::Number::New(isolate, impl.rolloffFactor()))))
            return false;
    }

    return true;
}

PannerOptions NativeValueTraits<PannerOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PannerOptions impl;
    V8PannerOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
