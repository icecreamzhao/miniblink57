// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "RTCIceCandidateInitOrRTCIceCandidate.h"

#include "bindings/core/v8/ToV8.h"
#include "bindings/modules/v8/V8RTCIceCandidate.h"

namespace blink {

RTCIceCandidateInitOrRTCIceCandidate::RTCIceCandidateInitOrRTCIceCandidate()
    : m_type(SpecificTypeNone)
{
}

const RTCIceCandidateInit& RTCIceCandidateInitOrRTCIceCandidate::getAsRTCIceCandidateInit() const
{
    DCHECK(isRTCIceCandidateInit());
    return m_rTCIceCandidateInit;
}

void RTCIceCandidateInitOrRTCIceCandidate::setRTCIceCandidateInit(const RTCIceCandidateInit& value)
{
    DCHECK(isNull());
    m_rTCIceCandidateInit = value;
    m_type = SpecificTypeRTCIceCandidateInit;
}

RTCIceCandidateInitOrRTCIceCandidate RTCIceCandidateInitOrRTCIceCandidate::fromRTCIceCandidateInit(const RTCIceCandidateInit& value)
{
    RTCIceCandidateInitOrRTCIceCandidate container;
    container.setRTCIceCandidateInit(value);
    return container;
}

RTCIceCandidate* RTCIceCandidateInitOrRTCIceCandidate::getAsRTCIceCandidate() const
{
    DCHECK(isRTCIceCandidate());
    return m_rTCIceCandidate;
}

void RTCIceCandidateInitOrRTCIceCandidate::setRTCIceCandidate(RTCIceCandidate* value)
{
    DCHECK(isNull());
    m_rTCIceCandidate = value;
    m_type = SpecificTypeRTCIceCandidate;
}

RTCIceCandidateInitOrRTCIceCandidate RTCIceCandidateInitOrRTCIceCandidate::fromRTCIceCandidate(RTCIceCandidate* value)
{
    RTCIceCandidateInitOrRTCIceCandidate container;
    container.setRTCIceCandidate(value);
    return container;
}

RTCIceCandidateInitOrRTCIceCandidate::RTCIceCandidateInitOrRTCIceCandidate(const RTCIceCandidateInitOrRTCIceCandidate&) = default;
RTCIceCandidateInitOrRTCIceCandidate::~RTCIceCandidateInitOrRTCIceCandidate() = default;
RTCIceCandidateInitOrRTCIceCandidate& RTCIceCandidateInitOrRTCIceCandidate::operator=(const RTCIceCandidateInitOrRTCIceCandidate&) = default;

DEFINE_TRACE(RTCIceCandidateInitOrRTCIceCandidate)
{
    visitor->trace(m_rTCIceCandidateInit);
    visitor->trace(m_rTCIceCandidate);
}

void V8RTCIceCandidateInitOrRTCIceCandidate::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, RTCIceCandidateInitOrRTCIceCandidate& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (isUndefinedOrNull(v8Value)) {
        RTCIceCandidateInit cppValue;
        V8RTCIceCandidateInit::toImpl(isolate, v8Value, cppValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRTCIceCandidateInit(cppValue);
        return;
    }

    if (V8RTCIceCandidate::hasInstance(v8Value, isolate)) {
        RTCIceCandidate* cppValue = V8RTCIceCandidate::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setRTCIceCandidate(cppValue);
        return;
    }

    if (v8Value->IsObject()) {
        RTCIceCandidateInit cppValue;
        V8RTCIceCandidateInit::toImpl(isolate, v8Value, cppValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRTCIceCandidateInit(cppValue);
        return;
    }

    exceptionState.throwTypeError("The provided value is not of type '(RTCIceCandidateInit or RTCIceCandidate)'");
}

v8::Local<v8::Value> ToV8(const RTCIceCandidateInitOrRTCIceCandidate& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case RTCIceCandidateInitOrRTCIceCandidate::SpecificTypeNone:
        return v8::Null(isolate);
    case RTCIceCandidateInitOrRTCIceCandidate::SpecificTypeRTCIceCandidateInit:
        return ToV8(impl.getAsRTCIceCandidateInit(), creationContext, isolate);
    case RTCIceCandidateInitOrRTCIceCandidate::SpecificTypeRTCIceCandidate:
        return ToV8(impl.getAsRTCIceCandidate(), creationContext, isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

RTCIceCandidateInitOrRTCIceCandidate NativeValueTraits<RTCIceCandidateInitOrRTCIceCandidate>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    RTCIceCandidateInitOrRTCIceCandidate impl;
    V8RTCIceCandidateInitOrRTCIceCandidate::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
