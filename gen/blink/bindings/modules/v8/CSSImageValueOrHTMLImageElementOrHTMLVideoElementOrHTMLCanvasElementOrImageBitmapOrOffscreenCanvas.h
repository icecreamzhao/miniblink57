// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.h.tmpl

// clang-format on
#ifndef CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas_h
#define CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas_h

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8Binding.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class CSSStyleImageValue;
class HTMLCanvasElement;
class HTMLImageElement;
class HTMLVideoElement;
class ImageBitmap;
class OffscreenCanvas;

class MODULES_EXPORT CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas final {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas();
    bool isNull() const { return m_type == SpecificTypeNone; }

    bool isCSSImageValue() const { return m_type == SpecificTypeCSSImageValue; }
    CSSStyleImageValue* getAsCSSImageValue() const;
    void setCSSImageValue(CSSStyleImageValue*);
    static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas fromCSSImageValue(CSSStyleImageValue*);

    bool isHTMLImageElement() const { return m_type == SpecificTypeHTMLImageElement; }
    HTMLImageElement* getAsHTMLImageElement() const;
    void setHTMLImageElement(HTMLImageElement*);
    static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas fromHTMLImageElement(HTMLImageElement*);

    bool isHTMLVideoElement() const { return m_type == SpecificTypeHTMLVideoElement; }
    HTMLVideoElement* getAsHTMLVideoElement() const;
    void setHTMLVideoElement(HTMLVideoElement*);
    static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas fromHTMLVideoElement(HTMLVideoElement*);

    bool isHTMLCanvasElement() const { return m_type == SpecificTypeHTMLCanvasElement; }
    HTMLCanvasElement* getAsHTMLCanvasElement() const;
    void setHTMLCanvasElement(HTMLCanvasElement*);
    static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas fromHTMLCanvasElement(HTMLCanvasElement*);

    bool isImageBitmap() const { return m_type == SpecificTypeImageBitmap; }
    ImageBitmap* getAsImageBitmap() const;
    void setImageBitmap(ImageBitmap*);
    static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas fromImageBitmap(ImageBitmap*);

    bool isOffscreenCanvas() const { return m_type == SpecificTypeOffscreenCanvas; }
    OffscreenCanvas* getAsOffscreenCanvas() const;
    void setOffscreenCanvas(OffscreenCanvas*);
    static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas fromOffscreenCanvas(OffscreenCanvas*);

    CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas(const CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas&);
    ~CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas();
    CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas& operator=(const CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas&);
    DECLARE_TRACE();

private:
    enum SpecificTypes {
        SpecificTypeNone,
        SpecificTypeCSSImageValue,
        SpecificTypeHTMLImageElement,
        SpecificTypeHTMLVideoElement,
        SpecificTypeHTMLCanvasElement,
        SpecificTypeImageBitmap,
        SpecificTypeOffscreenCanvas,
    };
    SpecificTypes m_type;

    Member<CSSStyleImageValue> m_cssImageValue;
    Member<HTMLImageElement> m_htmlImageElement;
    Member<HTMLVideoElement> m_htmlVideoElement;
    Member<HTMLCanvasElement> m_htmlCanvasElement;
    Member<ImageBitmap> m_imageBitmap;
    Member<OffscreenCanvas> m_offscreenCanvas;

    friend MODULES_EXPORT v8::Local<v8::Value> ToV8(const CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas&, v8::Local<v8::Object>, v8::Isolate*);
};

class V8CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas final {
public:
    MODULES_EXPORT static void toImpl(v8::Isolate*, v8::Local<v8::Value>, CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas&, UnionTypeConversionMode, ExceptionState&);
};

MODULES_EXPORT v8::Local<v8::Value> ToV8(const CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas&, v8::Local<v8::Object>, v8::Isolate*);

template <class CallbackInfo>
inline void v8SetReturnValue(const CallbackInfo& callbackInfo, CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas& impl)
{
    v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
}

template <>
struct NativeValueTraits<CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas> {
    MODULES_EXPORT static CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
};

} // namespace blink

// We need to set canInitializeWithMemset=true because HeapVector supports
// items that can initialize with memset or have a vtable. It is safe to
// set canInitializeWithMemset=true for a union type object in practice.
// See https://codereview.chromium.org/1118993002/#msg5 for more details.
WTF_ALLOW_MOVE_AND_INIT_WITH_MEM_FUNCTIONS(blink::CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas);

#endif // CSSImageValueOrHTMLImageElementOrHTMLVideoElementOrHTMLCanvasElementOrImageBitmapOrOffscreenCanvas_h
