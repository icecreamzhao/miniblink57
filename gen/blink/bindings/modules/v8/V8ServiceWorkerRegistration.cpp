// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8ServiceWorkerRegistration.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8GetNotificationOptions.h"
#include "bindings/modules/v8/V8NavigationPreloadManager.h"
#include "bindings/modules/v8/V8NotificationOptions.h"
#include "bindings/modules/v8/V8PaymentAppManager.h"
#include "bindings/modules/v8/V8PushManager.h"
#include "bindings/modules/v8/V8ServiceWorker.h"
#include "bindings/modules/v8/V8SyncManager.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "core/origin_trials/OriginTrials.h"
#include "modules/background_sync/ServiceWorkerRegistrationSync.h"
#include "modules/notifications/ServiceWorkerRegistrationNotifications.h"
#include "modules/payments/PaymentAppServiceWorkerRegistration.h"
#include "modules/push_messaging/ServiceWorkerRegistrationPush.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8ServiceWorkerRegistration::wrapperTypeInfo = { gin::kEmbedderBlink, V8ServiceWorkerRegistration::domTemplate, V8ServiceWorkerRegistration::trace, V8ServiceWorkerRegistration::traceWrappers, 0, nullptr, "ServiceWorkerRegistration", &V8EventTarget::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in ServiceWorkerRegistration.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& ServiceWorkerRegistration::s_wrapperTypeInfo = V8ServiceWorkerRegistration::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, ServiceWorkerRegistration>::value,
    "ServiceWorkerRegistration does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&ServiceWorkerRegistration::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "ServiceWorkerRegistration is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace ServiceWorkerRegistrationV8Internal {

    static void installingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        ServiceWorker* cppValue(WTF::getPtr(impl->installing()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#installing";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void installingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::installingAttributeGetter(info);
    }

    static void waitingAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        ServiceWorker* cppValue(WTF::getPtr(impl->waiting()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#waiting";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void waitingAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::waitingAttributeGetter(info);
    }

    static void activeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        ServiceWorker* cppValue(WTF::getPtr(impl->active()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#active";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void activeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::activeAttributeGetter(info);
    }

    static void navigationPreloadAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        NavigationPreloadManager* cppValue(WTF::getPtr(impl->navigationPreload()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#navigationPreload";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void navigationPreloadAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::navigationPreloadAttributeGetter(info);
    }

    static void scopeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        v8SetReturnValueString(info, impl->scope(), info.GetIsolate());
    }

    MODULES_EXPORT void scopeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::scopeAttributeGetter(info);
    }

    static void onupdatefoundAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onupdatefound()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onupdatefoundAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeGetter(info);
    }

    static void onupdatefoundAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onupdatefound(), v8Value, V8ServiceWorkerRegistration::eventListenerCacheIndex);

        impl->setOnupdatefound(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onupdatefoundAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeSetter(v8Value, info);
    }

    static void syncAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        SyncManager* cppValue(ServiceWorkerRegistrationSync::sync(*impl));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#sync";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void syncAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::BackgroundSync);

        ServiceWorkerRegistrationV8Internal::syncAttributeGetter(info);
    }

    static void paymentAppManagerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        PaymentAppManager* cppValue(PaymentAppServiceWorkerRegistration::paymentAppManager(scriptState, *impl));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#paymentAppManager";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void paymentAppManagerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::paymentAppManagerAttributeGetter(info);
    }

    static void pushManagerAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(holder);

        PushManager* cppValue(ServiceWorkerRegistrationPush::pushManager(*impl));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerRegistration#pushManager";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void pushManagerAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::pushManagerAttributeGetter(info);
    }

    static void updateMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "ServiceWorkerRegistration", "update");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8ServiceWorkerRegistration::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptPromise result = impl->update(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void updateMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::updateMethod(info);
    }

    static void unregisterMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "ServiceWorkerRegistration", "unregister");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8ServiceWorkerRegistration::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptPromise result = impl->unregister(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void unregisterMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::unregisterMethod(info);
    }

    static void showNotificationMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "ServiceWorkerRegistration", "showNotification");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8ServiceWorkerRegistration::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        V8StringResource<> title;
        NotificationOptions options;
        title = info[0];
        if (!title.prepare(exceptionState))
            return;

        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('options') is not an object.");

            return;
        }
        V8NotificationOptions::toImpl(info.GetIsolate(), info[1], options, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = ServiceWorkerRegistrationNotifications::showNotification(scriptState, *impl, title, options, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void showNotificationMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::showNotificationMethod(info);
    }

    static void getNotificationsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "ServiceWorkerRegistration", "getNotifications");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8ServiceWorkerRegistration::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        ServiceWorkerRegistration* impl = V8ServiceWorkerRegistration::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        GetNotificationOptions filter;
        if (!isUndefinedOrNull(info[0]) && !info[0]->IsObject()) {
            exceptionState.throwTypeError("parameter 1 ('filter') is not an object.");

            return;
        }
        V8GetNotificationOptions::toImpl(info.GetIsolate(), info[0], filter, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = ServiceWorkerRegistrationNotifications::getNotifications(scriptState, *impl, filter);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void getNotificationsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerRegistrationV8Internal::getNotificationsMethod(info);
    }

} // namespace ServiceWorkerRegistrationV8Internal

const V8DOMConfiguration::AccessorConfiguration V8ServiceWorkerRegistrationAccessors[] = {
    { "installing", ServiceWorkerRegistrationV8Internal::installingAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "waiting", ServiceWorkerRegistrationV8Internal::waitingAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "active", ServiceWorkerRegistrationV8Internal::activeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "scope", ServiceWorkerRegistrationV8Internal::scopeAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "onupdatefound", ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeGetterCallback, ServiceWorkerRegistrationV8Internal::onupdatefoundAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8ServiceWorkerRegistrationMethods[] = {
    { "update", ServiceWorkerRegistrationV8Internal::updateMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "unregister", ServiceWorkerRegistrationV8Internal::unregisterMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
};

static void installV8ServiceWorkerRegistrationTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8ServiceWorkerRegistration::wrapperTypeInfo.interfaceName, V8EventTarget::domTemplate(isolate, world), V8ServiceWorkerRegistration::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ServiceWorkerRegistrationAccessors, WTF_ARRAY_LENGTH(V8ServiceWorkerRegistrationAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ServiceWorkerRegistrationMethods, WTF_ARRAY_LENGTH(V8ServiceWorkerRegistrationMethods));

    if (RuntimeEnabledFeatures::backgroundSyncEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorsyncConfiguration = { "sync", ServiceWorkerRegistrationV8Internal::syncAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorsyncConfiguration);
    }
    if (RuntimeEnabledFeatures::paymentAppEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorpaymentAppManagerConfiguration = { "paymentAppManager", ServiceWorkerRegistrationV8Internal::paymentAppManagerAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorpaymentAppManagerConfiguration);
    }
    if (RuntimeEnabledFeatures::pushMessagingEnabled()) {
        const V8DOMConfiguration::AccessorConfiguration accessorpushManagerConfiguration = { "pushManager", ServiceWorkerRegistrationV8Internal::pushManagerAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorpushManagerConfiguration);
    }

    if (RuntimeEnabledFeatures::notificationsEnabled()) {
        const V8DOMConfiguration::MethodConfiguration showNotificationMethodConfiguration = { "showNotification", ServiceWorkerRegistrationV8Internal::showNotificationMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, showNotificationMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::notificationsEnabled()) {
        const V8DOMConfiguration::MethodConfiguration getNotificationsMethodConfiguration = { "getNotifications", ServiceWorkerRegistrationV8Internal::getNotificationsMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder };
        V8DOMConfiguration::installMethod(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, getNotificationsMethodConfiguration);
    }
}

void V8ServiceWorkerRegistration::installServiceWorkerNavigationPreload(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8ServiceWorkerRegistration::wrapperTypeInfo.domTemplate(isolate, world);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    const V8DOMConfiguration::AccessorConfiguration accessornavigationPreloadConfiguration = { "navigationPreload", ServiceWorkerRegistrationV8Internal::navigationPreloadAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessornavigationPreloadConfiguration);
}

void V8ServiceWorkerRegistration::installServiceWorkerNavigationPreload(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8ServiceWorkerRegistration::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8ServiceWorkerRegistration::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    installServiceWorkerNavigationPreload(scriptState->isolate(), scriptState->world(), instance, prototype, interface);
}

void V8ServiceWorkerRegistration::installServiceWorkerNavigationPreload(ScriptState* scriptState)
{
    installServiceWorkerNavigationPreload(scriptState, v8::Local<v8::Object>());
}

v8::Local<v8::FunctionTemplate> V8ServiceWorkerRegistration::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ServiceWorkerRegistrationTemplate);
}

bool V8ServiceWorkerRegistration::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8ServiceWorkerRegistration::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ServiceWorkerRegistration* V8ServiceWorkerRegistration::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
