// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "RequestOrUSVString.h"

#include "bindings/core/v8/ToV8.h"
#include "bindings/modules/v8/RequestOrUSVString.h"
#include "bindings/modules/v8/V8Request.h"

namespace blink {

RequestOrUSVString::RequestOrUSVString()
    : m_type(SpecificTypeNone)
{
}

Request* RequestOrUSVString::getAsRequest() const
{
    DCHECK(isRequest());
    return m_request;
}

void RequestOrUSVString::setRequest(Request* value)
{
    DCHECK(isNull());
    m_request = value;
    m_type = SpecificTypeRequest;
}

RequestOrUSVString RequestOrUSVString::fromRequest(Request* value)
{
    RequestOrUSVString container;
    container.setRequest(value);
    return container;
}

String RequestOrUSVString::getAsUSVString() const
{
    DCHECK(isUSVString());
    return m_uSVString;
}

void RequestOrUSVString::setUSVString(String value)
{
    DCHECK(isNull());
    m_uSVString = value;
    m_type = SpecificTypeUSVString;
}

RequestOrUSVString RequestOrUSVString::fromUSVString(String value)
{
    RequestOrUSVString container;
    container.setUSVString(value);
    return container;
}

RequestOrUSVString::RequestOrUSVString(const RequestOrUSVString&) = default;
RequestOrUSVString::~RequestOrUSVString() = default;
RequestOrUSVString& RequestOrUSVString::operator=(const RequestOrUSVString&) = default;

DEFINE_TRACE(RequestOrUSVString)
{
    visitor->trace(m_request);
}

void V8RequestOrUSVString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, RequestOrUSVString& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8Request::hasInstance(v8Value, isolate)) {
        Request* cppValue = V8Request::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setRequest(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = toUSVString(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUSVString(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const RequestOrUSVString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case RequestOrUSVString::SpecificTypeNone:
        return v8::Null(isolate);
    case RequestOrUSVString::SpecificTypeRequest:
        return ToV8(impl.getAsRequest(), creationContext, isolate);
    case RequestOrUSVString::SpecificTypeUSVString:
        return v8String(isolate, impl.getAsUSVString());
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

RequestOrUSVString NativeValueTraits<RequestOrUSVString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    RequestOrUSVString impl;
    V8RequestOrUSVString::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
