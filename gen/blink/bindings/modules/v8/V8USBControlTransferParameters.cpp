// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8USBControlTransferParameters.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8USBControlTransferParameters::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, USBControlTransferParameters& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("Missing required member(s): index, recipient, request, requestType, value.");
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> indexValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "index")).ToLocal(&indexValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (indexValue.IsEmpty() || indexValue->IsUndefined()) {
        exceptionState.throwTypeError("required member index is undefined.");
        return;
    } else {
        unsigned index = toUInt16(isolate, indexValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setIndex(index);
    }

    v8::Local<v8::Value> recipientValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "recipient")).ToLocal(&recipientValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (recipientValue.IsEmpty() || recipientValue->IsUndefined()) {
        exceptionState.throwTypeError("required member recipient is undefined.");
        return;
    } else {
        V8StringResource<> recipient = recipientValue;
        if (!recipient.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "device",
            "interface",
            "endpoint",
            "other",
        };
        if (!isValidEnum(recipient, validValues, WTF_ARRAY_LENGTH(validValues), "USBRecipient", exceptionState))
            return;
        impl.setRecipient(recipient);
    }

    v8::Local<v8::Value> requestValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "request")).ToLocal(&requestValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (requestValue.IsEmpty() || requestValue->IsUndefined()) {
        exceptionState.throwTypeError("required member request is undefined.");
        return;
    } else {
        unsigned request = toUInt8(isolate, requestValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRequest(request);
    }

    v8::Local<v8::Value> requestTypeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "requestType")).ToLocal(&requestTypeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (requestTypeValue.IsEmpty() || requestTypeValue->IsUndefined()) {
        exceptionState.throwTypeError("required member requestType is undefined.");
        return;
    } else {
        V8StringResource<> requestType = requestTypeValue;
        if (!requestType.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "standard",
            "class",
            "vendor",
        };
        if (!isValidEnum(requestType, validValues, WTF_ARRAY_LENGTH(validValues), "USBRequestType", exceptionState))
            return;
        impl.setRequestType(requestType);
    }

    v8::Local<v8::Value> valueValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "value")).ToLocal(&valueValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (valueValue.IsEmpty() || valueValue->IsUndefined()) {
        exceptionState.throwTypeError("required member value is undefined.");
        return;
    } else {
        unsigned value = toUInt16(isolate, valueValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setValue(value);
    }
}

v8::Local<v8::Value> USBControlTransferParameters::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8USBControlTransferParameters(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8USBControlTransferParameters(const USBControlTransferParameters& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasIndex()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "index"), v8::Integer::NewFromUnsigned(isolate, impl.index()))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasRecipient()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "recipient"), v8String(isolate, impl.recipient()))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasRequest()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "request"), v8::Integer::NewFromUnsigned(isolate, impl.request()))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasRequestType()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "requestType"), v8String(isolate, impl.requestType()))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasValue()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "value"), v8::Integer::NewFromUnsigned(isolate, impl.value()))))
            return false;
    } else {
        NOTREACHED();
    }

    return true;
}

USBControlTransferParameters NativeValueTraits<USBControlTransferParameters>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    USBControlTransferParameters impl;
    V8USBControlTransferParameters::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
