// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8Geolocation.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/V8DOMActivityLogger.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8PositionCallback.h"
#include "bindings/modules/v8/V8PositionErrorCallback.h"
#include "bindings/modules/v8/V8PositionOptions.h"
#include "core/dom/Document.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8Geolocation::wrapperTypeInfo = { gin::kEmbedderBlink, V8Geolocation::domTemplate, V8Geolocation::trace, V8Geolocation::traceWrappers, 0, nullptr, "Geolocation", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in Geolocation.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& Geolocation::s_wrapperTypeInfo = V8Geolocation::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, Geolocation>::value,
    "Geolocation inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&Geolocation::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "Geolocation is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace GeolocationV8Internal {

    static void getCurrentPositionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Geolocation", "getCurrentPosition");

        Geolocation* impl = V8Geolocation::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        PositionCallback* successCallback;
        PositionErrorCallback* errorCallback;
        PositionOptions options;
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        successCallback = V8PositionCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));

        if (!isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");

                return;
            }
            errorCallback = V8PositionErrorCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        } else {
            errorCallback = nullptr;
        }

        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('options') is not an object.");

            return;
        }
        V8PositionOptions::toImpl(info.GetIsolate(), info[2], options, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->getCurrentPosition(successCallback, errorCallback, options);
    }

    MODULES_EXPORT void getCurrentPositionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ScriptState* scriptState = ScriptState::forReceiverObject(info);
        V8PerContextData* contextData = scriptState->perContextData();
        if (contextData && contextData->activityLogger()) {
            ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Geolocation", "getCurrentPosition");
            Vector<v8::Local<v8::Value>> loggerArgs = toImplArguments<Vector<v8::Local<v8::Value>>>(info, 0, exceptionState);
            contextData->activityLogger()->logMethod("Geolocation.getCurrentPosition", info.Length(), loggerArgs.data());
        }
        GeolocationV8Internal::getCurrentPositionMethod(info);
    }

    static void watchPositionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Geolocation", "watchPosition");

        Geolocation* impl = V8Geolocation::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        PositionCallback* successCallback;
        PositionErrorCallback* errorCallback;
        PositionOptions options;
        if (info.Length() <= 0 || !info[0]->IsFunction()) {
            exceptionState.throwTypeError("The callback provided as parameter 1 is not a function.");

            return;
        }
        successCallback = V8PositionCallback::create(v8::Local<v8::Function>::Cast(info[0]), ScriptState::current(info.GetIsolate()));

        if (!isUndefinedOrNull(info[1])) {
            if (!info[1]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 2 is not a function.");

                return;
            }
            errorCallback = V8PositionErrorCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        } else {
            errorCallback = nullptr;
        }

        if (!isUndefinedOrNull(info[2]) && !info[2]->IsObject()) {
            exceptionState.throwTypeError("parameter 3 ('options') is not an object.");

            return;
        }
        V8PositionOptions::toImpl(info.GetIsolate(), info[2], options, exceptionState);
        if (exceptionState.hadException())
            return;

        v8SetReturnValueInt(info, impl->watchPosition(successCallback, errorCallback, options));
    }

    MODULES_EXPORT void watchPositionMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ScriptState* scriptState = ScriptState::forReceiverObject(info);
        V8PerContextData* contextData = scriptState->perContextData();
        if (contextData && contextData->activityLogger()) {
            ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Geolocation", "watchPosition");
            Vector<v8::Local<v8::Value>> loggerArgs = toImplArguments<Vector<v8::Local<v8::Value>>>(info, 0, exceptionState);
            contextData->activityLogger()->logMethod("Geolocation.watchPosition", info.Length(), loggerArgs.data());
        }
        GeolocationV8Internal::watchPositionMethod(info);
    }

    static void clearWatchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "Geolocation", "clearWatch");

        Geolocation* impl = V8Geolocation::toImpl(info.Holder());

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        int watchID;
        watchID = toInt32(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        impl->clearWatch(watchID);
    }

    MODULES_EXPORT void clearWatchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        GeolocationV8Internal::clearWatchMethod(info);
    }

} // namespace GeolocationV8Internal

const V8DOMConfiguration::MethodConfiguration V8GeolocationMethods[] = {
    { "getCurrentPosition", GeolocationV8Internal::getCurrentPositionMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "watchPosition", GeolocationV8Internal::watchPositionMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
    { "clearWatch", GeolocationV8Internal::clearWatchMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder },
};

static void installV8GeolocationTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8Geolocation::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8Geolocation::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8GeolocationMethods, WTF_ARRAY_LENGTH(V8GeolocationMethods));
}

v8::Local<v8::FunctionTemplate> V8Geolocation::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8GeolocationTemplate);
}

bool V8Geolocation::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Geolocation::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Geolocation* V8Geolocation::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
