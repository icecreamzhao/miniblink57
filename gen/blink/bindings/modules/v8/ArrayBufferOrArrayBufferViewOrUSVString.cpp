// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "ArrayBufferOrArrayBufferViewOrUSVString.h"

#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "core/dom/FlexibleArrayBufferView.h"

namespace blink {

ArrayBufferOrArrayBufferViewOrUSVString::ArrayBufferOrArrayBufferViewOrUSVString()
    : m_type(SpecificTypeNone)
{
}

DOMArrayBuffer* ArrayBufferOrArrayBufferViewOrUSVString::getAsArrayBuffer() const
{
    DCHECK(isArrayBuffer());
    return m_arrayBuffer;
}

void ArrayBufferOrArrayBufferViewOrUSVString::setArrayBuffer(DOMArrayBuffer* value)
{
    DCHECK(isNull());
    m_arrayBuffer = value;
    m_type = SpecificTypeArrayBuffer;
}

ArrayBufferOrArrayBufferViewOrUSVString ArrayBufferOrArrayBufferViewOrUSVString::fromArrayBuffer(DOMArrayBuffer* value)
{
    ArrayBufferOrArrayBufferViewOrUSVString container;
    container.setArrayBuffer(value);
    return container;
}

DOMArrayBufferView* ArrayBufferOrArrayBufferViewOrUSVString::getAsArrayBufferView() const
{
    DCHECK(isArrayBufferView());
    return m_arrayBufferView;
}

void ArrayBufferOrArrayBufferViewOrUSVString::setArrayBufferView(DOMArrayBufferView* value)
{
    DCHECK(isNull());
    m_arrayBufferView = value;
    m_type = SpecificTypeArrayBufferView;
}

ArrayBufferOrArrayBufferViewOrUSVString ArrayBufferOrArrayBufferViewOrUSVString::fromArrayBufferView(DOMArrayBufferView* value)
{
    ArrayBufferOrArrayBufferViewOrUSVString container;
    container.setArrayBufferView(value);
    return container;
}

String ArrayBufferOrArrayBufferViewOrUSVString::getAsUSVString() const
{
    DCHECK(isUSVString());
    return m_uSVString;
}

void ArrayBufferOrArrayBufferViewOrUSVString::setUSVString(String value)
{
    DCHECK(isNull());
    m_uSVString = value;
    m_type = SpecificTypeUSVString;
}

ArrayBufferOrArrayBufferViewOrUSVString ArrayBufferOrArrayBufferViewOrUSVString::fromUSVString(String value)
{
    ArrayBufferOrArrayBufferViewOrUSVString container;
    container.setUSVString(value);
    return container;
}

ArrayBufferOrArrayBufferViewOrUSVString::ArrayBufferOrArrayBufferViewOrUSVString(const ArrayBufferOrArrayBufferViewOrUSVString&) = default;
ArrayBufferOrArrayBufferViewOrUSVString::~ArrayBufferOrArrayBufferViewOrUSVString() = default;
ArrayBufferOrArrayBufferViewOrUSVString& ArrayBufferOrArrayBufferViewOrUSVString::operator=(const ArrayBufferOrArrayBufferViewOrUSVString&) = default;

DEFINE_TRACE(ArrayBufferOrArrayBufferViewOrUSVString)
{
    visitor->trace(m_arrayBuffer);
    visitor->trace(m_arrayBufferView);
}

void V8ArrayBufferOrArrayBufferViewOrUSVString::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ArrayBufferOrArrayBufferViewOrUSVString& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (v8Value->IsArrayBuffer()) {
        DOMArrayBuffer* cppValue = V8ArrayBuffer::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBuffer(cppValue);
        return;
    }

    if (v8Value->IsArrayBufferView()) {
        DOMArrayBufferView* cppValue = V8ArrayBufferView::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setArrayBufferView(cppValue);
        return;
    }

    {
        V8StringResource<> cppValue = toUSVString(isolate, v8Value, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUSVString(cppValue);
        return;
    }
}

v8::Local<v8::Value> ToV8(const ArrayBufferOrArrayBufferViewOrUSVString& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case ArrayBufferOrArrayBufferViewOrUSVString::SpecificTypeNone:
        return v8::Null(isolate);
    case ArrayBufferOrArrayBufferViewOrUSVString::SpecificTypeArrayBuffer:
        return ToV8(impl.getAsArrayBuffer(), creationContext, isolate);
    case ArrayBufferOrArrayBufferViewOrUSVString::SpecificTypeArrayBufferView:
        return ToV8(impl.getAsArrayBufferView(), creationContext, isolate);
    case ArrayBufferOrArrayBufferViewOrUSVString::SpecificTypeUSVString:
        return v8String(isolate, impl.getAsUSVString());
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

ArrayBufferOrArrayBufferViewOrUSVString NativeValueTraits<ArrayBufferOrArrayBufferViewOrUSVString>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ArrayBufferOrArrayBufferViewOrUSVString impl;
    V8ArrayBufferOrArrayBufferViewOrUSVString::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
