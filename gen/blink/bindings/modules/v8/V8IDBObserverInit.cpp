// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8IDBObserverInit.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8IDBObserverInit::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, IDBObserverInit& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> noRecordsValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "noRecords")).ToLocal(&noRecordsValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (noRecordsValue.IsEmpty() || noRecordsValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool noRecords = toBoolean(isolate, noRecordsValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setNoRecords(noRecords);
    }

    v8::Local<v8::Value> operationTypesValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "operationTypes")).ToLocal(&operationTypesValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (operationTypesValue.IsEmpty() || operationTypesValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> operationTypes = toImplArray<Vector<String>>(operationTypesValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        const char* validValues[] = {
            "add",
            "put",
            "delete",
            "clear",
        };
        if (!isValidEnum(operationTypes, validValues, WTF_ARRAY_LENGTH(validValues), "IDBObservationType", exceptionState))
            return;
        impl.setOperationTypes(operationTypes);
    }

    v8::Local<v8::Value> transactionValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "transaction")).ToLocal(&transactionValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (transactionValue.IsEmpty() || transactionValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool transaction = toBoolean(isolate, transactionValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setTransaction(transaction);
    }

    v8::Local<v8::Value> valuesValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "values")).ToLocal(&valuesValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (valuesValue.IsEmpty() || valuesValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool values = toBoolean(isolate, valuesValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setValues(values);
    }
}

v8::Local<v8::Value> IDBObserverInit::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8IDBObserverInit(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8IDBObserverInit(const IDBObserverInit& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasNoRecords()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "noRecords"), v8Boolean(impl.noRecords(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "noRecords"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasOperationTypes()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "operationTypes"), ToV8(impl.operationTypes(), creationContext, isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "operationTypes"), ToV8(Vector<String>(), creationContext, isolate))))
            return false;
    }

    if (impl.hasTransaction()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "transaction"), v8Boolean(impl.transaction(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "transaction"), v8Boolean(false, isolate))))
            return false;
    }

    if (impl.hasValues()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "values"), v8Boolean(impl.values(), isolate))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "values"), v8Boolean(false, isolate))))
            return false;
    }

    return true;
}

IDBObserverInit NativeValueTraits<IDBObserverInit>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    IDBObserverInit impl;
    V8IDBObserverInit::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
