// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8ShareData.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8ShareData::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, ShareData& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> textValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "text")).ToLocal(&textValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (textValue.IsEmpty() || textValue->IsUndefined()) {
        // Do nothing.
    } else if (textValue->IsNull()) {
        impl.setTextToNull();
    } else {
        V8StringResource<> text = textValue;
        if (!text.prepare(exceptionState))
            return;
        impl.setText(text);
    }

    v8::Local<v8::Value> titleValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "title")).ToLocal(&titleValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (titleValue.IsEmpty() || titleValue->IsUndefined()) {
        // Do nothing.
    } else if (titleValue->IsNull()) {
        impl.setTitleToNull();
    } else {
        V8StringResource<> title = titleValue;
        if (!title.prepare(exceptionState))
            return;
        impl.setTitle(title);
    }

    v8::Local<v8::Value> urlValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "url")).ToLocal(&urlValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (urlValue.IsEmpty() || urlValue->IsUndefined()) {
        // Do nothing.
    } else if (urlValue->IsNull()) {
        impl.setURLToNull();
    } else {
        V8StringResource<> url = urlValue;
        if (!url.prepare(exceptionState))
            return;
        impl.setURL(url);
    }
}

v8::Local<v8::Value> ShareData::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8ShareData(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8ShareData(const ShareData& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasText()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "text"), v8String(isolate, impl.text()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "text"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasTitle()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "title"), v8String(isolate, impl.title()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "title"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasURL()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "url"), v8String(isolate, impl.url()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "url"), v8::Null(isolate))))
            return false;
    }

    return true;
}

ShareData NativeValueTraits<ShareData>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    ShareData impl;
    V8ShareData::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
