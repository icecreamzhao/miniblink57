// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8SubtleCrypto.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8ArrayBuffer.h"
#include "bindings/core/v8/V8ArrayBufferView.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/ArrayBufferOrArrayBufferViewOrDictionary.h"
#include "bindings/modules/v8/DictionaryOrString.h"
#include "bindings/modules/v8/V8CryptoKey.h"
#include "core/dom/Document.h"
#include "core/dom/FlexibleArrayBufferView.h"
#include "core/frame/UseCounter.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8SubtleCrypto::wrapperTypeInfo = { gin::kEmbedderBlink, V8SubtleCrypto::domTemplate, V8SubtleCrypto::trace, V8SubtleCrypto::traceWrappers, 0, nullptr, "SubtleCrypto", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromActiveScriptWrappable, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in SubtleCrypto.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& SubtleCrypto::s_wrapperTypeInfo = V8SubtleCrypto::wrapperTypeInfo;

// not [ActiveScriptWrappable]
static_assert(
    !std::is_base_of<ActiveScriptWrappableBase, SubtleCrypto>::value,
    "SubtleCrypto inherits from ActiveScriptWrappable<>, but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    std::is_same<decltype(&SubtleCrypto::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "SubtleCrypto is overriding hasPendingActivity(), but is not specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace SubtleCryptoV8Internal {

    static void encryptMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "encrypt");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        CryptoKey* key;
        ArrayBufferOrArrayBufferView data;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        key = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!key) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[2], data, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->encrypt(scriptState, algorithm, key, data);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void encryptMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoEncrypt);
        SubtleCryptoV8Internal::encryptMethod(info);
    }

    static void decryptMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "decrypt");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        CryptoKey* key;
        ArrayBufferOrArrayBufferView data;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        key = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!key) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[2], data, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->decrypt(scriptState, algorithm, key, data);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void decryptMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoDecrypt);
        SubtleCryptoV8Internal::decryptMethod(info);
    }

    static void signMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "sign");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        CryptoKey* key;
        ArrayBufferOrArrayBufferView data;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        key = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!key) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[2], data, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->sign(scriptState, algorithm, key, data);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void signMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoSign);
        SubtleCryptoV8Internal::signMethod(info);
    }

    static void verifyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "verify");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 4)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(4, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        CryptoKey* key;
        ArrayBufferOrArrayBufferView signature;
        ArrayBufferOrArrayBufferView data;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        key = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!key) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[2], signature, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[3], data, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->verifySignature(scriptState, algorithm, key, signature, data);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void verifyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoVerify);
        SubtleCryptoV8Internal::verifyMethod(info);
    }

    static void digestMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "digest");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        ArrayBufferOrArrayBufferView data;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[1], data, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->digest(scriptState, algorithm, data);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void digestMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoDigest);
        SubtleCryptoV8Internal::digestMethod(info);
    }

    static void generateKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "generateKey");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        bool extractable;
        Vector<String> keyUsages;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        extractable = toBoolean(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        keyUsages = toImplArray<Vector<String>>(info[2], 3, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->generateKey(scriptState, algorithm, extractable, keyUsages);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void generateKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoGenerateKey);
        SubtleCryptoV8Internal::generateKeyMethod(info);
    }

    static void importKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "importKey");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 5)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(5, info.Length()));
            return;
        }

        V8StringResource<> format;
        ArrayBufferOrArrayBufferViewOrDictionary keyData;
        DictionaryOrString algorithm;
        bool extractable;
        Vector<String> keyUsages;
        format = info[0];
        if (!format.prepare(exceptionState))
            return;

        V8ArrayBufferOrArrayBufferViewOrDictionary::toImpl(info.GetIsolate(), info[1], keyData, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        V8DictionaryOrString::toImpl(info.GetIsolate(), info[2], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        extractable = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.hadException())
            return;

        keyUsages = toImplArray<Vector<String>>(info[4], 5, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->importKey(scriptState, format, keyData, algorithm, extractable, keyUsages);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void importKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoImportKey);
        SubtleCryptoV8Internal::importKeyMethod(info);
    }

    static void exportKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "exportKey");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 2)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(2, info.Length()));
            return;
        }

        V8StringResource<> format;
        CryptoKey* key;
        format = info[0];
        if (!format.prepare(exceptionState))
            return;

        key = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!key) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        ScriptPromise result = impl->exportKey(scriptState, format, key);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void exportKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoExportKey);
        SubtleCryptoV8Internal::exportKeyMethod(info);
    }

    static void deriveBitsMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "deriveBits");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 3)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        CryptoKey* baseKey;
        unsigned length;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        baseKey = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!baseKey) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        length = toUInt32(info.GetIsolate(), info[2], NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->deriveBits(scriptState, algorithm, baseKey, length);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void deriveBitsMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoDeriveBits);
        SubtleCryptoV8Internal::deriveBitsMethod(info);
    }

    static void deriveKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "deriveKey");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 5)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(5, info.Length()));
            return;
        }

        DictionaryOrString algorithm;
        CryptoKey* baseKey;
        DictionaryOrString derivedKeyType;
        bool extractable;
        Vector<String> keyUsages;
        V8DictionaryOrString::toImpl(info.GetIsolate(), info[0], algorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        baseKey = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!baseKey) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        V8DictionaryOrString::toImpl(info.GetIsolate(), info[2], derivedKeyType, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        extractable = toBoolean(info.GetIsolate(), info[3], exceptionState);
        if (exceptionState.hadException())
            return;

        keyUsages = toImplArray<Vector<String>>(info[4], 5, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->deriveKey(scriptState, algorithm, baseKey, derivedKeyType, extractable, keyUsages);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void deriveKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoDeriveKey);
        SubtleCryptoV8Internal::deriveKeyMethod(info);
    }

    static void wrapKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "wrapKey");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 4)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(4, info.Length()));
            return;
        }

        V8StringResource<> format;
        CryptoKey* key;
        CryptoKey* wrappingKey;
        DictionaryOrString wrapAlgorithm;
        format = info[0];
        if (!format.prepare(exceptionState))
            return;

        key = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[1]);
        if (!key) {
            exceptionState.throwTypeError("parameter 2 is not of type 'CryptoKey'.");

            return;
        }

        wrappingKey = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[2]);
        if (!wrappingKey) {
            exceptionState.throwTypeError("parameter 3 is not of type 'CryptoKey'.");

            return;
        }

        V8DictionaryOrString::toImpl(info.GetIsolate(), info[3], wrapAlgorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->wrapKey(scriptState, format, key, wrappingKey, wrapAlgorithm);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void wrapKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoWrapKey);
        SubtleCryptoV8Internal::wrapKeyMethod(info);
    }

    static void unwrapKeyMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "SubtleCrypto", "unwrapKey");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8SubtleCrypto::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        SubtleCrypto* impl = V8SubtleCrypto::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 7)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(7, info.Length()));
            return;
        }

        V8StringResource<> format;
        ArrayBufferOrArrayBufferView wrappedKey;
        CryptoKey* unwrappingKey;
        DictionaryOrString unwrapAlgorithm;
        DictionaryOrString unwrappedKeyAlgorithm;
        bool extractable;
        Vector<String> keyUsages;
        format = info[0];
        if (!format.prepare(exceptionState))
            return;

        V8ArrayBufferOrArrayBufferView::toImpl(info.GetIsolate(), info[1], wrappedKey, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        unwrappingKey = V8CryptoKey::toImplWithTypeCheck(info.GetIsolate(), info[2]);
        if (!unwrappingKey) {
            exceptionState.throwTypeError("parameter 3 is not of type 'CryptoKey'.");

            return;
        }

        V8DictionaryOrString::toImpl(info.GetIsolate(), info[3], unwrapAlgorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        V8DictionaryOrString::toImpl(info.GetIsolate(), info[4], unwrappedKeyAlgorithm, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        extractable = toBoolean(info.GetIsolate(), info[5], exceptionState);
        if (exceptionState.hadException())
            return;

        keyUsages = toImplArray<Vector<String>>(info[6], 7, info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->unwrapKey(scriptState, format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void unwrapKeyMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::SubtleCryptoUnwrapKey);
        SubtleCryptoV8Internal::unwrapKeyMethod(info);
    }

} // namespace SubtleCryptoV8Internal

const V8DOMConfiguration::MethodConfiguration V8SubtleCryptoMethods[] = {
    { "encrypt", SubtleCryptoV8Internal::encryptMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "decrypt", SubtleCryptoV8Internal::decryptMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "sign", SubtleCryptoV8Internal::signMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "verify", SubtleCryptoV8Internal::verifyMethodCallback, 0, 4, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "digest", SubtleCryptoV8Internal::digestMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "generateKey", SubtleCryptoV8Internal::generateKeyMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "importKey", SubtleCryptoV8Internal::importKeyMethodCallback, 0, 5, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "exportKey", SubtleCryptoV8Internal::exportKeyMethodCallback, 0, 2, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "deriveBits", SubtleCryptoV8Internal::deriveBitsMethodCallback, 0, 3, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "deriveKey", SubtleCryptoV8Internal::deriveKeyMethodCallback, 0, 5, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "wrapKey", SubtleCryptoV8Internal::wrapKeyMethodCallback, 0, 4, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
    { "unwrapKey", SubtleCryptoV8Internal::unwrapKeyMethodCallback, 0, 7, v8::None, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::DoNotCheckHolder },
};

static void installV8SubtleCryptoTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8SubtleCrypto::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8SubtleCrypto::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8SubtleCryptoMethods, WTF_ARRAY_LENGTH(V8SubtleCryptoMethods));
}

v8::Local<v8::FunctionTemplate> V8SubtleCrypto::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8SubtleCryptoTemplate);
}

bool V8SubtleCrypto::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8SubtleCrypto::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

SubtleCrypto* V8SubtleCrypto::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
