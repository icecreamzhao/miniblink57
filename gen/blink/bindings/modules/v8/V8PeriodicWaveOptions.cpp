// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8PeriodicWaveOptions.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8PeriodicWaveConstraints.h"

namespace blink {

void V8PeriodicWaveOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PeriodicWaveOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    V8PeriodicWaveConstraints::toImpl(isolate, v8Value, impl, exceptionState);
    if (exceptionState.hadException())
        return;

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> imagValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "imag")).ToLocal(&imagValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (imagValue.IsEmpty() || imagValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<float> imag = toImplArray<Vector<float>>(imagValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setImag(imag);
    }

    v8::Local<v8::Value> realValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "real")).ToLocal(&realValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (realValue.IsEmpty() || realValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<float> real = toImplArray<Vector<float>>(realValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setReal(real);
    }
}

v8::Local<v8::Value> PeriodicWaveOptions::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PeriodicWaveOptions(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8PeriodicWaveOptions(const PeriodicWaveOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!toV8PeriodicWaveConstraints(impl, dictionary, creationContext, isolate))
        return false;

    if (impl.hasImag()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imag"), ToV8(impl.imag(), creationContext, isolate))))
            return false;
    }

    if (impl.hasReal()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "real"), ToV8(impl.real(), creationContext, isolate))))
            return false;
    }

    return true;
}

PeriodicWaveOptions NativeValueTraits<PeriodicWaveOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PeriodicWaveOptions impl;
    V8PeriodicWaveOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
