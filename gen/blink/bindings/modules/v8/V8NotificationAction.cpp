// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8NotificationAction.h"

#include "bindings/core/v8/ExceptionState.h"
#include "platform/RuntimeEnabledFeatures.h"

namespace blink {

void V8NotificationAction::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, NotificationAction& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        exceptionState.throwTypeError("Missing required member(s): action, title.");
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> actionValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "action")).ToLocal(&actionValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (actionValue.IsEmpty() || actionValue->IsUndefined()) {
        exceptionState.throwTypeError("required member action is undefined.");
        return;
    } else {
        V8StringResource<> action = actionValue;
        if (!action.prepare(exceptionState))
            return;
        impl.setAction(action);
    }

    v8::Local<v8::Value> iconValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "icon")).ToLocal(&iconValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (iconValue.IsEmpty() || iconValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> icon = toUSVString(isolate, iconValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setIcon(icon);
    }

    if (RuntimeEnabledFeatures::notificationInlineRepliesEnabled()) {
        v8::Local<v8::Value> placeholderValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "placeholder")).ToLocal(&placeholderValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (placeholderValue.IsEmpty() || placeholderValue->IsUndefined()) {
            // Do nothing.
        } else if (placeholderValue->IsNull()) {
            impl.setPlaceholderToNull();
        } else {
            V8StringResource<> placeholder = placeholderValue;
            if (!placeholder.prepare(exceptionState))
                return;
            impl.setPlaceholder(placeholder);
        }
    }

    v8::Local<v8::Value> titleValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "title")).ToLocal(&titleValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (titleValue.IsEmpty() || titleValue->IsUndefined()) {
        exceptionState.throwTypeError("required member title is undefined.");
        return;
    } else {
        V8StringResource<> title = titleValue;
        if (!title.prepare(exceptionState))
            return;
        impl.setTitle(title);
    }

    if (RuntimeEnabledFeatures::notificationInlineRepliesEnabled()) {
        v8::Local<v8::Value> typeValue;
        if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "type")).ToLocal(&typeValue)) {
            exceptionState.rethrowV8Exception(block.Exception());
            return;
        }
        if (typeValue.IsEmpty() || typeValue->IsUndefined()) {
            // Do nothing.
        } else {
            V8StringResource<> type = typeValue;
            if (!type.prepare(exceptionState))
                return;
            const char* validValues[] = {
                "button",
                "text",
                "None",
            };
            if (!isValidEnum(type, validValues, WTF_ARRAY_LENGTH(validValues), "NotificationActionType", exceptionState))
                return;
            impl.setType(type);
        }
    }
}

v8::Local<v8::Value> NotificationAction::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8NotificationAction(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8NotificationAction(const NotificationAction& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasAction()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "action"), v8String(isolate, impl.action()))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasIcon()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "icon"), v8String(isolate, impl.icon()))))
            return false;
    }

    if (impl.hasPlaceholder()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "placeholder"), v8String(isolate, impl.placeholder()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "placeholder"), v8::Null(isolate))))
            return false;
    }

    if (impl.hasTitle()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "title"), v8String(isolate, impl.title()))))
            return false;
    } else {
        NOTREACHED();
    }

    if (impl.hasType()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "type"), v8String(isolate, impl.type()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "type"), v8String(isolate, String("button")))))
            return false;
    }

    return true;
}

NotificationAction NativeValueTraits<NotificationAction>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    NotificationAction impl;
    V8NotificationAction::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
