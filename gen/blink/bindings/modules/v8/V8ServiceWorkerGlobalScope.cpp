// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl

// clang-format on
#include "V8ServiceWorkerGlobalScope.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/GeneratedCodeHelper.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8AbstractEventListener.h"
#include "bindings/core/v8/V8Blob.h"
#include "bindings/core/v8/V8CustomEvent.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8DOMException.h"
#include "bindings/core/v8/V8DOMMatrix.h"
#include "bindings/core/v8/V8DOMMatrixReadOnly.h"
#include "bindings/core/v8/V8DOMStringList.h"
#include "bindings/core/v8/V8Event.h"
#include "bindings/core/v8/V8EventListenerHelper.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/core/v8/V8File.h"
#include "bindings/core/v8/V8FileList.h"
#include "bindings/core/v8/V8FileReader.h"
#include "bindings/core/v8/V8FileReaderSync.h"
#include "bindings/core/v8/V8Float32ImageData.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ImageBitmap.h"
#include "bindings/core/v8/V8ImageData.h"
#include "bindings/core/v8/V8MessageChannel.h"
#include "bindings/core/v8/V8MessageEvent.h"
#include "bindings/core/v8/V8MessagePort.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8OffscreenCanvas.h"
#include "bindings/core/v8/V8PerformanceObserverEntryList.h"
#include "bindings/core/v8/V8PromiseRejectionEvent.h"
#include "bindings/core/v8/V8URL.h"
#include "bindings/core/v8/V8URLSearchParams.h"
#include "bindings/core/v8/V8WorkerGlobalScope.h"
#include "bindings/core/v8/V8WorkerLocation.h"
#include "bindings/core/v8/V8WorkerNavigator.h"
#include "bindings/modules/v8/V8BarcodeDetector.h"
#include "bindings/modules/v8/V8BroadcastChannel.h"
#include "bindings/modules/v8/V8BudgetService.h"
#include "bindings/modules/v8/V8BudgetState.h"
#include "bindings/modules/v8/V8Cache.h"
#include "bindings/modules/v8/V8CacheStorage.h"
#include "bindings/modules/v8/V8CanvasGradient.h"
#include "bindings/modules/v8/V8CanvasPattern.h"
#include "bindings/modules/v8/V8Client.h"
#include "bindings/modules/v8/V8Clients.h"
#include "bindings/modules/v8/V8CloseEvent.h"
#include "bindings/modules/v8/V8Crypto.h"
#include "bindings/modules/v8/V8CryptoKey.h"
#include "bindings/modules/v8/V8EventSource.h"
#include "bindings/modules/v8/V8ExtendableEvent.h"
#include "bindings/modules/v8/V8ExtendableMessageEvent.h"
#include "bindings/modules/v8/V8FaceDetector.h"
#include "bindings/modules/v8/V8FetchEvent.h"
#include "bindings/modules/v8/V8ForeignFetchEvent.h"
#include "bindings/modules/v8/V8Headers.h"
#include "bindings/modules/v8/V8IDBCursor.h"
#include "bindings/modules/v8/V8IDBCursorWithValue.h"
#include "bindings/modules/v8/V8IDBDatabase.h"
#include "bindings/modules/v8/V8IDBFactory.h"
#include "bindings/modules/v8/V8IDBIndex.h"
#include "bindings/modules/v8/V8IDBKeyRange.h"
#include "bindings/modules/v8/V8IDBObjectStore.h"
#include "bindings/modules/v8/V8IDBObservation.h"
#include "bindings/modules/v8/V8IDBObserver.h"
#include "bindings/modules/v8/V8IDBOpenDBRequest.h"
#include "bindings/modules/v8/V8IDBRequest.h"
#include "bindings/modules/v8/V8IDBTransaction.h"
#include "bindings/modules/v8/V8IDBVersionChangeEvent.h"
#include "bindings/modules/v8/V8InstallEvent.h"
#include "bindings/modules/v8/V8NavigationPreloadManager.h"
#include "bindings/modules/v8/V8NetworkInformation.h"
#include "bindings/modules/v8/V8Notification.h"
#include "bindings/modules/v8/V8NotificationEvent.h"
#include "bindings/modules/v8/V8OffscreenCanvasRenderingContext2D.h"
#include "bindings/modules/v8/V8Path2D.h"
#include "bindings/modules/v8/V8PaymentRequestEvent.h"
#include "bindings/modules/v8/V8PermissionStatus.h"
#include "bindings/modules/v8/V8Permissions.h"
#include "bindings/modules/v8/V8PushEvent.h"
#include "bindings/modules/v8/V8PushManager.h"
#include "bindings/modules/v8/V8PushMessageData.h"
#include "bindings/modules/v8/V8PushSubscription.h"
#include "bindings/modules/v8/V8PushSubscriptionOptions.h"
#include "bindings/modules/v8/V8Request.h"
#include "bindings/modules/v8/V8Response.h"
#include "bindings/modules/v8/V8ServiceWorkerGlobalScope.h"
#include "bindings/modules/v8/V8ServiceWorkerRegistration.h"
#include "bindings/modules/v8/V8StorageManager.h"
#include "bindings/modules/v8/V8SubtleCrypto.h"
#include "bindings/modules/v8/V8SyncEvent.h"
#include "bindings/modules/v8/V8SyncManager.h"
#include "bindings/modules/v8/V8TextDecoder.h"
#include "bindings/modules/v8/V8TextDetector.h"
#include "bindings/modules/v8/V8TextEncoder.h"
#include "bindings/modules/v8/V8WebGL2RenderingContext.h"
#include "bindings/modules/v8/V8WebGLRenderingContext.h"
#include "bindings/modules/v8/V8WebSocket.h"
#include "bindings/modules/v8/V8WindowClient.h"
#include "core/dom/Document.h"
#include "core/origin_trials/OriginTrials.h"
#include "modules/ServiceWorkerGlobalScopeCoreConstructors.h"
#include "modules/ServiceWorkerGlobalScopeModulesConstructors.h"
#include "modules/background_sync/ServiceWorkerGlobalScopeSync.h"
#include "modules/cachestorage/GlobalCacheStorage.h"
#include "modules/crypto/WorkerGlobalScopeCrypto.h"
#include "modules/fetch/GlobalFetch.h"
#include "modules/indexeddb/GlobalIndexedDB.h"
#include "modules/notifications/ServiceWorkerGlobalScopeNotifications.h"
#include "modules/payments/PaymentAppServiceWorkerGlobalScope.h"
#include "modules/push_messaging/ServiceWorkerGlobalScopePush.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8ServiceWorkerGlobalScope::wrapperTypeInfo = { gin::kEmbedderBlink, V8ServiceWorkerGlobalScope::domTemplate, V8ServiceWorkerGlobalScope::trace, V8ServiceWorkerGlobalScope::traceWrappers, 0, nullptr, "ServiceWorkerGlobalScope", &V8WorkerGlobalScope::wrapperTypeInfo, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::InheritFromActiveScriptWrappable, WrapperTypeInfo::InheritFromEventTarget, WrapperTypeInfo::Dependent };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in ServiceWorkerGlobalScope.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& ServiceWorkerGlobalScope::s_wrapperTypeInfo = V8ServiceWorkerGlobalScope::wrapperTypeInfo;

// [ActiveScriptWrappable]
static_assert(
    std::is_base_of<ActiveScriptWrappableBase, ServiceWorkerGlobalScope>::value,
    "ServiceWorkerGlobalScope does not inherit from ActiveScriptWrappable<>, but specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");
static_assert(
    !std::is_same<decltype(&ServiceWorkerGlobalScope::hasPendingActivity),
        decltype(&ScriptWrappable::hasPendingActivity)>::value,
    "ServiceWorkerGlobalScope is not overriding hasPendingActivity(), but is specifying "
    "[ActiveScriptWrappable] extended attribute in the IDL file.  "
    "Be consistent.");

namespace ServiceWorkerGlobalScopeV8Internal {

    static void clientsAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        ServiceWorkerClients* cppValue(WTF::getPtr(impl->clients()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerGlobalScope#clients";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void clientsAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::clientsAttributeGetter(info);
    }

    static void registrationAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        ServiceWorkerRegistration* cppValue(WTF::getPtr(impl->registration()));

        // Keep the wrapper object for the return value alive as long as |this|
        // object is alive in order to save creation time of the wrapper object.
        if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue))
            return;
        v8::Local<v8::Value> v8Value(ToV8(cppValue, holder, info.GetIsolate()));
        const char kKeepAliveKey[] = "KeepAlive#ServiceWorkerGlobalScope#registration";
        V8HiddenValue::setHiddenValue(ScriptState::current(info.GetIsolate()), holder, v8AtomicString(info.GetIsolate(), StringView(kKeepAliveKey, sizeof kKeepAliveKey)), v8Value);

        v8SetReturnValue(info, v8Value);
    }

    MODULES_EXPORT void registrationAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::registrationAttributeGetter(info);
    }

    static void onactivateAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onactivate()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onactivateAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onactivateAttributeGetter(info);
    }

    static void onactivateAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onactivate(), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        impl->setOnactivate(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onactivateAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onactivateAttributeSetter(v8Value, info);
    }

    static void onfetchAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onfetch()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onfetchAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onfetchAttributeGetter(info);
    }

    static void onfetchAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onfetch(), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        impl->setOnfetch(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onfetchAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onfetchAttributeSetter(v8Value, info);
    }

    static void oninstallAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->oninstall()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void oninstallAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::oninstallAttributeGetter(info);
    }

    static void oninstallAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->oninstall(), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        impl->setOninstall(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void oninstallAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::oninstallAttributeSetter(v8Value, info);
    }

    static void onmessageAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onmessage()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onmessageAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onmessageAttributeGetter(info);
    }

    static void onmessageAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onmessage(), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        impl->setOnmessage(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onmessageAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onmessageAttributeSetter(v8Value, info);
    }

    static void onforeignfetchAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(WTF::getPtr(impl->onforeignfetch()));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onforeignfetchAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onforeignfetchAttributeGetter(info);
    }

    static void onforeignfetchAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, impl->onforeignfetch(), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        impl->setOnforeignfetch(V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onforeignfetchAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onforeignfetchAttributeSetter(v8Value, info);
    }

    static void onsyncAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(ServiceWorkerGlobalScopeSync::onsync(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onsyncAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onsyncAttributeGetter(info);
    }

    static void onsyncAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, ServiceWorkerGlobalScopeSync::onsync(*impl), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        ServiceWorkerGlobalScopeSync::setOnsync(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onsyncAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onsyncAttributeSetter(v8Value, info);
    }

    static void onnotificationclickAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(ServiceWorkerGlobalScopeNotifications::onnotificationclick(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onnotificationclickAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onnotificationclickAttributeGetter(info);
    }

    static void onnotificationclickAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, ServiceWorkerGlobalScopeNotifications::onnotificationclick(*impl), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        ServiceWorkerGlobalScopeNotifications::setOnnotificationclick(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onnotificationclickAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onnotificationclickAttributeSetter(v8Value, info);
    }

    static void onnotificationcloseAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(ServiceWorkerGlobalScopeNotifications::onnotificationclose(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onnotificationcloseAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onnotificationcloseAttributeGetter(info);
    }

    static void onnotificationcloseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, ServiceWorkerGlobalScopeNotifications::onnotificationclose(*impl), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        ServiceWorkerGlobalScopeNotifications::setOnnotificationclose(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onnotificationcloseAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onnotificationcloseAttributeSetter(v8Value, info);
    }

    static void onpaymentrequestAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(PaymentAppServiceWorkerGlobalScope::onpaymentrequest(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onpaymentrequestAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onpaymentrequestAttributeGetter(info);
    }

    static void onpaymentrequestAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, PaymentAppServiceWorkerGlobalScope::onpaymentrequest(*impl), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        PaymentAppServiceWorkerGlobalScope::setOnpaymentrequest(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onpaymentrequestAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onpaymentrequestAttributeSetter(v8Value, info);
    }

    static void onpushAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();

        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        EventListener* cppValue(ServiceWorkerGlobalScopePush::onpush(*impl));

        v8SetReturnValue(info, cppValue ? V8AbstractEventListener::cast(cppValue)->getListenerOrNull(info.GetIsolate(), impl->getExecutionContext()) : v8::Null(info.GetIsolate()).As<v8::Value>());
    }

    MODULES_EXPORT void onpushAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::onpushAttributeGetter(info);
    }

    static void onpushAttributeSetter(v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Object> holder = info.Holder();
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(holder);

        // Prepare the value to be set.
        moveEventListenerToNewWrapper(info.GetIsolate(), holder, ServiceWorkerGlobalScopePush::onpush(*impl), v8Value, V8ServiceWorkerGlobalScope::eventListenerCacheIndex);

        ServiceWorkerGlobalScopePush::setOnpush(*impl, V8EventListenerHelper::getEventListener(ScriptState::forReceiverObject(info), v8Value, true, ListenerFindOrCreate));
    }

    MODULES_EXPORT void onpushAttributeSetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        v8::Local<v8::Value> v8Value = info[0];

        ServiceWorkerGlobalScopeV8Internal::onpushAttributeSetter(v8Value, info);
    }

    static void fetchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "ServiceWorkerGlobalScope", "fetch");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8ServiceWorkerGlobalScope::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        if (UNLIKELY(info.Length() < 1)) {
            exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(1, info.Length()));
            return;
        }

        RequestOrUSVString input;
        Dictionary init;
        V8RequestOrUSVString::toImpl(info.GetIsolate(), info[0], input, UnionTypeConversionMode::NotNullable, exceptionState);
        if (exceptionState.hadException())
            return;

        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('init') is not an object.");

            return;
        }
        init = Dictionary(info.GetIsolate(), info[1], exceptionState);
        if (exceptionState.hadException())
            return;

        ScriptPromise result = impl->fetch(scriptState, input, init, exceptionState);
        if (exceptionState.hadException()) {
            return;
        }
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void fetchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::fetchMethod(info);
    }

    static void skipWaitingMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "ServiceWorkerGlobalScope", "skipWaiting");
        ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);

        // V8DOMConfiguration::DoNotCheckHolder
        // Make sure that info.Holder() really points to an instance of the type.
        if (!V8ServiceWorkerGlobalScope::hasInstance(info.Holder(), info.GetIsolate())) {
            exceptionState.throwTypeError("Illegal invocation");
            return;
        }
        ServiceWorkerGlobalScope* impl = V8ServiceWorkerGlobalScope::toImpl(info.Holder());

        ScriptState* scriptState = ScriptState::forReceiverObject(info);

        ScriptPromise result = impl->skipWaiting(scriptState);
        v8SetReturnValue(info, result.v8Value());
    }

    MODULES_EXPORT void skipWaitingMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
    {
        ServiceWorkerGlobalScopeV8Internal::skipWaitingMethod(info);
    }

} // namespace ServiceWorkerGlobalScopeV8Internal

// Suppress warning: global constructors, because AttributeConfiguration is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const V8DOMConfiguration::AttributeConfiguration V8ServiceWorkerGlobalScopeLazyDataAttributes[] = {
    { "Blob", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Blob::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CustomEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CustomEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMException", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMException::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "DOMStringList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMStringList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Event", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Event::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "EventTarget", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8EventTarget::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "File", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8File::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FileList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FileList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FileReader", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FileReader::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FileReaderSync", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FileReaderSync::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FormData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FormData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ImageBitmap", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ImageBitmap::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ImageData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ImageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MessageChannel", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MessageChannel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MessageEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MessageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "MessagePort", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8MessagePort::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PromiseRejectionEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PromiseRejectionEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "URL", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8URL::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "URLSearchParams", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8URLSearchParams::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WorkerGlobalScope", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WorkerGlobalScope::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WorkerLocation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WorkerLocation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WorkerNavigator", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WorkerNavigator::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Cache", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Cache::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CacheStorage", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CacheStorage::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Client", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Client::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Clients", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Clients::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CloseEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CloseEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Crypto", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Crypto::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "CryptoKey", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CryptoKey::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "EventSource", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8EventSource::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ExtendableEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ExtendableEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ExtendableMessageEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ExtendableMessageEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "FetchEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FetchEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Headers", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Headers::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBCursor", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBCursor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBCursorWithValue", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBCursorWithValue::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBDatabase", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBDatabase::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBFactory", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBFactory::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBIndex", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBIndex::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBKeyRange", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBKeyRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBObjectStore", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBObjectStore::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBOpenDBRequest", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBOpenDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBRequest", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBTransaction", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBTransaction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "IDBVersionChangeEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBVersionChangeEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "InstallEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8InstallEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "PushMessageData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PushMessageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Request", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Request::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "Response", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Response::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ServiceWorkerGlobalScope", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ServiceWorkerGlobalScope::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "ServiceWorkerRegistration", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ServiceWorkerRegistration::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "SubtleCrypto", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SubtleCrypto::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextDecoder", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextDecoder::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "TextEncoder", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextEncoder::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WebSocket", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WebSocket::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "WindowClient", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WindowClient::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
};
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

const V8DOMConfiguration::AccessorConfiguration V8ServiceWorkerGlobalScopeAccessors[] = {
    { "clients", ServiceWorkerGlobalScopeV8Internal::clientsAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "registration", ServiceWorkerGlobalScopeV8Internal::registrationAttributeGetterCallback, 0, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onactivate", ServiceWorkerGlobalScopeV8Internal::onactivateAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onactivateAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onfetch", ServiceWorkerGlobalScopeV8Internal::onfetchAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onfetchAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "oninstall", ServiceWorkerGlobalScopeV8Internal::oninstallAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::oninstallAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
    { "onmessage", ServiceWorkerGlobalScopeV8Internal::onmessageAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onmessageAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder },
};

const V8DOMConfiguration::MethodConfiguration V8ServiceWorkerGlobalScopeMethods[] = {
    { "fetch", ServiceWorkerGlobalScopeV8Internal::fetchMethodCallback, 0, 1, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::DoNotCheckHolder },
    { "skipWaiting", ServiceWorkerGlobalScopeV8Internal::skipWaitingMethodCallback, 0, 0, v8::None, V8DOMConfiguration::OnInstance, V8DOMConfiguration::DoNotCheckHolder },
};

static void installV8ServiceWorkerGlobalScopeTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8ServiceWorkerGlobalScope::wrapperTypeInfo.interfaceName, V8WorkerGlobalScope::domTemplate(isolate, world), V8ServiceWorkerGlobalScope::internalFieldCount);

    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);

    // Global object prototype chain consists of Immutable Prototype Exotic Objects
    prototypeTemplate->SetImmutableProto();

    // Global objects are Immutable Prototype Exotic Objects
    instanceTemplate->SetImmutableProto();

    // Register DOM constants, attributes and operations.
    V8DOMConfiguration::installLazyDataAttributes(isolate, world, instanceTemplate, prototypeTemplate, V8ServiceWorkerGlobalScopeLazyDataAttributes, WTF_ARRAY_LENGTH(V8ServiceWorkerGlobalScopeLazyDataAttributes));
    V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ServiceWorkerGlobalScopeAccessors, WTF_ARRAY_LENGTH(V8ServiceWorkerGlobalScopeAccessors));
    V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ServiceWorkerGlobalScopeMethods, WTF_ARRAY_LENGTH(V8ServiceWorkerGlobalScopeMethods));

    if (RuntimeEnabledFeatures::backgroundSyncEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeSyncEventConfiguration = { "SyncEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SyncEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeSyncEventConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeSyncManagerConfiguration = { "SyncManager", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8SyncManager::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeSyncManagerConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronsyncConfiguration = { "onsync", ServiceWorkerGlobalScopeV8Internal::onsyncAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onsyncAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronsyncConfiguration);
    }
    if (RuntimeEnabledFeatures::broadcastChannelEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeBroadcastChannelConfiguration = { "BroadcastChannel", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8BroadcastChannel::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeBroadcastChannelConfiguration);
    }
    if (RuntimeEnabledFeatures::budgetEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeBudgetServiceConfiguration = { "BudgetService", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8BudgetService::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeBudgetServiceConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeBudgetStateConfiguration = { "BudgetState", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8BudgetState::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeBudgetStateConfiguration);
    }
    if (RuntimeEnabledFeatures::durableStorageEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeStorageManagerConfiguration = { "StorageManager", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8StorageManager::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeStorageManagerConfiguration);
    }
    if (RuntimeEnabledFeatures::experimentalCanvasFeaturesEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeCanvasGradientConfiguration = { "CanvasGradient", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CanvasGradient::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCanvasGradientConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeCanvasPatternConfiguration = { "CanvasPattern", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8CanvasPattern::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeCanvasPatternConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeFloat32ImageDataConfiguration = { "Float32ImageData", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Float32ImageData::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeFloat32ImageDataConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeOffscreenCanvasConfiguration = { "OffscreenCanvas", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8OffscreenCanvas::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeOffscreenCanvasConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeOffscreenCanvasRenderingContext2DConfiguration = { "OffscreenCanvasRenderingContext2D", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8OffscreenCanvasRenderingContext2D::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeOffscreenCanvasRenderingContext2DConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePath2DConfiguration = { "Path2D", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Path2D::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePath2DConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeWebGL2RenderingContextConfiguration = { "WebGL2RenderingContext", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WebGL2RenderingContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeWebGL2RenderingContextConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeWebGLRenderingContextConfiguration = { "WebGLRenderingContext", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8WebGLRenderingContext::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeWebGLRenderingContextConfiguration);
    }
    if (RuntimeEnabledFeatures::geometryInterfacesEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeDOMMatrixConfiguration = { "DOMMatrix", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMMatrix::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMMatrixConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeDOMMatrixReadOnlyConfiguration = { "DOMMatrixReadOnly", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8DOMMatrixReadOnly::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeDOMMatrixReadOnlyConfiguration);
    }
    if (RuntimeEnabledFeatures::iDBObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeIDBObservationConfiguration = { "IDBObservation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBObservation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeIDBObservationConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeIDBObserverConfiguration = { "IDBObserver", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8IDBObserver::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeIDBObserverConfiguration);
    }
    if (RuntimeEnabledFeatures::networkInformationEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeNetworkInformationConfiguration = { "NetworkInformation", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NetworkInformation::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeNetworkInformationConfiguration);
    }
    if (RuntimeEnabledFeatures::notificationsEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeNotificationConfiguration = { "Notification", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Notification::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeNotificationConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeNotificationEventConfiguration = { "NotificationEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NotificationEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeNotificationEventConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronnotificationclickConfiguration = { "onnotificationclick", ServiceWorkerGlobalScopeV8Internal::onnotificationclickAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onnotificationclickAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronnotificationclickConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronnotificationcloseConfiguration = { "onnotificationclose", ServiceWorkerGlobalScopeV8Internal::onnotificationcloseAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onnotificationcloseAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronnotificationcloseConfiguration);
    }
    if (RuntimeEnabledFeatures::paymentAppEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePaymentRequestEventConfiguration = { "PaymentRequestEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PaymentRequestEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePaymentRequestEventConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpaymentrequestConfiguration = { "onpaymentrequest", ServiceWorkerGlobalScopeV8Internal::onpaymentrequestAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onpaymentrequestAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpaymentrequestConfiguration);
    }
    if (RuntimeEnabledFeatures::performanceObserverEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePerformanceObserverEntryListConfiguration = { "PerformanceObserverEntryList", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PerformanceObserverEntryList::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePerformanceObserverEntryListConfiguration);
    }
    if (RuntimeEnabledFeatures::permissionsEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePermissionsConfiguration = { "Permissions", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8Permissions::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePermissionsConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePermissionStatusConfiguration = { "PermissionStatus", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PermissionStatus::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePermissionStatusConfiguration);
    }
    if (RuntimeEnabledFeatures::pushMessagingEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributePushEventConfiguration = { "PushEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PushEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePushEventConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePushManagerConfiguration = { "PushManager", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PushManager::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePushManagerConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePushSubscriptionConfiguration = { "PushSubscription", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PushSubscription::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePushSubscriptionConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributePushSubscriptionOptionsConfiguration = { "PushSubscriptionOptions", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8PushSubscriptionOptions::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributePushSubscriptionOptionsConfiguration);
        const V8DOMConfiguration::AccessorConfiguration accessoronpushConfiguration = { "onpush", ServiceWorkerGlobalScopeV8Internal::onpushAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onpushAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessoronpushConfiguration);
    }
    if (RuntimeEnabledFeatures::shapeDetectionEnabled()) {
        const V8DOMConfiguration::AttributeConfiguration attributeBarcodeDetectorConfiguration = { "BarcodeDetector", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8BarcodeDetector::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeBarcodeDetectorConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeFaceDetectorConfiguration = { "FaceDetector", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8FaceDetector::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeFaceDetectorConfiguration);
        const V8DOMConfiguration::AttributeConfiguration attributeTextDetectorConfiguration = { "TextDetector", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8TextDetector::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
        V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeTextDetectorConfiguration);
    }
}

void V8ServiceWorkerGlobalScope::installForeignFetch(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8ServiceWorkerGlobalScope::wrapperTypeInfo.domTemplate(isolate, world);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    const V8DOMConfiguration::AttributeConfiguration attributeForeignFetchEventConfiguration = { "ForeignFetchEvent", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8ForeignFetchEvent::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeForeignFetchEventConfiguration);
    const V8DOMConfiguration::AccessorConfiguration accessoronforeignfetchConfiguration = { "onforeignfetch", ServiceWorkerGlobalScopeV8Internal::onforeignfetchAttributeGetterCallback, ServiceWorkerGlobalScopeV8Internal::onforeignfetchAttributeSetterCallback, 0, 0, nullptr, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessoronforeignfetchConfiguration);
}

void V8ServiceWorkerGlobalScope::installForeignFetch(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8ServiceWorkerGlobalScope::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8ServiceWorkerGlobalScope::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    installForeignFetch(scriptState->isolate(), scriptState->world(), instance, prototype, interface);
}

void V8ServiceWorkerGlobalScope::installServiceWorkerNavigationPreload(v8::Isolate* isolate, const DOMWrapperWorld& world, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface)
{
    v8::Local<v8::FunctionTemplate> interfaceTemplate = V8ServiceWorkerGlobalScope::wrapperTypeInfo.domTemplate(isolate, world);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    const V8DOMConfiguration::AttributeConfiguration attributeNavigationPreloadManagerConfiguration = { "NavigationPreloadManager", v8ConstructorAttributeGetter, 0, 0, 0, nullptr, const_cast<WrapperTypeInfo*>(&V8NavigationPreloadManager::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder };
    V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeNavigationPreloadManagerConfiguration);
}

void V8ServiceWorkerGlobalScope::installServiceWorkerNavigationPreload(ScriptState* scriptState, v8::Local<v8::Object> instance)
{
    V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
    v8::Local<v8::Object> prototype = perContextData->prototypeForType(&V8ServiceWorkerGlobalScope::wrapperTypeInfo);
    v8::Local<v8::Function> interface = perContextData->constructorForType(&V8ServiceWorkerGlobalScope::wrapperTypeInfo);
    ALLOW_UNUSED_LOCAL(interface);
    installServiceWorkerNavigationPreload(scriptState->isolate(), scriptState->world(), instance, prototype, interface);
}

v8::Local<v8::FunctionTemplate> V8ServiceWorkerGlobalScope::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world)
{
    return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ServiceWorkerGlobalScopeTemplate);
}

bool V8ServiceWorkerGlobalScope::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8ServiceWorkerGlobalScope::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

ServiceWorkerGlobalScope* V8ServiceWorkerGlobalScope::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : nullptr;
}

} // namespace blink
