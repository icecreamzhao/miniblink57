// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8RTCConfiguration.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8RTCCertificate.h"
#include "bindings/modules/v8/V8RTCIceServer.h"

namespace blink {

void V8RTCConfiguration::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, RTCConfiguration& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> bundlePolicyValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "bundlePolicy")).ToLocal(&bundlePolicyValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (bundlePolicyValue.IsEmpty() || bundlePolicyValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> bundlePolicy = bundlePolicyValue;
        if (!bundlePolicy.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "balanced",
            "max-compat",
            "max-bundle",
        };
        if (!isValidEnum(bundlePolicy, validValues, WTF_ARRAY_LENGTH(validValues), "RTCBundlePolicy", exceptionState))
            return;
        impl.setBundlePolicy(bundlePolicy);
    }

    v8::Local<v8::Value> certificatesValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "certificates")).ToLocal(&certificatesValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (certificatesValue.IsEmpty() || certificatesValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<Member<RTCCertificate>> certificates = (toMemberNativeArray<RTCCertificate>(certificatesValue, 0, isolate, exceptionState));
        if (exceptionState.hadException())
            return;
        impl.setCertificates(certificates);
    }

    v8::Local<v8::Value> iceServersValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "iceServers")).ToLocal(&iceServersValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (iceServersValue.IsEmpty() || iceServersValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<RTCIceServer> iceServers = toImplArray<HeapVector<RTCIceServer>>(iceServersValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setIceServers(iceServers);
    }

    v8::Local<v8::Value> iceTransportPolicyValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "iceTransportPolicy")).ToLocal(&iceTransportPolicyValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (iceTransportPolicyValue.IsEmpty() || iceTransportPolicyValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> iceTransportPolicy = iceTransportPolicyValue;
        if (!iceTransportPolicy.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "none",
            "relay",
            "all",
        };
        if (!isValidEnum(iceTransportPolicy, validValues, WTF_ARRAY_LENGTH(validValues), "RTCIceTransportPolicy", exceptionState))
            return;
        impl.setIceTransportPolicy(iceTransportPolicy);
    }

    v8::Local<v8::Value> iceTransportsValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "iceTransports")).ToLocal(&iceTransportsValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (iceTransportsValue.IsEmpty() || iceTransportsValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> iceTransports = iceTransportsValue;
        if (!iceTransports.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "none",
            "relay",
            "all",
        };
        if (!isValidEnum(iceTransports, validValues, WTF_ARRAY_LENGTH(validValues), "RTCIceTransportPolicy", exceptionState))
            return;
        impl.setIceTransports(iceTransports);
    }

    v8::Local<v8::Value> rtcpMuxPolicyValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "rtcpMuxPolicy")).ToLocal(&rtcpMuxPolicyValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (rtcpMuxPolicyValue.IsEmpty() || rtcpMuxPolicyValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> rtcpMuxPolicy = rtcpMuxPolicyValue;
        if (!rtcpMuxPolicy.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "negotiate",
            "require",
        };
        if (!isValidEnum(rtcpMuxPolicy, validValues, WTF_ARRAY_LENGTH(validValues), "RTCRtcpMuxPolicy", exceptionState))
            return;
        impl.setRtcpMuxPolicy(rtcpMuxPolicy);
    }
}

v8::Local<v8::Value> RTCConfiguration::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8RTCConfiguration(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8RTCConfiguration(const RTCConfiguration& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasBundlePolicy()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "bundlePolicy"), v8String(isolate, impl.bundlePolicy()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "bundlePolicy"), v8String(isolate, String("balanced")))))
            return false;
    }

    if (impl.hasCertificates()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "certificates"), ToV8(impl.certificates(), creationContext, isolate))))
            return false;
    }

    if (impl.hasIceServers()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "iceServers"), ToV8(impl.iceServers(), creationContext, isolate))))
            return false;
    }

    if (impl.hasIceTransportPolicy()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "iceTransportPolicy"), v8String(isolate, impl.iceTransportPolicy()))))
            return false;
    }

    if (impl.hasIceTransports()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "iceTransports"), v8String(isolate, impl.iceTransports()))))
            return false;
    }

    if (impl.hasRtcpMuxPolicy()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rtcpMuxPolicy"), v8String(isolate, impl.rtcpMuxPolicy()))))
            return false;
    } else {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "rtcpMuxPolicy"), v8String(isolate, String("require")))))
            return false;
    }

    return true;
}

RTCConfiguration NativeValueTraits<RTCConfiguration>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    RTCConfiguration impl;
    V8RTCConfiguration::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
