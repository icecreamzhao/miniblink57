// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl

// clang-format on
#include "FormDataOrURLSearchParams.h"

#include "bindings/core/v8/FileOrUSVString.h"
#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/USVStringOrURLSearchParams.h"
#include "bindings/core/v8/V8FormData.h"
#include "bindings/core/v8/V8URLSearchParams.h"

namespace blink {

FormDataOrURLSearchParams::FormDataOrURLSearchParams()
    : m_type(SpecificTypeNone)
{
}

FormData* FormDataOrURLSearchParams::getAsFormData() const
{
    DCHECK(isFormData());
    return m_formData;
}

void FormDataOrURLSearchParams::setFormData(FormData* value)
{
    DCHECK(isNull());
    m_formData = value;
    m_type = SpecificTypeFormData;
}

FormDataOrURLSearchParams FormDataOrURLSearchParams::fromFormData(FormData* value)
{
    FormDataOrURLSearchParams container;
    container.setFormData(value);
    return container;
}

URLSearchParams* FormDataOrURLSearchParams::getAsURLSearchParams() const
{
    DCHECK(isURLSearchParams());
    return m_urlSearchParams;
}

void FormDataOrURLSearchParams::setURLSearchParams(URLSearchParams* value)
{
    DCHECK(isNull());
    m_urlSearchParams = value;
    m_type = SpecificTypeURLSearchParams;
}

FormDataOrURLSearchParams FormDataOrURLSearchParams::fromURLSearchParams(URLSearchParams* value)
{
    FormDataOrURLSearchParams container;
    container.setURLSearchParams(value);
    return container;
}

FormDataOrURLSearchParams::FormDataOrURLSearchParams(const FormDataOrURLSearchParams&) = default;
FormDataOrURLSearchParams::~FormDataOrURLSearchParams() = default;
FormDataOrURLSearchParams& FormDataOrURLSearchParams::operator=(const FormDataOrURLSearchParams&) = default;

DEFINE_TRACE(FormDataOrURLSearchParams)
{
    visitor->trace(m_formData);
    visitor->trace(m_urlSearchParams);
}

void V8FormDataOrURLSearchParams::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, FormDataOrURLSearchParams& impl, UnionTypeConversionMode conversionMode, ExceptionState& exceptionState)
{
    if (v8Value.IsEmpty())
        return;

    if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
        return;

    if (V8FormData::hasInstance(v8Value, isolate)) {
        FormData* cppValue = V8FormData::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setFormData(cppValue);
        return;
    }

    if (V8URLSearchParams::hasInstance(v8Value, isolate)) {
        URLSearchParams* cppValue = V8URLSearchParams::toImpl(v8::Local<v8::Object>::Cast(v8Value));
        impl.setURLSearchParams(cppValue);
        return;
    }

    exceptionState.throwTypeError("The provided value is not of type '(FormData or URLSearchParams)'");
}

v8::Local<v8::Value> ToV8(const FormDataOrURLSearchParams& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    switch (impl.m_type) {
    case FormDataOrURLSearchParams::SpecificTypeNone:
        return v8::Null(isolate);
    case FormDataOrURLSearchParams::SpecificTypeFormData:
        return ToV8(impl.getAsFormData(), creationContext, isolate);
    case FormDataOrURLSearchParams::SpecificTypeURLSearchParams:
        return ToV8(impl.getAsURLSearchParams(), creationContext, isolate);
    default:
        NOTREACHED();
    }
    return v8::Local<v8::Value>();
}

FormDataOrURLSearchParams NativeValueTraits<FormDataOrURLSearchParams>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    FormDataOrURLSearchParams impl;
    V8FormDataOrURLSearchParams::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
    return impl;
}

} // namespace blink
