// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/union_container.h.tmpl

// clang-format on
#ifndef BooleanOrMediaTrackConstraints_h
#define BooleanOrMediaTrackConstraints_h

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8Binding.h"
#include "bindings/modules/v8/V8MediaTrackConstraints.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT BooleanOrMediaTrackConstraints final {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    BooleanOrMediaTrackConstraints();
    bool isNull() const { return m_type == SpecificTypeNone; }

    bool isBoolean() const { return m_type == SpecificTypeBoolean; }
    bool getAsBoolean() const;
    void setBoolean(bool);
    static BooleanOrMediaTrackConstraints fromBoolean(bool);

    bool isMediaTrackConstraints() const { return m_type == SpecificTypeMediaTrackConstraints; }
    const MediaTrackConstraints& getAsMediaTrackConstraints() const;
    void setMediaTrackConstraints(const MediaTrackConstraints&);
    static BooleanOrMediaTrackConstraints fromMediaTrackConstraints(const MediaTrackConstraints&);

    BooleanOrMediaTrackConstraints(const BooleanOrMediaTrackConstraints&);
    ~BooleanOrMediaTrackConstraints();
    BooleanOrMediaTrackConstraints& operator=(const BooleanOrMediaTrackConstraints&);
    DECLARE_TRACE();

private:
    enum SpecificTypes {
        SpecificTypeNone,
        SpecificTypeBoolean,
        SpecificTypeMediaTrackConstraints,
    };
    SpecificTypes m_type;

    bool m_boolean;
    MediaTrackConstraints m_mediaTrackConstraints;

    friend MODULES_EXPORT v8::Local<v8::Value> ToV8(const BooleanOrMediaTrackConstraints&, v8::Local<v8::Object>, v8::Isolate*);
};

class V8BooleanOrMediaTrackConstraints final {
public:
    MODULES_EXPORT static void toImpl(v8::Isolate*, v8::Local<v8::Value>, BooleanOrMediaTrackConstraints&, UnionTypeConversionMode, ExceptionState&);
};

MODULES_EXPORT v8::Local<v8::Value> ToV8(const BooleanOrMediaTrackConstraints&, v8::Local<v8::Object>, v8::Isolate*);

template <class CallbackInfo>
inline void v8SetReturnValue(const CallbackInfo& callbackInfo, BooleanOrMediaTrackConstraints& impl)
{
    v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
}

template <>
struct NativeValueTraits<BooleanOrMediaTrackConstraints> {
    MODULES_EXPORT static BooleanOrMediaTrackConstraints nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
};

} // namespace blink

// We need to set canInitializeWithMemset=true because HeapVector supports
// items that can initialize with memset or have a vtable. It is safe to
// set canInitializeWithMemset=true for a union type object in practice.
// See https://codereview.chromium.org/1118993002/#msg5 for more details.
WTF_ALLOW_MOVE_AND_INIT_WITH_MEM_FUNCTIONS(blink::BooleanOrMediaTrackConstraints);

#endif // BooleanOrMediaTrackConstraints_h
