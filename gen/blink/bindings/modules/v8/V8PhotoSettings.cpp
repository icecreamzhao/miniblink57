// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8PhotoSettings.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8Point2D.h"

namespace blink {

void V8PhotoSettings::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PhotoSettings& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> brightnessValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "brightness")).ToLocal(&brightnessValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (brightnessValue.IsEmpty() || brightnessValue->IsUndefined()) {
        // Do nothing.
    } else {
        double brightness = toRestrictedDouble(isolate, brightnessValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setBrightness(brightness);
    }

    v8::Local<v8::Value> colorTemperatureValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "colorTemperature")).ToLocal(&colorTemperatureValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (colorTemperatureValue.IsEmpty() || colorTemperatureValue->IsUndefined()) {
        // Do nothing.
    } else {
        double colorTemperature = toRestrictedDouble(isolate, colorTemperatureValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setColorTemperature(colorTemperature);
    }

    v8::Local<v8::Value> contrastValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "contrast")).ToLocal(&contrastValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (contrastValue.IsEmpty() || contrastValue->IsUndefined()) {
        // Do nothing.
    } else {
        double contrast = toRestrictedDouble(isolate, contrastValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setContrast(contrast);
    }

    v8::Local<v8::Value> exposureCompensationValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "exposureCompensation")).ToLocal(&exposureCompensationValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (exposureCompensationValue.IsEmpty() || exposureCompensationValue->IsUndefined()) {
        // Do nothing.
    } else {
        double exposureCompensation = toRestrictedDouble(isolate, exposureCompensationValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setExposureCompensation(exposureCompensation);
    }

    v8::Local<v8::Value> exposureModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "exposureMode")).ToLocal(&exposureModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (exposureModeValue.IsEmpty() || exposureModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> exposureMode = exposureModeValue;
        if (!exposureMode.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "none",
            "manual",
            "single-shot",
            "continuous",
        };
        if (!isValidEnum(exposureMode, validValues, WTF_ARRAY_LENGTH(validValues), "MeteringMode", exceptionState))
            return;
        impl.setExposureMode(exposureMode);
    }

    v8::Local<v8::Value> fillLightModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "fillLightMode")).ToLocal(&fillLightModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (fillLightModeValue.IsEmpty() || fillLightModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> fillLightMode = fillLightModeValue;
        if (!fillLightMode.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "none",
            "off",
            "auto",
            "flash",
            "torch",
        };
        if (!isValidEnum(fillLightMode, validValues, WTF_ARRAY_LENGTH(validValues), "FillLightMode", exceptionState))
            return;
        impl.setFillLightMode(fillLightMode);
    }

    v8::Local<v8::Value> focusModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "focusMode")).ToLocal(&focusModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (focusModeValue.IsEmpty() || focusModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> focusMode = focusModeValue;
        if (!focusMode.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "none",
            "manual",
            "single-shot",
            "continuous",
        };
        if (!isValidEnum(focusMode, validValues, WTF_ARRAY_LENGTH(validValues), "MeteringMode", exceptionState))
            return;
        impl.setFocusMode(focusMode);
    }

    v8::Local<v8::Value> imageHeightValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "imageHeight")).ToLocal(&imageHeightValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (imageHeightValue.IsEmpty() || imageHeightValue->IsUndefined()) {
        // Do nothing.
    } else {
        double imageHeight = toRestrictedDouble(isolate, imageHeightValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setImageHeight(imageHeight);
    }

    v8::Local<v8::Value> imageWidthValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "imageWidth")).ToLocal(&imageWidthValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (imageWidthValue.IsEmpty() || imageWidthValue->IsUndefined()) {
        // Do nothing.
    } else {
        double imageWidth = toRestrictedDouble(isolate, imageWidthValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setImageWidth(imageWidth);
    }

    v8::Local<v8::Value> isoValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "iso")).ToLocal(&isoValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (isoValue.IsEmpty() || isoValue->IsUndefined()) {
        // Do nothing.
    } else {
        double iso = toRestrictedDouble(isolate, isoValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setIso(iso);
    }

    v8::Local<v8::Value> pointsOfInterestValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "pointsOfInterest")).ToLocal(&pointsOfInterestValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (pointsOfInterestValue.IsEmpty() || pointsOfInterestValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<Point2D> pointsOfInterest = toImplArray<HeapVector<Point2D>>(pointsOfInterestValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setPointsOfInterest(pointsOfInterest);
    }

    v8::Local<v8::Value> redEyeReductionValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "redEyeReduction")).ToLocal(&redEyeReductionValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (redEyeReductionValue.IsEmpty() || redEyeReductionValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool redEyeReduction = toBoolean(isolate, redEyeReductionValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRedEyeReduction(redEyeReduction);
    }

    v8::Local<v8::Value> saturationValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "saturation")).ToLocal(&saturationValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (saturationValue.IsEmpty() || saturationValue->IsUndefined()) {
        // Do nothing.
    } else {
        double saturation = toRestrictedDouble(isolate, saturationValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setSaturation(saturation);
    }

    v8::Local<v8::Value> sharpnessValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "sharpness")).ToLocal(&sharpnessValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (sharpnessValue.IsEmpty() || sharpnessValue->IsUndefined()) {
        // Do nothing.
    } else {
        double sharpness = toRestrictedDouble(isolate, sharpnessValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setSharpness(sharpness);
    }

    v8::Local<v8::Value> whiteBalanceModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "whiteBalanceMode")).ToLocal(&whiteBalanceModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (whiteBalanceModeValue.IsEmpty() || whiteBalanceModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> whiteBalanceMode = whiteBalanceModeValue;
        if (!whiteBalanceMode.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "none",
            "manual",
            "single-shot",
            "continuous",
        };
        if (!isValidEnum(whiteBalanceMode, validValues, WTF_ARRAY_LENGTH(validValues), "MeteringMode", exceptionState))
            return;
        impl.setWhiteBalanceMode(whiteBalanceMode);
    }

    v8::Local<v8::Value> zoomValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "zoom")).ToLocal(&zoomValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (zoomValue.IsEmpty() || zoomValue->IsUndefined()) {
        // Do nothing.
    } else {
        double zoom = toRestrictedDouble(isolate, zoomValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setZoom(zoom);
    }
}

v8::Local<v8::Value> PhotoSettings::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PhotoSettings(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8PhotoSettings(const PhotoSettings& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasBrightness()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "brightness"), v8::Number::New(isolate, impl.brightness()))))
            return false;
    }

    if (impl.hasColorTemperature()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "colorTemperature"), v8::Number::New(isolate, impl.colorTemperature()))))
            return false;
    }

    if (impl.hasContrast()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "contrast"), v8::Number::New(isolate, impl.contrast()))))
            return false;
    }

    if (impl.hasExposureCompensation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "exposureCompensation"), v8::Number::New(isolate, impl.exposureCompensation()))))
            return false;
    }

    if (impl.hasExposureMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "exposureMode"), v8String(isolate, impl.exposureMode()))))
            return false;
    }

    if (impl.hasFillLightMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "fillLightMode"), v8String(isolate, impl.fillLightMode()))))
            return false;
    }

    if (impl.hasFocusMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "focusMode"), v8String(isolate, impl.focusMode()))))
            return false;
    }

    if (impl.hasImageHeight()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imageHeight"), v8::Number::New(isolate, impl.imageHeight()))))
            return false;
    }

    if (impl.hasImageWidth()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "imageWidth"), v8::Number::New(isolate, impl.imageWidth()))))
            return false;
    }

    if (impl.hasIso()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "iso"), v8::Number::New(isolate, impl.iso()))))
            return false;
    }

    if (impl.hasPointsOfInterest()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "pointsOfInterest"), ToV8(impl.pointsOfInterest(), creationContext, isolate))))
            return false;
    }

    if (impl.hasRedEyeReduction()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "redEyeReduction"), v8Boolean(impl.redEyeReduction(), isolate))))
            return false;
    }

    if (impl.hasSaturation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "saturation"), v8::Number::New(isolate, impl.saturation()))))
            return false;
    }

    if (impl.hasSharpness()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "sharpness"), v8::Number::New(isolate, impl.sharpness()))))
            return false;
    }

    if (impl.hasWhiteBalanceMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "whiteBalanceMode"), v8String(isolate, impl.whiteBalanceMode()))))
            return false;
    }

    if (impl.hasZoom()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "zoom"), v8::Number::New(isolate, impl.zoom()))))
            return false;
    }

    return true;
}

PhotoSettings NativeValueTraits<PhotoSettings>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PhotoSettings impl;
    V8PhotoSettings::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
