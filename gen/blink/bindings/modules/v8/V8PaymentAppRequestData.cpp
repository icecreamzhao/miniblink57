// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8PaymentAppRequestData.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/modules/v8/V8PaymentDetailsModifier.h"
#include "bindings/modules/v8/V8PaymentItem.h"
#include "bindings/modules/v8/V8PaymentMethodData.h"

namespace blink {

void V8PaymentAppRequestData::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, PaymentAppRequestData& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> methodDataValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "methodData")).ToLocal(&methodDataValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (methodDataValue.IsEmpty() || methodDataValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<PaymentMethodData> methodData = toImplArray<HeapVector<PaymentMethodData>>(methodDataValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setMethodData(methodData);
    }

    v8::Local<v8::Value> modifiersValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "modifiers")).ToLocal(&modifiersValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (modifiersValue.IsEmpty() || modifiersValue->IsUndefined()) {
        // Do nothing.
    } else {
        HeapVector<PaymentDetailsModifier> modifiers = toImplArray<HeapVector<PaymentDetailsModifier>>(modifiersValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setModifiers(modifiers);
    }

    v8::Local<v8::Value> optionIdValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "optionId")).ToLocal(&optionIdValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (optionIdValue.IsEmpty() || optionIdValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> optionId = optionIdValue;
        if (!optionId.prepare(exceptionState))
            return;
        impl.setOptionId(optionId);
    }

    v8::Local<v8::Value> originValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "origin")).ToLocal(&originValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (originValue.IsEmpty() || originValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> origin = originValue;
        if (!origin.prepare(exceptionState))
            return;
        impl.setOrigin(origin);
    }

    v8::Local<v8::Value> totalValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "total")).ToLocal(&totalValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (totalValue.IsEmpty() || totalValue->IsUndefined()) {
        // Do nothing.
    } else {
        PaymentItem total;
        V8PaymentItem::toImpl(isolate, totalValue, total, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setTotal(total);
    }
}

v8::Local<v8::Value> PaymentAppRequestData::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8PaymentAppRequestData(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8PaymentAppRequestData(const PaymentAppRequestData& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasMethodData()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "methodData"), ToV8(impl.methodData(), creationContext, isolate))))
            return false;
    }

    if (impl.hasModifiers()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "modifiers"), ToV8(impl.modifiers(), creationContext, isolate))))
            return false;
    }

    if (impl.hasOptionId()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "optionId"), v8String(isolate, impl.optionId()))))
            return false;
    }

    if (impl.hasOrigin()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "origin"), v8String(isolate, impl.origin()))))
            return false;
    }

    if (impl.hasTotal()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "total"), ToV8(impl.total(), creationContext, isolate))))
            return false;
    }

    return true;
}

PaymentAppRequestData NativeValueTraits<PaymentAppRequestData>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    PaymentAppRequestData impl;
    V8PaymentAppRequestData::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
