// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl

// clang-format on
#include "V8AudioNodeOptions.h"

#include "bindings/core/v8/ExceptionState.h"

namespace blink {

void V8AudioNodeOptions::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, AudioNodeOptions& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value)) {
        return;
    }
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::TryCatch block(isolate);
    v8::Local<v8::Object> v8Object;
    if (!v8Call(v8Value->ToObject(isolate->GetCurrentContext()), v8Object, block)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    v8::Local<v8::Value> channelCountValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "channelCount")).ToLocal(&channelCountValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (channelCountValue.IsEmpty() || channelCountValue->IsUndefined()) {
        // Do nothing.
    } else {
        unsigned channelCount = toUInt32(isolate, channelCountValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setChannelCount(channelCount);
    }

    v8::Local<v8::Value> channelCountModeValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "channelCountMode")).ToLocal(&channelCountModeValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (channelCountModeValue.IsEmpty() || channelCountModeValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> channelCountMode = channelCountModeValue;
        if (!channelCountMode.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "max",
            "clamped-max",
            "explicit",
        };
        if (!isValidEnum(channelCountMode, validValues, WTF_ARRAY_LENGTH(validValues), "ChannelCountMode", exceptionState))
            return;
        impl.setChannelCountMode(channelCountMode);
    }

    v8::Local<v8::Value> channelInterpretationValue;
    if (!v8Object->Get(isolate->GetCurrentContext(), v8String(isolate, "channelInterpretation")).ToLocal(&channelInterpretationValue)) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (channelInterpretationValue.IsEmpty() || channelInterpretationValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> channelInterpretation = channelInterpretationValue;
        if (!channelInterpretation.prepare(exceptionState))
            return;
        const char* validValues[] = {
            "speakers",
            "discrete",
        };
        if (!isValidEnum(channelInterpretation, validValues, WTF_ARRAY_LENGTH(validValues), "ChannelInterpretation", exceptionState))
            return;
        impl.setChannelInterpretation(channelInterpretation);
    }
}

v8::Local<v8::Value> AudioNodeOptions::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    if (!toV8AudioNodeOptions(*this, v8Object, creationContext, isolate))
        return v8::Undefined(isolate);
    return v8Object;
}

bool toV8AudioNodeOptions(const AudioNodeOptions& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasChannelCount()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "channelCount"), v8::Integer::NewFromUnsigned(isolate, impl.channelCount()))))
            return false;
    }

    if (impl.hasChannelCountMode()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "channelCountMode"), v8String(isolate, impl.channelCountMode()))))
            return false;
    }

    if (impl.hasChannelInterpretation()) {
        if (!v8CallBoolean(dictionary->CreateDataProperty(isolate->GetCurrentContext(), v8String(isolate, "channelInterpretation"), v8String(isolate, impl.channelInterpretation()))))
            return false;
    }

    return true;
}

AudioNodeOptions NativeValueTraits<AudioNodeOptions>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    AudioNodeOptions impl;
    V8AudioNodeOptions::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
