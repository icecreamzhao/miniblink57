// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "AccelerometerReadingInit.h"

namespace blink {

AccelerometerReadingInit::AccelerometerReadingInit()
{
}

AccelerometerReadingInit::~AccelerometerReadingInit() { }

AccelerometerReadingInit::AccelerometerReadingInit(const AccelerometerReadingInit&) = default;

AccelerometerReadingInit& AccelerometerReadingInit::operator=(const AccelerometerReadingInit&) = default;

bool AccelerometerReadingInit::hasX() const
{
    return m_hasX;
}
double AccelerometerReadingInit::x() const
{
    DCHECK(m_hasX);
    return m_x;
}
void AccelerometerReadingInit::setX(double value)
{
    m_x = value;
    m_hasX = true;
}
bool AccelerometerReadingInit::hasY() const
{
    return m_hasY;
}
double AccelerometerReadingInit::y() const
{
    DCHECK(m_hasY);
    return m_y;
}
void AccelerometerReadingInit::setY(double value)
{
    m_y = value;
    m_hasY = true;
}
bool AccelerometerReadingInit::hasZ() const
{
    return m_hasZ;
}
double AccelerometerReadingInit::z() const
{
    DCHECK(m_hasZ);
    return m_z;
}
void AccelerometerReadingInit::setZ(double value)
{
    m_z = value;
    m_hasZ = true;
}

DEFINE_TRACE(AccelerometerReadingInit)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
