// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "IDBObserverInit.h"

namespace blink {

IDBObserverInit::IDBObserverInit()
{
    setNoRecords(false);
    setOperationTypes(Vector<String>());
    setTransaction(false);
    setValues(false);
}

IDBObserverInit::~IDBObserverInit() { }

IDBObserverInit::IDBObserverInit(const IDBObserverInit&) = default;

IDBObserverInit& IDBObserverInit::operator=(const IDBObserverInit&) = default;

bool IDBObserverInit::hasNoRecords() const
{
    return m_hasNoRecords;
}
bool IDBObserverInit::noRecords() const
{
    DCHECK(m_hasNoRecords);
    return m_noRecords;
}
void IDBObserverInit::setNoRecords(bool value)
{
    m_noRecords = value;
    m_hasNoRecords = true;
}
bool IDBObserverInit::hasOperationTypes() const
{
    return m_hasOperationTypes;
}
const Vector<String>& IDBObserverInit::operationTypes() const
{
    DCHECK(m_hasOperationTypes);
    return m_operationTypes;
}
void IDBObserverInit::setOperationTypes(const Vector<String>& value)
{
    m_operationTypes = value;
    m_hasOperationTypes = true;
}
bool IDBObserverInit::hasTransaction() const
{
    return m_hasTransaction;
}
bool IDBObserverInit::transaction() const
{
    DCHECK(m_hasTransaction);
    return m_transaction;
}
void IDBObserverInit::setTransaction(bool value)
{
    m_transaction = value;
    m_hasTransaction = true;
}
bool IDBObserverInit::hasValues() const
{
    return m_hasValues;
}
bool IDBObserverInit::values() const
{
    DCHECK(m_hasValues);
    return m_values;
}
void IDBObserverInit::setValues(bool value)
{
    m_values = value;
    m_hasValues = true;
}

DEFINE_TRACE(IDBObserverInit)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
