// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "AndroidPayMethodData.h"

namespace blink {

AndroidPayMethodData::AndroidPayMethodData()
{
}

AndroidPayMethodData::~AndroidPayMethodData() { }

AndroidPayMethodData::AndroidPayMethodData(const AndroidPayMethodData&) = default;

AndroidPayMethodData& AndroidPayMethodData::operator=(const AndroidPayMethodData&) = default;

bool AndroidPayMethodData::hasAllowedCardNetworks() const
{
    return m_hasAllowedCardNetworks;
}
const Vector<String>& AndroidPayMethodData::allowedCardNetworks() const
{
    DCHECK(m_hasAllowedCardNetworks);
    return m_allowedCardNetworks;
}
void AndroidPayMethodData::setAllowedCardNetworks(const Vector<String>& value)
{
    m_allowedCardNetworks = value;
    m_hasAllowedCardNetworks = true;
}
bool AndroidPayMethodData::hasEnvironment() const
{
    return !m_environment.isNull();
}
String AndroidPayMethodData::environment() const
{
    return m_environment;
}
void AndroidPayMethodData::setEnvironment(String value)
{
    m_environment = value;
}
bool AndroidPayMethodData::hasMerchantId() const
{
    return !m_merchantId.isNull();
}
String AndroidPayMethodData::merchantId() const
{
    return m_merchantId;
}
void AndroidPayMethodData::setMerchantId(String value)
{
    m_merchantId = value;
}
bool AndroidPayMethodData::hasMerchantName() const
{
    return !m_merchantName.isNull();
}
String AndroidPayMethodData::merchantName() const
{
    return m_merchantName;
}
void AndroidPayMethodData::setMerchantName(String value)
{
    m_merchantName = value;
}
bool AndroidPayMethodData::hasMinGooglePlayServicesVersion() const
{
    return !m_minGooglePlayServicesVersion.isNull();
}
String AndroidPayMethodData::minGooglePlayServicesVersion() const
{
    return m_minGooglePlayServicesVersion;
}
void AndroidPayMethodData::setMinGooglePlayServicesVersion(String value)
{
    m_minGooglePlayServicesVersion = value;
}
bool AndroidPayMethodData::hasPaymentMethodTokenizationParameters() const
{
    return m_hasPaymentMethodTokenizationParameters;
}
const AndroidPayTokenization& AndroidPayMethodData::paymentMethodTokenizationParameters() const
{
    DCHECK(m_hasPaymentMethodTokenizationParameters);
    return m_paymentMethodTokenizationParameters;
}
void AndroidPayMethodData::setPaymentMethodTokenizationParameters(const AndroidPayTokenization& value)
{
    m_paymentMethodTokenizationParameters = value;
    m_hasPaymentMethodTokenizationParameters = true;
}

DEFINE_TRACE(AndroidPayMethodData)
{
    visitor->trace(m_paymentMethodTokenizationParameters);
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
