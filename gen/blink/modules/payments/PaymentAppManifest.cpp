// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "PaymentAppManifest.h"

namespace blink {

PaymentAppManifest::PaymentAppManifest()
{
}

PaymentAppManifest::~PaymentAppManifest() { }

PaymentAppManifest::PaymentAppManifest(const PaymentAppManifest&) = default;

PaymentAppManifest& PaymentAppManifest::operator=(const PaymentAppManifest&) = default;

bool PaymentAppManifest::hasIcon() const
{
    return !m_icon.isNull();
}
String PaymentAppManifest::icon() const
{
    return m_icon;
}
void PaymentAppManifest::setIcon(String value)
{
    m_icon = value;
}
void PaymentAppManifest::setIconToNull()
{
    m_icon = String();
}
bool PaymentAppManifest::hasName() const
{
    return !m_name.isNull();
}
String PaymentAppManifest::name() const
{
    return m_name;
}
void PaymentAppManifest::setName(String value)
{
    m_name = value;
}
bool PaymentAppManifest::hasOptions() const
{
    return m_hasOptions;
}
const HeapVector<PaymentAppOption>& PaymentAppManifest::options() const
{
    DCHECK(m_hasOptions);
    return m_options;
}
void PaymentAppManifest::setOptions(const HeapVector<PaymentAppOption>& value)
{
    m_options = value;
    m_hasOptions = true;
}

DEFINE_TRACE(PaymentAppManifest)
{
    visitor->trace(m_options);
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
