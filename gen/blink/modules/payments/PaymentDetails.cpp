// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "PaymentDetails.h"

namespace blink {

PaymentDetails::PaymentDetails()
{
}

PaymentDetails::~PaymentDetails() { }

PaymentDetails::PaymentDetails(const PaymentDetails&) = default;

PaymentDetails& PaymentDetails::operator=(const PaymentDetails&) = default;

bool PaymentDetails::hasDisplayItems() const
{
    return m_hasDisplayItems;
}
const HeapVector<PaymentItem>& PaymentDetails::displayItems() const
{
    DCHECK(m_hasDisplayItems);
    return m_displayItems;
}
void PaymentDetails::setDisplayItems(const HeapVector<PaymentItem>& value)
{
    m_displayItems = value;
    m_hasDisplayItems = true;
}
bool PaymentDetails::hasError() const
{
    return !m_error.isNull();
}
String PaymentDetails::error() const
{
    return m_error;
}
void PaymentDetails::setError(String value)
{
    m_error = value;
}
bool PaymentDetails::hasModifiers() const
{
    return m_hasModifiers;
}
const HeapVector<PaymentDetailsModifier>& PaymentDetails::modifiers() const
{
    DCHECK(m_hasModifiers);
    return m_modifiers;
}
void PaymentDetails::setModifiers(const HeapVector<PaymentDetailsModifier>& value)
{
    m_modifiers = value;
    m_hasModifiers = true;
}
bool PaymentDetails::hasShippingOptions() const
{
    return m_hasShippingOptions;
}
const HeapVector<PaymentShippingOption>& PaymentDetails::shippingOptions() const
{
    DCHECK(m_hasShippingOptions);
    return m_shippingOptions;
}
void PaymentDetails::setShippingOptions(const HeapVector<PaymentShippingOption>& value)
{
    m_shippingOptions = value;
    m_hasShippingOptions = true;
}
bool PaymentDetails::hasTotal() const
{
    return m_hasTotal;
}
const PaymentItem& PaymentDetails::total() const
{
    DCHECK(m_hasTotal);
    return m_total;
}
void PaymentDetails::setTotal(const PaymentItem& value)
{
    m_total = value;
    m_hasTotal = true;
}

DEFINE_TRACE(PaymentDetails)
{
    visitor->trace(m_displayItems);
    visitor->trace(m_modifiers);
    visitor->trace(m_shippingOptions);
    visitor->trace(m_total);
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
