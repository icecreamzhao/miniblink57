// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef MediaTrackSettings_h
#define MediaTrackSettings_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT MediaTrackSettings : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    MediaTrackSettings();
    virtual ~MediaTrackSettings();
    MediaTrackSettings(const MediaTrackSettings&);
    MediaTrackSettings& operator=(const MediaTrackSettings&);

    bool hasAspectRatio() const;
    double aspectRatio() const;
    void setAspectRatio(double);

    bool hasChannelCount() const;
    int channelCount() const;
    void setChannelCount(int);

    bool hasDeviceId() const;
    String deviceId() const;
    void setDeviceId(String);

    bool hasEchoCancellation() const;
    bool echoCancellation() const;
    void setEchoCancellation(bool);

    bool hasFacingMode() const;
    String facingMode() const;
    void setFacingMode(String);

    bool hasFrameRate() const;
    double frameRate() const;
    void setFrameRate(double);

    bool hasGroupId() const;
    String groupId() const;
    void setGroupId(String);

    bool hasHeight() const;
    int height() const;
    void setHeight(int);

    bool hasLatency() const;
    double latency() const;
    void setLatency(double);

    bool hasSampleRate() const;
    int sampleRate() const;
    void setSampleRate(int);

    bool hasSampleSize() const;
    int sampleSize() const;
    void setSampleSize(int);

    bool hasVolume() const;
    double volume() const;
    void setVolume(double);

    bool hasWidth() const;
    int width() const;
    void setWidth(int);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasAspectRatio = false;
    double m_aspectRatio;
    bool m_hasChannelCount = false;
    int m_channelCount;
    String m_deviceId;
    bool m_hasEchoCancellation = false;
    bool m_echoCancellation;
    String m_facingMode;
    bool m_hasFrameRate = false;
    double m_frameRate;
    String m_groupId;
    bool m_hasHeight = false;
    int m_height;
    bool m_hasLatency = false;
    double m_latency;
    bool m_hasSampleRate = false;
    int m_sampleRate;
    bool m_hasSampleSize = false;
    int m_sampleSize;
    bool m_hasVolume = false;
    double m_volume;
    bool m_hasWidth = false;
    int m_width;

    friend class V8MediaTrackSettings;
};

} // namespace blink

#endif // MediaTrackSettings_h
