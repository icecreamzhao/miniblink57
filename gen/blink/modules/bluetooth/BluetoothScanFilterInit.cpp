// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "BluetoothScanFilterInit.h"

namespace blink {

BluetoothScanFilterInit::BluetoothScanFilterInit()
{
}

BluetoothScanFilterInit::~BluetoothScanFilterInit() { }

BluetoothScanFilterInit::BluetoothScanFilterInit(const BluetoothScanFilterInit&) = default;

BluetoothScanFilterInit& BluetoothScanFilterInit::operator=(const BluetoothScanFilterInit&) = default;

bool BluetoothScanFilterInit::hasName() const
{
    return !m_name.isNull();
}
String BluetoothScanFilterInit::name() const
{
    return m_name;
}
void BluetoothScanFilterInit::setName(String value)
{
    m_name = value;
}
bool BluetoothScanFilterInit::hasNamePrefix() const
{
    return !m_namePrefix.isNull();
}
String BluetoothScanFilterInit::namePrefix() const
{
    return m_namePrefix;
}
void BluetoothScanFilterInit::setNamePrefix(String value)
{
    m_namePrefix = value;
}
bool BluetoothScanFilterInit::hasServices() const
{
    return m_hasServices;
}
const HeapVector<StringOrUnsignedLong>& BluetoothScanFilterInit::services() const
{
    DCHECK(m_hasServices);
    return m_services;
}
void BluetoothScanFilterInit::setServices(const HeapVector<StringOrUnsignedLong>& value)
{
    m_services = value;
    m_hasServices = true;
}

DEFINE_TRACE(BluetoothScanFilterInit)
{
    visitor->trace(m_services);
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
