// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef RequestDeviceOptions_h
#define RequestDeviceOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/modules/v8/StringOrUnsignedLong.h"
#include "modules/ModulesExport.h"
#include "modules/bluetooth/BluetoothScanFilterInit.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"

namespace blink {

class MODULES_EXPORT RequestDeviceOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    RequestDeviceOptions();
    virtual ~RequestDeviceOptions();
    RequestDeviceOptions(const RequestDeviceOptions&);
    RequestDeviceOptions& operator=(const RequestDeviceOptions&);

    bool hasAcceptAllDevices() const;
    bool acceptAllDevices() const;
    void setAcceptAllDevices(bool);

    bool hasFilters() const;
    const HeapVector<BluetoothScanFilterInit>& filters() const;
    void setFilters(const HeapVector<BluetoothScanFilterInit>&);

    bool hasOptionalServices() const;
    const HeapVector<StringOrUnsignedLong>& optionalServices() const;
    void setOptionalServices(const HeapVector<StringOrUnsignedLong>&);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasAcceptAllDevices = false;
    bool m_acceptAllDevices;
    bool m_hasFilters = false;
    HeapVector<BluetoothScanFilterInit> m_filters;
    bool m_hasOptionalServices = false;
    HeapVector<StringOrUnsignedLong> m_optionalServices;

    friend class V8RequestDeviceOptions;
};

} // namespace blink

#endif // RequestDeviceOptions_h
