// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef NotificationOptions_h
#define NotificationOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/modules/v8/UnsignedLongOrUnsignedLongSequence.h"
#include "modules/ModulesExport.h"
#include "modules/notifications/NotificationAction.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT NotificationOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    NotificationOptions();
    virtual ~NotificationOptions();
    NotificationOptions(const NotificationOptions&);
    NotificationOptions& operator=(const NotificationOptions&);

    bool hasActions() const;
    const HeapVector<NotificationAction>& actions() const;
    void setActions(const HeapVector<NotificationAction>&);

    bool hasBadge() const;
    String badge() const;
    void setBadge(String);

    bool hasBody() const;
    String body() const;
    void setBody(String);

    bool hasData() const;
    ScriptValue data() const;
    void setData(ScriptValue);

    bool hasDir() const;
    String dir() const;
    void setDir(String);

    bool hasIcon() const;
    String icon() const;
    void setIcon(String);

    bool hasImage() const;
    String image() const;
    void setImage(String);

    bool hasLang() const;
    String lang() const;
    void setLang(String);

    bool hasRenotify() const;
    bool renotify() const;
    void setRenotify(bool);

    bool hasRequireInteraction() const;
    bool requireInteraction() const;
    void setRequireInteraction(bool);

    bool hasSilent() const;
    bool silent() const;
    void setSilent(bool);

    bool hasTag() const;
    String tag() const;
    void setTag(String);

    bool hasTimestamp() const;
    unsigned long long timestamp() const;
    void setTimestamp(unsigned long long);

    bool hasVibrate() const;
    const UnsignedLongOrUnsignedLongSequence& vibrate() const;
    void setVibrate(const UnsignedLongOrUnsignedLongSequence&);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasActions = false;
    HeapVector<NotificationAction> m_actions;
    String m_badge;
    String m_body;
    ScriptValue m_data;
    String m_dir;
    String m_icon;
    String m_image;
    String m_lang;
    bool m_hasRenotify = false;
    bool m_renotify;
    bool m_hasRequireInteraction = false;
    bool m_requireInteraction;
    bool m_hasSilent = false;
    bool m_silent;
    String m_tag;
    bool m_hasTimestamp = false;
    unsigned long long m_timestamp;
    UnsignedLongOrUnsignedLongSequence m_vibrate;

    friend class V8NotificationOptions;
};

} // namespace blink

#endif // NotificationOptions_h
