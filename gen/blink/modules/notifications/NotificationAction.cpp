// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "NotificationAction.h"

namespace blink {

NotificationAction::NotificationAction()
{
    setType(String("button"));
}

NotificationAction::~NotificationAction() { }

NotificationAction::NotificationAction(const NotificationAction&) = default;

NotificationAction& NotificationAction::operator=(const NotificationAction&) = default;

bool NotificationAction::hasAction() const
{
    return !m_action.isNull();
}
String NotificationAction::action() const
{
    return m_action;
}
void NotificationAction::setAction(String value)
{
    m_action = value;
}
bool NotificationAction::hasIcon() const
{
    return !m_icon.isNull();
}
String NotificationAction::icon() const
{
    return m_icon;
}
void NotificationAction::setIcon(String value)
{
    m_icon = value;
}
bool NotificationAction::hasPlaceholder() const
{
    return !m_placeholder.isNull();
}
String NotificationAction::placeholder() const
{
    return m_placeholder;
}
void NotificationAction::setPlaceholder(String value)
{
    m_placeholder = value;
}
void NotificationAction::setPlaceholderToNull()
{
    m_placeholder = String();
}
bool NotificationAction::hasTitle() const
{
    return !m_title.isNull();
}
String NotificationAction::title() const
{
    return m_title;
}
void NotificationAction::setTitle(String value)
{
    m_title = value;
}
bool NotificationAction::hasType() const
{
    return !m_type.isNull();
}
String NotificationAction::type() const
{
    return m_type;
}
void NotificationAction::setType(String value)
{
    m_type = value;
}

DEFINE_TRACE(NotificationAction)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
