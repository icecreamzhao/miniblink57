// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef MediaRecorderOptions_h
#define MediaRecorderOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT MediaRecorderOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    MediaRecorderOptions();
    virtual ~MediaRecorderOptions();
    MediaRecorderOptions(const MediaRecorderOptions&);
    MediaRecorderOptions& operator=(const MediaRecorderOptions&);

    bool hasAudioBitsPerSecond() const;
    unsigned audioBitsPerSecond() const;
    void setAudioBitsPerSecond(unsigned);

    bool hasBitsPerSecond() const;
    unsigned bitsPerSecond() const;
    void setBitsPerSecond(unsigned);

    bool hasMimeType() const;
    String mimeType() const;
    void setMimeType(String);

    bool hasVideoBitsPerSecond() const;
    unsigned videoBitsPerSecond() const;
    void setVideoBitsPerSecond(unsigned);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasAudioBitsPerSecond = false;
    unsigned m_audioBitsPerSecond;
    bool m_hasBitsPerSecond = false;
    unsigned m_bitsPerSecond;
    String m_mimeType;
    bool m_hasVideoBitsPerSecond = false;
    unsigned m_videoBitsPerSecond;

    friend class V8MediaRecorderOptions;
};

} // namespace blink

#endif // MediaRecorderOptions_h
