// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef FederatedCredentialRequestOptions_h
#define FederatedCredentialRequestOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT FederatedCredentialRequestOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    FederatedCredentialRequestOptions();
    virtual ~FederatedCredentialRequestOptions();
    FederatedCredentialRequestOptions(const FederatedCredentialRequestOptions&);
    FederatedCredentialRequestOptions& operator=(const FederatedCredentialRequestOptions&);

    bool hasProtocols() const;
    const Vector<String>& protocols() const;
    void setProtocols(const Vector<String>&);

    bool hasProviders() const;
    const Vector<String>& providers() const;
    void setProviders(const Vector<String>&);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasProtocols = false;
    Vector<String> m_protocols;
    bool m_hasProviders = false;
    Vector<String> m_providers;

    friend class V8FederatedCredentialRequestOptions;
};

} // namespace blink

#endif // FederatedCredentialRequestOptions_h
