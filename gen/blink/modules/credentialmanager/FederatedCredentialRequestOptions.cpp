// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "FederatedCredentialRequestOptions.h"

namespace blink {

FederatedCredentialRequestOptions::FederatedCredentialRequestOptions()
{
}

FederatedCredentialRequestOptions::~FederatedCredentialRequestOptions() { }

FederatedCredentialRequestOptions::FederatedCredentialRequestOptions(const FederatedCredentialRequestOptions&) = default;

FederatedCredentialRequestOptions& FederatedCredentialRequestOptions::operator=(const FederatedCredentialRequestOptions&) = default;

bool FederatedCredentialRequestOptions::hasProtocols() const
{
    return m_hasProtocols;
}
const Vector<String>& FederatedCredentialRequestOptions::protocols() const
{
    DCHECK(m_hasProtocols);
    return m_protocols;
}
void FederatedCredentialRequestOptions::setProtocols(const Vector<String>& value)
{
    m_protocols = value;
    m_hasProtocols = true;
}
bool FederatedCredentialRequestOptions::hasProviders() const
{
    return m_hasProviders;
}
const Vector<String>& FederatedCredentialRequestOptions::providers() const
{
    DCHECK(m_hasProviders);
    return m_providers;
}
void FederatedCredentialRequestOptions::setProviders(const Vector<String>& value)
{
    m_providers = value;
    m_hasProviders = true;
}

DEFINE_TRACE(FederatedCredentialRequestOptions)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
