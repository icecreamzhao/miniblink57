// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef CredentialRequestOptions_h
#define CredentialRequestOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "modules/credentialmanager/FederatedCredentialRequestOptions.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT CredentialRequestOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    CredentialRequestOptions();
    virtual ~CredentialRequestOptions();
    CredentialRequestOptions(const CredentialRequestOptions&);
    CredentialRequestOptions& operator=(const CredentialRequestOptions&);

    bool hasFederated() const;
    const FederatedCredentialRequestOptions& federated() const;
    void setFederated(const FederatedCredentialRequestOptions&);

    bool hasPassword() const;
    bool password() const;
    void setPassword(bool);

    bool hasUnmediated() const;
    bool unmediated() const;
    void setUnmediated(bool);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasFederated = false;
    FederatedCredentialRequestOptions m_federated;
    bool m_hasPassword = false;
    bool m_password;
    bool m_hasUnmediated = false;
    bool m_unmediated;

    friend class V8CredentialRequestOptions;
};

} // namespace blink

#endif // CredentialRequestOptions_h
