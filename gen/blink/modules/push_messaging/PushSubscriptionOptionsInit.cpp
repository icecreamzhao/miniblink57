// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "PushSubscriptionOptionsInit.h"

namespace blink {

PushSubscriptionOptionsInit::PushSubscriptionOptionsInit()
{
    setUserVisibleOnly(false);
}

PushSubscriptionOptionsInit::~PushSubscriptionOptionsInit() { }

PushSubscriptionOptionsInit::PushSubscriptionOptionsInit(const PushSubscriptionOptionsInit&) = default;

PushSubscriptionOptionsInit& PushSubscriptionOptionsInit::operator=(const PushSubscriptionOptionsInit&) = default;

bool PushSubscriptionOptionsInit::hasApplicationServerKey() const
{
    return !m_applicationServerKey.isNull();
}
const ArrayBufferOrArrayBufferView& PushSubscriptionOptionsInit::applicationServerKey() const
{
    return m_applicationServerKey;
}
void PushSubscriptionOptionsInit::setApplicationServerKey(const ArrayBufferOrArrayBufferView& value)
{
    m_applicationServerKey = value;
}
void PushSubscriptionOptionsInit::setApplicationServerKeyToNull()
{
    m_applicationServerKey = ArrayBufferOrArrayBufferView();
}
bool PushSubscriptionOptionsInit::hasUserVisibleOnly() const
{
    return m_hasUserVisibleOnly;
}
bool PushSubscriptionOptionsInit::userVisibleOnly() const
{
    DCHECK(m_hasUserVisibleOnly);
    return m_userVisibleOnly;
}
void PushSubscriptionOptionsInit::setUserVisibleOnly(bool value)
{
    m_userVisibleOnly = value;
    m_hasUserVisibleOnly = true;
}

DEFINE_TRACE(PushSubscriptionOptionsInit)
{
    visitor->trace(m_applicationServerKey);
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
