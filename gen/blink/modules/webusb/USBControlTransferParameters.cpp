// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "USBControlTransferParameters.h"

namespace blink {

USBControlTransferParameters::USBControlTransferParameters()
{
}

USBControlTransferParameters::~USBControlTransferParameters() { }

USBControlTransferParameters::USBControlTransferParameters(const USBControlTransferParameters&) = default;

USBControlTransferParameters& USBControlTransferParameters::operator=(const USBControlTransferParameters&) = default;

bool USBControlTransferParameters::hasIndex() const
{
    return m_hasIndex;
}
unsigned USBControlTransferParameters::index() const
{
    DCHECK(m_hasIndex);
    return m_index;
}
void USBControlTransferParameters::setIndex(unsigned value)
{
    m_index = value;
    m_hasIndex = true;
}
bool USBControlTransferParameters::hasRecipient() const
{
    return !m_recipient.isNull();
}
String USBControlTransferParameters::recipient() const
{
    return m_recipient;
}
void USBControlTransferParameters::setRecipient(String value)
{
    m_recipient = value;
}
bool USBControlTransferParameters::hasRequest() const
{
    return m_hasRequest;
}
unsigned USBControlTransferParameters::request() const
{
    DCHECK(m_hasRequest);
    return m_request;
}
void USBControlTransferParameters::setRequest(unsigned value)
{
    m_request = value;
    m_hasRequest = true;
}
bool USBControlTransferParameters::hasRequestType() const
{
    return !m_requestType.isNull();
}
String USBControlTransferParameters::requestType() const
{
    return m_requestType;
}
void USBControlTransferParameters::setRequestType(String value)
{
    m_requestType = value;
}
bool USBControlTransferParameters::hasValue() const
{
    return m_hasValue;
}
unsigned USBControlTransferParameters::value() const
{
    DCHECK(m_hasValue);
    return m_value;
}
void USBControlTransferParameters::setValue(unsigned value)
{
    m_value = value;
    m_hasValue = true;
}

DEFINE_TRACE(USBControlTransferParameters)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
