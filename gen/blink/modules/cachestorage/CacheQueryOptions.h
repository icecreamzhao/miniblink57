// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef CacheQueryOptions_h
#define CacheQueryOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT CacheQueryOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    CacheQueryOptions();
    virtual ~CacheQueryOptions();
    CacheQueryOptions(const CacheQueryOptions&);
    CacheQueryOptions& operator=(const CacheQueryOptions&);

    bool hasCacheName() const;
    String cacheName() const;
    void setCacheName(String);

    bool hasIgnoreMethod() const;
    bool ignoreMethod() const;
    void setIgnoreMethod(bool);

    bool hasIgnoreSearch() const;
    bool ignoreSearch() const;
    void setIgnoreSearch(bool);

    bool hasIgnoreVary() const;
    bool ignoreVary() const;
    void setIgnoreVary(bool);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_cacheName;
    bool m_hasIgnoreMethod = false;
    bool m_ignoreMethod;
    bool m_hasIgnoreSearch = false;
    bool m_ignoreSearch;
    bool m_hasIgnoreVary = false;
    bool m_ignoreVary;

    friend class V8CacheQueryOptions;
};

} // namespace blink

#endif // CacheQueryOptions_h
