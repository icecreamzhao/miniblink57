// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef MediaKeySystemConfiguration_h
#define MediaKeySystemConfiguration_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "modules/encryptedmedia/MediaKeySystemMediaCapability.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT MediaKeySystemConfiguration : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    MediaKeySystemConfiguration();
    virtual ~MediaKeySystemConfiguration();
    MediaKeySystemConfiguration(const MediaKeySystemConfiguration&);
    MediaKeySystemConfiguration& operator=(const MediaKeySystemConfiguration&);

    bool hasAudioCapabilities() const;
    const HeapVector<MediaKeySystemMediaCapability>& audioCapabilities() const;
    void setAudioCapabilities(const HeapVector<MediaKeySystemMediaCapability>&);

    bool hasDistinctiveIdentifier() const;
    String distinctiveIdentifier() const;
    void setDistinctiveIdentifier(String);

    bool hasInitDataTypes() const;
    const Vector<String>& initDataTypes() const;
    void setInitDataTypes(const Vector<String>&);

    bool hasLabel() const;
    String label() const;
    void setLabel(String);

    bool hasPersistentState() const;
    String persistentState() const;
    void setPersistentState(String);

    bool hasSessionTypes() const;
    const Vector<String>& sessionTypes() const;
    void setSessionTypes(const Vector<String>&);

    bool hasVideoCapabilities() const;
    const HeapVector<MediaKeySystemMediaCapability>& videoCapabilities() const;
    void setVideoCapabilities(const HeapVector<MediaKeySystemMediaCapability>&);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasAudioCapabilities = false;
    HeapVector<MediaKeySystemMediaCapability> m_audioCapabilities;
    String m_distinctiveIdentifier;
    bool m_hasInitDataTypes = false;
    Vector<String> m_initDataTypes;
    String m_label;
    String m_persistentState;
    bool m_hasSessionTypes = false;
    Vector<String> m_sessionTypes;
    bool m_hasVideoCapabilities = false;
    HeapVector<MediaKeySystemMediaCapability> m_videoCapabilities;

    friend class V8MediaKeySystemConfiguration;
};

} // namespace blink

#endif // MediaKeySystemConfiguration_h
