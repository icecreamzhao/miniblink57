// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef PannerOptions_h
#define PannerOptions_h

#include "modules/ModulesExport.h"
#include "modules/webaudio/AudioNodeOptions.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT PannerOptions : public AudioNodeOptions {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    PannerOptions();
    virtual ~PannerOptions();
    PannerOptions(const PannerOptions&);
    PannerOptions& operator=(const PannerOptions&);

    bool hasConeInnerAngle() const;
    double coneInnerAngle() const;
    void setConeInnerAngle(double);

    bool hasConeOuterAngle() const;
    double coneOuterAngle() const;
    void setConeOuterAngle(double);

    bool hasConeOuterGain() const;
    double coneOuterGain() const;
    void setConeOuterGain(double);

    bool hasDistanceModel() const;
    String distanceModel() const;
    void setDistanceModel(String);

    bool hasMaxDistance() const;
    double maxDistance() const;
    void setMaxDistance(double);

    bool hasOrientationX() const;
    float orientationX() const;
    void setOrientationX(float);

    bool hasOrientationY() const;
    float orientationY() const;
    void setOrientationY(float);

    bool hasOrientationZ() const;
    float orientationZ() const;
    void setOrientationZ(float);

    bool hasPanningModel() const;
    String panningModel() const;
    void setPanningModel(String);

    bool hasPositionX() const;
    float positionX() const;
    void setPositionX(float);

    bool hasPositionY() const;
    float positionY() const;
    void setPositionY(float);

    bool hasPositionZ() const;
    float positionZ() const;
    void setPositionZ(float);

    bool hasRefDistance() const;
    double refDistance() const;
    void setRefDistance(double);

    bool hasRolloffFactor() const;
    double rolloffFactor() const;
    void setRolloffFactor(double);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasConeInnerAngle = false;
    double m_coneInnerAngle;
    bool m_hasConeOuterAngle = false;
    double m_coneOuterAngle;
    bool m_hasConeOuterGain = false;
    double m_coneOuterGain;
    String m_distanceModel;
    bool m_hasMaxDistance = false;
    double m_maxDistance;
    bool m_hasOrientationX = false;
    float m_orientationX;
    bool m_hasOrientationY = false;
    float m_orientationY;
    bool m_hasOrientationZ = false;
    float m_orientationZ;
    String m_panningModel;
    bool m_hasPositionX = false;
    float m_positionX;
    bool m_hasPositionY = false;
    float m_positionY;
    bool m_hasPositionZ = false;
    float m_positionZ;
    bool m_hasRefDistance = false;
    double m_refDistance;
    bool m_hasRolloffFactor = false;
    double m_rolloffFactor;

    friend class V8PannerOptions;
};

} // namespace blink

#endif // PannerOptions_h
