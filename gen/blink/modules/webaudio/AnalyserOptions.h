// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef AnalyserOptions_h
#define AnalyserOptions_h

#include "modules/ModulesExport.h"
#include "modules/webaudio/AudioNodeOptions.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT AnalyserOptions : public AudioNodeOptions {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    AnalyserOptions();
    virtual ~AnalyserOptions();
    AnalyserOptions(const AnalyserOptions&);
    AnalyserOptions& operator=(const AnalyserOptions&);

    bool hasFftSize() const;
    unsigned fftSize() const;
    void setFftSize(unsigned);

    bool hasMaxDecibels() const;
    float maxDecibels() const;
    void setMaxDecibels(float);

    bool hasMinDecibels() const;
    float minDecibels() const;
    void setMinDecibels(float);

    bool hasSmoothingTimeConstant() const;
    float smoothingTimeConstant() const;
    void setSmoothingTimeConstant(float);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasFftSize = false;
    unsigned m_fftSize;
    bool m_hasMaxDecibels = false;
    float m_maxDecibels;
    bool m_hasMinDecibels = false;
    float m_minDecibels;
    bool m_hasSmoothingTimeConstant = false;
    float m_smoothingTimeConstant;

    friend class V8AnalyserOptions;
};

} // namespace blink

#endif // AnalyserOptions_h
