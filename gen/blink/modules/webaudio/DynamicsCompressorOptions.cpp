// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "DynamicsCompressorOptions.h"

namespace blink {

DynamicsCompressorOptions::DynamicsCompressorOptions()
{
}

DynamicsCompressorOptions::~DynamicsCompressorOptions() { }

DynamicsCompressorOptions::DynamicsCompressorOptions(const DynamicsCompressorOptions&) = default;

DynamicsCompressorOptions& DynamicsCompressorOptions::operator=(const DynamicsCompressorOptions&) = default;

bool DynamicsCompressorOptions::hasAttack() const
{
    return m_hasAttack;
}
float DynamicsCompressorOptions::attack() const
{
    DCHECK(m_hasAttack);
    return m_attack;
}
void DynamicsCompressorOptions::setAttack(float value)
{
    m_attack = value;
    m_hasAttack = true;
}
bool DynamicsCompressorOptions::hasKnee() const
{
    return m_hasKnee;
}
float DynamicsCompressorOptions::knee() const
{
    DCHECK(m_hasKnee);
    return m_knee;
}
void DynamicsCompressorOptions::setKnee(float value)
{
    m_knee = value;
    m_hasKnee = true;
}
bool DynamicsCompressorOptions::hasRatio() const
{
    return m_hasRatio;
}
float DynamicsCompressorOptions::ratio() const
{
    DCHECK(m_hasRatio);
    return m_ratio;
}
void DynamicsCompressorOptions::setRatio(float value)
{
    m_ratio = value;
    m_hasRatio = true;
}
bool DynamicsCompressorOptions::hasRelease() const
{
    return m_hasRelease;
}
float DynamicsCompressorOptions::release() const
{
    DCHECK(m_hasRelease);
    return m_release;
}
void DynamicsCompressorOptions::setRelease(float value)
{
    m_release = value;
    m_hasRelease = true;
}
bool DynamicsCompressorOptions::hasThreshold() const
{
    return m_hasThreshold;
}
float DynamicsCompressorOptions::threshold() const
{
    DCHECK(m_hasThreshold);
    return m_threshold;
}
void DynamicsCompressorOptions::setThreshold(float value)
{
    m_threshold = value;
    m_hasThreshold = true;
}

DEFINE_TRACE(DynamicsCompressorOptions)
{
    AudioNodeOptions::trace(visitor);
}

} // namespace blink
