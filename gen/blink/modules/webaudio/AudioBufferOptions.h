// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef AudioBufferOptions_h
#define AudioBufferOptions_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT AudioBufferOptions : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    AudioBufferOptions();
    virtual ~AudioBufferOptions();
    AudioBufferOptions(const AudioBufferOptions&);
    AudioBufferOptions& operator=(const AudioBufferOptions&);

    bool hasLength() const;
    unsigned length() const;
    void setLength(unsigned);

    bool hasNumberOfChannels() const;
    unsigned numberOfChannels() const;
    void setNumberOfChannels(unsigned);

    bool hasSampleRate() const;
    float sampleRate() const;
    void setSampleRate(float);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasLength = false;
    unsigned m_length;
    bool m_hasNumberOfChannels = false;
    unsigned m_numberOfChannels;
    bool m_hasSampleRate = false;
    float m_sampleRate;

    friend class V8AudioBufferOptions;
};

} // namespace blink

#endif // AudioBufferOptions_h
