// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "OscillatorOptions.h"

#include "modules/webaudio/PeriodicWave.h"

namespace blink {

OscillatorOptions::OscillatorOptions()
{
}

OscillatorOptions::~OscillatorOptions() { }

OscillatorOptions::OscillatorOptions(const OscillatorOptions&) = default;

OscillatorOptions& OscillatorOptions::operator=(const OscillatorOptions&) = default;

bool OscillatorOptions::hasDetune() const
{
    return m_hasDetune;
}
float OscillatorOptions::detune() const
{
    DCHECK(m_hasDetune);
    return m_detune;
}
void OscillatorOptions::setDetune(float value)
{
    m_detune = value;
    m_hasDetune = true;
}
bool OscillatorOptions::hasFrequency() const
{
    return m_hasFrequency;
}
float OscillatorOptions::frequency() const
{
    DCHECK(m_hasFrequency);
    return m_frequency;
}
void OscillatorOptions::setFrequency(float value)
{
    m_frequency = value;
    m_hasFrequency = true;
}
bool OscillatorOptions::hasPeriodicWave() const
{
    return m_periodicWave;
}
PeriodicWave* OscillatorOptions::periodicWave() const
{
    return m_periodicWave;
}
void OscillatorOptions::setPeriodicWave(PeriodicWave* value)
{
    m_periodicWave = value;
}
void OscillatorOptions::setPeriodicWaveToNull()
{
    m_periodicWave = Member<PeriodicWave>();
}
bool OscillatorOptions::hasType() const
{
    return !m_type.isNull();
}
String OscillatorOptions::type() const
{
    return m_type;
}
void OscillatorOptions::setType(String value)
{
    m_type = value;
}

DEFINE_TRACE(OscillatorOptions)
{
    visitor->trace(m_periodicWave);
    AudioNodeOptions::trace(visitor);
}

} // namespace blink
