// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef BiquadFilterOptions_h
#define BiquadFilterOptions_h

#include "modules/ModulesExport.h"
#include "modules/webaudio/AudioNodeOptions.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT BiquadFilterOptions : public AudioNodeOptions {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    BiquadFilterOptions();
    virtual ~BiquadFilterOptions();
    BiquadFilterOptions(const BiquadFilterOptions&);
    BiquadFilterOptions& operator=(const BiquadFilterOptions&);

    bool hasQ() const;
    float Q() const;
    void setQ(float);

    bool hasDetune() const;
    float detune() const;
    void setDetune(float);

    bool hasFrequency() const;
    float frequency() const;
    void setFrequency(float);

    bool hasGain() const;
    float gain() const;
    void setGain(float);

    bool hasType() const;
    String type() const;
    void setType(String);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasQ = false;
    float m_Q;
    bool m_hasDetune = false;
    float m_detune;
    bool m_hasFrequency = false;
    float m_frequency;
    bool m_hasGain = false;
    float m_gain;
    String m_type;

    friend class V8BiquadFilterOptions;
};

} // namespace blink

#endif // BiquadFilterOptions_h
