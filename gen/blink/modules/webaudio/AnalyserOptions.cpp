// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "AnalyserOptions.h"

namespace blink {

AnalyserOptions::AnalyserOptions()
{
    setFftSize(2048u);
    setMaxDecibels(-30);
    setMinDecibels(-100);
    setSmoothingTimeConstant(0.8);
}

AnalyserOptions::~AnalyserOptions() { }

AnalyserOptions::AnalyserOptions(const AnalyserOptions&) = default;

AnalyserOptions& AnalyserOptions::operator=(const AnalyserOptions&) = default;

bool AnalyserOptions::hasFftSize() const
{
    return m_hasFftSize;
}
unsigned AnalyserOptions::fftSize() const
{
    DCHECK(m_hasFftSize);
    return m_fftSize;
}
void AnalyserOptions::setFftSize(unsigned value)
{
    m_fftSize = value;
    m_hasFftSize = true;
}
bool AnalyserOptions::hasMaxDecibels() const
{
    return m_hasMaxDecibels;
}
float AnalyserOptions::maxDecibels() const
{
    DCHECK(m_hasMaxDecibels);
    return m_maxDecibels;
}
void AnalyserOptions::setMaxDecibels(float value)
{
    m_maxDecibels = value;
    m_hasMaxDecibels = true;
}
bool AnalyserOptions::hasMinDecibels() const
{
    return m_hasMinDecibels;
}
float AnalyserOptions::minDecibels() const
{
    DCHECK(m_hasMinDecibels);
    return m_minDecibels;
}
void AnalyserOptions::setMinDecibels(float value)
{
    m_minDecibels = value;
    m_hasMinDecibels = true;
}
bool AnalyserOptions::hasSmoothingTimeConstant() const
{
    return m_hasSmoothingTimeConstant;
}
float AnalyserOptions::smoothingTimeConstant() const
{
    DCHECK(m_hasSmoothingTimeConstant);
    return m_smoothingTimeConstant;
}
void AnalyserOptions::setSmoothingTimeConstant(float value)
{
    m_smoothingTimeConstant = value;
    m_hasSmoothingTimeConstant = true;
}

DEFINE_TRACE(AnalyserOptions)
{
    AudioNodeOptions::trace(visitor);
}

} // namespace blink
