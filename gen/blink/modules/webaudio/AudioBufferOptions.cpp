// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "AudioBufferOptions.h"

namespace blink {

AudioBufferOptions::AudioBufferOptions()
{
    setNumberOfChannels(1u);
}

AudioBufferOptions::~AudioBufferOptions() { }

AudioBufferOptions::AudioBufferOptions(const AudioBufferOptions&) = default;

AudioBufferOptions& AudioBufferOptions::operator=(const AudioBufferOptions&) = default;

bool AudioBufferOptions::hasLength() const
{
    return m_hasLength;
}
unsigned AudioBufferOptions::length() const
{
    DCHECK(m_hasLength);
    return m_length;
}
void AudioBufferOptions::setLength(unsigned value)
{
    m_length = value;
    m_hasLength = true;
}
bool AudioBufferOptions::hasNumberOfChannels() const
{
    return m_hasNumberOfChannels;
}
unsigned AudioBufferOptions::numberOfChannels() const
{
    DCHECK(m_hasNumberOfChannels);
    return m_numberOfChannels;
}
void AudioBufferOptions::setNumberOfChannels(unsigned value)
{
    m_numberOfChannels = value;
    m_hasNumberOfChannels = true;
}
bool AudioBufferOptions::hasSampleRate() const
{
    return m_hasSampleRate;
}
float AudioBufferOptions::sampleRate() const
{
    DCHECK(m_hasSampleRate);
    return m_sampleRate;
}
void AudioBufferOptions::setSampleRate(float value)
{
    m_sampleRate = value;
    m_hasSampleRate = true;
}

DEFINE_TRACE(AudioBufferOptions)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
