// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef RTCOfferOptions_h
#define RTCOfferOptions_h

#include "modules/ModulesExport.h"
#include "modules/peerconnection/RTCOfferAnswerOptions.h"
#include "platform/heap/Handle.h"

namespace blink {

class MODULES_EXPORT RTCOfferOptions : public RTCOfferAnswerOptions {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    RTCOfferOptions();
    virtual ~RTCOfferOptions();
    RTCOfferOptions(const RTCOfferOptions&);
    RTCOfferOptions& operator=(const RTCOfferOptions&);

    bool hasIceRestart() const;
    bool iceRestart() const;
    void setIceRestart(bool);

    bool hasOfferToReceiveAudio() const;
    int offerToReceiveAudio() const;
    void setOfferToReceiveAudio(int);

    bool hasOfferToReceiveVideo() const;
    int offerToReceiveVideo() const;
    void setOfferToReceiveVideo(int);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasIceRestart = false;
    bool m_iceRestart;
    bool m_hasOfferToReceiveAudio = false;
    int m_offerToReceiveAudio;
    bool m_hasOfferToReceiveVideo = false;
    int m_offerToReceiveVideo;

    friend class V8RTCOfferOptions;
};

} // namespace blink

#endif // RTCOfferOptions_h
