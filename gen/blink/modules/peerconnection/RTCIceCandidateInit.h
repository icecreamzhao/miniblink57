// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef RTCIceCandidateInit_h
#define RTCIceCandidateInit_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "platform/heap/Handle.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT RTCIceCandidateInit : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    RTCIceCandidateInit();
    virtual ~RTCIceCandidateInit();
    RTCIceCandidateInit(const RTCIceCandidateInit&);
    RTCIceCandidateInit& operator=(const RTCIceCandidateInit&);

    bool hasCandidate() const;
    String candidate() const;
    void setCandidate(String);

    bool hasSdpMLineIndex() const;
    unsigned sdpMLineIndex() const;
    void setSdpMLineIndex(unsigned);

    bool hasSdpMid() const;
    String sdpMid() const;
    void setSdpMid(String);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    String m_candidate;
    bool m_hasSdpMLineIndex = false;
    unsigned m_sdpMLineIndex;
    String m_sdpMid;

    friend class V8RTCIceCandidateInit;
};

} // namespace blink

#endif // RTCIceCandidateInit_h
