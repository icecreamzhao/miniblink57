// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "RTCOfferOptions.h"

namespace blink {

RTCOfferOptions::RTCOfferOptions()
{
    setIceRestart(false);
}

RTCOfferOptions::~RTCOfferOptions() { }

RTCOfferOptions::RTCOfferOptions(const RTCOfferOptions&) = default;

RTCOfferOptions& RTCOfferOptions::operator=(const RTCOfferOptions&) = default;

bool RTCOfferOptions::hasIceRestart() const
{
    return m_hasIceRestart;
}
bool RTCOfferOptions::iceRestart() const
{
    DCHECK(m_hasIceRestart);
    return m_iceRestart;
}
void RTCOfferOptions::setIceRestart(bool value)
{
    m_iceRestart = value;
    m_hasIceRestart = true;
}
bool RTCOfferOptions::hasOfferToReceiveAudio() const
{
    return m_hasOfferToReceiveAudio;
}
int RTCOfferOptions::offerToReceiveAudio() const
{
    DCHECK(m_hasOfferToReceiveAudio);
    return m_offerToReceiveAudio;
}
void RTCOfferOptions::setOfferToReceiveAudio(int value)
{
    m_offerToReceiveAudio = value;
    m_hasOfferToReceiveAudio = true;
}
bool RTCOfferOptions::hasOfferToReceiveVideo() const
{
    return m_hasOfferToReceiveVideo;
}
int RTCOfferOptions::offerToReceiveVideo() const
{
    DCHECK(m_hasOfferToReceiveVideo);
    return m_offerToReceiveVideo;
}
void RTCOfferOptions::setOfferToReceiveVideo(int value)
{
    m_offerToReceiveVideo = value;
    m_hasOfferToReceiveVideo = true;
}

DEFINE_TRACE(RTCOfferOptions)
{
    RTCOfferAnswerOptions::trace(visitor);
}

} // namespace blink
