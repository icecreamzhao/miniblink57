// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "RTCIceCandidateInit.h"

namespace blink {

RTCIceCandidateInit::RTCIceCandidateInit()
{
}

RTCIceCandidateInit::~RTCIceCandidateInit() { }

RTCIceCandidateInit::RTCIceCandidateInit(const RTCIceCandidateInit&) = default;

RTCIceCandidateInit& RTCIceCandidateInit::operator=(const RTCIceCandidateInit&) = default;

bool RTCIceCandidateInit::hasCandidate() const
{
    return !m_candidate.isNull();
}
String RTCIceCandidateInit::candidate() const
{
    return m_candidate;
}
void RTCIceCandidateInit::setCandidate(String value)
{
    m_candidate = value;
}
bool RTCIceCandidateInit::hasSdpMLineIndex() const
{
    return m_hasSdpMLineIndex;
}
unsigned RTCIceCandidateInit::sdpMLineIndex() const
{
    DCHECK(m_hasSdpMLineIndex);
    return m_sdpMLineIndex;
}
void RTCIceCandidateInit::setSdpMLineIndex(unsigned value)
{
    m_sdpMLineIndex = value;
    m_hasSdpMLineIndex = true;
}
bool RTCIceCandidateInit::hasSdpMid() const
{
    return !m_sdpMid.isNull();
}
String RTCIceCandidateInit::sdpMid() const
{
    return m_sdpMid;
}
void RTCIceCandidateInit::setSdpMid(String value)
{
    m_sdpMid = value;
}

DEFINE_TRACE(RTCIceCandidateInit)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
