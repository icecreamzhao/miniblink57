// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl

// clang-format on
#include "NFCWatchOptions.h"

namespace blink {

NFCWatchOptions::NFCWatchOptions()
{
    setMediaType(String(""));
    setMode(String("web-nfc-only"));
    setURL(String(""));
}

NFCWatchOptions::~NFCWatchOptions() { }

NFCWatchOptions::NFCWatchOptions(const NFCWatchOptions&) = default;

NFCWatchOptions& NFCWatchOptions::operator=(const NFCWatchOptions&) = default;

bool NFCWatchOptions::hasMediaType() const
{
    return !m_mediaType.isNull();
}
String NFCWatchOptions::mediaType() const
{
    return m_mediaType;
}
void NFCWatchOptions::setMediaType(String value)
{
    m_mediaType = value;
}
bool NFCWatchOptions::hasMode() const
{
    return !m_mode.isNull();
}
String NFCWatchOptions::mode() const
{
    return m_mode;
}
void NFCWatchOptions::setMode(String value)
{
    m_mode = value;
}
bool NFCWatchOptions::hasRecordType() const
{
    return !m_recordType.isNull();
}
String NFCWatchOptions::recordType() const
{
    return m_recordType;
}
void NFCWatchOptions::setRecordType(String value)
{
    m_recordType = value;
}
void NFCWatchOptions::setRecordTypeToNull()
{
    m_recordType = String();
}
bool NFCWatchOptions::hasURL() const
{
    return !m_url.isNull();
}
String NFCWatchOptions::url() const
{
    return m_url;
}
void NFCWatchOptions::setURL(String value)
{
    m_url = value;
}

DEFINE_TRACE(NFCWatchOptions)
{
    IDLDictionaryBase::trace(visitor);
}

} // namespace blink
