// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl

// clang-format on
#ifndef PhotoSettings_h
#define PhotoSettings_h

#include "bindings/core/v8/IDLDictionaryBase.h"
#include "modules/ModulesExport.h"
#include "modules/imagecapture/Point2D.h"
#include "platform/heap/Handle.h"
#include "wtf/Vector.h"
#include "wtf/text/WTFString.h"

namespace blink {

class MODULES_EXPORT PhotoSettings : public IDLDictionaryBase {
    DISALLOW_NEW_EXCEPT_PLACEMENT_NEW();

public:
    PhotoSettings();
    virtual ~PhotoSettings();
    PhotoSettings(const PhotoSettings&);
    PhotoSettings& operator=(const PhotoSettings&);

    bool hasBrightness() const;
    double brightness() const;
    void setBrightness(double);

    bool hasColorTemperature() const;
    double colorTemperature() const;
    void setColorTemperature(double);

    bool hasContrast() const;
    double contrast() const;
    void setContrast(double);

    bool hasExposureCompensation() const;
    double exposureCompensation() const;
    void setExposureCompensation(double);

    bool hasExposureMode() const;
    String exposureMode() const;
    void setExposureMode(String);

    bool hasFillLightMode() const;
    String fillLightMode() const;
    void setFillLightMode(String);

    bool hasFocusMode() const;
    String focusMode() const;
    void setFocusMode(String);

    bool hasImageHeight() const;
    double imageHeight() const;
    void setImageHeight(double);

    bool hasImageWidth() const;
    double imageWidth() const;
    void setImageWidth(double);

    bool hasIso() const;
    double iso() const;
    void setIso(double);

    bool hasPointsOfInterest() const;
    const HeapVector<Point2D>& pointsOfInterest() const;
    void setPointsOfInterest(const HeapVector<Point2D>&);

    bool hasRedEyeReduction() const;
    bool redEyeReduction() const;
    void setRedEyeReduction(bool);

    bool hasSaturation() const;
    double saturation() const;
    void setSaturation(double);

    bool hasSharpness() const;
    double sharpness() const;
    void setSharpness(double);

    bool hasWhiteBalanceMode() const;
    String whiteBalanceMode() const;
    void setWhiteBalanceMode(String);

    bool hasZoom() const;
    double zoom() const;
    void setZoom(double);

    v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
    DECLARE_VIRTUAL_TRACE();

private:
    bool m_hasBrightness = false;
    double m_brightness;
    bool m_hasColorTemperature = false;
    double m_colorTemperature;
    bool m_hasContrast = false;
    double m_contrast;
    bool m_hasExposureCompensation = false;
    double m_exposureCompensation;
    String m_exposureMode;
    String m_fillLightMode;
    String m_focusMode;
    bool m_hasImageHeight = false;
    double m_imageHeight;
    bool m_hasImageWidth = false;
    double m_imageWidth;
    bool m_hasIso = false;
    double m_iso;
    bool m_hasPointsOfInterest = false;
    HeapVector<Point2D> m_pointsOfInterest;
    bool m_hasRedEyeReduction = false;
    bool m_redEyeReduction;
    bool m_hasSaturation = false;
    double m_saturation;
    bool m_hasSharpness = false;
    double m_sharpness;
    String m_whiteBalanceMode;
    bool m_hasZoom = false;
    double m_zoom;

    friend class V8PhotoSettings;
};

} // namespace blink

#endif // PhotoSettings_h
